// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkComplexToModulusImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkComplexToModulusImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkComplexToModulusImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkComplexToModulusImageFilterJava
#endif
#ifdef SWIGLUA
%module itkComplexToModulusImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkComplexToModulusImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkComplexToModulusImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkComplexToModulusImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkComplexToModulusImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkComplexToModulusImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkComplexToModulusImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkComplexToModulusImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkComplexToModulusImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkComplexToModulusImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkComplexToModulusImageFilterPython
#endif
#ifdef SWIGR
%module itkComplexToModulusImageFilterR
#endif
#ifdef SWIGRUBY
%module itkComplexToModulusImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkComplexToModulusImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkComplexToModulusImageFilterTcl
#endif
#ifdef SWIGXML
%module itkComplexToModulusImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "FFT.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkInPlaceImageFilterB.i
%import wrap_ITKRegions.i


%include itk.i
%include wrap_itkComplexToModulusImageFilter_ext.i


 class itkComplexToModulusImageFilterICF2IF2_Pointer {
   public:
     itkComplexToModulusImageFilterICF2IF2_Pointer();
     itkComplexToModulusImageFilterICF2IF2_Pointer(itkComplexToModulusImageFilterICF2IF2_Pointer const & p);
     itkComplexToModulusImageFilterICF2IF2_Pointer(itkComplexToModulusImageFilterICF2IF2 * p);
     ~itkComplexToModulusImageFilterICF2IF2_Pointer();
     itkComplexToModulusImageFilterICF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkComplexToModulusImageFilterICF2IF2 * GetPointer() const;
     bool operator<(itkComplexToModulusImageFilterICF2IF2_Pointer const & r) const;
     bool operator>(itkComplexToModulusImageFilterICF2IF2_Pointer const & r) const;
     bool operator<=(itkComplexToModulusImageFilterICF2IF2_Pointer const & r) const;
     bool operator>=(itkComplexToModulusImageFilterICF2IF2_Pointer const & r) const;
     itkComplexToModulusImageFilterICF2IF2_Pointer & operator=(itkComplexToModulusImageFilterICF2IF2_Pointer const & r);
     itkComplexToModulusImageFilterICF2IF2_Pointer & operator=(itkComplexToModulusImageFilterICF2IF2 * r);
     itkComplexToModulusImageFilterICF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkComplexToModulusImageFilterICF2IF2_Superclass : public itkInPlaceImageFilterICF2IF2 {
   public:
     static itkComplexToModulusImageFilterICF2IF2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Function::ComplexToModulus< std::complex< float >, float > & GetFunctor();
     itk::Function::ComplexToModulus< std::complex< float >, float > const & GetFunctor() const;
     void SetFunctor(itk::Function::ComplexToModulus< std::complex< float >, float > const & functor);
   private:
     itkComplexToModulusImageFilterICF2IF2_Superclass(itkComplexToModulusImageFilterICF2IF2_Superclass const & arg0);
     void operator=(itkComplexToModulusImageFilterICF2IF2_Superclass const & arg0);
   protected:
     itkComplexToModulusImageFilterICF2IF2_Superclass();
     ~itkComplexToModulusImageFilterICF2IF2_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkComplexToModulusImageFilterICF2IF2_Superclass_Pointer {
   public:
     itkComplexToModulusImageFilterICF2IF2_Superclass_Pointer();
     itkComplexToModulusImageFilterICF2IF2_Superclass_Pointer(itkComplexToModulusImageFilterICF2IF2_Superclass_Pointer const & p);
     itkComplexToModulusImageFilterICF2IF2_Superclass_Pointer(itkComplexToModulusImageFilterICF2IF2_Superclass * p);
     ~itkComplexToModulusImageFilterICF2IF2_Superclass_Pointer();
     itkComplexToModulusImageFilterICF2IF2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkComplexToModulusImageFilterICF2IF2_Superclass * GetPointer() const;
     bool operator<(itkComplexToModulusImageFilterICF2IF2_Superclass_Pointer const & r) const;
     bool operator>(itkComplexToModulusImageFilterICF2IF2_Superclass_Pointer const & r) const;
     bool operator<=(itkComplexToModulusImageFilterICF2IF2_Superclass_Pointer const & r) const;
     bool operator>=(itkComplexToModulusImageFilterICF2IF2_Superclass_Pointer const & r) const;
     itkComplexToModulusImageFilterICF2IF2_Superclass_Pointer & operator=(itkComplexToModulusImageFilterICF2IF2_Superclass_Pointer const & r);
     itkComplexToModulusImageFilterICF2IF2_Superclass_Pointer & operator=(itkComplexToModulusImageFilterICF2IF2_Superclass * r);
     itkComplexToModulusImageFilterICF2IF2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkComplexToModulusImageFilterICF3IF3_Pointer {
   public:
     itkComplexToModulusImageFilterICF3IF3_Pointer();
     itkComplexToModulusImageFilterICF3IF3_Pointer(itkComplexToModulusImageFilterICF3IF3_Pointer const & p);
     itkComplexToModulusImageFilterICF3IF3_Pointer(itkComplexToModulusImageFilterICF3IF3 * p);
     ~itkComplexToModulusImageFilterICF3IF3_Pointer();
     itkComplexToModulusImageFilterICF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkComplexToModulusImageFilterICF3IF3 * GetPointer() const;
     bool operator<(itkComplexToModulusImageFilterICF3IF3_Pointer const & r) const;
     bool operator>(itkComplexToModulusImageFilterICF3IF3_Pointer const & r) const;
     bool operator<=(itkComplexToModulusImageFilterICF3IF3_Pointer const & r) const;
     bool operator>=(itkComplexToModulusImageFilterICF3IF3_Pointer const & r) const;
     itkComplexToModulusImageFilterICF3IF3_Pointer & operator=(itkComplexToModulusImageFilterICF3IF3_Pointer const & r);
     itkComplexToModulusImageFilterICF3IF3_Pointer & operator=(itkComplexToModulusImageFilterICF3IF3 * r);
     itkComplexToModulusImageFilterICF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkComplexToModulusImageFilterICF3IF3_Superclass : public itkInPlaceImageFilterICF3IF3 {
   public:
     static itkComplexToModulusImageFilterICF3IF3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Function::ComplexToModulus< std::complex< float >, float > & GetFunctor();
     itk::Function::ComplexToModulus< std::complex< float >, float > const & GetFunctor() const;
     void SetFunctor(itk::Function::ComplexToModulus< std::complex< float >, float > const & functor);
   private:
     itkComplexToModulusImageFilterICF3IF3_Superclass(itkComplexToModulusImageFilterICF3IF3_Superclass const & arg0);
     void operator=(itkComplexToModulusImageFilterICF3IF3_Superclass const & arg0);
   protected:
     itkComplexToModulusImageFilterICF3IF3_Superclass();
     ~itkComplexToModulusImageFilterICF3IF3_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkComplexToModulusImageFilterICF3IF3_Superclass_Pointer {
   public:
     itkComplexToModulusImageFilterICF3IF3_Superclass_Pointer();
     itkComplexToModulusImageFilterICF3IF3_Superclass_Pointer(itkComplexToModulusImageFilterICF3IF3_Superclass_Pointer const & p);
     itkComplexToModulusImageFilterICF3IF3_Superclass_Pointer(itkComplexToModulusImageFilterICF3IF3_Superclass * p);
     ~itkComplexToModulusImageFilterICF3IF3_Superclass_Pointer();
     itkComplexToModulusImageFilterICF3IF3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkComplexToModulusImageFilterICF3IF3_Superclass * GetPointer() const;
     bool operator<(itkComplexToModulusImageFilterICF3IF3_Superclass_Pointer const & r) const;
     bool operator>(itkComplexToModulusImageFilterICF3IF3_Superclass_Pointer const & r) const;
     bool operator<=(itkComplexToModulusImageFilterICF3IF3_Superclass_Pointer const & r) const;
     bool operator>=(itkComplexToModulusImageFilterICF3IF3_Superclass_Pointer const & r) const;
     itkComplexToModulusImageFilterICF3IF3_Superclass_Pointer & operator=(itkComplexToModulusImageFilterICF3IF3_Superclass_Pointer const & r);
     itkComplexToModulusImageFilterICF3IF3_Superclass_Pointer & operator=(itkComplexToModulusImageFilterICF3IF3_Superclass * r);
     itkComplexToModulusImageFilterICF3IF3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkComplexToModulusImageFilterICF2IF2 : public itkComplexToModulusImageFilterICF2IF2_Superclass {
   public:
     enum  {  InputMultiplyOperatorCheck = 1 };
     static itkComplexToModulusImageFilterICF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkComplexToModulusImageFilterICF2IF2(itkComplexToModulusImageFilterICF2IF2 const & arg0);
     void operator=(itkComplexToModulusImageFilterICF2IF2 const & arg0);
   protected:
     itkComplexToModulusImageFilterICF2IF2();
     ~itkComplexToModulusImageFilterICF2IF2();
 };


 class itkComplexToModulusImageFilterICF3IF3 : public itkComplexToModulusImageFilterICF3IF3_Superclass {
   public:
     enum  {  InputMultiplyOperatorCheck = 1 };
     static itkComplexToModulusImageFilterICF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkComplexToModulusImageFilterICF3IF3(itkComplexToModulusImageFilterICF3IF3 const & arg0);
     void operator=(itkComplexToModulusImageFilterICF3IF3 const & arg0);
   protected:
     itkComplexToModulusImageFilterICF3IF3();
     ~itkComplexToModulusImageFilterICF3IF3();
 };


