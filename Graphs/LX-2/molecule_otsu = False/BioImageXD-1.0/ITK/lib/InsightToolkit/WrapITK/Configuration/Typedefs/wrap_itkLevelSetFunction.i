// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkLevelSetFunctionChicken
#endif
#ifdef SWIGCSHARP
%module itkLevelSetFunctionCsharp
#endif
#ifdef SWIGGUILE
%module itkLevelSetFunctionGuile
#endif
#ifdef SWIGJAVA
%module itkLevelSetFunctionJava
#endif
#ifdef SWIGLUA
%module itkLevelSetFunctionLua
#endif
#ifdef SWIGMODULA3
%module itkLevelSetFunctionModula3
#endif
#ifdef SWIGMZSCHEME
%module itkLevelSetFunctionMzscheme
#endif
#ifdef SWIGOCAML
%module itkLevelSetFunctionOcaml
#endif
#ifdef SWIGPERL
%module itkLevelSetFunctionPerl
#endif
#ifdef SWIGPERL5
%module itkLevelSetFunctionPerl5
#endif
#ifdef SWIGPHP
%module itkLevelSetFunctionPhp
#endif
#ifdef SWIGPHP4
%module itkLevelSetFunctionPhp4
#endif
#ifdef SWIGPHP5
%module itkLevelSetFunctionPhp5
#endif
#ifdef SWIGPIKE
%module itkLevelSetFunctionPike
#endif
#ifdef SWIGPYTHON
%module itkLevelSetFunctionPython
#endif
#ifdef SWIGR
%module itkLevelSetFunctionR
#endif
#ifdef SWIGRUBY
%module itkLevelSetFunctionRuby
#endif
#ifdef SWIGSEXP
%module itkLevelSetFunctionSexp
#endif
#ifdef SWIGTCL
%module itkLevelSetFunctionTcl
#endif
#ifdef SWIGXML
%module itkLevelSetFunctionXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Numerics.includes"
#include "LevelSet.includes"
%}


%{
%}




%import wrap_itkFixedArray.i
%import wrap_itkVector.i
%import wrap_itkFiniteDifferenceFunction.i
%import wrap_ITKCommonBase.i
%import wrap_itkSize.i


%include itk.i
%include wrap_itkLevelSetFunction_ext.i


 class itkLevelSetFunctionID2 : public itkFiniteDifferenceFunctionID2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkLevelSetFunctionID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual itkFixedArrayD2 AdvectionField(itk::ConstNeighborhoodIterator< itk::Image< double, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 2u > > > const & arg0, itkVectorF2 const & arg1, itkLevelSetFunctionID2::GlobalDataStruct * arg2 = 0) const;
     virtual double PropagationSpeed(itk::ConstNeighborhoodIterator< itk::Image< double, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 2u > > > const & arg0, itkVectorF2 const & arg1, itkLevelSetFunctionID2::GlobalDataStruct * arg2 = 0) const;
     virtual double CurvatureSpeed(itk::ConstNeighborhoodIterator< itk::Image< double, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 2u > > > const & arg0, itkVectorF2 const & arg1, itkLevelSetFunctionID2::GlobalDataStruct * arg2 = 0) const;
     virtual double LaplacianSmoothingSpeed(itk::ConstNeighborhoodIterator< itk::Image< double, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 2u > > > const & arg0, itkVectorF2 const & arg1, itkLevelSetFunctionID2::GlobalDataStruct * arg2 = 0) const;
     virtual void SetAdvectionWeight(double const a);
     double GetAdvectionWeight() const;
     virtual void SetPropagationWeight(double const p);
     double GetPropagationWeight() const;
     virtual void SetCurvatureWeight(double const c);
     double GetCurvatureWeight() const;
     void SetLaplacianSmoothingWeight(double const c);
     double GetLaplacianSmoothingWeight() const;
     void SetEpsilonMagnitude(double const e);
     double GetEpsilonMagnitude() const;
     virtual double ComputeUpdate(itk::ConstNeighborhoodIterator< itk::Image< double, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 2u > > > const & neighborhood, void * globalData, itkVectorF2 const & arg2 = ( 0.0 ));
     virtual double ComputeGlobalTimeStep(void * GlobalData) const;
     virtual void * GetGlobalDataPointer() const;
     virtual void Initialize(itkSize2 const & r);
     virtual void ReleaseGlobalDataPointer(void * GlobalData) const;
     virtual double ComputeCurvatureTerm(itk::ConstNeighborhoodIterator< itk::Image< double, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 2u > > > const & arg0, itkVectorF2 const & arg1, itkLevelSetFunctionID2::GlobalDataStruct * gd = 0);
     virtual double ComputeMeanCurvature(itk::ConstNeighborhoodIterator< itk::Image< double, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 2u > > > const & arg0, itkVectorF2 const & arg1, itkLevelSetFunctionID2::GlobalDataStruct * gd = 0);
     virtual double ComputeMinimalCurvature(itk::ConstNeighborhoodIterator< itk::Image< double, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 2u > > > const & arg0, itkVectorF2 const & arg1, itkLevelSetFunctionID2::GlobalDataStruct * gd = 0);
     virtual double Compute3DMinimalCurvature(itk::ConstNeighborhoodIterator< itk::Image< double, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 2u > > > const & arg0, itkVectorF2 const & arg1, itkLevelSetFunctionID2::GlobalDataStruct * gd = 0);
     void SetUseMinimalCurvature(bool b);
     bool GetUseMinimalCurvature() const;
     void UseMinimalCurvatureOn();
     void UseMinimalCurvatureOff();
     static void SetMaximumCurvatureTimeStep(double n);
     static double GetMaximumCurvatureTimeStep();
     static void SetMaximumPropagationTimeStep(double n);
     static double GetMaximumPropagationTimeStep();
   private:
     itkLevelSetFunctionID2(itkLevelSetFunctionID2 const & arg0);
     void operator=(itkLevelSetFunctionID2 const & arg0);
   protected:
     itkLevelSetFunctionID2();
     ~itkLevelSetFunctionID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & s, itkIndent indent) const;
     static itkFixedArrayD2 InitializeZeroVectorConstant();
 };


 class itkLevelSetFunctionID2_Pointer {
   public:
     itkLevelSetFunctionID2_Pointer();
     itkLevelSetFunctionID2_Pointer(itkLevelSetFunctionID2_Pointer const & p);
     itkLevelSetFunctionID2_Pointer(itkLevelSetFunctionID2 * p);
     ~itkLevelSetFunctionID2_Pointer();
     itkLevelSetFunctionID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkLevelSetFunctionID2 * GetPointer() const;
     bool operator<(itkLevelSetFunctionID2_Pointer const & r) const;
     bool operator>(itkLevelSetFunctionID2_Pointer const & r) const;
     bool operator<=(itkLevelSetFunctionID2_Pointer const & r) const;
     bool operator>=(itkLevelSetFunctionID2_Pointer const & r) const;
     itkLevelSetFunctionID2_Pointer & operator=(itkLevelSetFunctionID2_Pointer const & r);
     itkLevelSetFunctionID2_Pointer & operator=(itkLevelSetFunctionID2 * r);
     itkLevelSetFunctionID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkLevelSetFunctionID3 : public itkFiniteDifferenceFunctionID3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkLevelSetFunctionID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual itkFixedArrayD3 AdvectionField(itk::ConstNeighborhoodIterator< itk::Image< double, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 3u > > > const & arg0, itkVectorF3 const & arg1, itkLevelSetFunctionID3::GlobalDataStruct * arg2 = 0) const;
     virtual double PropagationSpeed(itk::ConstNeighborhoodIterator< itk::Image< double, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 3u > > > const & arg0, itkVectorF3 const & arg1, itkLevelSetFunctionID3::GlobalDataStruct * arg2 = 0) const;
     virtual double CurvatureSpeed(itk::ConstNeighborhoodIterator< itk::Image< double, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 3u > > > const & arg0, itkVectorF3 const & arg1, itkLevelSetFunctionID3::GlobalDataStruct * arg2 = 0) const;
     virtual double LaplacianSmoothingSpeed(itk::ConstNeighborhoodIterator< itk::Image< double, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 3u > > > const & arg0, itkVectorF3 const & arg1, itkLevelSetFunctionID3::GlobalDataStruct * arg2 = 0) const;
     virtual void SetAdvectionWeight(double const a);
     double GetAdvectionWeight() const;
     virtual void SetPropagationWeight(double const p);
     double GetPropagationWeight() const;
     virtual void SetCurvatureWeight(double const c);
     double GetCurvatureWeight() const;
     void SetLaplacianSmoothingWeight(double const c);
     double GetLaplacianSmoothingWeight() const;
     void SetEpsilonMagnitude(double const e);
     double GetEpsilonMagnitude() const;
     virtual double ComputeUpdate(itk::ConstNeighborhoodIterator< itk::Image< double, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 3u > > > const & neighborhood, void * globalData, itkVectorF3 const & arg2 = ( 0.0 ));
     virtual double ComputeGlobalTimeStep(void * GlobalData) const;
     virtual void * GetGlobalDataPointer() const;
     virtual void Initialize(itkSize3 const & r);
     virtual void ReleaseGlobalDataPointer(void * GlobalData) const;
     virtual double ComputeCurvatureTerm(itk::ConstNeighborhoodIterator< itk::Image< double, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 3u > > > const & arg0, itkVectorF3 const & arg1, itkLevelSetFunctionID3::GlobalDataStruct * gd = 0);
     virtual double ComputeMeanCurvature(itk::ConstNeighborhoodIterator< itk::Image< double, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 3u > > > const & arg0, itkVectorF3 const & arg1, itkLevelSetFunctionID3::GlobalDataStruct * gd = 0);
     virtual double ComputeMinimalCurvature(itk::ConstNeighborhoodIterator< itk::Image< double, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 3u > > > const & arg0, itkVectorF3 const & arg1, itkLevelSetFunctionID3::GlobalDataStruct * gd = 0);
     virtual double Compute3DMinimalCurvature(itk::ConstNeighborhoodIterator< itk::Image< double, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 3u > > > const & arg0, itkVectorF3 const & arg1, itkLevelSetFunctionID3::GlobalDataStruct * gd = 0);
     void SetUseMinimalCurvature(bool b);
     bool GetUseMinimalCurvature() const;
     void UseMinimalCurvatureOn();
     void UseMinimalCurvatureOff();
     static void SetMaximumCurvatureTimeStep(double n);
     static double GetMaximumCurvatureTimeStep();
     static void SetMaximumPropagationTimeStep(double n);
     static double GetMaximumPropagationTimeStep();
   private:
     itkLevelSetFunctionID3(itkLevelSetFunctionID3 const & arg0);
     void operator=(itkLevelSetFunctionID3 const & arg0);
   protected:
     itkLevelSetFunctionID3();
     ~itkLevelSetFunctionID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & s, itkIndent indent) const;
     static itkFixedArrayD3 InitializeZeroVectorConstant();
 };


 class itkLevelSetFunctionID3_Pointer {
   public:
     itkLevelSetFunctionID3_Pointer();
     itkLevelSetFunctionID3_Pointer(itkLevelSetFunctionID3_Pointer const & p);
     itkLevelSetFunctionID3_Pointer(itkLevelSetFunctionID3 * p);
     ~itkLevelSetFunctionID3_Pointer();
     itkLevelSetFunctionID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkLevelSetFunctionID3 * GetPointer() const;
     bool operator<(itkLevelSetFunctionID3_Pointer const & r) const;
     bool operator>(itkLevelSetFunctionID3_Pointer const & r) const;
     bool operator<=(itkLevelSetFunctionID3_Pointer const & r) const;
     bool operator>=(itkLevelSetFunctionID3_Pointer const & r) const;
     itkLevelSetFunctionID3_Pointer & operator=(itkLevelSetFunctionID3_Pointer const & r);
     itkLevelSetFunctionID3_Pointer & operator=(itkLevelSetFunctionID3 * r);
     itkLevelSetFunctionID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkLevelSetFunctionIF2 : public itkFiniteDifferenceFunctionIF2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkLevelSetFunctionIF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual itkFixedArrayF2 AdvectionField(itk::ConstNeighborhoodIterator< itk::Image< float, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 2u > > > const & arg0, itkVectorF2 const & arg1, itkLevelSetFunctionIF2::GlobalDataStruct * arg2 = 0) const;
     virtual float PropagationSpeed(itk::ConstNeighborhoodIterator< itk::Image< float, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 2u > > > const & arg0, itkVectorF2 const & arg1, itkLevelSetFunctionIF2::GlobalDataStruct * arg2 = 0) const;
     virtual float CurvatureSpeed(itk::ConstNeighborhoodIterator< itk::Image< float, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 2u > > > const & arg0, itkVectorF2 const & arg1, itkLevelSetFunctionIF2::GlobalDataStruct * arg2 = 0) const;
     virtual float LaplacianSmoothingSpeed(itk::ConstNeighborhoodIterator< itk::Image< float, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 2u > > > const & arg0, itkVectorF2 const & arg1, itkLevelSetFunctionIF2::GlobalDataStruct * arg2 = 0) const;
     virtual void SetAdvectionWeight(float const a);
     float GetAdvectionWeight() const;
     virtual void SetPropagationWeight(float const p);
     float GetPropagationWeight() const;
     virtual void SetCurvatureWeight(float const c);
     float GetCurvatureWeight() const;
     void SetLaplacianSmoothingWeight(float const c);
     float GetLaplacianSmoothingWeight() const;
     void SetEpsilonMagnitude(float const e);
     float GetEpsilonMagnitude() const;
     virtual float ComputeUpdate(itk::ConstNeighborhoodIterator< itk::Image< float, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 2u > > > const & neighborhood, void * globalData, itkVectorF2 const & arg2 = ( 0.0 ));
     virtual double ComputeGlobalTimeStep(void * GlobalData) const;
     virtual void * GetGlobalDataPointer() const;
     virtual void Initialize(itkSize2 const & r);
     virtual void ReleaseGlobalDataPointer(void * GlobalData) const;
     virtual float ComputeCurvatureTerm(itk::ConstNeighborhoodIterator< itk::Image< float, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 2u > > > const & arg0, itkVectorF2 const & arg1, itkLevelSetFunctionIF2::GlobalDataStruct * gd = 0);
     virtual float ComputeMeanCurvature(itk::ConstNeighborhoodIterator< itk::Image< float, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 2u > > > const & arg0, itkVectorF2 const & arg1, itkLevelSetFunctionIF2::GlobalDataStruct * gd = 0);
     virtual float ComputeMinimalCurvature(itk::ConstNeighborhoodIterator< itk::Image< float, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 2u > > > const & arg0, itkVectorF2 const & arg1, itkLevelSetFunctionIF2::GlobalDataStruct * gd = 0);
     virtual float Compute3DMinimalCurvature(itk::ConstNeighborhoodIterator< itk::Image< float, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 2u > > > const & arg0, itkVectorF2 const & arg1, itkLevelSetFunctionIF2::GlobalDataStruct * gd = 0);
     void SetUseMinimalCurvature(bool b);
     bool GetUseMinimalCurvature() const;
     void UseMinimalCurvatureOn();
     void UseMinimalCurvatureOff();
     static void SetMaximumCurvatureTimeStep(double n);
     static double GetMaximumCurvatureTimeStep();
     static void SetMaximumPropagationTimeStep(double n);
     static double GetMaximumPropagationTimeStep();
   private:
     itkLevelSetFunctionIF2(itkLevelSetFunctionIF2 const & arg0);
     void operator=(itkLevelSetFunctionIF2 const & arg0);
   protected:
     itkLevelSetFunctionIF2();
     ~itkLevelSetFunctionIF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & s, itkIndent indent) const;
     static itkFixedArrayF2 InitializeZeroVectorConstant();
 };


 class itkLevelSetFunctionIF2_Pointer {
   public:
     itkLevelSetFunctionIF2_Pointer();
     itkLevelSetFunctionIF2_Pointer(itkLevelSetFunctionIF2_Pointer const & p);
     itkLevelSetFunctionIF2_Pointer(itkLevelSetFunctionIF2 * p);
     ~itkLevelSetFunctionIF2_Pointer();
     itkLevelSetFunctionIF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkLevelSetFunctionIF2 * GetPointer() const;
     bool operator<(itkLevelSetFunctionIF2_Pointer const & r) const;
     bool operator>(itkLevelSetFunctionIF2_Pointer const & r) const;
     bool operator<=(itkLevelSetFunctionIF2_Pointer const & r) const;
     bool operator>=(itkLevelSetFunctionIF2_Pointer const & r) const;
     itkLevelSetFunctionIF2_Pointer & operator=(itkLevelSetFunctionIF2_Pointer const & r);
     itkLevelSetFunctionIF2_Pointer & operator=(itkLevelSetFunctionIF2 * r);
     itkLevelSetFunctionIF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkLevelSetFunctionIF3 : public itkFiniteDifferenceFunctionIF3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkLevelSetFunctionIF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual itkFixedArrayF3 AdvectionField(itk::ConstNeighborhoodIterator< itk::Image< float, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 3u > > > const & arg0, itkVectorF3 const & arg1, itkLevelSetFunctionIF3::GlobalDataStruct * arg2 = 0) const;
     virtual float PropagationSpeed(itk::ConstNeighborhoodIterator< itk::Image< float, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 3u > > > const & arg0, itkVectorF3 const & arg1, itkLevelSetFunctionIF3::GlobalDataStruct * arg2 = 0) const;
     virtual float CurvatureSpeed(itk::ConstNeighborhoodIterator< itk::Image< float, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 3u > > > const & arg0, itkVectorF3 const & arg1, itkLevelSetFunctionIF3::GlobalDataStruct * arg2 = 0) const;
     virtual float LaplacianSmoothingSpeed(itk::ConstNeighborhoodIterator< itk::Image< float, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 3u > > > const & arg0, itkVectorF3 const & arg1, itkLevelSetFunctionIF3::GlobalDataStruct * arg2 = 0) const;
     virtual void SetAdvectionWeight(float const a);
     float GetAdvectionWeight() const;
     virtual void SetPropagationWeight(float const p);
     float GetPropagationWeight() const;
     virtual void SetCurvatureWeight(float const c);
     float GetCurvatureWeight() const;
     void SetLaplacianSmoothingWeight(float const c);
     float GetLaplacianSmoothingWeight() const;
     void SetEpsilonMagnitude(float const e);
     float GetEpsilonMagnitude() const;
     virtual float ComputeUpdate(itk::ConstNeighborhoodIterator< itk::Image< float, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 3u > > > const & neighborhood, void * globalData, itkVectorF3 const & arg2 = ( 0.0 ));
     virtual double ComputeGlobalTimeStep(void * GlobalData) const;
     virtual void * GetGlobalDataPointer() const;
     virtual void Initialize(itkSize3 const & r);
     virtual void ReleaseGlobalDataPointer(void * GlobalData) const;
     virtual float ComputeCurvatureTerm(itk::ConstNeighborhoodIterator< itk::Image< float, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 3u > > > const & arg0, itkVectorF3 const & arg1, itkLevelSetFunctionIF3::GlobalDataStruct * gd = 0);
     virtual float ComputeMeanCurvature(itk::ConstNeighborhoodIterator< itk::Image< float, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 3u > > > const & arg0, itkVectorF3 const & arg1, itkLevelSetFunctionIF3::GlobalDataStruct * gd = 0);
     virtual float ComputeMinimalCurvature(itk::ConstNeighborhoodIterator< itk::Image< float, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 3u > > > const & arg0, itkVectorF3 const & arg1, itkLevelSetFunctionIF3::GlobalDataStruct * gd = 0);
     virtual float Compute3DMinimalCurvature(itk::ConstNeighborhoodIterator< itk::Image< float, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 3u > > > const & arg0, itkVectorF3 const & arg1, itkLevelSetFunctionIF3::GlobalDataStruct * gd = 0);
     void SetUseMinimalCurvature(bool b);
     bool GetUseMinimalCurvature() const;
     void UseMinimalCurvatureOn();
     void UseMinimalCurvatureOff();
     static void SetMaximumCurvatureTimeStep(double n);
     static double GetMaximumCurvatureTimeStep();
     static void SetMaximumPropagationTimeStep(double n);
     static double GetMaximumPropagationTimeStep();
   private:
     itkLevelSetFunctionIF3(itkLevelSetFunctionIF3 const & arg0);
     void operator=(itkLevelSetFunctionIF3 const & arg0);
   protected:
     itkLevelSetFunctionIF3();
     ~itkLevelSetFunctionIF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & s, itkIndent indent) const;
     static itkFixedArrayF3 InitializeZeroVectorConstant();
 };


 class itkLevelSetFunctionIF3_Pointer {
   public:
     itkLevelSetFunctionIF3_Pointer();
     itkLevelSetFunctionIF3_Pointer(itkLevelSetFunctionIF3_Pointer const & p);
     itkLevelSetFunctionIF3_Pointer(itkLevelSetFunctionIF3 * p);
     ~itkLevelSetFunctionIF3_Pointer();
     itkLevelSetFunctionIF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkLevelSetFunctionIF3 * GetPointer() const;
     bool operator<(itkLevelSetFunctionIF3_Pointer const & r) const;
     bool operator>(itkLevelSetFunctionIF3_Pointer const & r) const;
     bool operator<=(itkLevelSetFunctionIF3_Pointer const & r) const;
     bool operator>=(itkLevelSetFunctionIF3_Pointer const & r) const;
     itkLevelSetFunctionIF3_Pointer & operator=(itkLevelSetFunctionIF3_Pointer const & r);
     itkLevelSetFunctionIF3_Pointer & operator=(itkLevelSetFunctionIF3 * r);
     itkLevelSetFunctionIF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


