// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkMinMaxCurvatureFlowImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkMinMaxCurvatureFlowImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkMinMaxCurvatureFlowImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkMinMaxCurvatureFlowImageFilterJava
#endif
#ifdef SWIGLUA
%module itkMinMaxCurvatureFlowImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkMinMaxCurvatureFlowImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkMinMaxCurvatureFlowImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkMinMaxCurvatureFlowImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkMinMaxCurvatureFlowImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkMinMaxCurvatureFlowImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkMinMaxCurvatureFlowImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkMinMaxCurvatureFlowImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkMinMaxCurvatureFlowImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkMinMaxCurvatureFlowImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkMinMaxCurvatureFlowImageFilterPython
#endif
#ifdef SWIGR
%module itkMinMaxCurvatureFlowImageFilterR
#endif
#ifdef SWIGRUBY
%module itkMinMaxCurvatureFlowImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkMinMaxCurvatureFlowImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkMinMaxCurvatureFlowImageFilterTcl
#endif
#ifdef SWIGXML
%module itkMinMaxCurvatureFlowImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Denoising.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkCurvatureFlowImageFilter.i


%include itk.i
%include wrap_itkMinMaxCurvatureFlowImageFilter_ext.i


 class itkMinMaxCurvatureFlowImageFilterID2ID2 : public itkCurvatureFlowImageFilterID2ID2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  UnsignedLongConvertibleToOutputCheck = 1 };
     enum  {  OutputLessThanComparableCheck = 1 };
     enum  {  LongConvertibleToOutputCheck = 1 };
     enum  {  OutputDoubleComparableCheck = 1 };
     enum  {  OutputDoubleMultiplyAndAssignOperatorCheck = 1 };
     enum  {  OutputGreaterThanUnsignedLongCheck = 1 };
     enum  {  UnsignedLongOutputAditiveOperatorsCheck = 1 };
     static itkMinMaxCurvatureFlowImageFilterID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetStencilRadius(unsigned long const _arg);
     virtual unsigned long GetStencilRadius() const;
   private:
     itkMinMaxCurvatureFlowImageFilterID2ID2(itkMinMaxCurvatureFlowImageFilterID2ID2 const & arg0);
     void operator=(itkMinMaxCurvatureFlowImageFilterID2ID2 const & arg0);
   protected:
     itkMinMaxCurvatureFlowImageFilterID2ID2();
     ~itkMinMaxCurvatureFlowImageFilterID2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void InitializeIteration();
 };


 class itkMinMaxCurvatureFlowImageFilterID2ID2_Pointer {
   public:
     itkMinMaxCurvatureFlowImageFilterID2ID2_Pointer();
     itkMinMaxCurvatureFlowImageFilterID2ID2_Pointer(itkMinMaxCurvatureFlowImageFilterID2ID2_Pointer const & p);
     itkMinMaxCurvatureFlowImageFilterID2ID2_Pointer(itkMinMaxCurvatureFlowImageFilterID2ID2 * p);
     ~itkMinMaxCurvatureFlowImageFilterID2ID2_Pointer();
     itkMinMaxCurvatureFlowImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinMaxCurvatureFlowImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkMinMaxCurvatureFlowImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkMinMaxCurvatureFlowImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkMinMaxCurvatureFlowImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkMinMaxCurvatureFlowImageFilterID2ID2_Pointer const & r) const;
     itkMinMaxCurvatureFlowImageFilterID2ID2_Pointer & operator=(itkMinMaxCurvatureFlowImageFilterID2ID2_Pointer const & r);
     itkMinMaxCurvatureFlowImageFilterID2ID2_Pointer & operator=(itkMinMaxCurvatureFlowImageFilterID2ID2 * r);
     itkMinMaxCurvatureFlowImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinMaxCurvatureFlowImageFilterID3ID3 : public itkCurvatureFlowImageFilterID3ID3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  UnsignedLongConvertibleToOutputCheck = 1 };
     enum  {  OutputLessThanComparableCheck = 1 };
     enum  {  LongConvertibleToOutputCheck = 1 };
     enum  {  OutputDoubleComparableCheck = 1 };
     enum  {  OutputDoubleMultiplyAndAssignOperatorCheck = 1 };
     enum  {  OutputGreaterThanUnsignedLongCheck = 1 };
     enum  {  UnsignedLongOutputAditiveOperatorsCheck = 1 };
     static itkMinMaxCurvatureFlowImageFilterID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetStencilRadius(unsigned long const _arg);
     virtual unsigned long GetStencilRadius() const;
   private:
     itkMinMaxCurvatureFlowImageFilterID3ID3(itkMinMaxCurvatureFlowImageFilterID3ID3 const & arg0);
     void operator=(itkMinMaxCurvatureFlowImageFilterID3ID3 const & arg0);
   protected:
     itkMinMaxCurvatureFlowImageFilterID3ID3();
     ~itkMinMaxCurvatureFlowImageFilterID3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void InitializeIteration();
 };


 class itkMinMaxCurvatureFlowImageFilterID3ID3_Pointer {
   public:
     itkMinMaxCurvatureFlowImageFilterID3ID3_Pointer();
     itkMinMaxCurvatureFlowImageFilterID3ID3_Pointer(itkMinMaxCurvatureFlowImageFilterID3ID3_Pointer const & p);
     itkMinMaxCurvatureFlowImageFilterID3ID3_Pointer(itkMinMaxCurvatureFlowImageFilterID3ID3 * p);
     ~itkMinMaxCurvatureFlowImageFilterID3ID3_Pointer();
     itkMinMaxCurvatureFlowImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinMaxCurvatureFlowImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkMinMaxCurvatureFlowImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkMinMaxCurvatureFlowImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkMinMaxCurvatureFlowImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkMinMaxCurvatureFlowImageFilterID3ID3_Pointer const & r) const;
     itkMinMaxCurvatureFlowImageFilterID3ID3_Pointer & operator=(itkMinMaxCurvatureFlowImageFilterID3ID3_Pointer const & r);
     itkMinMaxCurvatureFlowImageFilterID3ID3_Pointer & operator=(itkMinMaxCurvatureFlowImageFilterID3ID3 * r);
     itkMinMaxCurvatureFlowImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinMaxCurvatureFlowImageFilterIF2IF2 : public itkCurvatureFlowImageFilterIF2IF2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  UnsignedLongConvertibleToOutputCheck = 1 };
     enum  {  OutputLessThanComparableCheck = 1 };
     enum  {  LongConvertibleToOutputCheck = 1 };
     enum  {  OutputDoubleComparableCheck = 1 };
     enum  {  OutputDoubleMultiplyAndAssignOperatorCheck = 1 };
     enum  {  OutputGreaterThanUnsignedLongCheck = 1 };
     enum  {  UnsignedLongOutputAditiveOperatorsCheck = 1 };
     static itkMinMaxCurvatureFlowImageFilterIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetStencilRadius(unsigned long const _arg);
     virtual unsigned long GetStencilRadius() const;
   private:
     itkMinMaxCurvatureFlowImageFilterIF2IF2(itkMinMaxCurvatureFlowImageFilterIF2IF2 const & arg0);
     void operator=(itkMinMaxCurvatureFlowImageFilterIF2IF2 const & arg0);
   protected:
     itkMinMaxCurvatureFlowImageFilterIF2IF2();
     ~itkMinMaxCurvatureFlowImageFilterIF2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void InitializeIteration();
 };


 class itkMinMaxCurvatureFlowImageFilterIF2IF2_Pointer {
   public:
     itkMinMaxCurvatureFlowImageFilterIF2IF2_Pointer();
     itkMinMaxCurvatureFlowImageFilterIF2IF2_Pointer(itkMinMaxCurvatureFlowImageFilterIF2IF2_Pointer const & p);
     itkMinMaxCurvatureFlowImageFilterIF2IF2_Pointer(itkMinMaxCurvatureFlowImageFilterIF2IF2 * p);
     ~itkMinMaxCurvatureFlowImageFilterIF2IF2_Pointer();
     itkMinMaxCurvatureFlowImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinMaxCurvatureFlowImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkMinMaxCurvatureFlowImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkMinMaxCurvatureFlowImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkMinMaxCurvatureFlowImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkMinMaxCurvatureFlowImageFilterIF2IF2_Pointer const & r) const;
     itkMinMaxCurvatureFlowImageFilterIF2IF2_Pointer & operator=(itkMinMaxCurvatureFlowImageFilterIF2IF2_Pointer const & r);
     itkMinMaxCurvatureFlowImageFilterIF2IF2_Pointer & operator=(itkMinMaxCurvatureFlowImageFilterIF2IF2 * r);
     itkMinMaxCurvatureFlowImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinMaxCurvatureFlowImageFilterIF3IF3 : public itkCurvatureFlowImageFilterIF3IF3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  UnsignedLongConvertibleToOutputCheck = 1 };
     enum  {  OutputLessThanComparableCheck = 1 };
     enum  {  LongConvertibleToOutputCheck = 1 };
     enum  {  OutputDoubleComparableCheck = 1 };
     enum  {  OutputDoubleMultiplyAndAssignOperatorCheck = 1 };
     enum  {  OutputGreaterThanUnsignedLongCheck = 1 };
     enum  {  UnsignedLongOutputAditiveOperatorsCheck = 1 };
     static itkMinMaxCurvatureFlowImageFilterIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetStencilRadius(unsigned long const _arg);
     virtual unsigned long GetStencilRadius() const;
   private:
     itkMinMaxCurvatureFlowImageFilterIF3IF3(itkMinMaxCurvatureFlowImageFilterIF3IF3 const & arg0);
     void operator=(itkMinMaxCurvatureFlowImageFilterIF3IF3 const & arg0);
   protected:
     itkMinMaxCurvatureFlowImageFilterIF3IF3();
     ~itkMinMaxCurvatureFlowImageFilterIF3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void InitializeIteration();
 };


 class itkMinMaxCurvatureFlowImageFilterIF3IF3_Pointer {
   public:
     itkMinMaxCurvatureFlowImageFilterIF3IF3_Pointer();
     itkMinMaxCurvatureFlowImageFilterIF3IF3_Pointer(itkMinMaxCurvatureFlowImageFilterIF3IF3_Pointer const & p);
     itkMinMaxCurvatureFlowImageFilterIF3IF3_Pointer(itkMinMaxCurvatureFlowImageFilterIF3IF3 * p);
     ~itkMinMaxCurvatureFlowImageFilterIF3IF3_Pointer();
     itkMinMaxCurvatureFlowImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinMaxCurvatureFlowImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkMinMaxCurvatureFlowImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkMinMaxCurvatureFlowImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkMinMaxCurvatureFlowImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkMinMaxCurvatureFlowImageFilterIF3IF3_Pointer const & r) const;
     itkMinMaxCurvatureFlowImageFilterIF3IF3_Pointer & operator=(itkMinMaxCurvatureFlowImageFilterIF3IF3_Pointer const & r);
     itkMinMaxCurvatureFlowImageFilterIF3IF3_Pointer & operator=(itkMinMaxCurvatureFlowImageFilterIF3IF3 * r);
     itkMinMaxCurvatureFlowImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


