// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module ITKOptimizersChicken
#endif
#ifdef SWIGCSHARP
%module ITKOptimizersCsharp
#endif
#ifdef SWIGGUILE
%module ITKOptimizersGuile
#endif
#ifdef SWIGJAVA
%module ITKOptimizersJava
#endif
#ifdef SWIGLUA
%module ITKOptimizersLua
#endif
#ifdef SWIGMODULA3
%module ITKOptimizersModula3
#endif
#ifdef SWIGMZSCHEME
%module ITKOptimizersMzscheme
#endif
#ifdef SWIGOCAML
%module ITKOptimizersOcaml
#endif
#ifdef SWIGPERL
%module ITKOptimizersPerl
#endif
#ifdef SWIGPERL5
%module ITKOptimizersPerl5
#endif
#ifdef SWIGPHP
%module ITKOptimizersPhp
#endif
#ifdef SWIGPHP4
%module ITKOptimizersPhp4
#endif
#ifdef SWIGPHP5
%module ITKOptimizersPhp5
#endif
#ifdef SWIGPIKE
%module ITKOptimizersPike
#endif
#ifdef SWIGPYTHON
%module ITKOptimizersPython
#endif
#ifdef SWIGR
%module ITKOptimizersR
#endif
#ifdef SWIGRUBY
%module ITKOptimizersRuby
#endif
#ifdef SWIGSEXP
%module ITKOptimizersSexp
#endif
#ifdef SWIGTCL
%module ITKOptimizersTcl
#endif
#ifdef SWIGXML
%module ITKOptimizersXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Numerics.includes"
%}


%{
%}




%import wrap_itkArray2D.i
%import wrap_vnl_vector.i
%import wrap_itkArray.i
%import wrap_ITKCommonBase.i
%import wrap_ITKCostFunctions.i
%import wrap_itkEventObjects.i


%include itk.i
%include wrap_ITKOptimizers_ext.i


 class itkAmoebaOptimizer_Pointer {
   public:
     itkAmoebaOptimizer_Pointer();
     itkAmoebaOptimizer_Pointer(itkAmoebaOptimizer_Pointer const & p);
     itkAmoebaOptimizer_Pointer(itkAmoebaOptimizer * p);
     ~itkAmoebaOptimizer_Pointer();
     itkAmoebaOptimizer * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkAmoebaOptimizer * GetPointer() const;
     bool operator<(itkAmoebaOptimizer_Pointer const & r) const;
     bool operator>(itkAmoebaOptimizer_Pointer const & r) const;
     bool operator<=(itkAmoebaOptimizer_Pointer const & r) const;
     bool operator>=(itkAmoebaOptimizer_Pointer const & r) const;
     itkAmoebaOptimizer_Pointer & operator=(itkAmoebaOptimizer_Pointer const & r);
     itkAmoebaOptimizer_Pointer & operator=(itkAmoebaOptimizer * r);
     itkAmoebaOptimizer * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkConjugateGradientOptimizer_Pointer {
   public:
     itkConjugateGradientOptimizer_Pointer();
     itkConjugateGradientOptimizer_Pointer(itkConjugateGradientOptimizer_Pointer const & p);
     itkConjugateGradientOptimizer_Pointer(itkConjugateGradientOptimizer * p);
     ~itkConjugateGradientOptimizer_Pointer();
     itkConjugateGradientOptimizer * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkConjugateGradientOptimizer * GetPointer() const;
     bool operator<(itkConjugateGradientOptimizer_Pointer const & r) const;
     bool operator>(itkConjugateGradientOptimizer_Pointer const & r) const;
     bool operator<=(itkConjugateGradientOptimizer_Pointer const & r) const;
     bool operator>=(itkConjugateGradientOptimizer_Pointer const & r) const;
     itkConjugateGradientOptimizer_Pointer & operator=(itkConjugateGradientOptimizer_Pointer const & r);
     itkConjugateGradientOptimizer_Pointer & operator=(itkConjugateGradientOptimizer * r);
     itkConjugateGradientOptimizer * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkCumulativeGaussianOptimizer_Pointer {
   public:
     itkCumulativeGaussianOptimizer_Pointer();
     itkCumulativeGaussianOptimizer_Pointer(itkCumulativeGaussianOptimizer_Pointer const & p);
     itkCumulativeGaussianOptimizer_Pointer(itkCumulativeGaussianOptimizer * p);
     ~itkCumulativeGaussianOptimizer_Pointer();
     itkCumulativeGaussianOptimizer * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkCumulativeGaussianOptimizer * GetPointer() const;
     bool operator<(itkCumulativeGaussianOptimizer_Pointer const & r) const;
     bool operator>(itkCumulativeGaussianOptimizer_Pointer const & r) const;
     bool operator<=(itkCumulativeGaussianOptimizer_Pointer const & r) const;
     bool operator>=(itkCumulativeGaussianOptimizer_Pointer const & r) const;
     itkCumulativeGaussianOptimizer_Pointer & operator=(itkCumulativeGaussianOptimizer_Pointer const & r);
     itkCumulativeGaussianOptimizer_Pointer & operator=(itkCumulativeGaussianOptimizer * r);
     itkCumulativeGaussianOptimizer * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkExhaustiveOptimizer_Pointer {
   public:
     itkExhaustiveOptimizer_Pointer();
     itkExhaustiveOptimizer_Pointer(itkExhaustiveOptimizer_Pointer const & p);
     itkExhaustiveOptimizer_Pointer(itkExhaustiveOptimizer * p);
     ~itkExhaustiveOptimizer_Pointer();
     itkExhaustiveOptimizer * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkExhaustiveOptimizer * GetPointer() const;
     bool operator<(itkExhaustiveOptimizer_Pointer const & r) const;
     bool operator>(itkExhaustiveOptimizer_Pointer const & r) const;
     bool operator<=(itkExhaustiveOptimizer_Pointer const & r) const;
     bool operator>=(itkExhaustiveOptimizer_Pointer const & r) const;
     itkExhaustiveOptimizer_Pointer & operator=(itkExhaustiveOptimizer_Pointer const & r);
     itkExhaustiveOptimizer_Pointer & operator=(itkExhaustiveOptimizer * r);
     itkExhaustiveOptimizer * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkFRPROptimizer_Pointer {
   public:
     itkFRPROptimizer_Pointer();
     itkFRPROptimizer_Pointer(itkFRPROptimizer_Pointer const & p);
     itkFRPROptimizer_Pointer(itkFRPROptimizer * p);
     ~itkFRPROptimizer_Pointer();
     itkFRPROptimizer * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkFRPROptimizer * GetPointer() const;
     bool operator<(itkFRPROptimizer_Pointer const & r) const;
     bool operator>(itkFRPROptimizer_Pointer const & r) const;
     bool operator<=(itkFRPROptimizer_Pointer const & r) const;
     bool operator>=(itkFRPROptimizer_Pointer const & r) const;
     itkFRPROptimizer_Pointer & operator=(itkFRPROptimizer_Pointer const & r);
     itkFRPROptimizer_Pointer & operator=(itkFRPROptimizer * r);
     itkFRPROptimizer * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkGradientDescentOptimizer_Pointer {
   public:
     itkGradientDescentOptimizer_Pointer();
     itkGradientDescentOptimizer_Pointer(itkGradientDescentOptimizer_Pointer const & p);
     itkGradientDescentOptimizer_Pointer(itkGradientDescentOptimizer * p);
     ~itkGradientDescentOptimizer_Pointer();
     itkGradientDescentOptimizer * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkGradientDescentOptimizer * GetPointer() const;
     bool operator<(itkGradientDescentOptimizer_Pointer const & r) const;
     bool operator>(itkGradientDescentOptimizer_Pointer const & r) const;
     bool operator<=(itkGradientDescentOptimizer_Pointer const & r) const;
     bool operator>=(itkGradientDescentOptimizer_Pointer const & r) const;
     itkGradientDescentOptimizer_Pointer & operator=(itkGradientDescentOptimizer_Pointer const & r);
     itkGradientDescentOptimizer_Pointer & operator=(itkGradientDescentOptimizer * r);
     itkGradientDescentOptimizer * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkLBFGSBOptimizer_Pointer {
   public:
     itkLBFGSBOptimizer_Pointer();
     itkLBFGSBOptimizer_Pointer(itkLBFGSBOptimizer_Pointer const & p);
     itkLBFGSBOptimizer_Pointer(itkLBFGSBOptimizer * p);
     ~itkLBFGSBOptimizer_Pointer();
     itkLBFGSBOptimizer * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkLBFGSBOptimizer * GetPointer() const;
     bool operator<(itkLBFGSBOptimizer_Pointer const & r) const;
     bool operator>(itkLBFGSBOptimizer_Pointer const & r) const;
     bool operator<=(itkLBFGSBOptimizer_Pointer const & r) const;
     bool operator>=(itkLBFGSBOptimizer_Pointer const & r) const;
     itkLBFGSBOptimizer_Pointer & operator=(itkLBFGSBOptimizer_Pointer const & r);
     itkLBFGSBOptimizer_Pointer & operator=(itkLBFGSBOptimizer * r);
     itkLBFGSBOptimizer * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkLBFGSOptimizer_Pointer {
   public:
     itkLBFGSOptimizer_Pointer();
     itkLBFGSOptimizer_Pointer(itkLBFGSOptimizer_Pointer const & p);
     itkLBFGSOptimizer_Pointer(itkLBFGSOptimizer * p);
     ~itkLBFGSOptimizer_Pointer();
     itkLBFGSOptimizer * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkLBFGSOptimizer * GetPointer() const;
     bool operator<(itkLBFGSOptimizer_Pointer const & r) const;
     bool operator>(itkLBFGSOptimizer_Pointer const & r) const;
     bool operator<=(itkLBFGSOptimizer_Pointer const & r) const;
     bool operator>=(itkLBFGSOptimizer_Pointer const & r) const;
     itkLBFGSOptimizer_Pointer & operator=(itkLBFGSOptimizer_Pointer const & r);
     itkLBFGSOptimizer_Pointer & operator=(itkLBFGSOptimizer * r);
     itkLBFGSOptimizer * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkLevenbergMarquardtOptimizer_Pointer {
   public:
     itkLevenbergMarquardtOptimizer_Pointer();
     itkLevenbergMarquardtOptimizer_Pointer(itkLevenbergMarquardtOptimizer_Pointer const & p);
     itkLevenbergMarquardtOptimizer_Pointer(itkLevenbergMarquardtOptimizer * p);
     ~itkLevenbergMarquardtOptimizer_Pointer();
     itkLevenbergMarquardtOptimizer * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkLevenbergMarquardtOptimizer * GetPointer() const;
     bool operator<(itkLevenbergMarquardtOptimizer_Pointer const & r) const;
     bool operator>(itkLevenbergMarquardtOptimizer_Pointer const & r) const;
     bool operator<=(itkLevenbergMarquardtOptimizer_Pointer const & r) const;
     bool operator>=(itkLevenbergMarquardtOptimizer_Pointer const & r) const;
     itkLevenbergMarquardtOptimizer_Pointer & operator=(itkLevenbergMarquardtOptimizer_Pointer const & r);
     itkLevenbergMarquardtOptimizer_Pointer & operator=(itkLevenbergMarquardtOptimizer * r);
     itkLevenbergMarquardtOptimizer * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMultipleValuedNonLinearOptimizer_Pointer {
   public:
     itkMultipleValuedNonLinearOptimizer_Pointer();
     itkMultipleValuedNonLinearOptimizer_Pointer(itkMultipleValuedNonLinearOptimizer_Pointer const & p);
     itkMultipleValuedNonLinearOptimizer_Pointer(itkMultipleValuedNonLinearOptimizer * p);
     ~itkMultipleValuedNonLinearOptimizer_Pointer();
     itkMultipleValuedNonLinearOptimizer * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMultipleValuedNonLinearOptimizer * GetPointer() const;
     bool operator<(itkMultipleValuedNonLinearOptimizer_Pointer const & r) const;
     bool operator>(itkMultipleValuedNonLinearOptimizer_Pointer const & r) const;
     bool operator<=(itkMultipleValuedNonLinearOptimizer_Pointer const & r) const;
     bool operator>=(itkMultipleValuedNonLinearOptimizer_Pointer const & r) const;
     itkMultipleValuedNonLinearOptimizer_Pointer & operator=(itkMultipleValuedNonLinearOptimizer_Pointer const & r);
     itkMultipleValuedNonLinearOptimizer_Pointer & operator=(itkMultipleValuedNonLinearOptimizer * r);
     itkMultipleValuedNonLinearOptimizer * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMultipleValuedNonLinearVnlOptimizer_Pointer {
   public:
     itkMultipleValuedNonLinearVnlOptimizer_Pointer();
     itkMultipleValuedNonLinearVnlOptimizer_Pointer(itkMultipleValuedNonLinearVnlOptimizer_Pointer const & p);
     itkMultipleValuedNonLinearVnlOptimizer_Pointer(itkMultipleValuedNonLinearVnlOptimizer * p);
     ~itkMultipleValuedNonLinearVnlOptimizer_Pointer();
     itkMultipleValuedNonLinearVnlOptimizer * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMultipleValuedNonLinearVnlOptimizer * GetPointer() const;
     bool operator<(itkMultipleValuedNonLinearVnlOptimizer_Pointer const & r) const;
     bool operator>(itkMultipleValuedNonLinearVnlOptimizer_Pointer const & r) const;
     bool operator<=(itkMultipleValuedNonLinearVnlOptimizer_Pointer const & r) const;
     bool operator>=(itkMultipleValuedNonLinearVnlOptimizer_Pointer const & r) const;
     itkMultipleValuedNonLinearVnlOptimizer_Pointer & operator=(itkMultipleValuedNonLinearVnlOptimizer_Pointer const & r);
     itkMultipleValuedNonLinearVnlOptimizer_Pointer & operator=(itkMultipleValuedNonLinearVnlOptimizer * r);
     itkMultipleValuedNonLinearVnlOptimizer * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkNonLinearOptimizer_Pointer {
   public:
     itkNonLinearOptimizer_Pointer();
     itkNonLinearOptimizer_Pointer(itkNonLinearOptimizer_Pointer const & p);
     itkNonLinearOptimizer_Pointer(itkNonLinearOptimizer * p);
     ~itkNonLinearOptimizer_Pointer();
     itkNonLinearOptimizer * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkNonLinearOptimizer * GetPointer() const;
     bool operator<(itkNonLinearOptimizer_Pointer const & r) const;
     bool operator>(itkNonLinearOptimizer_Pointer const & r) const;
     bool operator<=(itkNonLinearOptimizer_Pointer const & r) const;
     bool operator>=(itkNonLinearOptimizer_Pointer const & r) const;
     itkNonLinearOptimizer_Pointer & operator=(itkNonLinearOptimizer_Pointer const & r);
     itkNonLinearOptimizer_Pointer & operator=(itkNonLinearOptimizer * r);
     itkNonLinearOptimizer * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOnePlusOneEvolutionaryOptimizer_Pointer {
   public:
     itkOnePlusOneEvolutionaryOptimizer_Pointer();
     itkOnePlusOneEvolutionaryOptimizer_Pointer(itkOnePlusOneEvolutionaryOptimizer_Pointer const & p);
     itkOnePlusOneEvolutionaryOptimizer_Pointer(itkOnePlusOneEvolutionaryOptimizer * p);
     ~itkOnePlusOneEvolutionaryOptimizer_Pointer();
     itkOnePlusOneEvolutionaryOptimizer * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOnePlusOneEvolutionaryOptimizer * GetPointer() const;
     bool operator<(itkOnePlusOneEvolutionaryOptimizer_Pointer const & r) const;
     bool operator>(itkOnePlusOneEvolutionaryOptimizer_Pointer const & r) const;
     bool operator<=(itkOnePlusOneEvolutionaryOptimizer_Pointer const & r) const;
     bool operator>=(itkOnePlusOneEvolutionaryOptimizer_Pointer const & r) const;
     itkOnePlusOneEvolutionaryOptimizer_Pointer & operator=(itkOnePlusOneEvolutionaryOptimizer_Pointer const & r);
     itkOnePlusOneEvolutionaryOptimizer_Pointer & operator=(itkOnePlusOneEvolutionaryOptimizer * r);
     itkOnePlusOneEvolutionaryOptimizer * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOptimizer : public itkObject {
   public:
     static itkOptimizer_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetInitialPosition(itkArrayD const & param);
     virtual itkArrayD const & GetInitialPosition() const;
     void SetScales(itkArrayD const & scales);
     virtual itkArrayD const & GetScales() const;
     virtual itkArrayD const & GetCurrentPosition() const;
     virtual void StartOptimization();
     virtual std::string const GetStopConditionDescription() const;
   private:
     itkOptimizer(itkOptimizer const & arg0);
     void operator=(itkOptimizer const & arg0);
   protected:
     itkOptimizer();
     ~itkOptimizer();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     virtual void SetCurrentPosition(itkArrayD const & param);
 };


 class itkOptimizer_Pointer {
   public:
     itkOptimizer_Pointer();
     itkOptimizer_Pointer(itkOptimizer_Pointer const & p);
     itkOptimizer_Pointer(itkOptimizer * p);
     ~itkOptimizer_Pointer();
     itkOptimizer * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOptimizer * GetPointer() const;
     bool operator<(itkOptimizer_Pointer const & r) const;
     bool operator>(itkOptimizer_Pointer const & r) const;
     bool operator<=(itkOptimizer_Pointer const & r) const;
     bool operator>=(itkOptimizer_Pointer const & r) const;
     itkOptimizer_Pointer & operator=(itkOptimizer_Pointer const & r);
     itkOptimizer_Pointer & operator=(itkOptimizer * r);
     itkOptimizer * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkPowellOptimizer_Pointer {
   public:
     itkPowellOptimizer_Pointer();
     itkPowellOptimizer_Pointer(itkPowellOptimizer_Pointer const & p);
     itkPowellOptimizer_Pointer(itkPowellOptimizer * p);
     ~itkPowellOptimizer_Pointer();
     itkPowellOptimizer * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkPowellOptimizer * GetPointer() const;
     bool operator<(itkPowellOptimizer_Pointer const & r) const;
     bool operator>(itkPowellOptimizer_Pointer const & r) const;
     bool operator<=(itkPowellOptimizer_Pointer const & r) const;
     bool operator>=(itkPowellOptimizer_Pointer const & r) const;
     itkPowellOptimizer_Pointer & operator=(itkPowellOptimizer_Pointer const & r);
     itkPowellOptimizer_Pointer & operator=(itkPowellOptimizer * r);
     itkPowellOptimizer * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkQuaternionRigidTransformGradientDescentOptimizer_Pointer {
   public:
     itkQuaternionRigidTransformGradientDescentOptimizer_Pointer();
     itkQuaternionRigidTransformGradientDescentOptimizer_Pointer(itkQuaternionRigidTransformGradientDescentOptimizer_Pointer const & p);
     itkQuaternionRigidTransformGradientDescentOptimizer_Pointer(itkQuaternionRigidTransformGradientDescentOptimizer * p);
     ~itkQuaternionRigidTransformGradientDescentOptimizer_Pointer();
     itkQuaternionRigidTransformGradientDescentOptimizer * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkQuaternionRigidTransformGradientDescentOptimizer * GetPointer() const;
     bool operator<(itkQuaternionRigidTransformGradientDescentOptimizer_Pointer const & r) const;
     bool operator>(itkQuaternionRigidTransformGradientDescentOptimizer_Pointer const & r) const;
     bool operator<=(itkQuaternionRigidTransformGradientDescentOptimizer_Pointer const & r) const;
     bool operator>=(itkQuaternionRigidTransformGradientDescentOptimizer_Pointer const & r) const;
     itkQuaternionRigidTransformGradientDescentOptimizer_Pointer & operator=(itkQuaternionRigidTransformGradientDescentOptimizer_Pointer const & r);
     itkQuaternionRigidTransformGradientDescentOptimizer_Pointer & operator=(itkQuaternionRigidTransformGradientDescentOptimizer * r);
     itkQuaternionRigidTransformGradientDescentOptimizer * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkRegularStepGradientDescentBaseOptimizer_Pointer {
   public:
     itkRegularStepGradientDescentBaseOptimizer_Pointer();
     itkRegularStepGradientDescentBaseOptimizer_Pointer(itkRegularStepGradientDescentBaseOptimizer_Pointer const & p);
     itkRegularStepGradientDescentBaseOptimizer_Pointer(itkRegularStepGradientDescentBaseOptimizer * p);
     ~itkRegularStepGradientDescentBaseOptimizer_Pointer();
     itkRegularStepGradientDescentBaseOptimizer * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkRegularStepGradientDescentBaseOptimizer * GetPointer() const;
     bool operator<(itkRegularStepGradientDescentBaseOptimizer_Pointer const & r) const;
     bool operator>(itkRegularStepGradientDescentBaseOptimizer_Pointer const & r) const;
     bool operator<=(itkRegularStepGradientDescentBaseOptimizer_Pointer const & r) const;
     bool operator>=(itkRegularStepGradientDescentBaseOptimizer_Pointer const & r) const;
     itkRegularStepGradientDescentBaseOptimizer_Pointer & operator=(itkRegularStepGradientDescentBaseOptimizer_Pointer const & r);
     itkRegularStepGradientDescentBaseOptimizer_Pointer & operator=(itkRegularStepGradientDescentBaseOptimizer * r);
     itkRegularStepGradientDescentBaseOptimizer * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkRegularStepGradientDescentOptimizer_Pointer {
   public:
     itkRegularStepGradientDescentOptimizer_Pointer();
     itkRegularStepGradientDescentOptimizer_Pointer(itkRegularStepGradientDescentOptimizer_Pointer const & p);
     itkRegularStepGradientDescentOptimizer_Pointer(itkRegularStepGradientDescentOptimizer * p);
     ~itkRegularStepGradientDescentOptimizer_Pointer();
     itkRegularStepGradientDescentOptimizer * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkRegularStepGradientDescentOptimizer * GetPointer() const;
     bool operator<(itkRegularStepGradientDescentOptimizer_Pointer const & r) const;
     bool operator>(itkRegularStepGradientDescentOptimizer_Pointer const & r) const;
     bool operator<=(itkRegularStepGradientDescentOptimizer_Pointer const & r) const;
     bool operator>=(itkRegularStepGradientDescentOptimizer_Pointer const & r) const;
     itkRegularStepGradientDescentOptimizer_Pointer & operator=(itkRegularStepGradientDescentOptimizer_Pointer const & r);
     itkRegularStepGradientDescentOptimizer_Pointer & operator=(itkRegularStepGradientDescentOptimizer * r);
     itkRegularStepGradientDescentOptimizer * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkSPSAOptimizer_Pointer {
   public:
     itkSPSAOptimizer_Pointer();
     itkSPSAOptimizer_Pointer(itkSPSAOptimizer_Pointer const & p);
     itkSPSAOptimizer_Pointer(itkSPSAOptimizer * p);
     ~itkSPSAOptimizer_Pointer();
     itkSPSAOptimizer * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkSPSAOptimizer * GetPointer() const;
     bool operator<(itkSPSAOptimizer_Pointer const & r) const;
     bool operator>(itkSPSAOptimizer_Pointer const & r) const;
     bool operator<=(itkSPSAOptimizer_Pointer const & r) const;
     bool operator>=(itkSPSAOptimizer_Pointer const & r) const;
     itkSPSAOptimizer_Pointer & operator=(itkSPSAOptimizer_Pointer const & r);
     itkSPSAOptimizer_Pointer & operator=(itkSPSAOptimizer * r);
     itkSPSAOptimizer * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkSingleValuedNonLinearOptimizer_Pointer {
   public:
     itkSingleValuedNonLinearOptimizer_Pointer();
     itkSingleValuedNonLinearOptimizer_Pointer(itkSingleValuedNonLinearOptimizer_Pointer const & p);
     itkSingleValuedNonLinearOptimizer_Pointer(itkSingleValuedNonLinearOptimizer * p);
     ~itkSingleValuedNonLinearOptimizer_Pointer();
     itkSingleValuedNonLinearOptimizer * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkSingleValuedNonLinearOptimizer * GetPointer() const;
     bool operator<(itkSingleValuedNonLinearOptimizer_Pointer const & r) const;
     bool operator>(itkSingleValuedNonLinearOptimizer_Pointer const & r) const;
     bool operator<=(itkSingleValuedNonLinearOptimizer_Pointer const & r) const;
     bool operator>=(itkSingleValuedNonLinearOptimizer_Pointer const & r) const;
     itkSingleValuedNonLinearOptimizer_Pointer & operator=(itkSingleValuedNonLinearOptimizer_Pointer const & r);
     itkSingleValuedNonLinearOptimizer_Pointer & operator=(itkSingleValuedNonLinearOptimizer * r);
     itkSingleValuedNonLinearOptimizer * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkSingleValuedNonLinearVnlOptimizer_Pointer {
   public:
     itkSingleValuedNonLinearVnlOptimizer_Pointer();
     itkSingleValuedNonLinearVnlOptimizer_Pointer(itkSingleValuedNonLinearVnlOptimizer_Pointer const & p);
     itkSingleValuedNonLinearVnlOptimizer_Pointer(itkSingleValuedNonLinearVnlOptimizer * p);
     ~itkSingleValuedNonLinearVnlOptimizer_Pointer();
     itkSingleValuedNonLinearVnlOptimizer * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkSingleValuedNonLinearVnlOptimizer * GetPointer() const;
     bool operator<(itkSingleValuedNonLinearVnlOptimizer_Pointer const & r) const;
     bool operator>(itkSingleValuedNonLinearVnlOptimizer_Pointer const & r) const;
     bool operator<=(itkSingleValuedNonLinearVnlOptimizer_Pointer const & r) const;
     bool operator>=(itkSingleValuedNonLinearVnlOptimizer_Pointer const & r) const;
     itkSingleValuedNonLinearVnlOptimizer_Pointer & operator=(itkSingleValuedNonLinearVnlOptimizer_Pointer const & r);
     itkSingleValuedNonLinearVnlOptimizer_Pointer & operator=(itkSingleValuedNonLinearVnlOptimizer * r);
     itkSingleValuedNonLinearVnlOptimizer * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVersorRigid3DTransformOptimizer_Pointer {
   public:
     itkVersorRigid3DTransformOptimizer_Pointer();
     itkVersorRigid3DTransformOptimizer_Pointer(itkVersorRigid3DTransformOptimizer_Pointer const & p);
     itkVersorRigid3DTransformOptimizer_Pointer(itkVersorRigid3DTransformOptimizer * p);
     ~itkVersorRigid3DTransformOptimizer_Pointer();
     itkVersorRigid3DTransformOptimizer * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVersorRigid3DTransformOptimizer * GetPointer() const;
     bool operator<(itkVersorRigid3DTransformOptimizer_Pointer const & r) const;
     bool operator>(itkVersorRigid3DTransformOptimizer_Pointer const & r) const;
     bool operator<=(itkVersorRigid3DTransformOptimizer_Pointer const & r) const;
     bool operator>=(itkVersorRigid3DTransformOptimizer_Pointer const & r) const;
     itkVersorRigid3DTransformOptimizer_Pointer & operator=(itkVersorRigid3DTransformOptimizer_Pointer const & r);
     itkVersorRigid3DTransformOptimizer_Pointer & operator=(itkVersorRigid3DTransformOptimizer * r);
     itkVersorRigid3DTransformOptimizer * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVersorTransformOptimizer_Pointer {
   public:
     itkVersorTransformOptimizer_Pointer();
     itkVersorTransformOptimizer_Pointer(itkVersorTransformOptimizer_Pointer const & p);
     itkVersorTransformOptimizer_Pointer(itkVersorTransformOptimizer * p);
     ~itkVersorTransformOptimizer_Pointer();
     itkVersorTransformOptimizer * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVersorTransformOptimizer * GetPointer() const;
     bool operator<(itkVersorTransformOptimizer_Pointer const & r) const;
     bool operator>(itkVersorTransformOptimizer_Pointer const & r) const;
     bool operator<=(itkVersorTransformOptimizer_Pointer const & r) const;
     bool operator>=(itkVersorTransformOptimizer_Pointer const & r) const;
     itkVersorTransformOptimizer_Pointer & operator=(itkVersorTransformOptimizer_Pointer const & r);
     itkVersorTransformOptimizer_Pointer & operator=(itkVersorTransformOptimizer * r);
     itkVersorTransformOptimizer * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkNonLinearOptimizer : public itkOptimizer {
   public:
     static itkNonLinearOptimizer_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkNonLinearOptimizer(itkNonLinearOptimizer const & arg0);
     void operator=(itkNonLinearOptimizer const & arg0);
   protected:
     itkNonLinearOptimizer();
     ~itkNonLinearOptimizer();
 };


 class itkSingleValuedNonLinearOptimizer : public itkNonLinearOptimizer {
   public:
     static itkSingleValuedNonLinearOptimizer_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetCostFunction(itkSingleValuedCostFunction * costFunction);
     virtual itkSingleValuedCostFunction const * GetCostFunction() const;
     double GetValue(itkArrayD const & parameters) const;
   private:
     itkSingleValuedNonLinearOptimizer(itkSingleValuedNonLinearOptimizer const & arg0);
     void operator=(itkSingleValuedNonLinearOptimizer const & arg0);
   protected:
     itkSingleValuedNonLinearOptimizer();
     ~itkSingleValuedNonLinearOptimizer();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkSingleValuedNonLinearVnlOptimizer : public itkSingleValuedNonLinearOptimizer {
   public:
     virtual char const * GetNameOfClass() const;
     virtual void SetCostFunction(itkSingleValuedCostFunction * costFunction) = 0;
     virtual bool const & GetMaximize() const;
     virtual void SetMaximize(bool const _arg);
     virtual void MaximizeOn();
     virtual void MaximizeOff();
     bool GetMinimize() const;
     void SetMinimize(bool v);
     void MinimizeOn();
     void MinimizeOff();
     virtual double const & GetCachedValue() const;
     virtual itkArrayD const & GetCachedDerivative() const;
     virtual itkArrayD const & GetCachedCurrentPosition() const;
   private:
     void IterationReport(itkEventObject const & event);
     itkSingleValuedNonLinearVnlOptimizer(itkSingleValuedNonLinearVnlOptimizer const & arg0);
     void operator=(itkSingleValuedNonLinearVnlOptimizer const & arg0);
   protected:
     itkSingleValuedNonLinearVnlOptimizer();
     ~itkSingleValuedNonLinearVnlOptimizer();
     void SetCostFunctionAdaptor(itkSingleValuedVnlCostFunctionAdaptor * adaptor);
     itkSingleValuedVnlCostFunctionAdaptor const * GetCostFunctionAdaptor() const;
     itkSingleValuedVnlCostFunctionAdaptor * GetCostFunctionAdaptor();
     itkSingleValuedVnlCostFunctionAdaptor * GetNonConstCostFunctionAdaptor() const;
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkAmoebaOptimizer : public itkSingleValuedNonLinearVnlOptimizer {
   public:
     static itkAmoebaOptimizer_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     vnl_amoeba * GetOptimizer();
     virtual void StartOptimization();
     virtual void SetCostFunction(itkSingleValuedCostFunction * costFunction);
     virtual void SetMaximumNumberOfIterations(unsigned int n);
     virtual unsigned int GetMaximumNumberOfIterations() const;
     virtual void SetAutomaticInitialSimplex(bool const _arg);
     virtual void AutomaticInitialSimplexOn();
     virtual void AutomaticInitialSimplexOff();
     virtual bool GetAutomaticInitialSimplex() const;
     virtual void SetInitialSimplexDelta(itkArrayD const _arg);
     virtual itkArrayD GetInitialSimplexDelta() const;
     virtual void SetParametersConvergenceTolerance(double tol);
     virtual double GetParametersConvergenceTolerance() const;
     virtual void SetFunctionConvergenceTolerance(double tol);
     virtual double GetFunctionConvergenceTolerance() const;
     virtual std::string const GetStopConditionDescription() const;
     double GetValue() const;
   private:
     itkAmoebaOptimizer(itkAmoebaOptimizer const & arg0);
     void operator=(itkAmoebaOptimizer const & arg0);
   protected:
     itkAmoebaOptimizer();
     ~itkAmoebaOptimizer();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkConjugateGradientOptimizer : public itkSingleValuedNonLinearVnlOptimizer {
   public:
     static itkConjugateGradientOptimizer_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     vnl_conjugate_gradient * GetOptimizer();
     virtual void StartOptimization();
     virtual void SetCostFunction(itkSingleValuedCostFunction * costFunction);
     unsigned long GetNumberOfIterations() const;
     unsigned long GetCurrentIteration() const;
     double GetValue() const;
   private:
     itkConjugateGradientOptimizer(itkConjugateGradientOptimizer const & arg0);
     void operator=(itkConjugateGradientOptimizer const & arg0);
   protected:
     itkConjugateGradientOptimizer();
     ~itkConjugateGradientOptimizer();
 };


 class itkExhaustiveOptimizer : public itkSingleValuedNonLinearOptimizer {
   public:
     static itkExhaustiveOptimizer_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void StartOptimization();
     void StartWalking();
     void ResumeWalking();
     void StopWalking();
     virtual void SetStepLength(double const _arg);
     virtual void SetNumberOfSteps(itkArrayUL const _arg);
     virtual double const & GetStepLength() const;
     virtual itkArrayUL const & GetNumberOfSteps() const;
     virtual double const & GetCurrentValue() const;
     virtual double const & GetMaximumMetricValue() const;
     virtual double const & GetMinimumMetricValue() const;
     virtual itkArrayD const & GetMinimumMetricValuePosition() const;
     virtual itkArrayD const & GetMaximumMetricValuePosition() const;
     virtual itkArrayD const & GetCurrentIndex() const;
     virtual unsigned long const & GetMaximumNumberOfIterations() const;
     virtual std::string const GetStopConditionDescription() const;
   private:
     itkExhaustiveOptimizer(itkExhaustiveOptimizer const & arg0);
     void operator=(itkExhaustiveOptimizer const & arg0);
   protected:
     itkExhaustiveOptimizer();
     ~itkExhaustiveOptimizer();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     void AdvanceOneStep();
     void IncrementIndex(itkArrayD & param);
 };


 class itkGradientDescentOptimizer : public itkSingleValuedNonLinearOptimizer {
   public:
     enum StopConditionType {  MaximumNumberOfIterations = 0,  MetricError = 1 };
     static itkGradientDescentOptimizer_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool const & GetMaximize() const;
     virtual void SetMaximize(bool const _arg);
     virtual void MaximizeOn();
     virtual void MaximizeOff();
     bool GetMinimize() const;
     void SetMinimize(bool v);
     void MinimizeOn();
     void MinimizeOff();
     virtual void AdvanceOneStep();
     virtual void StartOptimization();
     void ResumeOptimization();
     void StopOptimization();
     virtual void SetLearningRate(double const _arg);
     virtual double const & GetLearningRate() const;
     virtual void SetNumberOfIterations(unsigned long const _arg);
     virtual unsigned long const & GetNumberOfIterations() const;
     virtual unsigned long GetCurrentIteration() const;
     virtual double const & GetValue() const;
     virtual itkGradientDescentOptimizer::StopConditionType const & GetStopCondition() const;
     virtual std::string const GetStopConditionDescription() const;
     virtual itkArrayD const & GetGradient() const;
   private:
     itkGradientDescentOptimizer(itkGradientDescentOptimizer const & arg0);
     void operator=(itkGradientDescentOptimizer const & arg0);
   protected:
     itkGradientDescentOptimizer();
     ~itkGradientDescentOptimizer();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkLBFGSBOptimizer : public itkSingleValuedNonLinearVnlOptimizer {
   public:
     static itkLBFGSBOptimizer_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void StartOptimization();
     virtual void SetCostFunction(itkSingleValuedCostFunction * costFunction);
     virtual void SetTrace(bool flag);
     virtual bool GetTrace();
     virtual void TraceOn();
     virtual void TraceOff();
     virtual void SetLowerBound(itkArrayD const & value);
     virtual itkArrayD const & GetLowerBound();
     virtual void SetUpperBound(itkArrayD const & value);
     virtual itkArrayD const & GetUpperBound();
     virtual void SetBoundSelection(itkArraySL const & select);
     virtual itkArraySL const & GetBoundSelection();
     virtual void SetCostFunctionConvergenceFactor(double arg0);
     virtual double GetCostFunctionConvergenceFactor();
     virtual void SetProjectedGradientTolerance(double arg0);
     virtual double GetProjectedGradientTolerance();
     virtual void SetMaximumNumberOfIterations(unsigned int arg0);
     virtual unsigned int GetMaximumNumberOfIterations();
     virtual void SetMaximumNumberOfEvaluations(unsigned int arg0);
     virtual unsigned int GetMaximumNumberOfEvaluations();
     virtual void SetMaximumNumberOfCorrections(unsigned int arg0);
     virtual unsigned int GetMaximumNumberOfCorrections();
     void SetScales(itkArrayD const & arg0);
     virtual unsigned int const & GetCurrentIteration() const;
     double GetValue() const;
     virtual double const & GetInfinityNormOfProjectedGradient() const;
     virtual std::string const GetStopConditionDescription() const;
   private:
     itkLBFGSBOptimizer(itkLBFGSBOptimizer const & arg0);
     void operator=(itkLBFGSBOptimizer const & arg0);
   protected:
     itkLBFGSBOptimizer();
     ~itkLBFGSBOptimizer();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkLBFGSOptimizer : public itkSingleValuedNonLinearVnlOptimizer {
   public:
     static itkLBFGSOptimizer_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     vnl_lbfgs * GetOptimizer();
     virtual void StartOptimization();
     virtual void SetCostFunction(itkSingleValuedCostFunction * costFunction);
     virtual void SetTrace(bool flag);
     virtual bool GetTrace();
     virtual void TraceOn();
     virtual void TraceOff();
     virtual void SetMaximumNumberOfFunctionEvaluations(unsigned int n);
     virtual unsigned int GetMaximumNumberOfFunctionEvaluations();
     virtual void SetGradientConvergenceTolerance(double gtol);
     virtual double GetGradientConvergenceTolerance();
     virtual void SetLineSearchAccuracy(double tol);
     virtual double GetLineSearchAccuracy();
     virtual void SetDefaultStepLength(double stp);
     virtual double GetDefaultStepLength();
     double GetValue() const;
     virtual std::string const GetStopConditionDescription() const;
   private:
     itkLBFGSOptimizer(itkLBFGSOptimizer const & arg0);
     void operator=(itkLBFGSOptimizer const & arg0);
   protected:
     itkLBFGSOptimizer();
     ~itkLBFGSOptimizer();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkMultipleValuedNonLinearOptimizer : public itkNonLinearOptimizer {
   public:
     static itkMultipleValuedNonLinearOptimizer_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetCostFunction(itkMultipleValuedCostFunction * costFunction);
   private:
     itkMultipleValuedNonLinearOptimizer(itkMultipleValuedNonLinearOptimizer const & arg0);
     void operator=(itkMultipleValuedNonLinearOptimizer const & arg0);
   protected:
     itkMultipleValuedNonLinearOptimizer();
     ~itkMultipleValuedNonLinearOptimizer();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkMultipleValuedNonLinearVnlOptimizer : public itkMultipleValuedNonLinearOptimizer {
   public:
     virtual char const * GetNameOfClass() const;
     virtual void SetCostFunction(itkMultipleValuedCostFunction * costFunction) = 0;
     void SetUseCostFunctionGradient(bool arg0);
     void UseCostFunctionGradientOn();
     void UseCostFunctionGradientOff();
     bool GetUseCostFunctionGradient() const;
     virtual itkArrayD const & GetCachedValue() const;
     virtual itkArray2DD const & GetCachedDerivative() const;
     virtual itkArrayD const & GetCachedCurrentPosition() const;
   private:
     itkMultipleValuedNonLinearVnlOptimizer(itkMultipleValuedNonLinearVnlOptimizer const & arg0);
     void operator=(itkMultipleValuedNonLinearVnlOptimizer const & arg0);
     void IterationReport(itkEventObject const & event);
   protected:
     itkMultipleValuedNonLinearVnlOptimizer();
     ~itkMultipleValuedNonLinearVnlOptimizer();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     void SetCostFunctionAdaptor(itkMultipleValuedVnlCostFunctionAdaptor * adaptor);
     itkMultipleValuedVnlCostFunctionAdaptor const * GetCostFunctionAdaptor() const;
     itkMultipleValuedVnlCostFunctionAdaptor * GetCostFunctionAdaptor();
     itkMultipleValuedVnlCostFunctionAdaptor * GetNonConstCostFunctionAdaptor() const;
 };


 class itkOnePlusOneEvolutionaryOptimizer : public itkSingleValuedNonLinearOptimizer {
   public:
     static itkOnePlusOneEvolutionaryOptimizer_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetMaximize(bool const _arg);
     virtual void MaximizeOn();
     virtual void MaximizeOff();
     virtual bool const & GetMaximize() const;
     bool GetMinimize() const;
     void SetMinimize(bool v);
     void MinimizeOn();
     void MinimizeOff();
     virtual void SetMaximumIteration(unsigned int const _arg);
     virtual unsigned int const & GetMaximumIteration() const;
     virtual void SetGrowthFactor(double const _arg);
     virtual double const & GetGrowthFactor() const;
     virtual void SetShrinkFactor(double const _arg);
     virtual double const & GetShrinkFactor() const;
     virtual void SetInitialRadius(double const _arg);
     virtual double const & GetInitialRadius() const;
     virtual void SetEpsilon(double const _arg);
     virtual double const & GetEpsilon() const;
     virtual double const & GetFrobeniusNorm() const;
     void SetNormalVariateGenerator(itkRandomVariateGeneratorBase * generator);
     void Initialize(double initialRadius, double grow = -0x00000000000000001, double shrink = -0x00000000000000001);
     virtual double const & GetCurrentCost() const;
     double GetValue() const;
     virtual unsigned int const & GetCurrentIteration() const;
     virtual bool const & GetInitialized() const;
     virtual void StartOptimization();
     void StopOptimization();
     virtual bool const & GetCatchGetValueException() const;
     virtual void SetCatchGetValueException(bool const _arg);
     virtual double const & GetMetricWorstPossibleValue() const;
     virtual void SetMetricWorstPossibleValue(double const _arg);
     virtual std::string const GetStopConditionDescription() const;
   private:
   protected:
     itkOnePlusOneEvolutionaryOptimizer();
     itkOnePlusOneEvolutionaryOptimizer(itkOnePlusOneEvolutionaryOptimizer const & arg0);
     ~itkOnePlusOneEvolutionaryOptimizer();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkPowellOptimizer : public itkSingleValuedNonLinearOptimizer {
   public:
     static itkPowellOptimizer_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetMaximize(bool const _arg);
     virtual void MaximizeOn();
     virtual void MaximizeOff();
     virtual bool const & GetMaximize() const;
     virtual void SetMaximumIteration(unsigned int const _arg);
     virtual unsigned int const & GetMaximumIteration() const;
     virtual void SetMaximumLineIteration(unsigned int const _arg);
     virtual unsigned int GetMaximumLineIteration() const;
     virtual void SetStepLength(double const _arg);
     virtual double const & GetStepLength() const;
     virtual void SetStepTolerance(double const _arg);
     virtual double const & GetStepTolerance() const;
     virtual void SetValueTolerance(double const _arg);
     virtual double const & GetValueTolerance() const;
     virtual double const & GetCurrentCost() const;
     double GetValue() const;
     virtual unsigned int const & GetCurrentIteration() const;
     virtual unsigned int const & GetCurrentLineIteration() const;
     virtual void StartOptimization();
     void StopOptimization();
     virtual bool const & GetCatchGetValueException() const;
     virtual void SetCatchGetValueException(bool const _arg);
     virtual double const & GetMetricWorstPossibleValue() const;
     virtual void SetMetricWorstPossibleValue(double const _arg);
     virtual std::string const GetStopConditionDescription() const;
   private:
   protected:
     itkPowellOptimizer();
     itkPowellOptimizer(itkPowellOptimizer const & arg0);
     ~itkPowellOptimizer();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     virtual void SetCurrentCost(double const _arg);
     void SetLine(itkArrayD const & origin, vnl_vectorD const & direction);
     double GetLineValue(double x) const;
     double GetLineValue(double x, itkArrayD & tempCoord) const;
     void SetCurrentLinePoint(double x, double fx);
     void Swap(double * a, double * b) const;
     void Shift(double * a, double * b, double * c, double d) const;
     virtual void LineBracket(double * ax, double * bx, double * cx, double * fa, double * fb, double * fc);
     virtual void LineBracket(double * ax, double * bx, double * cx, double * fa, double * fb, double * fc, itkArrayD & tempCoord);
     virtual void BracketedLineOptimize(double ax, double bx, double cx, double fa, double fb, double fc, double * extX, double * extVal);
     virtual void BracketedLineOptimize(double ax, double bx, double cx, double fa, double fb, double fc, double * extX, double * extVal, itkArrayD & tempCoord);
     virtual unsigned int GetSpaceDimension();
     void SetSpaceDimension(unsigned int dim);
     virtual void SetCurrentIteration(unsigned int const _arg);
     virtual bool GetStop();
     virtual void SetStop(bool const _arg);
 };


 class itkQuaternionRigidTransformGradientDescentOptimizer : public itkGradientDescentOptimizer {
   public:
     static itkQuaternionRigidTransformGradientDescentOptimizer_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void AdvanceOneStep();
   private:
     itkQuaternionRigidTransformGradientDescentOptimizer(itkQuaternionRigidTransformGradientDescentOptimizer const & arg0);
     void operator=(itkQuaternionRigidTransformGradientDescentOptimizer const & arg0);
   protected:
     itkQuaternionRigidTransformGradientDescentOptimizer();
     ~itkQuaternionRigidTransformGradientDescentOptimizer();
 };


 class itkRegularStepGradientDescentBaseOptimizer : public itkSingleValuedNonLinearOptimizer {
   public:
     enum StopConditionType {  GradientMagnitudeTolerance = 1,  StepTooSmall = 2,  ImageNotAvailable = 3,  CostFunctionError = 4,  MaximumNumberOfIterations = 5,  Unknown = 6 };
     static itkRegularStepGradientDescentBaseOptimizer_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetMaximize(bool const _arg);
     virtual bool const & GetMaximize() const;
     virtual void MaximizeOn();
     virtual void MaximizeOff();
     bool GetMinimize() const;
     void SetMinimize(bool v);
     void MinimizeOn();
     void MinimizeOff();
     virtual void StartOptimization();
     void ResumeOptimization();
     void StopOptimization();
     virtual void SetMaximumStepLength(double const _arg);
     virtual void SetMinimumStepLength(double const _arg);
     virtual void SetRelaxationFactor(double const _arg);
     virtual void SetNumberOfIterations(unsigned long const _arg);
     virtual void SetGradientMagnitudeTolerance(double const _arg);
     virtual double const & GetCurrentStepLength() const;
     virtual double const & GetMaximumStepLength() const;
     virtual double const & GetMinimumStepLength() const;
     virtual double const & GetRelaxationFactor() const;
     virtual unsigned long const & GetNumberOfIterations() const;
     virtual double const & GetGradientMagnitudeTolerance() const;
     virtual unsigned int GetCurrentIteration() const;
     virtual itkRegularStepGradientDescentBaseOptimizer::StopConditionType const & GetStopCondition() const;
     virtual double const & GetValue() const;
     virtual itkArrayD const & GetGradient() const;
     virtual std::string const GetStopConditionDescription() const;
   private:
     itkRegularStepGradientDescentBaseOptimizer(itkRegularStepGradientDescentBaseOptimizer const & arg0);
     void operator=(itkRegularStepGradientDescentBaseOptimizer const & arg0);
   protected:
     itkRegularStepGradientDescentBaseOptimizer();
     ~itkRegularStepGradientDescentBaseOptimizer();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     virtual void AdvanceOneStep();
     virtual void StepAlongGradient(double arg0, itkArrayD const & arg1);
 };


 class itkRegularStepGradientDescentOptimizer : public itkRegularStepGradientDescentBaseOptimizer {
   public:
     static itkRegularStepGradientDescentOptimizer_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkRegularStepGradientDescentOptimizer(itkRegularStepGradientDescentOptimizer const & arg0);
     void operator=(itkRegularStepGradientDescentOptimizer const & arg0);
   protected:
     itkRegularStepGradientDescentOptimizer();
     ~itkRegularStepGradientDescentOptimizer();
     virtual void StepAlongGradient(double factor, itkArrayD const & transformedGradient);
 };


 class itkSPSAOptimizer : public itkSingleValuedNonLinearOptimizer {
   public:
     enum StopConditionType {  Unknown = 0,  MaximumNumberOfIterations = 1,  BelowTolerance = 2,  MetricError = 3 };
     static itkSPSAOptimizer_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void AdvanceOneStep();
     virtual void StartOptimization();
     void ResumeOptimization();
     void StopOptimization();
     virtual double GetValue() const;
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GuessParameters(unsigned long numberOfGradientEstimates, double initialStepSize);
     virtual unsigned long GetCurrentIteration() const;
     virtual itkSPSAOptimizer::StopConditionType GetStopCondition() const;
     virtual double GetLearningRate() const;
     virtual double GetGradientMagnitude() const;
     virtual itkArrayD const & GetGradient() const;
     virtual void SetSa(double const _arg);
     virtual double GetSa() const;
     void Seta(double a);
     double Geta();
     virtual void SetSc(double const _arg);
     virtual double GetSc() const;
     void Setc(double c);
     double Getc();
     virtual void SetA(double const _arg);
     virtual double GetA() const;
     virtual void SetAlpha(double const _arg);
     virtual double GetAlpha() const;
     virtual void SetGamma(double const _arg);
     virtual double GetGamma() const;
     virtual bool GetMaximize() const;
     virtual void SetMaximize(bool const _arg);
     virtual void MaximizeOn();
     virtual void MaximizeOff();
     bool GetMinimize() const;
     void SetMinimize(bool v);
     void MinimizeOn();
     void MinimizeOff();
     virtual void SetNumberOfPerturbations(unsigned long const _arg);
     virtual unsigned long GetNumberOfPerturbations() const;
     virtual double GetStateOfConvergence() const;
     virtual void SetStateOfConvergenceDecayRate(double const _arg);
     virtual double GetStateOfConvergenceDecayRate() const;
     virtual void SetMinimumNumberOfIterations(unsigned long const _arg);
     virtual unsigned long GetMinimumNumberOfIterations() const;
     virtual void SetMaximumNumberOfIterations(unsigned long const _arg);
     virtual unsigned long GetMaximumNumberOfIterations() const;
     virtual void SetTolerance(double const _arg);
     virtual double GetTolerance() const;
     virtual std::string const GetStopConditionDescription() const;
   private:
     itkSPSAOptimizer(itkSPSAOptimizer const & arg0);
     void operator=(itkSPSAOptimizer const & arg0);
   protected:
     itkSPSAOptimizer();
     ~itkSPSAOptimizer();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     virtual double Compute_a(unsigned long k) const;
     virtual double Compute_c(unsigned long k) const;
     virtual void GenerateDelta(unsigned int const spaceDimension);
     virtual void ComputeGradient(itkArrayD const & parameters, itkArrayD & gradient);
 };


 class itkVersorRigid3DTransformOptimizer : public itkRegularStepGradientDescentBaseOptimizer {
   public:
     enum  {  SpaceDimension = 6 };
     static itkVersorRigid3DTransformOptimizer_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void StepAlongGradient(double factor, itkArrayD const & transformedGradient);
   private:
     itkVersorRigid3DTransformOptimizer(itkVersorRigid3DTransformOptimizer const & arg0);
     void operator=(itkVersorRigid3DTransformOptimizer const & arg0);
   protected:
     itkVersorRigid3DTransformOptimizer();
     ~itkVersorRigid3DTransformOptimizer();
 };


 class itkVersorTransformOptimizer : public itkRegularStepGradientDescentBaseOptimizer {
   public:
     static itkVersorTransformOptimizer_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void StepAlongGradient(double factor, itkArrayD const & transformedGradient);
   private:
     itkVersorTransformOptimizer(itkVersorTransformOptimizer const & arg0);
     void operator=(itkVersorTransformOptimizer const & arg0);
   protected:
     itkVersorTransformOptimizer();
     ~itkVersorTransformOptimizer();
 };


 class itkCumulativeGaussianOptimizer : public itkMultipleValuedNonLinearOptimizer {
   public:
     static itkCumulativeGaussianOptimizer_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetDifferenceTolerance(double const _arg);
     virtual void SetVerbose(bool const _arg);
     virtual double GetComputedMean();
     virtual double GetComputedStandardDeviation();
     virtual double GetUpperAsymptote();
     virtual double GetLowerAsymptote();
     virtual itkArrayD * GetFinalSampledArray();
     virtual double GetFitError();
     void SetDataArray(itkArrayD * dataArray);
     virtual void StartOptimization();
     void PrintArray(itkArrayD * array);
     virtual std::string const GetStopConditionDescription() const;
   private:
     itkArrayD * ExtendGaussian(itkArrayD * originalArray, itkArrayD * extendedArray, int startingPointForInsertion);
     itkArrayD * RecalculateExtendedArrayFromGaussianParameters(itkArrayD * originalArray, itkArrayD * extendedArray, int startingPointForInsertion);
     double FindAverageSumOfSquaredDifferences(itkArrayD * array1, itkArrayD * array2);
     void FindParametersOfGaussian(itkArrayD * sampledGaussianArray);
     void MeasureGaussianParameters(itkArrayD * array);
     void PrintComputedParameterHeader();
     void PrintComputedParameters();
     double VerticalBestShift(itkArrayD * originalArray, itkArrayD * newArray);
   protected:
     itkCumulativeGaussianOptimizer();
     ~itkCumulativeGaussianOptimizer();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkFRPROptimizer : public itkPowellOptimizer {
   public:
     static itkFRPROptimizer_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetUseUnitLengthGradient(bool const _arg);
     virtual bool GetUseUnitLengthGradient() const;
     virtual void StartOptimization();
     void SetToFletchReeves();
     void SetToPolakRibiere();
   private:
     enum OptimizationType {  FletchReeves = 0,  PolakRibiere = 1 };
     itkFRPROptimizer(itkFRPROptimizer const & arg0);
   protected:
     itkFRPROptimizer();
     ~itkFRPROptimizer();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     virtual void GetValueAndDerivative(itkArrayD & p, double * val, itkArrayD * xi);
     virtual void LineOptimize(itkArrayD * p, itkArrayD & xi, double * val);
     virtual void LineOptimize(itkArrayD * p, itkArrayD & xi, double * val, itkArrayD & tempCoord);
 };


 class itkLevenbergMarquardtOptimizer : public itkMultipleValuedNonLinearVnlOptimizer {
   public:
     static itkLevenbergMarquardtOptimizer_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     vnl_levenberg_marquardt * GetOptimizer() const;
     virtual void StartOptimization();
     virtual void SetCostFunction(itkMultipleValuedCostFunction * costFunction);
     void SetNumberOfIterations(unsigned int iterations);
     void SetValueTolerance(double tol);
     void SetGradientTolerance(double tol);
     void SetEpsilonFunction(double epsilon);
     itkArrayD GetValue() const;
     virtual std::string const GetStopConditionDescription() const;
   private:
     itkLevenbergMarquardtOptimizer(itkLevenbergMarquardtOptimizer const & arg0);
     void operator=(itkLevenbergMarquardtOptimizer const & arg0);
   protected:
     itkLevenbergMarquardtOptimizer();
     ~itkLevenbergMarquardtOptimizer();
 };


