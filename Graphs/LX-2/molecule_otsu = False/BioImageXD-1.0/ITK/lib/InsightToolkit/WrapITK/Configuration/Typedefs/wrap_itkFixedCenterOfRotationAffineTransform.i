// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkFixedCenterOfRotationAffineTransformChicken
#endif
#ifdef SWIGCSHARP
%module itkFixedCenterOfRotationAffineTransformCsharp
#endif
#ifdef SWIGGUILE
%module itkFixedCenterOfRotationAffineTransformGuile
#endif
#ifdef SWIGJAVA
%module itkFixedCenterOfRotationAffineTransformJava
#endif
#ifdef SWIGLUA
%module itkFixedCenterOfRotationAffineTransformLua
#endif
#ifdef SWIGMODULA3
%module itkFixedCenterOfRotationAffineTransformModula3
#endif
#ifdef SWIGMZSCHEME
%module itkFixedCenterOfRotationAffineTransformMzscheme
#endif
#ifdef SWIGOCAML
%module itkFixedCenterOfRotationAffineTransformOcaml
#endif
#ifdef SWIGPERL
%module itkFixedCenterOfRotationAffineTransformPerl
#endif
#ifdef SWIGPERL5
%module itkFixedCenterOfRotationAffineTransformPerl5
#endif
#ifdef SWIGPHP
%module itkFixedCenterOfRotationAffineTransformPhp
#endif
#ifdef SWIGPHP4
%module itkFixedCenterOfRotationAffineTransformPhp4
#endif
#ifdef SWIGPHP5
%module itkFixedCenterOfRotationAffineTransformPhp5
#endif
#ifdef SWIGPIKE
%module itkFixedCenterOfRotationAffineTransformPike
#endif
#ifdef SWIGPYTHON
%module itkFixedCenterOfRotationAffineTransformPython
#endif
#ifdef SWIGR
%module itkFixedCenterOfRotationAffineTransformR
#endif
#ifdef SWIGRUBY
%module itkFixedCenterOfRotationAffineTransformRuby
#endif
#ifdef SWIGSEXP
%module itkFixedCenterOfRotationAffineTransformSexp
#endif
#ifdef SWIGTCL
%module itkFixedCenterOfRotationAffineTransformTcl
#endif
#ifdef SWIGXML
%module itkFixedCenterOfRotationAffineTransformXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
%}


%{
%}




%import wrap_itkPoint.i
%import wrap_itkScalableAffineTransform.i
%import wrap_itkVector.i
%import wrap_itkMatrix.i
%import wrap_ITKCommonBase.i


%include itk.i
%include wrap_itkFixedCenterOfRotationAffineTransform_ext.i


 class itkFixedCenterOfRotationAffineTransformD2 : public itkScalableAffineTransformD2 {
   public:
     enum  {  InputSpaceDimension = 2 };
     enum  {  OutputSpaceDimension = 2 };
     enum  {  SpaceDimension = 2 };
     enum  {  ParametersDimension = 8 };
     virtual char const * GetNameOfClass() const;
     static itkFixedCenterOfRotationAffineTransformD2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void SetCenterOfRotationComponent(itkPointD2 const & cor);
     itkPointD2 GetCenterOfRotationComponent() const;
     void SetMatrixComponent(itkMatrixD22 const & matrix);
     itkMatrixD22 const & GetMatrixComponent() const;
     void SetOffsetComponent(itkVectorD2 const & offset);
     itkVectorD2 const & GetOffsetComponent() const;
   private:
     itkFixedCenterOfRotationAffineTransformD2(itkFixedCenterOfRotationAffineTransformD2 const & other);
     itkFixedCenterOfRotationAffineTransformD2 const & operator=(itkFixedCenterOfRotationAffineTransformD2 const & arg0);
   protected:
     itkFixedCenterOfRotationAffineTransformD2(itkMatrixD22 const & matrix, itkVectorD2 const & offset);
     itkFixedCenterOfRotationAffineTransformD2(unsigned int outputSpaceDimension, unsigned int parametersDimension);
     itkFixedCenterOfRotationAffineTransformD2();
     ~itkFixedCenterOfRotationAffineTransformD2();
 };


 class itkFixedCenterOfRotationAffineTransformD2_Pointer {
   public:
     itkFixedCenterOfRotationAffineTransformD2_Pointer();
     itkFixedCenterOfRotationAffineTransformD2_Pointer(itkFixedCenterOfRotationAffineTransformD2_Pointer const & p);
     itkFixedCenterOfRotationAffineTransformD2_Pointer(itkFixedCenterOfRotationAffineTransformD2 * p);
     ~itkFixedCenterOfRotationAffineTransformD2_Pointer();
     itkFixedCenterOfRotationAffineTransformD2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkFixedCenterOfRotationAffineTransformD2 * GetPointer() const;
     bool operator<(itkFixedCenterOfRotationAffineTransformD2_Pointer const & r) const;
     bool operator>(itkFixedCenterOfRotationAffineTransformD2_Pointer const & r) const;
     bool operator<=(itkFixedCenterOfRotationAffineTransformD2_Pointer const & r) const;
     bool operator>=(itkFixedCenterOfRotationAffineTransformD2_Pointer const & r) const;
     itkFixedCenterOfRotationAffineTransformD2_Pointer & operator=(itkFixedCenterOfRotationAffineTransformD2_Pointer const & r);
     itkFixedCenterOfRotationAffineTransformD2_Pointer & operator=(itkFixedCenterOfRotationAffineTransformD2 * r);
     itkFixedCenterOfRotationAffineTransformD2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkFixedCenterOfRotationAffineTransformD3 : public itkScalableAffineTransformD3 {
   public:
     enum  {  InputSpaceDimension = 3 };
     enum  {  OutputSpaceDimension = 3 };
     enum  {  SpaceDimension = 3 };
     enum  {  ParametersDimension = 15 };
     virtual char const * GetNameOfClass() const;
     static itkFixedCenterOfRotationAffineTransformD3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void SetCenterOfRotationComponent(itkPointD3 const & cor);
     itkPointD3 GetCenterOfRotationComponent() const;
     void SetMatrixComponent(itkMatrixD33 const & matrix);
     itkMatrixD33 const & GetMatrixComponent() const;
     void SetOffsetComponent(itkVectorD3 const & offset);
     itkVectorD3 const & GetOffsetComponent() const;
   private:
     itkFixedCenterOfRotationAffineTransformD3(itkFixedCenterOfRotationAffineTransformD3 const & other);
     itkFixedCenterOfRotationAffineTransformD3 const & operator=(itkFixedCenterOfRotationAffineTransformD3 const & arg0);
   protected:
     itkFixedCenterOfRotationAffineTransformD3(itkMatrixD33 const & matrix, itkVectorD3 const & offset);
     itkFixedCenterOfRotationAffineTransformD3(unsigned int outputSpaceDimension, unsigned int parametersDimension);
     itkFixedCenterOfRotationAffineTransformD3();
     ~itkFixedCenterOfRotationAffineTransformD3();
 };


 class itkFixedCenterOfRotationAffineTransformD3_Pointer {
   public:
     itkFixedCenterOfRotationAffineTransformD3_Pointer();
     itkFixedCenterOfRotationAffineTransformD3_Pointer(itkFixedCenterOfRotationAffineTransformD3_Pointer const & p);
     itkFixedCenterOfRotationAffineTransformD3_Pointer(itkFixedCenterOfRotationAffineTransformD3 * p);
     ~itkFixedCenterOfRotationAffineTransformD3_Pointer();
     itkFixedCenterOfRotationAffineTransformD3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkFixedCenterOfRotationAffineTransformD3 * GetPointer() const;
     bool operator<(itkFixedCenterOfRotationAffineTransformD3_Pointer const & r) const;
     bool operator>(itkFixedCenterOfRotationAffineTransformD3_Pointer const & r) const;
     bool operator<=(itkFixedCenterOfRotationAffineTransformD3_Pointer const & r) const;
     bool operator>=(itkFixedCenterOfRotationAffineTransformD3_Pointer const & r) const;
     itkFixedCenterOfRotationAffineTransformD3_Pointer & operator=(itkFixedCenterOfRotationAffineTransformD3_Pointer const & r);
     itkFixedCenterOfRotationAffineTransformD3_Pointer & operator=(itkFixedCenterOfRotationAffineTransformD3 * r);
     itkFixedCenterOfRotationAffineTransformD3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


