# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _pyBasePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pyBasePython', [dirname(__file__)])
        except ImportError:
            import _pyBasePython
            return _pyBasePython
        if fp is not None:
            try:
                _mod = imp.load_module('_pyBasePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pyBasePython = swig_import_helper()
    del swig_import_helper
else:
    import _pyBasePython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    """Proxy of C++ swig::SwigPyIterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyBasePython.delete_SwigPyIterator
    def value(self):
        """value(self) -> PyObject"""
        return _pyBasePython.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """
        incr(self, size_t n = 1) -> SwigPyIterator
        incr(self) -> SwigPyIterator
        """
        return _pyBasePython.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """
        decr(self, size_t n = 1) -> SwigPyIterator
        decr(self) -> SwigPyIterator
        """
        return _pyBasePython.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _pyBasePython.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(self, SwigPyIterator x) -> bool"""
        return _pyBasePython.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _pyBasePython.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _pyBasePython.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _pyBasePython.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _pyBasePython.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _pyBasePython.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _pyBasePython.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _pyBasePython.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _pyBasePython.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _pyBasePython.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _pyBasePython.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _pyBasePython.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator.value = new_instancemethod(_pyBasePython.SwigPyIterator_value,None,SwigPyIterator)
SwigPyIterator.incr = new_instancemethod(_pyBasePython.SwigPyIterator_incr,None,SwigPyIterator)
SwigPyIterator.decr = new_instancemethod(_pyBasePython.SwigPyIterator_decr,None,SwigPyIterator)
SwigPyIterator.distance = new_instancemethod(_pyBasePython.SwigPyIterator_distance,None,SwigPyIterator)
SwigPyIterator.equal = new_instancemethod(_pyBasePython.SwigPyIterator_equal,None,SwigPyIterator)
SwigPyIterator.copy = new_instancemethod(_pyBasePython.SwigPyIterator_copy,None,SwigPyIterator)
SwigPyIterator.next = new_instancemethod(_pyBasePython.SwigPyIterator_next,None,SwigPyIterator)
SwigPyIterator.__next__ = new_instancemethod(_pyBasePython.SwigPyIterator___next__,None,SwigPyIterator)
SwigPyIterator.previous = new_instancemethod(_pyBasePython.SwigPyIterator_previous,None,SwigPyIterator)
SwigPyIterator.advance = new_instancemethod(_pyBasePython.SwigPyIterator_advance,None,SwigPyIterator)
SwigPyIterator.__eq__ = new_instancemethod(_pyBasePython.SwigPyIterator___eq__,None,SwigPyIterator)
SwigPyIterator.__ne__ = new_instancemethod(_pyBasePython.SwigPyIterator___ne__,None,SwigPyIterator)
SwigPyIterator.__iadd__ = new_instancemethod(_pyBasePython.SwigPyIterator___iadd__,None,SwigPyIterator)
SwigPyIterator.__isub__ = new_instancemethod(_pyBasePython.SwigPyIterator___isub__,None,SwigPyIterator)
SwigPyIterator.__add__ = new_instancemethod(_pyBasePython.SwigPyIterator___add__,None,SwigPyIterator)
SwigPyIterator.__sub__ = new_instancemethod(_pyBasePython.SwigPyIterator___sub__,None,SwigPyIterator)
SwigPyIterator_swigregister = _pyBasePython.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class ios_base(object):
    """Proxy of C++ std::ios_base class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    erase_event = _pyBasePython.ios_base_erase_event
    imbue_event = _pyBasePython.ios_base_imbue_event
    copyfmt_event = _pyBasePython.ios_base_copyfmt_event
    def register_callback(self, *args):
        """register_callback(self, event_callback __fn, int __index)"""
        return _pyBasePython.ios_base_register_callback(self, *args)

    def flags(self, *args):
        """
        flags(self) -> fmtflags
        flags(self, fmtflags __fmtfl) -> fmtflags
        """
        return _pyBasePython.ios_base_flags(self, *args)

    def setf(self, *args):
        """
        setf(self, fmtflags __fmtfl) -> fmtflags
        setf(self, fmtflags __fmtfl, fmtflags __mask) -> fmtflags
        """
        return _pyBasePython.ios_base_setf(self, *args)

    def unsetf(self, *args):
        """unsetf(self, fmtflags __mask)"""
        return _pyBasePython.ios_base_unsetf(self, *args)

    def precision(self, *args):
        """
        precision(self) -> streamsize
        precision(self, streamsize __prec) -> streamsize
        """
        return _pyBasePython.ios_base_precision(self, *args)

    def width(self, *args):
        """
        width(self) -> streamsize
        width(self, streamsize __wide) -> streamsize
        """
        return _pyBasePython.ios_base_width(self, *args)

    def sync_with_stdio(__sync = True):
        """
        sync_with_stdio(bool __sync = True) -> bool
        sync_with_stdio() -> bool
        """
        return _pyBasePython.ios_base_sync_with_stdio(__sync)

    sync_with_stdio = staticmethod(sync_with_stdio)
    def imbue(self, *args):
        """imbue(self, locale __loc) -> locale"""
        return _pyBasePython.ios_base_imbue(self, *args)

    def getloc(self):
        """getloc(self) -> locale"""
        return _pyBasePython.ios_base_getloc(self)

    def xalloc():
        """xalloc() -> int"""
        return _pyBasePython.ios_base_xalloc()

    xalloc = staticmethod(xalloc)
    def iword(self, *args):
        """iword(self, int __ix) -> long"""
        return _pyBasePython.ios_base_iword(self, *args)

    def pword(self, *args):
        """pword(self, int __ix) -> void"""
        return _pyBasePython.ios_base_pword(self, *args)

    __swig_destroy__ = _pyBasePython.delete_ios_base
ios_base.register_callback = new_instancemethod(_pyBasePython.ios_base_register_callback,None,ios_base)
ios_base.flags = new_instancemethod(_pyBasePython.ios_base_flags,None,ios_base)
ios_base.setf = new_instancemethod(_pyBasePython.ios_base_setf,None,ios_base)
ios_base.unsetf = new_instancemethod(_pyBasePython.ios_base_unsetf,None,ios_base)
ios_base.precision = new_instancemethod(_pyBasePython.ios_base_precision,None,ios_base)
ios_base.width = new_instancemethod(_pyBasePython.ios_base_width,None,ios_base)
ios_base.imbue = new_instancemethod(_pyBasePython.ios_base_imbue,None,ios_base)
ios_base.getloc = new_instancemethod(_pyBasePython.ios_base_getloc,None,ios_base)
ios_base.iword = new_instancemethod(_pyBasePython.ios_base_iword,None,ios_base)
ios_base.pword = new_instancemethod(_pyBasePython.ios_base_pword,None,ios_base)
ios_base_swigregister = _pyBasePython.ios_base_swigregister
ios_base_swigregister(ios_base)
cvar = _pyBasePython.cvar
ios_base.boolalpha = _pyBasePython.cvar.ios_base_boolalpha
ios_base.dec = _pyBasePython.cvar.ios_base_dec
ios_base.fixed = _pyBasePython.cvar.ios_base_fixed
ios_base.hex = _pyBasePython.cvar.ios_base_hex
ios_base.internal = _pyBasePython.cvar.ios_base_internal
ios_base.left = _pyBasePython.cvar.ios_base_left
ios_base.oct = _pyBasePython.cvar.ios_base_oct
ios_base.right = _pyBasePython.cvar.ios_base_right
ios_base.scientific = _pyBasePython.cvar.ios_base_scientific
ios_base.showbase = _pyBasePython.cvar.ios_base_showbase
ios_base.showpoint = _pyBasePython.cvar.ios_base_showpoint
ios_base.showpos = _pyBasePython.cvar.ios_base_showpos
ios_base.skipws = _pyBasePython.cvar.ios_base_skipws
ios_base.unitbuf = _pyBasePython.cvar.ios_base_unitbuf
ios_base.uppercase = _pyBasePython.cvar.ios_base_uppercase
ios_base.adjustfield = _pyBasePython.cvar.ios_base_adjustfield
ios_base.basefield = _pyBasePython.cvar.ios_base_basefield
ios_base.floatfield = _pyBasePython.cvar.ios_base_floatfield
ios_base.badbit = _pyBasePython.cvar.ios_base_badbit
ios_base.eofbit = _pyBasePython.cvar.ios_base_eofbit
ios_base.failbit = _pyBasePython.cvar.ios_base_failbit
ios_base.goodbit = _pyBasePython.cvar.ios_base_goodbit
ios_base.app = _pyBasePython.cvar.ios_base_app
ios_base.ate = _pyBasePython.cvar.ios_base_ate
ios_base.binary = _pyBasePython.cvar.ios_base_binary
ios_base.ios_base_in = _pyBasePython.cvar.ios_base_ios_base_in
ios_base.out = _pyBasePython.cvar.ios_base_out
ios_base.trunc = _pyBasePython.cvar.ios_base_trunc
ios_base.beg = _pyBasePython.cvar.ios_base_beg
ios_base.cur = _pyBasePython.cvar.ios_base_cur
ios_base.end = _pyBasePython.cvar.ios_base_end

def ios_base_sync_with_stdio(__sync = True):
  """
    sync_with_stdio(bool __sync = True) -> bool
    ios_base_sync_with_stdio() -> bool
    """
  return _pyBasePython.ios_base_sync_with_stdio(__sync)

def ios_base_xalloc():
  """ios_base_xalloc() -> int"""
  return _pyBasePython.ios_base_xalloc()

class ios(ios_base):
    """Proxy of C++ std::basic_ios<(char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def rdstate(self):
        """rdstate(self) -> iostate"""
        return _pyBasePython.ios_rdstate(self)

    def clear(self, *args):
        """
        clear(self, iostate __state = goodbit)
        clear(self)
        """
        return _pyBasePython.ios_clear(self, *args)

    def setstate(self, *args):
        """setstate(self, iostate __state)"""
        return _pyBasePython.ios_setstate(self, *args)

    def good(self):
        """good(self) -> bool"""
        return _pyBasePython.ios_good(self)

    def eof(self):
        """eof(self) -> bool"""
        return _pyBasePython.ios_eof(self)

    def fail(self):
        """fail(self) -> bool"""
        return _pyBasePython.ios_fail(self)

    def bad(self):
        """bad(self) -> bool"""
        return _pyBasePython.ios_bad(self)

    def exceptions(self, *args):
        """
        exceptions(self) -> iostate
        exceptions(self, iostate __except)
        """
        return _pyBasePython.ios_exceptions(self, *args)

    def __init__(self, *args): 
        """__init__(self, streambuf __sb) -> ios"""
        _pyBasePython.ios_swiginit(self,_pyBasePython.new_ios(*args))
    __swig_destroy__ = _pyBasePython.delete_ios
    def tie(self, *args):
        """
        tie(self) -> ostream
        tie(self, ostream __tiestr) -> ostream
        """
        return _pyBasePython.ios_tie(self, *args)

    def rdbuf(self, *args):
        """
        rdbuf(self) -> streambuf
        rdbuf(self, streambuf __sb) -> streambuf
        """
        return _pyBasePython.ios_rdbuf(self, *args)

    def copyfmt(self, *args):
        """copyfmt(self, ios __rhs) -> ios"""
        return _pyBasePython.ios_copyfmt(self, *args)

    def fill(self, *args):
        """
        fill(self) -> char_type
        fill(self, char_type __ch) -> char_type
        """
        return _pyBasePython.ios_fill(self, *args)

    def imbue(self, *args):
        """imbue(self, locale __loc) -> locale"""
        return _pyBasePython.ios_imbue(self, *args)

    def narrow(self, *args):
        """narrow(self, char_type __c, char __dfault) -> char"""
        return _pyBasePython.ios_narrow(self, *args)

    def widen(self, *args):
        """widen(self, char __c) -> char_type"""
        return _pyBasePython.ios_widen(self, *args)

ios.rdstate = new_instancemethod(_pyBasePython.ios_rdstate,None,ios)
ios.clear = new_instancemethod(_pyBasePython.ios_clear,None,ios)
ios.setstate = new_instancemethod(_pyBasePython.ios_setstate,None,ios)
ios.good = new_instancemethod(_pyBasePython.ios_good,None,ios)
ios.eof = new_instancemethod(_pyBasePython.ios_eof,None,ios)
ios.fail = new_instancemethod(_pyBasePython.ios_fail,None,ios)
ios.bad = new_instancemethod(_pyBasePython.ios_bad,None,ios)
ios.exceptions = new_instancemethod(_pyBasePython.ios_exceptions,None,ios)
ios.tie = new_instancemethod(_pyBasePython.ios_tie,None,ios)
ios.rdbuf = new_instancemethod(_pyBasePython.ios_rdbuf,None,ios)
ios.copyfmt = new_instancemethod(_pyBasePython.ios_copyfmt,None,ios)
ios.fill = new_instancemethod(_pyBasePython.ios_fill,None,ios)
ios.imbue = new_instancemethod(_pyBasePython.ios_imbue,None,ios)
ios.narrow = new_instancemethod(_pyBasePython.ios_narrow,None,ios)
ios.widen = new_instancemethod(_pyBasePython.ios_widen,None,ios)
ios_swigregister = _pyBasePython.ios_swigregister
ios_swigregister(ios)

class string(object):
    """Proxy of C++ std::basic_string<(char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def length(self):
        """length(self) -> size_type"""
        return _pyBasePython.string_length(self)

    def max_size(self):
        """max_size(self) -> size_type"""
        return _pyBasePython.string_max_size(self)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _pyBasePython.string_capacity(self)

    def reserve(self, __res_arg = 0):
        """
        reserve(self, size_type __res_arg = 0)
        reserve(self)
        """
        return _pyBasePython.string_reserve(self, __res_arg)

    def copy(self, *args):
        """
        copy(self, char __s, size_type __n, size_type __pos = 0) -> size_type
        copy(self, char __s, size_type __n) -> size_type
        """
        return _pyBasePython.string_copy(self, *args)

    def c_str(self):
        """c_str(self) -> char"""
        return _pyBasePython.string_c_str(self)

    def find(self, *args):
        """
        find(self, char __s, size_type __pos, size_type __n) -> size_type
        find(self, string __str, size_type __pos = 0) -> size_type
        find(self, string __str) -> size_type
        find(self, char __c, size_type __pos = 0) -> size_type
        find(self, char __c) -> size_type
        """
        return _pyBasePython.string_find(self, *args)

    def rfind(self, *args):
        """
        rfind(self, string __str, size_type __pos = std::basic_string< char >::npos) -> size_type
        rfind(self, string __str) -> size_type
        rfind(self, char __s, size_type __pos, size_type __n) -> size_type
        rfind(self, char __c, size_type __pos = std::basic_string< char >::npos) -> size_type
        rfind(self, char __c) -> size_type
        """
        return _pyBasePython.string_rfind(self, *args)

    def find_first_of(self, *args):
        """
        find_first_of(self, string __str, size_type __pos = 0) -> size_type
        find_first_of(self, string __str) -> size_type
        find_first_of(self, char __s, size_type __pos, size_type __n) -> size_type
        find_first_of(self, char __c, size_type __pos = 0) -> size_type
        find_first_of(self, char __c) -> size_type
        """
        return _pyBasePython.string_find_first_of(self, *args)

    def find_last_of(self, *args):
        """
        find_last_of(self, string __str, size_type __pos = std::basic_string< char >::npos) -> size_type
        find_last_of(self, string __str) -> size_type
        find_last_of(self, char __s, size_type __pos, size_type __n) -> size_type
        find_last_of(self, char __c, size_type __pos = std::basic_string< char >::npos) -> size_type
        find_last_of(self, char __c) -> size_type
        """
        return _pyBasePython.string_find_last_of(self, *args)

    def find_first_not_of(self, *args):
        """
        find_first_not_of(self, string __str, size_type __pos = 0) -> size_type
        find_first_not_of(self, string __str) -> size_type
        find_first_not_of(self, char __s, size_type __pos, size_type __n) -> size_type
        find_first_not_of(self, char __c, size_type __pos = 0) -> size_type
        find_first_not_of(self, char __c) -> size_type
        """
        return _pyBasePython.string_find_first_not_of(self, *args)

    def find_last_not_of(self, *args):
        """
        find_last_not_of(self, string __str, size_type __pos = std::basic_string< char >::npos) -> size_type
        find_last_not_of(self, string __str) -> size_type
        find_last_not_of(self, char __s, size_type __pos, size_type __n) -> size_type
        find_last_not_of(self, char __c, size_type __pos = std::basic_string< char >::npos) -> size_type
        find_last_not_of(self, char __c) -> size_type
        """
        return _pyBasePython.string_find_last_not_of(self, *args)

    def substr(self, *args):
        """
        substr(self, size_type __pos = 0, size_type __n = std::basic_string< char >::npos) -> string
        substr(self, size_type __pos = 0) -> string
        substr(self) -> string
        """
        return _pyBasePython.string_substr(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.string_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.string_size(self)

    def swap(self, *args):
        """swap(self, string v)"""
        return _pyBasePython.string_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.string_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.string_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.string_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.string_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.string_rend(self)

    def erase(self, *args):
        """
        erase(self, size_type __pos = 0, size_type __n = std::basic_string< char >::npos) -> string
        erase(self, size_type __pos = 0) -> string
        erase(self) -> string
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.string_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, char __s, size_type __n) -> string
        __init__(self) -> string
        __init__(self, string arg0) -> string
        __init__(self, size_type size, value_type value) -> string
        """
        _pyBasePython.string_swiginit(self,_pyBasePython.new_string(*args))
    def assign(self, *args):
        """
        assign(self, string __str) -> string
        assign(self, string __str, size_type __pos, size_type __n) -> string
        assign(self, char __s, size_type __n) -> string
        assign(self, size_type n, value_type x)
        """
        return _pyBasePython.string_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.string_resize(self, *args)

    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.string_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.string___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.string___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.string___len__(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> string"""
        return _pyBasePython.string___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, string v)"""
        return _pyBasePython.string___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.string___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.string___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> string
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.string___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, string v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.string___setitem__(self, *args)

    def insert(self, *args):
        """
        insert(self, size_type __pos1, string __str) -> string
        insert(self, size_type __pos1, string __str, size_type __pos2, size_type __n) -> string
        insert(self, size_type __pos, char __s, size_type __n) -> string
        insert(self, size_type __pos, size_type __n, char __c) -> string
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        insert(self, iterator __p, size_type __n, char __c)
        """
        return _pyBasePython.string_insert(self, *args)

    def replace(self, *args):
        """
        replace(self, size_type __pos, size_type __n, string __str) -> string
        replace(self, size_type __pos1, size_type __n1, string __str, size_type __pos2, 
            size_type __n2) -> string
        replace(self, size_type __pos, size_type __n1, char __s, size_type __n2) -> string
        replace(self, size_type __pos, size_type __n1, size_type __n2, char __c) -> string
        replace(self, iterator __i1, iterator __i2, string __str) -> string
        replace(self, iterator __i1, iterator __i2, char __s, size_type __n) -> string
        replace(self, iterator __i1, iterator __i2, size_type __n, char __c) -> string
        replace(self, iterator __i1, iterator __i2, char __k1, char __k2) -> string
        replace(self, iterator __i1, iterator __i2, const_iterator __k1, 
            const_iterator __k2) -> string
        """
        return _pyBasePython.string_replace(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, string v) -> string"""
        return _pyBasePython.string___iadd__(self, *args)

    def __add__(self, *args):
        """__add__(self, string v) -> string"""
        return _pyBasePython.string___add__(self, *args)

    def __radd__(self, *args):
        """__radd__(self, string v) -> string"""
        return _pyBasePython.string___radd__(self, *args)

    def __str__(self):
        """__str__(self) -> string"""
        return _pyBasePython.string___str__(self)

    def __rlshift__(self, *args):
        """__rlshift__(self, ostream out) -> ostream"""
        return _pyBasePython.string___rlshift__(self, *args)

    def __eq__(self, *args):
        """__eq__(self, string v) -> bool"""
        return _pyBasePython.string___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, string v) -> bool"""
        return _pyBasePython.string___ne__(self, *args)

    def __gt__(self, *args):
        """__gt__(self, string v) -> bool"""
        return _pyBasePython.string___gt__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, string v) -> bool"""
        return _pyBasePython.string___lt__(self, *args)

    def __ge__(self, *args):
        """__ge__(self, string v) -> bool"""
        return _pyBasePython.string___ge__(self, *args)

    def __le__(self, *args):
        """__le__(self, string v) -> bool"""
        return _pyBasePython.string___le__(self, *args)

    __swig_destroy__ = _pyBasePython.delete_string
string.length = new_instancemethod(_pyBasePython.string_length,None,string)
string.max_size = new_instancemethod(_pyBasePython.string_max_size,None,string)
string.capacity = new_instancemethod(_pyBasePython.string_capacity,None,string)
string.reserve = new_instancemethod(_pyBasePython.string_reserve,None,string)
string.copy = new_instancemethod(_pyBasePython.string_copy,None,string)
string.c_str = new_instancemethod(_pyBasePython.string_c_str,None,string)
string.find = new_instancemethod(_pyBasePython.string_find,None,string)
string.rfind = new_instancemethod(_pyBasePython.string_rfind,None,string)
string.find_first_of = new_instancemethod(_pyBasePython.string_find_first_of,None,string)
string.find_last_of = new_instancemethod(_pyBasePython.string_find_last_of,None,string)
string.find_first_not_of = new_instancemethod(_pyBasePython.string_find_first_not_of,None,string)
string.find_last_not_of = new_instancemethod(_pyBasePython.string_find_last_not_of,None,string)
string.substr = new_instancemethod(_pyBasePython.string_substr,None,string)
string.empty = new_instancemethod(_pyBasePython.string_empty,None,string)
string.size = new_instancemethod(_pyBasePython.string_size,None,string)
string.swap = new_instancemethod(_pyBasePython.string_swap,None,string)
string.get_allocator = new_instancemethod(_pyBasePython.string_get_allocator,None,string)
string.begin = new_instancemethod(_pyBasePython.string_begin,None,string)
string.end = new_instancemethod(_pyBasePython.string_end,None,string)
string.rbegin = new_instancemethod(_pyBasePython.string_rbegin,None,string)
string.rend = new_instancemethod(_pyBasePython.string_rend,None,string)
string.erase = new_instancemethod(_pyBasePython.string_erase,None,string)
string.assign = new_instancemethod(_pyBasePython.string_assign,None,string)
string.resize = new_instancemethod(_pyBasePython.string_resize,None,string)
string.iterator = new_instancemethod(_pyBasePython.string_iterator,None,string)
string.__nonzero__ = new_instancemethod(_pyBasePython.string___nonzero__,None,string)
string.__bool__ = new_instancemethod(_pyBasePython.string___bool__,None,string)
string.__len__ = new_instancemethod(_pyBasePython.string___len__,None,string)
string.__getslice__ = new_instancemethod(_pyBasePython.string___getslice__,None,string)
string.__setslice__ = new_instancemethod(_pyBasePython.string___setslice__,None,string)
string.__delslice__ = new_instancemethod(_pyBasePython.string___delslice__,None,string)
string.__delitem__ = new_instancemethod(_pyBasePython.string___delitem__,None,string)
string.__getitem__ = new_instancemethod(_pyBasePython.string___getitem__,None,string)
string.__setitem__ = new_instancemethod(_pyBasePython.string___setitem__,None,string)
string.insert = new_instancemethod(_pyBasePython.string_insert,None,string)
string.replace = new_instancemethod(_pyBasePython.string_replace,None,string)
string.__iadd__ = new_instancemethod(_pyBasePython.string___iadd__,None,string)
string.__add__ = new_instancemethod(_pyBasePython.string___add__,None,string)
string.__radd__ = new_instancemethod(_pyBasePython.string___radd__,None,string)
string.__str__ = new_instancemethod(_pyBasePython.string___str__,None,string)
string.__rlshift__ = new_instancemethod(_pyBasePython.string___rlshift__,None,string)
string.__eq__ = new_instancemethod(_pyBasePython.string___eq__,None,string)
string.__ne__ = new_instancemethod(_pyBasePython.string___ne__,None,string)
string.__gt__ = new_instancemethod(_pyBasePython.string___gt__,None,string)
string.__lt__ = new_instancemethod(_pyBasePython.string___lt__,None,string)
string.__ge__ = new_instancemethod(_pyBasePython.string___ge__,None,string)
string.__le__ = new_instancemethod(_pyBasePython.string___le__,None,string)
string_swigregister = _pyBasePython.string_swigregister
string_swigregister(string)
string.npos = _pyBasePython.cvar.string_npos

class ostream(ios):
    """Proxy of C++ std::basic_ostream<(char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, streambuf __sb) -> ostream"""
        _pyBasePython.ostream_swiginit(self,_pyBasePython.new_ostream(*args))
    __swig_destroy__ = _pyBasePython.delete_ostream
    def __lshift__(self, *args):
        """
        __lshift__(self, ostream __pf) -> ostream
        __lshift__(self, ios __pf) -> ostream
        __lshift__(self, ios_base __pf) -> ostream
        __lshift__(self, long __n) -> ostream
        __lshift__(self, unsigned long __n) -> ostream
        __lshift__(self, bool __n) -> ostream
        __lshift__(self, short __n) -> ostream
        __lshift__(self, unsigned short __n) -> ostream
        __lshift__(self, int __n) -> ostream
        __lshift__(self, unsigned int __n) -> ostream
        __lshift__(self, long long __n) -> ostream
        __lshift__(self, unsigned long long __n) -> ostream
        __lshift__(self, double __f) -> ostream
        __lshift__(self, float __f) -> ostream
        __lshift__(self, long double __f) -> ostream
        __lshift__(self, void __p) -> ostream
        __lshift__(self, streambuf __sb) -> ostream
        __lshift__(self, string s) -> ostream
        """
        return _pyBasePython.ostream___lshift__(self, *args)

    def put(self, *args):
        """put(self, char_type __c) -> ostream"""
        return _pyBasePython.ostream_put(self, *args)

    def write(self, *args):
        """write(self, char_type __s, streamsize __n) -> ostream"""
        return _pyBasePython.ostream_write(self, *args)

    def flush(self):
        """flush(self) -> ostream"""
        return _pyBasePython.ostream_flush(self)

    def tellp(self):
        """tellp(self) -> pos_type"""
        return _pyBasePython.ostream_tellp(self)

    def seekp(self, *args):
        """
        seekp(self, pos_type arg0) -> ostream
        seekp(self, off_type arg0, seekdir arg1) -> ostream
        """
        return _pyBasePython.ostream_seekp(self, *args)

ostream.__lshift__ = new_instancemethod(_pyBasePython.ostream___lshift__,None,ostream)
ostream.put = new_instancemethod(_pyBasePython.ostream_put,None,ostream)
ostream.write = new_instancemethod(_pyBasePython.ostream_write,None,ostream)
ostream.flush = new_instancemethod(_pyBasePython.ostream_flush,None,ostream)
ostream.tellp = new_instancemethod(_pyBasePython.ostream_tellp,None,ostream)
ostream.seekp = new_instancemethod(_pyBasePython.ostream_seekp,None,ostream)
ostream_swigregister = _pyBasePython.ostream_swigregister
ostream_swigregister(ostream)
cin = cvar.cin
cout = cvar.cout
cerr = cvar.cerr
clog = cvar.clog

class istream(ios):
    """Proxy of C++ std::basic_istream<(char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, streambuf __sb) -> istream"""
        _pyBasePython.istream_swiginit(self,_pyBasePython.new_istream(*args))
    __swig_destroy__ = _pyBasePython.delete_istream
    def __rshift__(self, *args):
        """
        __rshift__(self, istream __pf) -> istream
        __rshift__(self, ios __pf) -> istream
        __rshift__(self, ios_base __pf) -> istream
        __rshift__(self, bool __n) -> istream
        __rshift__(self, short __n) -> istream
        __rshift__(self, unsigned short __n) -> istream
        __rshift__(self, int __n) -> istream
        __rshift__(self, unsigned int __n) -> istream
        __rshift__(self, long __n) -> istream
        __rshift__(self, unsigned long __n) -> istream
        __rshift__(self, long long __n) -> istream
        __rshift__(self, unsigned long long __n) -> istream
        __rshift__(self, float __f) -> istream
        __rshift__(self, double __f) -> istream
        __rshift__(self, long double __f) -> istream
        __rshift__(self, void __p) -> istream
        __rshift__(self, streambuf __sb) -> istream
        """
        return _pyBasePython.istream___rshift__(self, *args)

    def gcount(self):
        """gcount(self) -> streamsize"""
        return _pyBasePython.istream_gcount(self)

    def get(self, *args):
        """
        get(self) -> int_type
        get(self, char_type __c) -> istream
        get(self, char_type __s, streamsize __n, char_type __delim) -> istream
        get(self, char_type __s, streamsize __n) -> istream
        get(self, streambuf __sb, char_type __delim) -> istream
        get(self, streambuf __sb) -> istream
        """
        return _pyBasePython.istream_get(self, *args)

    def getline(self, *args):
        """
        getline(self, char_type __s, streamsize __n, char_type __delim) -> istream
        getline(self, char_type __s, streamsize __n) -> istream
        """
        return _pyBasePython.istream_getline(self, *args)

    def ignore(self, *args):
        """
        ignore(self, streamsize __n = 1, int_type __delim = std::char_traits< char >::eof()) -> istream
        ignore(self, streamsize __n = 1) -> istream
        ignore(self) -> istream
        """
        return _pyBasePython.istream_ignore(self, *args)

    def peek(self):
        """peek(self) -> int_type"""
        return _pyBasePython.istream_peek(self)

    def read(self, *args):
        """read(self, char_type __s, streamsize __n) -> istream"""
        return _pyBasePython.istream_read(self, *args)

    def readsome(self, *args):
        """readsome(self, char_type __s, streamsize __n) -> streamsize"""
        return _pyBasePython.istream_readsome(self, *args)

    def putback(self, *args):
        """putback(self, char_type __c) -> istream"""
        return _pyBasePython.istream_putback(self, *args)

    def unget(self):
        """unget(self) -> istream"""
        return _pyBasePython.istream_unget(self)

    def sync(self):
        """sync(self) -> int"""
        return _pyBasePython.istream_sync(self)

    def tellg(self):
        """tellg(self) -> pos_type"""
        return _pyBasePython.istream_tellg(self)

    def seekg(self, *args):
        """
        seekg(self, pos_type arg0) -> istream
        seekg(self, off_type arg0, seekdir arg1) -> istream
        """
        return _pyBasePython.istream_seekg(self, *args)

istream.__rshift__ = new_instancemethod(_pyBasePython.istream___rshift__,None,istream)
istream.gcount = new_instancemethod(_pyBasePython.istream_gcount,None,istream)
istream.get = new_instancemethod(_pyBasePython.istream_get,None,istream)
istream.getline = new_instancemethod(_pyBasePython.istream_getline,None,istream)
istream.ignore = new_instancemethod(_pyBasePython.istream_ignore,None,istream)
istream.peek = new_instancemethod(_pyBasePython.istream_peek,None,istream)
istream.read = new_instancemethod(_pyBasePython.istream_read,None,istream)
istream.readsome = new_instancemethod(_pyBasePython.istream_readsome,None,istream)
istream.putback = new_instancemethod(_pyBasePython.istream_putback,None,istream)
istream.unget = new_instancemethod(_pyBasePython.istream_unget,None,istream)
istream.sync = new_instancemethod(_pyBasePython.istream_sync,None,istream)
istream.tellg = new_instancemethod(_pyBasePython.istream_tellg,None,istream)
istream.seekg = new_instancemethod(_pyBasePython.istream_seekg,None,istream)
istream_swigregister = _pyBasePython.istream_swigregister
istream_swigregister(istream)

class iostream(istream,ostream):
    """Proxy of C++ std::basic_iostream<(char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(self, streambuf __sb) -> iostream"""
        _pyBasePython.iostream_swiginit(self,_pyBasePython.new_iostream(*args))
    __swig_destroy__ = _pyBasePython.delete_iostream
iostream_swigregister = _pyBasePython.iostream_swigregister
iostream_swigregister(iostream)

endl_cb_ptr = _pyBasePython.endl_cb_ptr

def endl(*args):
  """endl(ostream arg0) -> ostream"""
  return _pyBasePython.endl(*args)
endl = _pyBasePython.endl
ends_cb_ptr = _pyBasePython.ends_cb_ptr

def ends(*args):
  """ends(ostream arg0) -> ostream"""
  return _pyBasePython.ends(*args)
ends = _pyBasePython.ends
flush_cb_ptr = _pyBasePython.flush_cb_ptr

def flush(*args):
  """flush(ostream arg0) -> ostream"""
  return _pyBasePython.flush(*args)
flush = _pyBasePython.flush
class streambuf(object):
    """Proxy of C++ std::basic_streambuf<(char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _pyBasePython.delete_streambuf
    def pubimbue(self, *args):
        """pubimbue(self, locale __loc) -> locale"""
        return _pyBasePython.streambuf_pubimbue(self, *args)

    def getloc(self):
        """getloc(self) -> locale"""
        return _pyBasePython.streambuf_getloc(self)

    def pubsetbuf(self, *args):
        """pubsetbuf(self, char_type __s, streamsize __n) -> streambuf"""
        return _pyBasePython.streambuf_pubsetbuf(self, *args)

    def pubseekoff(self, *args):
        """
        pubseekoff(self, off_type __off, seekdir __way, openmode __mode = std::ios_base::in|std::ios_base::out) -> pos_type
        pubseekoff(self, off_type __off, seekdir __way) -> pos_type
        """
        return _pyBasePython.streambuf_pubseekoff(self, *args)

    def pubseekpos(self, *args):
        """
        pubseekpos(self, pos_type __sp, openmode __mode = std::ios_base::in|std::ios_base::out) -> pos_type
        pubseekpos(self, pos_type __sp) -> pos_type
        """
        return _pyBasePython.streambuf_pubseekpos(self, *args)

    def pubsync(self):
        """pubsync(self) -> int"""
        return _pyBasePython.streambuf_pubsync(self)

    def in_avail(self):
        """in_avail(self) -> streamsize"""
        return _pyBasePython.streambuf_in_avail(self)

    def snextc(self):
        """snextc(self) -> int_type"""
        return _pyBasePython.streambuf_snextc(self)

    def sbumpc(self):
        """sbumpc(self) -> int_type"""
        return _pyBasePython.streambuf_sbumpc(self)

    def sgetc(self):
        """sgetc(self) -> int_type"""
        return _pyBasePython.streambuf_sgetc(self)

    def sgetn(self, *args):
        """sgetn(self, char_type __s, streamsize __n) -> streamsize"""
        return _pyBasePython.streambuf_sgetn(self, *args)

    def sputbackc(self, *args):
        """sputbackc(self, char_type __c) -> int_type"""
        return _pyBasePython.streambuf_sputbackc(self, *args)

    def sungetc(self):
        """sungetc(self) -> int_type"""
        return _pyBasePython.streambuf_sungetc(self)

    def sputc(self, *args):
        """sputc(self, char_type __c) -> int_type"""
        return _pyBasePython.streambuf_sputc(self, *args)

    def sputn(self, *args):
        """sputn(self, char_type __s, streamsize __n) -> streamsize"""
        return _pyBasePython.streambuf_sputn(self, *args)

streambuf.pubimbue = new_instancemethod(_pyBasePython.streambuf_pubimbue,None,streambuf)
streambuf.getloc = new_instancemethod(_pyBasePython.streambuf_getloc,None,streambuf)
streambuf.pubsetbuf = new_instancemethod(_pyBasePython.streambuf_pubsetbuf,None,streambuf)
streambuf.pubseekoff = new_instancemethod(_pyBasePython.streambuf_pubseekoff,None,streambuf)
streambuf.pubseekpos = new_instancemethod(_pyBasePython.streambuf_pubseekpos,None,streambuf)
streambuf.pubsync = new_instancemethod(_pyBasePython.streambuf_pubsync,None,streambuf)
streambuf.in_avail = new_instancemethod(_pyBasePython.streambuf_in_avail,None,streambuf)
streambuf.snextc = new_instancemethod(_pyBasePython.streambuf_snextc,None,streambuf)
streambuf.sbumpc = new_instancemethod(_pyBasePython.streambuf_sbumpc,None,streambuf)
streambuf.sgetc = new_instancemethod(_pyBasePython.streambuf_sgetc,None,streambuf)
streambuf.sgetn = new_instancemethod(_pyBasePython.streambuf_sgetn,None,streambuf)
streambuf.sputbackc = new_instancemethod(_pyBasePython.streambuf_sputbackc,None,streambuf)
streambuf.sungetc = new_instancemethod(_pyBasePython.streambuf_sungetc,None,streambuf)
streambuf.sputc = new_instancemethod(_pyBasePython.streambuf_sputc,None,streambuf)
streambuf.sputn = new_instancemethod(_pyBasePython.streambuf_sputn,None,streambuf)
streambuf_swigregister = _pyBasePython.streambuf_swigregister
streambuf_swigregister(streambuf)

class istringstream(istream):
    """Proxy of C++ std::basic_istringstream<(char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, openmode __mode = ios_base_in) -> istringstream
        __init__(self) -> istringstream
        __init__(self, string __str, openmode __mode = ios_base_in) -> istringstream
        __init__(self, string __str) -> istringstream
        """
        _pyBasePython.istringstream_swiginit(self,_pyBasePython.new_istringstream(*args))
    __swig_destroy__ = _pyBasePython.delete_istringstream
    def rdbuf(self):
        """rdbuf(self) -> std::basic_stringbuf<(char,std::char_traits<(char)>,std::allocator<(char)>)>"""
        return _pyBasePython.istringstream_rdbuf(self)

    def str(self, *args):
        """
        str(self) -> string
        str(self, string __s)
        """
        return _pyBasePython.istringstream_str(self, *args)

istringstream.rdbuf = new_instancemethod(_pyBasePython.istringstream_rdbuf,None,istringstream)
istringstream.str = new_instancemethod(_pyBasePython.istringstream_str,None,istringstream)
istringstream_swigregister = _pyBasePython.istringstream_swigregister
istringstream_swigregister(istringstream)

class ostringstream(ostream):
    """Proxy of C++ std::basic_ostringstream<(char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, openmode __mode = out) -> ostringstream
        __init__(self) -> ostringstream
        __init__(self, string __str, openmode __mode = out) -> ostringstream
        __init__(self, string __str) -> ostringstream
        """
        _pyBasePython.ostringstream_swiginit(self,_pyBasePython.new_ostringstream(*args))
    __swig_destroy__ = _pyBasePython.delete_ostringstream
    def rdbuf(self):
        """rdbuf(self) -> std::basic_stringbuf<(char,std::char_traits<(char)>,std::allocator<(char)>)>"""
        return _pyBasePython.ostringstream_rdbuf(self)

    def str(self):
        """str(self) -> string"""
        return _pyBasePython.ostringstream_str(self)

ostringstream.rdbuf = new_instancemethod(_pyBasePython.ostringstream_rdbuf,None,ostringstream)
ostringstream.str = new_instancemethod(_pyBasePython.ostringstream_str,None,ostringstream)
ostringstream_swigregister = _pyBasePython.ostringstream_swigregister
ostringstream_swigregister(ostringstream)

class stringstream(iostream):
    """Proxy of C++ std::basic_stringstream<(char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, openmode __m = ios_base::out|ios_base::in) -> stringstream
        __init__(self) -> stringstream
        __init__(self, string __str, openmode __m = ios_base::out|ios_base::in) -> stringstream
        __init__(self, string __str) -> stringstream
        """
        _pyBasePython.stringstream_swiginit(self,_pyBasePython.new_stringstream(*args))
    __swig_destroy__ = _pyBasePython.delete_stringstream
    def rdbuf(self):
        """rdbuf(self) -> std::basic_stringbuf<(char,std::char_traits<(char)>,std::allocator<(char)>)>"""
        return _pyBasePython.stringstream_rdbuf(self)

    def str(self, *args):
        """
        str(self) -> string
        str(self, string __s)
        """
        return _pyBasePython.stringstream_str(self, *args)

stringstream.rdbuf = new_instancemethod(_pyBasePython.stringstream_rdbuf,None,stringstream)
stringstream.str = new_instancemethod(_pyBasePython.stringstream_str,None,stringstream)
stringstream_swigregister = _pyBasePython.stringstream_swigregister
stringstream_swigregister(stringstream)

class vectorstring(object):
    """Proxy of C++ std::vector<(std::string)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.vectorstring_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.vectorstring___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.vectorstring___bool__(self)

    def __len__(self):
        """__len__(self) -> std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::size_type"""
        return _pyBasePython.vectorstring___len__(self)

    def pop(self):
        """pop(self) -> std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type"""
        return _pyBasePython.vectorstring_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::difference_type i, 
            std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::difference_type j) -> vectorstring
        """
        return _pyBasePython.vectorstring___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::difference_type i, 
            std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::difference_type j, 
            vectorstring v)
        """
        return _pyBasePython.vectorstring___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::difference_type i, 
            std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::difference_type j)
        """
        return _pyBasePython.vectorstring___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.vectorstring___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorstring
        __getitem__(self, std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::difference_type i) -> std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type
        """
        return _pyBasePython.vectorstring___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorstring v)
        __setitem__(self, std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::difference_type i, 
            std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type x)
        """
        return _pyBasePython.vectorstring___setitem__(self, *args)

    def append(self, *args):
        """append(self, std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type x)"""
        return _pyBasePython.vectorstring_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.vectorstring_empty(self)

    def size(self):
        """size(self) -> std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::size_type"""
        return _pyBasePython.vectorstring_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.vectorstring_clear(self)

    def swap(self, *args):
        """swap(self, vectorstring v)"""
        return _pyBasePython.vectorstring_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::allocator_type"""
        return _pyBasePython.vectorstring_get_allocator(self)

    def begin(self):
        """begin(self) -> std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::const_iterator"""
        return _pyBasePython.vectorstring_begin(self)

    def end(self):
        """end(self) -> std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::const_iterator"""
        return _pyBasePython.vectorstring_end(self)

    def rbegin(self):
        """rbegin(self) -> std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::const_reverse_iterator"""
        return _pyBasePython.vectorstring_rbegin(self)

    def rend(self):
        """rend(self) -> std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::const_reverse_iterator"""
        return _pyBasePython.vectorstring_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.vectorstring_pop_back(self)

    def erase(self, *args):
        """
        erase(self, std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::iterator pos) -> std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::iterator
        erase(self, std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::iterator first, 
            std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::iterator last) -> std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::iterator
        """
        return _pyBasePython.vectorstring_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorstring
        __init__(self, vectorstring arg0) -> vectorstring
        __init__(self, std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::size_type size) -> vectorstring
        __init__(self, std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::size_type size, 
            std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type value) -> vectorstring
        """
        _pyBasePython.vectorstring_swiginit(self,_pyBasePython.new_vectorstring(*args))
    def push_back(self, *args):
        """push_back(self, std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type x)"""
        return _pyBasePython.vectorstring_push_back(self, *args)

    def front(self):
        """front(self) -> std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type"""
        return _pyBasePython.vectorstring_front(self)

    def back(self):
        """back(self) -> std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type"""
        return _pyBasePython.vectorstring_back(self)

    def assign(self, *args):
        """
        assign(self, std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::size_type n, 
            std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type x)
        """
        return _pyBasePython.vectorstring_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::size_type new_size)
        resize(self, std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::size_type new_size, 
            std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type x)
        """
        return _pyBasePython.vectorstring_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::iterator pos, 
            std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type x) -> std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::iterator
        insert(self, std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::iterator pos, 
            std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::size_type n, 
            std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type x)
        """
        return _pyBasePython.vectorstring_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::size_type n)"""
        return _pyBasePython.vectorstring_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> std::vector<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::size_type"""
        return _pyBasePython.vectorstring_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorstring
vectorstring.iterator = new_instancemethod(_pyBasePython.vectorstring_iterator,None,vectorstring)
vectorstring.__nonzero__ = new_instancemethod(_pyBasePython.vectorstring___nonzero__,None,vectorstring)
vectorstring.__bool__ = new_instancemethod(_pyBasePython.vectorstring___bool__,None,vectorstring)
vectorstring.__len__ = new_instancemethod(_pyBasePython.vectorstring___len__,None,vectorstring)
vectorstring.pop = new_instancemethod(_pyBasePython.vectorstring_pop,None,vectorstring)
vectorstring.__getslice__ = new_instancemethod(_pyBasePython.vectorstring___getslice__,None,vectorstring)
vectorstring.__setslice__ = new_instancemethod(_pyBasePython.vectorstring___setslice__,None,vectorstring)
vectorstring.__delslice__ = new_instancemethod(_pyBasePython.vectorstring___delslice__,None,vectorstring)
vectorstring.__delitem__ = new_instancemethod(_pyBasePython.vectorstring___delitem__,None,vectorstring)
vectorstring.__getitem__ = new_instancemethod(_pyBasePython.vectorstring___getitem__,None,vectorstring)
vectorstring.__setitem__ = new_instancemethod(_pyBasePython.vectorstring___setitem__,None,vectorstring)
vectorstring.append = new_instancemethod(_pyBasePython.vectorstring_append,None,vectorstring)
vectorstring.empty = new_instancemethod(_pyBasePython.vectorstring_empty,None,vectorstring)
vectorstring.size = new_instancemethod(_pyBasePython.vectorstring_size,None,vectorstring)
vectorstring.clear = new_instancemethod(_pyBasePython.vectorstring_clear,None,vectorstring)
vectorstring.swap = new_instancemethod(_pyBasePython.vectorstring_swap,None,vectorstring)
vectorstring.get_allocator = new_instancemethod(_pyBasePython.vectorstring_get_allocator,None,vectorstring)
vectorstring.begin = new_instancemethod(_pyBasePython.vectorstring_begin,None,vectorstring)
vectorstring.end = new_instancemethod(_pyBasePython.vectorstring_end,None,vectorstring)
vectorstring.rbegin = new_instancemethod(_pyBasePython.vectorstring_rbegin,None,vectorstring)
vectorstring.rend = new_instancemethod(_pyBasePython.vectorstring_rend,None,vectorstring)
vectorstring.pop_back = new_instancemethod(_pyBasePython.vectorstring_pop_back,None,vectorstring)
vectorstring.erase = new_instancemethod(_pyBasePython.vectorstring_erase,None,vectorstring)
vectorstring.push_back = new_instancemethod(_pyBasePython.vectorstring_push_back,None,vectorstring)
vectorstring.front = new_instancemethod(_pyBasePython.vectorstring_front,None,vectorstring)
vectorstring.back = new_instancemethod(_pyBasePython.vectorstring_back,None,vectorstring)
vectorstring.assign = new_instancemethod(_pyBasePython.vectorstring_assign,None,vectorstring)
vectorstring.resize = new_instancemethod(_pyBasePython.vectorstring_resize,None,vectorstring)
vectorstring.insert = new_instancemethod(_pyBasePython.vectorstring_insert,None,vectorstring)
vectorstring.reserve = new_instancemethod(_pyBasePython.vectorstring_reserve,None,vectorstring)
vectorstring.capacity = new_instancemethod(_pyBasePython.vectorstring_capacity,None,vectorstring)
vectorstring_swigregister = _pyBasePython.vectorstring_swigregister
vectorstring_swigregister(vectorstring)

class liststring(object):
    """Proxy of C++ std::list<(std::string)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.liststring_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.liststring___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.liststring___bool__(self)

    def __len__(self):
        """__len__(self) -> std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::size_type"""
        return _pyBasePython.liststring___len__(self)

    def pop(self):
        """pop(self) -> std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type"""
        return _pyBasePython.liststring_pop(self)

    def __getslice__(self, *args):
        """
        __getslice__(self, std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::difference_type i, 
            std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::difference_type j) -> liststring
        """
        return _pyBasePython.liststring___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(self, std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::difference_type i, 
            std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::difference_type j, 
            liststring v)
        """
        return _pyBasePython.liststring___setslice__(self, *args)

    def __delslice__(self, *args):
        """
        __delslice__(self, std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::difference_type i, 
            std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::difference_type j)
        """
        return _pyBasePython.liststring___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.liststring___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> liststring
        __getitem__(self, std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::difference_type i) -> std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type
        """
        return _pyBasePython.liststring___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, liststring v)
        __setitem__(self, std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::difference_type i, 
            std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type x)
        """
        return _pyBasePython.liststring___setitem__(self, *args)

    def append(self, *args):
        """append(self, std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type x)"""
        return _pyBasePython.liststring_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.liststring_empty(self)

    def size(self):
        """size(self) -> std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::size_type"""
        return _pyBasePython.liststring_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.liststring_clear(self)

    def swap(self, *args):
        """swap(self, liststring v)"""
        return _pyBasePython.liststring_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::allocator_type"""
        return _pyBasePython.liststring_get_allocator(self)

    def begin(self):
        """begin(self) -> std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::const_iterator"""
        return _pyBasePython.liststring_begin(self)

    def end(self):
        """end(self) -> std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::const_iterator"""
        return _pyBasePython.liststring_end(self)

    def rbegin(self):
        """rbegin(self) -> std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::const_reverse_iterator"""
        return _pyBasePython.liststring_rbegin(self)

    def rend(self):
        """rend(self) -> std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::const_reverse_iterator"""
        return _pyBasePython.liststring_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.liststring_pop_back(self)

    def erase(self, *args):
        """
        erase(self, std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::iterator pos) -> std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::iterator
        erase(self, std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::iterator first, 
            std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::iterator last) -> std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::iterator
        """
        return _pyBasePython.liststring_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> liststring
        __init__(self, liststring arg0) -> liststring
        __init__(self, std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::size_type size) -> liststring
        __init__(self, std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::size_type size, 
            std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type value) -> liststring
        """
        _pyBasePython.liststring_swiginit(self,_pyBasePython.new_liststring(*args))
    def push_back(self, *args):
        """push_back(self, std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type x)"""
        return _pyBasePython.liststring_push_back(self, *args)

    def front(self):
        """front(self) -> std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type"""
        return _pyBasePython.liststring_front(self)

    def back(self):
        """back(self) -> std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type"""
        return _pyBasePython.liststring_back(self)

    def assign(self, *args):
        """
        assign(self, std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::size_type n, 
            std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type x)
        """
        return _pyBasePython.liststring_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::size_type new_size)
        resize(self, std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::size_type new_size, 
            std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type x)
        """
        return _pyBasePython.liststring_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::iterator pos, 
            std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type x) -> std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::iterator
        insert(self, std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::iterator pos, 
            std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::size_type n, 
            std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type x)
        """
        return _pyBasePython.liststring_insert(self, *args)

    def pop_front(self):
        """pop_front(self)"""
        return _pyBasePython.liststring_pop_front(self)

    def push_front(self, *args):
        """push_front(self, std::list<(std::basic_string<(char,std::char_traits<(char)>,std::allocator<(char)>)>)>::value_type x)"""
        return _pyBasePython.liststring_push_front(self, *args)

    def reverse(self):
        """reverse(self)"""
        return _pyBasePython.liststring_reverse(self)

    __swig_destroy__ = _pyBasePython.delete_liststring
liststring.iterator = new_instancemethod(_pyBasePython.liststring_iterator,None,liststring)
liststring.__nonzero__ = new_instancemethod(_pyBasePython.liststring___nonzero__,None,liststring)
liststring.__bool__ = new_instancemethod(_pyBasePython.liststring___bool__,None,liststring)
liststring.__len__ = new_instancemethod(_pyBasePython.liststring___len__,None,liststring)
liststring.pop = new_instancemethod(_pyBasePython.liststring_pop,None,liststring)
liststring.__getslice__ = new_instancemethod(_pyBasePython.liststring___getslice__,None,liststring)
liststring.__setslice__ = new_instancemethod(_pyBasePython.liststring___setslice__,None,liststring)
liststring.__delslice__ = new_instancemethod(_pyBasePython.liststring___delslice__,None,liststring)
liststring.__delitem__ = new_instancemethod(_pyBasePython.liststring___delitem__,None,liststring)
liststring.__getitem__ = new_instancemethod(_pyBasePython.liststring___getitem__,None,liststring)
liststring.__setitem__ = new_instancemethod(_pyBasePython.liststring___setitem__,None,liststring)
liststring.append = new_instancemethod(_pyBasePython.liststring_append,None,liststring)
liststring.empty = new_instancemethod(_pyBasePython.liststring_empty,None,liststring)
liststring.size = new_instancemethod(_pyBasePython.liststring_size,None,liststring)
liststring.clear = new_instancemethod(_pyBasePython.liststring_clear,None,liststring)
liststring.swap = new_instancemethod(_pyBasePython.liststring_swap,None,liststring)
liststring.get_allocator = new_instancemethod(_pyBasePython.liststring_get_allocator,None,liststring)
liststring.begin = new_instancemethod(_pyBasePython.liststring_begin,None,liststring)
liststring.end = new_instancemethod(_pyBasePython.liststring_end,None,liststring)
liststring.rbegin = new_instancemethod(_pyBasePython.liststring_rbegin,None,liststring)
liststring.rend = new_instancemethod(_pyBasePython.liststring_rend,None,liststring)
liststring.pop_back = new_instancemethod(_pyBasePython.liststring_pop_back,None,liststring)
liststring.erase = new_instancemethod(_pyBasePython.liststring_erase,None,liststring)
liststring.push_back = new_instancemethod(_pyBasePython.liststring_push_back,None,liststring)
liststring.front = new_instancemethod(_pyBasePython.liststring_front,None,liststring)
liststring.back = new_instancemethod(_pyBasePython.liststring_back,None,liststring)
liststring.assign = new_instancemethod(_pyBasePython.liststring_assign,None,liststring)
liststring.resize = new_instancemethod(_pyBasePython.liststring_resize,None,liststring)
liststring.insert = new_instancemethod(_pyBasePython.liststring_insert,None,liststring)
liststring.pop_front = new_instancemethod(_pyBasePython.liststring_pop_front,None,liststring)
liststring.push_front = new_instancemethod(_pyBasePython.liststring_push_front,None,liststring)
liststring.reverse = new_instancemethod(_pyBasePython.liststring_reverse,None,liststring)
liststring_swigregister = _pyBasePython.liststring_swigregister
liststring_swigregister(liststring)

class mapULD(object):
    """Proxy of C++ std::map<(unsigned long,double)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapULD_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.mapULD___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.mapULD___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.mapULD___len__(self)

    def __getitem__(self, *args):
        """__getitem__(self, key_type key) -> mapped_type"""
        return _pyBasePython.mapULD___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(self, key_type key)"""
        return _pyBasePython.mapULD___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(self, key_type key) -> bool"""
        return _pyBasePython.mapULD_has_key(self, *args)

    def keys(self):
        """keys(self) -> PyObject"""
        return _pyBasePython.mapULD_keys(self)

    def values(self):
        """values(self) -> PyObject"""
        return _pyBasePython.mapULD_values(self)

    def items(self):
        """items(self) -> PyObject"""
        return _pyBasePython.mapULD_items(self)

    def __contains__(self, *args):
        """__contains__(self, key_type key) -> bool"""
        return _pyBasePython.mapULD___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapULD_key_iterator(self)

    def value_iterator(self):
        """value_iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapULD_value_iterator(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args):
        """__setitem__(self, key_type key, mapped_type x)"""
        return _pyBasePython.mapULD___setitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(unsigned long)> arg0) -> mapULD
        __init__(self) -> mapULD
        __init__(self, mapULD arg0) -> mapULD
        """
        _pyBasePython.mapULD_swiginit(self,_pyBasePython.new_mapULD(*args))
    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.mapULD_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.mapULD_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.mapULD_clear(self)

    def swap(self, *args):
        """swap(self, mapULD v)"""
        return _pyBasePython.mapULD_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.mapULD_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.mapULD_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.mapULD_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.mapULD_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.mapULD_rend(self)

    def count(self, *args):
        """count(self, key_type x) -> size_type"""
        return _pyBasePython.mapULD_count(self, *args)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator position)
        erase(self, iterator first, iterator last)
        """
        return _pyBasePython.mapULD_erase(self, *args)

    def find(self, *args):
        """find(self, key_type x) -> iterator"""
        return _pyBasePython.mapULD_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, key_type x) -> iterator"""
        return _pyBasePython.mapULD_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, key_type x) -> iterator"""
        return _pyBasePython.mapULD_upper_bound(self, *args)

    __swig_destroy__ = _pyBasePython.delete_mapULD
mapULD.iterator = new_instancemethod(_pyBasePython.mapULD_iterator,None,mapULD)
mapULD.__nonzero__ = new_instancemethod(_pyBasePython.mapULD___nonzero__,None,mapULD)
mapULD.__bool__ = new_instancemethod(_pyBasePython.mapULD___bool__,None,mapULD)
mapULD.__len__ = new_instancemethod(_pyBasePython.mapULD___len__,None,mapULD)
mapULD.__getitem__ = new_instancemethod(_pyBasePython.mapULD___getitem__,None,mapULD)
mapULD.__delitem__ = new_instancemethod(_pyBasePython.mapULD___delitem__,None,mapULD)
mapULD.has_key = new_instancemethod(_pyBasePython.mapULD_has_key,None,mapULD)
mapULD.keys = new_instancemethod(_pyBasePython.mapULD_keys,None,mapULD)
mapULD.values = new_instancemethod(_pyBasePython.mapULD_values,None,mapULD)
mapULD.items = new_instancemethod(_pyBasePython.mapULD_items,None,mapULD)
mapULD.__contains__ = new_instancemethod(_pyBasePython.mapULD___contains__,None,mapULD)
mapULD.key_iterator = new_instancemethod(_pyBasePython.mapULD_key_iterator,None,mapULD)
mapULD.value_iterator = new_instancemethod(_pyBasePython.mapULD_value_iterator,None,mapULD)
mapULD.__setitem__ = new_instancemethod(_pyBasePython.mapULD___setitem__,None,mapULD)
mapULD.empty = new_instancemethod(_pyBasePython.mapULD_empty,None,mapULD)
mapULD.size = new_instancemethod(_pyBasePython.mapULD_size,None,mapULD)
mapULD.clear = new_instancemethod(_pyBasePython.mapULD_clear,None,mapULD)
mapULD.swap = new_instancemethod(_pyBasePython.mapULD_swap,None,mapULD)
mapULD.get_allocator = new_instancemethod(_pyBasePython.mapULD_get_allocator,None,mapULD)
mapULD.begin = new_instancemethod(_pyBasePython.mapULD_begin,None,mapULD)
mapULD.end = new_instancemethod(_pyBasePython.mapULD_end,None,mapULD)
mapULD.rbegin = new_instancemethod(_pyBasePython.mapULD_rbegin,None,mapULD)
mapULD.rend = new_instancemethod(_pyBasePython.mapULD_rend,None,mapULD)
mapULD.count = new_instancemethod(_pyBasePython.mapULD_count,None,mapULD)
mapULD.erase = new_instancemethod(_pyBasePython.mapULD_erase,None,mapULD)
mapULD.find = new_instancemethod(_pyBasePython.mapULD_find,None,mapULD)
mapULD.lower_bound = new_instancemethod(_pyBasePython.mapULD_lower_bound,None,mapULD)
mapULD.upper_bound = new_instancemethod(_pyBasePython.mapULD_upper_bound,None,mapULD)
mapULD_swigregister = _pyBasePython.mapULD_swigregister
mapULD_swigregister(mapULD)

class mapUCUC(object):
    """Proxy of C++ std::map<(unsigned char,unsigned char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapUCUC_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.mapUCUC___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.mapUCUC___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.mapUCUC___len__(self)

    def __getitem__(self, *args):
        """__getitem__(self, key_type key) -> mapped_type"""
        return _pyBasePython.mapUCUC___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(self, key_type key)"""
        return _pyBasePython.mapUCUC___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(self, key_type key) -> bool"""
        return _pyBasePython.mapUCUC_has_key(self, *args)

    def keys(self):
        """keys(self) -> PyObject"""
        return _pyBasePython.mapUCUC_keys(self)

    def values(self):
        """values(self) -> PyObject"""
        return _pyBasePython.mapUCUC_values(self)

    def items(self):
        """items(self) -> PyObject"""
        return _pyBasePython.mapUCUC_items(self)

    def __contains__(self, *args):
        """__contains__(self, key_type key) -> bool"""
        return _pyBasePython.mapUCUC___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapUCUC_key_iterator(self)

    def value_iterator(self):
        """value_iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapUCUC_value_iterator(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args):
        """__setitem__(self, key_type key, mapped_type x)"""
        return _pyBasePython.mapUCUC___setitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(unsigned char)> arg0) -> mapUCUC
        __init__(self) -> mapUCUC
        __init__(self, mapUCUC arg0) -> mapUCUC
        """
        _pyBasePython.mapUCUC_swiginit(self,_pyBasePython.new_mapUCUC(*args))
    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.mapUCUC_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.mapUCUC_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.mapUCUC_clear(self)

    def swap(self, *args):
        """swap(self, mapUCUC v)"""
        return _pyBasePython.mapUCUC_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.mapUCUC_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.mapUCUC_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.mapUCUC_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.mapUCUC_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.mapUCUC_rend(self)

    def count(self, *args):
        """count(self, key_type x) -> size_type"""
        return _pyBasePython.mapUCUC_count(self, *args)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator position)
        erase(self, iterator first, iterator last)
        """
        return _pyBasePython.mapUCUC_erase(self, *args)

    def find(self, *args):
        """find(self, key_type x) -> iterator"""
        return _pyBasePython.mapUCUC_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, key_type x) -> iterator"""
        return _pyBasePython.mapUCUC_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, key_type x) -> iterator"""
        return _pyBasePython.mapUCUC_upper_bound(self, *args)

    __swig_destroy__ = _pyBasePython.delete_mapUCUC
mapUCUC.iterator = new_instancemethod(_pyBasePython.mapUCUC_iterator,None,mapUCUC)
mapUCUC.__nonzero__ = new_instancemethod(_pyBasePython.mapUCUC___nonzero__,None,mapUCUC)
mapUCUC.__bool__ = new_instancemethod(_pyBasePython.mapUCUC___bool__,None,mapUCUC)
mapUCUC.__len__ = new_instancemethod(_pyBasePython.mapUCUC___len__,None,mapUCUC)
mapUCUC.__getitem__ = new_instancemethod(_pyBasePython.mapUCUC___getitem__,None,mapUCUC)
mapUCUC.__delitem__ = new_instancemethod(_pyBasePython.mapUCUC___delitem__,None,mapUCUC)
mapUCUC.has_key = new_instancemethod(_pyBasePython.mapUCUC_has_key,None,mapUCUC)
mapUCUC.keys = new_instancemethod(_pyBasePython.mapUCUC_keys,None,mapUCUC)
mapUCUC.values = new_instancemethod(_pyBasePython.mapUCUC_values,None,mapUCUC)
mapUCUC.items = new_instancemethod(_pyBasePython.mapUCUC_items,None,mapUCUC)
mapUCUC.__contains__ = new_instancemethod(_pyBasePython.mapUCUC___contains__,None,mapUCUC)
mapUCUC.key_iterator = new_instancemethod(_pyBasePython.mapUCUC_key_iterator,None,mapUCUC)
mapUCUC.value_iterator = new_instancemethod(_pyBasePython.mapUCUC_value_iterator,None,mapUCUC)
mapUCUC.__setitem__ = new_instancemethod(_pyBasePython.mapUCUC___setitem__,None,mapUCUC)
mapUCUC.empty = new_instancemethod(_pyBasePython.mapUCUC_empty,None,mapUCUC)
mapUCUC.size = new_instancemethod(_pyBasePython.mapUCUC_size,None,mapUCUC)
mapUCUC.clear = new_instancemethod(_pyBasePython.mapUCUC_clear,None,mapUCUC)
mapUCUC.swap = new_instancemethod(_pyBasePython.mapUCUC_swap,None,mapUCUC)
mapUCUC.get_allocator = new_instancemethod(_pyBasePython.mapUCUC_get_allocator,None,mapUCUC)
mapUCUC.begin = new_instancemethod(_pyBasePython.mapUCUC_begin,None,mapUCUC)
mapUCUC.end = new_instancemethod(_pyBasePython.mapUCUC_end,None,mapUCUC)
mapUCUC.rbegin = new_instancemethod(_pyBasePython.mapUCUC_rbegin,None,mapUCUC)
mapUCUC.rend = new_instancemethod(_pyBasePython.mapUCUC_rend,None,mapUCUC)
mapUCUC.count = new_instancemethod(_pyBasePython.mapUCUC_count,None,mapUCUC)
mapUCUC.erase = new_instancemethod(_pyBasePython.mapUCUC_erase,None,mapUCUC)
mapUCUC.find = new_instancemethod(_pyBasePython.mapUCUC_find,None,mapUCUC)
mapUCUC.lower_bound = new_instancemethod(_pyBasePython.mapUCUC_lower_bound,None,mapUCUC)
mapUCUC.upper_bound = new_instancemethod(_pyBasePython.mapUCUC_upper_bound,None,mapUCUC)
mapUCUC_swigregister = _pyBasePython.mapUCUC_swigregister
mapUCUC_swigregister(mapUCUC)

class mapUSUS(object):
    """Proxy of C++ std::map<(unsigned short,unsigned short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapUSUS_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.mapUSUS___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.mapUSUS___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.mapUSUS___len__(self)

    def __getitem__(self, *args):
        """__getitem__(self, key_type key) -> mapped_type"""
        return _pyBasePython.mapUSUS___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(self, key_type key)"""
        return _pyBasePython.mapUSUS___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(self, key_type key) -> bool"""
        return _pyBasePython.mapUSUS_has_key(self, *args)

    def keys(self):
        """keys(self) -> PyObject"""
        return _pyBasePython.mapUSUS_keys(self)

    def values(self):
        """values(self) -> PyObject"""
        return _pyBasePython.mapUSUS_values(self)

    def items(self):
        """items(self) -> PyObject"""
        return _pyBasePython.mapUSUS_items(self)

    def __contains__(self, *args):
        """__contains__(self, key_type key) -> bool"""
        return _pyBasePython.mapUSUS___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapUSUS_key_iterator(self)

    def value_iterator(self):
        """value_iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapUSUS_value_iterator(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args):
        """__setitem__(self, key_type key, mapped_type x)"""
        return _pyBasePython.mapUSUS___setitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(unsigned short)> arg0) -> mapUSUS
        __init__(self) -> mapUSUS
        __init__(self, mapUSUS arg0) -> mapUSUS
        """
        _pyBasePython.mapUSUS_swiginit(self,_pyBasePython.new_mapUSUS(*args))
    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.mapUSUS_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.mapUSUS_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.mapUSUS_clear(self)

    def swap(self, *args):
        """swap(self, mapUSUS v)"""
        return _pyBasePython.mapUSUS_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.mapUSUS_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.mapUSUS_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.mapUSUS_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.mapUSUS_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.mapUSUS_rend(self)

    def count(self, *args):
        """count(self, key_type x) -> size_type"""
        return _pyBasePython.mapUSUS_count(self, *args)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator position)
        erase(self, iterator first, iterator last)
        """
        return _pyBasePython.mapUSUS_erase(self, *args)

    def find(self, *args):
        """find(self, key_type x) -> iterator"""
        return _pyBasePython.mapUSUS_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, key_type x) -> iterator"""
        return _pyBasePython.mapUSUS_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, key_type x) -> iterator"""
        return _pyBasePython.mapUSUS_upper_bound(self, *args)

    __swig_destroy__ = _pyBasePython.delete_mapUSUS
mapUSUS.iterator = new_instancemethod(_pyBasePython.mapUSUS_iterator,None,mapUSUS)
mapUSUS.__nonzero__ = new_instancemethod(_pyBasePython.mapUSUS___nonzero__,None,mapUSUS)
mapUSUS.__bool__ = new_instancemethod(_pyBasePython.mapUSUS___bool__,None,mapUSUS)
mapUSUS.__len__ = new_instancemethod(_pyBasePython.mapUSUS___len__,None,mapUSUS)
mapUSUS.__getitem__ = new_instancemethod(_pyBasePython.mapUSUS___getitem__,None,mapUSUS)
mapUSUS.__delitem__ = new_instancemethod(_pyBasePython.mapUSUS___delitem__,None,mapUSUS)
mapUSUS.has_key = new_instancemethod(_pyBasePython.mapUSUS_has_key,None,mapUSUS)
mapUSUS.keys = new_instancemethod(_pyBasePython.mapUSUS_keys,None,mapUSUS)
mapUSUS.values = new_instancemethod(_pyBasePython.mapUSUS_values,None,mapUSUS)
mapUSUS.items = new_instancemethod(_pyBasePython.mapUSUS_items,None,mapUSUS)
mapUSUS.__contains__ = new_instancemethod(_pyBasePython.mapUSUS___contains__,None,mapUSUS)
mapUSUS.key_iterator = new_instancemethod(_pyBasePython.mapUSUS_key_iterator,None,mapUSUS)
mapUSUS.value_iterator = new_instancemethod(_pyBasePython.mapUSUS_value_iterator,None,mapUSUS)
mapUSUS.__setitem__ = new_instancemethod(_pyBasePython.mapUSUS___setitem__,None,mapUSUS)
mapUSUS.empty = new_instancemethod(_pyBasePython.mapUSUS_empty,None,mapUSUS)
mapUSUS.size = new_instancemethod(_pyBasePython.mapUSUS_size,None,mapUSUS)
mapUSUS.clear = new_instancemethod(_pyBasePython.mapUSUS_clear,None,mapUSUS)
mapUSUS.swap = new_instancemethod(_pyBasePython.mapUSUS_swap,None,mapUSUS)
mapUSUS.get_allocator = new_instancemethod(_pyBasePython.mapUSUS_get_allocator,None,mapUSUS)
mapUSUS.begin = new_instancemethod(_pyBasePython.mapUSUS_begin,None,mapUSUS)
mapUSUS.end = new_instancemethod(_pyBasePython.mapUSUS_end,None,mapUSUS)
mapUSUS.rbegin = new_instancemethod(_pyBasePython.mapUSUS_rbegin,None,mapUSUS)
mapUSUS.rend = new_instancemethod(_pyBasePython.mapUSUS_rend,None,mapUSUS)
mapUSUS.count = new_instancemethod(_pyBasePython.mapUSUS_count,None,mapUSUS)
mapUSUS.erase = new_instancemethod(_pyBasePython.mapUSUS_erase,None,mapUSUS)
mapUSUS.find = new_instancemethod(_pyBasePython.mapUSUS_find,None,mapUSUS)
mapUSUS.lower_bound = new_instancemethod(_pyBasePython.mapUSUS_lower_bound,None,mapUSUS)
mapUSUS.upper_bound = new_instancemethod(_pyBasePython.mapUSUS_upper_bound,None,mapUSUS)
mapUSUS_swigregister = _pyBasePython.mapUSUS_swigregister
mapUSUS_swigregister(mapUSUS)

class mapULUL(object):
    """Proxy of C++ std::map<(unsigned long,unsigned long)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapULUL_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.mapULUL___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.mapULUL___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.mapULUL___len__(self)

    def __getitem__(self, *args):
        """__getitem__(self, key_type key) -> mapped_type"""
        return _pyBasePython.mapULUL___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(self, key_type key)"""
        return _pyBasePython.mapULUL___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(self, key_type key) -> bool"""
        return _pyBasePython.mapULUL_has_key(self, *args)

    def keys(self):
        """keys(self) -> PyObject"""
        return _pyBasePython.mapULUL_keys(self)

    def values(self):
        """values(self) -> PyObject"""
        return _pyBasePython.mapULUL_values(self)

    def items(self):
        """items(self) -> PyObject"""
        return _pyBasePython.mapULUL_items(self)

    def __contains__(self, *args):
        """__contains__(self, key_type key) -> bool"""
        return _pyBasePython.mapULUL___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapULUL_key_iterator(self)

    def value_iterator(self):
        """value_iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapULUL_value_iterator(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args):
        """__setitem__(self, key_type key, mapped_type x)"""
        return _pyBasePython.mapULUL___setitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(unsigned long)> arg0) -> mapULUL
        __init__(self) -> mapULUL
        __init__(self, mapULUL arg0) -> mapULUL
        """
        _pyBasePython.mapULUL_swiginit(self,_pyBasePython.new_mapULUL(*args))
    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.mapULUL_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.mapULUL_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.mapULUL_clear(self)

    def swap(self, *args):
        """swap(self, mapULUL v)"""
        return _pyBasePython.mapULUL_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.mapULUL_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.mapULUL_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.mapULUL_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.mapULUL_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.mapULUL_rend(self)

    def count(self, *args):
        """count(self, key_type x) -> size_type"""
        return _pyBasePython.mapULUL_count(self, *args)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator position)
        erase(self, iterator first, iterator last)
        """
        return _pyBasePython.mapULUL_erase(self, *args)

    def find(self, *args):
        """find(self, key_type x) -> iterator"""
        return _pyBasePython.mapULUL_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, key_type x) -> iterator"""
        return _pyBasePython.mapULUL_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, key_type x) -> iterator"""
        return _pyBasePython.mapULUL_upper_bound(self, *args)

    __swig_destroy__ = _pyBasePython.delete_mapULUL
mapULUL.iterator = new_instancemethod(_pyBasePython.mapULUL_iterator,None,mapULUL)
mapULUL.__nonzero__ = new_instancemethod(_pyBasePython.mapULUL___nonzero__,None,mapULUL)
mapULUL.__bool__ = new_instancemethod(_pyBasePython.mapULUL___bool__,None,mapULUL)
mapULUL.__len__ = new_instancemethod(_pyBasePython.mapULUL___len__,None,mapULUL)
mapULUL.__getitem__ = new_instancemethod(_pyBasePython.mapULUL___getitem__,None,mapULUL)
mapULUL.__delitem__ = new_instancemethod(_pyBasePython.mapULUL___delitem__,None,mapULUL)
mapULUL.has_key = new_instancemethod(_pyBasePython.mapULUL_has_key,None,mapULUL)
mapULUL.keys = new_instancemethod(_pyBasePython.mapULUL_keys,None,mapULUL)
mapULUL.values = new_instancemethod(_pyBasePython.mapULUL_values,None,mapULUL)
mapULUL.items = new_instancemethod(_pyBasePython.mapULUL_items,None,mapULUL)
mapULUL.__contains__ = new_instancemethod(_pyBasePython.mapULUL___contains__,None,mapULUL)
mapULUL.key_iterator = new_instancemethod(_pyBasePython.mapULUL_key_iterator,None,mapULUL)
mapULUL.value_iterator = new_instancemethod(_pyBasePython.mapULUL_value_iterator,None,mapULUL)
mapULUL.__setitem__ = new_instancemethod(_pyBasePython.mapULUL___setitem__,None,mapULUL)
mapULUL.empty = new_instancemethod(_pyBasePython.mapULUL_empty,None,mapULUL)
mapULUL.size = new_instancemethod(_pyBasePython.mapULUL_size,None,mapULUL)
mapULUL.clear = new_instancemethod(_pyBasePython.mapULUL_clear,None,mapULUL)
mapULUL.swap = new_instancemethod(_pyBasePython.mapULUL_swap,None,mapULUL)
mapULUL.get_allocator = new_instancemethod(_pyBasePython.mapULUL_get_allocator,None,mapULUL)
mapULUL.begin = new_instancemethod(_pyBasePython.mapULUL_begin,None,mapULUL)
mapULUL.end = new_instancemethod(_pyBasePython.mapULUL_end,None,mapULUL)
mapULUL.rbegin = new_instancemethod(_pyBasePython.mapULUL_rbegin,None,mapULUL)
mapULUL.rend = new_instancemethod(_pyBasePython.mapULUL_rend,None,mapULUL)
mapULUL.count = new_instancemethod(_pyBasePython.mapULUL_count,None,mapULUL)
mapULUL.erase = new_instancemethod(_pyBasePython.mapULUL_erase,None,mapULUL)
mapULUL.find = new_instancemethod(_pyBasePython.mapULUL_find,None,mapULUL)
mapULUL.lower_bound = new_instancemethod(_pyBasePython.mapULUL_lower_bound,None,mapULUL)
mapULUL.upper_bound = new_instancemethod(_pyBasePython.mapULUL_upper_bound,None,mapULUL)
mapULUL_swigregister = _pyBasePython.mapULUL_swigregister
mapULUL_swigregister(mapULUL)

class mapSCSC(object):
    """Proxy of C++ std::map<(signed char,signed char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapSCSC_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.mapSCSC___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.mapSCSC___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.mapSCSC___len__(self)

    def __getitem__(self, *args):
        """__getitem__(self, key_type key) -> mapped_type"""
        return _pyBasePython.mapSCSC___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(self, key_type key)"""
        return _pyBasePython.mapSCSC___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(self, key_type key) -> bool"""
        return _pyBasePython.mapSCSC_has_key(self, *args)

    def keys(self):
        """keys(self) -> PyObject"""
        return _pyBasePython.mapSCSC_keys(self)

    def values(self):
        """values(self) -> PyObject"""
        return _pyBasePython.mapSCSC_values(self)

    def items(self):
        """items(self) -> PyObject"""
        return _pyBasePython.mapSCSC_items(self)

    def __contains__(self, *args):
        """__contains__(self, key_type key) -> bool"""
        return _pyBasePython.mapSCSC___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapSCSC_key_iterator(self)

    def value_iterator(self):
        """value_iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapSCSC_value_iterator(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args):
        """__setitem__(self, key_type key, mapped_type x)"""
        return _pyBasePython.mapSCSC___setitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(signed char)> arg0) -> mapSCSC
        __init__(self) -> mapSCSC
        __init__(self, mapSCSC arg0) -> mapSCSC
        """
        _pyBasePython.mapSCSC_swiginit(self,_pyBasePython.new_mapSCSC(*args))
    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.mapSCSC_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.mapSCSC_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.mapSCSC_clear(self)

    def swap(self, *args):
        """swap(self, mapSCSC v)"""
        return _pyBasePython.mapSCSC_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.mapSCSC_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.mapSCSC_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.mapSCSC_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.mapSCSC_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.mapSCSC_rend(self)

    def count(self, *args):
        """count(self, key_type x) -> size_type"""
        return _pyBasePython.mapSCSC_count(self, *args)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator position)
        erase(self, iterator first, iterator last)
        """
        return _pyBasePython.mapSCSC_erase(self, *args)

    def find(self, *args):
        """find(self, key_type x) -> iterator"""
        return _pyBasePython.mapSCSC_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, key_type x) -> iterator"""
        return _pyBasePython.mapSCSC_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, key_type x) -> iterator"""
        return _pyBasePython.mapSCSC_upper_bound(self, *args)

    __swig_destroy__ = _pyBasePython.delete_mapSCSC
mapSCSC.iterator = new_instancemethod(_pyBasePython.mapSCSC_iterator,None,mapSCSC)
mapSCSC.__nonzero__ = new_instancemethod(_pyBasePython.mapSCSC___nonzero__,None,mapSCSC)
mapSCSC.__bool__ = new_instancemethod(_pyBasePython.mapSCSC___bool__,None,mapSCSC)
mapSCSC.__len__ = new_instancemethod(_pyBasePython.mapSCSC___len__,None,mapSCSC)
mapSCSC.__getitem__ = new_instancemethod(_pyBasePython.mapSCSC___getitem__,None,mapSCSC)
mapSCSC.__delitem__ = new_instancemethod(_pyBasePython.mapSCSC___delitem__,None,mapSCSC)
mapSCSC.has_key = new_instancemethod(_pyBasePython.mapSCSC_has_key,None,mapSCSC)
mapSCSC.keys = new_instancemethod(_pyBasePython.mapSCSC_keys,None,mapSCSC)
mapSCSC.values = new_instancemethod(_pyBasePython.mapSCSC_values,None,mapSCSC)
mapSCSC.items = new_instancemethod(_pyBasePython.mapSCSC_items,None,mapSCSC)
mapSCSC.__contains__ = new_instancemethod(_pyBasePython.mapSCSC___contains__,None,mapSCSC)
mapSCSC.key_iterator = new_instancemethod(_pyBasePython.mapSCSC_key_iterator,None,mapSCSC)
mapSCSC.value_iterator = new_instancemethod(_pyBasePython.mapSCSC_value_iterator,None,mapSCSC)
mapSCSC.__setitem__ = new_instancemethod(_pyBasePython.mapSCSC___setitem__,None,mapSCSC)
mapSCSC.empty = new_instancemethod(_pyBasePython.mapSCSC_empty,None,mapSCSC)
mapSCSC.size = new_instancemethod(_pyBasePython.mapSCSC_size,None,mapSCSC)
mapSCSC.clear = new_instancemethod(_pyBasePython.mapSCSC_clear,None,mapSCSC)
mapSCSC.swap = new_instancemethod(_pyBasePython.mapSCSC_swap,None,mapSCSC)
mapSCSC.get_allocator = new_instancemethod(_pyBasePython.mapSCSC_get_allocator,None,mapSCSC)
mapSCSC.begin = new_instancemethod(_pyBasePython.mapSCSC_begin,None,mapSCSC)
mapSCSC.end = new_instancemethod(_pyBasePython.mapSCSC_end,None,mapSCSC)
mapSCSC.rbegin = new_instancemethod(_pyBasePython.mapSCSC_rbegin,None,mapSCSC)
mapSCSC.rend = new_instancemethod(_pyBasePython.mapSCSC_rend,None,mapSCSC)
mapSCSC.count = new_instancemethod(_pyBasePython.mapSCSC_count,None,mapSCSC)
mapSCSC.erase = new_instancemethod(_pyBasePython.mapSCSC_erase,None,mapSCSC)
mapSCSC.find = new_instancemethod(_pyBasePython.mapSCSC_find,None,mapSCSC)
mapSCSC.lower_bound = new_instancemethod(_pyBasePython.mapSCSC_lower_bound,None,mapSCSC)
mapSCSC.upper_bound = new_instancemethod(_pyBasePython.mapSCSC_upper_bound,None,mapSCSC)
mapSCSC_swigregister = _pyBasePython.mapSCSC_swigregister
mapSCSC_swigregister(mapSCSC)

class mapSSSS(object):
    """Proxy of C++ std::map<(short,short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapSSSS_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.mapSSSS___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.mapSSSS___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.mapSSSS___len__(self)

    def __getitem__(self, *args):
        """__getitem__(self, key_type key) -> mapped_type"""
        return _pyBasePython.mapSSSS___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(self, key_type key)"""
        return _pyBasePython.mapSSSS___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(self, key_type key) -> bool"""
        return _pyBasePython.mapSSSS_has_key(self, *args)

    def keys(self):
        """keys(self) -> PyObject"""
        return _pyBasePython.mapSSSS_keys(self)

    def values(self):
        """values(self) -> PyObject"""
        return _pyBasePython.mapSSSS_values(self)

    def items(self):
        """items(self) -> PyObject"""
        return _pyBasePython.mapSSSS_items(self)

    def __contains__(self, *args):
        """__contains__(self, key_type key) -> bool"""
        return _pyBasePython.mapSSSS___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapSSSS_key_iterator(self)

    def value_iterator(self):
        """value_iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapSSSS_value_iterator(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args):
        """__setitem__(self, key_type key, mapped_type x)"""
        return _pyBasePython.mapSSSS___setitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(short)> arg0) -> mapSSSS
        __init__(self) -> mapSSSS
        __init__(self, mapSSSS arg0) -> mapSSSS
        """
        _pyBasePython.mapSSSS_swiginit(self,_pyBasePython.new_mapSSSS(*args))
    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.mapSSSS_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.mapSSSS_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.mapSSSS_clear(self)

    def swap(self, *args):
        """swap(self, mapSSSS v)"""
        return _pyBasePython.mapSSSS_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.mapSSSS_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.mapSSSS_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.mapSSSS_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.mapSSSS_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.mapSSSS_rend(self)

    def count(self, *args):
        """count(self, key_type x) -> size_type"""
        return _pyBasePython.mapSSSS_count(self, *args)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator position)
        erase(self, iterator first, iterator last)
        """
        return _pyBasePython.mapSSSS_erase(self, *args)

    def find(self, *args):
        """find(self, key_type x) -> iterator"""
        return _pyBasePython.mapSSSS_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, key_type x) -> iterator"""
        return _pyBasePython.mapSSSS_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, key_type x) -> iterator"""
        return _pyBasePython.mapSSSS_upper_bound(self, *args)

    __swig_destroy__ = _pyBasePython.delete_mapSSSS
mapSSSS.iterator = new_instancemethod(_pyBasePython.mapSSSS_iterator,None,mapSSSS)
mapSSSS.__nonzero__ = new_instancemethod(_pyBasePython.mapSSSS___nonzero__,None,mapSSSS)
mapSSSS.__bool__ = new_instancemethod(_pyBasePython.mapSSSS___bool__,None,mapSSSS)
mapSSSS.__len__ = new_instancemethod(_pyBasePython.mapSSSS___len__,None,mapSSSS)
mapSSSS.__getitem__ = new_instancemethod(_pyBasePython.mapSSSS___getitem__,None,mapSSSS)
mapSSSS.__delitem__ = new_instancemethod(_pyBasePython.mapSSSS___delitem__,None,mapSSSS)
mapSSSS.has_key = new_instancemethod(_pyBasePython.mapSSSS_has_key,None,mapSSSS)
mapSSSS.keys = new_instancemethod(_pyBasePython.mapSSSS_keys,None,mapSSSS)
mapSSSS.values = new_instancemethod(_pyBasePython.mapSSSS_values,None,mapSSSS)
mapSSSS.items = new_instancemethod(_pyBasePython.mapSSSS_items,None,mapSSSS)
mapSSSS.__contains__ = new_instancemethod(_pyBasePython.mapSSSS___contains__,None,mapSSSS)
mapSSSS.key_iterator = new_instancemethod(_pyBasePython.mapSSSS_key_iterator,None,mapSSSS)
mapSSSS.value_iterator = new_instancemethod(_pyBasePython.mapSSSS_value_iterator,None,mapSSSS)
mapSSSS.__setitem__ = new_instancemethod(_pyBasePython.mapSSSS___setitem__,None,mapSSSS)
mapSSSS.empty = new_instancemethod(_pyBasePython.mapSSSS_empty,None,mapSSSS)
mapSSSS.size = new_instancemethod(_pyBasePython.mapSSSS_size,None,mapSSSS)
mapSSSS.clear = new_instancemethod(_pyBasePython.mapSSSS_clear,None,mapSSSS)
mapSSSS.swap = new_instancemethod(_pyBasePython.mapSSSS_swap,None,mapSSSS)
mapSSSS.get_allocator = new_instancemethod(_pyBasePython.mapSSSS_get_allocator,None,mapSSSS)
mapSSSS.begin = new_instancemethod(_pyBasePython.mapSSSS_begin,None,mapSSSS)
mapSSSS.end = new_instancemethod(_pyBasePython.mapSSSS_end,None,mapSSSS)
mapSSSS.rbegin = new_instancemethod(_pyBasePython.mapSSSS_rbegin,None,mapSSSS)
mapSSSS.rend = new_instancemethod(_pyBasePython.mapSSSS_rend,None,mapSSSS)
mapSSSS.count = new_instancemethod(_pyBasePython.mapSSSS_count,None,mapSSSS)
mapSSSS.erase = new_instancemethod(_pyBasePython.mapSSSS_erase,None,mapSSSS)
mapSSSS.find = new_instancemethod(_pyBasePython.mapSSSS_find,None,mapSSSS)
mapSSSS.lower_bound = new_instancemethod(_pyBasePython.mapSSSS_lower_bound,None,mapSSSS)
mapSSSS.upper_bound = new_instancemethod(_pyBasePython.mapSSSS_upper_bound,None,mapSSSS)
mapSSSS_swigregister = _pyBasePython.mapSSSS_swigregister
mapSSSS_swigregister(mapSSSS)

class mapSLSL(object):
    """Proxy of C++ std::map<(long,long)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapSLSL_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.mapSLSL___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.mapSLSL___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.mapSLSL___len__(self)

    def __getitem__(self, *args):
        """__getitem__(self, key_type key) -> mapped_type"""
        return _pyBasePython.mapSLSL___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(self, key_type key)"""
        return _pyBasePython.mapSLSL___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(self, key_type key) -> bool"""
        return _pyBasePython.mapSLSL_has_key(self, *args)

    def keys(self):
        """keys(self) -> PyObject"""
        return _pyBasePython.mapSLSL_keys(self)

    def values(self):
        """values(self) -> PyObject"""
        return _pyBasePython.mapSLSL_values(self)

    def items(self):
        """items(self) -> PyObject"""
        return _pyBasePython.mapSLSL_items(self)

    def __contains__(self, *args):
        """__contains__(self, key_type key) -> bool"""
        return _pyBasePython.mapSLSL___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapSLSL_key_iterator(self)

    def value_iterator(self):
        """value_iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapSLSL_value_iterator(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args):
        """__setitem__(self, key_type key, mapped_type x)"""
        return _pyBasePython.mapSLSL___setitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(long)> arg0) -> mapSLSL
        __init__(self) -> mapSLSL
        __init__(self, mapSLSL arg0) -> mapSLSL
        """
        _pyBasePython.mapSLSL_swiginit(self,_pyBasePython.new_mapSLSL(*args))
    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.mapSLSL_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.mapSLSL_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.mapSLSL_clear(self)

    def swap(self, *args):
        """swap(self, mapSLSL v)"""
        return _pyBasePython.mapSLSL_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.mapSLSL_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.mapSLSL_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.mapSLSL_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.mapSLSL_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.mapSLSL_rend(self)

    def count(self, *args):
        """count(self, key_type x) -> size_type"""
        return _pyBasePython.mapSLSL_count(self, *args)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator position)
        erase(self, iterator first, iterator last)
        """
        return _pyBasePython.mapSLSL_erase(self, *args)

    def find(self, *args):
        """find(self, key_type x) -> iterator"""
        return _pyBasePython.mapSLSL_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, key_type x) -> iterator"""
        return _pyBasePython.mapSLSL_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, key_type x) -> iterator"""
        return _pyBasePython.mapSLSL_upper_bound(self, *args)

    __swig_destroy__ = _pyBasePython.delete_mapSLSL
mapSLSL.iterator = new_instancemethod(_pyBasePython.mapSLSL_iterator,None,mapSLSL)
mapSLSL.__nonzero__ = new_instancemethod(_pyBasePython.mapSLSL___nonzero__,None,mapSLSL)
mapSLSL.__bool__ = new_instancemethod(_pyBasePython.mapSLSL___bool__,None,mapSLSL)
mapSLSL.__len__ = new_instancemethod(_pyBasePython.mapSLSL___len__,None,mapSLSL)
mapSLSL.__getitem__ = new_instancemethod(_pyBasePython.mapSLSL___getitem__,None,mapSLSL)
mapSLSL.__delitem__ = new_instancemethod(_pyBasePython.mapSLSL___delitem__,None,mapSLSL)
mapSLSL.has_key = new_instancemethod(_pyBasePython.mapSLSL_has_key,None,mapSLSL)
mapSLSL.keys = new_instancemethod(_pyBasePython.mapSLSL_keys,None,mapSLSL)
mapSLSL.values = new_instancemethod(_pyBasePython.mapSLSL_values,None,mapSLSL)
mapSLSL.items = new_instancemethod(_pyBasePython.mapSLSL_items,None,mapSLSL)
mapSLSL.__contains__ = new_instancemethod(_pyBasePython.mapSLSL___contains__,None,mapSLSL)
mapSLSL.key_iterator = new_instancemethod(_pyBasePython.mapSLSL_key_iterator,None,mapSLSL)
mapSLSL.value_iterator = new_instancemethod(_pyBasePython.mapSLSL_value_iterator,None,mapSLSL)
mapSLSL.__setitem__ = new_instancemethod(_pyBasePython.mapSLSL___setitem__,None,mapSLSL)
mapSLSL.empty = new_instancemethod(_pyBasePython.mapSLSL_empty,None,mapSLSL)
mapSLSL.size = new_instancemethod(_pyBasePython.mapSLSL_size,None,mapSLSL)
mapSLSL.clear = new_instancemethod(_pyBasePython.mapSLSL_clear,None,mapSLSL)
mapSLSL.swap = new_instancemethod(_pyBasePython.mapSLSL_swap,None,mapSLSL)
mapSLSL.get_allocator = new_instancemethod(_pyBasePython.mapSLSL_get_allocator,None,mapSLSL)
mapSLSL.begin = new_instancemethod(_pyBasePython.mapSLSL_begin,None,mapSLSL)
mapSLSL.end = new_instancemethod(_pyBasePython.mapSLSL_end,None,mapSLSL)
mapSLSL.rbegin = new_instancemethod(_pyBasePython.mapSLSL_rbegin,None,mapSLSL)
mapSLSL.rend = new_instancemethod(_pyBasePython.mapSLSL_rend,None,mapSLSL)
mapSLSL.count = new_instancemethod(_pyBasePython.mapSLSL_count,None,mapSLSL)
mapSLSL.erase = new_instancemethod(_pyBasePython.mapSLSL_erase,None,mapSLSL)
mapSLSL.find = new_instancemethod(_pyBasePython.mapSLSL_find,None,mapSLSL)
mapSLSL.lower_bound = new_instancemethod(_pyBasePython.mapSLSL_lower_bound,None,mapSLSL)
mapSLSL.upper_bound = new_instancemethod(_pyBasePython.mapSLSL_upper_bound,None,mapSLSL)
mapSLSL_swigregister = _pyBasePython.mapSLSL_swigregister
mapSLSL_swigregister(mapSLSL)

class mapFF(object):
    """Proxy of C++ std::map<(float,float)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapFF_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.mapFF___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.mapFF___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.mapFF___len__(self)

    def __getitem__(self, *args):
        """__getitem__(self, key_type key) -> mapped_type"""
        return _pyBasePython.mapFF___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(self, key_type key)"""
        return _pyBasePython.mapFF___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(self, key_type key) -> bool"""
        return _pyBasePython.mapFF_has_key(self, *args)

    def keys(self):
        """keys(self) -> PyObject"""
        return _pyBasePython.mapFF_keys(self)

    def values(self):
        """values(self) -> PyObject"""
        return _pyBasePython.mapFF_values(self)

    def items(self):
        """items(self) -> PyObject"""
        return _pyBasePython.mapFF_items(self)

    def __contains__(self, *args):
        """__contains__(self, key_type key) -> bool"""
        return _pyBasePython.mapFF___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapFF_key_iterator(self)

    def value_iterator(self):
        """value_iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapFF_value_iterator(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args):
        """__setitem__(self, key_type key, mapped_type x)"""
        return _pyBasePython.mapFF___setitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(float)> arg0) -> mapFF
        __init__(self) -> mapFF
        __init__(self, mapFF arg0) -> mapFF
        """
        _pyBasePython.mapFF_swiginit(self,_pyBasePython.new_mapFF(*args))
    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.mapFF_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.mapFF_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.mapFF_clear(self)

    def swap(self, *args):
        """swap(self, mapFF v)"""
        return _pyBasePython.mapFF_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.mapFF_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.mapFF_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.mapFF_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.mapFF_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.mapFF_rend(self)

    def count(self, *args):
        """count(self, key_type x) -> size_type"""
        return _pyBasePython.mapFF_count(self, *args)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator position)
        erase(self, iterator first, iterator last)
        """
        return _pyBasePython.mapFF_erase(self, *args)

    def find(self, *args):
        """find(self, key_type x) -> iterator"""
        return _pyBasePython.mapFF_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, key_type x) -> iterator"""
        return _pyBasePython.mapFF_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, key_type x) -> iterator"""
        return _pyBasePython.mapFF_upper_bound(self, *args)

    __swig_destroy__ = _pyBasePython.delete_mapFF
mapFF.iterator = new_instancemethod(_pyBasePython.mapFF_iterator,None,mapFF)
mapFF.__nonzero__ = new_instancemethod(_pyBasePython.mapFF___nonzero__,None,mapFF)
mapFF.__bool__ = new_instancemethod(_pyBasePython.mapFF___bool__,None,mapFF)
mapFF.__len__ = new_instancemethod(_pyBasePython.mapFF___len__,None,mapFF)
mapFF.__getitem__ = new_instancemethod(_pyBasePython.mapFF___getitem__,None,mapFF)
mapFF.__delitem__ = new_instancemethod(_pyBasePython.mapFF___delitem__,None,mapFF)
mapFF.has_key = new_instancemethod(_pyBasePython.mapFF_has_key,None,mapFF)
mapFF.keys = new_instancemethod(_pyBasePython.mapFF_keys,None,mapFF)
mapFF.values = new_instancemethod(_pyBasePython.mapFF_values,None,mapFF)
mapFF.items = new_instancemethod(_pyBasePython.mapFF_items,None,mapFF)
mapFF.__contains__ = new_instancemethod(_pyBasePython.mapFF___contains__,None,mapFF)
mapFF.key_iterator = new_instancemethod(_pyBasePython.mapFF_key_iterator,None,mapFF)
mapFF.value_iterator = new_instancemethod(_pyBasePython.mapFF_value_iterator,None,mapFF)
mapFF.__setitem__ = new_instancemethod(_pyBasePython.mapFF___setitem__,None,mapFF)
mapFF.empty = new_instancemethod(_pyBasePython.mapFF_empty,None,mapFF)
mapFF.size = new_instancemethod(_pyBasePython.mapFF_size,None,mapFF)
mapFF.clear = new_instancemethod(_pyBasePython.mapFF_clear,None,mapFF)
mapFF.swap = new_instancemethod(_pyBasePython.mapFF_swap,None,mapFF)
mapFF.get_allocator = new_instancemethod(_pyBasePython.mapFF_get_allocator,None,mapFF)
mapFF.begin = new_instancemethod(_pyBasePython.mapFF_begin,None,mapFF)
mapFF.end = new_instancemethod(_pyBasePython.mapFF_end,None,mapFF)
mapFF.rbegin = new_instancemethod(_pyBasePython.mapFF_rbegin,None,mapFF)
mapFF.rend = new_instancemethod(_pyBasePython.mapFF_rend,None,mapFF)
mapFF.count = new_instancemethod(_pyBasePython.mapFF_count,None,mapFF)
mapFF.erase = new_instancemethod(_pyBasePython.mapFF_erase,None,mapFF)
mapFF.find = new_instancemethod(_pyBasePython.mapFF_find,None,mapFF)
mapFF.lower_bound = new_instancemethod(_pyBasePython.mapFF_lower_bound,None,mapFF)
mapFF.upper_bound = new_instancemethod(_pyBasePython.mapFF_upper_bound,None,mapFF)
mapFF_swigregister = _pyBasePython.mapFF_swigregister
mapFF_swigregister(mapFF)

class mapDD(object):
    """Proxy of C++ std::map<(double,double)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapDD_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.mapDD___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.mapDD___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.mapDD___len__(self)

    def __getitem__(self, *args):
        """__getitem__(self, key_type key) -> mapped_type"""
        return _pyBasePython.mapDD___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(self, key_type key)"""
        return _pyBasePython.mapDD___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(self, key_type key) -> bool"""
        return _pyBasePython.mapDD_has_key(self, *args)

    def keys(self):
        """keys(self) -> PyObject"""
        return _pyBasePython.mapDD_keys(self)

    def values(self):
        """values(self) -> PyObject"""
        return _pyBasePython.mapDD_values(self)

    def items(self):
        """items(self) -> PyObject"""
        return _pyBasePython.mapDD_items(self)

    def __contains__(self, *args):
        """__contains__(self, key_type key) -> bool"""
        return _pyBasePython.mapDD___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapDD_key_iterator(self)

    def value_iterator(self):
        """value_iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapDD_value_iterator(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args):
        """__setitem__(self, key_type key, mapped_type x)"""
        return _pyBasePython.mapDD___setitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(double)> arg0) -> mapDD
        __init__(self) -> mapDD
        __init__(self, mapDD arg0) -> mapDD
        """
        _pyBasePython.mapDD_swiginit(self,_pyBasePython.new_mapDD(*args))
    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.mapDD_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.mapDD_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.mapDD_clear(self)

    def swap(self, *args):
        """swap(self, mapDD v)"""
        return _pyBasePython.mapDD_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.mapDD_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.mapDD_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.mapDD_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.mapDD_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.mapDD_rend(self)

    def count(self, *args):
        """count(self, key_type x) -> size_type"""
        return _pyBasePython.mapDD_count(self, *args)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator position)
        erase(self, iterator first, iterator last)
        """
        return _pyBasePython.mapDD_erase(self, *args)

    def find(self, *args):
        """find(self, key_type x) -> iterator"""
        return _pyBasePython.mapDD_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, key_type x) -> iterator"""
        return _pyBasePython.mapDD_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, key_type x) -> iterator"""
        return _pyBasePython.mapDD_upper_bound(self, *args)

    __swig_destroy__ = _pyBasePython.delete_mapDD
mapDD.iterator = new_instancemethod(_pyBasePython.mapDD_iterator,None,mapDD)
mapDD.__nonzero__ = new_instancemethod(_pyBasePython.mapDD___nonzero__,None,mapDD)
mapDD.__bool__ = new_instancemethod(_pyBasePython.mapDD___bool__,None,mapDD)
mapDD.__len__ = new_instancemethod(_pyBasePython.mapDD___len__,None,mapDD)
mapDD.__getitem__ = new_instancemethod(_pyBasePython.mapDD___getitem__,None,mapDD)
mapDD.__delitem__ = new_instancemethod(_pyBasePython.mapDD___delitem__,None,mapDD)
mapDD.has_key = new_instancemethod(_pyBasePython.mapDD_has_key,None,mapDD)
mapDD.keys = new_instancemethod(_pyBasePython.mapDD_keys,None,mapDD)
mapDD.values = new_instancemethod(_pyBasePython.mapDD_values,None,mapDD)
mapDD.items = new_instancemethod(_pyBasePython.mapDD_items,None,mapDD)
mapDD.__contains__ = new_instancemethod(_pyBasePython.mapDD___contains__,None,mapDD)
mapDD.key_iterator = new_instancemethod(_pyBasePython.mapDD_key_iterator,None,mapDD)
mapDD.value_iterator = new_instancemethod(_pyBasePython.mapDD_value_iterator,None,mapDD)
mapDD.__setitem__ = new_instancemethod(_pyBasePython.mapDD___setitem__,None,mapDD)
mapDD.empty = new_instancemethod(_pyBasePython.mapDD_empty,None,mapDD)
mapDD.size = new_instancemethod(_pyBasePython.mapDD_size,None,mapDD)
mapDD.clear = new_instancemethod(_pyBasePython.mapDD_clear,None,mapDD)
mapDD.swap = new_instancemethod(_pyBasePython.mapDD_swap,None,mapDD)
mapDD.get_allocator = new_instancemethod(_pyBasePython.mapDD_get_allocator,None,mapDD)
mapDD.begin = new_instancemethod(_pyBasePython.mapDD_begin,None,mapDD)
mapDD.end = new_instancemethod(_pyBasePython.mapDD_end,None,mapDD)
mapDD.rbegin = new_instancemethod(_pyBasePython.mapDD_rbegin,None,mapDD)
mapDD.rend = new_instancemethod(_pyBasePython.mapDD_rend,None,mapDD)
mapDD.count = new_instancemethod(_pyBasePython.mapDD_count,None,mapDD)
mapDD.erase = new_instancemethod(_pyBasePython.mapDD_erase,None,mapDD)
mapDD.find = new_instancemethod(_pyBasePython.mapDD_find,None,mapDD)
mapDD.lower_bound = new_instancemethod(_pyBasePython.mapDD_lower_bound,None,mapDD)
mapDD.upper_bound = new_instancemethod(_pyBasePython.mapDD_upper_bound,None,mapDD)
mapDD_swigregister = _pyBasePython.mapDD_swigregister
mapDD_swigregister(mapDD)

class vectorUC(object):
    """Proxy of C++ std::vector<(unsigned char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.vectorUC_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.vectorUC___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.vectorUC___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.vectorUC___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.vectorUC_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorUC"""
        return _pyBasePython.vectorUC___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorUC v)"""
        return _pyBasePython.vectorUC___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.vectorUC___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.vectorUC___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorUC
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.vectorUC___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorUC v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.vectorUC___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.vectorUC_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.vectorUC_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.vectorUC_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.vectorUC_clear(self)

    def swap(self, *args):
        """swap(self, vectorUC v)"""
        return _pyBasePython.vectorUC_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.vectorUC_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.vectorUC_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.vectorUC_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorUC_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorUC_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.vectorUC_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.vectorUC_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorUC
        __init__(self, vectorUC arg0) -> vectorUC
        __init__(self, size_type size) -> vectorUC
        __init__(self, size_type size, value_type value) -> vectorUC
        """
        _pyBasePython.vectorUC_swiginit(self,_pyBasePython.new_vectorUC(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.vectorUC_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.vectorUC_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.vectorUC_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.vectorUC_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.vectorUC_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.vectorUC_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _pyBasePython.vectorUC_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _pyBasePython.vectorUC_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorUC
vectorUC.iterator = new_instancemethod(_pyBasePython.vectorUC_iterator,None,vectorUC)
vectorUC.__nonzero__ = new_instancemethod(_pyBasePython.vectorUC___nonzero__,None,vectorUC)
vectorUC.__bool__ = new_instancemethod(_pyBasePython.vectorUC___bool__,None,vectorUC)
vectorUC.__len__ = new_instancemethod(_pyBasePython.vectorUC___len__,None,vectorUC)
vectorUC.pop = new_instancemethod(_pyBasePython.vectorUC_pop,None,vectorUC)
vectorUC.__getslice__ = new_instancemethod(_pyBasePython.vectorUC___getslice__,None,vectorUC)
vectorUC.__setslice__ = new_instancemethod(_pyBasePython.vectorUC___setslice__,None,vectorUC)
vectorUC.__delslice__ = new_instancemethod(_pyBasePython.vectorUC___delslice__,None,vectorUC)
vectorUC.__delitem__ = new_instancemethod(_pyBasePython.vectorUC___delitem__,None,vectorUC)
vectorUC.__getitem__ = new_instancemethod(_pyBasePython.vectorUC___getitem__,None,vectorUC)
vectorUC.__setitem__ = new_instancemethod(_pyBasePython.vectorUC___setitem__,None,vectorUC)
vectorUC.append = new_instancemethod(_pyBasePython.vectorUC_append,None,vectorUC)
vectorUC.empty = new_instancemethod(_pyBasePython.vectorUC_empty,None,vectorUC)
vectorUC.size = new_instancemethod(_pyBasePython.vectorUC_size,None,vectorUC)
vectorUC.clear = new_instancemethod(_pyBasePython.vectorUC_clear,None,vectorUC)
vectorUC.swap = new_instancemethod(_pyBasePython.vectorUC_swap,None,vectorUC)
vectorUC.get_allocator = new_instancemethod(_pyBasePython.vectorUC_get_allocator,None,vectorUC)
vectorUC.begin = new_instancemethod(_pyBasePython.vectorUC_begin,None,vectorUC)
vectorUC.end = new_instancemethod(_pyBasePython.vectorUC_end,None,vectorUC)
vectorUC.rbegin = new_instancemethod(_pyBasePython.vectorUC_rbegin,None,vectorUC)
vectorUC.rend = new_instancemethod(_pyBasePython.vectorUC_rend,None,vectorUC)
vectorUC.pop_back = new_instancemethod(_pyBasePython.vectorUC_pop_back,None,vectorUC)
vectorUC.erase = new_instancemethod(_pyBasePython.vectorUC_erase,None,vectorUC)
vectorUC.push_back = new_instancemethod(_pyBasePython.vectorUC_push_back,None,vectorUC)
vectorUC.front = new_instancemethod(_pyBasePython.vectorUC_front,None,vectorUC)
vectorUC.back = new_instancemethod(_pyBasePython.vectorUC_back,None,vectorUC)
vectorUC.assign = new_instancemethod(_pyBasePython.vectorUC_assign,None,vectorUC)
vectorUC.resize = new_instancemethod(_pyBasePython.vectorUC_resize,None,vectorUC)
vectorUC.insert = new_instancemethod(_pyBasePython.vectorUC_insert,None,vectorUC)
vectorUC.reserve = new_instancemethod(_pyBasePython.vectorUC_reserve,None,vectorUC)
vectorUC.capacity = new_instancemethod(_pyBasePython.vectorUC_capacity,None,vectorUC)
vectorUC_swigregister = _pyBasePython.vectorUC_swigregister
vectorUC_swigregister(vectorUC)

class vectorvectorUC(object):
    """Proxy of C++ std::vector<(std::vector<(unsigned char)>)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.vectorvectorUC_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.vectorvectorUC___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.vectorvectorUC___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.vectorvectorUC___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.vectorvectorUC_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorvectorUC"""
        return _pyBasePython.vectorvectorUC___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorvectorUC v)"""
        return _pyBasePython.vectorvectorUC___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.vectorvectorUC___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.vectorvectorUC___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorvectorUC
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.vectorvectorUC___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorvectorUC v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.vectorvectorUC___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.vectorvectorUC_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.vectorvectorUC_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.vectorvectorUC_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.vectorvectorUC_clear(self)

    def swap(self, *args):
        """swap(self, vectorvectorUC v)"""
        return _pyBasePython.vectorvectorUC_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.vectorvectorUC_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.vectorvectorUC_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.vectorvectorUC_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorvectorUC_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorvectorUC_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.vectorvectorUC_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.vectorvectorUC_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorvectorUC
        __init__(self, vectorvectorUC arg0) -> vectorvectorUC
        __init__(self, size_type size) -> vectorvectorUC
        __init__(self, size_type size, value_type value) -> vectorvectorUC
        """
        _pyBasePython.vectorvectorUC_swiginit(self,_pyBasePython.new_vectorvectorUC(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.vectorvectorUC_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.vectorvectorUC_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.vectorvectorUC_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.vectorvectorUC_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.vectorvectorUC_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.vectorvectorUC_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _pyBasePython.vectorvectorUC_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _pyBasePython.vectorvectorUC_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorvectorUC
vectorvectorUC.iterator = new_instancemethod(_pyBasePython.vectorvectorUC_iterator,None,vectorvectorUC)
vectorvectorUC.__nonzero__ = new_instancemethod(_pyBasePython.vectorvectorUC___nonzero__,None,vectorvectorUC)
vectorvectorUC.__bool__ = new_instancemethod(_pyBasePython.vectorvectorUC___bool__,None,vectorvectorUC)
vectorvectorUC.__len__ = new_instancemethod(_pyBasePython.vectorvectorUC___len__,None,vectorvectorUC)
vectorvectorUC.pop = new_instancemethod(_pyBasePython.vectorvectorUC_pop,None,vectorvectorUC)
vectorvectorUC.__getslice__ = new_instancemethod(_pyBasePython.vectorvectorUC___getslice__,None,vectorvectorUC)
vectorvectorUC.__setslice__ = new_instancemethod(_pyBasePython.vectorvectorUC___setslice__,None,vectorvectorUC)
vectorvectorUC.__delslice__ = new_instancemethod(_pyBasePython.vectorvectorUC___delslice__,None,vectorvectorUC)
vectorvectorUC.__delitem__ = new_instancemethod(_pyBasePython.vectorvectorUC___delitem__,None,vectorvectorUC)
vectorvectorUC.__getitem__ = new_instancemethod(_pyBasePython.vectorvectorUC___getitem__,None,vectorvectorUC)
vectorvectorUC.__setitem__ = new_instancemethod(_pyBasePython.vectorvectorUC___setitem__,None,vectorvectorUC)
vectorvectorUC.append = new_instancemethod(_pyBasePython.vectorvectorUC_append,None,vectorvectorUC)
vectorvectorUC.empty = new_instancemethod(_pyBasePython.vectorvectorUC_empty,None,vectorvectorUC)
vectorvectorUC.size = new_instancemethod(_pyBasePython.vectorvectorUC_size,None,vectorvectorUC)
vectorvectorUC.clear = new_instancemethod(_pyBasePython.vectorvectorUC_clear,None,vectorvectorUC)
vectorvectorUC.swap = new_instancemethod(_pyBasePython.vectorvectorUC_swap,None,vectorvectorUC)
vectorvectorUC.get_allocator = new_instancemethod(_pyBasePython.vectorvectorUC_get_allocator,None,vectorvectorUC)
vectorvectorUC.begin = new_instancemethod(_pyBasePython.vectorvectorUC_begin,None,vectorvectorUC)
vectorvectorUC.end = new_instancemethod(_pyBasePython.vectorvectorUC_end,None,vectorvectorUC)
vectorvectorUC.rbegin = new_instancemethod(_pyBasePython.vectorvectorUC_rbegin,None,vectorvectorUC)
vectorvectorUC.rend = new_instancemethod(_pyBasePython.vectorvectorUC_rend,None,vectorvectorUC)
vectorvectorUC.pop_back = new_instancemethod(_pyBasePython.vectorvectorUC_pop_back,None,vectorvectorUC)
vectorvectorUC.erase = new_instancemethod(_pyBasePython.vectorvectorUC_erase,None,vectorvectorUC)
vectorvectorUC.push_back = new_instancemethod(_pyBasePython.vectorvectorUC_push_back,None,vectorvectorUC)
vectorvectorUC.front = new_instancemethod(_pyBasePython.vectorvectorUC_front,None,vectorvectorUC)
vectorvectorUC.back = new_instancemethod(_pyBasePython.vectorvectorUC_back,None,vectorvectorUC)
vectorvectorUC.assign = new_instancemethod(_pyBasePython.vectorvectorUC_assign,None,vectorvectorUC)
vectorvectorUC.resize = new_instancemethod(_pyBasePython.vectorvectorUC_resize,None,vectorvectorUC)
vectorvectorUC.insert = new_instancemethod(_pyBasePython.vectorvectorUC_insert,None,vectorvectorUC)
vectorvectorUC.reserve = new_instancemethod(_pyBasePython.vectorvectorUC_reserve,None,vectorvectorUC)
vectorvectorUC.capacity = new_instancemethod(_pyBasePython.vectorvectorUC_capacity,None,vectorvectorUC)
vectorvectorUC_swigregister = _pyBasePython.vectorvectorUC_swigregister
vectorvectorUC_swigregister(vectorvectorUC)

class vectorUS(object):
    """Proxy of C++ std::vector<(unsigned short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.vectorUS_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.vectorUS___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.vectorUS___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.vectorUS___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.vectorUS_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorUS"""
        return _pyBasePython.vectorUS___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorUS v)"""
        return _pyBasePython.vectorUS___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.vectorUS___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.vectorUS___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorUS
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.vectorUS___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorUS v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.vectorUS___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.vectorUS_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.vectorUS_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.vectorUS_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.vectorUS_clear(self)

    def swap(self, *args):
        """swap(self, vectorUS v)"""
        return _pyBasePython.vectorUS_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.vectorUS_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.vectorUS_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.vectorUS_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorUS_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorUS_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.vectorUS_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.vectorUS_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorUS
        __init__(self, vectorUS arg0) -> vectorUS
        __init__(self, size_type size) -> vectorUS
        __init__(self, size_type size, value_type value) -> vectorUS
        """
        _pyBasePython.vectorUS_swiginit(self,_pyBasePython.new_vectorUS(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.vectorUS_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.vectorUS_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.vectorUS_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.vectorUS_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.vectorUS_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.vectorUS_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _pyBasePython.vectorUS_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _pyBasePython.vectorUS_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorUS
vectorUS.iterator = new_instancemethod(_pyBasePython.vectorUS_iterator,None,vectorUS)
vectorUS.__nonzero__ = new_instancemethod(_pyBasePython.vectorUS___nonzero__,None,vectorUS)
vectorUS.__bool__ = new_instancemethod(_pyBasePython.vectorUS___bool__,None,vectorUS)
vectorUS.__len__ = new_instancemethod(_pyBasePython.vectorUS___len__,None,vectorUS)
vectorUS.pop = new_instancemethod(_pyBasePython.vectorUS_pop,None,vectorUS)
vectorUS.__getslice__ = new_instancemethod(_pyBasePython.vectorUS___getslice__,None,vectorUS)
vectorUS.__setslice__ = new_instancemethod(_pyBasePython.vectorUS___setslice__,None,vectorUS)
vectorUS.__delslice__ = new_instancemethod(_pyBasePython.vectorUS___delslice__,None,vectorUS)
vectorUS.__delitem__ = new_instancemethod(_pyBasePython.vectorUS___delitem__,None,vectorUS)
vectorUS.__getitem__ = new_instancemethod(_pyBasePython.vectorUS___getitem__,None,vectorUS)
vectorUS.__setitem__ = new_instancemethod(_pyBasePython.vectorUS___setitem__,None,vectorUS)
vectorUS.append = new_instancemethod(_pyBasePython.vectorUS_append,None,vectorUS)
vectorUS.empty = new_instancemethod(_pyBasePython.vectorUS_empty,None,vectorUS)
vectorUS.size = new_instancemethod(_pyBasePython.vectorUS_size,None,vectorUS)
vectorUS.clear = new_instancemethod(_pyBasePython.vectorUS_clear,None,vectorUS)
vectorUS.swap = new_instancemethod(_pyBasePython.vectorUS_swap,None,vectorUS)
vectorUS.get_allocator = new_instancemethod(_pyBasePython.vectorUS_get_allocator,None,vectorUS)
vectorUS.begin = new_instancemethod(_pyBasePython.vectorUS_begin,None,vectorUS)
vectorUS.end = new_instancemethod(_pyBasePython.vectorUS_end,None,vectorUS)
vectorUS.rbegin = new_instancemethod(_pyBasePython.vectorUS_rbegin,None,vectorUS)
vectorUS.rend = new_instancemethod(_pyBasePython.vectorUS_rend,None,vectorUS)
vectorUS.pop_back = new_instancemethod(_pyBasePython.vectorUS_pop_back,None,vectorUS)
vectorUS.erase = new_instancemethod(_pyBasePython.vectorUS_erase,None,vectorUS)
vectorUS.push_back = new_instancemethod(_pyBasePython.vectorUS_push_back,None,vectorUS)
vectorUS.front = new_instancemethod(_pyBasePython.vectorUS_front,None,vectorUS)
vectorUS.back = new_instancemethod(_pyBasePython.vectorUS_back,None,vectorUS)
vectorUS.assign = new_instancemethod(_pyBasePython.vectorUS_assign,None,vectorUS)
vectorUS.resize = new_instancemethod(_pyBasePython.vectorUS_resize,None,vectorUS)
vectorUS.insert = new_instancemethod(_pyBasePython.vectorUS_insert,None,vectorUS)
vectorUS.reserve = new_instancemethod(_pyBasePython.vectorUS_reserve,None,vectorUS)
vectorUS.capacity = new_instancemethod(_pyBasePython.vectorUS_capacity,None,vectorUS)
vectorUS_swigregister = _pyBasePython.vectorUS_swigregister
vectorUS_swigregister(vectorUS)

class vectorvectorUS(object):
    """Proxy of C++ std::vector<(std::vector<(unsigned short)>)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.vectorvectorUS_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.vectorvectorUS___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.vectorvectorUS___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.vectorvectorUS___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.vectorvectorUS_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorvectorUS"""
        return _pyBasePython.vectorvectorUS___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorvectorUS v)"""
        return _pyBasePython.vectorvectorUS___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.vectorvectorUS___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.vectorvectorUS___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorvectorUS
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.vectorvectorUS___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorvectorUS v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.vectorvectorUS___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.vectorvectorUS_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.vectorvectorUS_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.vectorvectorUS_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.vectorvectorUS_clear(self)

    def swap(self, *args):
        """swap(self, vectorvectorUS v)"""
        return _pyBasePython.vectorvectorUS_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.vectorvectorUS_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.vectorvectorUS_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.vectorvectorUS_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorvectorUS_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorvectorUS_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.vectorvectorUS_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.vectorvectorUS_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorvectorUS
        __init__(self, vectorvectorUS arg0) -> vectorvectorUS
        __init__(self, size_type size) -> vectorvectorUS
        __init__(self, size_type size, value_type value) -> vectorvectorUS
        """
        _pyBasePython.vectorvectorUS_swiginit(self,_pyBasePython.new_vectorvectorUS(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.vectorvectorUS_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.vectorvectorUS_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.vectorvectorUS_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.vectorvectorUS_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.vectorvectorUS_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.vectorvectorUS_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _pyBasePython.vectorvectorUS_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _pyBasePython.vectorvectorUS_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorvectorUS
vectorvectorUS.iterator = new_instancemethod(_pyBasePython.vectorvectorUS_iterator,None,vectorvectorUS)
vectorvectorUS.__nonzero__ = new_instancemethod(_pyBasePython.vectorvectorUS___nonzero__,None,vectorvectorUS)
vectorvectorUS.__bool__ = new_instancemethod(_pyBasePython.vectorvectorUS___bool__,None,vectorvectorUS)
vectorvectorUS.__len__ = new_instancemethod(_pyBasePython.vectorvectorUS___len__,None,vectorvectorUS)
vectorvectorUS.pop = new_instancemethod(_pyBasePython.vectorvectorUS_pop,None,vectorvectorUS)
vectorvectorUS.__getslice__ = new_instancemethod(_pyBasePython.vectorvectorUS___getslice__,None,vectorvectorUS)
vectorvectorUS.__setslice__ = new_instancemethod(_pyBasePython.vectorvectorUS___setslice__,None,vectorvectorUS)
vectorvectorUS.__delslice__ = new_instancemethod(_pyBasePython.vectorvectorUS___delslice__,None,vectorvectorUS)
vectorvectorUS.__delitem__ = new_instancemethod(_pyBasePython.vectorvectorUS___delitem__,None,vectorvectorUS)
vectorvectorUS.__getitem__ = new_instancemethod(_pyBasePython.vectorvectorUS___getitem__,None,vectorvectorUS)
vectorvectorUS.__setitem__ = new_instancemethod(_pyBasePython.vectorvectorUS___setitem__,None,vectorvectorUS)
vectorvectorUS.append = new_instancemethod(_pyBasePython.vectorvectorUS_append,None,vectorvectorUS)
vectorvectorUS.empty = new_instancemethod(_pyBasePython.vectorvectorUS_empty,None,vectorvectorUS)
vectorvectorUS.size = new_instancemethod(_pyBasePython.vectorvectorUS_size,None,vectorvectorUS)
vectorvectorUS.clear = new_instancemethod(_pyBasePython.vectorvectorUS_clear,None,vectorvectorUS)
vectorvectorUS.swap = new_instancemethod(_pyBasePython.vectorvectorUS_swap,None,vectorvectorUS)
vectorvectorUS.get_allocator = new_instancemethod(_pyBasePython.vectorvectorUS_get_allocator,None,vectorvectorUS)
vectorvectorUS.begin = new_instancemethod(_pyBasePython.vectorvectorUS_begin,None,vectorvectorUS)
vectorvectorUS.end = new_instancemethod(_pyBasePython.vectorvectorUS_end,None,vectorvectorUS)
vectorvectorUS.rbegin = new_instancemethod(_pyBasePython.vectorvectorUS_rbegin,None,vectorvectorUS)
vectorvectorUS.rend = new_instancemethod(_pyBasePython.vectorvectorUS_rend,None,vectorvectorUS)
vectorvectorUS.pop_back = new_instancemethod(_pyBasePython.vectorvectorUS_pop_back,None,vectorvectorUS)
vectorvectorUS.erase = new_instancemethod(_pyBasePython.vectorvectorUS_erase,None,vectorvectorUS)
vectorvectorUS.push_back = new_instancemethod(_pyBasePython.vectorvectorUS_push_back,None,vectorvectorUS)
vectorvectorUS.front = new_instancemethod(_pyBasePython.vectorvectorUS_front,None,vectorvectorUS)
vectorvectorUS.back = new_instancemethod(_pyBasePython.vectorvectorUS_back,None,vectorvectorUS)
vectorvectorUS.assign = new_instancemethod(_pyBasePython.vectorvectorUS_assign,None,vectorvectorUS)
vectorvectorUS.resize = new_instancemethod(_pyBasePython.vectorvectorUS_resize,None,vectorvectorUS)
vectorvectorUS.insert = new_instancemethod(_pyBasePython.vectorvectorUS_insert,None,vectorvectorUS)
vectorvectorUS.reserve = new_instancemethod(_pyBasePython.vectorvectorUS_reserve,None,vectorvectorUS)
vectorvectorUS.capacity = new_instancemethod(_pyBasePython.vectorvectorUS_capacity,None,vectorvectorUS)
vectorvectorUS_swigregister = _pyBasePython.vectorvectorUS_swigregister
vectorvectorUS_swigregister(vectorvectorUS)

class vectorUL(object):
    """Proxy of C++ std::vector<(unsigned long)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.vectorUL_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.vectorUL___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.vectorUL___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.vectorUL___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.vectorUL_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorUL"""
        return _pyBasePython.vectorUL___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorUL v)"""
        return _pyBasePython.vectorUL___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.vectorUL___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.vectorUL___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorUL
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.vectorUL___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorUL v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.vectorUL___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.vectorUL_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.vectorUL_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.vectorUL_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.vectorUL_clear(self)

    def swap(self, *args):
        """swap(self, vectorUL v)"""
        return _pyBasePython.vectorUL_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.vectorUL_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.vectorUL_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.vectorUL_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorUL_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorUL_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.vectorUL_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.vectorUL_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorUL
        __init__(self, vectorUL arg0) -> vectorUL
        __init__(self, size_type size) -> vectorUL
        __init__(self, size_type size, value_type value) -> vectorUL
        """
        _pyBasePython.vectorUL_swiginit(self,_pyBasePython.new_vectorUL(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.vectorUL_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.vectorUL_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.vectorUL_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.vectorUL_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.vectorUL_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.vectorUL_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _pyBasePython.vectorUL_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _pyBasePython.vectorUL_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorUL
vectorUL.iterator = new_instancemethod(_pyBasePython.vectorUL_iterator,None,vectorUL)
vectorUL.__nonzero__ = new_instancemethod(_pyBasePython.vectorUL___nonzero__,None,vectorUL)
vectorUL.__bool__ = new_instancemethod(_pyBasePython.vectorUL___bool__,None,vectorUL)
vectorUL.__len__ = new_instancemethod(_pyBasePython.vectorUL___len__,None,vectorUL)
vectorUL.pop = new_instancemethod(_pyBasePython.vectorUL_pop,None,vectorUL)
vectorUL.__getslice__ = new_instancemethod(_pyBasePython.vectorUL___getslice__,None,vectorUL)
vectorUL.__setslice__ = new_instancemethod(_pyBasePython.vectorUL___setslice__,None,vectorUL)
vectorUL.__delslice__ = new_instancemethod(_pyBasePython.vectorUL___delslice__,None,vectorUL)
vectorUL.__delitem__ = new_instancemethod(_pyBasePython.vectorUL___delitem__,None,vectorUL)
vectorUL.__getitem__ = new_instancemethod(_pyBasePython.vectorUL___getitem__,None,vectorUL)
vectorUL.__setitem__ = new_instancemethod(_pyBasePython.vectorUL___setitem__,None,vectorUL)
vectorUL.append = new_instancemethod(_pyBasePython.vectorUL_append,None,vectorUL)
vectorUL.empty = new_instancemethod(_pyBasePython.vectorUL_empty,None,vectorUL)
vectorUL.size = new_instancemethod(_pyBasePython.vectorUL_size,None,vectorUL)
vectorUL.clear = new_instancemethod(_pyBasePython.vectorUL_clear,None,vectorUL)
vectorUL.swap = new_instancemethod(_pyBasePython.vectorUL_swap,None,vectorUL)
vectorUL.get_allocator = new_instancemethod(_pyBasePython.vectorUL_get_allocator,None,vectorUL)
vectorUL.begin = new_instancemethod(_pyBasePython.vectorUL_begin,None,vectorUL)
vectorUL.end = new_instancemethod(_pyBasePython.vectorUL_end,None,vectorUL)
vectorUL.rbegin = new_instancemethod(_pyBasePython.vectorUL_rbegin,None,vectorUL)
vectorUL.rend = new_instancemethod(_pyBasePython.vectorUL_rend,None,vectorUL)
vectorUL.pop_back = new_instancemethod(_pyBasePython.vectorUL_pop_back,None,vectorUL)
vectorUL.erase = new_instancemethod(_pyBasePython.vectorUL_erase,None,vectorUL)
vectorUL.push_back = new_instancemethod(_pyBasePython.vectorUL_push_back,None,vectorUL)
vectorUL.front = new_instancemethod(_pyBasePython.vectorUL_front,None,vectorUL)
vectorUL.back = new_instancemethod(_pyBasePython.vectorUL_back,None,vectorUL)
vectorUL.assign = new_instancemethod(_pyBasePython.vectorUL_assign,None,vectorUL)
vectorUL.resize = new_instancemethod(_pyBasePython.vectorUL_resize,None,vectorUL)
vectorUL.insert = new_instancemethod(_pyBasePython.vectorUL_insert,None,vectorUL)
vectorUL.reserve = new_instancemethod(_pyBasePython.vectorUL_reserve,None,vectorUL)
vectorUL.capacity = new_instancemethod(_pyBasePython.vectorUL_capacity,None,vectorUL)
vectorUL_swigregister = _pyBasePython.vectorUL_swigregister
vectorUL_swigregister(vectorUL)

class vectorvectorUL(object):
    """Proxy of C++ std::vector<(std::vector<(unsigned long)>)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.vectorvectorUL_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.vectorvectorUL___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.vectorvectorUL___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.vectorvectorUL___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.vectorvectorUL_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorvectorUL"""
        return _pyBasePython.vectorvectorUL___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorvectorUL v)"""
        return _pyBasePython.vectorvectorUL___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.vectorvectorUL___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.vectorvectorUL___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorvectorUL
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.vectorvectorUL___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorvectorUL v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.vectorvectorUL___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.vectorvectorUL_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.vectorvectorUL_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.vectorvectorUL_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.vectorvectorUL_clear(self)

    def swap(self, *args):
        """swap(self, vectorvectorUL v)"""
        return _pyBasePython.vectorvectorUL_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.vectorvectorUL_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.vectorvectorUL_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.vectorvectorUL_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorvectorUL_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorvectorUL_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.vectorvectorUL_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.vectorvectorUL_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorvectorUL
        __init__(self, vectorvectorUL arg0) -> vectorvectorUL
        __init__(self, size_type size) -> vectorvectorUL
        __init__(self, size_type size, value_type value) -> vectorvectorUL
        """
        _pyBasePython.vectorvectorUL_swiginit(self,_pyBasePython.new_vectorvectorUL(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.vectorvectorUL_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.vectorvectorUL_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.vectorvectorUL_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.vectorvectorUL_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.vectorvectorUL_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.vectorvectorUL_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _pyBasePython.vectorvectorUL_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _pyBasePython.vectorvectorUL_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorvectorUL
vectorvectorUL.iterator = new_instancemethod(_pyBasePython.vectorvectorUL_iterator,None,vectorvectorUL)
vectorvectorUL.__nonzero__ = new_instancemethod(_pyBasePython.vectorvectorUL___nonzero__,None,vectorvectorUL)
vectorvectorUL.__bool__ = new_instancemethod(_pyBasePython.vectorvectorUL___bool__,None,vectorvectorUL)
vectorvectorUL.__len__ = new_instancemethod(_pyBasePython.vectorvectorUL___len__,None,vectorvectorUL)
vectorvectorUL.pop = new_instancemethod(_pyBasePython.vectorvectorUL_pop,None,vectorvectorUL)
vectorvectorUL.__getslice__ = new_instancemethod(_pyBasePython.vectorvectorUL___getslice__,None,vectorvectorUL)
vectorvectorUL.__setslice__ = new_instancemethod(_pyBasePython.vectorvectorUL___setslice__,None,vectorvectorUL)
vectorvectorUL.__delslice__ = new_instancemethod(_pyBasePython.vectorvectorUL___delslice__,None,vectorvectorUL)
vectorvectorUL.__delitem__ = new_instancemethod(_pyBasePython.vectorvectorUL___delitem__,None,vectorvectorUL)
vectorvectorUL.__getitem__ = new_instancemethod(_pyBasePython.vectorvectorUL___getitem__,None,vectorvectorUL)
vectorvectorUL.__setitem__ = new_instancemethod(_pyBasePython.vectorvectorUL___setitem__,None,vectorvectorUL)
vectorvectorUL.append = new_instancemethod(_pyBasePython.vectorvectorUL_append,None,vectorvectorUL)
vectorvectorUL.empty = new_instancemethod(_pyBasePython.vectorvectorUL_empty,None,vectorvectorUL)
vectorvectorUL.size = new_instancemethod(_pyBasePython.vectorvectorUL_size,None,vectorvectorUL)
vectorvectorUL.clear = new_instancemethod(_pyBasePython.vectorvectorUL_clear,None,vectorvectorUL)
vectorvectorUL.swap = new_instancemethod(_pyBasePython.vectorvectorUL_swap,None,vectorvectorUL)
vectorvectorUL.get_allocator = new_instancemethod(_pyBasePython.vectorvectorUL_get_allocator,None,vectorvectorUL)
vectorvectorUL.begin = new_instancemethod(_pyBasePython.vectorvectorUL_begin,None,vectorvectorUL)
vectorvectorUL.end = new_instancemethod(_pyBasePython.vectorvectorUL_end,None,vectorvectorUL)
vectorvectorUL.rbegin = new_instancemethod(_pyBasePython.vectorvectorUL_rbegin,None,vectorvectorUL)
vectorvectorUL.rend = new_instancemethod(_pyBasePython.vectorvectorUL_rend,None,vectorvectorUL)
vectorvectorUL.pop_back = new_instancemethod(_pyBasePython.vectorvectorUL_pop_back,None,vectorvectorUL)
vectorvectorUL.erase = new_instancemethod(_pyBasePython.vectorvectorUL_erase,None,vectorvectorUL)
vectorvectorUL.push_back = new_instancemethod(_pyBasePython.vectorvectorUL_push_back,None,vectorvectorUL)
vectorvectorUL.front = new_instancemethod(_pyBasePython.vectorvectorUL_front,None,vectorvectorUL)
vectorvectorUL.back = new_instancemethod(_pyBasePython.vectorvectorUL_back,None,vectorvectorUL)
vectorvectorUL.assign = new_instancemethod(_pyBasePython.vectorvectorUL_assign,None,vectorvectorUL)
vectorvectorUL.resize = new_instancemethod(_pyBasePython.vectorvectorUL_resize,None,vectorvectorUL)
vectorvectorUL.insert = new_instancemethod(_pyBasePython.vectorvectorUL_insert,None,vectorvectorUL)
vectorvectorUL.reserve = new_instancemethod(_pyBasePython.vectorvectorUL_reserve,None,vectorvectorUL)
vectorvectorUL.capacity = new_instancemethod(_pyBasePython.vectorvectorUL_capacity,None,vectorvectorUL)
vectorvectorUL_swigregister = _pyBasePython.vectorvectorUL_swigregister
vectorvectorUL_swigregister(vectorvectorUL)

class vectorSC(object):
    """Proxy of C++ std::vector<(signed char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.vectorSC_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.vectorSC___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.vectorSC___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.vectorSC___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.vectorSC_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorSC"""
        return _pyBasePython.vectorSC___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorSC v)"""
        return _pyBasePython.vectorSC___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.vectorSC___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.vectorSC___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorSC
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.vectorSC___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorSC v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.vectorSC___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.vectorSC_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.vectorSC_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.vectorSC_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.vectorSC_clear(self)

    def swap(self, *args):
        """swap(self, vectorSC v)"""
        return _pyBasePython.vectorSC_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.vectorSC_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.vectorSC_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.vectorSC_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorSC_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorSC_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.vectorSC_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.vectorSC_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorSC
        __init__(self, vectorSC arg0) -> vectorSC
        __init__(self, size_type size) -> vectorSC
        __init__(self, size_type size, value_type value) -> vectorSC
        """
        _pyBasePython.vectorSC_swiginit(self,_pyBasePython.new_vectorSC(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.vectorSC_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.vectorSC_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.vectorSC_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.vectorSC_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.vectorSC_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.vectorSC_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _pyBasePython.vectorSC_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _pyBasePython.vectorSC_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorSC
vectorSC.iterator = new_instancemethod(_pyBasePython.vectorSC_iterator,None,vectorSC)
vectorSC.__nonzero__ = new_instancemethod(_pyBasePython.vectorSC___nonzero__,None,vectorSC)
vectorSC.__bool__ = new_instancemethod(_pyBasePython.vectorSC___bool__,None,vectorSC)
vectorSC.__len__ = new_instancemethod(_pyBasePython.vectorSC___len__,None,vectorSC)
vectorSC.pop = new_instancemethod(_pyBasePython.vectorSC_pop,None,vectorSC)
vectorSC.__getslice__ = new_instancemethod(_pyBasePython.vectorSC___getslice__,None,vectorSC)
vectorSC.__setslice__ = new_instancemethod(_pyBasePython.vectorSC___setslice__,None,vectorSC)
vectorSC.__delslice__ = new_instancemethod(_pyBasePython.vectorSC___delslice__,None,vectorSC)
vectorSC.__delitem__ = new_instancemethod(_pyBasePython.vectorSC___delitem__,None,vectorSC)
vectorSC.__getitem__ = new_instancemethod(_pyBasePython.vectorSC___getitem__,None,vectorSC)
vectorSC.__setitem__ = new_instancemethod(_pyBasePython.vectorSC___setitem__,None,vectorSC)
vectorSC.append = new_instancemethod(_pyBasePython.vectorSC_append,None,vectorSC)
vectorSC.empty = new_instancemethod(_pyBasePython.vectorSC_empty,None,vectorSC)
vectorSC.size = new_instancemethod(_pyBasePython.vectorSC_size,None,vectorSC)
vectorSC.clear = new_instancemethod(_pyBasePython.vectorSC_clear,None,vectorSC)
vectorSC.swap = new_instancemethod(_pyBasePython.vectorSC_swap,None,vectorSC)
vectorSC.get_allocator = new_instancemethod(_pyBasePython.vectorSC_get_allocator,None,vectorSC)
vectorSC.begin = new_instancemethod(_pyBasePython.vectorSC_begin,None,vectorSC)
vectorSC.end = new_instancemethod(_pyBasePython.vectorSC_end,None,vectorSC)
vectorSC.rbegin = new_instancemethod(_pyBasePython.vectorSC_rbegin,None,vectorSC)
vectorSC.rend = new_instancemethod(_pyBasePython.vectorSC_rend,None,vectorSC)
vectorSC.pop_back = new_instancemethod(_pyBasePython.vectorSC_pop_back,None,vectorSC)
vectorSC.erase = new_instancemethod(_pyBasePython.vectorSC_erase,None,vectorSC)
vectorSC.push_back = new_instancemethod(_pyBasePython.vectorSC_push_back,None,vectorSC)
vectorSC.front = new_instancemethod(_pyBasePython.vectorSC_front,None,vectorSC)
vectorSC.back = new_instancemethod(_pyBasePython.vectorSC_back,None,vectorSC)
vectorSC.assign = new_instancemethod(_pyBasePython.vectorSC_assign,None,vectorSC)
vectorSC.resize = new_instancemethod(_pyBasePython.vectorSC_resize,None,vectorSC)
vectorSC.insert = new_instancemethod(_pyBasePython.vectorSC_insert,None,vectorSC)
vectorSC.reserve = new_instancemethod(_pyBasePython.vectorSC_reserve,None,vectorSC)
vectorSC.capacity = new_instancemethod(_pyBasePython.vectorSC_capacity,None,vectorSC)
vectorSC_swigregister = _pyBasePython.vectorSC_swigregister
vectorSC_swigregister(vectorSC)

class vectorvectorSC(object):
    """Proxy of C++ std::vector<(std::vector<(signed char)>)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.vectorvectorSC_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.vectorvectorSC___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.vectorvectorSC___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.vectorvectorSC___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.vectorvectorSC_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorvectorSC"""
        return _pyBasePython.vectorvectorSC___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorvectorSC v)"""
        return _pyBasePython.vectorvectorSC___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.vectorvectorSC___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.vectorvectorSC___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorvectorSC
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.vectorvectorSC___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorvectorSC v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.vectorvectorSC___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.vectorvectorSC_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.vectorvectorSC_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.vectorvectorSC_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.vectorvectorSC_clear(self)

    def swap(self, *args):
        """swap(self, vectorvectorSC v)"""
        return _pyBasePython.vectorvectorSC_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.vectorvectorSC_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.vectorvectorSC_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.vectorvectorSC_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorvectorSC_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorvectorSC_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.vectorvectorSC_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.vectorvectorSC_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorvectorSC
        __init__(self, vectorvectorSC arg0) -> vectorvectorSC
        __init__(self, size_type size) -> vectorvectorSC
        __init__(self, size_type size, value_type value) -> vectorvectorSC
        """
        _pyBasePython.vectorvectorSC_swiginit(self,_pyBasePython.new_vectorvectorSC(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.vectorvectorSC_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.vectorvectorSC_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.vectorvectorSC_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.vectorvectorSC_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.vectorvectorSC_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.vectorvectorSC_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _pyBasePython.vectorvectorSC_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _pyBasePython.vectorvectorSC_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorvectorSC
vectorvectorSC.iterator = new_instancemethod(_pyBasePython.vectorvectorSC_iterator,None,vectorvectorSC)
vectorvectorSC.__nonzero__ = new_instancemethod(_pyBasePython.vectorvectorSC___nonzero__,None,vectorvectorSC)
vectorvectorSC.__bool__ = new_instancemethod(_pyBasePython.vectorvectorSC___bool__,None,vectorvectorSC)
vectorvectorSC.__len__ = new_instancemethod(_pyBasePython.vectorvectorSC___len__,None,vectorvectorSC)
vectorvectorSC.pop = new_instancemethod(_pyBasePython.vectorvectorSC_pop,None,vectorvectorSC)
vectorvectorSC.__getslice__ = new_instancemethod(_pyBasePython.vectorvectorSC___getslice__,None,vectorvectorSC)
vectorvectorSC.__setslice__ = new_instancemethod(_pyBasePython.vectorvectorSC___setslice__,None,vectorvectorSC)
vectorvectorSC.__delslice__ = new_instancemethod(_pyBasePython.vectorvectorSC___delslice__,None,vectorvectorSC)
vectorvectorSC.__delitem__ = new_instancemethod(_pyBasePython.vectorvectorSC___delitem__,None,vectorvectorSC)
vectorvectorSC.__getitem__ = new_instancemethod(_pyBasePython.vectorvectorSC___getitem__,None,vectorvectorSC)
vectorvectorSC.__setitem__ = new_instancemethod(_pyBasePython.vectorvectorSC___setitem__,None,vectorvectorSC)
vectorvectorSC.append = new_instancemethod(_pyBasePython.vectorvectorSC_append,None,vectorvectorSC)
vectorvectorSC.empty = new_instancemethod(_pyBasePython.vectorvectorSC_empty,None,vectorvectorSC)
vectorvectorSC.size = new_instancemethod(_pyBasePython.vectorvectorSC_size,None,vectorvectorSC)
vectorvectorSC.clear = new_instancemethod(_pyBasePython.vectorvectorSC_clear,None,vectorvectorSC)
vectorvectorSC.swap = new_instancemethod(_pyBasePython.vectorvectorSC_swap,None,vectorvectorSC)
vectorvectorSC.get_allocator = new_instancemethod(_pyBasePython.vectorvectorSC_get_allocator,None,vectorvectorSC)
vectorvectorSC.begin = new_instancemethod(_pyBasePython.vectorvectorSC_begin,None,vectorvectorSC)
vectorvectorSC.end = new_instancemethod(_pyBasePython.vectorvectorSC_end,None,vectorvectorSC)
vectorvectorSC.rbegin = new_instancemethod(_pyBasePython.vectorvectorSC_rbegin,None,vectorvectorSC)
vectorvectorSC.rend = new_instancemethod(_pyBasePython.vectorvectorSC_rend,None,vectorvectorSC)
vectorvectorSC.pop_back = new_instancemethod(_pyBasePython.vectorvectorSC_pop_back,None,vectorvectorSC)
vectorvectorSC.erase = new_instancemethod(_pyBasePython.vectorvectorSC_erase,None,vectorvectorSC)
vectorvectorSC.push_back = new_instancemethod(_pyBasePython.vectorvectorSC_push_back,None,vectorvectorSC)
vectorvectorSC.front = new_instancemethod(_pyBasePython.vectorvectorSC_front,None,vectorvectorSC)
vectorvectorSC.back = new_instancemethod(_pyBasePython.vectorvectorSC_back,None,vectorvectorSC)
vectorvectorSC.assign = new_instancemethod(_pyBasePython.vectorvectorSC_assign,None,vectorvectorSC)
vectorvectorSC.resize = new_instancemethod(_pyBasePython.vectorvectorSC_resize,None,vectorvectorSC)
vectorvectorSC.insert = new_instancemethod(_pyBasePython.vectorvectorSC_insert,None,vectorvectorSC)
vectorvectorSC.reserve = new_instancemethod(_pyBasePython.vectorvectorSC_reserve,None,vectorvectorSC)
vectorvectorSC.capacity = new_instancemethod(_pyBasePython.vectorvectorSC_capacity,None,vectorvectorSC)
vectorvectorSC_swigregister = _pyBasePython.vectorvectorSC_swigregister
vectorvectorSC_swigregister(vectorvectorSC)

class vectorSS(object):
    """Proxy of C++ std::vector<(short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.vectorSS_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.vectorSS___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.vectorSS___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.vectorSS___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.vectorSS_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorSS"""
        return _pyBasePython.vectorSS___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorSS v)"""
        return _pyBasePython.vectorSS___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.vectorSS___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.vectorSS___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorSS
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.vectorSS___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorSS v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.vectorSS___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.vectorSS_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.vectorSS_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.vectorSS_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.vectorSS_clear(self)

    def swap(self, *args):
        """swap(self, vectorSS v)"""
        return _pyBasePython.vectorSS_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.vectorSS_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.vectorSS_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.vectorSS_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorSS_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorSS_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.vectorSS_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.vectorSS_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorSS
        __init__(self, vectorSS arg0) -> vectorSS
        __init__(self, size_type size) -> vectorSS
        __init__(self, size_type size, value_type value) -> vectorSS
        """
        _pyBasePython.vectorSS_swiginit(self,_pyBasePython.new_vectorSS(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.vectorSS_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.vectorSS_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.vectorSS_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.vectorSS_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.vectorSS_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.vectorSS_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _pyBasePython.vectorSS_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _pyBasePython.vectorSS_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorSS
vectorSS.iterator = new_instancemethod(_pyBasePython.vectorSS_iterator,None,vectorSS)
vectorSS.__nonzero__ = new_instancemethod(_pyBasePython.vectorSS___nonzero__,None,vectorSS)
vectorSS.__bool__ = new_instancemethod(_pyBasePython.vectorSS___bool__,None,vectorSS)
vectorSS.__len__ = new_instancemethod(_pyBasePython.vectorSS___len__,None,vectorSS)
vectorSS.pop = new_instancemethod(_pyBasePython.vectorSS_pop,None,vectorSS)
vectorSS.__getslice__ = new_instancemethod(_pyBasePython.vectorSS___getslice__,None,vectorSS)
vectorSS.__setslice__ = new_instancemethod(_pyBasePython.vectorSS___setslice__,None,vectorSS)
vectorSS.__delslice__ = new_instancemethod(_pyBasePython.vectorSS___delslice__,None,vectorSS)
vectorSS.__delitem__ = new_instancemethod(_pyBasePython.vectorSS___delitem__,None,vectorSS)
vectorSS.__getitem__ = new_instancemethod(_pyBasePython.vectorSS___getitem__,None,vectorSS)
vectorSS.__setitem__ = new_instancemethod(_pyBasePython.vectorSS___setitem__,None,vectorSS)
vectorSS.append = new_instancemethod(_pyBasePython.vectorSS_append,None,vectorSS)
vectorSS.empty = new_instancemethod(_pyBasePython.vectorSS_empty,None,vectorSS)
vectorSS.size = new_instancemethod(_pyBasePython.vectorSS_size,None,vectorSS)
vectorSS.clear = new_instancemethod(_pyBasePython.vectorSS_clear,None,vectorSS)
vectorSS.swap = new_instancemethod(_pyBasePython.vectorSS_swap,None,vectorSS)
vectorSS.get_allocator = new_instancemethod(_pyBasePython.vectorSS_get_allocator,None,vectorSS)
vectorSS.begin = new_instancemethod(_pyBasePython.vectorSS_begin,None,vectorSS)
vectorSS.end = new_instancemethod(_pyBasePython.vectorSS_end,None,vectorSS)
vectorSS.rbegin = new_instancemethod(_pyBasePython.vectorSS_rbegin,None,vectorSS)
vectorSS.rend = new_instancemethod(_pyBasePython.vectorSS_rend,None,vectorSS)
vectorSS.pop_back = new_instancemethod(_pyBasePython.vectorSS_pop_back,None,vectorSS)
vectorSS.erase = new_instancemethod(_pyBasePython.vectorSS_erase,None,vectorSS)
vectorSS.push_back = new_instancemethod(_pyBasePython.vectorSS_push_back,None,vectorSS)
vectorSS.front = new_instancemethod(_pyBasePython.vectorSS_front,None,vectorSS)
vectorSS.back = new_instancemethod(_pyBasePython.vectorSS_back,None,vectorSS)
vectorSS.assign = new_instancemethod(_pyBasePython.vectorSS_assign,None,vectorSS)
vectorSS.resize = new_instancemethod(_pyBasePython.vectorSS_resize,None,vectorSS)
vectorSS.insert = new_instancemethod(_pyBasePython.vectorSS_insert,None,vectorSS)
vectorSS.reserve = new_instancemethod(_pyBasePython.vectorSS_reserve,None,vectorSS)
vectorSS.capacity = new_instancemethod(_pyBasePython.vectorSS_capacity,None,vectorSS)
vectorSS_swigregister = _pyBasePython.vectorSS_swigregister
vectorSS_swigregister(vectorSS)

class vectorvectorSS(object):
    """Proxy of C++ std::vector<(std::vector<(short)>)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.vectorvectorSS_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.vectorvectorSS___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.vectorvectorSS___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.vectorvectorSS___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.vectorvectorSS_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorvectorSS"""
        return _pyBasePython.vectorvectorSS___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorvectorSS v)"""
        return _pyBasePython.vectorvectorSS___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.vectorvectorSS___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.vectorvectorSS___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorvectorSS
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.vectorvectorSS___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorvectorSS v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.vectorvectorSS___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.vectorvectorSS_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.vectorvectorSS_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.vectorvectorSS_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.vectorvectorSS_clear(self)

    def swap(self, *args):
        """swap(self, vectorvectorSS v)"""
        return _pyBasePython.vectorvectorSS_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.vectorvectorSS_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.vectorvectorSS_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.vectorvectorSS_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorvectorSS_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorvectorSS_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.vectorvectorSS_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.vectorvectorSS_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorvectorSS
        __init__(self, vectorvectorSS arg0) -> vectorvectorSS
        __init__(self, size_type size) -> vectorvectorSS
        __init__(self, size_type size, value_type value) -> vectorvectorSS
        """
        _pyBasePython.vectorvectorSS_swiginit(self,_pyBasePython.new_vectorvectorSS(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.vectorvectorSS_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.vectorvectorSS_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.vectorvectorSS_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.vectorvectorSS_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.vectorvectorSS_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.vectorvectorSS_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _pyBasePython.vectorvectorSS_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _pyBasePython.vectorvectorSS_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorvectorSS
vectorvectorSS.iterator = new_instancemethod(_pyBasePython.vectorvectorSS_iterator,None,vectorvectorSS)
vectorvectorSS.__nonzero__ = new_instancemethod(_pyBasePython.vectorvectorSS___nonzero__,None,vectorvectorSS)
vectorvectorSS.__bool__ = new_instancemethod(_pyBasePython.vectorvectorSS___bool__,None,vectorvectorSS)
vectorvectorSS.__len__ = new_instancemethod(_pyBasePython.vectorvectorSS___len__,None,vectorvectorSS)
vectorvectorSS.pop = new_instancemethod(_pyBasePython.vectorvectorSS_pop,None,vectorvectorSS)
vectorvectorSS.__getslice__ = new_instancemethod(_pyBasePython.vectorvectorSS___getslice__,None,vectorvectorSS)
vectorvectorSS.__setslice__ = new_instancemethod(_pyBasePython.vectorvectorSS___setslice__,None,vectorvectorSS)
vectorvectorSS.__delslice__ = new_instancemethod(_pyBasePython.vectorvectorSS___delslice__,None,vectorvectorSS)
vectorvectorSS.__delitem__ = new_instancemethod(_pyBasePython.vectorvectorSS___delitem__,None,vectorvectorSS)
vectorvectorSS.__getitem__ = new_instancemethod(_pyBasePython.vectorvectorSS___getitem__,None,vectorvectorSS)
vectorvectorSS.__setitem__ = new_instancemethod(_pyBasePython.vectorvectorSS___setitem__,None,vectorvectorSS)
vectorvectorSS.append = new_instancemethod(_pyBasePython.vectorvectorSS_append,None,vectorvectorSS)
vectorvectorSS.empty = new_instancemethod(_pyBasePython.vectorvectorSS_empty,None,vectorvectorSS)
vectorvectorSS.size = new_instancemethod(_pyBasePython.vectorvectorSS_size,None,vectorvectorSS)
vectorvectorSS.clear = new_instancemethod(_pyBasePython.vectorvectorSS_clear,None,vectorvectorSS)
vectorvectorSS.swap = new_instancemethod(_pyBasePython.vectorvectorSS_swap,None,vectorvectorSS)
vectorvectorSS.get_allocator = new_instancemethod(_pyBasePython.vectorvectorSS_get_allocator,None,vectorvectorSS)
vectorvectorSS.begin = new_instancemethod(_pyBasePython.vectorvectorSS_begin,None,vectorvectorSS)
vectorvectorSS.end = new_instancemethod(_pyBasePython.vectorvectorSS_end,None,vectorvectorSS)
vectorvectorSS.rbegin = new_instancemethod(_pyBasePython.vectorvectorSS_rbegin,None,vectorvectorSS)
vectorvectorSS.rend = new_instancemethod(_pyBasePython.vectorvectorSS_rend,None,vectorvectorSS)
vectorvectorSS.pop_back = new_instancemethod(_pyBasePython.vectorvectorSS_pop_back,None,vectorvectorSS)
vectorvectorSS.erase = new_instancemethod(_pyBasePython.vectorvectorSS_erase,None,vectorvectorSS)
vectorvectorSS.push_back = new_instancemethod(_pyBasePython.vectorvectorSS_push_back,None,vectorvectorSS)
vectorvectorSS.front = new_instancemethod(_pyBasePython.vectorvectorSS_front,None,vectorvectorSS)
vectorvectorSS.back = new_instancemethod(_pyBasePython.vectorvectorSS_back,None,vectorvectorSS)
vectorvectorSS.assign = new_instancemethod(_pyBasePython.vectorvectorSS_assign,None,vectorvectorSS)
vectorvectorSS.resize = new_instancemethod(_pyBasePython.vectorvectorSS_resize,None,vectorvectorSS)
vectorvectorSS.insert = new_instancemethod(_pyBasePython.vectorvectorSS_insert,None,vectorvectorSS)
vectorvectorSS.reserve = new_instancemethod(_pyBasePython.vectorvectorSS_reserve,None,vectorvectorSS)
vectorvectorSS.capacity = new_instancemethod(_pyBasePython.vectorvectorSS_capacity,None,vectorvectorSS)
vectorvectorSS_swigregister = _pyBasePython.vectorvectorSS_swigregister
vectorvectorSS_swigregister(vectorvectorSS)

class vectorSL(object):
    """Proxy of C++ std::vector<(long)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.vectorSL_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.vectorSL___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.vectorSL___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.vectorSL___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.vectorSL_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorSL"""
        return _pyBasePython.vectorSL___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorSL v)"""
        return _pyBasePython.vectorSL___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.vectorSL___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.vectorSL___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorSL
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.vectorSL___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorSL v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.vectorSL___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.vectorSL_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.vectorSL_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.vectorSL_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.vectorSL_clear(self)

    def swap(self, *args):
        """swap(self, vectorSL v)"""
        return _pyBasePython.vectorSL_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.vectorSL_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.vectorSL_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.vectorSL_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorSL_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorSL_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.vectorSL_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.vectorSL_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorSL
        __init__(self, vectorSL arg0) -> vectorSL
        __init__(self, size_type size) -> vectorSL
        __init__(self, size_type size, value_type value) -> vectorSL
        """
        _pyBasePython.vectorSL_swiginit(self,_pyBasePython.new_vectorSL(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.vectorSL_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.vectorSL_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.vectorSL_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.vectorSL_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.vectorSL_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.vectorSL_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _pyBasePython.vectorSL_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _pyBasePython.vectorSL_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorSL
vectorSL.iterator = new_instancemethod(_pyBasePython.vectorSL_iterator,None,vectorSL)
vectorSL.__nonzero__ = new_instancemethod(_pyBasePython.vectorSL___nonzero__,None,vectorSL)
vectorSL.__bool__ = new_instancemethod(_pyBasePython.vectorSL___bool__,None,vectorSL)
vectorSL.__len__ = new_instancemethod(_pyBasePython.vectorSL___len__,None,vectorSL)
vectorSL.pop = new_instancemethod(_pyBasePython.vectorSL_pop,None,vectorSL)
vectorSL.__getslice__ = new_instancemethod(_pyBasePython.vectorSL___getslice__,None,vectorSL)
vectorSL.__setslice__ = new_instancemethod(_pyBasePython.vectorSL___setslice__,None,vectorSL)
vectorSL.__delslice__ = new_instancemethod(_pyBasePython.vectorSL___delslice__,None,vectorSL)
vectorSL.__delitem__ = new_instancemethod(_pyBasePython.vectorSL___delitem__,None,vectorSL)
vectorSL.__getitem__ = new_instancemethod(_pyBasePython.vectorSL___getitem__,None,vectorSL)
vectorSL.__setitem__ = new_instancemethod(_pyBasePython.vectorSL___setitem__,None,vectorSL)
vectorSL.append = new_instancemethod(_pyBasePython.vectorSL_append,None,vectorSL)
vectorSL.empty = new_instancemethod(_pyBasePython.vectorSL_empty,None,vectorSL)
vectorSL.size = new_instancemethod(_pyBasePython.vectorSL_size,None,vectorSL)
vectorSL.clear = new_instancemethod(_pyBasePython.vectorSL_clear,None,vectorSL)
vectorSL.swap = new_instancemethod(_pyBasePython.vectorSL_swap,None,vectorSL)
vectorSL.get_allocator = new_instancemethod(_pyBasePython.vectorSL_get_allocator,None,vectorSL)
vectorSL.begin = new_instancemethod(_pyBasePython.vectorSL_begin,None,vectorSL)
vectorSL.end = new_instancemethod(_pyBasePython.vectorSL_end,None,vectorSL)
vectorSL.rbegin = new_instancemethod(_pyBasePython.vectorSL_rbegin,None,vectorSL)
vectorSL.rend = new_instancemethod(_pyBasePython.vectorSL_rend,None,vectorSL)
vectorSL.pop_back = new_instancemethod(_pyBasePython.vectorSL_pop_back,None,vectorSL)
vectorSL.erase = new_instancemethod(_pyBasePython.vectorSL_erase,None,vectorSL)
vectorSL.push_back = new_instancemethod(_pyBasePython.vectorSL_push_back,None,vectorSL)
vectorSL.front = new_instancemethod(_pyBasePython.vectorSL_front,None,vectorSL)
vectorSL.back = new_instancemethod(_pyBasePython.vectorSL_back,None,vectorSL)
vectorSL.assign = new_instancemethod(_pyBasePython.vectorSL_assign,None,vectorSL)
vectorSL.resize = new_instancemethod(_pyBasePython.vectorSL_resize,None,vectorSL)
vectorSL.insert = new_instancemethod(_pyBasePython.vectorSL_insert,None,vectorSL)
vectorSL.reserve = new_instancemethod(_pyBasePython.vectorSL_reserve,None,vectorSL)
vectorSL.capacity = new_instancemethod(_pyBasePython.vectorSL_capacity,None,vectorSL)
vectorSL_swigregister = _pyBasePython.vectorSL_swigregister
vectorSL_swigregister(vectorSL)

class vectorvectorSL(object):
    """Proxy of C++ std::vector<(std::vector<(long)>)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.vectorvectorSL_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.vectorvectorSL___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.vectorvectorSL___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.vectorvectorSL___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.vectorvectorSL_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorvectorSL"""
        return _pyBasePython.vectorvectorSL___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorvectorSL v)"""
        return _pyBasePython.vectorvectorSL___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.vectorvectorSL___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.vectorvectorSL___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorvectorSL
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.vectorvectorSL___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorvectorSL v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.vectorvectorSL___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.vectorvectorSL_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.vectorvectorSL_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.vectorvectorSL_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.vectorvectorSL_clear(self)

    def swap(self, *args):
        """swap(self, vectorvectorSL v)"""
        return _pyBasePython.vectorvectorSL_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.vectorvectorSL_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.vectorvectorSL_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.vectorvectorSL_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorvectorSL_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorvectorSL_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.vectorvectorSL_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.vectorvectorSL_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorvectorSL
        __init__(self, vectorvectorSL arg0) -> vectorvectorSL
        __init__(self, size_type size) -> vectorvectorSL
        __init__(self, size_type size, value_type value) -> vectorvectorSL
        """
        _pyBasePython.vectorvectorSL_swiginit(self,_pyBasePython.new_vectorvectorSL(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.vectorvectorSL_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.vectorvectorSL_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.vectorvectorSL_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.vectorvectorSL_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.vectorvectorSL_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.vectorvectorSL_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _pyBasePython.vectorvectorSL_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _pyBasePython.vectorvectorSL_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorvectorSL
vectorvectorSL.iterator = new_instancemethod(_pyBasePython.vectorvectorSL_iterator,None,vectorvectorSL)
vectorvectorSL.__nonzero__ = new_instancemethod(_pyBasePython.vectorvectorSL___nonzero__,None,vectorvectorSL)
vectorvectorSL.__bool__ = new_instancemethod(_pyBasePython.vectorvectorSL___bool__,None,vectorvectorSL)
vectorvectorSL.__len__ = new_instancemethod(_pyBasePython.vectorvectorSL___len__,None,vectorvectorSL)
vectorvectorSL.pop = new_instancemethod(_pyBasePython.vectorvectorSL_pop,None,vectorvectorSL)
vectorvectorSL.__getslice__ = new_instancemethod(_pyBasePython.vectorvectorSL___getslice__,None,vectorvectorSL)
vectorvectorSL.__setslice__ = new_instancemethod(_pyBasePython.vectorvectorSL___setslice__,None,vectorvectorSL)
vectorvectorSL.__delslice__ = new_instancemethod(_pyBasePython.vectorvectorSL___delslice__,None,vectorvectorSL)
vectorvectorSL.__delitem__ = new_instancemethod(_pyBasePython.vectorvectorSL___delitem__,None,vectorvectorSL)
vectorvectorSL.__getitem__ = new_instancemethod(_pyBasePython.vectorvectorSL___getitem__,None,vectorvectorSL)
vectorvectorSL.__setitem__ = new_instancemethod(_pyBasePython.vectorvectorSL___setitem__,None,vectorvectorSL)
vectorvectorSL.append = new_instancemethod(_pyBasePython.vectorvectorSL_append,None,vectorvectorSL)
vectorvectorSL.empty = new_instancemethod(_pyBasePython.vectorvectorSL_empty,None,vectorvectorSL)
vectorvectorSL.size = new_instancemethod(_pyBasePython.vectorvectorSL_size,None,vectorvectorSL)
vectorvectorSL.clear = new_instancemethod(_pyBasePython.vectorvectorSL_clear,None,vectorvectorSL)
vectorvectorSL.swap = new_instancemethod(_pyBasePython.vectorvectorSL_swap,None,vectorvectorSL)
vectorvectorSL.get_allocator = new_instancemethod(_pyBasePython.vectorvectorSL_get_allocator,None,vectorvectorSL)
vectorvectorSL.begin = new_instancemethod(_pyBasePython.vectorvectorSL_begin,None,vectorvectorSL)
vectorvectorSL.end = new_instancemethod(_pyBasePython.vectorvectorSL_end,None,vectorvectorSL)
vectorvectorSL.rbegin = new_instancemethod(_pyBasePython.vectorvectorSL_rbegin,None,vectorvectorSL)
vectorvectorSL.rend = new_instancemethod(_pyBasePython.vectorvectorSL_rend,None,vectorvectorSL)
vectorvectorSL.pop_back = new_instancemethod(_pyBasePython.vectorvectorSL_pop_back,None,vectorvectorSL)
vectorvectorSL.erase = new_instancemethod(_pyBasePython.vectorvectorSL_erase,None,vectorvectorSL)
vectorvectorSL.push_back = new_instancemethod(_pyBasePython.vectorvectorSL_push_back,None,vectorvectorSL)
vectorvectorSL.front = new_instancemethod(_pyBasePython.vectorvectorSL_front,None,vectorvectorSL)
vectorvectorSL.back = new_instancemethod(_pyBasePython.vectorvectorSL_back,None,vectorvectorSL)
vectorvectorSL.assign = new_instancemethod(_pyBasePython.vectorvectorSL_assign,None,vectorvectorSL)
vectorvectorSL.resize = new_instancemethod(_pyBasePython.vectorvectorSL_resize,None,vectorvectorSL)
vectorvectorSL.insert = new_instancemethod(_pyBasePython.vectorvectorSL_insert,None,vectorvectorSL)
vectorvectorSL.reserve = new_instancemethod(_pyBasePython.vectorvectorSL_reserve,None,vectorvectorSL)
vectorvectorSL.capacity = new_instancemethod(_pyBasePython.vectorvectorSL_capacity,None,vectorvectorSL)
vectorvectorSL_swigregister = _pyBasePython.vectorvectorSL_swigregister
vectorvectorSL_swigregister(vectorvectorSL)

class vectorF(object):
    """Proxy of C++ std::vector<(float)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.vectorF_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.vectorF___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.vectorF___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.vectorF___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.vectorF_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorF"""
        return _pyBasePython.vectorF___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorF v)"""
        return _pyBasePython.vectorF___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.vectorF___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.vectorF___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorF
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.vectorF___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorF v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.vectorF___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.vectorF_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.vectorF_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.vectorF_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.vectorF_clear(self)

    def swap(self, *args):
        """swap(self, vectorF v)"""
        return _pyBasePython.vectorF_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.vectorF_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.vectorF_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.vectorF_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorF_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorF_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.vectorF_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.vectorF_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorF
        __init__(self, vectorF arg0) -> vectorF
        __init__(self, size_type size) -> vectorF
        __init__(self, size_type size, value_type value) -> vectorF
        """
        _pyBasePython.vectorF_swiginit(self,_pyBasePython.new_vectorF(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.vectorF_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.vectorF_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.vectorF_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.vectorF_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.vectorF_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.vectorF_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _pyBasePython.vectorF_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _pyBasePython.vectorF_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorF
vectorF.iterator = new_instancemethod(_pyBasePython.vectorF_iterator,None,vectorF)
vectorF.__nonzero__ = new_instancemethod(_pyBasePython.vectorF___nonzero__,None,vectorF)
vectorF.__bool__ = new_instancemethod(_pyBasePython.vectorF___bool__,None,vectorF)
vectorF.__len__ = new_instancemethod(_pyBasePython.vectorF___len__,None,vectorF)
vectorF.pop = new_instancemethod(_pyBasePython.vectorF_pop,None,vectorF)
vectorF.__getslice__ = new_instancemethod(_pyBasePython.vectorF___getslice__,None,vectorF)
vectorF.__setslice__ = new_instancemethod(_pyBasePython.vectorF___setslice__,None,vectorF)
vectorF.__delslice__ = new_instancemethod(_pyBasePython.vectorF___delslice__,None,vectorF)
vectorF.__delitem__ = new_instancemethod(_pyBasePython.vectorF___delitem__,None,vectorF)
vectorF.__getitem__ = new_instancemethod(_pyBasePython.vectorF___getitem__,None,vectorF)
vectorF.__setitem__ = new_instancemethod(_pyBasePython.vectorF___setitem__,None,vectorF)
vectorF.append = new_instancemethod(_pyBasePython.vectorF_append,None,vectorF)
vectorF.empty = new_instancemethod(_pyBasePython.vectorF_empty,None,vectorF)
vectorF.size = new_instancemethod(_pyBasePython.vectorF_size,None,vectorF)
vectorF.clear = new_instancemethod(_pyBasePython.vectorF_clear,None,vectorF)
vectorF.swap = new_instancemethod(_pyBasePython.vectorF_swap,None,vectorF)
vectorF.get_allocator = new_instancemethod(_pyBasePython.vectorF_get_allocator,None,vectorF)
vectorF.begin = new_instancemethod(_pyBasePython.vectorF_begin,None,vectorF)
vectorF.end = new_instancemethod(_pyBasePython.vectorF_end,None,vectorF)
vectorF.rbegin = new_instancemethod(_pyBasePython.vectorF_rbegin,None,vectorF)
vectorF.rend = new_instancemethod(_pyBasePython.vectorF_rend,None,vectorF)
vectorF.pop_back = new_instancemethod(_pyBasePython.vectorF_pop_back,None,vectorF)
vectorF.erase = new_instancemethod(_pyBasePython.vectorF_erase,None,vectorF)
vectorF.push_back = new_instancemethod(_pyBasePython.vectorF_push_back,None,vectorF)
vectorF.front = new_instancemethod(_pyBasePython.vectorF_front,None,vectorF)
vectorF.back = new_instancemethod(_pyBasePython.vectorF_back,None,vectorF)
vectorF.assign = new_instancemethod(_pyBasePython.vectorF_assign,None,vectorF)
vectorF.resize = new_instancemethod(_pyBasePython.vectorF_resize,None,vectorF)
vectorF.insert = new_instancemethod(_pyBasePython.vectorF_insert,None,vectorF)
vectorF.reserve = new_instancemethod(_pyBasePython.vectorF_reserve,None,vectorF)
vectorF.capacity = new_instancemethod(_pyBasePython.vectorF_capacity,None,vectorF)
vectorF_swigregister = _pyBasePython.vectorF_swigregister
vectorF_swigregister(vectorF)

class vectorvectorF(object):
    """Proxy of C++ std::vector<(std::vector<(float)>)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.vectorvectorF_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.vectorvectorF___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.vectorvectorF___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.vectorvectorF___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.vectorvectorF_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorvectorF"""
        return _pyBasePython.vectorvectorF___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorvectorF v)"""
        return _pyBasePython.vectorvectorF___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.vectorvectorF___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.vectorvectorF___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorvectorF
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.vectorvectorF___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorvectorF v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.vectorvectorF___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.vectorvectorF_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.vectorvectorF_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.vectorvectorF_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.vectorvectorF_clear(self)

    def swap(self, *args):
        """swap(self, vectorvectorF v)"""
        return _pyBasePython.vectorvectorF_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.vectorvectorF_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.vectorvectorF_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.vectorvectorF_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorvectorF_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorvectorF_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.vectorvectorF_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.vectorvectorF_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorvectorF
        __init__(self, vectorvectorF arg0) -> vectorvectorF
        __init__(self, size_type size) -> vectorvectorF
        __init__(self, size_type size, value_type value) -> vectorvectorF
        """
        _pyBasePython.vectorvectorF_swiginit(self,_pyBasePython.new_vectorvectorF(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.vectorvectorF_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.vectorvectorF_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.vectorvectorF_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.vectorvectorF_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.vectorvectorF_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.vectorvectorF_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _pyBasePython.vectorvectorF_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _pyBasePython.vectorvectorF_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorvectorF
vectorvectorF.iterator = new_instancemethod(_pyBasePython.vectorvectorF_iterator,None,vectorvectorF)
vectorvectorF.__nonzero__ = new_instancemethod(_pyBasePython.vectorvectorF___nonzero__,None,vectorvectorF)
vectorvectorF.__bool__ = new_instancemethod(_pyBasePython.vectorvectorF___bool__,None,vectorvectorF)
vectorvectorF.__len__ = new_instancemethod(_pyBasePython.vectorvectorF___len__,None,vectorvectorF)
vectorvectorF.pop = new_instancemethod(_pyBasePython.vectorvectorF_pop,None,vectorvectorF)
vectorvectorF.__getslice__ = new_instancemethod(_pyBasePython.vectorvectorF___getslice__,None,vectorvectorF)
vectorvectorF.__setslice__ = new_instancemethod(_pyBasePython.vectorvectorF___setslice__,None,vectorvectorF)
vectorvectorF.__delslice__ = new_instancemethod(_pyBasePython.vectorvectorF___delslice__,None,vectorvectorF)
vectorvectorF.__delitem__ = new_instancemethod(_pyBasePython.vectorvectorF___delitem__,None,vectorvectorF)
vectorvectorF.__getitem__ = new_instancemethod(_pyBasePython.vectorvectorF___getitem__,None,vectorvectorF)
vectorvectorF.__setitem__ = new_instancemethod(_pyBasePython.vectorvectorF___setitem__,None,vectorvectorF)
vectorvectorF.append = new_instancemethod(_pyBasePython.vectorvectorF_append,None,vectorvectorF)
vectorvectorF.empty = new_instancemethod(_pyBasePython.vectorvectorF_empty,None,vectorvectorF)
vectorvectorF.size = new_instancemethod(_pyBasePython.vectorvectorF_size,None,vectorvectorF)
vectorvectorF.clear = new_instancemethod(_pyBasePython.vectorvectorF_clear,None,vectorvectorF)
vectorvectorF.swap = new_instancemethod(_pyBasePython.vectorvectorF_swap,None,vectorvectorF)
vectorvectorF.get_allocator = new_instancemethod(_pyBasePython.vectorvectorF_get_allocator,None,vectorvectorF)
vectorvectorF.begin = new_instancemethod(_pyBasePython.vectorvectorF_begin,None,vectorvectorF)
vectorvectorF.end = new_instancemethod(_pyBasePython.vectorvectorF_end,None,vectorvectorF)
vectorvectorF.rbegin = new_instancemethod(_pyBasePython.vectorvectorF_rbegin,None,vectorvectorF)
vectorvectorF.rend = new_instancemethod(_pyBasePython.vectorvectorF_rend,None,vectorvectorF)
vectorvectorF.pop_back = new_instancemethod(_pyBasePython.vectorvectorF_pop_back,None,vectorvectorF)
vectorvectorF.erase = new_instancemethod(_pyBasePython.vectorvectorF_erase,None,vectorvectorF)
vectorvectorF.push_back = new_instancemethod(_pyBasePython.vectorvectorF_push_back,None,vectorvectorF)
vectorvectorF.front = new_instancemethod(_pyBasePython.vectorvectorF_front,None,vectorvectorF)
vectorvectorF.back = new_instancemethod(_pyBasePython.vectorvectorF_back,None,vectorvectorF)
vectorvectorF.assign = new_instancemethod(_pyBasePython.vectorvectorF_assign,None,vectorvectorF)
vectorvectorF.resize = new_instancemethod(_pyBasePython.vectorvectorF_resize,None,vectorvectorF)
vectorvectorF.insert = new_instancemethod(_pyBasePython.vectorvectorF_insert,None,vectorvectorF)
vectorvectorF.reserve = new_instancemethod(_pyBasePython.vectorvectorF_reserve,None,vectorvectorF)
vectorvectorF.capacity = new_instancemethod(_pyBasePython.vectorvectorF_capacity,None,vectorvectorF)
vectorvectorF_swigregister = _pyBasePython.vectorvectorF_swigregister
vectorvectorF_swigregister(vectorvectorF)

class vectorD(object):
    """Proxy of C++ std::vector<(double)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.vectorD_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.vectorD___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.vectorD___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.vectorD___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.vectorD_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorD"""
        return _pyBasePython.vectorD___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorD v)"""
        return _pyBasePython.vectorD___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.vectorD___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.vectorD___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorD
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.vectorD___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorD v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.vectorD___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.vectorD_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.vectorD_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.vectorD_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.vectorD_clear(self)

    def swap(self, *args):
        """swap(self, vectorD v)"""
        return _pyBasePython.vectorD_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.vectorD_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.vectorD_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.vectorD_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorD_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorD_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.vectorD_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.vectorD_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorD
        __init__(self, vectorD arg0) -> vectorD
        __init__(self, size_type size) -> vectorD
        __init__(self, size_type size, value_type value) -> vectorD
        """
        _pyBasePython.vectorD_swiginit(self,_pyBasePython.new_vectorD(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.vectorD_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.vectorD_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.vectorD_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.vectorD_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.vectorD_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.vectorD_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _pyBasePython.vectorD_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _pyBasePython.vectorD_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorD
vectorD.iterator = new_instancemethod(_pyBasePython.vectorD_iterator,None,vectorD)
vectorD.__nonzero__ = new_instancemethod(_pyBasePython.vectorD___nonzero__,None,vectorD)
vectorD.__bool__ = new_instancemethod(_pyBasePython.vectorD___bool__,None,vectorD)
vectorD.__len__ = new_instancemethod(_pyBasePython.vectorD___len__,None,vectorD)
vectorD.pop = new_instancemethod(_pyBasePython.vectorD_pop,None,vectorD)
vectorD.__getslice__ = new_instancemethod(_pyBasePython.vectorD___getslice__,None,vectorD)
vectorD.__setslice__ = new_instancemethod(_pyBasePython.vectorD___setslice__,None,vectorD)
vectorD.__delslice__ = new_instancemethod(_pyBasePython.vectorD___delslice__,None,vectorD)
vectorD.__delitem__ = new_instancemethod(_pyBasePython.vectorD___delitem__,None,vectorD)
vectorD.__getitem__ = new_instancemethod(_pyBasePython.vectorD___getitem__,None,vectorD)
vectorD.__setitem__ = new_instancemethod(_pyBasePython.vectorD___setitem__,None,vectorD)
vectorD.append = new_instancemethod(_pyBasePython.vectorD_append,None,vectorD)
vectorD.empty = new_instancemethod(_pyBasePython.vectorD_empty,None,vectorD)
vectorD.size = new_instancemethod(_pyBasePython.vectorD_size,None,vectorD)
vectorD.clear = new_instancemethod(_pyBasePython.vectorD_clear,None,vectorD)
vectorD.swap = new_instancemethod(_pyBasePython.vectorD_swap,None,vectorD)
vectorD.get_allocator = new_instancemethod(_pyBasePython.vectorD_get_allocator,None,vectorD)
vectorD.begin = new_instancemethod(_pyBasePython.vectorD_begin,None,vectorD)
vectorD.end = new_instancemethod(_pyBasePython.vectorD_end,None,vectorD)
vectorD.rbegin = new_instancemethod(_pyBasePython.vectorD_rbegin,None,vectorD)
vectorD.rend = new_instancemethod(_pyBasePython.vectorD_rend,None,vectorD)
vectorD.pop_back = new_instancemethod(_pyBasePython.vectorD_pop_back,None,vectorD)
vectorD.erase = new_instancemethod(_pyBasePython.vectorD_erase,None,vectorD)
vectorD.push_back = new_instancemethod(_pyBasePython.vectorD_push_back,None,vectorD)
vectorD.front = new_instancemethod(_pyBasePython.vectorD_front,None,vectorD)
vectorD.back = new_instancemethod(_pyBasePython.vectorD_back,None,vectorD)
vectorD.assign = new_instancemethod(_pyBasePython.vectorD_assign,None,vectorD)
vectorD.resize = new_instancemethod(_pyBasePython.vectorD_resize,None,vectorD)
vectorD.insert = new_instancemethod(_pyBasePython.vectorD_insert,None,vectorD)
vectorD.reserve = new_instancemethod(_pyBasePython.vectorD_reserve,None,vectorD)
vectorD.capacity = new_instancemethod(_pyBasePython.vectorD_capacity,None,vectorD)
vectorD_swigregister = _pyBasePython.vectorD_swigregister
vectorD_swigregister(vectorD)

class vectorvectorD(object):
    """Proxy of C++ std::vector<(std::vector<(double)>)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.vectorvectorD_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.vectorvectorD___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.vectorvectorD___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.vectorvectorD___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.vectorvectorD_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorvectorD"""
        return _pyBasePython.vectorvectorD___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorvectorD v)"""
        return _pyBasePython.vectorvectorD___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.vectorvectorD___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.vectorvectorD___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorvectorD
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.vectorvectorD___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorvectorD v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.vectorvectorD___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.vectorvectorD_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.vectorvectorD_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.vectorvectorD_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.vectorvectorD_clear(self)

    def swap(self, *args):
        """swap(self, vectorvectorD v)"""
        return _pyBasePython.vectorvectorD_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.vectorvectorD_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.vectorvectorD_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.vectorvectorD_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorvectorD_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorvectorD_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.vectorvectorD_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.vectorvectorD_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorvectorD
        __init__(self, vectorvectorD arg0) -> vectorvectorD
        __init__(self, size_type size) -> vectorvectorD
        __init__(self, size_type size, value_type value) -> vectorvectorD
        """
        _pyBasePython.vectorvectorD_swiginit(self,_pyBasePython.new_vectorvectorD(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.vectorvectorD_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.vectorvectorD_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.vectorvectorD_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.vectorvectorD_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.vectorvectorD_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.vectorvectorD_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _pyBasePython.vectorvectorD_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _pyBasePython.vectorvectorD_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorvectorD
vectorvectorD.iterator = new_instancemethod(_pyBasePython.vectorvectorD_iterator,None,vectorvectorD)
vectorvectorD.__nonzero__ = new_instancemethod(_pyBasePython.vectorvectorD___nonzero__,None,vectorvectorD)
vectorvectorD.__bool__ = new_instancemethod(_pyBasePython.vectorvectorD___bool__,None,vectorvectorD)
vectorvectorD.__len__ = new_instancemethod(_pyBasePython.vectorvectorD___len__,None,vectorvectorD)
vectorvectorD.pop = new_instancemethod(_pyBasePython.vectorvectorD_pop,None,vectorvectorD)
vectorvectorD.__getslice__ = new_instancemethod(_pyBasePython.vectorvectorD___getslice__,None,vectorvectorD)
vectorvectorD.__setslice__ = new_instancemethod(_pyBasePython.vectorvectorD___setslice__,None,vectorvectorD)
vectorvectorD.__delslice__ = new_instancemethod(_pyBasePython.vectorvectorD___delslice__,None,vectorvectorD)
vectorvectorD.__delitem__ = new_instancemethod(_pyBasePython.vectorvectorD___delitem__,None,vectorvectorD)
vectorvectorD.__getitem__ = new_instancemethod(_pyBasePython.vectorvectorD___getitem__,None,vectorvectorD)
vectorvectorD.__setitem__ = new_instancemethod(_pyBasePython.vectorvectorD___setitem__,None,vectorvectorD)
vectorvectorD.append = new_instancemethod(_pyBasePython.vectorvectorD_append,None,vectorvectorD)
vectorvectorD.empty = new_instancemethod(_pyBasePython.vectorvectorD_empty,None,vectorvectorD)
vectorvectorD.size = new_instancemethod(_pyBasePython.vectorvectorD_size,None,vectorvectorD)
vectorvectorD.clear = new_instancemethod(_pyBasePython.vectorvectorD_clear,None,vectorvectorD)
vectorvectorD.swap = new_instancemethod(_pyBasePython.vectorvectorD_swap,None,vectorvectorD)
vectorvectorD.get_allocator = new_instancemethod(_pyBasePython.vectorvectorD_get_allocator,None,vectorvectorD)
vectorvectorD.begin = new_instancemethod(_pyBasePython.vectorvectorD_begin,None,vectorvectorD)
vectorvectorD.end = new_instancemethod(_pyBasePython.vectorvectorD_end,None,vectorvectorD)
vectorvectorD.rbegin = new_instancemethod(_pyBasePython.vectorvectorD_rbegin,None,vectorvectorD)
vectorvectorD.rend = new_instancemethod(_pyBasePython.vectorvectorD_rend,None,vectorvectorD)
vectorvectorD.pop_back = new_instancemethod(_pyBasePython.vectorvectorD_pop_back,None,vectorvectorD)
vectorvectorD.erase = new_instancemethod(_pyBasePython.vectorvectorD_erase,None,vectorvectorD)
vectorvectorD.push_back = new_instancemethod(_pyBasePython.vectorvectorD_push_back,None,vectorvectorD)
vectorvectorD.front = new_instancemethod(_pyBasePython.vectorvectorD_front,None,vectorvectorD)
vectorvectorD.back = new_instancemethod(_pyBasePython.vectorvectorD_back,None,vectorvectorD)
vectorvectorD.assign = new_instancemethod(_pyBasePython.vectorvectorD_assign,None,vectorvectorD)
vectorvectorD.resize = new_instancemethod(_pyBasePython.vectorvectorD_resize,None,vectorvectorD)
vectorvectorD.insert = new_instancemethod(_pyBasePython.vectorvectorD_insert,None,vectorvectorD)
vectorvectorD.reserve = new_instancemethod(_pyBasePython.vectorvectorD_reserve,None,vectorvectorD)
vectorvectorD.capacity = new_instancemethod(_pyBasePython.vectorvectorD_capacity,None,vectorvectorD)
vectorvectorD_swigregister = _pyBasePython.vectorvectorD_swigregister
vectorvectorD_swigregister(vectorvectorD)

class listUC(object):
    """Proxy of C++ std::list<(unsigned char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.listUC_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.listUC___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.listUC___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.listUC___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.listUC_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> listUC"""
        return _pyBasePython.listUC___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, listUC v)"""
        return _pyBasePython.listUC___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.listUC___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.listUC___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> listUC
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.listUC___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, listUC v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.listUC___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.listUC_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.listUC_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.listUC_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.listUC_clear(self)

    def swap(self, *args):
        """swap(self, listUC v)"""
        return _pyBasePython.listUC_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.listUC_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.listUC_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.listUC_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.listUC_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.listUC_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.listUC_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.listUC_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> listUC
        __init__(self, listUC arg0) -> listUC
        __init__(self, size_type size) -> listUC
        __init__(self, size_type size, value_type value) -> listUC
        """
        _pyBasePython.listUC_swiginit(self,_pyBasePython.new_listUC(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.listUC_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.listUC_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.listUC_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.listUC_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.listUC_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.listUC_insert(self, *args)

    def pop_front(self):
        """pop_front(self)"""
        return _pyBasePython.listUC_pop_front(self)

    def push_front(self, *args):
        """push_front(self, value_type x)"""
        return _pyBasePython.listUC_push_front(self, *args)

    def reverse(self):
        """reverse(self)"""
        return _pyBasePython.listUC_reverse(self)

    __swig_destroy__ = _pyBasePython.delete_listUC
listUC.iterator = new_instancemethod(_pyBasePython.listUC_iterator,None,listUC)
listUC.__nonzero__ = new_instancemethod(_pyBasePython.listUC___nonzero__,None,listUC)
listUC.__bool__ = new_instancemethod(_pyBasePython.listUC___bool__,None,listUC)
listUC.__len__ = new_instancemethod(_pyBasePython.listUC___len__,None,listUC)
listUC.pop = new_instancemethod(_pyBasePython.listUC_pop,None,listUC)
listUC.__getslice__ = new_instancemethod(_pyBasePython.listUC___getslice__,None,listUC)
listUC.__setslice__ = new_instancemethod(_pyBasePython.listUC___setslice__,None,listUC)
listUC.__delslice__ = new_instancemethod(_pyBasePython.listUC___delslice__,None,listUC)
listUC.__delitem__ = new_instancemethod(_pyBasePython.listUC___delitem__,None,listUC)
listUC.__getitem__ = new_instancemethod(_pyBasePython.listUC___getitem__,None,listUC)
listUC.__setitem__ = new_instancemethod(_pyBasePython.listUC___setitem__,None,listUC)
listUC.append = new_instancemethod(_pyBasePython.listUC_append,None,listUC)
listUC.empty = new_instancemethod(_pyBasePython.listUC_empty,None,listUC)
listUC.size = new_instancemethod(_pyBasePython.listUC_size,None,listUC)
listUC.clear = new_instancemethod(_pyBasePython.listUC_clear,None,listUC)
listUC.swap = new_instancemethod(_pyBasePython.listUC_swap,None,listUC)
listUC.get_allocator = new_instancemethod(_pyBasePython.listUC_get_allocator,None,listUC)
listUC.begin = new_instancemethod(_pyBasePython.listUC_begin,None,listUC)
listUC.end = new_instancemethod(_pyBasePython.listUC_end,None,listUC)
listUC.rbegin = new_instancemethod(_pyBasePython.listUC_rbegin,None,listUC)
listUC.rend = new_instancemethod(_pyBasePython.listUC_rend,None,listUC)
listUC.pop_back = new_instancemethod(_pyBasePython.listUC_pop_back,None,listUC)
listUC.erase = new_instancemethod(_pyBasePython.listUC_erase,None,listUC)
listUC.push_back = new_instancemethod(_pyBasePython.listUC_push_back,None,listUC)
listUC.front = new_instancemethod(_pyBasePython.listUC_front,None,listUC)
listUC.back = new_instancemethod(_pyBasePython.listUC_back,None,listUC)
listUC.assign = new_instancemethod(_pyBasePython.listUC_assign,None,listUC)
listUC.resize = new_instancemethod(_pyBasePython.listUC_resize,None,listUC)
listUC.insert = new_instancemethod(_pyBasePython.listUC_insert,None,listUC)
listUC.pop_front = new_instancemethod(_pyBasePython.listUC_pop_front,None,listUC)
listUC.push_front = new_instancemethod(_pyBasePython.listUC_push_front,None,listUC)
listUC.reverse = new_instancemethod(_pyBasePython.listUC_reverse,None,listUC)
listUC_swigregister = _pyBasePython.listUC_swigregister
listUC_swigregister(listUC)

class listUS(object):
    """Proxy of C++ std::list<(unsigned short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.listUS_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.listUS___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.listUS___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.listUS___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.listUS_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> listUS"""
        return _pyBasePython.listUS___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, listUS v)"""
        return _pyBasePython.listUS___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.listUS___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.listUS___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> listUS
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.listUS___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, listUS v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.listUS___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.listUS_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.listUS_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.listUS_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.listUS_clear(self)

    def swap(self, *args):
        """swap(self, listUS v)"""
        return _pyBasePython.listUS_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.listUS_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.listUS_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.listUS_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.listUS_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.listUS_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.listUS_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.listUS_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> listUS
        __init__(self, listUS arg0) -> listUS
        __init__(self, size_type size) -> listUS
        __init__(self, size_type size, value_type value) -> listUS
        """
        _pyBasePython.listUS_swiginit(self,_pyBasePython.new_listUS(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.listUS_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.listUS_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.listUS_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.listUS_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.listUS_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.listUS_insert(self, *args)

    def pop_front(self):
        """pop_front(self)"""
        return _pyBasePython.listUS_pop_front(self)

    def push_front(self, *args):
        """push_front(self, value_type x)"""
        return _pyBasePython.listUS_push_front(self, *args)

    def reverse(self):
        """reverse(self)"""
        return _pyBasePython.listUS_reverse(self)

    __swig_destroy__ = _pyBasePython.delete_listUS
listUS.iterator = new_instancemethod(_pyBasePython.listUS_iterator,None,listUS)
listUS.__nonzero__ = new_instancemethod(_pyBasePython.listUS___nonzero__,None,listUS)
listUS.__bool__ = new_instancemethod(_pyBasePython.listUS___bool__,None,listUS)
listUS.__len__ = new_instancemethod(_pyBasePython.listUS___len__,None,listUS)
listUS.pop = new_instancemethod(_pyBasePython.listUS_pop,None,listUS)
listUS.__getslice__ = new_instancemethod(_pyBasePython.listUS___getslice__,None,listUS)
listUS.__setslice__ = new_instancemethod(_pyBasePython.listUS___setslice__,None,listUS)
listUS.__delslice__ = new_instancemethod(_pyBasePython.listUS___delslice__,None,listUS)
listUS.__delitem__ = new_instancemethod(_pyBasePython.listUS___delitem__,None,listUS)
listUS.__getitem__ = new_instancemethod(_pyBasePython.listUS___getitem__,None,listUS)
listUS.__setitem__ = new_instancemethod(_pyBasePython.listUS___setitem__,None,listUS)
listUS.append = new_instancemethod(_pyBasePython.listUS_append,None,listUS)
listUS.empty = new_instancemethod(_pyBasePython.listUS_empty,None,listUS)
listUS.size = new_instancemethod(_pyBasePython.listUS_size,None,listUS)
listUS.clear = new_instancemethod(_pyBasePython.listUS_clear,None,listUS)
listUS.swap = new_instancemethod(_pyBasePython.listUS_swap,None,listUS)
listUS.get_allocator = new_instancemethod(_pyBasePython.listUS_get_allocator,None,listUS)
listUS.begin = new_instancemethod(_pyBasePython.listUS_begin,None,listUS)
listUS.end = new_instancemethod(_pyBasePython.listUS_end,None,listUS)
listUS.rbegin = new_instancemethod(_pyBasePython.listUS_rbegin,None,listUS)
listUS.rend = new_instancemethod(_pyBasePython.listUS_rend,None,listUS)
listUS.pop_back = new_instancemethod(_pyBasePython.listUS_pop_back,None,listUS)
listUS.erase = new_instancemethod(_pyBasePython.listUS_erase,None,listUS)
listUS.push_back = new_instancemethod(_pyBasePython.listUS_push_back,None,listUS)
listUS.front = new_instancemethod(_pyBasePython.listUS_front,None,listUS)
listUS.back = new_instancemethod(_pyBasePython.listUS_back,None,listUS)
listUS.assign = new_instancemethod(_pyBasePython.listUS_assign,None,listUS)
listUS.resize = new_instancemethod(_pyBasePython.listUS_resize,None,listUS)
listUS.insert = new_instancemethod(_pyBasePython.listUS_insert,None,listUS)
listUS.pop_front = new_instancemethod(_pyBasePython.listUS_pop_front,None,listUS)
listUS.push_front = new_instancemethod(_pyBasePython.listUS_push_front,None,listUS)
listUS.reverse = new_instancemethod(_pyBasePython.listUS_reverse,None,listUS)
listUS_swigregister = _pyBasePython.listUS_swigregister
listUS_swigregister(listUS)

class listUL(object):
    """Proxy of C++ std::list<(unsigned long)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.listUL_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.listUL___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.listUL___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.listUL___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.listUL_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> listUL"""
        return _pyBasePython.listUL___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, listUL v)"""
        return _pyBasePython.listUL___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.listUL___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.listUL___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> listUL
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.listUL___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, listUL v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.listUL___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.listUL_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.listUL_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.listUL_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.listUL_clear(self)

    def swap(self, *args):
        """swap(self, listUL v)"""
        return _pyBasePython.listUL_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.listUL_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.listUL_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.listUL_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.listUL_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.listUL_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.listUL_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.listUL_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> listUL
        __init__(self, listUL arg0) -> listUL
        __init__(self, size_type size) -> listUL
        __init__(self, size_type size, value_type value) -> listUL
        """
        _pyBasePython.listUL_swiginit(self,_pyBasePython.new_listUL(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.listUL_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.listUL_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.listUL_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.listUL_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.listUL_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.listUL_insert(self, *args)

    def pop_front(self):
        """pop_front(self)"""
        return _pyBasePython.listUL_pop_front(self)

    def push_front(self, *args):
        """push_front(self, value_type x)"""
        return _pyBasePython.listUL_push_front(self, *args)

    def reverse(self):
        """reverse(self)"""
        return _pyBasePython.listUL_reverse(self)

    __swig_destroy__ = _pyBasePython.delete_listUL
listUL.iterator = new_instancemethod(_pyBasePython.listUL_iterator,None,listUL)
listUL.__nonzero__ = new_instancemethod(_pyBasePython.listUL___nonzero__,None,listUL)
listUL.__bool__ = new_instancemethod(_pyBasePython.listUL___bool__,None,listUL)
listUL.__len__ = new_instancemethod(_pyBasePython.listUL___len__,None,listUL)
listUL.pop = new_instancemethod(_pyBasePython.listUL_pop,None,listUL)
listUL.__getslice__ = new_instancemethod(_pyBasePython.listUL___getslice__,None,listUL)
listUL.__setslice__ = new_instancemethod(_pyBasePython.listUL___setslice__,None,listUL)
listUL.__delslice__ = new_instancemethod(_pyBasePython.listUL___delslice__,None,listUL)
listUL.__delitem__ = new_instancemethod(_pyBasePython.listUL___delitem__,None,listUL)
listUL.__getitem__ = new_instancemethod(_pyBasePython.listUL___getitem__,None,listUL)
listUL.__setitem__ = new_instancemethod(_pyBasePython.listUL___setitem__,None,listUL)
listUL.append = new_instancemethod(_pyBasePython.listUL_append,None,listUL)
listUL.empty = new_instancemethod(_pyBasePython.listUL_empty,None,listUL)
listUL.size = new_instancemethod(_pyBasePython.listUL_size,None,listUL)
listUL.clear = new_instancemethod(_pyBasePython.listUL_clear,None,listUL)
listUL.swap = new_instancemethod(_pyBasePython.listUL_swap,None,listUL)
listUL.get_allocator = new_instancemethod(_pyBasePython.listUL_get_allocator,None,listUL)
listUL.begin = new_instancemethod(_pyBasePython.listUL_begin,None,listUL)
listUL.end = new_instancemethod(_pyBasePython.listUL_end,None,listUL)
listUL.rbegin = new_instancemethod(_pyBasePython.listUL_rbegin,None,listUL)
listUL.rend = new_instancemethod(_pyBasePython.listUL_rend,None,listUL)
listUL.pop_back = new_instancemethod(_pyBasePython.listUL_pop_back,None,listUL)
listUL.erase = new_instancemethod(_pyBasePython.listUL_erase,None,listUL)
listUL.push_back = new_instancemethod(_pyBasePython.listUL_push_back,None,listUL)
listUL.front = new_instancemethod(_pyBasePython.listUL_front,None,listUL)
listUL.back = new_instancemethod(_pyBasePython.listUL_back,None,listUL)
listUL.assign = new_instancemethod(_pyBasePython.listUL_assign,None,listUL)
listUL.resize = new_instancemethod(_pyBasePython.listUL_resize,None,listUL)
listUL.insert = new_instancemethod(_pyBasePython.listUL_insert,None,listUL)
listUL.pop_front = new_instancemethod(_pyBasePython.listUL_pop_front,None,listUL)
listUL.push_front = new_instancemethod(_pyBasePython.listUL_push_front,None,listUL)
listUL.reverse = new_instancemethod(_pyBasePython.listUL_reverse,None,listUL)
listUL_swigregister = _pyBasePython.listUL_swigregister
listUL_swigregister(listUL)

class listSC(object):
    """Proxy of C++ std::list<(signed char)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.listSC_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.listSC___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.listSC___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.listSC___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.listSC_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> listSC"""
        return _pyBasePython.listSC___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, listSC v)"""
        return _pyBasePython.listSC___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.listSC___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.listSC___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> listSC
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.listSC___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, listSC v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.listSC___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.listSC_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.listSC_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.listSC_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.listSC_clear(self)

    def swap(self, *args):
        """swap(self, listSC v)"""
        return _pyBasePython.listSC_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.listSC_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.listSC_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.listSC_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.listSC_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.listSC_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.listSC_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.listSC_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> listSC
        __init__(self, listSC arg0) -> listSC
        __init__(self, size_type size) -> listSC
        __init__(self, size_type size, value_type value) -> listSC
        """
        _pyBasePython.listSC_swiginit(self,_pyBasePython.new_listSC(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.listSC_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.listSC_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.listSC_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.listSC_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.listSC_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.listSC_insert(self, *args)

    def pop_front(self):
        """pop_front(self)"""
        return _pyBasePython.listSC_pop_front(self)

    def push_front(self, *args):
        """push_front(self, value_type x)"""
        return _pyBasePython.listSC_push_front(self, *args)

    def reverse(self):
        """reverse(self)"""
        return _pyBasePython.listSC_reverse(self)

    __swig_destroy__ = _pyBasePython.delete_listSC
listSC.iterator = new_instancemethod(_pyBasePython.listSC_iterator,None,listSC)
listSC.__nonzero__ = new_instancemethod(_pyBasePython.listSC___nonzero__,None,listSC)
listSC.__bool__ = new_instancemethod(_pyBasePython.listSC___bool__,None,listSC)
listSC.__len__ = new_instancemethod(_pyBasePython.listSC___len__,None,listSC)
listSC.pop = new_instancemethod(_pyBasePython.listSC_pop,None,listSC)
listSC.__getslice__ = new_instancemethod(_pyBasePython.listSC___getslice__,None,listSC)
listSC.__setslice__ = new_instancemethod(_pyBasePython.listSC___setslice__,None,listSC)
listSC.__delslice__ = new_instancemethod(_pyBasePython.listSC___delslice__,None,listSC)
listSC.__delitem__ = new_instancemethod(_pyBasePython.listSC___delitem__,None,listSC)
listSC.__getitem__ = new_instancemethod(_pyBasePython.listSC___getitem__,None,listSC)
listSC.__setitem__ = new_instancemethod(_pyBasePython.listSC___setitem__,None,listSC)
listSC.append = new_instancemethod(_pyBasePython.listSC_append,None,listSC)
listSC.empty = new_instancemethod(_pyBasePython.listSC_empty,None,listSC)
listSC.size = new_instancemethod(_pyBasePython.listSC_size,None,listSC)
listSC.clear = new_instancemethod(_pyBasePython.listSC_clear,None,listSC)
listSC.swap = new_instancemethod(_pyBasePython.listSC_swap,None,listSC)
listSC.get_allocator = new_instancemethod(_pyBasePython.listSC_get_allocator,None,listSC)
listSC.begin = new_instancemethod(_pyBasePython.listSC_begin,None,listSC)
listSC.end = new_instancemethod(_pyBasePython.listSC_end,None,listSC)
listSC.rbegin = new_instancemethod(_pyBasePython.listSC_rbegin,None,listSC)
listSC.rend = new_instancemethod(_pyBasePython.listSC_rend,None,listSC)
listSC.pop_back = new_instancemethod(_pyBasePython.listSC_pop_back,None,listSC)
listSC.erase = new_instancemethod(_pyBasePython.listSC_erase,None,listSC)
listSC.push_back = new_instancemethod(_pyBasePython.listSC_push_back,None,listSC)
listSC.front = new_instancemethod(_pyBasePython.listSC_front,None,listSC)
listSC.back = new_instancemethod(_pyBasePython.listSC_back,None,listSC)
listSC.assign = new_instancemethod(_pyBasePython.listSC_assign,None,listSC)
listSC.resize = new_instancemethod(_pyBasePython.listSC_resize,None,listSC)
listSC.insert = new_instancemethod(_pyBasePython.listSC_insert,None,listSC)
listSC.pop_front = new_instancemethod(_pyBasePython.listSC_pop_front,None,listSC)
listSC.push_front = new_instancemethod(_pyBasePython.listSC_push_front,None,listSC)
listSC.reverse = new_instancemethod(_pyBasePython.listSC_reverse,None,listSC)
listSC_swigregister = _pyBasePython.listSC_swigregister
listSC_swigregister(listSC)

class listSS(object):
    """Proxy of C++ std::list<(short)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.listSS_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.listSS___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.listSS___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.listSS___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.listSS_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> listSS"""
        return _pyBasePython.listSS___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, listSS v)"""
        return _pyBasePython.listSS___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.listSS___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.listSS___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> listSS
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.listSS___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, listSS v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.listSS___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.listSS_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.listSS_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.listSS_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.listSS_clear(self)

    def swap(self, *args):
        """swap(self, listSS v)"""
        return _pyBasePython.listSS_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.listSS_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.listSS_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.listSS_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.listSS_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.listSS_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.listSS_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.listSS_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> listSS
        __init__(self, listSS arg0) -> listSS
        __init__(self, size_type size) -> listSS
        __init__(self, size_type size, value_type value) -> listSS
        """
        _pyBasePython.listSS_swiginit(self,_pyBasePython.new_listSS(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.listSS_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.listSS_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.listSS_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.listSS_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.listSS_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.listSS_insert(self, *args)

    def pop_front(self):
        """pop_front(self)"""
        return _pyBasePython.listSS_pop_front(self)

    def push_front(self, *args):
        """push_front(self, value_type x)"""
        return _pyBasePython.listSS_push_front(self, *args)

    def reverse(self):
        """reverse(self)"""
        return _pyBasePython.listSS_reverse(self)

    __swig_destroy__ = _pyBasePython.delete_listSS
listSS.iterator = new_instancemethod(_pyBasePython.listSS_iterator,None,listSS)
listSS.__nonzero__ = new_instancemethod(_pyBasePython.listSS___nonzero__,None,listSS)
listSS.__bool__ = new_instancemethod(_pyBasePython.listSS___bool__,None,listSS)
listSS.__len__ = new_instancemethod(_pyBasePython.listSS___len__,None,listSS)
listSS.pop = new_instancemethod(_pyBasePython.listSS_pop,None,listSS)
listSS.__getslice__ = new_instancemethod(_pyBasePython.listSS___getslice__,None,listSS)
listSS.__setslice__ = new_instancemethod(_pyBasePython.listSS___setslice__,None,listSS)
listSS.__delslice__ = new_instancemethod(_pyBasePython.listSS___delslice__,None,listSS)
listSS.__delitem__ = new_instancemethod(_pyBasePython.listSS___delitem__,None,listSS)
listSS.__getitem__ = new_instancemethod(_pyBasePython.listSS___getitem__,None,listSS)
listSS.__setitem__ = new_instancemethod(_pyBasePython.listSS___setitem__,None,listSS)
listSS.append = new_instancemethod(_pyBasePython.listSS_append,None,listSS)
listSS.empty = new_instancemethod(_pyBasePython.listSS_empty,None,listSS)
listSS.size = new_instancemethod(_pyBasePython.listSS_size,None,listSS)
listSS.clear = new_instancemethod(_pyBasePython.listSS_clear,None,listSS)
listSS.swap = new_instancemethod(_pyBasePython.listSS_swap,None,listSS)
listSS.get_allocator = new_instancemethod(_pyBasePython.listSS_get_allocator,None,listSS)
listSS.begin = new_instancemethod(_pyBasePython.listSS_begin,None,listSS)
listSS.end = new_instancemethod(_pyBasePython.listSS_end,None,listSS)
listSS.rbegin = new_instancemethod(_pyBasePython.listSS_rbegin,None,listSS)
listSS.rend = new_instancemethod(_pyBasePython.listSS_rend,None,listSS)
listSS.pop_back = new_instancemethod(_pyBasePython.listSS_pop_back,None,listSS)
listSS.erase = new_instancemethod(_pyBasePython.listSS_erase,None,listSS)
listSS.push_back = new_instancemethod(_pyBasePython.listSS_push_back,None,listSS)
listSS.front = new_instancemethod(_pyBasePython.listSS_front,None,listSS)
listSS.back = new_instancemethod(_pyBasePython.listSS_back,None,listSS)
listSS.assign = new_instancemethod(_pyBasePython.listSS_assign,None,listSS)
listSS.resize = new_instancemethod(_pyBasePython.listSS_resize,None,listSS)
listSS.insert = new_instancemethod(_pyBasePython.listSS_insert,None,listSS)
listSS.pop_front = new_instancemethod(_pyBasePython.listSS_pop_front,None,listSS)
listSS.push_front = new_instancemethod(_pyBasePython.listSS_push_front,None,listSS)
listSS.reverse = new_instancemethod(_pyBasePython.listSS_reverse,None,listSS)
listSS_swigregister = _pyBasePython.listSS_swigregister
listSS_swigregister(listSS)

class listSL(object):
    """Proxy of C++ std::list<(long)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.listSL_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.listSL___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.listSL___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.listSL___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.listSL_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> listSL"""
        return _pyBasePython.listSL___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, listSL v)"""
        return _pyBasePython.listSL___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.listSL___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.listSL___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> listSL
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.listSL___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, listSL v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.listSL___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.listSL_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.listSL_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.listSL_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.listSL_clear(self)

    def swap(self, *args):
        """swap(self, listSL v)"""
        return _pyBasePython.listSL_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.listSL_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.listSL_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.listSL_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.listSL_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.listSL_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.listSL_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.listSL_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> listSL
        __init__(self, listSL arg0) -> listSL
        __init__(self, size_type size) -> listSL
        __init__(self, size_type size, value_type value) -> listSL
        """
        _pyBasePython.listSL_swiginit(self,_pyBasePython.new_listSL(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.listSL_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.listSL_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.listSL_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.listSL_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.listSL_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.listSL_insert(self, *args)

    def pop_front(self):
        """pop_front(self)"""
        return _pyBasePython.listSL_pop_front(self)

    def push_front(self, *args):
        """push_front(self, value_type x)"""
        return _pyBasePython.listSL_push_front(self, *args)

    def reverse(self):
        """reverse(self)"""
        return _pyBasePython.listSL_reverse(self)

    __swig_destroy__ = _pyBasePython.delete_listSL
listSL.iterator = new_instancemethod(_pyBasePython.listSL_iterator,None,listSL)
listSL.__nonzero__ = new_instancemethod(_pyBasePython.listSL___nonzero__,None,listSL)
listSL.__bool__ = new_instancemethod(_pyBasePython.listSL___bool__,None,listSL)
listSL.__len__ = new_instancemethod(_pyBasePython.listSL___len__,None,listSL)
listSL.pop = new_instancemethod(_pyBasePython.listSL_pop,None,listSL)
listSL.__getslice__ = new_instancemethod(_pyBasePython.listSL___getslice__,None,listSL)
listSL.__setslice__ = new_instancemethod(_pyBasePython.listSL___setslice__,None,listSL)
listSL.__delslice__ = new_instancemethod(_pyBasePython.listSL___delslice__,None,listSL)
listSL.__delitem__ = new_instancemethod(_pyBasePython.listSL___delitem__,None,listSL)
listSL.__getitem__ = new_instancemethod(_pyBasePython.listSL___getitem__,None,listSL)
listSL.__setitem__ = new_instancemethod(_pyBasePython.listSL___setitem__,None,listSL)
listSL.append = new_instancemethod(_pyBasePython.listSL_append,None,listSL)
listSL.empty = new_instancemethod(_pyBasePython.listSL_empty,None,listSL)
listSL.size = new_instancemethod(_pyBasePython.listSL_size,None,listSL)
listSL.clear = new_instancemethod(_pyBasePython.listSL_clear,None,listSL)
listSL.swap = new_instancemethod(_pyBasePython.listSL_swap,None,listSL)
listSL.get_allocator = new_instancemethod(_pyBasePython.listSL_get_allocator,None,listSL)
listSL.begin = new_instancemethod(_pyBasePython.listSL_begin,None,listSL)
listSL.end = new_instancemethod(_pyBasePython.listSL_end,None,listSL)
listSL.rbegin = new_instancemethod(_pyBasePython.listSL_rbegin,None,listSL)
listSL.rend = new_instancemethod(_pyBasePython.listSL_rend,None,listSL)
listSL.pop_back = new_instancemethod(_pyBasePython.listSL_pop_back,None,listSL)
listSL.erase = new_instancemethod(_pyBasePython.listSL_erase,None,listSL)
listSL.push_back = new_instancemethod(_pyBasePython.listSL_push_back,None,listSL)
listSL.front = new_instancemethod(_pyBasePython.listSL_front,None,listSL)
listSL.back = new_instancemethod(_pyBasePython.listSL_back,None,listSL)
listSL.assign = new_instancemethod(_pyBasePython.listSL_assign,None,listSL)
listSL.resize = new_instancemethod(_pyBasePython.listSL_resize,None,listSL)
listSL.insert = new_instancemethod(_pyBasePython.listSL_insert,None,listSL)
listSL.pop_front = new_instancemethod(_pyBasePython.listSL_pop_front,None,listSL)
listSL.push_front = new_instancemethod(_pyBasePython.listSL_push_front,None,listSL)
listSL.reverse = new_instancemethod(_pyBasePython.listSL_reverse,None,listSL)
listSL_swigregister = _pyBasePython.listSL_swigregister
listSL_swigregister(listSL)

class listF(object):
    """Proxy of C++ std::list<(float)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.listF_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.listF___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.listF___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.listF___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.listF_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> listF"""
        return _pyBasePython.listF___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, listF v)"""
        return _pyBasePython.listF___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.listF___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.listF___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> listF
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.listF___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, listF v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.listF___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.listF_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.listF_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.listF_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.listF_clear(self)

    def swap(self, *args):
        """swap(self, listF v)"""
        return _pyBasePython.listF_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.listF_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.listF_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.listF_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.listF_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.listF_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.listF_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.listF_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> listF
        __init__(self, listF arg0) -> listF
        __init__(self, size_type size) -> listF
        __init__(self, size_type size, value_type value) -> listF
        """
        _pyBasePython.listF_swiginit(self,_pyBasePython.new_listF(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.listF_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.listF_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.listF_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.listF_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.listF_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.listF_insert(self, *args)

    def pop_front(self):
        """pop_front(self)"""
        return _pyBasePython.listF_pop_front(self)

    def push_front(self, *args):
        """push_front(self, value_type x)"""
        return _pyBasePython.listF_push_front(self, *args)

    def reverse(self):
        """reverse(self)"""
        return _pyBasePython.listF_reverse(self)

    __swig_destroy__ = _pyBasePython.delete_listF
listF.iterator = new_instancemethod(_pyBasePython.listF_iterator,None,listF)
listF.__nonzero__ = new_instancemethod(_pyBasePython.listF___nonzero__,None,listF)
listF.__bool__ = new_instancemethod(_pyBasePython.listF___bool__,None,listF)
listF.__len__ = new_instancemethod(_pyBasePython.listF___len__,None,listF)
listF.pop = new_instancemethod(_pyBasePython.listF_pop,None,listF)
listF.__getslice__ = new_instancemethod(_pyBasePython.listF___getslice__,None,listF)
listF.__setslice__ = new_instancemethod(_pyBasePython.listF___setslice__,None,listF)
listF.__delslice__ = new_instancemethod(_pyBasePython.listF___delslice__,None,listF)
listF.__delitem__ = new_instancemethod(_pyBasePython.listF___delitem__,None,listF)
listF.__getitem__ = new_instancemethod(_pyBasePython.listF___getitem__,None,listF)
listF.__setitem__ = new_instancemethod(_pyBasePython.listF___setitem__,None,listF)
listF.append = new_instancemethod(_pyBasePython.listF_append,None,listF)
listF.empty = new_instancemethod(_pyBasePython.listF_empty,None,listF)
listF.size = new_instancemethod(_pyBasePython.listF_size,None,listF)
listF.clear = new_instancemethod(_pyBasePython.listF_clear,None,listF)
listF.swap = new_instancemethod(_pyBasePython.listF_swap,None,listF)
listF.get_allocator = new_instancemethod(_pyBasePython.listF_get_allocator,None,listF)
listF.begin = new_instancemethod(_pyBasePython.listF_begin,None,listF)
listF.end = new_instancemethod(_pyBasePython.listF_end,None,listF)
listF.rbegin = new_instancemethod(_pyBasePython.listF_rbegin,None,listF)
listF.rend = new_instancemethod(_pyBasePython.listF_rend,None,listF)
listF.pop_back = new_instancemethod(_pyBasePython.listF_pop_back,None,listF)
listF.erase = new_instancemethod(_pyBasePython.listF_erase,None,listF)
listF.push_back = new_instancemethod(_pyBasePython.listF_push_back,None,listF)
listF.front = new_instancemethod(_pyBasePython.listF_front,None,listF)
listF.back = new_instancemethod(_pyBasePython.listF_back,None,listF)
listF.assign = new_instancemethod(_pyBasePython.listF_assign,None,listF)
listF.resize = new_instancemethod(_pyBasePython.listF_resize,None,listF)
listF.insert = new_instancemethod(_pyBasePython.listF_insert,None,listF)
listF.pop_front = new_instancemethod(_pyBasePython.listF_pop_front,None,listF)
listF.push_front = new_instancemethod(_pyBasePython.listF_push_front,None,listF)
listF.reverse = new_instancemethod(_pyBasePython.listF_reverse,None,listF)
listF_swigregister = _pyBasePython.listF_swigregister
listF_swigregister(listF)

class listD(object):
    """Proxy of C++ std::list<(double)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.listD_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.listD___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.listD___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.listD___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.listD_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> listD"""
        return _pyBasePython.listD___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, listD v)"""
        return _pyBasePython.listD___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.listD___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.listD___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> listD
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.listD___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, listD v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.listD___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.listD_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.listD_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.listD_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.listD_clear(self)

    def swap(self, *args):
        """swap(self, listD v)"""
        return _pyBasePython.listD_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.listD_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.listD_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.listD_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.listD_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.listD_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.listD_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.listD_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> listD
        __init__(self, listD arg0) -> listD
        __init__(self, size_type size) -> listD
        __init__(self, size_type size, value_type value) -> listD
        """
        _pyBasePython.listD_swiginit(self,_pyBasePython.new_listD(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.listD_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.listD_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.listD_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.listD_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.listD_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.listD_insert(self, *args)

    def pop_front(self):
        """pop_front(self)"""
        return _pyBasePython.listD_pop_front(self)

    def push_front(self, *args):
        """push_front(self, value_type x)"""
        return _pyBasePython.listD_push_front(self, *args)

    def reverse(self):
        """reverse(self)"""
        return _pyBasePython.listD_reverse(self)

    __swig_destroy__ = _pyBasePython.delete_listD
listD.iterator = new_instancemethod(_pyBasePython.listD_iterator,None,listD)
listD.__nonzero__ = new_instancemethod(_pyBasePython.listD___nonzero__,None,listD)
listD.__bool__ = new_instancemethod(_pyBasePython.listD___bool__,None,listD)
listD.__len__ = new_instancemethod(_pyBasePython.listD___len__,None,listD)
listD.pop = new_instancemethod(_pyBasePython.listD_pop,None,listD)
listD.__getslice__ = new_instancemethod(_pyBasePython.listD___getslice__,None,listD)
listD.__setslice__ = new_instancemethod(_pyBasePython.listD___setslice__,None,listD)
listD.__delslice__ = new_instancemethod(_pyBasePython.listD___delslice__,None,listD)
listD.__delitem__ = new_instancemethod(_pyBasePython.listD___delitem__,None,listD)
listD.__getitem__ = new_instancemethod(_pyBasePython.listD___getitem__,None,listD)
listD.__setitem__ = new_instancemethod(_pyBasePython.listD___setitem__,None,listD)
listD.append = new_instancemethod(_pyBasePython.listD_append,None,listD)
listD.empty = new_instancemethod(_pyBasePython.listD_empty,None,listD)
listD.size = new_instancemethod(_pyBasePython.listD_size,None,listD)
listD.clear = new_instancemethod(_pyBasePython.listD_clear,None,listD)
listD.swap = new_instancemethod(_pyBasePython.listD_swap,None,listD)
listD.get_allocator = new_instancemethod(_pyBasePython.listD_get_allocator,None,listD)
listD.begin = new_instancemethod(_pyBasePython.listD_begin,None,listD)
listD.end = new_instancemethod(_pyBasePython.listD_end,None,listD)
listD.rbegin = new_instancemethod(_pyBasePython.listD_rbegin,None,listD)
listD.rend = new_instancemethod(_pyBasePython.listD_rend,None,listD)
listD.pop_back = new_instancemethod(_pyBasePython.listD_pop_back,None,listD)
listD.erase = new_instancemethod(_pyBasePython.listD_erase,None,listD)
listD.push_back = new_instancemethod(_pyBasePython.listD_push_back,None,listD)
listD.front = new_instancemethod(_pyBasePython.listD_front,None,listD)
listD.back = new_instancemethod(_pyBasePython.listD_back,None,listD)
listD.assign = new_instancemethod(_pyBasePython.listD_assign,None,listD)
listD.resize = new_instancemethod(_pyBasePython.listD_resize,None,listD)
listD.insert = new_instancemethod(_pyBasePython.listD_insert,None,listD)
listD.pop_front = new_instancemethod(_pyBasePython.listD_pop_front,None,listD)
listD.push_front = new_instancemethod(_pyBasePython.listD_push_front,None,listD)
listD.reverse = new_instancemethod(_pyBasePython.listD_reverse,None,listD)
listD_swigregister = _pyBasePython.listD_swigregister
listD_swigregister(listD)

class setUC(object):
    """Proxy of C++ std::set<(unsigned char,std::less<(unsigned char)>)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.setUC_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.setUC___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.setUC___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.setUC___len__(self)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.setUC_append(self, *args)

    def __contains__(self, *args):
        """__contains__(self, value_type x) -> bool"""
        return _pyBasePython.setUC___contains__(self, *args)

    def __getitem__(self, *args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _pyBasePython.setUC___getitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(unsigned char)> arg0) -> setUC
        __init__(self) -> setUC
        __init__(self, setUC arg0) -> setUC
        """
        _pyBasePython.setUC_swiginit(self,_pyBasePython.new_setUC(*args))
    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.setUC_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.setUC_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.setUC_clear(self)

    def swap(self, *args):
        """swap(self, setUC v)"""
        return _pyBasePython.setUC_swap(self, *args)

    def count(self, *args):
        """count(self, key_type x) -> size_type"""
        return _pyBasePython.setUC_count(self, *args)

    def begin(self):
        """begin(self) -> iterator"""
        return _pyBasePython.setUC_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _pyBasePython.setUC_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _pyBasePython.setUC_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _pyBasePython.setUC_rend(self)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator pos)
        erase(self, iterator first, iterator last)
        """
        return _pyBasePython.setUC_erase(self, *args)

    def find(self, *args):
        """find(self, key_type x) -> iterator"""
        return _pyBasePython.setUC_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, key_type x) -> iterator"""
        return _pyBasePython.setUC_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, key_type x) -> iterator"""
        return _pyBasePython.setUC_upper_bound(self, *args)

    def equal_range(self, *args):
        """equal_range(self, key_type x) -> std::pair<(std::set<(unsigned char,std::less<(unsigned char)>)>::iterator,std::set<(unsigned char,std::less<(unsigned char)>)>::iterator)>"""
        return _pyBasePython.setUC_equal_range(self, *args)

    def insert(self, *args):
        """insert(self, value_type __x) -> std::pair<(std::set<(unsigned char,std::less<(unsigned char)>)>::iterator,bool)>"""
        return _pyBasePython.setUC_insert(self, *args)

    __swig_destroy__ = _pyBasePython.delete_setUC
setUC.iterator = new_instancemethod(_pyBasePython.setUC_iterator,None,setUC)
setUC.__nonzero__ = new_instancemethod(_pyBasePython.setUC___nonzero__,None,setUC)
setUC.__bool__ = new_instancemethod(_pyBasePython.setUC___bool__,None,setUC)
setUC.__len__ = new_instancemethod(_pyBasePython.setUC___len__,None,setUC)
setUC.append = new_instancemethod(_pyBasePython.setUC_append,None,setUC)
setUC.__contains__ = new_instancemethod(_pyBasePython.setUC___contains__,None,setUC)
setUC.__getitem__ = new_instancemethod(_pyBasePython.setUC___getitem__,None,setUC)
setUC.empty = new_instancemethod(_pyBasePython.setUC_empty,None,setUC)
setUC.size = new_instancemethod(_pyBasePython.setUC_size,None,setUC)
setUC.clear = new_instancemethod(_pyBasePython.setUC_clear,None,setUC)
setUC.swap = new_instancemethod(_pyBasePython.setUC_swap,None,setUC)
setUC.count = new_instancemethod(_pyBasePython.setUC_count,None,setUC)
setUC.begin = new_instancemethod(_pyBasePython.setUC_begin,None,setUC)
setUC.end = new_instancemethod(_pyBasePython.setUC_end,None,setUC)
setUC.rbegin = new_instancemethod(_pyBasePython.setUC_rbegin,None,setUC)
setUC.rend = new_instancemethod(_pyBasePython.setUC_rend,None,setUC)
setUC.erase = new_instancemethod(_pyBasePython.setUC_erase,None,setUC)
setUC.find = new_instancemethod(_pyBasePython.setUC_find,None,setUC)
setUC.lower_bound = new_instancemethod(_pyBasePython.setUC_lower_bound,None,setUC)
setUC.upper_bound = new_instancemethod(_pyBasePython.setUC_upper_bound,None,setUC)
setUC.equal_range = new_instancemethod(_pyBasePython.setUC_equal_range,None,setUC)
setUC.insert = new_instancemethod(_pyBasePython.setUC_insert,None,setUC)
setUC_swigregister = _pyBasePython.setUC_swigregister
setUC_swigregister(setUC)

class setUS(object):
    """Proxy of C++ std::set<(unsigned short,std::less<(unsigned short)>)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.setUS_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.setUS___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.setUS___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.setUS___len__(self)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.setUS_append(self, *args)

    def __contains__(self, *args):
        """__contains__(self, value_type x) -> bool"""
        return _pyBasePython.setUS___contains__(self, *args)

    def __getitem__(self, *args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _pyBasePython.setUS___getitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(unsigned short)> arg0) -> setUS
        __init__(self) -> setUS
        __init__(self, setUS arg0) -> setUS
        """
        _pyBasePython.setUS_swiginit(self,_pyBasePython.new_setUS(*args))
    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.setUS_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.setUS_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.setUS_clear(self)

    def swap(self, *args):
        """swap(self, setUS v)"""
        return _pyBasePython.setUS_swap(self, *args)

    def count(self, *args):
        """count(self, key_type x) -> size_type"""
        return _pyBasePython.setUS_count(self, *args)

    def begin(self):
        """begin(self) -> iterator"""
        return _pyBasePython.setUS_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _pyBasePython.setUS_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _pyBasePython.setUS_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _pyBasePython.setUS_rend(self)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator pos)
        erase(self, iterator first, iterator last)
        """
        return _pyBasePython.setUS_erase(self, *args)

    def find(self, *args):
        """find(self, key_type x) -> iterator"""
        return _pyBasePython.setUS_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, key_type x) -> iterator"""
        return _pyBasePython.setUS_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, key_type x) -> iterator"""
        return _pyBasePython.setUS_upper_bound(self, *args)

    def equal_range(self, *args):
        """equal_range(self, key_type x) -> std::pair<(std::set<(unsigned short,std::less<(unsigned short)>)>::iterator,std::set<(unsigned short,std::less<(unsigned short)>)>::iterator)>"""
        return _pyBasePython.setUS_equal_range(self, *args)

    def insert(self, *args):
        """insert(self, value_type __x) -> std::pair<(std::set<(unsigned short,std::less<(unsigned short)>)>::iterator,bool)>"""
        return _pyBasePython.setUS_insert(self, *args)

    __swig_destroy__ = _pyBasePython.delete_setUS
setUS.iterator = new_instancemethod(_pyBasePython.setUS_iterator,None,setUS)
setUS.__nonzero__ = new_instancemethod(_pyBasePython.setUS___nonzero__,None,setUS)
setUS.__bool__ = new_instancemethod(_pyBasePython.setUS___bool__,None,setUS)
setUS.__len__ = new_instancemethod(_pyBasePython.setUS___len__,None,setUS)
setUS.append = new_instancemethod(_pyBasePython.setUS_append,None,setUS)
setUS.__contains__ = new_instancemethod(_pyBasePython.setUS___contains__,None,setUS)
setUS.__getitem__ = new_instancemethod(_pyBasePython.setUS___getitem__,None,setUS)
setUS.empty = new_instancemethod(_pyBasePython.setUS_empty,None,setUS)
setUS.size = new_instancemethod(_pyBasePython.setUS_size,None,setUS)
setUS.clear = new_instancemethod(_pyBasePython.setUS_clear,None,setUS)
setUS.swap = new_instancemethod(_pyBasePython.setUS_swap,None,setUS)
setUS.count = new_instancemethod(_pyBasePython.setUS_count,None,setUS)
setUS.begin = new_instancemethod(_pyBasePython.setUS_begin,None,setUS)
setUS.end = new_instancemethod(_pyBasePython.setUS_end,None,setUS)
setUS.rbegin = new_instancemethod(_pyBasePython.setUS_rbegin,None,setUS)
setUS.rend = new_instancemethod(_pyBasePython.setUS_rend,None,setUS)
setUS.erase = new_instancemethod(_pyBasePython.setUS_erase,None,setUS)
setUS.find = new_instancemethod(_pyBasePython.setUS_find,None,setUS)
setUS.lower_bound = new_instancemethod(_pyBasePython.setUS_lower_bound,None,setUS)
setUS.upper_bound = new_instancemethod(_pyBasePython.setUS_upper_bound,None,setUS)
setUS.equal_range = new_instancemethod(_pyBasePython.setUS_equal_range,None,setUS)
setUS.insert = new_instancemethod(_pyBasePython.setUS_insert,None,setUS)
setUS_swigregister = _pyBasePython.setUS_swigregister
setUS_swigregister(setUS)

class setUL(object):
    """Proxy of C++ std::set<(unsigned long,std::less<(unsigned long)>)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.setUL_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.setUL___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.setUL___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.setUL___len__(self)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.setUL_append(self, *args)

    def __contains__(self, *args):
        """__contains__(self, value_type x) -> bool"""
        return _pyBasePython.setUL___contains__(self, *args)

    def __getitem__(self, *args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _pyBasePython.setUL___getitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(unsigned long)> arg0) -> setUL
        __init__(self) -> setUL
        __init__(self, setUL arg0) -> setUL
        """
        _pyBasePython.setUL_swiginit(self,_pyBasePython.new_setUL(*args))
    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.setUL_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.setUL_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.setUL_clear(self)

    def swap(self, *args):
        """swap(self, setUL v)"""
        return _pyBasePython.setUL_swap(self, *args)

    def count(self, *args):
        """count(self, key_type x) -> size_type"""
        return _pyBasePython.setUL_count(self, *args)

    def begin(self):
        """begin(self) -> iterator"""
        return _pyBasePython.setUL_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _pyBasePython.setUL_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _pyBasePython.setUL_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _pyBasePython.setUL_rend(self)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator pos)
        erase(self, iterator first, iterator last)
        """
        return _pyBasePython.setUL_erase(self, *args)

    def find(self, *args):
        """find(self, key_type x) -> iterator"""
        return _pyBasePython.setUL_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, key_type x) -> iterator"""
        return _pyBasePython.setUL_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, key_type x) -> iterator"""
        return _pyBasePython.setUL_upper_bound(self, *args)

    def equal_range(self, *args):
        """equal_range(self, key_type x) -> std::pair<(std::set<(unsigned long,std::less<(unsigned long)>)>::iterator,std::set<(unsigned long,std::less<(unsigned long)>)>::iterator)>"""
        return _pyBasePython.setUL_equal_range(self, *args)

    def insert(self, *args):
        """insert(self, value_type __x) -> std::pair<(std::set<(unsigned long,std::less<(unsigned long)>)>::iterator,bool)>"""
        return _pyBasePython.setUL_insert(self, *args)

    __swig_destroy__ = _pyBasePython.delete_setUL
setUL.iterator = new_instancemethod(_pyBasePython.setUL_iterator,None,setUL)
setUL.__nonzero__ = new_instancemethod(_pyBasePython.setUL___nonzero__,None,setUL)
setUL.__bool__ = new_instancemethod(_pyBasePython.setUL___bool__,None,setUL)
setUL.__len__ = new_instancemethod(_pyBasePython.setUL___len__,None,setUL)
setUL.append = new_instancemethod(_pyBasePython.setUL_append,None,setUL)
setUL.__contains__ = new_instancemethod(_pyBasePython.setUL___contains__,None,setUL)
setUL.__getitem__ = new_instancemethod(_pyBasePython.setUL___getitem__,None,setUL)
setUL.empty = new_instancemethod(_pyBasePython.setUL_empty,None,setUL)
setUL.size = new_instancemethod(_pyBasePython.setUL_size,None,setUL)
setUL.clear = new_instancemethod(_pyBasePython.setUL_clear,None,setUL)
setUL.swap = new_instancemethod(_pyBasePython.setUL_swap,None,setUL)
setUL.count = new_instancemethod(_pyBasePython.setUL_count,None,setUL)
setUL.begin = new_instancemethod(_pyBasePython.setUL_begin,None,setUL)
setUL.end = new_instancemethod(_pyBasePython.setUL_end,None,setUL)
setUL.rbegin = new_instancemethod(_pyBasePython.setUL_rbegin,None,setUL)
setUL.rend = new_instancemethod(_pyBasePython.setUL_rend,None,setUL)
setUL.erase = new_instancemethod(_pyBasePython.setUL_erase,None,setUL)
setUL.find = new_instancemethod(_pyBasePython.setUL_find,None,setUL)
setUL.lower_bound = new_instancemethod(_pyBasePython.setUL_lower_bound,None,setUL)
setUL.upper_bound = new_instancemethod(_pyBasePython.setUL_upper_bound,None,setUL)
setUL.equal_range = new_instancemethod(_pyBasePython.setUL_equal_range,None,setUL)
setUL.insert = new_instancemethod(_pyBasePython.setUL_insert,None,setUL)
setUL_swigregister = _pyBasePython.setUL_swigregister
setUL_swigregister(setUL)

class setSC(object):
    """Proxy of C++ std::set<(signed char,std::less<(signed char)>)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.setSC_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.setSC___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.setSC___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.setSC___len__(self)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.setSC_append(self, *args)

    def __contains__(self, *args):
        """__contains__(self, value_type x) -> bool"""
        return _pyBasePython.setSC___contains__(self, *args)

    def __getitem__(self, *args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _pyBasePython.setSC___getitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(signed char)> arg0) -> setSC
        __init__(self) -> setSC
        __init__(self, setSC arg0) -> setSC
        """
        _pyBasePython.setSC_swiginit(self,_pyBasePython.new_setSC(*args))
    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.setSC_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.setSC_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.setSC_clear(self)

    def swap(self, *args):
        """swap(self, setSC v)"""
        return _pyBasePython.setSC_swap(self, *args)

    def count(self, *args):
        """count(self, key_type x) -> size_type"""
        return _pyBasePython.setSC_count(self, *args)

    def begin(self):
        """begin(self) -> iterator"""
        return _pyBasePython.setSC_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _pyBasePython.setSC_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _pyBasePython.setSC_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _pyBasePython.setSC_rend(self)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator pos)
        erase(self, iterator first, iterator last)
        """
        return _pyBasePython.setSC_erase(self, *args)

    def find(self, *args):
        """find(self, key_type x) -> iterator"""
        return _pyBasePython.setSC_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, key_type x) -> iterator"""
        return _pyBasePython.setSC_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, key_type x) -> iterator"""
        return _pyBasePython.setSC_upper_bound(self, *args)

    def equal_range(self, *args):
        """equal_range(self, key_type x) -> std::pair<(std::set<(signed char,std::less<(signed char)>)>::iterator,std::set<(signed char,std::less<(signed char)>)>::iterator)>"""
        return _pyBasePython.setSC_equal_range(self, *args)

    def insert(self, *args):
        """insert(self, value_type __x) -> std::pair<(std::set<(signed char,std::less<(signed char)>)>::iterator,bool)>"""
        return _pyBasePython.setSC_insert(self, *args)

    __swig_destroy__ = _pyBasePython.delete_setSC
setSC.iterator = new_instancemethod(_pyBasePython.setSC_iterator,None,setSC)
setSC.__nonzero__ = new_instancemethod(_pyBasePython.setSC___nonzero__,None,setSC)
setSC.__bool__ = new_instancemethod(_pyBasePython.setSC___bool__,None,setSC)
setSC.__len__ = new_instancemethod(_pyBasePython.setSC___len__,None,setSC)
setSC.append = new_instancemethod(_pyBasePython.setSC_append,None,setSC)
setSC.__contains__ = new_instancemethod(_pyBasePython.setSC___contains__,None,setSC)
setSC.__getitem__ = new_instancemethod(_pyBasePython.setSC___getitem__,None,setSC)
setSC.empty = new_instancemethod(_pyBasePython.setSC_empty,None,setSC)
setSC.size = new_instancemethod(_pyBasePython.setSC_size,None,setSC)
setSC.clear = new_instancemethod(_pyBasePython.setSC_clear,None,setSC)
setSC.swap = new_instancemethod(_pyBasePython.setSC_swap,None,setSC)
setSC.count = new_instancemethod(_pyBasePython.setSC_count,None,setSC)
setSC.begin = new_instancemethod(_pyBasePython.setSC_begin,None,setSC)
setSC.end = new_instancemethod(_pyBasePython.setSC_end,None,setSC)
setSC.rbegin = new_instancemethod(_pyBasePython.setSC_rbegin,None,setSC)
setSC.rend = new_instancemethod(_pyBasePython.setSC_rend,None,setSC)
setSC.erase = new_instancemethod(_pyBasePython.setSC_erase,None,setSC)
setSC.find = new_instancemethod(_pyBasePython.setSC_find,None,setSC)
setSC.lower_bound = new_instancemethod(_pyBasePython.setSC_lower_bound,None,setSC)
setSC.upper_bound = new_instancemethod(_pyBasePython.setSC_upper_bound,None,setSC)
setSC.equal_range = new_instancemethod(_pyBasePython.setSC_equal_range,None,setSC)
setSC.insert = new_instancemethod(_pyBasePython.setSC_insert,None,setSC)
setSC_swigregister = _pyBasePython.setSC_swigregister
setSC_swigregister(setSC)

class setSS(object):
    """Proxy of C++ std::set<(short,std::less<(short)>)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.setSS_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.setSS___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.setSS___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.setSS___len__(self)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.setSS_append(self, *args)

    def __contains__(self, *args):
        """__contains__(self, value_type x) -> bool"""
        return _pyBasePython.setSS___contains__(self, *args)

    def __getitem__(self, *args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _pyBasePython.setSS___getitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(short)> arg0) -> setSS
        __init__(self) -> setSS
        __init__(self, setSS arg0) -> setSS
        """
        _pyBasePython.setSS_swiginit(self,_pyBasePython.new_setSS(*args))
    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.setSS_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.setSS_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.setSS_clear(self)

    def swap(self, *args):
        """swap(self, setSS v)"""
        return _pyBasePython.setSS_swap(self, *args)

    def count(self, *args):
        """count(self, key_type x) -> size_type"""
        return _pyBasePython.setSS_count(self, *args)

    def begin(self):
        """begin(self) -> iterator"""
        return _pyBasePython.setSS_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _pyBasePython.setSS_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _pyBasePython.setSS_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _pyBasePython.setSS_rend(self)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator pos)
        erase(self, iterator first, iterator last)
        """
        return _pyBasePython.setSS_erase(self, *args)

    def find(self, *args):
        """find(self, key_type x) -> iterator"""
        return _pyBasePython.setSS_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, key_type x) -> iterator"""
        return _pyBasePython.setSS_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, key_type x) -> iterator"""
        return _pyBasePython.setSS_upper_bound(self, *args)

    def equal_range(self, *args):
        """equal_range(self, key_type x) -> std::pair<(std::set<(short,std::less<(short)>)>::iterator,std::set<(short,std::less<(short)>)>::iterator)>"""
        return _pyBasePython.setSS_equal_range(self, *args)

    def insert(self, *args):
        """insert(self, value_type __x) -> std::pair<(std::set<(short,std::less<(short)>)>::iterator,bool)>"""
        return _pyBasePython.setSS_insert(self, *args)

    __swig_destroy__ = _pyBasePython.delete_setSS
setSS.iterator = new_instancemethod(_pyBasePython.setSS_iterator,None,setSS)
setSS.__nonzero__ = new_instancemethod(_pyBasePython.setSS___nonzero__,None,setSS)
setSS.__bool__ = new_instancemethod(_pyBasePython.setSS___bool__,None,setSS)
setSS.__len__ = new_instancemethod(_pyBasePython.setSS___len__,None,setSS)
setSS.append = new_instancemethod(_pyBasePython.setSS_append,None,setSS)
setSS.__contains__ = new_instancemethod(_pyBasePython.setSS___contains__,None,setSS)
setSS.__getitem__ = new_instancemethod(_pyBasePython.setSS___getitem__,None,setSS)
setSS.empty = new_instancemethod(_pyBasePython.setSS_empty,None,setSS)
setSS.size = new_instancemethod(_pyBasePython.setSS_size,None,setSS)
setSS.clear = new_instancemethod(_pyBasePython.setSS_clear,None,setSS)
setSS.swap = new_instancemethod(_pyBasePython.setSS_swap,None,setSS)
setSS.count = new_instancemethod(_pyBasePython.setSS_count,None,setSS)
setSS.begin = new_instancemethod(_pyBasePython.setSS_begin,None,setSS)
setSS.end = new_instancemethod(_pyBasePython.setSS_end,None,setSS)
setSS.rbegin = new_instancemethod(_pyBasePython.setSS_rbegin,None,setSS)
setSS.rend = new_instancemethod(_pyBasePython.setSS_rend,None,setSS)
setSS.erase = new_instancemethod(_pyBasePython.setSS_erase,None,setSS)
setSS.find = new_instancemethod(_pyBasePython.setSS_find,None,setSS)
setSS.lower_bound = new_instancemethod(_pyBasePython.setSS_lower_bound,None,setSS)
setSS.upper_bound = new_instancemethod(_pyBasePython.setSS_upper_bound,None,setSS)
setSS.equal_range = new_instancemethod(_pyBasePython.setSS_equal_range,None,setSS)
setSS.insert = new_instancemethod(_pyBasePython.setSS_insert,None,setSS)
setSS_swigregister = _pyBasePython.setSS_swigregister
setSS_swigregister(setSS)

class setSL(object):
    """Proxy of C++ std::set<(long,std::less<(long)>)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.setSL_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.setSL___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.setSL___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.setSL___len__(self)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.setSL_append(self, *args)

    def __contains__(self, *args):
        """__contains__(self, value_type x) -> bool"""
        return _pyBasePython.setSL___contains__(self, *args)

    def __getitem__(self, *args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _pyBasePython.setSL___getitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(long)> arg0) -> setSL
        __init__(self) -> setSL
        __init__(self, setSL arg0) -> setSL
        """
        _pyBasePython.setSL_swiginit(self,_pyBasePython.new_setSL(*args))
    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.setSL_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.setSL_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.setSL_clear(self)

    def swap(self, *args):
        """swap(self, setSL v)"""
        return _pyBasePython.setSL_swap(self, *args)

    def count(self, *args):
        """count(self, key_type x) -> size_type"""
        return _pyBasePython.setSL_count(self, *args)

    def begin(self):
        """begin(self) -> iterator"""
        return _pyBasePython.setSL_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _pyBasePython.setSL_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _pyBasePython.setSL_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _pyBasePython.setSL_rend(self)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator pos)
        erase(self, iterator first, iterator last)
        """
        return _pyBasePython.setSL_erase(self, *args)

    def find(self, *args):
        """find(self, key_type x) -> iterator"""
        return _pyBasePython.setSL_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, key_type x) -> iterator"""
        return _pyBasePython.setSL_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, key_type x) -> iterator"""
        return _pyBasePython.setSL_upper_bound(self, *args)

    def equal_range(self, *args):
        """equal_range(self, key_type x) -> std::pair<(std::set<(long,std::less<(long)>)>::iterator,std::set<(long,std::less<(long)>)>::iterator)>"""
        return _pyBasePython.setSL_equal_range(self, *args)

    def insert(self, *args):
        """insert(self, value_type __x) -> std::pair<(std::set<(long,std::less<(long)>)>::iterator,bool)>"""
        return _pyBasePython.setSL_insert(self, *args)

    __swig_destroy__ = _pyBasePython.delete_setSL
setSL.iterator = new_instancemethod(_pyBasePython.setSL_iterator,None,setSL)
setSL.__nonzero__ = new_instancemethod(_pyBasePython.setSL___nonzero__,None,setSL)
setSL.__bool__ = new_instancemethod(_pyBasePython.setSL___bool__,None,setSL)
setSL.__len__ = new_instancemethod(_pyBasePython.setSL___len__,None,setSL)
setSL.append = new_instancemethod(_pyBasePython.setSL_append,None,setSL)
setSL.__contains__ = new_instancemethod(_pyBasePython.setSL___contains__,None,setSL)
setSL.__getitem__ = new_instancemethod(_pyBasePython.setSL___getitem__,None,setSL)
setSL.empty = new_instancemethod(_pyBasePython.setSL_empty,None,setSL)
setSL.size = new_instancemethod(_pyBasePython.setSL_size,None,setSL)
setSL.clear = new_instancemethod(_pyBasePython.setSL_clear,None,setSL)
setSL.swap = new_instancemethod(_pyBasePython.setSL_swap,None,setSL)
setSL.count = new_instancemethod(_pyBasePython.setSL_count,None,setSL)
setSL.begin = new_instancemethod(_pyBasePython.setSL_begin,None,setSL)
setSL.end = new_instancemethod(_pyBasePython.setSL_end,None,setSL)
setSL.rbegin = new_instancemethod(_pyBasePython.setSL_rbegin,None,setSL)
setSL.rend = new_instancemethod(_pyBasePython.setSL_rend,None,setSL)
setSL.erase = new_instancemethod(_pyBasePython.setSL_erase,None,setSL)
setSL.find = new_instancemethod(_pyBasePython.setSL_find,None,setSL)
setSL.lower_bound = new_instancemethod(_pyBasePython.setSL_lower_bound,None,setSL)
setSL.upper_bound = new_instancemethod(_pyBasePython.setSL_upper_bound,None,setSL)
setSL.equal_range = new_instancemethod(_pyBasePython.setSL_equal_range,None,setSL)
setSL.insert = new_instancemethod(_pyBasePython.setSL_insert,None,setSL)
setSL_swigregister = _pyBasePython.setSL_swigregister
setSL_swigregister(setSL)

class setF(object):
    """Proxy of C++ std::set<(float,std::less<(float)>)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.setF_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.setF___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.setF___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.setF___len__(self)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.setF_append(self, *args)

    def __contains__(self, *args):
        """__contains__(self, value_type x) -> bool"""
        return _pyBasePython.setF___contains__(self, *args)

    def __getitem__(self, *args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _pyBasePython.setF___getitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(float)> arg0) -> setF
        __init__(self) -> setF
        __init__(self, setF arg0) -> setF
        """
        _pyBasePython.setF_swiginit(self,_pyBasePython.new_setF(*args))
    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.setF_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.setF_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.setF_clear(self)

    def swap(self, *args):
        """swap(self, setF v)"""
        return _pyBasePython.setF_swap(self, *args)

    def count(self, *args):
        """count(self, key_type x) -> size_type"""
        return _pyBasePython.setF_count(self, *args)

    def begin(self):
        """begin(self) -> iterator"""
        return _pyBasePython.setF_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _pyBasePython.setF_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _pyBasePython.setF_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _pyBasePython.setF_rend(self)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator pos)
        erase(self, iterator first, iterator last)
        """
        return _pyBasePython.setF_erase(self, *args)

    def find(self, *args):
        """find(self, key_type x) -> iterator"""
        return _pyBasePython.setF_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, key_type x) -> iterator"""
        return _pyBasePython.setF_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, key_type x) -> iterator"""
        return _pyBasePython.setF_upper_bound(self, *args)

    def equal_range(self, *args):
        """equal_range(self, key_type x) -> std::pair<(std::set<(float,std::less<(float)>)>::iterator,std::set<(float,std::less<(float)>)>::iterator)>"""
        return _pyBasePython.setF_equal_range(self, *args)

    def insert(self, *args):
        """insert(self, value_type __x) -> std::pair<(std::set<(float,std::less<(float)>)>::iterator,bool)>"""
        return _pyBasePython.setF_insert(self, *args)

    __swig_destroy__ = _pyBasePython.delete_setF
setF.iterator = new_instancemethod(_pyBasePython.setF_iterator,None,setF)
setF.__nonzero__ = new_instancemethod(_pyBasePython.setF___nonzero__,None,setF)
setF.__bool__ = new_instancemethod(_pyBasePython.setF___bool__,None,setF)
setF.__len__ = new_instancemethod(_pyBasePython.setF___len__,None,setF)
setF.append = new_instancemethod(_pyBasePython.setF_append,None,setF)
setF.__contains__ = new_instancemethod(_pyBasePython.setF___contains__,None,setF)
setF.__getitem__ = new_instancemethod(_pyBasePython.setF___getitem__,None,setF)
setF.empty = new_instancemethod(_pyBasePython.setF_empty,None,setF)
setF.size = new_instancemethod(_pyBasePython.setF_size,None,setF)
setF.clear = new_instancemethod(_pyBasePython.setF_clear,None,setF)
setF.swap = new_instancemethod(_pyBasePython.setF_swap,None,setF)
setF.count = new_instancemethod(_pyBasePython.setF_count,None,setF)
setF.begin = new_instancemethod(_pyBasePython.setF_begin,None,setF)
setF.end = new_instancemethod(_pyBasePython.setF_end,None,setF)
setF.rbegin = new_instancemethod(_pyBasePython.setF_rbegin,None,setF)
setF.rend = new_instancemethod(_pyBasePython.setF_rend,None,setF)
setF.erase = new_instancemethod(_pyBasePython.setF_erase,None,setF)
setF.find = new_instancemethod(_pyBasePython.setF_find,None,setF)
setF.lower_bound = new_instancemethod(_pyBasePython.setF_lower_bound,None,setF)
setF.upper_bound = new_instancemethod(_pyBasePython.setF_upper_bound,None,setF)
setF.equal_range = new_instancemethod(_pyBasePython.setF_equal_range,None,setF)
setF.insert = new_instancemethod(_pyBasePython.setF_insert,None,setF)
setF_swigregister = _pyBasePython.setF_swigregister
setF_swigregister(setF)

class setD(object):
    """Proxy of C++ std::set<(double,std::less<(double)>)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.setD_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.setD___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.setD___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.setD___len__(self)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.setD_append(self, *args)

    def __contains__(self, *args):
        """__contains__(self, value_type x) -> bool"""
        return _pyBasePython.setD___contains__(self, *args)

    def __getitem__(self, *args):
        """__getitem__(self, difference_type i) -> value_type"""
        return _pyBasePython.setD___getitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(double)> arg0) -> setD
        __init__(self) -> setD
        __init__(self, setD arg0) -> setD
        """
        _pyBasePython.setD_swiginit(self,_pyBasePython.new_setD(*args))
    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.setD_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.setD_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.setD_clear(self)

    def swap(self, *args):
        """swap(self, setD v)"""
        return _pyBasePython.setD_swap(self, *args)

    def count(self, *args):
        """count(self, key_type x) -> size_type"""
        return _pyBasePython.setD_count(self, *args)

    def begin(self):
        """begin(self) -> iterator"""
        return _pyBasePython.setD_begin(self)

    def end(self):
        """end(self) -> iterator"""
        return _pyBasePython.setD_end(self)

    def rbegin(self):
        """rbegin(self) -> reverse_iterator"""
        return _pyBasePython.setD_rbegin(self)

    def rend(self):
        """rend(self) -> reverse_iterator"""
        return _pyBasePython.setD_rend(self)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator pos)
        erase(self, iterator first, iterator last)
        """
        return _pyBasePython.setD_erase(self, *args)

    def find(self, *args):
        """find(self, key_type x) -> iterator"""
        return _pyBasePython.setD_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, key_type x) -> iterator"""
        return _pyBasePython.setD_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, key_type x) -> iterator"""
        return _pyBasePython.setD_upper_bound(self, *args)

    def equal_range(self, *args):
        """equal_range(self, key_type x) -> std::pair<(std::set<(double,std::less<(double)>)>::iterator,std::set<(double,std::less<(double)>)>::iterator)>"""
        return _pyBasePython.setD_equal_range(self, *args)

    def insert(self, *args):
        """insert(self, value_type __x) -> std::pair<(std::set<(double,std::less<(double)>)>::iterator,bool)>"""
        return _pyBasePython.setD_insert(self, *args)

    __swig_destroy__ = _pyBasePython.delete_setD
setD.iterator = new_instancemethod(_pyBasePython.setD_iterator,None,setD)
setD.__nonzero__ = new_instancemethod(_pyBasePython.setD___nonzero__,None,setD)
setD.__bool__ = new_instancemethod(_pyBasePython.setD___bool__,None,setD)
setD.__len__ = new_instancemethod(_pyBasePython.setD___len__,None,setD)
setD.append = new_instancemethod(_pyBasePython.setD_append,None,setD)
setD.__contains__ = new_instancemethod(_pyBasePython.setD___contains__,None,setD)
setD.__getitem__ = new_instancemethod(_pyBasePython.setD___getitem__,None,setD)
setD.empty = new_instancemethod(_pyBasePython.setD_empty,None,setD)
setD.size = new_instancemethod(_pyBasePython.setD_size,None,setD)
setD.clear = new_instancemethod(_pyBasePython.setD_clear,None,setD)
setD.swap = new_instancemethod(_pyBasePython.setD_swap,None,setD)
setD.count = new_instancemethod(_pyBasePython.setD_count,None,setD)
setD.begin = new_instancemethod(_pyBasePython.setD_begin,None,setD)
setD.end = new_instancemethod(_pyBasePython.setD_end,None,setD)
setD.rbegin = new_instancemethod(_pyBasePython.setD_rbegin,None,setD)
setD.rend = new_instancemethod(_pyBasePython.setD_rend,None,setD)
setD.erase = new_instancemethod(_pyBasePython.setD_erase,None,setD)
setD.find = new_instancemethod(_pyBasePython.setD_find,None,setD)
setD.lower_bound = new_instancemethod(_pyBasePython.setD_lower_bound,None,setD)
setD.upper_bound = new_instancemethod(_pyBasePython.setD_upper_bound,None,setD)
setD.equal_range = new_instancemethod(_pyBasePython.setD_equal_range,None,setD)
setD.insert = new_instancemethod(_pyBasePython.setD_insert,None,setD)
setD_swigregister = _pyBasePython.setD_swigregister
setD_swigregister(setD)

class vectorsetUL(object):
    """Proxy of C++ std::vector<(std::set<(unsigned long,std::less<(unsigned long)>)>)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.vectorsetUL_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.vectorsetUL___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.vectorsetUL___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.vectorsetUL___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _pyBasePython.vectorsetUL_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectorsetUL"""
        return _pyBasePython.vectorsetUL___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectorsetUL v)"""
        return _pyBasePython.vectorsetUL___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _pyBasePython.vectorsetUL___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _pyBasePython.vectorsetUL___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectorsetUL
        __getitem__(self, difference_type i) -> value_type
        """
        return _pyBasePython.vectorsetUL___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectorsetUL v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _pyBasePython.vectorsetUL___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _pyBasePython.vectorsetUL_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.vectorsetUL_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.vectorsetUL_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.vectorsetUL_clear(self)

    def swap(self, *args):
        """swap(self, vectorsetUL v)"""
        return _pyBasePython.vectorsetUL_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.vectorsetUL_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.vectorsetUL_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.vectorsetUL_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorsetUL_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.vectorsetUL_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _pyBasePython.vectorsetUL_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _pyBasePython.vectorsetUL_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectorsetUL
        __init__(self, vectorsetUL arg0) -> vectorsetUL
        __init__(self, size_type size) -> vectorsetUL
        __init__(self, size_type size, value_type value) -> vectorsetUL
        """
        _pyBasePython.vectorsetUL_swiginit(self,_pyBasePython.new_vectorsetUL(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _pyBasePython.vectorsetUL_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _pyBasePython.vectorsetUL_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _pyBasePython.vectorsetUL_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _pyBasePython.vectorsetUL_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _pyBasePython.vectorsetUL_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _pyBasePython.vectorsetUL_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _pyBasePython.vectorsetUL_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _pyBasePython.vectorsetUL_capacity(self)

    __swig_destroy__ = _pyBasePython.delete_vectorsetUL
vectorsetUL.iterator = new_instancemethod(_pyBasePython.vectorsetUL_iterator,None,vectorsetUL)
vectorsetUL.__nonzero__ = new_instancemethod(_pyBasePython.vectorsetUL___nonzero__,None,vectorsetUL)
vectorsetUL.__bool__ = new_instancemethod(_pyBasePython.vectorsetUL___bool__,None,vectorsetUL)
vectorsetUL.__len__ = new_instancemethod(_pyBasePython.vectorsetUL___len__,None,vectorsetUL)
vectorsetUL.pop = new_instancemethod(_pyBasePython.vectorsetUL_pop,None,vectorsetUL)
vectorsetUL.__getslice__ = new_instancemethod(_pyBasePython.vectorsetUL___getslice__,None,vectorsetUL)
vectorsetUL.__setslice__ = new_instancemethod(_pyBasePython.vectorsetUL___setslice__,None,vectorsetUL)
vectorsetUL.__delslice__ = new_instancemethod(_pyBasePython.vectorsetUL___delslice__,None,vectorsetUL)
vectorsetUL.__delitem__ = new_instancemethod(_pyBasePython.vectorsetUL___delitem__,None,vectorsetUL)
vectorsetUL.__getitem__ = new_instancemethod(_pyBasePython.vectorsetUL___getitem__,None,vectorsetUL)
vectorsetUL.__setitem__ = new_instancemethod(_pyBasePython.vectorsetUL___setitem__,None,vectorsetUL)
vectorsetUL.append = new_instancemethod(_pyBasePython.vectorsetUL_append,None,vectorsetUL)
vectorsetUL.empty = new_instancemethod(_pyBasePython.vectorsetUL_empty,None,vectorsetUL)
vectorsetUL.size = new_instancemethod(_pyBasePython.vectorsetUL_size,None,vectorsetUL)
vectorsetUL.clear = new_instancemethod(_pyBasePython.vectorsetUL_clear,None,vectorsetUL)
vectorsetUL.swap = new_instancemethod(_pyBasePython.vectorsetUL_swap,None,vectorsetUL)
vectorsetUL.get_allocator = new_instancemethod(_pyBasePython.vectorsetUL_get_allocator,None,vectorsetUL)
vectorsetUL.begin = new_instancemethod(_pyBasePython.vectorsetUL_begin,None,vectorsetUL)
vectorsetUL.end = new_instancemethod(_pyBasePython.vectorsetUL_end,None,vectorsetUL)
vectorsetUL.rbegin = new_instancemethod(_pyBasePython.vectorsetUL_rbegin,None,vectorsetUL)
vectorsetUL.rend = new_instancemethod(_pyBasePython.vectorsetUL_rend,None,vectorsetUL)
vectorsetUL.pop_back = new_instancemethod(_pyBasePython.vectorsetUL_pop_back,None,vectorsetUL)
vectorsetUL.erase = new_instancemethod(_pyBasePython.vectorsetUL_erase,None,vectorsetUL)
vectorsetUL.push_back = new_instancemethod(_pyBasePython.vectorsetUL_push_back,None,vectorsetUL)
vectorsetUL.front = new_instancemethod(_pyBasePython.vectorsetUL_front,None,vectorsetUL)
vectorsetUL.back = new_instancemethod(_pyBasePython.vectorsetUL_back,None,vectorsetUL)
vectorsetUL.assign = new_instancemethod(_pyBasePython.vectorsetUL_assign,None,vectorsetUL)
vectorsetUL.resize = new_instancemethod(_pyBasePython.vectorsetUL_resize,None,vectorsetUL)
vectorsetUL.insert = new_instancemethod(_pyBasePython.vectorsetUL_insert,None,vectorsetUL)
vectorsetUL.reserve = new_instancemethod(_pyBasePython.vectorsetUL_reserve,None,vectorsetUL)
vectorsetUL.capacity = new_instancemethod(_pyBasePython.vectorsetUL_capacity,None,vectorsetUL)
vectorsetUL_swigregister = _pyBasePython.vectorsetUL_swigregister
vectorsetUL_swigregister(vectorsetUL)

class mapsetUL(object):
    """Proxy of C++ std::map<(unsigned long,std::set<(unsigned long,std::less<(unsigned long)>)>)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapsetUL_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _pyBasePython.mapsetUL___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _pyBasePython.mapsetUL___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _pyBasePython.mapsetUL___len__(self)

    def __getitem__(self, *args):
        """__getitem__(self, key_type key) -> mapped_type"""
        return _pyBasePython.mapsetUL___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(self, key_type key)"""
        return _pyBasePython.mapsetUL___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(self, key_type key) -> bool"""
        return _pyBasePython.mapsetUL_has_key(self, *args)

    def keys(self):
        """keys(self) -> PyObject"""
        return _pyBasePython.mapsetUL_keys(self)

    def values(self):
        """values(self) -> PyObject"""
        return _pyBasePython.mapsetUL_values(self)

    def items(self):
        """items(self) -> PyObject"""
        return _pyBasePython.mapsetUL_items(self)

    def __contains__(self, *args):
        """__contains__(self, key_type key) -> bool"""
        return _pyBasePython.mapsetUL___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapsetUL_key_iterator(self)

    def value_iterator(self):
        """value_iterator(self) -> SwigPyIterator"""
        return _pyBasePython.mapsetUL_value_iterator(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args):
        """__setitem__(self, key_type key, mapped_type x)"""
        return _pyBasePython.mapsetUL___setitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(unsigned long)> arg0) -> mapsetUL
        __init__(self) -> mapsetUL
        __init__(self, mapsetUL arg0) -> mapsetUL
        """
        _pyBasePython.mapsetUL_swiginit(self,_pyBasePython.new_mapsetUL(*args))
    def empty(self):
        """empty(self) -> bool"""
        return _pyBasePython.mapsetUL_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _pyBasePython.mapsetUL_size(self)

    def clear(self):
        """clear(self)"""
        return _pyBasePython.mapsetUL_clear(self)

    def swap(self, *args):
        """swap(self, mapsetUL v)"""
        return _pyBasePython.mapsetUL_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _pyBasePython.mapsetUL_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _pyBasePython.mapsetUL_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _pyBasePython.mapsetUL_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _pyBasePython.mapsetUL_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _pyBasePython.mapsetUL_rend(self)

    def count(self, *args):
        """count(self, key_type x) -> size_type"""
        return _pyBasePython.mapsetUL_count(self, *args)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator position)
        erase(self, iterator first, iterator last)
        """
        return _pyBasePython.mapsetUL_erase(self, *args)

    def find(self, *args):
        """find(self, key_type x) -> iterator"""
        return _pyBasePython.mapsetUL_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, key_type x) -> iterator"""
        return _pyBasePython.mapsetUL_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, key_type x) -> iterator"""
        return _pyBasePython.mapsetUL_upper_bound(self, *args)

    __swig_destroy__ = _pyBasePython.delete_mapsetUL
mapsetUL.iterator = new_instancemethod(_pyBasePython.mapsetUL_iterator,None,mapsetUL)
mapsetUL.__nonzero__ = new_instancemethod(_pyBasePython.mapsetUL___nonzero__,None,mapsetUL)
mapsetUL.__bool__ = new_instancemethod(_pyBasePython.mapsetUL___bool__,None,mapsetUL)
mapsetUL.__len__ = new_instancemethod(_pyBasePython.mapsetUL___len__,None,mapsetUL)
mapsetUL.__getitem__ = new_instancemethod(_pyBasePython.mapsetUL___getitem__,None,mapsetUL)
mapsetUL.__delitem__ = new_instancemethod(_pyBasePython.mapsetUL___delitem__,None,mapsetUL)
mapsetUL.has_key = new_instancemethod(_pyBasePython.mapsetUL_has_key,None,mapsetUL)
mapsetUL.keys = new_instancemethod(_pyBasePython.mapsetUL_keys,None,mapsetUL)
mapsetUL.values = new_instancemethod(_pyBasePython.mapsetUL_values,None,mapsetUL)
mapsetUL.items = new_instancemethod(_pyBasePython.mapsetUL_items,None,mapsetUL)
mapsetUL.__contains__ = new_instancemethod(_pyBasePython.mapsetUL___contains__,None,mapsetUL)
mapsetUL.key_iterator = new_instancemethod(_pyBasePython.mapsetUL_key_iterator,None,mapsetUL)
mapsetUL.value_iterator = new_instancemethod(_pyBasePython.mapsetUL_value_iterator,None,mapsetUL)
mapsetUL.__setitem__ = new_instancemethod(_pyBasePython.mapsetUL___setitem__,None,mapsetUL)
mapsetUL.empty = new_instancemethod(_pyBasePython.mapsetUL_empty,None,mapsetUL)
mapsetUL.size = new_instancemethod(_pyBasePython.mapsetUL_size,None,mapsetUL)
mapsetUL.clear = new_instancemethod(_pyBasePython.mapsetUL_clear,None,mapsetUL)
mapsetUL.swap = new_instancemethod(_pyBasePython.mapsetUL_swap,None,mapsetUL)
mapsetUL.get_allocator = new_instancemethod(_pyBasePython.mapsetUL_get_allocator,None,mapsetUL)
mapsetUL.begin = new_instancemethod(_pyBasePython.mapsetUL_begin,None,mapsetUL)
mapsetUL.end = new_instancemethod(_pyBasePython.mapsetUL_end,None,mapsetUL)
mapsetUL.rbegin = new_instancemethod(_pyBasePython.mapsetUL_rbegin,None,mapsetUL)
mapsetUL.rend = new_instancemethod(_pyBasePython.mapsetUL_rend,None,mapsetUL)
mapsetUL.count = new_instancemethod(_pyBasePython.mapsetUL_count,None,mapsetUL)
mapsetUL.erase = new_instancemethod(_pyBasePython.mapsetUL_erase,None,mapsetUL)
mapsetUL.find = new_instancemethod(_pyBasePython.mapsetUL_find,None,mapsetUL)
mapsetUL.lower_bound = new_instancemethod(_pyBasePython.mapsetUL_lower_bound,None,mapsetUL)
mapsetUL.upper_bound = new_instancemethod(_pyBasePython.mapsetUL_upper_bound,None,mapsetUL)
mapsetUL_swigregister = _pyBasePython.mapsetUL_swigregister
mapsetUL_swigregister(mapsetUL)



