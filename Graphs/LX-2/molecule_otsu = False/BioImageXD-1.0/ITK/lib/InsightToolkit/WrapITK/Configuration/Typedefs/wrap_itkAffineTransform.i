// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkAffineTransformChicken
#endif
#ifdef SWIGCSHARP
%module itkAffineTransformCsharp
#endif
#ifdef SWIGGUILE
%module itkAffineTransformGuile
#endif
#ifdef SWIGJAVA
%module itkAffineTransformJava
#endif
#ifdef SWIGLUA
%module itkAffineTransformLua
#endif
#ifdef SWIGMODULA3
%module itkAffineTransformModula3
#endif
#ifdef SWIGMZSCHEME
%module itkAffineTransformMzscheme
#endif
#ifdef SWIGOCAML
%module itkAffineTransformOcaml
#endif
#ifdef SWIGPERL
%module itkAffineTransformPerl
#endif
#ifdef SWIGPERL5
%module itkAffineTransformPerl5
#endif
#ifdef SWIGPHP
%module itkAffineTransformPhp
#endif
#ifdef SWIGPHP4
%module itkAffineTransformPhp4
#endif
#ifdef SWIGPHP5
%module itkAffineTransformPhp5
#endif
#ifdef SWIGPIKE
%module itkAffineTransformPike
#endif
#ifdef SWIGPYTHON
%module itkAffineTransformPython
#endif
#ifdef SWIGR
%module itkAffineTransformR
#endif
#ifdef SWIGRUBY
%module itkAffineTransformRuby
#endif
#ifdef SWIGSEXP
%module itkAffineTransformSexp
#endif
#ifdef SWIGTCL
%module itkAffineTransformTcl
#endif
#ifdef SWIGXML
%module itkAffineTransformXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
%}


%{
%}




%import wrap_itkPoint.i
%import wrap_itkTransform.i
%import wrap_itkCovariantVector.i
%import wrap_itkVector.i
%import wrap_itkMatrix.i
%import wrap_ITKCommonBase.i
%import wrap_itkMatrixOffsetTransformBase.i


%include itk.i
%include wrap_itkAffineTransform_ext.i


 class itkAffineTransformD2 : public itkMatrixOffsetTransformBaseD22 {
   public:
     enum  {  InputSpaceDimension = 2 };
     enum  {  OutputSpaceDimension = 2 };
     enum  {  SpaceDimension = 2 };
     enum  {  ParametersDimension = 6 };
     virtual char const * GetNameOfClass() const;
     static itkAffineTransformD2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void Translate(itkVectorD2 const & offset, bool pre = 0);
     void Scale(itkVectorD2 const & factor, bool pre = 0);
     void Scale(double const & factor, bool pre = 0);
     void Rotate(int axis1, int axis2, double angle, bool pre = 0);
     void Rotate2D(double angle, bool pre = 0);
     void Rotate3D(itkVectorD2 const & axis, double angle, bool pre = 0);
     void Shear(int axis1, int axis2, double coef, bool pre = 0);
     bool GetInverse(itkAffineTransformD2 * inverse) const;
     virtual itkTransformBase_Pointer GetInverseTransform() const;
     itkPointD2 BackTransform(itkPointD2 const & point) const;
     itkVectorD2 BackTransform(itkVectorD2 const & vect) const;
     vnl_vector_fixed< double, 2u > BackTransform(vnl_vector_fixed< double, 2u > const & vect) const;
     itkCovariantVectorD2 BackTransform(itkCovariantVectorD2 const & vec) const;
     itkPointD2 BackTransformPoint(itkPointD2 const & point) const;
     double Metric(itkAffineTransformD2 const * other) const;
     double Metric() const;
   private:
     itkAffineTransformD2(itkAffineTransformD2 const & other);
     itkAffineTransformD2 const & operator=(itkAffineTransformD2 const & arg0);
   protected:
     itkAffineTransformD2(itkMatrixD22 const & matrix, itkVectorD2 const & offset);
     itkAffineTransformD2(unsigned int outputDims, unsigned int paramDims);
     itkAffineTransformD2();
     ~itkAffineTransformD2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & s, itkIndent indent) const;
 };


 class itkAffineTransformD2_Pointer {
   public:
     itkAffineTransformD2_Pointer();
     itkAffineTransformD2_Pointer(itkAffineTransformD2_Pointer const & p);
     itkAffineTransformD2_Pointer(itkAffineTransformD2 * p);
     ~itkAffineTransformD2_Pointer();
     itkAffineTransformD2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkAffineTransformD2 * GetPointer() const;
     bool operator<(itkAffineTransformD2_Pointer const & r) const;
     bool operator>(itkAffineTransformD2_Pointer const & r) const;
     bool operator<=(itkAffineTransformD2_Pointer const & r) const;
     bool operator>=(itkAffineTransformD2_Pointer const & r) const;
     itkAffineTransformD2_Pointer & operator=(itkAffineTransformD2_Pointer const & r);
     itkAffineTransformD2_Pointer & operator=(itkAffineTransformD2 * r);
     itkAffineTransformD2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkAffineTransformD3 : public itkMatrixOffsetTransformBaseD33 {
   public:
     enum  {  InputSpaceDimension = 3 };
     enum  {  OutputSpaceDimension = 3 };
     enum  {  SpaceDimension = 3 };
     enum  {  ParametersDimension = 12 };
     virtual char const * GetNameOfClass() const;
     static itkAffineTransformD3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void Translate(itkVectorD3 const & offset, bool pre = 0);
     void Scale(itkVectorD3 const & factor, bool pre = 0);
     void Scale(double const & factor, bool pre = 0);
     void Rotate(int axis1, int axis2, double angle, bool pre = 0);
     void Rotate2D(double angle, bool pre = 0);
     void Rotate3D(itkVectorD3 const & axis, double angle, bool pre = 0);
     void Shear(int axis1, int axis2, double coef, bool pre = 0);
     bool GetInverse(itkAffineTransformD3 * inverse) const;
     virtual itkTransformBase_Pointer GetInverseTransform() const;
     itkPointD3 BackTransform(itkPointD3 const & point) const;
     itkVectorD3 BackTransform(itkVectorD3 const & vect) const;
     vnl_vector_fixed< double, 3u > BackTransform(vnl_vector_fixed< double, 3u > const & vect) const;
     itkCovariantVectorD3 BackTransform(itkCovariantVectorD3 const & vec) const;
     itkPointD3 BackTransformPoint(itkPointD3 const & point) const;
     double Metric(itkAffineTransformD3 const * other) const;
     double Metric() const;
   private:
     itkAffineTransformD3(itkAffineTransformD3 const & other);
     itkAffineTransformD3 const & operator=(itkAffineTransformD3 const & arg0);
   protected:
     itkAffineTransformD3(itkMatrixD33 const & matrix, itkVectorD3 const & offset);
     itkAffineTransformD3(unsigned int outputDims, unsigned int paramDims);
     itkAffineTransformD3();
     ~itkAffineTransformD3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & s, itkIndent indent) const;
 };


 class itkAffineTransformD3_Pointer {
   public:
     itkAffineTransformD3_Pointer();
     itkAffineTransformD3_Pointer(itkAffineTransformD3_Pointer const & p);
     itkAffineTransformD3_Pointer(itkAffineTransformD3 * p);
     ~itkAffineTransformD3_Pointer();
     itkAffineTransformD3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkAffineTransformD3 * GetPointer() const;
     bool operator<(itkAffineTransformD3_Pointer const & r) const;
     bool operator>(itkAffineTransformD3_Pointer const & r) const;
     bool operator<=(itkAffineTransformD3_Pointer const & r) const;
     bool operator>=(itkAffineTransformD3_Pointer const & r) const;
     itkAffineTransformD3_Pointer & operator=(itkAffineTransformD3_Pointer const & r);
     itkAffineTransformD3_Pointer & operator=(itkAffineTransformD3 * r);
     itkAffineTransformD3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


