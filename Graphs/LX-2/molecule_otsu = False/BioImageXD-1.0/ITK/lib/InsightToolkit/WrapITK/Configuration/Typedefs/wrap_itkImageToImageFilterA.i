// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkImageToImageFilterAChicken
#endif
#ifdef SWIGCSHARP
%module itkImageToImageFilterACsharp
#endif
#ifdef SWIGGUILE
%module itkImageToImageFilterAGuile
#endif
#ifdef SWIGJAVA
%module itkImageToImageFilterAJava
#endif
#ifdef SWIGLUA
%module itkImageToImageFilterALua
#endif
#ifdef SWIGMODULA3
%module itkImageToImageFilterAModula3
#endif
#ifdef SWIGMZSCHEME
%module itkImageToImageFilterAMzscheme
#endif
#ifdef SWIGOCAML
%module itkImageToImageFilterAOcaml
#endif
#ifdef SWIGPERL
%module itkImageToImageFilterAPerl
#endif
#ifdef SWIGPERL5
%module itkImageToImageFilterAPerl5
#endif
#ifdef SWIGPHP
%module itkImageToImageFilterAPhp
#endif
#ifdef SWIGPHP4
%module itkImageToImageFilterAPhp4
#endif
#ifdef SWIGPHP5
%module itkImageToImageFilterAPhp5
#endif
#ifdef SWIGPIKE
%module itkImageToImageFilterAPike
#endif
#ifdef SWIGPYTHON
%module itkImageToImageFilterAPython
#endif
#ifdef SWIGR
%module itkImageToImageFilterAR
#endif
#ifdef SWIGRUBY
%module itkImageToImageFilterARuby
#endif
#ifdef SWIGSEXP
%module itkImageToImageFilterASexp
#endif
#ifdef SWIGTCL
%module itkImageToImageFilterATcl
#endif
#ifdef SWIGXML
%module itkImageToImageFilterAXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkImage.i
%import wrap_ITKRegions.i
%import wrap_itkImageSource.i


%include itk.i
%include wrap_itkImageToImageFilterA_ext.i


 class itkImageToImageFilterICVF22ICVF22 : public itkImageSourceICVF22 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageCVF22 const * image);
     virtual void SetInput(unsigned int arg0, itkImageCVF22 const * image);
     itkImageCVF22 const * GetInput();
     itkImageCVF22 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageCVF22 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageCVF22 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterICVF22ICVF22(itkImageToImageFilterICVF22ICVF22 const & arg0);
     void operator=(itkImageToImageFilterICVF22ICVF22 const & arg0);
   protected:
     itkImageToImageFilterICVF22ICVF22();
     ~itkImageToImageFilterICVF22ICVF22();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterICVF22ICVF22_Pointer {
   public:
     itkImageToImageFilterICVF22ICVF22_Pointer();
     itkImageToImageFilterICVF22ICVF22_Pointer(itkImageToImageFilterICVF22ICVF22_Pointer const & p);
     itkImageToImageFilterICVF22ICVF22_Pointer(itkImageToImageFilterICVF22ICVF22 * p);
     ~itkImageToImageFilterICVF22ICVF22_Pointer();
     itkImageToImageFilterICVF22ICVF22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterICVF22ICVF22 * GetPointer() const;
     bool operator<(itkImageToImageFilterICVF22ICVF22_Pointer const & r) const;
     bool operator>(itkImageToImageFilterICVF22ICVF22_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterICVF22ICVF22_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterICVF22ICVF22_Pointer const & r) const;
     itkImageToImageFilterICVF22ICVF22_Pointer & operator=(itkImageToImageFilterICVF22ICVF22_Pointer const & r);
     itkImageToImageFilterICVF22ICVF22_Pointer & operator=(itkImageToImageFilterICVF22ICVF22 * r);
     itkImageToImageFilterICVF22ICVF22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterICVF22IVF22 : public itkImageSourceIVF22 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageCVF22 const * image);
     virtual void SetInput(unsigned int arg0, itkImageCVF22 const * image);
     itkImageCVF22 const * GetInput();
     itkImageCVF22 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageCVF22 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageCVF22 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterICVF22IVF22(itkImageToImageFilterICVF22IVF22 const & arg0);
     void operator=(itkImageToImageFilterICVF22IVF22 const & arg0);
   protected:
     itkImageToImageFilterICVF22IVF22();
     ~itkImageToImageFilterICVF22IVF22();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterICVF22IVF22_Pointer {
   public:
     itkImageToImageFilterICVF22IVF22_Pointer();
     itkImageToImageFilterICVF22IVF22_Pointer(itkImageToImageFilterICVF22IVF22_Pointer const & p);
     itkImageToImageFilterICVF22IVF22_Pointer(itkImageToImageFilterICVF22IVF22 * p);
     ~itkImageToImageFilterICVF22IVF22_Pointer();
     itkImageToImageFilterICVF22IVF22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterICVF22IVF22 * GetPointer() const;
     bool operator<(itkImageToImageFilterICVF22IVF22_Pointer const & r) const;
     bool operator>(itkImageToImageFilterICVF22IVF22_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterICVF22IVF22_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterICVF22IVF22_Pointer const & r) const;
     itkImageToImageFilterICVF22IVF22_Pointer & operator=(itkImageToImageFilterICVF22IVF22_Pointer const & r);
     itkImageToImageFilterICVF22IVF22_Pointer & operator=(itkImageToImageFilterICVF22IVF22 * r);
     itkImageToImageFilterICVF22IVF22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterICVF33ICVF33 : public itkImageSourceICVF33 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageCVF33 const * image);
     virtual void SetInput(unsigned int arg0, itkImageCVF33 const * image);
     itkImageCVF33 const * GetInput();
     itkImageCVF33 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageCVF33 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageCVF33 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterICVF33ICVF33(itkImageToImageFilterICVF33ICVF33 const & arg0);
     void operator=(itkImageToImageFilterICVF33ICVF33 const & arg0);
   protected:
     itkImageToImageFilterICVF33ICVF33();
     ~itkImageToImageFilterICVF33ICVF33();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterICVF33ICVF33_Pointer {
   public:
     itkImageToImageFilterICVF33ICVF33_Pointer();
     itkImageToImageFilterICVF33ICVF33_Pointer(itkImageToImageFilterICVF33ICVF33_Pointer const & p);
     itkImageToImageFilterICVF33ICVF33_Pointer(itkImageToImageFilterICVF33ICVF33 * p);
     ~itkImageToImageFilterICVF33ICVF33_Pointer();
     itkImageToImageFilterICVF33ICVF33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterICVF33ICVF33 * GetPointer() const;
     bool operator<(itkImageToImageFilterICVF33ICVF33_Pointer const & r) const;
     bool operator>(itkImageToImageFilterICVF33ICVF33_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterICVF33ICVF33_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterICVF33ICVF33_Pointer const & r) const;
     itkImageToImageFilterICVF33ICVF33_Pointer & operator=(itkImageToImageFilterICVF33ICVF33_Pointer const & r);
     itkImageToImageFilterICVF33ICVF33_Pointer & operator=(itkImageToImageFilterICVF33ICVF33 * r);
     itkImageToImageFilterICVF33ICVF33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterICVF33IVF33 : public itkImageSourceIVF33 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageCVF33 const * image);
     virtual void SetInput(unsigned int arg0, itkImageCVF33 const * image);
     itkImageCVF33 const * GetInput();
     itkImageCVF33 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageCVF33 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageCVF33 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterICVF33IVF33(itkImageToImageFilterICVF33IVF33 const & arg0);
     void operator=(itkImageToImageFilterICVF33IVF33 const & arg0);
   protected:
     itkImageToImageFilterICVF33IVF33();
     ~itkImageToImageFilterICVF33IVF33();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterICVF33IVF33_Pointer {
   public:
     itkImageToImageFilterICVF33IVF33_Pointer();
     itkImageToImageFilterICVF33IVF33_Pointer(itkImageToImageFilterICVF33IVF33_Pointer const & p);
     itkImageToImageFilterICVF33IVF33_Pointer(itkImageToImageFilterICVF33IVF33 * p);
     ~itkImageToImageFilterICVF33IVF33_Pointer();
     itkImageToImageFilterICVF33IVF33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterICVF33IVF33 * GetPointer() const;
     bool operator<(itkImageToImageFilterICVF33IVF33_Pointer const & r) const;
     bool operator>(itkImageToImageFilterICVF33IVF33_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterICVF33IVF33_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterICVF33IVF33_Pointer const & r) const;
     itkImageToImageFilterICVF33IVF33_Pointer & operator=(itkImageToImageFilterICVF33IVF33_Pointer const & r);
     itkImageToImageFilterICVF33IVF33_Pointer & operator=(itkImageToImageFilterICVF33IVF33 * r);
     itkImageToImageFilterICVF33IVF33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterID2ID2 : public itkImageSourceID2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageD2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageD2 const * image);
     itkImageD2 const * GetInput();
     itkImageD2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageD2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageD2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterID2ID2(itkImageToImageFilterID2ID2 const & arg0);
     void operator=(itkImageToImageFilterID2ID2 const & arg0);
   protected:
     itkImageToImageFilterID2ID2();
     ~itkImageToImageFilterID2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterID2ID2_Pointer {
   public:
     itkImageToImageFilterID2ID2_Pointer();
     itkImageToImageFilterID2ID2_Pointer(itkImageToImageFilterID2ID2_Pointer const & p);
     itkImageToImageFilterID2ID2_Pointer(itkImageToImageFilterID2ID2 * p);
     ~itkImageToImageFilterID2ID2_Pointer();
     itkImageToImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkImageToImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterID2ID2_Pointer const & r) const;
     itkImageToImageFilterID2ID2_Pointer & operator=(itkImageToImageFilterID2ID2_Pointer const & r);
     itkImageToImageFilterID2ID2_Pointer & operator=(itkImageToImageFilterID2ID2 * r);
     itkImageToImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterID2IF2 : public itkImageSourceIF2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageD2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageD2 const * image);
     itkImageD2 const * GetInput();
     itkImageD2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageD2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageD2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterID2IF2(itkImageToImageFilterID2IF2 const & arg0);
     void operator=(itkImageToImageFilterID2IF2 const & arg0);
   protected:
     itkImageToImageFilterID2IF2();
     ~itkImageToImageFilterID2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterID2IF2_Pointer {
   public:
     itkImageToImageFilterID2IF2_Pointer();
     itkImageToImageFilterID2IF2_Pointer(itkImageToImageFilterID2IF2_Pointer const & p);
     itkImageToImageFilterID2IF2_Pointer(itkImageToImageFilterID2IF2 * p);
     ~itkImageToImageFilterID2IF2_Pointer();
     itkImageToImageFilterID2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterID2IF2 * GetPointer() const;
     bool operator<(itkImageToImageFilterID2IF2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterID2IF2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterID2IF2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterID2IF2_Pointer const & r) const;
     itkImageToImageFilterID2IF2_Pointer & operator=(itkImageToImageFilterID2IF2_Pointer const & r);
     itkImageToImageFilterID2IF2_Pointer & operator=(itkImageToImageFilterID2IF2 * r);
     itkImageToImageFilterID2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterID2IUC2 : public itkImageSourceIUC2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageD2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageD2 const * image);
     itkImageD2 const * GetInput();
     itkImageD2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageD2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageD2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterID2IUC2(itkImageToImageFilterID2IUC2 const & arg0);
     void operator=(itkImageToImageFilterID2IUC2 const & arg0);
   protected:
     itkImageToImageFilterID2IUC2();
     ~itkImageToImageFilterID2IUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterID2IUC2_Pointer {
   public:
     itkImageToImageFilterID2IUC2_Pointer();
     itkImageToImageFilterID2IUC2_Pointer(itkImageToImageFilterID2IUC2_Pointer const & p);
     itkImageToImageFilterID2IUC2_Pointer(itkImageToImageFilterID2IUC2 * p);
     ~itkImageToImageFilterID2IUC2_Pointer();
     itkImageToImageFilterID2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterID2IUC2 * GetPointer() const;
     bool operator<(itkImageToImageFilterID2IUC2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterID2IUC2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterID2IUC2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterID2IUC2_Pointer const & r) const;
     itkImageToImageFilterID2IUC2_Pointer & operator=(itkImageToImageFilterID2IUC2_Pointer const & r);
     itkImageToImageFilterID2IUC2_Pointer & operator=(itkImageToImageFilterID2IUC2 * r);
     itkImageToImageFilterID2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterID2IUL2 : public itkImageSourceIUL2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageD2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageD2 const * image);
     itkImageD2 const * GetInput();
     itkImageD2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageD2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageD2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterID2IUL2(itkImageToImageFilterID2IUL2 const & arg0);
     void operator=(itkImageToImageFilterID2IUL2 const & arg0);
   protected:
     itkImageToImageFilterID2IUL2();
     ~itkImageToImageFilterID2IUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterID2IUL2_Pointer {
   public:
     itkImageToImageFilterID2IUL2_Pointer();
     itkImageToImageFilterID2IUL2_Pointer(itkImageToImageFilterID2IUL2_Pointer const & p);
     itkImageToImageFilterID2IUL2_Pointer(itkImageToImageFilterID2IUL2 * p);
     ~itkImageToImageFilterID2IUL2_Pointer();
     itkImageToImageFilterID2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterID2IUL2 * GetPointer() const;
     bool operator<(itkImageToImageFilterID2IUL2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterID2IUL2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterID2IUL2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterID2IUL2_Pointer const & r) const;
     itkImageToImageFilterID2IUL2_Pointer & operator=(itkImageToImageFilterID2IUL2_Pointer const & r);
     itkImageToImageFilterID2IUL2_Pointer & operator=(itkImageToImageFilterID2IUL2 * r);
     itkImageToImageFilterID2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterID2IUS2 : public itkImageSourceIUS2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageD2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageD2 const * image);
     itkImageD2 const * GetInput();
     itkImageD2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageD2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageD2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterID2IUS2(itkImageToImageFilterID2IUS2 const & arg0);
     void operator=(itkImageToImageFilterID2IUS2 const & arg0);
   protected:
     itkImageToImageFilterID2IUS2();
     ~itkImageToImageFilterID2IUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterID2IUS2_Pointer {
   public:
     itkImageToImageFilterID2IUS2_Pointer();
     itkImageToImageFilterID2IUS2_Pointer(itkImageToImageFilterID2IUS2_Pointer const & p);
     itkImageToImageFilterID2IUS2_Pointer(itkImageToImageFilterID2IUS2 * p);
     ~itkImageToImageFilterID2IUS2_Pointer();
     itkImageToImageFilterID2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterID2IUS2 * GetPointer() const;
     bool operator<(itkImageToImageFilterID2IUS2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterID2IUS2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterID2IUS2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterID2IUS2_Pointer const & r) const;
     itkImageToImageFilterID2IUS2_Pointer & operator=(itkImageToImageFilterID2IUS2_Pointer const & r);
     itkImageToImageFilterID2IUS2_Pointer & operator=(itkImageToImageFilterID2IUS2 * r);
     itkImageToImageFilterID2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterID3ID3 : public itkImageSourceID3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageD3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageD3 const * image);
     itkImageD3 const * GetInput();
     itkImageD3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageD3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageD3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterID3ID3(itkImageToImageFilterID3ID3 const & arg0);
     void operator=(itkImageToImageFilterID3ID3 const & arg0);
   protected:
     itkImageToImageFilterID3ID3();
     ~itkImageToImageFilterID3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterID3ID3_Pointer {
   public:
     itkImageToImageFilterID3ID3_Pointer();
     itkImageToImageFilterID3ID3_Pointer(itkImageToImageFilterID3ID3_Pointer const & p);
     itkImageToImageFilterID3ID3_Pointer(itkImageToImageFilterID3ID3 * p);
     ~itkImageToImageFilterID3ID3_Pointer();
     itkImageToImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkImageToImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterID3ID3_Pointer const & r) const;
     itkImageToImageFilterID3ID3_Pointer & operator=(itkImageToImageFilterID3ID3_Pointer const & r);
     itkImageToImageFilterID3ID3_Pointer & operator=(itkImageToImageFilterID3ID3 * r);
     itkImageToImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterID3IF3 : public itkImageSourceIF3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageD3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageD3 const * image);
     itkImageD3 const * GetInput();
     itkImageD3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageD3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageD3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterID3IF3(itkImageToImageFilterID3IF3 const & arg0);
     void operator=(itkImageToImageFilterID3IF3 const & arg0);
   protected:
     itkImageToImageFilterID3IF3();
     ~itkImageToImageFilterID3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterID3IF3_Pointer {
   public:
     itkImageToImageFilterID3IF3_Pointer();
     itkImageToImageFilterID3IF3_Pointer(itkImageToImageFilterID3IF3_Pointer const & p);
     itkImageToImageFilterID3IF3_Pointer(itkImageToImageFilterID3IF3 * p);
     ~itkImageToImageFilterID3IF3_Pointer();
     itkImageToImageFilterID3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterID3IF3 * GetPointer() const;
     bool operator<(itkImageToImageFilterID3IF3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterID3IF3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterID3IF3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterID3IF3_Pointer const & r) const;
     itkImageToImageFilterID3IF3_Pointer & operator=(itkImageToImageFilterID3IF3_Pointer const & r);
     itkImageToImageFilterID3IF3_Pointer & operator=(itkImageToImageFilterID3IF3 * r);
     itkImageToImageFilterID3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterID3IUC3 : public itkImageSourceIUC3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageD3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageD3 const * image);
     itkImageD3 const * GetInput();
     itkImageD3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageD3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageD3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterID3IUC3(itkImageToImageFilterID3IUC3 const & arg0);
     void operator=(itkImageToImageFilterID3IUC3 const & arg0);
   protected:
     itkImageToImageFilterID3IUC3();
     ~itkImageToImageFilterID3IUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterID3IUC3_Pointer {
   public:
     itkImageToImageFilterID3IUC3_Pointer();
     itkImageToImageFilterID3IUC3_Pointer(itkImageToImageFilterID3IUC3_Pointer const & p);
     itkImageToImageFilterID3IUC3_Pointer(itkImageToImageFilterID3IUC3 * p);
     ~itkImageToImageFilterID3IUC3_Pointer();
     itkImageToImageFilterID3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterID3IUC3 * GetPointer() const;
     bool operator<(itkImageToImageFilterID3IUC3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterID3IUC3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterID3IUC3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterID3IUC3_Pointer const & r) const;
     itkImageToImageFilterID3IUC3_Pointer & operator=(itkImageToImageFilterID3IUC3_Pointer const & r);
     itkImageToImageFilterID3IUC3_Pointer & operator=(itkImageToImageFilterID3IUC3 * r);
     itkImageToImageFilterID3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterID3IUL3 : public itkImageSourceIUL3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageD3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageD3 const * image);
     itkImageD3 const * GetInput();
     itkImageD3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageD3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageD3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterID3IUL3(itkImageToImageFilterID3IUL3 const & arg0);
     void operator=(itkImageToImageFilterID3IUL3 const & arg0);
   protected:
     itkImageToImageFilterID3IUL3();
     ~itkImageToImageFilterID3IUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterID3IUL3_Pointer {
   public:
     itkImageToImageFilterID3IUL3_Pointer();
     itkImageToImageFilterID3IUL3_Pointer(itkImageToImageFilterID3IUL3_Pointer const & p);
     itkImageToImageFilterID3IUL3_Pointer(itkImageToImageFilterID3IUL3 * p);
     ~itkImageToImageFilterID3IUL3_Pointer();
     itkImageToImageFilterID3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterID3IUL3 * GetPointer() const;
     bool operator<(itkImageToImageFilterID3IUL3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterID3IUL3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterID3IUL3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterID3IUL3_Pointer const & r) const;
     itkImageToImageFilterID3IUL3_Pointer & operator=(itkImageToImageFilterID3IUL3_Pointer const & r);
     itkImageToImageFilterID3IUL3_Pointer & operator=(itkImageToImageFilterID3IUL3 * r);
     itkImageToImageFilterID3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterID3IUS3 : public itkImageSourceIUS3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageD3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageD3 const * image);
     itkImageD3 const * GetInput();
     itkImageD3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageD3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageD3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterID3IUS3(itkImageToImageFilterID3IUS3 const & arg0);
     void operator=(itkImageToImageFilterID3IUS3 const & arg0);
   protected:
     itkImageToImageFilterID3IUS3();
     ~itkImageToImageFilterID3IUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterID3IUS3_Pointer {
   public:
     itkImageToImageFilterID3IUS3_Pointer();
     itkImageToImageFilterID3IUS3_Pointer(itkImageToImageFilterID3IUS3_Pointer const & p);
     itkImageToImageFilterID3IUS3_Pointer(itkImageToImageFilterID3IUS3 * p);
     ~itkImageToImageFilterID3IUS3_Pointer();
     itkImageToImageFilterID3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterID3IUS3 * GetPointer() const;
     bool operator<(itkImageToImageFilterID3IUS3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterID3IUS3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterID3IUS3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterID3IUS3_Pointer const & r) const;
     itkImageToImageFilterID3IUS3_Pointer & operator=(itkImageToImageFilterID3IUS3_Pointer const & r);
     itkImageToImageFilterID3IUS3_Pointer & operator=(itkImageToImageFilterID3IUS3 * r);
     itkImageToImageFilterID3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIF2ID2 : public itkImageSourceID2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageF2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageF2 const * image);
     itkImageF2 const * GetInput();
     itkImageF2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageF2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageF2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIF2ID2(itkImageToImageFilterIF2ID2 const & arg0);
     void operator=(itkImageToImageFilterIF2ID2 const & arg0);
   protected:
     itkImageToImageFilterIF2ID2();
     ~itkImageToImageFilterIF2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIF2ID2_Pointer {
   public:
     itkImageToImageFilterIF2ID2_Pointer();
     itkImageToImageFilterIF2ID2_Pointer(itkImageToImageFilterIF2ID2_Pointer const & p);
     itkImageToImageFilterIF2ID2_Pointer(itkImageToImageFilterIF2ID2 * p);
     ~itkImageToImageFilterIF2ID2_Pointer();
     itkImageToImageFilterIF2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIF2ID2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIF2ID2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIF2ID2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIF2ID2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIF2ID2_Pointer const & r) const;
     itkImageToImageFilterIF2ID2_Pointer & operator=(itkImageToImageFilterIF2ID2_Pointer const & r);
     itkImageToImageFilterIF2ID2_Pointer & operator=(itkImageToImageFilterIF2ID2 * r);
     itkImageToImageFilterIF2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIF2IF2 : public itkImageSourceIF2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageF2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageF2 const * image);
     itkImageF2 const * GetInput();
     itkImageF2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageF2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageF2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIF2IF2(itkImageToImageFilterIF2IF2 const & arg0);
     void operator=(itkImageToImageFilterIF2IF2 const & arg0);
   protected:
     itkImageToImageFilterIF2IF2();
     ~itkImageToImageFilterIF2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIF2IF2_Pointer {
   public:
     itkImageToImageFilterIF2IF2_Pointer();
     itkImageToImageFilterIF2IF2_Pointer(itkImageToImageFilterIF2IF2_Pointer const & p);
     itkImageToImageFilterIF2IF2_Pointer(itkImageToImageFilterIF2IF2 * p);
     ~itkImageToImageFilterIF2IF2_Pointer();
     itkImageToImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIF2IF2_Pointer const & r) const;
     itkImageToImageFilterIF2IF2_Pointer & operator=(itkImageToImageFilterIF2IF2_Pointer const & r);
     itkImageToImageFilterIF2IF2_Pointer & operator=(itkImageToImageFilterIF2IF2 * r);
     itkImageToImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIF2IUC2 : public itkImageSourceIUC2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageF2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageF2 const * image);
     itkImageF2 const * GetInput();
     itkImageF2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageF2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageF2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIF2IUC2(itkImageToImageFilterIF2IUC2 const & arg0);
     void operator=(itkImageToImageFilterIF2IUC2 const & arg0);
   protected:
     itkImageToImageFilterIF2IUC2();
     ~itkImageToImageFilterIF2IUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIF2IUC2_Pointer {
   public:
     itkImageToImageFilterIF2IUC2_Pointer();
     itkImageToImageFilterIF2IUC2_Pointer(itkImageToImageFilterIF2IUC2_Pointer const & p);
     itkImageToImageFilterIF2IUC2_Pointer(itkImageToImageFilterIF2IUC2 * p);
     ~itkImageToImageFilterIF2IUC2_Pointer();
     itkImageToImageFilterIF2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIF2IUC2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIF2IUC2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIF2IUC2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIF2IUC2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIF2IUC2_Pointer const & r) const;
     itkImageToImageFilterIF2IUC2_Pointer & operator=(itkImageToImageFilterIF2IUC2_Pointer const & r);
     itkImageToImageFilterIF2IUC2_Pointer & operator=(itkImageToImageFilterIF2IUC2 * r);
     itkImageToImageFilterIF2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIF2IUL2 : public itkImageSourceIUL2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageF2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageF2 const * image);
     itkImageF2 const * GetInput();
     itkImageF2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageF2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageF2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIF2IUL2(itkImageToImageFilterIF2IUL2 const & arg0);
     void operator=(itkImageToImageFilterIF2IUL2 const & arg0);
   protected:
     itkImageToImageFilterIF2IUL2();
     ~itkImageToImageFilterIF2IUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIF2IUL2_Pointer {
   public:
     itkImageToImageFilterIF2IUL2_Pointer();
     itkImageToImageFilterIF2IUL2_Pointer(itkImageToImageFilterIF2IUL2_Pointer const & p);
     itkImageToImageFilterIF2IUL2_Pointer(itkImageToImageFilterIF2IUL2 * p);
     ~itkImageToImageFilterIF2IUL2_Pointer();
     itkImageToImageFilterIF2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIF2IUL2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIF2IUL2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIF2IUL2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIF2IUL2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIF2IUL2_Pointer const & r) const;
     itkImageToImageFilterIF2IUL2_Pointer & operator=(itkImageToImageFilterIF2IUL2_Pointer const & r);
     itkImageToImageFilterIF2IUL2_Pointer & operator=(itkImageToImageFilterIF2IUL2 * r);
     itkImageToImageFilterIF2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIF2IUS2 : public itkImageSourceIUS2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageF2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageF2 const * image);
     itkImageF2 const * GetInput();
     itkImageF2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageF2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageF2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIF2IUS2(itkImageToImageFilterIF2IUS2 const & arg0);
     void operator=(itkImageToImageFilterIF2IUS2 const & arg0);
   protected:
     itkImageToImageFilterIF2IUS2();
     ~itkImageToImageFilterIF2IUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIF2IUS2_Pointer {
   public:
     itkImageToImageFilterIF2IUS2_Pointer();
     itkImageToImageFilterIF2IUS2_Pointer(itkImageToImageFilterIF2IUS2_Pointer const & p);
     itkImageToImageFilterIF2IUS2_Pointer(itkImageToImageFilterIF2IUS2 * p);
     ~itkImageToImageFilterIF2IUS2_Pointer();
     itkImageToImageFilterIF2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIF2IUS2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIF2IUS2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIF2IUS2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIF2IUS2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIF2IUS2_Pointer const & r) const;
     itkImageToImageFilterIF2IUS2_Pointer & operator=(itkImageToImageFilterIF2IUS2_Pointer const & r);
     itkImageToImageFilterIF2IUS2_Pointer & operator=(itkImageToImageFilterIF2IUS2 * r);
     itkImageToImageFilterIF2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIF3ID3 : public itkImageSourceID3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageF3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageF3 const * image);
     itkImageF3 const * GetInput();
     itkImageF3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageF3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageF3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIF3ID3(itkImageToImageFilterIF3ID3 const & arg0);
     void operator=(itkImageToImageFilterIF3ID3 const & arg0);
   protected:
     itkImageToImageFilterIF3ID3();
     ~itkImageToImageFilterIF3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIF3ID3_Pointer {
   public:
     itkImageToImageFilterIF3ID3_Pointer();
     itkImageToImageFilterIF3ID3_Pointer(itkImageToImageFilterIF3ID3_Pointer const & p);
     itkImageToImageFilterIF3ID3_Pointer(itkImageToImageFilterIF3ID3 * p);
     ~itkImageToImageFilterIF3ID3_Pointer();
     itkImageToImageFilterIF3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIF3ID3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIF3ID3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIF3ID3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIF3ID3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIF3ID3_Pointer const & r) const;
     itkImageToImageFilterIF3ID3_Pointer & operator=(itkImageToImageFilterIF3ID3_Pointer const & r);
     itkImageToImageFilterIF3ID3_Pointer & operator=(itkImageToImageFilterIF3ID3 * r);
     itkImageToImageFilterIF3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIF3IF3 : public itkImageSourceIF3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageF3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageF3 const * image);
     itkImageF3 const * GetInput();
     itkImageF3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageF3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageF3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIF3IF3(itkImageToImageFilterIF3IF3 const & arg0);
     void operator=(itkImageToImageFilterIF3IF3 const & arg0);
   protected:
     itkImageToImageFilterIF3IF3();
     ~itkImageToImageFilterIF3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIF3IF3_Pointer {
   public:
     itkImageToImageFilterIF3IF3_Pointer();
     itkImageToImageFilterIF3IF3_Pointer(itkImageToImageFilterIF3IF3_Pointer const & p);
     itkImageToImageFilterIF3IF3_Pointer(itkImageToImageFilterIF3IF3 * p);
     ~itkImageToImageFilterIF3IF3_Pointer();
     itkImageToImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIF3IF3_Pointer const & r) const;
     itkImageToImageFilterIF3IF3_Pointer & operator=(itkImageToImageFilterIF3IF3_Pointer const & r);
     itkImageToImageFilterIF3IF3_Pointer & operator=(itkImageToImageFilterIF3IF3 * r);
     itkImageToImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIF3IUC3 : public itkImageSourceIUC3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageF3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageF3 const * image);
     itkImageF3 const * GetInput();
     itkImageF3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageF3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageF3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIF3IUC3(itkImageToImageFilterIF3IUC3 const & arg0);
     void operator=(itkImageToImageFilterIF3IUC3 const & arg0);
   protected:
     itkImageToImageFilterIF3IUC3();
     ~itkImageToImageFilterIF3IUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIF3IUC3_Pointer {
   public:
     itkImageToImageFilterIF3IUC3_Pointer();
     itkImageToImageFilterIF3IUC3_Pointer(itkImageToImageFilterIF3IUC3_Pointer const & p);
     itkImageToImageFilterIF3IUC3_Pointer(itkImageToImageFilterIF3IUC3 * p);
     ~itkImageToImageFilterIF3IUC3_Pointer();
     itkImageToImageFilterIF3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIF3IUC3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIF3IUC3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIF3IUC3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIF3IUC3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIF3IUC3_Pointer const & r) const;
     itkImageToImageFilterIF3IUC3_Pointer & operator=(itkImageToImageFilterIF3IUC3_Pointer const & r);
     itkImageToImageFilterIF3IUC3_Pointer & operator=(itkImageToImageFilterIF3IUC3 * r);
     itkImageToImageFilterIF3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIF3IUL3 : public itkImageSourceIUL3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageF3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageF3 const * image);
     itkImageF3 const * GetInput();
     itkImageF3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageF3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageF3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIF3IUL3(itkImageToImageFilterIF3IUL3 const & arg0);
     void operator=(itkImageToImageFilterIF3IUL3 const & arg0);
   protected:
     itkImageToImageFilterIF3IUL3();
     ~itkImageToImageFilterIF3IUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIF3IUL3_Pointer {
   public:
     itkImageToImageFilterIF3IUL3_Pointer();
     itkImageToImageFilterIF3IUL3_Pointer(itkImageToImageFilterIF3IUL3_Pointer const & p);
     itkImageToImageFilterIF3IUL3_Pointer(itkImageToImageFilterIF3IUL3 * p);
     ~itkImageToImageFilterIF3IUL3_Pointer();
     itkImageToImageFilterIF3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIF3IUL3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIF3IUL3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIF3IUL3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIF3IUL3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIF3IUL3_Pointer const & r) const;
     itkImageToImageFilterIF3IUL3_Pointer & operator=(itkImageToImageFilterIF3IUL3_Pointer const & r);
     itkImageToImageFilterIF3IUL3_Pointer & operator=(itkImageToImageFilterIF3IUL3 * r);
     itkImageToImageFilterIF3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIF3IUS3 : public itkImageSourceIUS3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageF3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageF3 const * image);
     itkImageF3 const * GetInput();
     itkImageF3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageF3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageF3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIF3IUS3(itkImageToImageFilterIF3IUS3 const & arg0);
     void operator=(itkImageToImageFilterIF3IUS3 const & arg0);
   protected:
     itkImageToImageFilterIF3IUS3();
     ~itkImageToImageFilterIF3IUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIF3IUS3_Pointer {
   public:
     itkImageToImageFilterIF3IUS3_Pointer();
     itkImageToImageFilterIF3IUS3_Pointer(itkImageToImageFilterIF3IUS3_Pointer const & p);
     itkImageToImageFilterIF3IUS3_Pointer(itkImageToImageFilterIF3IUS3 * p);
     ~itkImageToImageFilterIF3IUS3_Pointer();
     itkImageToImageFilterIF3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIF3IUS3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIF3IUS3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIF3IUS3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIF3IUS3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIF3IUS3_Pointer const & r) const;
     itkImageToImageFilterIF3IUS3_Pointer & operator=(itkImageToImageFilterIF3IUS3_Pointer const & r);
     itkImageToImageFilterIF3IUS3_Pointer & operator=(itkImageToImageFilterIF3IUS3 * r);
     itkImageToImageFilterIF3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIRGBAUC2IRGBAUC2 : public itkImageSourceIRGBAUC2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageRGBAUC2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageRGBAUC2 const * image);
     itkImageRGBAUC2 const * GetInput();
     itkImageRGBAUC2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageRGBAUC2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageRGBAUC2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIRGBAUC2IRGBAUC2(itkImageToImageFilterIRGBAUC2IRGBAUC2 const & arg0);
     void operator=(itkImageToImageFilterIRGBAUC2IRGBAUC2 const & arg0);
   protected:
     itkImageToImageFilterIRGBAUC2IRGBAUC2();
     ~itkImageToImageFilterIRGBAUC2IRGBAUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIRGBAUC2IRGBAUC2_Pointer {
   public:
     itkImageToImageFilterIRGBAUC2IRGBAUC2_Pointer();
     itkImageToImageFilterIRGBAUC2IRGBAUC2_Pointer(itkImageToImageFilterIRGBAUC2IRGBAUC2_Pointer const & p);
     itkImageToImageFilterIRGBAUC2IRGBAUC2_Pointer(itkImageToImageFilterIRGBAUC2IRGBAUC2 * p);
     ~itkImageToImageFilterIRGBAUC2IRGBAUC2_Pointer();
     itkImageToImageFilterIRGBAUC2IRGBAUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIRGBAUC2IRGBAUC2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIRGBAUC2IRGBAUC2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIRGBAUC2IRGBAUC2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIRGBAUC2IRGBAUC2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIRGBAUC2IRGBAUC2_Pointer const & r) const;
     itkImageToImageFilterIRGBAUC2IRGBAUC2_Pointer & operator=(itkImageToImageFilterIRGBAUC2IRGBAUC2_Pointer const & r);
     itkImageToImageFilterIRGBAUC2IRGBAUC2_Pointer & operator=(itkImageToImageFilterIRGBAUC2IRGBAUC2 * r);
     itkImageToImageFilterIRGBAUC2IRGBAUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIRGBAUC2IRGBAUS2 : public itkImageSourceIRGBAUS2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageRGBAUC2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageRGBAUC2 const * image);
     itkImageRGBAUC2 const * GetInput();
     itkImageRGBAUC2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageRGBAUC2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageRGBAUC2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIRGBAUC2IRGBAUS2(itkImageToImageFilterIRGBAUC2IRGBAUS2 const & arg0);
     void operator=(itkImageToImageFilterIRGBAUC2IRGBAUS2 const & arg0);
   protected:
     itkImageToImageFilterIRGBAUC2IRGBAUS2();
     ~itkImageToImageFilterIRGBAUC2IRGBAUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIRGBAUC2IRGBAUS2_Pointer {
   public:
     itkImageToImageFilterIRGBAUC2IRGBAUS2_Pointer();
     itkImageToImageFilterIRGBAUC2IRGBAUS2_Pointer(itkImageToImageFilterIRGBAUC2IRGBAUS2_Pointer const & p);
     itkImageToImageFilterIRGBAUC2IRGBAUS2_Pointer(itkImageToImageFilterIRGBAUC2IRGBAUS2 * p);
     ~itkImageToImageFilterIRGBAUC2IRGBAUS2_Pointer();
     itkImageToImageFilterIRGBAUC2IRGBAUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIRGBAUC2IRGBAUS2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIRGBAUC2IRGBAUS2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIRGBAUC2IRGBAUS2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIRGBAUC2IRGBAUS2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIRGBAUC2IRGBAUS2_Pointer const & r) const;
     itkImageToImageFilterIRGBAUC2IRGBAUS2_Pointer & operator=(itkImageToImageFilterIRGBAUC2IRGBAUS2_Pointer const & r);
     itkImageToImageFilterIRGBAUC2IRGBAUS2_Pointer & operator=(itkImageToImageFilterIRGBAUC2IRGBAUS2 * r);
     itkImageToImageFilterIRGBAUC2IRGBAUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIRGBAUC3IRGBAUC3 : public itkImageSourceIRGBAUC3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageRGBAUC3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageRGBAUC3 const * image);
     itkImageRGBAUC3 const * GetInput();
     itkImageRGBAUC3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageRGBAUC3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageRGBAUC3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIRGBAUC3IRGBAUC3(itkImageToImageFilterIRGBAUC3IRGBAUC3 const & arg0);
     void operator=(itkImageToImageFilterIRGBAUC3IRGBAUC3 const & arg0);
   protected:
     itkImageToImageFilterIRGBAUC3IRGBAUC3();
     ~itkImageToImageFilterIRGBAUC3IRGBAUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIRGBAUC3IRGBAUC3_Pointer {
   public:
     itkImageToImageFilterIRGBAUC3IRGBAUC3_Pointer();
     itkImageToImageFilterIRGBAUC3IRGBAUC3_Pointer(itkImageToImageFilterIRGBAUC3IRGBAUC3_Pointer const & p);
     itkImageToImageFilterIRGBAUC3IRGBAUC3_Pointer(itkImageToImageFilterIRGBAUC3IRGBAUC3 * p);
     ~itkImageToImageFilterIRGBAUC3IRGBAUC3_Pointer();
     itkImageToImageFilterIRGBAUC3IRGBAUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIRGBAUC3IRGBAUC3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIRGBAUC3IRGBAUC3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIRGBAUC3IRGBAUC3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIRGBAUC3IRGBAUC3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIRGBAUC3IRGBAUC3_Pointer const & r) const;
     itkImageToImageFilterIRGBAUC3IRGBAUC3_Pointer & operator=(itkImageToImageFilterIRGBAUC3IRGBAUC3_Pointer const & r);
     itkImageToImageFilterIRGBAUC3IRGBAUC3_Pointer & operator=(itkImageToImageFilterIRGBAUC3IRGBAUC3 * r);
     itkImageToImageFilterIRGBAUC3IRGBAUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIRGBAUC3IRGBAUS3 : public itkImageSourceIRGBAUS3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageRGBAUC3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageRGBAUC3 const * image);
     itkImageRGBAUC3 const * GetInput();
     itkImageRGBAUC3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageRGBAUC3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageRGBAUC3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIRGBAUC3IRGBAUS3(itkImageToImageFilterIRGBAUC3IRGBAUS3 const & arg0);
     void operator=(itkImageToImageFilterIRGBAUC3IRGBAUS3 const & arg0);
   protected:
     itkImageToImageFilterIRGBAUC3IRGBAUS3();
     ~itkImageToImageFilterIRGBAUC3IRGBAUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIRGBAUC3IRGBAUS3_Pointer {
   public:
     itkImageToImageFilterIRGBAUC3IRGBAUS3_Pointer();
     itkImageToImageFilterIRGBAUC3IRGBAUS3_Pointer(itkImageToImageFilterIRGBAUC3IRGBAUS3_Pointer const & p);
     itkImageToImageFilterIRGBAUC3IRGBAUS3_Pointer(itkImageToImageFilterIRGBAUC3IRGBAUS3 * p);
     ~itkImageToImageFilterIRGBAUC3IRGBAUS3_Pointer();
     itkImageToImageFilterIRGBAUC3IRGBAUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIRGBAUC3IRGBAUS3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIRGBAUC3IRGBAUS3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIRGBAUC3IRGBAUS3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIRGBAUC3IRGBAUS3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIRGBAUC3IRGBAUS3_Pointer const & r) const;
     itkImageToImageFilterIRGBAUC3IRGBAUS3_Pointer & operator=(itkImageToImageFilterIRGBAUC3IRGBAUS3_Pointer const & r);
     itkImageToImageFilterIRGBAUC3IRGBAUS3_Pointer & operator=(itkImageToImageFilterIRGBAUC3IRGBAUS3 * r);
     itkImageToImageFilterIRGBAUC3IRGBAUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIRGBAUS2IRGBAUC2 : public itkImageSourceIRGBAUC2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageRGBAUS2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageRGBAUS2 const * image);
     itkImageRGBAUS2 const * GetInput();
     itkImageRGBAUS2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageRGBAUS2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageRGBAUS2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIRGBAUS2IRGBAUC2(itkImageToImageFilterIRGBAUS2IRGBAUC2 const & arg0);
     void operator=(itkImageToImageFilterIRGBAUS2IRGBAUC2 const & arg0);
   protected:
     itkImageToImageFilterIRGBAUS2IRGBAUC2();
     ~itkImageToImageFilterIRGBAUS2IRGBAUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIRGBAUS2IRGBAUC2_Pointer {
   public:
     itkImageToImageFilterIRGBAUS2IRGBAUC2_Pointer();
     itkImageToImageFilterIRGBAUS2IRGBAUC2_Pointer(itkImageToImageFilterIRGBAUS2IRGBAUC2_Pointer const & p);
     itkImageToImageFilterIRGBAUS2IRGBAUC2_Pointer(itkImageToImageFilterIRGBAUS2IRGBAUC2 * p);
     ~itkImageToImageFilterIRGBAUS2IRGBAUC2_Pointer();
     itkImageToImageFilterIRGBAUS2IRGBAUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIRGBAUS2IRGBAUC2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIRGBAUS2IRGBAUC2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIRGBAUS2IRGBAUC2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIRGBAUS2IRGBAUC2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIRGBAUS2IRGBAUC2_Pointer const & r) const;
     itkImageToImageFilterIRGBAUS2IRGBAUC2_Pointer & operator=(itkImageToImageFilterIRGBAUS2IRGBAUC2_Pointer const & r);
     itkImageToImageFilterIRGBAUS2IRGBAUC2_Pointer & operator=(itkImageToImageFilterIRGBAUS2IRGBAUC2 * r);
     itkImageToImageFilterIRGBAUS2IRGBAUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIRGBAUS2IRGBAUS2 : public itkImageSourceIRGBAUS2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageRGBAUS2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageRGBAUS2 const * image);
     itkImageRGBAUS2 const * GetInput();
     itkImageRGBAUS2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageRGBAUS2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageRGBAUS2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIRGBAUS2IRGBAUS2(itkImageToImageFilterIRGBAUS2IRGBAUS2 const & arg0);
     void operator=(itkImageToImageFilterIRGBAUS2IRGBAUS2 const & arg0);
   protected:
     itkImageToImageFilterIRGBAUS2IRGBAUS2();
     ~itkImageToImageFilterIRGBAUS2IRGBAUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIRGBAUS2IRGBAUS2_Pointer {
   public:
     itkImageToImageFilterIRGBAUS2IRGBAUS2_Pointer();
     itkImageToImageFilterIRGBAUS2IRGBAUS2_Pointer(itkImageToImageFilterIRGBAUS2IRGBAUS2_Pointer const & p);
     itkImageToImageFilterIRGBAUS2IRGBAUS2_Pointer(itkImageToImageFilterIRGBAUS2IRGBAUS2 * p);
     ~itkImageToImageFilterIRGBAUS2IRGBAUS2_Pointer();
     itkImageToImageFilterIRGBAUS2IRGBAUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIRGBAUS2IRGBAUS2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIRGBAUS2IRGBAUS2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIRGBAUS2IRGBAUS2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIRGBAUS2IRGBAUS2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIRGBAUS2IRGBAUS2_Pointer const & r) const;
     itkImageToImageFilterIRGBAUS2IRGBAUS2_Pointer & operator=(itkImageToImageFilterIRGBAUS2IRGBAUS2_Pointer const & r);
     itkImageToImageFilterIRGBAUS2IRGBAUS2_Pointer & operator=(itkImageToImageFilterIRGBAUS2IRGBAUS2 * r);
     itkImageToImageFilterIRGBAUS2IRGBAUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIRGBAUS3IRGBAUC3 : public itkImageSourceIRGBAUC3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageRGBAUS3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageRGBAUS3 const * image);
     itkImageRGBAUS3 const * GetInput();
     itkImageRGBAUS3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageRGBAUS3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageRGBAUS3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIRGBAUS3IRGBAUC3(itkImageToImageFilterIRGBAUS3IRGBAUC3 const & arg0);
     void operator=(itkImageToImageFilterIRGBAUS3IRGBAUC3 const & arg0);
   protected:
     itkImageToImageFilterIRGBAUS3IRGBAUC3();
     ~itkImageToImageFilterIRGBAUS3IRGBAUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIRGBAUS3IRGBAUC3_Pointer {
   public:
     itkImageToImageFilterIRGBAUS3IRGBAUC3_Pointer();
     itkImageToImageFilterIRGBAUS3IRGBAUC3_Pointer(itkImageToImageFilterIRGBAUS3IRGBAUC3_Pointer const & p);
     itkImageToImageFilterIRGBAUS3IRGBAUC3_Pointer(itkImageToImageFilterIRGBAUS3IRGBAUC3 * p);
     ~itkImageToImageFilterIRGBAUS3IRGBAUC3_Pointer();
     itkImageToImageFilterIRGBAUS3IRGBAUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIRGBAUS3IRGBAUC3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIRGBAUS3IRGBAUC3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIRGBAUS3IRGBAUC3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIRGBAUS3IRGBAUC3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIRGBAUS3IRGBAUC3_Pointer const & r) const;
     itkImageToImageFilterIRGBAUS3IRGBAUC3_Pointer & operator=(itkImageToImageFilterIRGBAUS3IRGBAUC3_Pointer const & r);
     itkImageToImageFilterIRGBAUS3IRGBAUC3_Pointer & operator=(itkImageToImageFilterIRGBAUS3IRGBAUC3 * r);
     itkImageToImageFilterIRGBAUS3IRGBAUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIRGBAUS3IRGBAUS3 : public itkImageSourceIRGBAUS3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageRGBAUS3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageRGBAUS3 const * image);
     itkImageRGBAUS3 const * GetInput();
     itkImageRGBAUS3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageRGBAUS3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageRGBAUS3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIRGBAUS3IRGBAUS3(itkImageToImageFilterIRGBAUS3IRGBAUS3 const & arg0);
     void operator=(itkImageToImageFilterIRGBAUS3IRGBAUS3 const & arg0);
   protected:
     itkImageToImageFilterIRGBAUS3IRGBAUS3();
     ~itkImageToImageFilterIRGBAUS3IRGBAUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIRGBAUS3IRGBAUS3_Pointer {
   public:
     itkImageToImageFilterIRGBAUS3IRGBAUS3_Pointer();
     itkImageToImageFilterIRGBAUS3IRGBAUS3_Pointer(itkImageToImageFilterIRGBAUS3IRGBAUS3_Pointer const & p);
     itkImageToImageFilterIRGBAUS3IRGBAUS3_Pointer(itkImageToImageFilterIRGBAUS3IRGBAUS3 * p);
     ~itkImageToImageFilterIRGBAUS3IRGBAUS3_Pointer();
     itkImageToImageFilterIRGBAUS3IRGBAUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIRGBAUS3IRGBAUS3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIRGBAUS3IRGBAUS3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIRGBAUS3IRGBAUS3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIRGBAUS3IRGBAUS3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIRGBAUS3IRGBAUS3_Pointer const & r) const;
     itkImageToImageFilterIRGBAUS3IRGBAUS3_Pointer & operator=(itkImageToImageFilterIRGBAUS3IRGBAUS3_Pointer const & r);
     itkImageToImageFilterIRGBAUS3IRGBAUS3_Pointer & operator=(itkImageToImageFilterIRGBAUS3IRGBAUS3 * r);
     itkImageToImageFilterIRGBAUS3IRGBAUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIRGBUC2IRGBUC2 : public itkImageSourceIRGBUC2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageRGBUC2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageRGBUC2 const * image);
     itkImageRGBUC2 const * GetInput();
     itkImageRGBUC2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageRGBUC2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageRGBUC2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIRGBUC2IRGBUC2(itkImageToImageFilterIRGBUC2IRGBUC2 const & arg0);
     void operator=(itkImageToImageFilterIRGBUC2IRGBUC2 const & arg0);
   protected:
     itkImageToImageFilterIRGBUC2IRGBUC2();
     ~itkImageToImageFilterIRGBUC2IRGBUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIRGBUC2IRGBUC2_Pointer {
   public:
     itkImageToImageFilterIRGBUC2IRGBUC2_Pointer();
     itkImageToImageFilterIRGBUC2IRGBUC2_Pointer(itkImageToImageFilterIRGBUC2IRGBUC2_Pointer const & p);
     itkImageToImageFilterIRGBUC2IRGBUC2_Pointer(itkImageToImageFilterIRGBUC2IRGBUC2 * p);
     ~itkImageToImageFilterIRGBUC2IRGBUC2_Pointer();
     itkImageToImageFilterIRGBUC2IRGBUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIRGBUC2IRGBUC2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIRGBUC2IRGBUC2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIRGBUC2IRGBUC2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIRGBUC2IRGBUC2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIRGBUC2IRGBUC2_Pointer const & r) const;
     itkImageToImageFilterIRGBUC2IRGBUC2_Pointer & operator=(itkImageToImageFilterIRGBUC2IRGBUC2_Pointer const & r);
     itkImageToImageFilterIRGBUC2IRGBUC2_Pointer & operator=(itkImageToImageFilterIRGBUC2IRGBUC2 * r);
     itkImageToImageFilterIRGBUC2IRGBUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIRGBUC2IRGBUS2 : public itkImageSourceIRGBUS2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageRGBUC2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageRGBUC2 const * image);
     itkImageRGBUC2 const * GetInput();
     itkImageRGBUC2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageRGBUC2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageRGBUC2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIRGBUC2IRGBUS2(itkImageToImageFilterIRGBUC2IRGBUS2 const & arg0);
     void operator=(itkImageToImageFilterIRGBUC2IRGBUS2 const & arg0);
   protected:
     itkImageToImageFilterIRGBUC2IRGBUS2();
     ~itkImageToImageFilterIRGBUC2IRGBUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIRGBUC2IRGBUS2_Pointer {
   public:
     itkImageToImageFilterIRGBUC2IRGBUS2_Pointer();
     itkImageToImageFilterIRGBUC2IRGBUS2_Pointer(itkImageToImageFilterIRGBUC2IRGBUS2_Pointer const & p);
     itkImageToImageFilterIRGBUC2IRGBUS2_Pointer(itkImageToImageFilterIRGBUC2IRGBUS2 * p);
     ~itkImageToImageFilterIRGBUC2IRGBUS2_Pointer();
     itkImageToImageFilterIRGBUC2IRGBUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIRGBUC2IRGBUS2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIRGBUC2IRGBUS2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIRGBUC2IRGBUS2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIRGBUC2IRGBUS2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIRGBUC2IRGBUS2_Pointer const & r) const;
     itkImageToImageFilterIRGBUC2IRGBUS2_Pointer & operator=(itkImageToImageFilterIRGBUC2IRGBUS2_Pointer const & r);
     itkImageToImageFilterIRGBUC2IRGBUS2_Pointer & operator=(itkImageToImageFilterIRGBUC2IRGBUS2 * r);
     itkImageToImageFilterIRGBUC2IRGBUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIRGBUC3IRGBUC3 : public itkImageSourceIRGBUC3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageRGBUC3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageRGBUC3 const * image);
     itkImageRGBUC3 const * GetInput();
     itkImageRGBUC3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageRGBUC3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageRGBUC3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIRGBUC3IRGBUC3(itkImageToImageFilterIRGBUC3IRGBUC3 const & arg0);
     void operator=(itkImageToImageFilterIRGBUC3IRGBUC3 const & arg0);
   protected:
     itkImageToImageFilterIRGBUC3IRGBUC3();
     ~itkImageToImageFilterIRGBUC3IRGBUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIRGBUC3IRGBUC3_Pointer {
   public:
     itkImageToImageFilterIRGBUC3IRGBUC3_Pointer();
     itkImageToImageFilterIRGBUC3IRGBUC3_Pointer(itkImageToImageFilterIRGBUC3IRGBUC3_Pointer const & p);
     itkImageToImageFilterIRGBUC3IRGBUC3_Pointer(itkImageToImageFilterIRGBUC3IRGBUC3 * p);
     ~itkImageToImageFilterIRGBUC3IRGBUC3_Pointer();
     itkImageToImageFilterIRGBUC3IRGBUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIRGBUC3IRGBUC3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIRGBUC3IRGBUC3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIRGBUC3IRGBUC3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIRGBUC3IRGBUC3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIRGBUC3IRGBUC3_Pointer const & r) const;
     itkImageToImageFilterIRGBUC3IRGBUC3_Pointer & operator=(itkImageToImageFilterIRGBUC3IRGBUC3_Pointer const & r);
     itkImageToImageFilterIRGBUC3IRGBUC3_Pointer & operator=(itkImageToImageFilterIRGBUC3IRGBUC3 * r);
     itkImageToImageFilterIRGBUC3IRGBUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIRGBUC3IRGBUS3 : public itkImageSourceIRGBUS3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageRGBUC3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageRGBUC3 const * image);
     itkImageRGBUC3 const * GetInput();
     itkImageRGBUC3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageRGBUC3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageRGBUC3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIRGBUC3IRGBUS3(itkImageToImageFilterIRGBUC3IRGBUS3 const & arg0);
     void operator=(itkImageToImageFilterIRGBUC3IRGBUS3 const & arg0);
   protected:
     itkImageToImageFilterIRGBUC3IRGBUS3();
     ~itkImageToImageFilterIRGBUC3IRGBUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIRGBUC3IRGBUS3_Pointer {
   public:
     itkImageToImageFilterIRGBUC3IRGBUS3_Pointer();
     itkImageToImageFilterIRGBUC3IRGBUS3_Pointer(itkImageToImageFilterIRGBUC3IRGBUS3_Pointer const & p);
     itkImageToImageFilterIRGBUC3IRGBUS3_Pointer(itkImageToImageFilterIRGBUC3IRGBUS3 * p);
     ~itkImageToImageFilterIRGBUC3IRGBUS3_Pointer();
     itkImageToImageFilterIRGBUC3IRGBUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIRGBUC3IRGBUS3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIRGBUC3IRGBUS3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIRGBUC3IRGBUS3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIRGBUC3IRGBUS3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIRGBUC3IRGBUS3_Pointer const & r) const;
     itkImageToImageFilterIRGBUC3IRGBUS3_Pointer & operator=(itkImageToImageFilterIRGBUC3IRGBUS3_Pointer const & r);
     itkImageToImageFilterIRGBUC3IRGBUS3_Pointer & operator=(itkImageToImageFilterIRGBUC3IRGBUS3 * r);
     itkImageToImageFilterIRGBUC3IRGBUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIRGBUS2IRGBUC2 : public itkImageSourceIRGBUC2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageRGBUS2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageRGBUS2 const * image);
     itkImageRGBUS2 const * GetInput();
     itkImageRGBUS2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageRGBUS2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageRGBUS2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIRGBUS2IRGBUC2(itkImageToImageFilterIRGBUS2IRGBUC2 const & arg0);
     void operator=(itkImageToImageFilterIRGBUS2IRGBUC2 const & arg0);
   protected:
     itkImageToImageFilterIRGBUS2IRGBUC2();
     ~itkImageToImageFilterIRGBUS2IRGBUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIRGBUS2IRGBUC2_Pointer {
   public:
     itkImageToImageFilterIRGBUS2IRGBUC2_Pointer();
     itkImageToImageFilterIRGBUS2IRGBUC2_Pointer(itkImageToImageFilterIRGBUS2IRGBUC2_Pointer const & p);
     itkImageToImageFilterIRGBUS2IRGBUC2_Pointer(itkImageToImageFilterIRGBUS2IRGBUC2 * p);
     ~itkImageToImageFilterIRGBUS2IRGBUC2_Pointer();
     itkImageToImageFilterIRGBUS2IRGBUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIRGBUS2IRGBUC2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIRGBUS2IRGBUC2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIRGBUS2IRGBUC2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIRGBUS2IRGBUC2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIRGBUS2IRGBUC2_Pointer const & r) const;
     itkImageToImageFilterIRGBUS2IRGBUC2_Pointer & operator=(itkImageToImageFilterIRGBUS2IRGBUC2_Pointer const & r);
     itkImageToImageFilterIRGBUS2IRGBUC2_Pointer & operator=(itkImageToImageFilterIRGBUS2IRGBUC2 * r);
     itkImageToImageFilterIRGBUS2IRGBUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIRGBUS2IRGBUS2 : public itkImageSourceIRGBUS2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageRGBUS2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageRGBUS2 const * image);
     itkImageRGBUS2 const * GetInput();
     itkImageRGBUS2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageRGBUS2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageRGBUS2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIRGBUS2IRGBUS2(itkImageToImageFilterIRGBUS2IRGBUS2 const & arg0);
     void operator=(itkImageToImageFilterIRGBUS2IRGBUS2 const & arg0);
   protected:
     itkImageToImageFilterIRGBUS2IRGBUS2();
     ~itkImageToImageFilterIRGBUS2IRGBUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIRGBUS2IRGBUS2_Pointer {
   public:
     itkImageToImageFilterIRGBUS2IRGBUS2_Pointer();
     itkImageToImageFilterIRGBUS2IRGBUS2_Pointer(itkImageToImageFilterIRGBUS2IRGBUS2_Pointer const & p);
     itkImageToImageFilterIRGBUS2IRGBUS2_Pointer(itkImageToImageFilterIRGBUS2IRGBUS2 * p);
     ~itkImageToImageFilterIRGBUS2IRGBUS2_Pointer();
     itkImageToImageFilterIRGBUS2IRGBUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIRGBUS2IRGBUS2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIRGBUS2IRGBUS2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIRGBUS2IRGBUS2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIRGBUS2IRGBUS2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIRGBUS2IRGBUS2_Pointer const & r) const;
     itkImageToImageFilterIRGBUS2IRGBUS2_Pointer & operator=(itkImageToImageFilterIRGBUS2IRGBUS2_Pointer const & r);
     itkImageToImageFilterIRGBUS2IRGBUS2_Pointer & operator=(itkImageToImageFilterIRGBUS2IRGBUS2 * r);
     itkImageToImageFilterIRGBUS2IRGBUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIRGBUS3IRGBUC3 : public itkImageSourceIRGBUC3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageRGBUS3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageRGBUS3 const * image);
     itkImageRGBUS3 const * GetInput();
     itkImageRGBUS3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageRGBUS3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageRGBUS3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIRGBUS3IRGBUC3(itkImageToImageFilterIRGBUS3IRGBUC3 const & arg0);
     void operator=(itkImageToImageFilterIRGBUS3IRGBUC3 const & arg0);
   protected:
     itkImageToImageFilterIRGBUS3IRGBUC3();
     ~itkImageToImageFilterIRGBUS3IRGBUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIRGBUS3IRGBUC3_Pointer {
   public:
     itkImageToImageFilterIRGBUS3IRGBUC3_Pointer();
     itkImageToImageFilterIRGBUS3IRGBUC3_Pointer(itkImageToImageFilterIRGBUS3IRGBUC3_Pointer const & p);
     itkImageToImageFilterIRGBUS3IRGBUC3_Pointer(itkImageToImageFilterIRGBUS3IRGBUC3 * p);
     ~itkImageToImageFilterIRGBUS3IRGBUC3_Pointer();
     itkImageToImageFilterIRGBUS3IRGBUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIRGBUS3IRGBUC3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIRGBUS3IRGBUC3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIRGBUS3IRGBUC3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIRGBUS3IRGBUC3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIRGBUS3IRGBUC3_Pointer const & r) const;
     itkImageToImageFilterIRGBUS3IRGBUC3_Pointer & operator=(itkImageToImageFilterIRGBUS3IRGBUC3_Pointer const & r);
     itkImageToImageFilterIRGBUS3IRGBUC3_Pointer & operator=(itkImageToImageFilterIRGBUS3IRGBUC3 * r);
     itkImageToImageFilterIRGBUS3IRGBUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIRGBUS3IRGBUS3 : public itkImageSourceIRGBUS3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageRGBUS3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageRGBUS3 const * image);
     itkImageRGBUS3 const * GetInput();
     itkImageRGBUS3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageRGBUS3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageRGBUS3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIRGBUS3IRGBUS3(itkImageToImageFilterIRGBUS3IRGBUS3 const & arg0);
     void operator=(itkImageToImageFilterIRGBUS3IRGBUS3 const & arg0);
   protected:
     itkImageToImageFilterIRGBUS3IRGBUS3();
     ~itkImageToImageFilterIRGBUS3IRGBUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIRGBUS3IRGBUS3_Pointer {
   public:
     itkImageToImageFilterIRGBUS3IRGBUS3_Pointer();
     itkImageToImageFilterIRGBUS3IRGBUS3_Pointer(itkImageToImageFilterIRGBUS3IRGBUS3_Pointer const & p);
     itkImageToImageFilterIRGBUS3IRGBUS3_Pointer(itkImageToImageFilterIRGBUS3IRGBUS3 * p);
     ~itkImageToImageFilterIRGBUS3IRGBUS3_Pointer();
     itkImageToImageFilterIRGBUS3IRGBUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIRGBUS3IRGBUS3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIRGBUS3IRGBUS3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIRGBUS3IRGBUS3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIRGBUS3IRGBUS3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIRGBUS3IRGBUS3_Pointer const & r) const;
     itkImageToImageFilterIRGBUS3IRGBUS3_Pointer & operator=(itkImageToImageFilterIRGBUS3IRGBUS3_Pointer const & r);
     itkImageToImageFilterIRGBUS3IRGBUS3_Pointer & operator=(itkImageToImageFilterIRGBUS3IRGBUS3 * r);
     itkImageToImageFilterIRGBUS3IRGBUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUC2ID2 : public itkImageSourceID2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUC2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUC2 const * image);
     itkImageUC2 const * GetInput();
     itkImageUC2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUC2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUC2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUC2ID2(itkImageToImageFilterIUC2ID2 const & arg0);
     void operator=(itkImageToImageFilterIUC2ID2 const & arg0);
   protected:
     itkImageToImageFilterIUC2ID2();
     ~itkImageToImageFilterIUC2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUC2ID2_Pointer {
   public:
     itkImageToImageFilterIUC2ID2_Pointer();
     itkImageToImageFilterIUC2ID2_Pointer(itkImageToImageFilterIUC2ID2_Pointer const & p);
     itkImageToImageFilterIUC2ID2_Pointer(itkImageToImageFilterIUC2ID2 * p);
     ~itkImageToImageFilterIUC2ID2_Pointer();
     itkImageToImageFilterIUC2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUC2ID2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUC2ID2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUC2ID2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUC2ID2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUC2ID2_Pointer const & r) const;
     itkImageToImageFilterIUC2ID2_Pointer & operator=(itkImageToImageFilterIUC2ID2_Pointer const & r);
     itkImageToImageFilterIUC2ID2_Pointer & operator=(itkImageToImageFilterIUC2ID2 * r);
     itkImageToImageFilterIUC2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUC2IF2 : public itkImageSourceIF2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUC2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUC2 const * image);
     itkImageUC2 const * GetInput();
     itkImageUC2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUC2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUC2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUC2IF2(itkImageToImageFilterIUC2IF2 const & arg0);
     void operator=(itkImageToImageFilterIUC2IF2 const & arg0);
   protected:
     itkImageToImageFilterIUC2IF2();
     ~itkImageToImageFilterIUC2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUC2IF2_Pointer {
   public:
     itkImageToImageFilterIUC2IF2_Pointer();
     itkImageToImageFilterIUC2IF2_Pointer(itkImageToImageFilterIUC2IF2_Pointer const & p);
     itkImageToImageFilterIUC2IF2_Pointer(itkImageToImageFilterIUC2IF2 * p);
     ~itkImageToImageFilterIUC2IF2_Pointer();
     itkImageToImageFilterIUC2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUC2IF2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUC2IF2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUC2IF2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUC2IF2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUC2IF2_Pointer const & r) const;
     itkImageToImageFilterIUC2IF2_Pointer & operator=(itkImageToImageFilterIUC2IF2_Pointer const & r);
     itkImageToImageFilterIUC2IF2_Pointer & operator=(itkImageToImageFilterIUC2IF2 * r);
     itkImageToImageFilterIUC2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUC2IUC2 : public itkImageSourceIUC2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUC2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUC2 const * image);
     itkImageUC2 const * GetInput();
     itkImageUC2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUC2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUC2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUC2IUC2(itkImageToImageFilterIUC2IUC2 const & arg0);
     void operator=(itkImageToImageFilterIUC2IUC2 const & arg0);
   protected:
     itkImageToImageFilterIUC2IUC2();
     ~itkImageToImageFilterIUC2IUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUC2IUC2_Pointer {
   public:
     itkImageToImageFilterIUC2IUC2_Pointer();
     itkImageToImageFilterIUC2IUC2_Pointer(itkImageToImageFilterIUC2IUC2_Pointer const & p);
     itkImageToImageFilterIUC2IUC2_Pointer(itkImageToImageFilterIUC2IUC2 * p);
     ~itkImageToImageFilterIUC2IUC2_Pointer();
     itkImageToImageFilterIUC2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUC2IUC2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUC2IUC2_Pointer const & r) const;
     itkImageToImageFilterIUC2IUC2_Pointer & operator=(itkImageToImageFilterIUC2IUC2_Pointer const & r);
     itkImageToImageFilterIUC2IUC2_Pointer & operator=(itkImageToImageFilterIUC2IUC2 * r);
     itkImageToImageFilterIUC2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUC2IUL2 : public itkImageSourceIUL2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUC2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUC2 const * image);
     itkImageUC2 const * GetInput();
     itkImageUC2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUC2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUC2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUC2IUL2(itkImageToImageFilterIUC2IUL2 const & arg0);
     void operator=(itkImageToImageFilterIUC2IUL2 const & arg0);
   protected:
     itkImageToImageFilterIUC2IUL2();
     ~itkImageToImageFilterIUC2IUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUC2IUL2_Pointer {
   public:
     itkImageToImageFilterIUC2IUL2_Pointer();
     itkImageToImageFilterIUC2IUL2_Pointer(itkImageToImageFilterIUC2IUL2_Pointer const & p);
     itkImageToImageFilterIUC2IUL2_Pointer(itkImageToImageFilterIUC2IUL2 * p);
     ~itkImageToImageFilterIUC2IUL2_Pointer();
     itkImageToImageFilterIUC2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUC2IUL2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUC2IUL2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUC2IUL2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUC2IUL2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUC2IUL2_Pointer const & r) const;
     itkImageToImageFilterIUC2IUL2_Pointer & operator=(itkImageToImageFilterIUC2IUL2_Pointer const & r);
     itkImageToImageFilterIUC2IUL2_Pointer & operator=(itkImageToImageFilterIUC2IUL2 * r);
     itkImageToImageFilterIUC2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUC2IUS2 : public itkImageSourceIUS2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUC2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUC2 const * image);
     itkImageUC2 const * GetInput();
     itkImageUC2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUC2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUC2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUC2IUS2(itkImageToImageFilterIUC2IUS2 const & arg0);
     void operator=(itkImageToImageFilterIUC2IUS2 const & arg0);
   protected:
     itkImageToImageFilterIUC2IUS2();
     ~itkImageToImageFilterIUC2IUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUC2IUS2_Pointer {
   public:
     itkImageToImageFilterIUC2IUS2_Pointer();
     itkImageToImageFilterIUC2IUS2_Pointer(itkImageToImageFilterIUC2IUS2_Pointer const & p);
     itkImageToImageFilterIUC2IUS2_Pointer(itkImageToImageFilterIUC2IUS2 * p);
     ~itkImageToImageFilterIUC2IUS2_Pointer();
     itkImageToImageFilterIUC2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUC2IUS2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUC2IUS2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUC2IUS2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUC2IUS2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUC2IUS2_Pointer const & r) const;
     itkImageToImageFilterIUC2IUS2_Pointer & operator=(itkImageToImageFilterIUC2IUS2_Pointer const & r);
     itkImageToImageFilterIUC2IUS2_Pointer & operator=(itkImageToImageFilterIUC2IUS2 * r);
     itkImageToImageFilterIUC2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUC3ID3 : public itkImageSourceID3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUC3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUC3 const * image);
     itkImageUC3 const * GetInput();
     itkImageUC3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUC3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUC3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUC3ID3(itkImageToImageFilterIUC3ID3 const & arg0);
     void operator=(itkImageToImageFilterIUC3ID3 const & arg0);
   protected:
     itkImageToImageFilterIUC3ID3();
     ~itkImageToImageFilterIUC3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUC3ID3_Pointer {
   public:
     itkImageToImageFilterIUC3ID3_Pointer();
     itkImageToImageFilterIUC3ID3_Pointer(itkImageToImageFilterIUC3ID3_Pointer const & p);
     itkImageToImageFilterIUC3ID3_Pointer(itkImageToImageFilterIUC3ID3 * p);
     ~itkImageToImageFilterIUC3ID3_Pointer();
     itkImageToImageFilterIUC3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUC3ID3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUC3ID3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUC3ID3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUC3ID3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUC3ID3_Pointer const & r) const;
     itkImageToImageFilterIUC3ID3_Pointer & operator=(itkImageToImageFilterIUC3ID3_Pointer const & r);
     itkImageToImageFilterIUC3ID3_Pointer & operator=(itkImageToImageFilterIUC3ID3 * r);
     itkImageToImageFilterIUC3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUC3IF3 : public itkImageSourceIF3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUC3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUC3 const * image);
     itkImageUC3 const * GetInput();
     itkImageUC3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUC3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUC3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUC3IF3(itkImageToImageFilterIUC3IF3 const & arg0);
     void operator=(itkImageToImageFilterIUC3IF3 const & arg0);
   protected:
     itkImageToImageFilterIUC3IF3();
     ~itkImageToImageFilterIUC3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUC3IF3_Pointer {
   public:
     itkImageToImageFilterIUC3IF3_Pointer();
     itkImageToImageFilterIUC3IF3_Pointer(itkImageToImageFilterIUC3IF3_Pointer const & p);
     itkImageToImageFilterIUC3IF3_Pointer(itkImageToImageFilterIUC3IF3 * p);
     ~itkImageToImageFilterIUC3IF3_Pointer();
     itkImageToImageFilterIUC3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUC3IF3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUC3IF3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUC3IF3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUC3IF3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUC3IF3_Pointer const & r) const;
     itkImageToImageFilterIUC3IF3_Pointer & operator=(itkImageToImageFilterIUC3IF3_Pointer const & r);
     itkImageToImageFilterIUC3IF3_Pointer & operator=(itkImageToImageFilterIUC3IF3 * r);
     itkImageToImageFilterIUC3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUC3IUC3 : public itkImageSourceIUC3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUC3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUC3 const * image);
     itkImageUC3 const * GetInput();
     itkImageUC3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUC3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUC3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUC3IUC3(itkImageToImageFilterIUC3IUC3 const & arg0);
     void operator=(itkImageToImageFilterIUC3IUC3 const & arg0);
   protected:
     itkImageToImageFilterIUC3IUC3();
     ~itkImageToImageFilterIUC3IUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUC3IUC3_Pointer {
   public:
     itkImageToImageFilterIUC3IUC3_Pointer();
     itkImageToImageFilterIUC3IUC3_Pointer(itkImageToImageFilterIUC3IUC3_Pointer const & p);
     itkImageToImageFilterIUC3IUC3_Pointer(itkImageToImageFilterIUC3IUC3 * p);
     ~itkImageToImageFilterIUC3IUC3_Pointer();
     itkImageToImageFilterIUC3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUC3IUC3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUC3IUC3_Pointer const & r) const;
     itkImageToImageFilterIUC3IUC3_Pointer & operator=(itkImageToImageFilterIUC3IUC3_Pointer const & r);
     itkImageToImageFilterIUC3IUC3_Pointer & operator=(itkImageToImageFilterIUC3IUC3 * r);
     itkImageToImageFilterIUC3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUC3IUL3 : public itkImageSourceIUL3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUC3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUC3 const * image);
     itkImageUC3 const * GetInput();
     itkImageUC3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUC3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUC3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUC3IUL3(itkImageToImageFilterIUC3IUL3 const & arg0);
     void operator=(itkImageToImageFilterIUC3IUL3 const & arg0);
   protected:
     itkImageToImageFilterIUC3IUL3();
     ~itkImageToImageFilterIUC3IUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUC3IUL3_Pointer {
   public:
     itkImageToImageFilterIUC3IUL3_Pointer();
     itkImageToImageFilterIUC3IUL3_Pointer(itkImageToImageFilterIUC3IUL3_Pointer const & p);
     itkImageToImageFilterIUC3IUL3_Pointer(itkImageToImageFilterIUC3IUL3 * p);
     ~itkImageToImageFilterIUC3IUL3_Pointer();
     itkImageToImageFilterIUC3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUC3IUL3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUC3IUL3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUC3IUL3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUC3IUL3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUC3IUL3_Pointer const & r) const;
     itkImageToImageFilterIUC3IUL3_Pointer & operator=(itkImageToImageFilterIUC3IUL3_Pointer const & r);
     itkImageToImageFilterIUC3IUL3_Pointer & operator=(itkImageToImageFilterIUC3IUL3 * r);
     itkImageToImageFilterIUC3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUC3IUS3 : public itkImageSourceIUS3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUC3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUC3 const * image);
     itkImageUC3 const * GetInput();
     itkImageUC3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUC3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUC3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUC3IUS3(itkImageToImageFilterIUC3IUS3 const & arg0);
     void operator=(itkImageToImageFilterIUC3IUS3 const & arg0);
   protected:
     itkImageToImageFilterIUC3IUS3();
     ~itkImageToImageFilterIUC3IUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUC3IUS3_Pointer {
   public:
     itkImageToImageFilterIUC3IUS3_Pointer();
     itkImageToImageFilterIUC3IUS3_Pointer(itkImageToImageFilterIUC3IUS3_Pointer const & p);
     itkImageToImageFilterIUC3IUS3_Pointer(itkImageToImageFilterIUC3IUS3 * p);
     ~itkImageToImageFilterIUC3IUS3_Pointer();
     itkImageToImageFilterIUC3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUC3IUS3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUC3IUS3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUC3IUS3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUC3IUS3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUC3IUS3_Pointer const & r) const;
     itkImageToImageFilterIUC3IUS3_Pointer & operator=(itkImageToImageFilterIUC3IUS3_Pointer const & r);
     itkImageToImageFilterIUC3IUS3_Pointer & operator=(itkImageToImageFilterIUC3IUS3 * r);
     itkImageToImageFilterIUC3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUL2ID2 : public itkImageSourceID2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUL2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUL2 const * image);
     itkImageUL2 const * GetInput();
     itkImageUL2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUL2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUL2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUL2ID2(itkImageToImageFilterIUL2ID2 const & arg0);
     void operator=(itkImageToImageFilterIUL2ID2 const & arg0);
   protected:
     itkImageToImageFilterIUL2ID2();
     ~itkImageToImageFilterIUL2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUL2ID2_Pointer {
   public:
     itkImageToImageFilterIUL2ID2_Pointer();
     itkImageToImageFilterIUL2ID2_Pointer(itkImageToImageFilterIUL2ID2_Pointer const & p);
     itkImageToImageFilterIUL2ID2_Pointer(itkImageToImageFilterIUL2ID2 * p);
     ~itkImageToImageFilterIUL2ID2_Pointer();
     itkImageToImageFilterIUL2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUL2ID2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUL2ID2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUL2ID2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUL2ID2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUL2ID2_Pointer const & r) const;
     itkImageToImageFilterIUL2ID2_Pointer & operator=(itkImageToImageFilterIUL2ID2_Pointer const & r);
     itkImageToImageFilterIUL2ID2_Pointer & operator=(itkImageToImageFilterIUL2ID2 * r);
     itkImageToImageFilterIUL2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUL2IF2 : public itkImageSourceIF2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUL2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUL2 const * image);
     itkImageUL2 const * GetInput();
     itkImageUL2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUL2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUL2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUL2IF2(itkImageToImageFilterIUL2IF2 const & arg0);
     void operator=(itkImageToImageFilterIUL2IF2 const & arg0);
   protected:
     itkImageToImageFilterIUL2IF2();
     ~itkImageToImageFilterIUL2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUL2IF2_Pointer {
   public:
     itkImageToImageFilterIUL2IF2_Pointer();
     itkImageToImageFilterIUL2IF2_Pointer(itkImageToImageFilterIUL2IF2_Pointer const & p);
     itkImageToImageFilterIUL2IF2_Pointer(itkImageToImageFilterIUL2IF2 * p);
     ~itkImageToImageFilterIUL2IF2_Pointer();
     itkImageToImageFilterIUL2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUL2IF2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUL2IF2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUL2IF2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUL2IF2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUL2IF2_Pointer const & r) const;
     itkImageToImageFilterIUL2IF2_Pointer & operator=(itkImageToImageFilterIUL2IF2_Pointer const & r);
     itkImageToImageFilterIUL2IF2_Pointer & operator=(itkImageToImageFilterIUL2IF2 * r);
     itkImageToImageFilterIUL2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUL2IUC2 : public itkImageSourceIUC2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUL2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUL2 const * image);
     itkImageUL2 const * GetInput();
     itkImageUL2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUL2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUL2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUL2IUC2(itkImageToImageFilterIUL2IUC2 const & arg0);
     void operator=(itkImageToImageFilterIUL2IUC2 const & arg0);
   protected:
     itkImageToImageFilterIUL2IUC2();
     ~itkImageToImageFilterIUL2IUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUL2IUC2_Pointer {
   public:
     itkImageToImageFilterIUL2IUC2_Pointer();
     itkImageToImageFilterIUL2IUC2_Pointer(itkImageToImageFilterIUL2IUC2_Pointer const & p);
     itkImageToImageFilterIUL2IUC2_Pointer(itkImageToImageFilterIUL2IUC2 * p);
     ~itkImageToImageFilterIUL2IUC2_Pointer();
     itkImageToImageFilterIUL2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUL2IUC2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUL2IUC2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUL2IUC2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUL2IUC2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUL2IUC2_Pointer const & r) const;
     itkImageToImageFilterIUL2IUC2_Pointer & operator=(itkImageToImageFilterIUL2IUC2_Pointer const & r);
     itkImageToImageFilterIUL2IUC2_Pointer & operator=(itkImageToImageFilterIUL2IUC2 * r);
     itkImageToImageFilterIUL2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUL2IUL2 : public itkImageSourceIUL2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUL2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUL2 const * image);
     itkImageUL2 const * GetInput();
     itkImageUL2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUL2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUL2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUL2IUL2(itkImageToImageFilterIUL2IUL2 const & arg0);
     void operator=(itkImageToImageFilterIUL2IUL2 const & arg0);
   protected:
     itkImageToImageFilterIUL2IUL2();
     ~itkImageToImageFilterIUL2IUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUL2IUL2_Pointer {
   public:
     itkImageToImageFilterIUL2IUL2_Pointer();
     itkImageToImageFilterIUL2IUL2_Pointer(itkImageToImageFilterIUL2IUL2_Pointer const & p);
     itkImageToImageFilterIUL2IUL2_Pointer(itkImageToImageFilterIUL2IUL2 * p);
     ~itkImageToImageFilterIUL2IUL2_Pointer();
     itkImageToImageFilterIUL2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUL2IUL2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUL2IUL2_Pointer const & r) const;
     itkImageToImageFilterIUL2IUL2_Pointer & operator=(itkImageToImageFilterIUL2IUL2_Pointer const & r);
     itkImageToImageFilterIUL2IUL2_Pointer & operator=(itkImageToImageFilterIUL2IUL2 * r);
     itkImageToImageFilterIUL2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUL2IUS2 : public itkImageSourceIUS2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUL2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUL2 const * image);
     itkImageUL2 const * GetInput();
     itkImageUL2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUL2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUL2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUL2IUS2(itkImageToImageFilterIUL2IUS2 const & arg0);
     void operator=(itkImageToImageFilterIUL2IUS2 const & arg0);
   protected:
     itkImageToImageFilterIUL2IUS2();
     ~itkImageToImageFilterIUL2IUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUL2IUS2_Pointer {
   public:
     itkImageToImageFilterIUL2IUS2_Pointer();
     itkImageToImageFilterIUL2IUS2_Pointer(itkImageToImageFilterIUL2IUS2_Pointer const & p);
     itkImageToImageFilterIUL2IUS2_Pointer(itkImageToImageFilterIUL2IUS2 * p);
     ~itkImageToImageFilterIUL2IUS2_Pointer();
     itkImageToImageFilterIUL2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUL2IUS2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUL2IUS2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUL2IUS2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUL2IUS2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUL2IUS2_Pointer const & r) const;
     itkImageToImageFilterIUL2IUS2_Pointer & operator=(itkImageToImageFilterIUL2IUS2_Pointer const & r);
     itkImageToImageFilterIUL2IUS2_Pointer & operator=(itkImageToImageFilterIUL2IUS2 * r);
     itkImageToImageFilterIUL2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUL3ID3 : public itkImageSourceID3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUL3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUL3 const * image);
     itkImageUL3 const * GetInput();
     itkImageUL3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUL3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUL3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUL3ID3(itkImageToImageFilterIUL3ID3 const & arg0);
     void operator=(itkImageToImageFilterIUL3ID3 const & arg0);
   protected:
     itkImageToImageFilterIUL3ID3();
     ~itkImageToImageFilterIUL3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUL3ID3_Pointer {
   public:
     itkImageToImageFilterIUL3ID3_Pointer();
     itkImageToImageFilterIUL3ID3_Pointer(itkImageToImageFilterIUL3ID3_Pointer const & p);
     itkImageToImageFilterIUL3ID3_Pointer(itkImageToImageFilterIUL3ID3 * p);
     ~itkImageToImageFilterIUL3ID3_Pointer();
     itkImageToImageFilterIUL3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUL3ID3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUL3ID3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUL3ID3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUL3ID3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUL3ID3_Pointer const & r) const;
     itkImageToImageFilterIUL3ID3_Pointer & operator=(itkImageToImageFilterIUL3ID3_Pointer const & r);
     itkImageToImageFilterIUL3ID3_Pointer & operator=(itkImageToImageFilterIUL3ID3 * r);
     itkImageToImageFilterIUL3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUL3IF3 : public itkImageSourceIF3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUL3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUL3 const * image);
     itkImageUL3 const * GetInput();
     itkImageUL3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUL3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUL3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUL3IF3(itkImageToImageFilterIUL3IF3 const & arg0);
     void operator=(itkImageToImageFilterIUL3IF3 const & arg0);
   protected:
     itkImageToImageFilterIUL3IF3();
     ~itkImageToImageFilterIUL3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUL3IF3_Pointer {
   public:
     itkImageToImageFilterIUL3IF3_Pointer();
     itkImageToImageFilterIUL3IF3_Pointer(itkImageToImageFilterIUL3IF3_Pointer const & p);
     itkImageToImageFilterIUL3IF3_Pointer(itkImageToImageFilterIUL3IF3 * p);
     ~itkImageToImageFilterIUL3IF3_Pointer();
     itkImageToImageFilterIUL3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUL3IF3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUL3IF3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUL3IF3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUL3IF3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUL3IF3_Pointer const & r) const;
     itkImageToImageFilterIUL3IF3_Pointer & operator=(itkImageToImageFilterIUL3IF3_Pointer const & r);
     itkImageToImageFilterIUL3IF3_Pointer & operator=(itkImageToImageFilterIUL3IF3 * r);
     itkImageToImageFilterIUL3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUL3IUC3 : public itkImageSourceIUC3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUL3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUL3 const * image);
     itkImageUL3 const * GetInput();
     itkImageUL3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUL3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUL3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUL3IUC3(itkImageToImageFilterIUL3IUC3 const & arg0);
     void operator=(itkImageToImageFilterIUL3IUC3 const & arg0);
   protected:
     itkImageToImageFilterIUL3IUC3();
     ~itkImageToImageFilterIUL3IUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUL3IUC3_Pointer {
   public:
     itkImageToImageFilterIUL3IUC3_Pointer();
     itkImageToImageFilterIUL3IUC3_Pointer(itkImageToImageFilterIUL3IUC3_Pointer const & p);
     itkImageToImageFilterIUL3IUC3_Pointer(itkImageToImageFilterIUL3IUC3 * p);
     ~itkImageToImageFilterIUL3IUC3_Pointer();
     itkImageToImageFilterIUL3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUL3IUC3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUL3IUC3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUL3IUC3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUL3IUC3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUL3IUC3_Pointer const & r) const;
     itkImageToImageFilterIUL3IUC3_Pointer & operator=(itkImageToImageFilterIUL3IUC3_Pointer const & r);
     itkImageToImageFilterIUL3IUC3_Pointer & operator=(itkImageToImageFilterIUL3IUC3 * r);
     itkImageToImageFilterIUL3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUL3IUL3 : public itkImageSourceIUL3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUL3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUL3 const * image);
     itkImageUL3 const * GetInput();
     itkImageUL3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUL3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUL3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUL3IUL3(itkImageToImageFilterIUL3IUL3 const & arg0);
     void operator=(itkImageToImageFilterIUL3IUL3 const & arg0);
   protected:
     itkImageToImageFilterIUL3IUL3();
     ~itkImageToImageFilterIUL3IUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUL3IUL3_Pointer {
   public:
     itkImageToImageFilterIUL3IUL3_Pointer();
     itkImageToImageFilterIUL3IUL3_Pointer(itkImageToImageFilterIUL3IUL3_Pointer const & p);
     itkImageToImageFilterIUL3IUL3_Pointer(itkImageToImageFilterIUL3IUL3 * p);
     ~itkImageToImageFilterIUL3IUL3_Pointer();
     itkImageToImageFilterIUL3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUL3IUL3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUL3IUL3_Pointer const & r) const;
     itkImageToImageFilterIUL3IUL3_Pointer & operator=(itkImageToImageFilterIUL3IUL3_Pointer const & r);
     itkImageToImageFilterIUL3IUL3_Pointer & operator=(itkImageToImageFilterIUL3IUL3 * r);
     itkImageToImageFilterIUL3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUL3IUS3 : public itkImageSourceIUS3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUL3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUL3 const * image);
     itkImageUL3 const * GetInput();
     itkImageUL3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUL3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUL3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUL3IUS3(itkImageToImageFilterIUL3IUS3 const & arg0);
     void operator=(itkImageToImageFilterIUL3IUS3 const & arg0);
   protected:
     itkImageToImageFilterIUL3IUS3();
     ~itkImageToImageFilterIUL3IUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUL3IUS3_Pointer {
   public:
     itkImageToImageFilterIUL3IUS3_Pointer();
     itkImageToImageFilterIUL3IUS3_Pointer(itkImageToImageFilterIUL3IUS3_Pointer const & p);
     itkImageToImageFilterIUL3IUS3_Pointer(itkImageToImageFilterIUL3IUS3 * p);
     ~itkImageToImageFilterIUL3IUS3_Pointer();
     itkImageToImageFilterIUL3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUL3IUS3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUL3IUS3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUL3IUS3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUL3IUS3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUL3IUS3_Pointer const & r) const;
     itkImageToImageFilterIUL3IUS3_Pointer & operator=(itkImageToImageFilterIUL3IUS3_Pointer const & r);
     itkImageToImageFilterIUL3IUS3_Pointer & operator=(itkImageToImageFilterIUL3IUS3 * r);
     itkImageToImageFilterIUL3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUS2ID2 : public itkImageSourceID2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUS2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUS2 const * image);
     itkImageUS2 const * GetInput();
     itkImageUS2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUS2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUS2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUS2ID2(itkImageToImageFilterIUS2ID2 const & arg0);
     void operator=(itkImageToImageFilterIUS2ID2 const & arg0);
   protected:
     itkImageToImageFilterIUS2ID2();
     ~itkImageToImageFilterIUS2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUS2ID2_Pointer {
   public:
     itkImageToImageFilterIUS2ID2_Pointer();
     itkImageToImageFilterIUS2ID2_Pointer(itkImageToImageFilterIUS2ID2_Pointer const & p);
     itkImageToImageFilterIUS2ID2_Pointer(itkImageToImageFilterIUS2ID2 * p);
     ~itkImageToImageFilterIUS2ID2_Pointer();
     itkImageToImageFilterIUS2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUS2ID2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUS2ID2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUS2ID2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUS2ID2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUS2ID2_Pointer const & r) const;
     itkImageToImageFilterIUS2ID2_Pointer & operator=(itkImageToImageFilterIUS2ID2_Pointer const & r);
     itkImageToImageFilterIUS2ID2_Pointer & operator=(itkImageToImageFilterIUS2ID2 * r);
     itkImageToImageFilterIUS2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUS2IF2 : public itkImageSourceIF2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUS2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUS2 const * image);
     itkImageUS2 const * GetInput();
     itkImageUS2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUS2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUS2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUS2IF2(itkImageToImageFilterIUS2IF2 const & arg0);
     void operator=(itkImageToImageFilterIUS2IF2 const & arg0);
   protected:
     itkImageToImageFilterIUS2IF2();
     ~itkImageToImageFilterIUS2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUS2IF2_Pointer {
   public:
     itkImageToImageFilterIUS2IF2_Pointer();
     itkImageToImageFilterIUS2IF2_Pointer(itkImageToImageFilterIUS2IF2_Pointer const & p);
     itkImageToImageFilterIUS2IF2_Pointer(itkImageToImageFilterIUS2IF2 * p);
     ~itkImageToImageFilterIUS2IF2_Pointer();
     itkImageToImageFilterIUS2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUS2IF2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUS2IF2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUS2IF2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUS2IF2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUS2IF2_Pointer const & r) const;
     itkImageToImageFilterIUS2IF2_Pointer & operator=(itkImageToImageFilterIUS2IF2_Pointer const & r);
     itkImageToImageFilterIUS2IF2_Pointer & operator=(itkImageToImageFilterIUS2IF2 * r);
     itkImageToImageFilterIUS2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUS2IUC2 : public itkImageSourceIUC2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUS2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUS2 const * image);
     itkImageUS2 const * GetInput();
     itkImageUS2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUS2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUS2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUS2IUC2(itkImageToImageFilterIUS2IUC2 const & arg0);
     void operator=(itkImageToImageFilterIUS2IUC2 const & arg0);
   protected:
     itkImageToImageFilterIUS2IUC2();
     ~itkImageToImageFilterIUS2IUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUS2IUC2_Pointer {
   public:
     itkImageToImageFilterIUS2IUC2_Pointer();
     itkImageToImageFilterIUS2IUC2_Pointer(itkImageToImageFilterIUS2IUC2_Pointer const & p);
     itkImageToImageFilterIUS2IUC2_Pointer(itkImageToImageFilterIUS2IUC2 * p);
     ~itkImageToImageFilterIUS2IUC2_Pointer();
     itkImageToImageFilterIUS2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUS2IUC2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUS2IUC2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUS2IUC2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUS2IUC2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUS2IUC2_Pointer const & r) const;
     itkImageToImageFilterIUS2IUC2_Pointer & operator=(itkImageToImageFilterIUS2IUC2_Pointer const & r);
     itkImageToImageFilterIUS2IUC2_Pointer & operator=(itkImageToImageFilterIUS2IUC2 * r);
     itkImageToImageFilterIUS2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUS2IUL2 : public itkImageSourceIUL2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUS2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUS2 const * image);
     itkImageUS2 const * GetInput();
     itkImageUS2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUS2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUS2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUS2IUL2(itkImageToImageFilterIUS2IUL2 const & arg0);
     void operator=(itkImageToImageFilterIUS2IUL2 const & arg0);
   protected:
     itkImageToImageFilterIUS2IUL2();
     ~itkImageToImageFilterIUS2IUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUS2IUL2_Pointer {
   public:
     itkImageToImageFilterIUS2IUL2_Pointer();
     itkImageToImageFilterIUS2IUL2_Pointer(itkImageToImageFilterIUS2IUL2_Pointer const & p);
     itkImageToImageFilterIUS2IUL2_Pointer(itkImageToImageFilterIUS2IUL2 * p);
     ~itkImageToImageFilterIUS2IUL2_Pointer();
     itkImageToImageFilterIUS2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUS2IUL2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUS2IUL2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUS2IUL2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUS2IUL2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUS2IUL2_Pointer const & r) const;
     itkImageToImageFilterIUS2IUL2_Pointer & operator=(itkImageToImageFilterIUS2IUL2_Pointer const & r);
     itkImageToImageFilterIUS2IUL2_Pointer & operator=(itkImageToImageFilterIUS2IUL2 * r);
     itkImageToImageFilterIUS2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUS2IUS2 : public itkImageSourceIUS2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUS2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUS2 const * image);
     itkImageUS2 const * GetInput();
     itkImageUS2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUS2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUS2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUS2IUS2(itkImageToImageFilterIUS2IUS2 const & arg0);
     void operator=(itkImageToImageFilterIUS2IUS2 const & arg0);
   protected:
     itkImageToImageFilterIUS2IUS2();
     ~itkImageToImageFilterIUS2IUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUS2IUS2_Pointer {
   public:
     itkImageToImageFilterIUS2IUS2_Pointer();
     itkImageToImageFilterIUS2IUS2_Pointer(itkImageToImageFilterIUS2IUS2_Pointer const & p);
     itkImageToImageFilterIUS2IUS2_Pointer(itkImageToImageFilterIUS2IUS2 * p);
     ~itkImageToImageFilterIUS2IUS2_Pointer();
     itkImageToImageFilterIUS2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUS2IUS2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUS2IUS2_Pointer const & r) const;
     itkImageToImageFilterIUS2IUS2_Pointer & operator=(itkImageToImageFilterIUS2IUS2_Pointer const & r);
     itkImageToImageFilterIUS2IUS2_Pointer & operator=(itkImageToImageFilterIUS2IUS2 * r);
     itkImageToImageFilterIUS2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUS3ID3 : public itkImageSourceID3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUS3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUS3 const * image);
     itkImageUS3 const * GetInput();
     itkImageUS3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUS3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUS3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUS3ID3(itkImageToImageFilterIUS3ID3 const & arg0);
     void operator=(itkImageToImageFilterIUS3ID3 const & arg0);
   protected:
     itkImageToImageFilterIUS3ID3();
     ~itkImageToImageFilterIUS3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUS3ID3_Pointer {
   public:
     itkImageToImageFilterIUS3ID3_Pointer();
     itkImageToImageFilterIUS3ID3_Pointer(itkImageToImageFilterIUS3ID3_Pointer const & p);
     itkImageToImageFilterIUS3ID3_Pointer(itkImageToImageFilterIUS3ID3 * p);
     ~itkImageToImageFilterIUS3ID3_Pointer();
     itkImageToImageFilterIUS3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUS3ID3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUS3ID3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUS3ID3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUS3ID3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUS3ID3_Pointer const & r) const;
     itkImageToImageFilterIUS3ID3_Pointer & operator=(itkImageToImageFilterIUS3ID3_Pointer const & r);
     itkImageToImageFilterIUS3ID3_Pointer & operator=(itkImageToImageFilterIUS3ID3 * r);
     itkImageToImageFilterIUS3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUS3IF3 : public itkImageSourceIF3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUS3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUS3 const * image);
     itkImageUS3 const * GetInput();
     itkImageUS3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUS3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUS3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUS3IF3(itkImageToImageFilterIUS3IF3 const & arg0);
     void operator=(itkImageToImageFilterIUS3IF3 const & arg0);
   protected:
     itkImageToImageFilterIUS3IF3();
     ~itkImageToImageFilterIUS3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUS3IF3_Pointer {
   public:
     itkImageToImageFilterIUS3IF3_Pointer();
     itkImageToImageFilterIUS3IF3_Pointer(itkImageToImageFilterIUS3IF3_Pointer const & p);
     itkImageToImageFilterIUS3IF3_Pointer(itkImageToImageFilterIUS3IF3 * p);
     ~itkImageToImageFilterIUS3IF3_Pointer();
     itkImageToImageFilterIUS3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUS3IF3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUS3IF3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUS3IF3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUS3IF3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUS3IF3_Pointer const & r) const;
     itkImageToImageFilterIUS3IF3_Pointer & operator=(itkImageToImageFilterIUS3IF3_Pointer const & r);
     itkImageToImageFilterIUS3IF3_Pointer & operator=(itkImageToImageFilterIUS3IF3 * r);
     itkImageToImageFilterIUS3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUS3IUC3 : public itkImageSourceIUC3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUS3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUS3 const * image);
     itkImageUS3 const * GetInput();
     itkImageUS3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUS3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUS3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUS3IUC3(itkImageToImageFilterIUS3IUC3 const & arg0);
     void operator=(itkImageToImageFilterIUS3IUC3 const & arg0);
   protected:
     itkImageToImageFilterIUS3IUC3();
     ~itkImageToImageFilterIUS3IUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUS3IUC3_Pointer {
   public:
     itkImageToImageFilterIUS3IUC3_Pointer();
     itkImageToImageFilterIUS3IUC3_Pointer(itkImageToImageFilterIUS3IUC3_Pointer const & p);
     itkImageToImageFilterIUS3IUC3_Pointer(itkImageToImageFilterIUS3IUC3 * p);
     ~itkImageToImageFilterIUS3IUC3_Pointer();
     itkImageToImageFilterIUS3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUS3IUC3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUS3IUC3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUS3IUC3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUS3IUC3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUS3IUC3_Pointer const & r) const;
     itkImageToImageFilterIUS3IUC3_Pointer & operator=(itkImageToImageFilterIUS3IUC3_Pointer const & r);
     itkImageToImageFilterIUS3IUC3_Pointer & operator=(itkImageToImageFilterIUS3IUC3 * r);
     itkImageToImageFilterIUS3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUS3IUL3 : public itkImageSourceIUL3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUS3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUS3 const * image);
     itkImageUS3 const * GetInput();
     itkImageUS3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUS3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUS3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUS3IUL3(itkImageToImageFilterIUS3IUL3 const & arg0);
     void operator=(itkImageToImageFilterIUS3IUL3 const & arg0);
   protected:
     itkImageToImageFilterIUS3IUL3();
     ~itkImageToImageFilterIUS3IUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUS3IUL3_Pointer {
   public:
     itkImageToImageFilterIUS3IUL3_Pointer();
     itkImageToImageFilterIUS3IUL3_Pointer(itkImageToImageFilterIUS3IUL3_Pointer const & p);
     itkImageToImageFilterIUS3IUL3_Pointer(itkImageToImageFilterIUS3IUL3 * p);
     ~itkImageToImageFilterIUS3IUL3_Pointer();
     itkImageToImageFilterIUS3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUS3IUL3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUS3IUL3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUS3IUL3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUS3IUL3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUS3IUL3_Pointer const & r) const;
     itkImageToImageFilterIUS3IUL3_Pointer & operator=(itkImageToImageFilterIUS3IUL3_Pointer const & r);
     itkImageToImageFilterIUS3IUL3_Pointer & operator=(itkImageToImageFilterIUS3IUL3 * r);
     itkImageToImageFilterIUS3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUS3IUS3 : public itkImageSourceIUS3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUS3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUS3 const * image);
     itkImageUS3 const * GetInput();
     itkImageUS3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUS3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUS3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUS3IUS3(itkImageToImageFilterIUS3IUS3 const & arg0);
     void operator=(itkImageToImageFilterIUS3IUS3 const & arg0);
   protected:
     itkImageToImageFilterIUS3IUS3();
     ~itkImageToImageFilterIUS3IUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUS3IUS3_Pointer {
   public:
     itkImageToImageFilterIUS3IUS3_Pointer();
     itkImageToImageFilterIUS3IUS3_Pointer(itkImageToImageFilterIUS3IUS3_Pointer const & p);
     itkImageToImageFilterIUS3IUS3_Pointer(itkImageToImageFilterIUS3IUS3 * p);
     ~itkImageToImageFilterIUS3IUS3_Pointer();
     itkImageToImageFilterIUS3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUS3IUS3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUS3IUS3_Pointer const & r) const;
     itkImageToImageFilterIUS3IUS3_Pointer & operator=(itkImageToImageFilterIUS3IUS3_Pointer const & r);
     itkImageToImageFilterIUS3IUS3_Pointer & operator=(itkImageToImageFilterIUS3IUS3 * r);
     itkImageToImageFilterIUS3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIVF22ICVF22 : public itkImageSourceICVF22 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageVF22 const * image);
     virtual void SetInput(unsigned int arg0, itkImageVF22 const * image);
     itkImageVF22 const * GetInput();
     itkImageVF22 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageVF22 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageVF22 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIVF22ICVF22(itkImageToImageFilterIVF22ICVF22 const & arg0);
     void operator=(itkImageToImageFilterIVF22ICVF22 const & arg0);
   protected:
     itkImageToImageFilterIVF22ICVF22();
     ~itkImageToImageFilterIVF22ICVF22();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIVF22ICVF22_Pointer {
   public:
     itkImageToImageFilterIVF22ICVF22_Pointer();
     itkImageToImageFilterIVF22ICVF22_Pointer(itkImageToImageFilterIVF22ICVF22_Pointer const & p);
     itkImageToImageFilterIVF22ICVF22_Pointer(itkImageToImageFilterIVF22ICVF22 * p);
     ~itkImageToImageFilterIVF22ICVF22_Pointer();
     itkImageToImageFilterIVF22ICVF22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIVF22ICVF22 * GetPointer() const;
     bool operator<(itkImageToImageFilterIVF22ICVF22_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIVF22ICVF22_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIVF22ICVF22_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIVF22ICVF22_Pointer const & r) const;
     itkImageToImageFilterIVF22ICVF22_Pointer & operator=(itkImageToImageFilterIVF22ICVF22_Pointer const & r);
     itkImageToImageFilterIVF22ICVF22_Pointer & operator=(itkImageToImageFilterIVF22ICVF22 * r);
     itkImageToImageFilterIVF22ICVF22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIVF22IVF22 : public itkImageSourceIVF22 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageVF22 const * image);
     virtual void SetInput(unsigned int arg0, itkImageVF22 const * image);
     itkImageVF22 const * GetInput();
     itkImageVF22 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageVF22 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageVF22 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIVF22IVF22(itkImageToImageFilterIVF22IVF22 const & arg0);
     void operator=(itkImageToImageFilterIVF22IVF22 const & arg0);
   protected:
     itkImageToImageFilterIVF22IVF22();
     ~itkImageToImageFilterIVF22IVF22();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIVF22IVF22_Pointer {
   public:
     itkImageToImageFilterIVF22IVF22_Pointer();
     itkImageToImageFilterIVF22IVF22_Pointer(itkImageToImageFilterIVF22IVF22_Pointer const & p);
     itkImageToImageFilterIVF22IVF22_Pointer(itkImageToImageFilterIVF22IVF22 * p);
     ~itkImageToImageFilterIVF22IVF22_Pointer();
     itkImageToImageFilterIVF22IVF22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIVF22IVF22 * GetPointer() const;
     bool operator<(itkImageToImageFilterIVF22IVF22_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIVF22IVF22_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIVF22IVF22_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIVF22IVF22_Pointer const & r) const;
     itkImageToImageFilterIVF22IVF22_Pointer & operator=(itkImageToImageFilterIVF22IVF22_Pointer const & r);
     itkImageToImageFilterIVF22IVF22_Pointer & operator=(itkImageToImageFilterIVF22IVF22 * r);
     itkImageToImageFilterIVF22IVF22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIVF33ICVF33 : public itkImageSourceICVF33 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageVF33 const * image);
     virtual void SetInput(unsigned int arg0, itkImageVF33 const * image);
     itkImageVF33 const * GetInput();
     itkImageVF33 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageVF33 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageVF33 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIVF33ICVF33(itkImageToImageFilterIVF33ICVF33 const & arg0);
     void operator=(itkImageToImageFilterIVF33ICVF33 const & arg0);
   protected:
     itkImageToImageFilterIVF33ICVF33();
     ~itkImageToImageFilterIVF33ICVF33();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIVF33ICVF33_Pointer {
   public:
     itkImageToImageFilterIVF33ICVF33_Pointer();
     itkImageToImageFilterIVF33ICVF33_Pointer(itkImageToImageFilterIVF33ICVF33_Pointer const & p);
     itkImageToImageFilterIVF33ICVF33_Pointer(itkImageToImageFilterIVF33ICVF33 * p);
     ~itkImageToImageFilterIVF33ICVF33_Pointer();
     itkImageToImageFilterIVF33ICVF33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIVF33ICVF33 * GetPointer() const;
     bool operator<(itkImageToImageFilterIVF33ICVF33_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIVF33ICVF33_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIVF33ICVF33_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIVF33ICVF33_Pointer const & r) const;
     itkImageToImageFilterIVF33ICVF33_Pointer & operator=(itkImageToImageFilterIVF33ICVF33_Pointer const & r);
     itkImageToImageFilterIVF33ICVF33_Pointer & operator=(itkImageToImageFilterIVF33ICVF33 * r);
     itkImageToImageFilterIVF33ICVF33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIVF33IVF33 : public itkImageSourceIVF33 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageVF33 const * image);
     virtual void SetInput(unsigned int arg0, itkImageVF33 const * image);
     itkImageVF33 const * GetInput();
     itkImageVF33 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageVF33 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageVF33 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIVF33IVF33(itkImageToImageFilterIVF33IVF33 const & arg0);
     void operator=(itkImageToImageFilterIVF33IVF33 const & arg0);
   protected:
     itkImageToImageFilterIVF33IVF33();
     ~itkImageToImageFilterIVF33IVF33();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIVF33IVF33_Pointer {
   public:
     itkImageToImageFilterIVF33IVF33_Pointer();
     itkImageToImageFilterIVF33IVF33_Pointer(itkImageToImageFilterIVF33IVF33_Pointer const & p);
     itkImageToImageFilterIVF33IVF33_Pointer(itkImageToImageFilterIVF33IVF33 * p);
     ~itkImageToImageFilterIVF33IVF33_Pointer();
     itkImageToImageFilterIVF33IVF33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIVF33IVF33 * GetPointer() const;
     bool operator<(itkImageToImageFilterIVF33IVF33_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIVF33IVF33_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIVF33IVF33_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIVF33IVF33_Pointer const & r) const;
     itkImageToImageFilterIVF33IVF33_Pointer & operator=(itkImageToImageFilterIVF33IVF33_Pointer const & r);
     itkImageToImageFilterIVF33IVF33_Pointer & operator=(itkImageToImageFilterIVF33IVF33 * r);
     itkImageToImageFilterIVF33IVF33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


