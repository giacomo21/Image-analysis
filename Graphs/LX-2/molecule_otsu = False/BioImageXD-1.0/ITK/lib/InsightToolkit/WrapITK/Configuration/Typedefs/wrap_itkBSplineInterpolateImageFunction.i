// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkBSplineInterpolateImageFunctionChicken
#endif
#ifdef SWIGCSHARP
%module itkBSplineInterpolateImageFunctionCsharp
#endif
#ifdef SWIGGUILE
%module itkBSplineInterpolateImageFunctionGuile
#endif
#ifdef SWIGJAVA
%module itkBSplineInterpolateImageFunctionJava
#endif
#ifdef SWIGLUA
%module itkBSplineInterpolateImageFunctionLua
#endif
#ifdef SWIGMODULA3
%module itkBSplineInterpolateImageFunctionModula3
#endif
#ifdef SWIGMZSCHEME
%module itkBSplineInterpolateImageFunctionMzscheme
#endif
#ifdef SWIGOCAML
%module itkBSplineInterpolateImageFunctionOcaml
#endif
#ifdef SWIGPERL
%module itkBSplineInterpolateImageFunctionPerl
#endif
#ifdef SWIGPERL5
%module itkBSplineInterpolateImageFunctionPerl5
#endif
#ifdef SWIGPHP
%module itkBSplineInterpolateImageFunctionPhp
#endif
#ifdef SWIGPHP4
%module itkBSplineInterpolateImageFunctionPhp4
#endif
#ifdef SWIGPHP5
%module itkBSplineInterpolateImageFunctionPhp5
#endif
#ifdef SWIGPIKE
%module itkBSplineInterpolateImageFunctionPike
#endif
#ifdef SWIGPYTHON
%module itkBSplineInterpolateImageFunctionPython
#endif
#ifdef SWIGR
%module itkBSplineInterpolateImageFunctionR
#endif
#ifdef SWIGRUBY
%module itkBSplineInterpolateImageFunctionRuby
#endif
#ifdef SWIGSEXP
%module itkBSplineInterpolateImageFunctionSexp
#endif
#ifdef SWIGTCL
%module itkBSplineInterpolateImageFunctionTcl
#endif
#ifdef SWIGXML
%module itkBSplineInterpolateImageFunctionXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Interpolators.includes"
%}


%{
%}




%import wrap_itkPoint.i
%import wrap_itkContinuousIndex.i
%import wrap_itkImage.i
%import wrap_itkCovariantVector.i
%import wrap_vnl_matrix.i
%import wrap_ITKCommonBase.i
%import wrap_itkInterpolateImageFunction.i


%include itk.i
%include wrap_itkBSplineInterpolateImageFunction_ext.i


 class itkBSplineInterpolateImageFunctionID2DD : public itkInterpolateImageFunctionID2D {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineInterpolateImageFunctionID2DD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual double Evaluate(itkPointD2 const & point) const;
     virtual double Evaluate(itkPointD2 const & point, unsigned int threadID) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD2 const & index) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD2 const & index, unsigned int threadID) const;
     itkCovariantVectorD2 EvaluateDerivative(itkPointD2 const & point) const;
     itkCovariantVectorD2 EvaluateDerivative(itkPointD2 const & point, unsigned int threadID) const;
     itkCovariantVectorD2 EvaluateDerivativeAtContinuousIndex(itkContinuousIndexD2 const & x) const;
     itkCovariantVectorD2 EvaluateDerivativeAtContinuousIndex(itkContinuousIndexD2 const & x, unsigned int threadID) const;
     void EvaluateValueAndDerivative(itkPointD2 const & point, double & value, itkCovariantVectorD2 & deriv) const;
     void EvaluateValueAndDerivative(itkPointD2 const & point, double & value, itkCovariantVectorD2 & deriv, unsigned int threadID) const;
     void EvaluateValueAndDerivativeAtContinuousIndex(itkContinuousIndexD2 const & x, double & value, itkCovariantVectorD2 & deriv) const;
     void EvaluateValueAndDerivativeAtContinuousIndex(itkContinuousIndexD2 const & x, double & value, itkCovariantVectorD2 & deriv, unsigned int threadID) const;
     void SetSplineOrder(unsigned int SplineOrder);
     virtual int GetSplineOrder() const;
     void SetNumberOfThreads(unsigned int numThreads);
     virtual int GetNumberOfThreads() const;
     virtual void SetInputImage(itkImageD2 const * inputData);
     virtual void SetUseImageDirection(bool const _arg);
     virtual bool GetUseImageDirection() const;
     virtual void UseImageDirectionOn();
     virtual void UseImageDirectionOff();
   private:
     itkBSplineInterpolateImageFunctionID2DD(itkBSplineInterpolateImageFunctionID2DD const & arg0);
     void operator=(itkBSplineInterpolateImageFunctionID2DD const & arg0);
     void SetInterpolationWeights(itkContinuousIndexD2 const & x, vnl_matrixSL const & EvaluateIndex, vnl_matrixD & weights, unsigned int splineOrder) const;
     void SetDerivativeWeights(itkContinuousIndexD2 const & x, vnl_matrixSL const & EvaluateIndex, vnl_matrixD & weights, unsigned int splineOrder) const;
     void GeneratePointsToIndex();
     void DetermineRegionOfSupport(vnl_matrixSL & evaluateIndex, itkContinuousIndexD2 const & x, unsigned int splineOrder) const;
     void ApplyMirrorBoundaryConditions(vnl_matrixSL & evaluateIndex, unsigned int splineOrder) const;
   protected:
     virtual double EvaluateAtContinuousIndexInternal(itkContinuousIndexD2 const & index, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights) const;
     virtual void EvaluateValueAndDerivativeAtContinuousIndexInternal(itkContinuousIndexD2 const & x, double & value, itkCovariantVectorD2 & derivativeValue, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights, vnl_matrixD & weightsDerivative) const;
     virtual itkCovariantVectorD2 EvaluateDerivativeAtContinuousIndexInternal(itkContinuousIndexD2 const & x, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights, vnl_matrixD & weightsDerivative) const;
     itkBSplineInterpolateImageFunctionID2DD();
     ~itkBSplineInterpolateImageFunctionID2DD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineInterpolateImageFunctionID2DD_Pointer {
   public:
     itkBSplineInterpolateImageFunctionID2DD_Pointer();
     itkBSplineInterpolateImageFunctionID2DD_Pointer(itkBSplineInterpolateImageFunctionID2DD_Pointer const & p);
     itkBSplineInterpolateImageFunctionID2DD_Pointer(itkBSplineInterpolateImageFunctionID2DD * p);
     ~itkBSplineInterpolateImageFunctionID2DD_Pointer();
     itkBSplineInterpolateImageFunctionID2DD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineInterpolateImageFunctionID2DD * GetPointer() const;
     bool operator<(itkBSplineInterpolateImageFunctionID2DD_Pointer const & r) const;
     bool operator>(itkBSplineInterpolateImageFunctionID2DD_Pointer const & r) const;
     bool operator<=(itkBSplineInterpolateImageFunctionID2DD_Pointer const & r) const;
     bool operator>=(itkBSplineInterpolateImageFunctionID2DD_Pointer const & r) const;
     itkBSplineInterpolateImageFunctionID2DD_Pointer & operator=(itkBSplineInterpolateImageFunctionID2DD_Pointer const & r);
     itkBSplineInterpolateImageFunctionID2DD_Pointer & operator=(itkBSplineInterpolateImageFunctionID2DD * r);
     itkBSplineInterpolateImageFunctionID2DD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineInterpolateImageFunctionID3DD : public itkInterpolateImageFunctionID3D {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineInterpolateImageFunctionID3DD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual double Evaluate(itkPointD3 const & point) const;
     virtual double Evaluate(itkPointD3 const & point, unsigned int threadID) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD3 const & index) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD3 const & index, unsigned int threadID) const;
     itkCovariantVectorD3 EvaluateDerivative(itkPointD3 const & point) const;
     itkCovariantVectorD3 EvaluateDerivative(itkPointD3 const & point, unsigned int threadID) const;
     itkCovariantVectorD3 EvaluateDerivativeAtContinuousIndex(itkContinuousIndexD3 const & x) const;
     itkCovariantVectorD3 EvaluateDerivativeAtContinuousIndex(itkContinuousIndexD3 const & x, unsigned int threadID) const;
     void EvaluateValueAndDerivative(itkPointD3 const & point, double & value, itkCovariantVectorD3 & deriv) const;
     void EvaluateValueAndDerivative(itkPointD3 const & point, double & value, itkCovariantVectorD3 & deriv, unsigned int threadID) const;
     void EvaluateValueAndDerivativeAtContinuousIndex(itkContinuousIndexD3 const & x, double & value, itkCovariantVectorD3 & deriv) const;
     void EvaluateValueAndDerivativeAtContinuousIndex(itkContinuousIndexD3 const & x, double & value, itkCovariantVectorD3 & deriv, unsigned int threadID) const;
     void SetSplineOrder(unsigned int SplineOrder);
     virtual int GetSplineOrder() const;
     void SetNumberOfThreads(unsigned int numThreads);
     virtual int GetNumberOfThreads() const;
     virtual void SetInputImage(itkImageD3 const * inputData);
     virtual void SetUseImageDirection(bool const _arg);
     virtual bool GetUseImageDirection() const;
     virtual void UseImageDirectionOn();
     virtual void UseImageDirectionOff();
   private:
     itkBSplineInterpolateImageFunctionID3DD(itkBSplineInterpolateImageFunctionID3DD const & arg0);
     void operator=(itkBSplineInterpolateImageFunctionID3DD const & arg0);
     void SetInterpolationWeights(itkContinuousIndexD3 const & x, vnl_matrixSL const & EvaluateIndex, vnl_matrixD & weights, unsigned int splineOrder) const;
     void SetDerivativeWeights(itkContinuousIndexD3 const & x, vnl_matrixSL const & EvaluateIndex, vnl_matrixD & weights, unsigned int splineOrder) const;
     void GeneratePointsToIndex();
     void DetermineRegionOfSupport(vnl_matrixSL & evaluateIndex, itkContinuousIndexD3 const & x, unsigned int splineOrder) const;
     void ApplyMirrorBoundaryConditions(vnl_matrixSL & evaluateIndex, unsigned int splineOrder) const;
   protected:
     virtual double EvaluateAtContinuousIndexInternal(itkContinuousIndexD3 const & index, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights) const;
     virtual void EvaluateValueAndDerivativeAtContinuousIndexInternal(itkContinuousIndexD3 const & x, double & value, itkCovariantVectorD3 & derivativeValue, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights, vnl_matrixD & weightsDerivative) const;
     virtual itkCovariantVectorD3 EvaluateDerivativeAtContinuousIndexInternal(itkContinuousIndexD3 const & x, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights, vnl_matrixD & weightsDerivative) const;
     itkBSplineInterpolateImageFunctionID3DD();
     ~itkBSplineInterpolateImageFunctionID3DD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineInterpolateImageFunctionID3DD_Pointer {
   public:
     itkBSplineInterpolateImageFunctionID3DD_Pointer();
     itkBSplineInterpolateImageFunctionID3DD_Pointer(itkBSplineInterpolateImageFunctionID3DD_Pointer const & p);
     itkBSplineInterpolateImageFunctionID3DD_Pointer(itkBSplineInterpolateImageFunctionID3DD * p);
     ~itkBSplineInterpolateImageFunctionID3DD_Pointer();
     itkBSplineInterpolateImageFunctionID3DD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineInterpolateImageFunctionID3DD * GetPointer() const;
     bool operator<(itkBSplineInterpolateImageFunctionID3DD_Pointer const & r) const;
     bool operator>(itkBSplineInterpolateImageFunctionID3DD_Pointer const & r) const;
     bool operator<=(itkBSplineInterpolateImageFunctionID3DD_Pointer const & r) const;
     bool operator>=(itkBSplineInterpolateImageFunctionID3DD_Pointer const & r) const;
     itkBSplineInterpolateImageFunctionID3DD_Pointer & operator=(itkBSplineInterpolateImageFunctionID3DD_Pointer const & r);
     itkBSplineInterpolateImageFunctionID3DD_Pointer & operator=(itkBSplineInterpolateImageFunctionID3DD * r);
     itkBSplineInterpolateImageFunctionID3DD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineInterpolateImageFunctionIF2DF : public itkInterpolateImageFunctionIF2D {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineInterpolateImageFunctionIF2DF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual double Evaluate(itkPointD2 const & point) const;
     virtual double Evaluate(itkPointD2 const & point, unsigned int threadID) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD2 const & index) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD2 const & index, unsigned int threadID) const;
     itkCovariantVectorD2 EvaluateDerivative(itkPointD2 const & point) const;
     itkCovariantVectorD2 EvaluateDerivative(itkPointD2 const & point, unsigned int threadID) const;
     itkCovariantVectorD2 EvaluateDerivativeAtContinuousIndex(itkContinuousIndexD2 const & x) const;
     itkCovariantVectorD2 EvaluateDerivativeAtContinuousIndex(itkContinuousIndexD2 const & x, unsigned int threadID) const;
     void EvaluateValueAndDerivative(itkPointD2 const & point, double & value, itkCovariantVectorD2 & deriv) const;
     void EvaluateValueAndDerivative(itkPointD2 const & point, double & value, itkCovariantVectorD2 & deriv, unsigned int threadID) const;
     void EvaluateValueAndDerivativeAtContinuousIndex(itkContinuousIndexD2 const & x, double & value, itkCovariantVectorD2 & deriv) const;
     void EvaluateValueAndDerivativeAtContinuousIndex(itkContinuousIndexD2 const & x, double & value, itkCovariantVectorD2 & deriv, unsigned int threadID) const;
     void SetSplineOrder(unsigned int SplineOrder);
     virtual int GetSplineOrder() const;
     void SetNumberOfThreads(unsigned int numThreads);
     virtual int GetNumberOfThreads() const;
     virtual void SetInputImage(itkImageF2 const * inputData);
     virtual void SetUseImageDirection(bool const _arg);
     virtual bool GetUseImageDirection() const;
     virtual void UseImageDirectionOn();
     virtual void UseImageDirectionOff();
   private:
     itkBSplineInterpolateImageFunctionIF2DF(itkBSplineInterpolateImageFunctionIF2DF const & arg0);
     void operator=(itkBSplineInterpolateImageFunctionIF2DF const & arg0);
     void SetInterpolationWeights(itkContinuousIndexD2 const & x, vnl_matrixSL const & EvaluateIndex, vnl_matrixD & weights, unsigned int splineOrder) const;
     void SetDerivativeWeights(itkContinuousIndexD2 const & x, vnl_matrixSL const & EvaluateIndex, vnl_matrixD & weights, unsigned int splineOrder) const;
     void GeneratePointsToIndex();
     void DetermineRegionOfSupport(vnl_matrixSL & evaluateIndex, itkContinuousIndexD2 const & x, unsigned int splineOrder) const;
     void ApplyMirrorBoundaryConditions(vnl_matrixSL & evaluateIndex, unsigned int splineOrder) const;
   protected:
     virtual double EvaluateAtContinuousIndexInternal(itkContinuousIndexD2 const & index, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights) const;
     virtual void EvaluateValueAndDerivativeAtContinuousIndexInternal(itkContinuousIndexD2 const & x, double & value, itkCovariantVectorD2 & derivativeValue, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights, vnl_matrixD & weightsDerivative) const;
     virtual itkCovariantVectorD2 EvaluateDerivativeAtContinuousIndexInternal(itkContinuousIndexD2 const & x, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights, vnl_matrixD & weightsDerivative) const;
     itkBSplineInterpolateImageFunctionIF2DF();
     ~itkBSplineInterpolateImageFunctionIF2DF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineInterpolateImageFunctionIF2DF_Pointer {
   public:
     itkBSplineInterpolateImageFunctionIF2DF_Pointer();
     itkBSplineInterpolateImageFunctionIF2DF_Pointer(itkBSplineInterpolateImageFunctionIF2DF_Pointer const & p);
     itkBSplineInterpolateImageFunctionIF2DF_Pointer(itkBSplineInterpolateImageFunctionIF2DF * p);
     ~itkBSplineInterpolateImageFunctionIF2DF_Pointer();
     itkBSplineInterpolateImageFunctionIF2DF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineInterpolateImageFunctionIF2DF * GetPointer() const;
     bool operator<(itkBSplineInterpolateImageFunctionIF2DF_Pointer const & r) const;
     bool operator>(itkBSplineInterpolateImageFunctionIF2DF_Pointer const & r) const;
     bool operator<=(itkBSplineInterpolateImageFunctionIF2DF_Pointer const & r) const;
     bool operator>=(itkBSplineInterpolateImageFunctionIF2DF_Pointer const & r) const;
     itkBSplineInterpolateImageFunctionIF2DF_Pointer & operator=(itkBSplineInterpolateImageFunctionIF2DF_Pointer const & r);
     itkBSplineInterpolateImageFunctionIF2DF_Pointer & operator=(itkBSplineInterpolateImageFunctionIF2DF * r);
     itkBSplineInterpolateImageFunctionIF2DF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineInterpolateImageFunctionIF3DF : public itkInterpolateImageFunctionIF3D {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineInterpolateImageFunctionIF3DF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual double Evaluate(itkPointD3 const & point) const;
     virtual double Evaluate(itkPointD3 const & point, unsigned int threadID) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD3 const & index) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD3 const & index, unsigned int threadID) const;
     itkCovariantVectorD3 EvaluateDerivative(itkPointD3 const & point) const;
     itkCovariantVectorD3 EvaluateDerivative(itkPointD3 const & point, unsigned int threadID) const;
     itkCovariantVectorD3 EvaluateDerivativeAtContinuousIndex(itkContinuousIndexD3 const & x) const;
     itkCovariantVectorD3 EvaluateDerivativeAtContinuousIndex(itkContinuousIndexD3 const & x, unsigned int threadID) const;
     void EvaluateValueAndDerivative(itkPointD3 const & point, double & value, itkCovariantVectorD3 & deriv) const;
     void EvaluateValueAndDerivative(itkPointD3 const & point, double & value, itkCovariantVectorD3 & deriv, unsigned int threadID) const;
     void EvaluateValueAndDerivativeAtContinuousIndex(itkContinuousIndexD3 const & x, double & value, itkCovariantVectorD3 & deriv) const;
     void EvaluateValueAndDerivativeAtContinuousIndex(itkContinuousIndexD3 const & x, double & value, itkCovariantVectorD3 & deriv, unsigned int threadID) const;
     void SetSplineOrder(unsigned int SplineOrder);
     virtual int GetSplineOrder() const;
     void SetNumberOfThreads(unsigned int numThreads);
     virtual int GetNumberOfThreads() const;
     virtual void SetInputImage(itkImageF3 const * inputData);
     virtual void SetUseImageDirection(bool const _arg);
     virtual bool GetUseImageDirection() const;
     virtual void UseImageDirectionOn();
     virtual void UseImageDirectionOff();
   private:
     itkBSplineInterpolateImageFunctionIF3DF(itkBSplineInterpolateImageFunctionIF3DF const & arg0);
     void operator=(itkBSplineInterpolateImageFunctionIF3DF const & arg0);
     void SetInterpolationWeights(itkContinuousIndexD3 const & x, vnl_matrixSL const & EvaluateIndex, vnl_matrixD & weights, unsigned int splineOrder) const;
     void SetDerivativeWeights(itkContinuousIndexD3 const & x, vnl_matrixSL const & EvaluateIndex, vnl_matrixD & weights, unsigned int splineOrder) const;
     void GeneratePointsToIndex();
     void DetermineRegionOfSupport(vnl_matrixSL & evaluateIndex, itkContinuousIndexD3 const & x, unsigned int splineOrder) const;
     void ApplyMirrorBoundaryConditions(vnl_matrixSL & evaluateIndex, unsigned int splineOrder) const;
   protected:
     virtual double EvaluateAtContinuousIndexInternal(itkContinuousIndexD3 const & index, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights) const;
     virtual void EvaluateValueAndDerivativeAtContinuousIndexInternal(itkContinuousIndexD3 const & x, double & value, itkCovariantVectorD3 & derivativeValue, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights, vnl_matrixD & weightsDerivative) const;
     virtual itkCovariantVectorD3 EvaluateDerivativeAtContinuousIndexInternal(itkContinuousIndexD3 const & x, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights, vnl_matrixD & weightsDerivative) const;
     itkBSplineInterpolateImageFunctionIF3DF();
     ~itkBSplineInterpolateImageFunctionIF3DF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineInterpolateImageFunctionIF3DF_Pointer {
   public:
     itkBSplineInterpolateImageFunctionIF3DF_Pointer();
     itkBSplineInterpolateImageFunctionIF3DF_Pointer(itkBSplineInterpolateImageFunctionIF3DF_Pointer const & p);
     itkBSplineInterpolateImageFunctionIF3DF_Pointer(itkBSplineInterpolateImageFunctionIF3DF * p);
     ~itkBSplineInterpolateImageFunctionIF3DF_Pointer();
     itkBSplineInterpolateImageFunctionIF3DF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineInterpolateImageFunctionIF3DF * GetPointer() const;
     bool operator<(itkBSplineInterpolateImageFunctionIF3DF_Pointer const & r) const;
     bool operator>(itkBSplineInterpolateImageFunctionIF3DF_Pointer const & r) const;
     bool operator<=(itkBSplineInterpolateImageFunctionIF3DF_Pointer const & r) const;
     bool operator>=(itkBSplineInterpolateImageFunctionIF3DF_Pointer const & r) const;
     itkBSplineInterpolateImageFunctionIF3DF_Pointer & operator=(itkBSplineInterpolateImageFunctionIF3DF_Pointer const & r);
     itkBSplineInterpolateImageFunctionIF3DF_Pointer & operator=(itkBSplineInterpolateImageFunctionIF3DF * r);
     itkBSplineInterpolateImageFunctionIF3DF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineInterpolateImageFunctionIUC2DUC : public itkInterpolateImageFunctionIUC2D {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineInterpolateImageFunctionIUC2DUC_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual double Evaluate(itkPointD2 const & point) const;
     virtual double Evaluate(itkPointD2 const & point, unsigned int threadID) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD2 const & index) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD2 const & index, unsigned int threadID) const;
     itkCovariantVectorD2 EvaluateDerivative(itkPointD2 const & point) const;
     itkCovariantVectorD2 EvaluateDerivative(itkPointD2 const & point, unsigned int threadID) const;
     itkCovariantVectorD2 EvaluateDerivativeAtContinuousIndex(itkContinuousIndexD2 const & x) const;
     itkCovariantVectorD2 EvaluateDerivativeAtContinuousIndex(itkContinuousIndexD2 const & x, unsigned int threadID) const;
     void EvaluateValueAndDerivative(itkPointD2 const & point, double & value, itkCovariantVectorD2 & deriv) const;
     void EvaluateValueAndDerivative(itkPointD2 const & point, double & value, itkCovariantVectorD2 & deriv, unsigned int threadID) const;
     void EvaluateValueAndDerivativeAtContinuousIndex(itkContinuousIndexD2 const & x, double & value, itkCovariantVectorD2 & deriv) const;
     void EvaluateValueAndDerivativeAtContinuousIndex(itkContinuousIndexD2 const & x, double & value, itkCovariantVectorD2 & deriv, unsigned int threadID) const;
     void SetSplineOrder(unsigned int SplineOrder);
     virtual int GetSplineOrder() const;
     void SetNumberOfThreads(unsigned int numThreads);
     virtual int GetNumberOfThreads() const;
     virtual void SetInputImage(itkImageUC2 const * inputData);
     virtual void SetUseImageDirection(bool const _arg);
     virtual bool GetUseImageDirection() const;
     virtual void UseImageDirectionOn();
     virtual void UseImageDirectionOff();
   private:
     itkBSplineInterpolateImageFunctionIUC2DUC(itkBSplineInterpolateImageFunctionIUC2DUC const & arg0);
     void operator=(itkBSplineInterpolateImageFunctionIUC2DUC const & arg0);
     void SetInterpolationWeights(itkContinuousIndexD2 const & x, vnl_matrixSL const & EvaluateIndex, vnl_matrixD & weights, unsigned int splineOrder) const;
     void SetDerivativeWeights(itkContinuousIndexD2 const & x, vnl_matrixSL const & EvaluateIndex, vnl_matrixD & weights, unsigned int splineOrder) const;
     void GeneratePointsToIndex();
     void DetermineRegionOfSupport(vnl_matrixSL & evaluateIndex, itkContinuousIndexD2 const & x, unsigned int splineOrder) const;
     void ApplyMirrorBoundaryConditions(vnl_matrixSL & evaluateIndex, unsigned int splineOrder) const;
   protected:
     virtual double EvaluateAtContinuousIndexInternal(itkContinuousIndexD2 const & index, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights) const;
     virtual void EvaluateValueAndDerivativeAtContinuousIndexInternal(itkContinuousIndexD2 const & x, double & value, itkCovariantVectorD2 & derivativeValue, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights, vnl_matrixD & weightsDerivative) const;
     virtual itkCovariantVectorD2 EvaluateDerivativeAtContinuousIndexInternal(itkContinuousIndexD2 const & x, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights, vnl_matrixD & weightsDerivative) const;
     itkBSplineInterpolateImageFunctionIUC2DUC();
     ~itkBSplineInterpolateImageFunctionIUC2DUC();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineInterpolateImageFunctionIUC2DUC_Pointer {
   public:
     itkBSplineInterpolateImageFunctionIUC2DUC_Pointer();
     itkBSplineInterpolateImageFunctionIUC2DUC_Pointer(itkBSplineInterpolateImageFunctionIUC2DUC_Pointer const & p);
     itkBSplineInterpolateImageFunctionIUC2DUC_Pointer(itkBSplineInterpolateImageFunctionIUC2DUC * p);
     ~itkBSplineInterpolateImageFunctionIUC2DUC_Pointer();
     itkBSplineInterpolateImageFunctionIUC2DUC * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineInterpolateImageFunctionIUC2DUC * GetPointer() const;
     bool operator<(itkBSplineInterpolateImageFunctionIUC2DUC_Pointer const & r) const;
     bool operator>(itkBSplineInterpolateImageFunctionIUC2DUC_Pointer const & r) const;
     bool operator<=(itkBSplineInterpolateImageFunctionIUC2DUC_Pointer const & r) const;
     bool operator>=(itkBSplineInterpolateImageFunctionIUC2DUC_Pointer const & r) const;
     itkBSplineInterpolateImageFunctionIUC2DUC_Pointer & operator=(itkBSplineInterpolateImageFunctionIUC2DUC_Pointer const & r);
     itkBSplineInterpolateImageFunctionIUC2DUC_Pointer & operator=(itkBSplineInterpolateImageFunctionIUC2DUC * r);
     itkBSplineInterpolateImageFunctionIUC2DUC * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineInterpolateImageFunctionIUC3DUC : public itkInterpolateImageFunctionIUC3D {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineInterpolateImageFunctionIUC3DUC_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual double Evaluate(itkPointD3 const & point) const;
     virtual double Evaluate(itkPointD3 const & point, unsigned int threadID) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD3 const & index) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD3 const & index, unsigned int threadID) const;
     itkCovariantVectorD3 EvaluateDerivative(itkPointD3 const & point) const;
     itkCovariantVectorD3 EvaluateDerivative(itkPointD3 const & point, unsigned int threadID) const;
     itkCovariantVectorD3 EvaluateDerivativeAtContinuousIndex(itkContinuousIndexD3 const & x) const;
     itkCovariantVectorD3 EvaluateDerivativeAtContinuousIndex(itkContinuousIndexD3 const & x, unsigned int threadID) const;
     void EvaluateValueAndDerivative(itkPointD3 const & point, double & value, itkCovariantVectorD3 & deriv) const;
     void EvaluateValueAndDerivative(itkPointD3 const & point, double & value, itkCovariantVectorD3 & deriv, unsigned int threadID) const;
     void EvaluateValueAndDerivativeAtContinuousIndex(itkContinuousIndexD3 const & x, double & value, itkCovariantVectorD3 & deriv) const;
     void EvaluateValueAndDerivativeAtContinuousIndex(itkContinuousIndexD3 const & x, double & value, itkCovariantVectorD3 & deriv, unsigned int threadID) const;
     void SetSplineOrder(unsigned int SplineOrder);
     virtual int GetSplineOrder() const;
     void SetNumberOfThreads(unsigned int numThreads);
     virtual int GetNumberOfThreads() const;
     virtual void SetInputImage(itkImageUC3 const * inputData);
     virtual void SetUseImageDirection(bool const _arg);
     virtual bool GetUseImageDirection() const;
     virtual void UseImageDirectionOn();
     virtual void UseImageDirectionOff();
   private:
     itkBSplineInterpolateImageFunctionIUC3DUC(itkBSplineInterpolateImageFunctionIUC3DUC const & arg0);
     void operator=(itkBSplineInterpolateImageFunctionIUC3DUC const & arg0);
     void SetInterpolationWeights(itkContinuousIndexD3 const & x, vnl_matrixSL const & EvaluateIndex, vnl_matrixD & weights, unsigned int splineOrder) const;
     void SetDerivativeWeights(itkContinuousIndexD3 const & x, vnl_matrixSL const & EvaluateIndex, vnl_matrixD & weights, unsigned int splineOrder) const;
     void GeneratePointsToIndex();
     void DetermineRegionOfSupport(vnl_matrixSL & evaluateIndex, itkContinuousIndexD3 const & x, unsigned int splineOrder) const;
     void ApplyMirrorBoundaryConditions(vnl_matrixSL & evaluateIndex, unsigned int splineOrder) const;
   protected:
     virtual double EvaluateAtContinuousIndexInternal(itkContinuousIndexD3 const & index, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights) const;
     virtual void EvaluateValueAndDerivativeAtContinuousIndexInternal(itkContinuousIndexD3 const & x, double & value, itkCovariantVectorD3 & derivativeValue, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights, vnl_matrixD & weightsDerivative) const;
     virtual itkCovariantVectorD3 EvaluateDerivativeAtContinuousIndexInternal(itkContinuousIndexD3 const & x, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights, vnl_matrixD & weightsDerivative) const;
     itkBSplineInterpolateImageFunctionIUC3DUC();
     ~itkBSplineInterpolateImageFunctionIUC3DUC();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineInterpolateImageFunctionIUC3DUC_Pointer {
   public:
     itkBSplineInterpolateImageFunctionIUC3DUC_Pointer();
     itkBSplineInterpolateImageFunctionIUC3DUC_Pointer(itkBSplineInterpolateImageFunctionIUC3DUC_Pointer const & p);
     itkBSplineInterpolateImageFunctionIUC3DUC_Pointer(itkBSplineInterpolateImageFunctionIUC3DUC * p);
     ~itkBSplineInterpolateImageFunctionIUC3DUC_Pointer();
     itkBSplineInterpolateImageFunctionIUC3DUC * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineInterpolateImageFunctionIUC3DUC * GetPointer() const;
     bool operator<(itkBSplineInterpolateImageFunctionIUC3DUC_Pointer const & r) const;
     bool operator>(itkBSplineInterpolateImageFunctionIUC3DUC_Pointer const & r) const;
     bool operator<=(itkBSplineInterpolateImageFunctionIUC3DUC_Pointer const & r) const;
     bool operator>=(itkBSplineInterpolateImageFunctionIUC3DUC_Pointer const & r) const;
     itkBSplineInterpolateImageFunctionIUC3DUC_Pointer & operator=(itkBSplineInterpolateImageFunctionIUC3DUC_Pointer const & r);
     itkBSplineInterpolateImageFunctionIUC3DUC_Pointer & operator=(itkBSplineInterpolateImageFunctionIUC3DUC * r);
     itkBSplineInterpolateImageFunctionIUC3DUC * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineInterpolateImageFunctionIUL2DUL : public itkInterpolateImageFunctionIUL2D {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineInterpolateImageFunctionIUL2DUL_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual double Evaluate(itkPointD2 const & point) const;
     virtual double Evaluate(itkPointD2 const & point, unsigned int threadID) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD2 const & index) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD2 const & index, unsigned int threadID) const;
     itkCovariantVectorD2 EvaluateDerivative(itkPointD2 const & point) const;
     itkCovariantVectorD2 EvaluateDerivative(itkPointD2 const & point, unsigned int threadID) const;
     itkCovariantVectorD2 EvaluateDerivativeAtContinuousIndex(itkContinuousIndexD2 const & x) const;
     itkCovariantVectorD2 EvaluateDerivativeAtContinuousIndex(itkContinuousIndexD2 const & x, unsigned int threadID) const;
     void EvaluateValueAndDerivative(itkPointD2 const & point, double & value, itkCovariantVectorD2 & deriv) const;
     void EvaluateValueAndDerivative(itkPointD2 const & point, double & value, itkCovariantVectorD2 & deriv, unsigned int threadID) const;
     void EvaluateValueAndDerivativeAtContinuousIndex(itkContinuousIndexD2 const & x, double & value, itkCovariantVectorD2 & deriv) const;
     void EvaluateValueAndDerivativeAtContinuousIndex(itkContinuousIndexD2 const & x, double & value, itkCovariantVectorD2 & deriv, unsigned int threadID) const;
     void SetSplineOrder(unsigned int SplineOrder);
     virtual int GetSplineOrder() const;
     void SetNumberOfThreads(unsigned int numThreads);
     virtual int GetNumberOfThreads() const;
     virtual void SetInputImage(itkImageUL2 const * inputData);
     virtual void SetUseImageDirection(bool const _arg);
     virtual bool GetUseImageDirection() const;
     virtual void UseImageDirectionOn();
     virtual void UseImageDirectionOff();
   private:
     itkBSplineInterpolateImageFunctionIUL2DUL(itkBSplineInterpolateImageFunctionIUL2DUL const & arg0);
     void operator=(itkBSplineInterpolateImageFunctionIUL2DUL const & arg0);
     void SetInterpolationWeights(itkContinuousIndexD2 const & x, vnl_matrixSL const & EvaluateIndex, vnl_matrixD & weights, unsigned int splineOrder) const;
     void SetDerivativeWeights(itkContinuousIndexD2 const & x, vnl_matrixSL const & EvaluateIndex, vnl_matrixD & weights, unsigned int splineOrder) const;
     void GeneratePointsToIndex();
     void DetermineRegionOfSupport(vnl_matrixSL & evaluateIndex, itkContinuousIndexD2 const & x, unsigned int splineOrder) const;
     void ApplyMirrorBoundaryConditions(vnl_matrixSL & evaluateIndex, unsigned int splineOrder) const;
   protected:
     virtual double EvaluateAtContinuousIndexInternal(itkContinuousIndexD2 const & index, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights) const;
     virtual void EvaluateValueAndDerivativeAtContinuousIndexInternal(itkContinuousIndexD2 const & x, double & value, itkCovariantVectorD2 & derivativeValue, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights, vnl_matrixD & weightsDerivative) const;
     virtual itkCovariantVectorD2 EvaluateDerivativeAtContinuousIndexInternal(itkContinuousIndexD2 const & x, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights, vnl_matrixD & weightsDerivative) const;
     itkBSplineInterpolateImageFunctionIUL2DUL();
     ~itkBSplineInterpolateImageFunctionIUL2DUL();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineInterpolateImageFunctionIUL2DUL_Pointer {
   public:
     itkBSplineInterpolateImageFunctionIUL2DUL_Pointer();
     itkBSplineInterpolateImageFunctionIUL2DUL_Pointer(itkBSplineInterpolateImageFunctionIUL2DUL_Pointer const & p);
     itkBSplineInterpolateImageFunctionIUL2DUL_Pointer(itkBSplineInterpolateImageFunctionIUL2DUL * p);
     ~itkBSplineInterpolateImageFunctionIUL2DUL_Pointer();
     itkBSplineInterpolateImageFunctionIUL2DUL * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineInterpolateImageFunctionIUL2DUL * GetPointer() const;
     bool operator<(itkBSplineInterpolateImageFunctionIUL2DUL_Pointer const & r) const;
     bool operator>(itkBSplineInterpolateImageFunctionIUL2DUL_Pointer const & r) const;
     bool operator<=(itkBSplineInterpolateImageFunctionIUL2DUL_Pointer const & r) const;
     bool operator>=(itkBSplineInterpolateImageFunctionIUL2DUL_Pointer const & r) const;
     itkBSplineInterpolateImageFunctionIUL2DUL_Pointer & operator=(itkBSplineInterpolateImageFunctionIUL2DUL_Pointer const & r);
     itkBSplineInterpolateImageFunctionIUL2DUL_Pointer & operator=(itkBSplineInterpolateImageFunctionIUL2DUL * r);
     itkBSplineInterpolateImageFunctionIUL2DUL * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineInterpolateImageFunctionIUL3DUL : public itkInterpolateImageFunctionIUL3D {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineInterpolateImageFunctionIUL3DUL_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual double Evaluate(itkPointD3 const & point) const;
     virtual double Evaluate(itkPointD3 const & point, unsigned int threadID) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD3 const & index) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD3 const & index, unsigned int threadID) const;
     itkCovariantVectorD3 EvaluateDerivative(itkPointD3 const & point) const;
     itkCovariantVectorD3 EvaluateDerivative(itkPointD3 const & point, unsigned int threadID) const;
     itkCovariantVectorD3 EvaluateDerivativeAtContinuousIndex(itkContinuousIndexD3 const & x) const;
     itkCovariantVectorD3 EvaluateDerivativeAtContinuousIndex(itkContinuousIndexD3 const & x, unsigned int threadID) const;
     void EvaluateValueAndDerivative(itkPointD3 const & point, double & value, itkCovariantVectorD3 & deriv) const;
     void EvaluateValueAndDerivative(itkPointD3 const & point, double & value, itkCovariantVectorD3 & deriv, unsigned int threadID) const;
     void EvaluateValueAndDerivativeAtContinuousIndex(itkContinuousIndexD3 const & x, double & value, itkCovariantVectorD3 & deriv) const;
     void EvaluateValueAndDerivativeAtContinuousIndex(itkContinuousIndexD3 const & x, double & value, itkCovariantVectorD3 & deriv, unsigned int threadID) const;
     void SetSplineOrder(unsigned int SplineOrder);
     virtual int GetSplineOrder() const;
     void SetNumberOfThreads(unsigned int numThreads);
     virtual int GetNumberOfThreads() const;
     virtual void SetInputImage(itkImageUL3 const * inputData);
     virtual void SetUseImageDirection(bool const _arg);
     virtual bool GetUseImageDirection() const;
     virtual void UseImageDirectionOn();
     virtual void UseImageDirectionOff();
   private:
     itkBSplineInterpolateImageFunctionIUL3DUL(itkBSplineInterpolateImageFunctionIUL3DUL const & arg0);
     void operator=(itkBSplineInterpolateImageFunctionIUL3DUL const & arg0);
     void SetInterpolationWeights(itkContinuousIndexD3 const & x, vnl_matrixSL const & EvaluateIndex, vnl_matrixD & weights, unsigned int splineOrder) const;
     void SetDerivativeWeights(itkContinuousIndexD3 const & x, vnl_matrixSL const & EvaluateIndex, vnl_matrixD & weights, unsigned int splineOrder) const;
     void GeneratePointsToIndex();
     void DetermineRegionOfSupport(vnl_matrixSL & evaluateIndex, itkContinuousIndexD3 const & x, unsigned int splineOrder) const;
     void ApplyMirrorBoundaryConditions(vnl_matrixSL & evaluateIndex, unsigned int splineOrder) const;
   protected:
     virtual double EvaluateAtContinuousIndexInternal(itkContinuousIndexD3 const & index, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights) const;
     virtual void EvaluateValueAndDerivativeAtContinuousIndexInternal(itkContinuousIndexD3 const & x, double & value, itkCovariantVectorD3 & derivativeValue, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights, vnl_matrixD & weightsDerivative) const;
     virtual itkCovariantVectorD3 EvaluateDerivativeAtContinuousIndexInternal(itkContinuousIndexD3 const & x, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights, vnl_matrixD & weightsDerivative) const;
     itkBSplineInterpolateImageFunctionIUL3DUL();
     ~itkBSplineInterpolateImageFunctionIUL3DUL();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineInterpolateImageFunctionIUL3DUL_Pointer {
   public:
     itkBSplineInterpolateImageFunctionIUL3DUL_Pointer();
     itkBSplineInterpolateImageFunctionIUL3DUL_Pointer(itkBSplineInterpolateImageFunctionIUL3DUL_Pointer const & p);
     itkBSplineInterpolateImageFunctionIUL3DUL_Pointer(itkBSplineInterpolateImageFunctionIUL3DUL * p);
     ~itkBSplineInterpolateImageFunctionIUL3DUL_Pointer();
     itkBSplineInterpolateImageFunctionIUL3DUL * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineInterpolateImageFunctionIUL3DUL * GetPointer() const;
     bool operator<(itkBSplineInterpolateImageFunctionIUL3DUL_Pointer const & r) const;
     bool operator>(itkBSplineInterpolateImageFunctionIUL3DUL_Pointer const & r) const;
     bool operator<=(itkBSplineInterpolateImageFunctionIUL3DUL_Pointer const & r) const;
     bool operator>=(itkBSplineInterpolateImageFunctionIUL3DUL_Pointer const & r) const;
     itkBSplineInterpolateImageFunctionIUL3DUL_Pointer & operator=(itkBSplineInterpolateImageFunctionIUL3DUL_Pointer const & r);
     itkBSplineInterpolateImageFunctionIUL3DUL_Pointer & operator=(itkBSplineInterpolateImageFunctionIUL3DUL * r);
     itkBSplineInterpolateImageFunctionIUL3DUL * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineInterpolateImageFunctionIUS2DUS : public itkInterpolateImageFunctionIUS2D {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineInterpolateImageFunctionIUS2DUS_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual double Evaluate(itkPointD2 const & point) const;
     virtual double Evaluate(itkPointD2 const & point, unsigned int threadID) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD2 const & index) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD2 const & index, unsigned int threadID) const;
     itkCovariantVectorD2 EvaluateDerivative(itkPointD2 const & point) const;
     itkCovariantVectorD2 EvaluateDerivative(itkPointD2 const & point, unsigned int threadID) const;
     itkCovariantVectorD2 EvaluateDerivativeAtContinuousIndex(itkContinuousIndexD2 const & x) const;
     itkCovariantVectorD2 EvaluateDerivativeAtContinuousIndex(itkContinuousIndexD2 const & x, unsigned int threadID) const;
     void EvaluateValueAndDerivative(itkPointD2 const & point, double & value, itkCovariantVectorD2 & deriv) const;
     void EvaluateValueAndDerivative(itkPointD2 const & point, double & value, itkCovariantVectorD2 & deriv, unsigned int threadID) const;
     void EvaluateValueAndDerivativeAtContinuousIndex(itkContinuousIndexD2 const & x, double & value, itkCovariantVectorD2 & deriv) const;
     void EvaluateValueAndDerivativeAtContinuousIndex(itkContinuousIndexD2 const & x, double & value, itkCovariantVectorD2 & deriv, unsigned int threadID) const;
     void SetSplineOrder(unsigned int SplineOrder);
     virtual int GetSplineOrder() const;
     void SetNumberOfThreads(unsigned int numThreads);
     virtual int GetNumberOfThreads() const;
     virtual void SetInputImage(itkImageUS2 const * inputData);
     virtual void SetUseImageDirection(bool const _arg);
     virtual bool GetUseImageDirection() const;
     virtual void UseImageDirectionOn();
     virtual void UseImageDirectionOff();
   private:
     itkBSplineInterpolateImageFunctionIUS2DUS(itkBSplineInterpolateImageFunctionIUS2DUS const & arg0);
     void operator=(itkBSplineInterpolateImageFunctionIUS2DUS const & arg0);
     void SetInterpolationWeights(itkContinuousIndexD2 const & x, vnl_matrixSL const & EvaluateIndex, vnl_matrixD & weights, unsigned int splineOrder) const;
     void SetDerivativeWeights(itkContinuousIndexD2 const & x, vnl_matrixSL const & EvaluateIndex, vnl_matrixD & weights, unsigned int splineOrder) const;
     void GeneratePointsToIndex();
     void DetermineRegionOfSupport(vnl_matrixSL & evaluateIndex, itkContinuousIndexD2 const & x, unsigned int splineOrder) const;
     void ApplyMirrorBoundaryConditions(vnl_matrixSL & evaluateIndex, unsigned int splineOrder) const;
   protected:
     virtual double EvaluateAtContinuousIndexInternal(itkContinuousIndexD2 const & index, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights) const;
     virtual void EvaluateValueAndDerivativeAtContinuousIndexInternal(itkContinuousIndexD2 const & x, double & value, itkCovariantVectorD2 & derivativeValue, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights, vnl_matrixD & weightsDerivative) const;
     virtual itkCovariantVectorD2 EvaluateDerivativeAtContinuousIndexInternal(itkContinuousIndexD2 const & x, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights, vnl_matrixD & weightsDerivative) const;
     itkBSplineInterpolateImageFunctionIUS2DUS();
     ~itkBSplineInterpolateImageFunctionIUS2DUS();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineInterpolateImageFunctionIUS2DUS_Pointer {
   public:
     itkBSplineInterpolateImageFunctionIUS2DUS_Pointer();
     itkBSplineInterpolateImageFunctionIUS2DUS_Pointer(itkBSplineInterpolateImageFunctionIUS2DUS_Pointer const & p);
     itkBSplineInterpolateImageFunctionIUS2DUS_Pointer(itkBSplineInterpolateImageFunctionIUS2DUS * p);
     ~itkBSplineInterpolateImageFunctionIUS2DUS_Pointer();
     itkBSplineInterpolateImageFunctionIUS2DUS * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineInterpolateImageFunctionIUS2DUS * GetPointer() const;
     bool operator<(itkBSplineInterpolateImageFunctionIUS2DUS_Pointer const & r) const;
     bool operator>(itkBSplineInterpolateImageFunctionIUS2DUS_Pointer const & r) const;
     bool operator<=(itkBSplineInterpolateImageFunctionIUS2DUS_Pointer const & r) const;
     bool operator>=(itkBSplineInterpolateImageFunctionIUS2DUS_Pointer const & r) const;
     itkBSplineInterpolateImageFunctionIUS2DUS_Pointer & operator=(itkBSplineInterpolateImageFunctionIUS2DUS_Pointer const & r);
     itkBSplineInterpolateImageFunctionIUS2DUS_Pointer & operator=(itkBSplineInterpolateImageFunctionIUS2DUS * r);
     itkBSplineInterpolateImageFunctionIUS2DUS * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineInterpolateImageFunctionIUS3DUS : public itkInterpolateImageFunctionIUS3D {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineInterpolateImageFunctionIUS3DUS_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual double Evaluate(itkPointD3 const & point) const;
     virtual double Evaluate(itkPointD3 const & point, unsigned int threadID) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD3 const & index) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD3 const & index, unsigned int threadID) const;
     itkCovariantVectorD3 EvaluateDerivative(itkPointD3 const & point) const;
     itkCovariantVectorD3 EvaluateDerivative(itkPointD3 const & point, unsigned int threadID) const;
     itkCovariantVectorD3 EvaluateDerivativeAtContinuousIndex(itkContinuousIndexD3 const & x) const;
     itkCovariantVectorD3 EvaluateDerivativeAtContinuousIndex(itkContinuousIndexD3 const & x, unsigned int threadID) const;
     void EvaluateValueAndDerivative(itkPointD3 const & point, double & value, itkCovariantVectorD3 & deriv) const;
     void EvaluateValueAndDerivative(itkPointD3 const & point, double & value, itkCovariantVectorD3 & deriv, unsigned int threadID) const;
     void EvaluateValueAndDerivativeAtContinuousIndex(itkContinuousIndexD3 const & x, double & value, itkCovariantVectorD3 & deriv) const;
     void EvaluateValueAndDerivativeAtContinuousIndex(itkContinuousIndexD3 const & x, double & value, itkCovariantVectorD3 & deriv, unsigned int threadID) const;
     void SetSplineOrder(unsigned int SplineOrder);
     virtual int GetSplineOrder() const;
     void SetNumberOfThreads(unsigned int numThreads);
     virtual int GetNumberOfThreads() const;
     virtual void SetInputImage(itkImageUS3 const * inputData);
     virtual void SetUseImageDirection(bool const _arg);
     virtual bool GetUseImageDirection() const;
     virtual void UseImageDirectionOn();
     virtual void UseImageDirectionOff();
   private:
     itkBSplineInterpolateImageFunctionIUS3DUS(itkBSplineInterpolateImageFunctionIUS3DUS const & arg0);
     void operator=(itkBSplineInterpolateImageFunctionIUS3DUS const & arg0);
     void SetInterpolationWeights(itkContinuousIndexD3 const & x, vnl_matrixSL const & EvaluateIndex, vnl_matrixD & weights, unsigned int splineOrder) const;
     void SetDerivativeWeights(itkContinuousIndexD3 const & x, vnl_matrixSL const & EvaluateIndex, vnl_matrixD & weights, unsigned int splineOrder) const;
     void GeneratePointsToIndex();
     void DetermineRegionOfSupport(vnl_matrixSL & evaluateIndex, itkContinuousIndexD3 const & x, unsigned int splineOrder) const;
     void ApplyMirrorBoundaryConditions(vnl_matrixSL & evaluateIndex, unsigned int splineOrder) const;
   protected:
     virtual double EvaluateAtContinuousIndexInternal(itkContinuousIndexD3 const & index, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights) const;
     virtual void EvaluateValueAndDerivativeAtContinuousIndexInternal(itkContinuousIndexD3 const & x, double & value, itkCovariantVectorD3 & derivativeValue, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights, vnl_matrixD & weightsDerivative) const;
     virtual itkCovariantVectorD3 EvaluateDerivativeAtContinuousIndexInternal(itkContinuousIndexD3 const & x, vnl_matrixSL & evaluateIndex, vnl_matrixD & weights, vnl_matrixD & weightsDerivative) const;
     itkBSplineInterpolateImageFunctionIUS3DUS();
     ~itkBSplineInterpolateImageFunctionIUS3DUS();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineInterpolateImageFunctionIUS3DUS_Pointer {
   public:
     itkBSplineInterpolateImageFunctionIUS3DUS_Pointer();
     itkBSplineInterpolateImageFunctionIUS3DUS_Pointer(itkBSplineInterpolateImageFunctionIUS3DUS_Pointer const & p);
     itkBSplineInterpolateImageFunctionIUS3DUS_Pointer(itkBSplineInterpolateImageFunctionIUS3DUS * p);
     ~itkBSplineInterpolateImageFunctionIUS3DUS_Pointer();
     itkBSplineInterpolateImageFunctionIUS3DUS * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineInterpolateImageFunctionIUS3DUS * GetPointer() const;
     bool operator<(itkBSplineInterpolateImageFunctionIUS3DUS_Pointer const & r) const;
     bool operator>(itkBSplineInterpolateImageFunctionIUS3DUS_Pointer const & r) const;
     bool operator<=(itkBSplineInterpolateImageFunctionIUS3DUS_Pointer const & r) const;
     bool operator>=(itkBSplineInterpolateImageFunctionIUS3DUS_Pointer const & r) const;
     itkBSplineInterpolateImageFunctionIUS3DUS_Pointer & operator=(itkBSplineInterpolateImageFunctionIUS3DUS_Pointer const & r);
     itkBSplineInterpolateImageFunctionIUS3DUS_Pointer & operator=(itkBSplineInterpolateImageFunctionIUS3DUS * r);
     itkBSplineInterpolateImageFunctionIUS3DUS * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


