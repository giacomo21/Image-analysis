// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkQuaternionRigidTransformChicken
#endif
#ifdef SWIGCSHARP
%module itkQuaternionRigidTransformCsharp
#endif
#ifdef SWIGGUILE
%module itkQuaternionRigidTransformGuile
#endif
#ifdef SWIGJAVA
%module itkQuaternionRigidTransformJava
#endif
#ifdef SWIGLUA
%module itkQuaternionRigidTransformLua
#endif
#ifdef SWIGMODULA3
%module itkQuaternionRigidTransformModula3
#endif
#ifdef SWIGMZSCHEME
%module itkQuaternionRigidTransformMzscheme
#endif
#ifdef SWIGOCAML
%module itkQuaternionRigidTransformOcaml
#endif
#ifdef SWIGPERL
%module itkQuaternionRigidTransformPerl
#endif
#ifdef SWIGPERL5
%module itkQuaternionRigidTransformPerl5
#endif
#ifdef SWIGPHP
%module itkQuaternionRigidTransformPhp
#endif
#ifdef SWIGPHP4
%module itkQuaternionRigidTransformPhp4
#endif
#ifdef SWIGPHP5
%module itkQuaternionRigidTransformPhp5
#endif
#ifdef SWIGPIKE
%module itkQuaternionRigidTransformPike
#endif
#ifdef SWIGPYTHON
%module itkQuaternionRigidTransformPython
#endif
#ifdef SWIGR
%module itkQuaternionRigidTransformR
#endif
#ifdef SWIGRUBY
%module itkQuaternionRigidTransformRuby
#endif
#ifdef SWIGSEXP
%module itkQuaternionRigidTransformSexp
#endif
#ifdef SWIGTCL
%module itkQuaternionRigidTransformTcl
#endif
#ifdef SWIGXML
%module itkQuaternionRigidTransformXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
%}


%{
%}




%import wrap_itkPoint.i
%import wrap_ITKRigidTransforms.i
%import wrap_itkArray2D.i
%import wrap_itkVector.i
%import wrap_itkArray.i
%import wrap_itkMatrix.i
%import wrap_ITKCommonBase.i


%include itk.i
%include wrap_itkQuaternionRigidTransform_ext.i


 class itkQuaternionRigidTransformD : public itkRigid3DTransformD {
   public:
     enum  {  InputSpaceDimension = 3 };
     enum  {  OutputSpaceDimension = 3 };
     enum  {  SpaceDimension = 3 };
     enum  {  ParametersDimension = 7 };
     static itkQuaternionRigidTransformD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetRotation(vnl_quaternion< double > const & rotation);
     vnl_quaternion< double > const & GetRotation() const;
     virtual void SetIdentity();
     virtual void SetParameters(itkArrayD const & parameters);
     virtual itkArrayD const & GetParameters() const;
     virtual itkArray2DD const & GetJacobian(itkPointD3 const & point) const;
   private:
     itkQuaternionRigidTransformD(itkQuaternionRigidTransformD const & arg0);
     void operator=(itkQuaternionRigidTransformD const & arg0);
   protected:
     itkQuaternionRigidTransformD(itkMatrixD33 const & matrix, itkVectorD3 const & offset);
     itkQuaternionRigidTransformD(unsigned int outputDims, unsigned int paramDims);
     itkQuaternionRigidTransformD();
     ~itkQuaternionRigidTransformD();
     virtual void ComputeMatrix();
     virtual void ComputeMatrixParameters();
     void SetVarRotation(vnl_quaternion< double > const & rotation);
     itkMatrixD33 const & GetInverseMatrix() const;
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkQuaternionRigidTransformD_Pointer {
   public:
     itkQuaternionRigidTransformD_Pointer();
     itkQuaternionRigidTransformD_Pointer(itkQuaternionRigidTransformD_Pointer const & p);
     itkQuaternionRigidTransformD_Pointer(itkQuaternionRigidTransformD * p);
     ~itkQuaternionRigidTransformD_Pointer();
     itkQuaternionRigidTransformD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkQuaternionRigidTransformD * GetPointer() const;
     bool operator<(itkQuaternionRigidTransformD_Pointer const & r) const;
     bool operator>(itkQuaternionRigidTransformD_Pointer const & r) const;
     bool operator<=(itkQuaternionRigidTransformD_Pointer const & r) const;
     bool operator>=(itkQuaternionRigidTransformD_Pointer const & r) const;
     itkQuaternionRigidTransformD_Pointer & operator=(itkQuaternionRigidTransformD_Pointer const & r);
     itkQuaternionRigidTransformD_Pointer & operator=(itkQuaternionRigidTransformD * r);
     itkQuaternionRigidTransformD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


