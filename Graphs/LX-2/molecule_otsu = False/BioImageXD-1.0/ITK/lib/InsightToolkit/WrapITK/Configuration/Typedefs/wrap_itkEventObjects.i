// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkEventObjectsChicken
#endif
#ifdef SWIGCSHARP
%module itkEventObjectsCsharp
#endif
#ifdef SWIGGUILE
%module itkEventObjectsGuile
#endif
#ifdef SWIGJAVA
%module itkEventObjectsJava
#endif
#ifdef SWIGLUA
%module itkEventObjectsLua
#endif
#ifdef SWIGMODULA3
%module itkEventObjectsModula3
#endif
#ifdef SWIGMZSCHEME
%module itkEventObjectsMzscheme
#endif
#ifdef SWIGOCAML
%module itkEventObjectsOcaml
#endif
#ifdef SWIGPERL
%module itkEventObjectsPerl
#endif
#ifdef SWIGPERL5
%module itkEventObjectsPerl5
#endif
#ifdef SWIGPHP
%module itkEventObjectsPhp
#endif
#ifdef SWIGPHP4
%module itkEventObjectsPhp4
#endif
#ifdef SWIGPHP5
%module itkEventObjectsPhp5
#endif
#ifdef SWIGPIKE
%module itkEventObjectsPike
#endif
#ifdef SWIGPYTHON
%module itkEventObjectsPython
#endif
#ifdef SWIGR
%module itkEventObjectsR
#endif
#ifdef SWIGRUBY
%module itkEventObjectsRuby
#endif
#ifdef SWIGSEXP
%module itkEventObjectsSexp
#endif
#ifdef SWIGTCL
%module itkEventObjectsTcl
#endif
#ifdef SWIGXML
%module itkEventObjectsXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i


%include itk.i
%include wrap_itkEventObjects_ext.i


 class itkEventObject {
   public:
     itkEventObject();
     itkEventObject(itkEventObject const & arg0);
     ~itkEventObject();
     virtual itkEventObject * MakeObject() const = 0;
     virtual void Print(std::ostream & os) const;
     virtual char const * GetEventName() const = 0;
     virtual bool CheckEvent(itkEventObject const * arg0) const = 0;
   private:
     void operator=(itkEventObject const & arg0);
   protected:
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     virtual void PrintHeader(std::ostream & os, itkIndent indent) const;
     virtual void PrintTrailer(std::ostream & os, itkIndent indent) const;
 };


 class itkNoEvent : public itkEventObject {
   public:
     itkNoEvent();
     ~itkNoEvent();
     virtual char const * GetEventName() const;
     virtual bool CheckEvent(itkEventObject const * e) const;
     virtual itkEventObject * MakeObject() const;
     itkNoEvent(itkNoEvent const & s);
   private:
     void operator=(itkNoEvent const & arg0);
   protected:
 };


 class itkAnyEvent : public itkEventObject {
   public:
     itkAnyEvent();
     ~itkAnyEvent();
     virtual char const * GetEventName() const;
     virtual bool CheckEvent(itkEventObject const * e) const;
     virtual itkEventObject * MakeObject() const;
     itkAnyEvent(itkAnyEvent const & s);
   private:
     void operator=(itkAnyEvent const & arg0);
   protected:
 };


 class itkDeleteEvent : public itkAnyEvent {
   public:
     itkDeleteEvent();
     ~itkDeleteEvent();
     virtual char const * GetEventName() const;
     virtual bool CheckEvent(itkEventObject const * e) const;
     virtual itkEventObject * MakeObject() const;
     itkDeleteEvent(itkDeleteEvent const & s);
   private:
     void operator=(itkDeleteEvent const & arg0);
   protected:
 };


 class itkEndEvent : public itkAnyEvent {
   public:
     itkEndEvent();
     ~itkEndEvent();
     virtual char const * GetEventName() const;
     virtual bool CheckEvent(itkEventObject const * e) const;
     virtual itkEventObject * MakeObject() const;
     itkEndEvent(itkEndEvent const & s);
   private:
     void operator=(itkEndEvent const & arg0);
   protected:
 };


 class itkExitEvent : public itkAnyEvent {
   public:
     itkExitEvent();
     ~itkExitEvent();
     virtual char const * GetEventName() const;
     virtual bool CheckEvent(itkEventObject const * e) const;
     virtual itkEventObject * MakeObject() const;
     itkExitEvent(itkExitEvent const & s);
   private:
     void operator=(itkExitEvent const & arg0);
   protected:
 };


 class itkIterationEvent : public itkAnyEvent {
   public:
     itkIterationEvent();
     ~itkIterationEvent();
     virtual char const * GetEventName() const;
     virtual bool CheckEvent(itkEventObject const * e) const;
     virtual itkEventObject * MakeObject() const;
     itkIterationEvent(itkIterationEvent const & s);
   private:
     void operator=(itkIterationEvent const & arg0);
   protected:
 };


 class itkModifiedEvent : public itkAnyEvent {
   public:
     itkModifiedEvent();
     ~itkModifiedEvent();
     virtual char const * GetEventName() const;
     virtual bool CheckEvent(itkEventObject const * e) const;
     virtual itkEventObject * MakeObject() const;
     itkModifiedEvent(itkModifiedEvent const & s);
   private:
     void operator=(itkModifiedEvent const & arg0);
   protected:
 };


 class itkPickEvent : public itkAnyEvent {
   public:
     itkPickEvent();
     ~itkPickEvent();
     virtual char const * GetEventName() const;
     virtual bool CheckEvent(itkEventObject const * e) const;
     virtual itkEventObject * MakeObject() const;
     itkPickEvent(itkPickEvent const & s);
   private:
     void operator=(itkPickEvent const & arg0);
   protected:
 };


 class itkProgressEvent : public itkAnyEvent {
   public:
     itkProgressEvent();
     ~itkProgressEvent();
     virtual char const * GetEventName() const;
     virtual bool CheckEvent(itkEventObject const * e) const;
     virtual itkEventObject * MakeObject() const;
     itkProgressEvent(itkProgressEvent const & s);
   private:
     void operator=(itkProgressEvent const & arg0);
   protected:
 };


 class itkStartEvent : public itkAnyEvent {
   public:
     itkStartEvent();
     ~itkStartEvent();
     virtual char const * GetEventName() const;
     virtual bool CheckEvent(itkEventObject const * e) const;
     virtual itkEventObject * MakeObject() const;
     itkStartEvent(itkStartEvent const & s);
   private:
     void operator=(itkStartEvent const & arg0);
   protected:
 };


 class itkStartPickEvent : public itkPickEvent {
   public:
     itkStartPickEvent();
     ~itkStartPickEvent();
     virtual char const * GetEventName() const;
     virtual bool CheckEvent(itkEventObject const * e) const;
     virtual itkEventObject * MakeObject() const;
     itkStartPickEvent(itkStartPickEvent const & s);
   private:
     void operator=(itkStartPickEvent const & arg0);
   protected:
 };


 class itkUserEvent : public itkAnyEvent {
   public:
     itkUserEvent();
     ~itkUserEvent();
     virtual char const * GetEventName() const;
     virtual bool CheckEvent(itkEventObject const * e) const;
     virtual itkEventObject * MakeObject() const;
     itkUserEvent(itkUserEvent const & s);
   private:
     void operator=(itkUserEvent const & arg0);
   protected:
 };


 class itkAbortCheckEvent : public itkPickEvent {
   public:
     itkAbortCheckEvent();
     ~itkAbortCheckEvent();
     virtual char const * GetEventName() const;
     virtual bool CheckEvent(itkEventObject const * e) const;
     virtual itkEventObject * MakeObject() const;
     itkAbortCheckEvent(itkAbortCheckEvent const & s);
   private:
     void operator=(itkAbortCheckEvent const & arg0);
   protected:
 };


 class itkEndPickEvent : public itkPickEvent {
   public:
     itkEndPickEvent();
     ~itkEndPickEvent();
     virtual char const * GetEventName() const;
     virtual bool CheckEvent(itkEventObject const * e) const;
     virtual itkEventObject * MakeObject() const;
     itkEndPickEvent(itkEndPickEvent const & s);
   private:
     void operator=(itkEndPickEvent const & arg0);
   protected:
 };


