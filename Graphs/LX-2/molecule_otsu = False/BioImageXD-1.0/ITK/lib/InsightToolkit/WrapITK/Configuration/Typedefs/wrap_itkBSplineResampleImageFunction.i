// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkBSplineResampleImageFunctionChicken
#endif
#ifdef SWIGCSHARP
%module itkBSplineResampleImageFunctionCsharp
#endif
#ifdef SWIGGUILE
%module itkBSplineResampleImageFunctionGuile
#endif
#ifdef SWIGJAVA
%module itkBSplineResampleImageFunctionJava
#endif
#ifdef SWIGLUA
%module itkBSplineResampleImageFunctionLua
#endif
#ifdef SWIGMODULA3
%module itkBSplineResampleImageFunctionModula3
#endif
#ifdef SWIGMZSCHEME
%module itkBSplineResampleImageFunctionMzscheme
#endif
#ifdef SWIGOCAML
%module itkBSplineResampleImageFunctionOcaml
#endif
#ifdef SWIGPERL
%module itkBSplineResampleImageFunctionPerl
#endif
#ifdef SWIGPERL5
%module itkBSplineResampleImageFunctionPerl5
#endif
#ifdef SWIGPHP
%module itkBSplineResampleImageFunctionPhp
#endif
#ifdef SWIGPHP4
%module itkBSplineResampleImageFunctionPhp4
#endif
#ifdef SWIGPHP5
%module itkBSplineResampleImageFunctionPhp5
#endif
#ifdef SWIGPIKE
%module itkBSplineResampleImageFunctionPike
#endif
#ifdef SWIGPYTHON
%module itkBSplineResampleImageFunctionPython
#endif
#ifdef SWIGR
%module itkBSplineResampleImageFunctionR
#endif
#ifdef SWIGRUBY
%module itkBSplineResampleImageFunctionRuby
#endif
#ifdef SWIGSEXP
%module itkBSplineResampleImageFunctionSexp
#endif
#ifdef SWIGTCL
%module itkBSplineResampleImageFunctionTcl
#endif
#ifdef SWIGXML
%module itkBSplineResampleImageFunctionXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Interpolators.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkImage.i
%import wrap_itkBSplineInterpolateImageFunction.i


%include itk.i
%include wrap_itkBSplineResampleImageFunction_ext.i


 class itkBSplineResampleImageFunctionID2D : public itkBSplineInterpolateImageFunctionID2DD {
   public:
     virtual char const * GetNameOfClass() const;
     static itkBSplineResampleImageFunctionID2D_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void SetInputImage(itkImageD2 const * inputData);
   private:
     itkBSplineResampleImageFunctionID2D(itkBSplineResampleImageFunctionID2D const & arg0);
   protected:
     itkBSplineResampleImageFunctionID2D();
     ~itkBSplineResampleImageFunctionID2D();
 };


 class itkBSplineResampleImageFunctionID2D_Pointer {
   public:
     itkBSplineResampleImageFunctionID2D_Pointer();
     itkBSplineResampleImageFunctionID2D_Pointer(itkBSplineResampleImageFunctionID2D_Pointer const & p);
     itkBSplineResampleImageFunctionID2D_Pointer(itkBSplineResampleImageFunctionID2D * p);
     ~itkBSplineResampleImageFunctionID2D_Pointer();
     itkBSplineResampleImageFunctionID2D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineResampleImageFunctionID2D * GetPointer() const;
     bool operator<(itkBSplineResampleImageFunctionID2D_Pointer const & r) const;
     bool operator>(itkBSplineResampleImageFunctionID2D_Pointer const & r) const;
     bool operator<=(itkBSplineResampleImageFunctionID2D_Pointer const & r) const;
     bool operator>=(itkBSplineResampleImageFunctionID2D_Pointer const & r) const;
     itkBSplineResampleImageFunctionID2D_Pointer & operator=(itkBSplineResampleImageFunctionID2D_Pointer const & r);
     itkBSplineResampleImageFunctionID2D_Pointer & operator=(itkBSplineResampleImageFunctionID2D * r);
     itkBSplineResampleImageFunctionID2D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineResampleImageFunctionID3D : public itkBSplineInterpolateImageFunctionID3DD {
   public:
     virtual char const * GetNameOfClass() const;
     static itkBSplineResampleImageFunctionID3D_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void SetInputImage(itkImageD3 const * inputData);
   private:
     itkBSplineResampleImageFunctionID3D(itkBSplineResampleImageFunctionID3D const & arg0);
   protected:
     itkBSplineResampleImageFunctionID3D();
     ~itkBSplineResampleImageFunctionID3D();
 };


 class itkBSplineResampleImageFunctionID3D_Pointer {
   public:
     itkBSplineResampleImageFunctionID3D_Pointer();
     itkBSplineResampleImageFunctionID3D_Pointer(itkBSplineResampleImageFunctionID3D_Pointer const & p);
     itkBSplineResampleImageFunctionID3D_Pointer(itkBSplineResampleImageFunctionID3D * p);
     ~itkBSplineResampleImageFunctionID3D_Pointer();
     itkBSplineResampleImageFunctionID3D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineResampleImageFunctionID3D * GetPointer() const;
     bool operator<(itkBSplineResampleImageFunctionID3D_Pointer const & r) const;
     bool operator>(itkBSplineResampleImageFunctionID3D_Pointer const & r) const;
     bool operator<=(itkBSplineResampleImageFunctionID3D_Pointer const & r) const;
     bool operator>=(itkBSplineResampleImageFunctionID3D_Pointer const & r) const;
     itkBSplineResampleImageFunctionID3D_Pointer & operator=(itkBSplineResampleImageFunctionID3D_Pointer const & r);
     itkBSplineResampleImageFunctionID3D_Pointer & operator=(itkBSplineResampleImageFunctionID3D * r);
     itkBSplineResampleImageFunctionID3D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineResampleImageFunctionIF2D : public itkBSplineInterpolateImageFunctionIF2DF {
   public:
     virtual char const * GetNameOfClass() const;
     static itkBSplineResampleImageFunctionIF2D_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void SetInputImage(itkImageF2 const * inputData);
   private:
     itkBSplineResampleImageFunctionIF2D(itkBSplineResampleImageFunctionIF2D const & arg0);
   protected:
     itkBSplineResampleImageFunctionIF2D();
     ~itkBSplineResampleImageFunctionIF2D();
 };


 class itkBSplineResampleImageFunctionIF2D_Pointer {
   public:
     itkBSplineResampleImageFunctionIF2D_Pointer();
     itkBSplineResampleImageFunctionIF2D_Pointer(itkBSplineResampleImageFunctionIF2D_Pointer const & p);
     itkBSplineResampleImageFunctionIF2D_Pointer(itkBSplineResampleImageFunctionIF2D * p);
     ~itkBSplineResampleImageFunctionIF2D_Pointer();
     itkBSplineResampleImageFunctionIF2D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineResampleImageFunctionIF2D * GetPointer() const;
     bool operator<(itkBSplineResampleImageFunctionIF2D_Pointer const & r) const;
     bool operator>(itkBSplineResampleImageFunctionIF2D_Pointer const & r) const;
     bool operator<=(itkBSplineResampleImageFunctionIF2D_Pointer const & r) const;
     bool operator>=(itkBSplineResampleImageFunctionIF2D_Pointer const & r) const;
     itkBSplineResampleImageFunctionIF2D_Pointer & operator=(itkBSplineResampleImageFunctionIF2D_Pointer const & r);
     itkBSplineResampleImageFunctionIF2D_Pointer & operator=(itkBSplineResampleImageFunctionIF2D * r);
     itkBSplineResampleImageFunctionIF2D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineResampleImageFunctionIF3D : public itkBSplineInterpolateImageFunctionIF3DF {
   public:
     virtual char const * GetNameOfClass() const;
     static itkBSplineResampleImageFunctionIF3D_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void SetInputImage(itkImageF3 const * inputData);
   private:
     itkBSplineResampleImageFunctionIF3D(itkBSplineResampleImageFunctionIF3D const & arg0);
   protected:
     itkBSplineResampleImageFunctionIF3D();
     ~itkBSplineResampleImageFunctionIF3D();
 };


 class itkBSplineResampleImageFunctionIF3D_Pointer {
   public:
     itkBSplineResampleImageFunctionIF3D_Pointer();
     itkBSplineResampleImageFunctionIF3D_Pointer(itkBSplineResampleImageFunctionIF3D_Pointer const & p);
     itkBSplineResampleImageFunctionIF3D_Pointer(itkBSplineResampleImageFunctionIF3D * p);
     ~itkBSplineResampleImageFunctionIF3D_Pointer();
     itkBSplineResampleImageFunctionIF3D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineResampleImageFunctionIF3D * GetPointer() const;
     bool operator<(itkBSplineResampleImageFunctionIF3D_Pointer const & r) const;
     bool operator>(itkBSplineResampleImageFunctionIF3D_Pointer const & r) const;
     bool operator<=(itkBSplineResampleImageFunctionIF3D_Pointer const & r) const;
     bool operator>=(itkBSplineResampleImageFunctionIF3D_Pointer const & r) const;
     itkBSplineResampleImageFunctionIF3D_Pointer & operator=(itkBSplineResampleImageFunctionIF3D_Pointer const & r);
     itkBSplineResampleImageFunctionIF3D_Pointer & operator=(itkBSplineResampleImageFunctionIF3D * r);
     itkBSplineResampleImageFunctionIF3D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineResampleImageFunctionIUC2D : public itkBSplineInterpolateImageFunctionIUC2DUC {
   public:
     virtual char const * GetNameOfClass() const;
     static itkBSplineResampleImageFunctionIUC2D_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void SetInputImage(itkImageUC2 const * inputData);
   private:
     itkBSplineResampleImageFunctionIUC2D(itkBSplineResampleImageFunctionIUC2D const & arg0);
   protected:
     itkBSplineResampleImageFunctionIUC2D();
     ~itkBSplineResampleImageFunctionIUC2D();
 };


 class itkBSplineResampleImageFunctionIUC2D_Pointer {
   public:
     itkBSplineResampleImageFunctionIUC2D_Pointer();
     itkBSplineResampleImageFunctionIUC2D_Pointer(itkBSplineResampleImageFunctionIUC2D_Pointer const & p);
     itkBSplineResampleImageFunctionIUC2D_Pointer(itkBSplineResampleImageFunctionIUC2D * p);
     ~itkBSplineResampleImageFunctionIUC2D_Pointer();
     itkBSplineResampleImageFunctionIUC2D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineResampleImageFunctionIUC2D * GetPointer() const;
     bool operator<(itkBSplineResampleImageFunctionIUC2D_Pointer const & r) const;
     bool operator>(itkBSplineResampleImageFunctionIUC2D_Pointer const & r) const;
     bool operator<=(itkBSplineResampleImageFunctionIUC2D_Pointer const & r) const;
     bool operator>=(itkBSplineResampleImageFunctionIUC2D_Pointer const & r) const;
     itkBSplineResampleImageFunctionIUC2D_Pointer & operator=(itkBSplineResampleImageFunctionIUC2D_Pointer const & r);
     itkBSplineResampleImageFunctionIUC2D_Pointer & operator=(itkBSplineResampleImageFunctionIUC2D * r);
     itkBSplineResampleImageFunctionIUC2D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineResampleImageFunctionIUC3D : public itkBSplineInterpolateImageFunctionIUC3DUC {
   public:
     virtual char const * GetNameOfClass() const;
     static itkBSplineResampleImageFunctionIUC3D_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void SetInputImage(itkImageUC3 const * inputData);
   private:
     itkBSplineResampleImageFunctionIUC3D(itkBSplineResampleImageFunctionIUC3D const & arg0);
   protected:
     itkBSplineResampleImageFunctionIUC3D();
     ~itkBSplineResampleImageFunctionIUC3D();
 };


 class itkBSplineResampleImageFunctionIUC3D_Pointer {
   public:
     itkBSplineResampleImageFunctionIUC3D_Pointer();
     itkBSplineResampleImageFunctionIUC3D_Pointer(itkBSplineResampleImageFunctionIUC3D_Pointer const & p);
     itkBSplineResampleImageFunctionIUC3D_Pointer(itkBSplineResampleImageFunctionIUC3D * p);
     ~itkBSplineResampleImageFunctionIUC3D_Pointer();
     itkBSplineResampleImageFunctionIUC3D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineResampleImageFunctionIUC3D * GetPointer() const;
     bool operator<(itkBSplineResampleImageFunctionIUC3D_Pointer const & r) const;
     bool operator>(itkBSplineResampleImageFunctionIUC3D_Pointer const & r) const;
     bool operator<=(itkBSplineResampleImageFunctionIUC3D_Pointer const & r) const;
     bool operator>=(itkBSplineResampleImageFunctionIUC3D_Pointer const & r) const;
     itkBSplineResampleImageFunctionIUC3D_Pointer & operator=(itkBSplineResampleImageFunctionIUC3D_Pointer const & r);
     itkBSplineResampleImageFunctionIUC3D_Pointer & operator=(itkBSplineResampleImageFunctionIUC3D * r);
     itkBSplineResampleImageFunctionIUC3D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineResampleImageFunctionIUL2D : public itkBSplineInterpolateImageFunctionIUL2DUL {
   public:
     virtual char const * GetNameOfClass() const;
     static itkBSplineResampleImageFunctionIUL2D_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void SetInputImage(itkImageUL2 const * inputData);
   private:
     itkBSplineResampleImageFunctionIUL2D(itkBSplineResampleImageFunctionIUL2D const & arg0);
   protected:
     itkBSplineResampleImageFunctionIUL2D();
     ~itkBSplineResampleImageFunctionIUL2D();
 };


 class itkBSplineResampleImageFunctionIUL2D_Pointer {
   public:
     itkBSplineResampleImageFunctionIUL2D_Pointer();
     itkBSplineResampleImageFunctionIUL2D_Pointer(itkBSplineResampleImageFunctionIUL2D_Pointer const & p);
     itkBSplineResampleImageFunctionIUL2D_Pointer(itkBSplineResampleImageFunctionIUL2D * p);
     ~itkBSplineResampleImageFunctionIUL2D_Pointer();
     itkBSplineResampleImageFunctionIUL2D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineResampleImageFunctionIUL2D * GetPointer() const;
     bool operator<(itkBSplineResampleImageFunctionIUL2D_Pointer const & r) const;
     bool operator>(itkBSplineResampleImageFunctionIUL2D_Pointer const & r) const;
     bool operator<=(itkBSplineResampleImageFunctionIUL2D_Pointer const & r) const;
     bool operator>=(itkBSplineResampleImageFunctionIUL2D_Pointer const & r) const;
     itkBSplineResampleImageFunctionIUL2D_Pointer & operator=(itkBSplineResampleImageFunctionIUL2D_Pointer const & r);
     itkBSplineResampleImageFunctionIUL2D_Pointer & operator=(itkBSplineResampleImageFunctionIUL2D * r);
     itkBSplineResampleImageFunctionIUL2D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineResampleImageFunctionIUL3D : public itkBSplineInterpolateImageFunctionIUL3DUL {
   public:
     virtual char const * GetNameOfClass() const;
     static itkBSplineResampleImageFunctionIUL3D_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void SetInputImage(itkImageUL3 const * inputData);
   private:
     itkBSplineResampleImageFunctionIUL3D(itkBSplineResampleImageFunctionIUL3D const & arg0);
   protected:
     itkBSplineResampleImageFunctionIUL3D();
     ~itkBSplineResampleImageFunctionIUL3D();
 };


 class itkBSplineResampleImageFunctionIUL3D_Pointer {
   public:
     itkBSplineResampleImageFunctionIUL3D_Pointer();
     itkBSplineResampleImageFunctionIUL3D_Pointer(itkBSplineResampleImageFunctionIUL3D_Pointer const & p);
     itkBSplineResampleImageFunctionIUL3D_Pointer(itkBSplineResampleImageFunctionIUL3D * p);
     ~itkBSplineResampleImageFunctionIUL3D_Pointer();
     itkBSplineResampleImageFunctionIUL3D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineResampleImageFunctionIUL3D * GetPointer() const;
     bool operator<(itkBSplineResampleImageFunctionIUL3D_Pointer const & r) const;
     bool operator>(itkBSplineResampleImageFunctionIUL3D_Pointer const & r) const;
     bool operator<=(itkBSplineResampleImageFunctionIUL3D_Pointer const & r) const;
     bool operator>=(itkBSplineResampleImageFunctionIUL3D_Pointer const & r) const;
     itkBSplineResampleImageFunctionIUL3D_Pointer & operator=(itkBSplineResampleImageFunctionIUL3D_Pointer const & r);
     itkBSplineResampleImageFunctionIUL3D_Pointer & operator=(itkBSplineResampleImageFunctionIUL3D * r);
     itkBSplineResampleImageFunctionIUL3D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineResampleImageFunctionIUS2D : public itkBSplineInterpolateImageFunctionIUS2DUS {
   public:
     virtual char const * GetNameOfClass() const;
     static itkBSplineResampleImageFunctionIUS2D_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void SetInputImage(itkImageUS2 const * inputData);
   private:
     itkBSplineResampleImageFunctionIUS2D(itkBSplineResampleImageFunctionIUS2D const & arg0);
   protected:
     itkBSplineResampleImageFunctionIUS2D();
     ~itkBSplineResampleImageFunctionIUS2D();
 };


 class itkBSplineResampleImageFunctionIUS2D_Pointer {
   public:
     itkBSplineResampleImageFunctionIUS2D_Pointer();
     itkBSplineResampleImageFunctionIUS2D_Pointer(itkBSplineResampleImageFunctionIUS2D_Pointer const & p);
     itkBSplineResampleImageFunctionIUS2D_Pointer(itkBSplineResampleImageFunctionIUS2D * p);
     ~itkBSplineResampleImageFunctionIUS2D_Pointer();
     itkBSplineResampleImageFunctionIUS2D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineResampleImageFunctionIUS2D * GetPointer() const;
     bool operator<(itkBSplineResampleImageFunctionIUS2D_Pointer const & r) const;
     bool operator>(itkBSplineResampleImageFunctionIUS2D_Pointer const & r) const;
     bool operator<=(itkBSplineResampleImageFunctionIUS2D_Pointer const & r) const;
     bool operator>=(itkBSplineResampleImageFunctionIUS2D_Pointer const & r) const;
     itkBSplineResampleImageFunctionIUS2D_Pointer & operator=(itkBSplineResampleImageFunctionIUS2D_Pointer const & r);
     itkBSplineResampleImageFunctionIUS2D_Pointer & operator=(itkBSplineResampleImageFunctionIUS2D * r);
     itkBSplineResampleImageFunctionIUS2D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineResampleImageFunctionIUS3D : public itkBSplineInterpolateImageFunctionIUS3DUS {
   public:
     virtual char const * GetNameOfClass() const;
     static itkBSplineResampleImageFunctionIUS3D_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void SetInputImage(itkImageUS3 const * inputData);
   private:
     itkBSplineResampleImageFunctionIUS3D(itkBSplineResampleImageFunctionIUS3D const & arg0);
   protected:
     itkBSplineResampleImageFunctionIUS3D();
     ~itkBSplineResampleImageFunctionIUS3D();
 };


 class itkBSplineResampleImageFunctionIUS3D_Pointer {
   public:
     itkBSplineResampleImageFunctionIUS3D_Pointer();
     itkBSplineResampleImageFunctionIUS3D_Pointer(itkBSplineResampleImageFunctionIUS3D_Pointer const & p);
     itkBSplineResampleImageFunctionIUS3D_Pointer(itkBSplineResampleImageFunctionIUS3D * p);
     ~itkBSplineResampleImageFunctionIUS3D_Pointer();
     itkBSplineResampleImageFunctionIUS3D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineResampleImageFunctionIUS3D * GetPointer() const;
     bool operator<(itkBSplineResampleImageFunctionIUS3D_Pointer const & r) const;
     bool operator>(itkBSplineResampleImageFunctionIUS3D_Pointer const & r) const;
     bool operator<=(itkBSplineResampleImageFunctionIUS3D_Pointer const & r) const;
     bool operator>=(itkBSplineResampleImageFunctionIUS3D_Pointer const & r) const;
     itkBSplineResampleImageFunctionIUS3D_Pointer & operator=(itkBSplineResampleImageFunctionIUS3D_Pointer const & r);
     itkBSplineResampleImageFunctionIUS3D_Pointer & operator=(itkBSplineResampleImageFunctionIUS3D * r);
     itkBSplineResampleImageFunctionIUS3D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


