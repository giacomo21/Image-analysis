# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkMapContainerPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkMapContainerPython', [dirname(__file__)])
        except ImportError:
            import _itkMapContainerPython
            return _itkMapContainerPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkMapContainerPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkMapContainerPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkMapContainerPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import itkEventObjectsPython
import pyBasePython
import itkPointPython
import vnl_vectorPython
import vcl_complexPython
import vnl_matrixPython
import itkFixedArrayPython
import itkVectorPython
import vnl_vector_refPython
def itkMapContainerULSUL_New():
  return itkMapContainerULSUL.New()

def itkMapContainerULD_New():
  return itkMapContainerULD.New()

def itkMapContainerULPD3_New():
  return itkMapContainerULPD3.New()

def itkMapContainerULVD3_New():
  return itkMapContainerULVD3.New()

def itkMapContainerULPD2_New():
  return itkMapContainerULPD2.New()

def itkMapContainerULVD2_New():
  return itkMapContainerULVD2.New()

class mapULitkVectorD2(object):
    """Proxy of C++ std::map<(unsigned long,itkVectorD2,std::less<(unsigned long)>)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _itkMapContainerPython.mapULitkVectorD2_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _itkMapContainerPython.mapULitkVectorD2___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _itkMapContainerPython.mapULitkVectorD2___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _itkMapContainerPython.mapULitkVectorD2___len__(self)

    def __getitem__(self, *args):
        """__getitem__(self, key_type key) -> mapped_type"""
        return _itkMapContainerPython.mapULitkVectorD2___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(self, key_type key)"""
        return _itkMapContainerPython.mapULitkVectorD2___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(self, key_type key) -> bool"""
        return _itkMapContainerPython.mapULitkVectorD2_has_key(self, *args)

    def keys(self):
        """keys(self) -> PyObject"""
        return _itkMapContainerPython.mapULitkVectorD2_keys(self)

    def values(self):
        """values(self) -> PyObject"""
        return _itkMapContainerPython.mapULitkVectorD2_values(self)

    def items(self):
        """items(self) -> PyObject"""
        return _itkMapContainerPython.mapULitkVectorD2_items(self)

    def __contains__(self, *args):
        """__contains__(self, key_type key) -> bool"""
        return _itkMapContainerPython.mapULitkVectorD2___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(self) -> SwigPyIterator"""
        return _itkMapContainerPython.mapULitkVectorD2_key_iterator(self)

    def value_iterator(self):
        """value_iterator(self) -> SwigPyIterator"""
        return _itkMapContainerPython.mapULitkVectorD2_value_iterator(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args):
        """__setitem__(self, key_type key, mapped_type x)"""
        return _itkMapContainerPython.mapULitkVectorD2___setitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(unsigned long)> arg0) -> mapULitkVectorD2
        __init__(self) -> mapULitkVectorD2
        __init__(self, mapULitkVectorD2 arg0) -> mapULitkVectorD2
        """
        _itkMapContainerPython.mapULitkVectorD2_swiginit(self,_itkMapContainerPython.new_mapULitkVectorD2(*args))
    def empty(self):
        """empty(self) -> bool"""
        return _itkMapContainerPython.mapULitkVectorD2_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _itkMapContainerPython.mapULitkVectorD2_size(self)

    def clear(self):
        """clear(self)"""
        return _itkMapContainerPython.mapULitkVectorD2_clear(self)

    def swap(self, *args):
        """swap(self, mapULitkVectorD2 v)"""
        return _itkMapContainerPython.mapULitkVectorD2_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _itkMapContainerPython.mapULitkVectorD2_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _itkMapContainerPython.mapULitkVectorD2_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _itkMapContainerPython.mapULitkVectorD2_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _itkMapContainerPython.mapULitkVectorD2_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _itkMapContainerPython.mapULitkVectorD2_rend(self)

    def count(self, *args):
        """count(self, key_type x) -> size_type"""
        return _itkMapContainerPython.mapULitkVectorD2_count(self, *args)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator position)
        erase(self, iterator first, iterator last)
        """
        return _itkMapContainerPython.mapULitkVectorD2_erase(self, *args)

    def find(self, *args):
        """find(self, key_type x) -> iterator"""
        return _itkMapContainerPython.mapULitkVectorD2_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, key_type x) -> iterator"""
        return _itkMapContainerPython.mapULitkVectorD2_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, key_type x) -> iterator"""
        return _itkMapContainerPython.mapULitkVectorD2_upper_bound(self, *args)

    __swig_destroy__ = _itkMapContainerPython.delete_mapULitkVectorD2
mapULitkVectorD2.iterator = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2_iterator,None,mapULitkVectorD2)
mapULitkVectorD2.__nonzero__ = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2___nonzero__,None,mapULitkVectorD2)
mapULitkVectorD2.__bool__ = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2___bool__,None,mapULitkVectorD2)
mapULitkVectorD2.__len__ = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2___len__,None,mapULitkVectorD2)
mapULitkVectorD2.__getitem__ = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2___getitem__,None,mapULitkVectorD2)
mapULitkVectorD2.__delitem__ = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2___delitem__,None,mapULitkVectorD2)
mapULitkVectorD2.has_key = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2_has_key,None,mapULitkVectorD2)
mapULitkVectorD2.keys = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2_keys,None,mapULitkVectorD2)
mapULitkVectorD2.values = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2_values,None,mapULitkVectorD2)
mapULitkVectorD2.items = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2_items,None,mapULitkVectorD2)
mapULitkVectorD2.__contains__ = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2___contains__,None,mapULitkVectorD2)
mapULitkVectorD2.key_iterator = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2_key_iterator,None,mapULitkVectorD2)
mapULitkVectorD2.value_iterator = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2_value_iterator,None,mapULitkVectorD2)
mapULitkVectorD2.__setitem__ = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2___setitem__,None,mapULitkVectorD2)
mapULitkVectorD2.empty = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2_empty,None,mapULitkVectorD2)
mapULitkVectorD2.size = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2_size,None,mapULitkVectorD2)
mapULitkVectorD2.clear = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2_clear,None,mapULitkVectorD2)
mapULitkVectorD2.swap = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2_swap,None,mapULitkVectorD2)
mapULitkVectorD2.get_allocator = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2_get_allocator,None,mapULitkVectorD2)
mapULitkVectorD2.begin = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2_begin,None,mapULitkVectorD2)
mapULitkVectorD2.end = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2_end,None,mapULitkVectorD2)
mapULitkVectorD2.rbegin = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2_rbegin,None,mapULitkVectorD2)
mapULitkVectorD2.rend = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2_rend,None,mapULitkVectorD2)
mapULitkVectorD2.count = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2_count,None,mapULitkVectorD2)
mapULitkVectorD2.erase = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2_erase,None,mapULitkVectorD2)
mapULitkVectorD2.find = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2_find,None,mapULitkVectorD2)
mapULitkVectorD2.lower_bound = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2_lower_bound,None,mapULitkVectorD2)
mapULitkVectorD2.upper_bound = new_instancemethod(_itkMapContainerPython.mapULitkVectorD2_upper_bound,None,mapULitkVectorD2)
mapULitkVectorD2_swigregister = _itkMapContainerPython.mapULitkVectorD2_swigregister
mapULitkVectorD2_swigregister(mapULitkVectorD2)

class mapULitkPointD2(object):
    """Proxy of C++ std::map<(unsigned long,itkPointD2,std::less<(unsigned long)>)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _itkMapContainerPython.mapULitkPointD2_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _itkMapContainerPython.mapULitkPointD2___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _itkMapContainerPython.mapULitkPointD2___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _itkMapContainerPython.mapULitkPointD2___len__(self)

    def __getitem__(self, *args):
        """__getitem__(self, key_type key) -> mapped_type"""
        return _itkMapContainerPython.mapULitkPointD2___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(self, key_type key)"""
        return _itkMapContainerPython.mapULitkPointD2___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(self, key_type key) -> bool"""
        return _itkMapContainerPython.mapULitkPointD2_has_key(self, *args)

    def keys(self):
        """keys(self) -> PyObject"""
        return _itkMapContainerPython.mapULitkPointD2_keys(self)

    def values(self):
        """values(self) -> PyObject"""
        return _itkMapContainerPython.mapULitkPointD2_values(self)

    def items(self):
        """items(self) -> PyObject"""
        return _itkMapContainerPython.mapULitkPointD2_items(self)

    def __contains__(self, *args):
        """__contains__(self, key_type key) -> bool"""
        return _itkMapContainerPython.mapULitkPointD2___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(self) -> SwigPyIterator"""
        return _itkMapContainerPython.mapULitkPointD2_key_iterator(self)

    def value_iterator(self):
        """value_iterator(self) -> SwigPyIterator"""
        return _itkMapContainerPython.mapULitkPointD2_value_iterator(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args):
        """__setitem__(self, key_type key, mapped_type x)"""
        return _itkMapContainerPython.mapULitkPointD2___setitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(unsigned long)> arg0) -> mapULitkPointD2
        __init__(self) -> mapULitkPointD2
        __init__(self, mapULitkPointD2 arg0) -> mapULitkPointD2
        """
        _itkMapContainerPython.mapULitkPointD2_swiginit(self,_itkMapContainerPython.new_mapULitkPointD2(*args))
    def empty(self):
        """empty(self) -> bool"""
        return _itkMapContainerPython.mapULitkPointD2_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _itkMapContainerPython.mapULitkPointD2_size(self)

    def clear(self):
        """clear(self)"""
        return _itkMapContainerPython.mapULitkPointD2_clear(self)

    def swap(self, *args):
        """swap(self, mapULitkPointD2 v)"""
        return _itkMapContainerPython.mapULitkPointD2_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _itkMapContainerPython.mapULitkPointD2_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _itkMapContainerPython.mapULitkPointD2_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _itkMapContainerPython.mapULitkPointD2_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _itkMapContainerPython.mapULitkPointD2_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _itkMapContainerPython.mapULitkPointD2_rend(self)

    def count(self, *args):
        """count(self, key_type x) -> size_type"""
        return _itkMapContainerPython.mapULitkPointD2_count(self, *args)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator position)
        erase(self, iterator first, iterator last)
        """
        return _itkMapContainerPython.mapULitkPointD2_erase(self, *args)

    def find(self, *args):
        """find(self, key_type x) -> iterator"""
        return _itkMapContainerPython.mapULitkPointD2_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, key_type x) -> iterator"""
        return _itkMapContainerPython.mapULitkPointD2_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, key_type x) -> iterator"""
        return _itkMapContainerPython.mapULitkPointD2_upper_bound(self, *args)

    __swig_destroy__ = _itkMapContainerPython.delete_mapULitkPointD2
mapULitkPointD2.iterator = new_instancemethod(_itkMapContainerPython.mapULitkPointD2_iterator,None,mapULitkPointD2)
mapULitkPointD2.__nonzero__ = new_instancemethod(_itkMapContainerPython.mapULitkPointD2___nonzero__,None,mapULitkPointD2)
mapULitkPointD2.__bool__ = new_instancemethod(_itkMapContainerPython.mapULitkPointD2___bool__,None,mapULitkPointD2)
mapULitkPointD2.__len__ = new_instancemethod(_itkMapContainerPython.mapULitkPointD2___len__,None,mapULitkPointD2)
mapULitkPointD2.__getitem__ = new_instancemethod(_itkMapContainerPython.mapULitkPointD2___getitem__,None,mapULitkPointD2)
mapULitkPointD2.__delitem__ = new_instancemethod(_itkMapContainerPython.mapULitkPointD2___delitem__,None,mapULitkPointD2)
mapULitkPointD2.has_key = new_instancemethod(_itkMapContainerPython.mapULitkPointD2_has_key,None,mapULitkPointD2)
mapULitkPointD2.keys = new_instancemethod(_itkMapContainerPython.mapULitkPointD2_keys,None,mapULitkPointD2)
mapULitkPointD2.values = new_instancemethod(_itkMapContainerPython.mapULitkPointD2_values,None,mapULitkPointD2)
mapULitkPointD2.items = new_instancemethod(_itkMapContainerPython.mapULitkPointD2_items,None,mapULitkPointD2)
mapULitkPointD2.__contains__ = new_instancemethod(_itkMapContainerPython.mapULitkPointD2___contains__,None,mapULitkPointD2)
mapULitkPointD2.key_iterator = new_instancemethod(_itkMapContainerPython.mapULitkPointD2_key_iterator,None,mapULitkPointD2)
mapULitkPointD2.value_iterator = new_instancemethod(_itkMapContainerPython.mapULitkPointD2_value_iterator,None,mapULitkPointD2)
mapULitkPointD2.__setitem__ = new_instancemethod(_itkMapContainerPython.mapULitkPointD2___setitem__,None,mapULitkPointD2)
mapULitkPointD2.empty = new_instancemethod(_itkMapContainerPython.mapULitkPointD2_empty,None,mapULitkPointD2)
mapULitkPointD2.size = new_instancemethod(_itkMapContainerPython.mapULitkPointD2_size,None,mapULitkPointD2)
mapULitkPointD2.clear = new_instancemethod(_itkMapContainerPython.mapULitkPointD2_clear,None,mapULitkPointD2)
mapULitkPointD2.swap = new_instancemethod(_itkMapContainerPython.mapULitkPointD2_swap,None,mapULitkPointD2)
mapULitkPointD2.get_allocator = new_instancemethod(_itkMapContainerPython.mapULitkPointD2_get_allocator,None,mapULitkPointD2)
mapULitkPointD2.begin = new_instancemethod(_itkMapContainerPython.mapULitkPointD2_begin,None,mapULitkPointD2)
mapULitkPointD2.end = new_instancemethod(_itkMapContainerPython.mapULitkPointD2_end,None,mapULitkPointD2)
mapULitkPointD2.rbegin = new_instancemethod(_itkMapContainerPython.mapULitkPointD2_rbegin,None,mapULitkPointD2)
mapULitkPointD2.rend = new_instancemethod(_itkMapContainerPython.mapULitkPointD2_rend,None,mapULitkPointD2)
mapULitkPointD2.count = new_instancemethod(_itkMapContainerPython.mapULitkPointD2_count,None,mapULitkPointD2)
mapULitkPointD2.erase = new_instancemethod(_itkMapContainerPython.mapULitkPointD2_erase,None,mapULitkPointD2)
mapULitkPointD2.find = new_instancemethod(_itkMapContainerPython.mapULitkPointD2_find,None,mapULitkPointD2)
mapULitkPointD2.lower_bound = new_instancemethod(_itkMapContainerPython.mapULitkPointD2_lower_bound,None,mapULitkPointD2)
mapULitkPointD2.upper_bound = new_instancemethod(_itkMapContainerPython.mapULitkPointD2_upper_bound,None,mapULitkPointD2)
mapULitkPointD2_swigregister = _itkMapContainerPython.mapULitkPointD2_swigregister
mapULitkPointD2_swigregister(mapULitkPointD2)

class mapULitkVectorD3(object):
    """Proxy of C++ std::map<(unsigned long,itkVectorD3,std::less<(unsigned long)>)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _itkMapContainerPython.mapULitkVectorD3_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _itkMapContainerPython.mapULitkVectorD3___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _itkMapContainerPython.mapULitkVectorD3___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _itkMapContainerPython.mapULitkVectorD3___len__(self)

    def __getitem__(self, *args):
        """__getitem__(self, key_type key) -> mapped_type"""
        return _itkMapContainerPython.mapULitkVectorD3___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(self, key_type key)"""
        return _itkMapContainerPython.mapULitkVectorD3___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(self, key_type key) -> bool"""
        return _itkMapContainerPython.mapULitkVectorD3_has_key(self, *args)

    def keys(self):
        """keys(self) -> PyObject"""
        return _itkMapContainerPython.mapULitkVectorD3_keys(self)

    def values(self):
        """values(self) -> PyObject"""
        return _itkMapContainerPython.mapULitkVectorD3_values(self)

    def items(self):
        """items(self) -> PyObject"""
        return _itkMapContainerPython.mapULitkVectorD3_items(self)

    def __contains__(self, *args):
        """__contains__(self, key_type key) -> bool"""
        return _itkMapContainerPython.mapULitkVectorD3___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(self) -> SwigPyIterator"""
        return _itkMapContainerPython.mapULitkVectorD3_key_iterator(self)

    def value_iterator(self):
        """value_iterator(self) -> SwigPyIterator"""
        return _itkMapContainerPython.mapULitkVectorD3_value_iterator(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args):
        """__setitem__(self, key_type key, mapped_type x)"""
        return _itkMapContainerPython.mapULitkVectorD3___setitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(unsigned long)> arg0) -> mapULitkVectorD3
        __init__(self) -> mapULitkVectorD3
        __init__(self, mapULitkVectorD3 arg0) -> mapULitkVectorD3
        """
        _itkMapContainerPython.mapULitkVectorD3_swiginit(self,_itkMapContainerPython.new_mapULitkVectorD3(*args))
    def empty(self):
        """empty(self) -> bool"""
        return _itkMapContainerPython.mapULitkVectorD3_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _itkMapContainerPython.mapULitkVectorD3_size(self)

    def clear(self):
        """clear(self)"""
        return _itkMapContainerPython.mapULitkVectorD3_clear(self)

    def swap(self, *args):
        """swap(self, mapULitkVectorD3 v)"""
        return _itkMapContainerPython.mapULitkVectorD3_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _itkMapContainerPython.mapULitkVectorD3_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _itkMapContainerPython.mapULitkVectorD3_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _itkMapContainerPython.mapULitkVectorD3_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _itkMapContainerPython.mapULitkVectorD3_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _itkMapContainerPython.mapULitkVectorD3_rend(self)

    def count(self, *args):
        """count(self, key_type x) -> size_type"""
        return _itkMapContainerPython.mapULitkVectorD3_count(self, *args)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator position)
        erase(self, iterator first, iterator last)
        """
        return _itkMapContainerPython.mapULitkVectorD3_erase(self, *args)

    def find(self, *args):
        """find(self, key_type x) -> iterator"""
        return _itkMapContainerPython.mapULitkVectorD3_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, key_type x) -> iterator"""
        return _itkMapContainerPython.mapULitkVectorD3_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, key_type x) -> iterator"""
        return _itkMapContainerPython.mapULitkVectorD3_upper_bound(self, *args)

    __swig_destroy__ = _itkMapContainerPython.delete_mapULitkVectorD3
mapULitkVectorD3.iterator = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3_iterator,None,mapULitkVectorD3)
mapULitkVectorD3.__nonzero__ = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3___nonzero__,None,mapULitkVectorD3)
mapULitkVectorD3.__bool__ = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3___bool__,None,mapULitkVectorD3)
mapULitkVectorD3.__len__ = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3___len__,None,mapULitkVectorD3)
mapULitkVectorD3.__getitem__ = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3___getitem__,None,mapULitkVectorD3)
mapULitkVectorD3.__delitem__ = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3___delitem__,None,mapULitkVectorD3)
mapULitkVectorD3.has_key = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3_has_key,None,mapULitkVectorD3)
mapULitkVectorD3.keys = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3_keys,None,mapULitkVectorD3)
mapULitkVectorD3.values = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3_values,None,mapULitkVectorD3)
mapULitkVectorD3.items = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3_items,None,mapULitkVectorD3)
mapULitkVectorD3.__contains__ = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3___contains__,None,mapULitkVectorD3)
mapULitkVectorD3.key_iterator = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3_key_iterator,None,mapULitkVectorD3)
mapULitkVectorD3.value_iterator = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3_value_iterator,None,mapULitkVectorD3)
mapULitkVectorD3.__setitem__ = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3___setitem__,None,mapULitkVectorD3)
mapULitkVectorD3.empty = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3_empty,None,mapULitkVectorD3)
mapULitkVectorD3.size = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3_size,None,mapULitkVectorD3)
mapULitkVectorD3.clear = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3_clear,None,mapULitkVectorD3)
mapULitkVectorD3.swap = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3_swap,None,mapULitkVectorD3)
mapULitkVectorD3.get_allocator = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3_get_allocator,None,mapULitkVectorD3)
mapULitkVectorD3.begin = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3_begin,None,mapULitkVectorD3)
mapULitkVectorD3.end = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3_end,None,mapULitkVectorD3)
mapULitkVectorD3.rbegin = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3_rbegin,None,mapULitkVectorD3)
mapULitkVectorD3.rend = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3_rend,None,mapULitkVectorD3)
mapULitkVectorD3.count = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3_count,None,mapULitkVectorD3)
mapULitkVectorD3.erase = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3_erase,None,mapULitkVectorD3)
mapULitkVectorD3.find = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3_find,None,mapULitkVectorD3)
mapULitkVectorD3.lower_bound = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3_lower_bound,None,mapULitkVectorD3)
mapULitkVectorD3.upper_bound = new_instancemethod(_itkMapContainerPython.mapULitkVectorD3_upper_bound,None,mapULitkVectorD3)
mapULitkVectorD3_swigregister = _itkMapContainerPython.mapULitkVectorD3_swigregister
mapULitkVectorD3_swigregister(mapULitkVectorD3)

class mapULitkPointD3(object):
    """Proxy of C++ std::map<(unsigned long,itkPointD3,std::less<(unsigned long)>)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _itkMapContainerPython.mapULitkPointD3_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _itkMapContainerPython.mapULitkPointD3___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _itkMapContainerPython.mapULitkPointD3___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _itkMapContainerPython.mapULitkPointD3___len__(self)

    def __getitem__(self, *args):
        """__getitem__(self, key_type key) -> mapped_type"""
        return _itkMapContainerPython.mapULitkPointD3___getitem__(self, *args)

    def __delitem__(self, *args):
        """__delitem__(self, key_type key)"""
        return _itkMapContainerPython.mapULitkPointD3___delitem__(self, *args)

    def has_key(self, *args):
        """has_key(self, key_type key) -> bool"""
        return _itkMapContainerPython.mapULitkPointD3_has_key(self, *args)

    def keys(self):
        """keys(self) -> PyObject"""
        return _itkMapContainerPython.mapULitkPointD3_keys(self)

    def values(self):
        """values(self) -> PyObject"""
        return _itkMapContainerPython.mapULitkPointD3_values(self)

    def items(self):
        """items(self) -> PyObject"""
        return _itkMapContainerPython.mapULitkPointD3_items(self)

    def __contains__(self, *args):
        """__contains__(self, key_type key) -> bool"""
        return _itkMapContainerPython.mapULitkPointD3___contains__(self, *args)

    def key_iterator(self):
        """key_iterator(self) -> SwigPyIterator"""
        return _itkMapContainerPython.mapULitkPointD3_key_iterator(self)

    def value_iterator(self):
        """value_iterator(self) -> SwigPyIterator"""
        return _itkMapContainerPython.mapULitkPointD3_value_iterator(self)

    def __iter__(self): return self.key_iterator()
    def iterkeys(self): return self.key_iterator()
    def itervalues(self): return self.value_iterator()
    def iteritems(self): return self.iterator()
    def __setitem__(self, *args):
        """__setitem__(self, key_type key, mapped_type x)"""
        return _itkMapContainerPython.mapULitkPointD3___setitem__(self, *args)

    def __init__(self, *args): 
        """
        __init__(self, std::less<(unsigned long)> arg0) -> mapULitkPointD3
        __init__(self) -> mapULitkPointD3
        __init__(self, mapULitkPointD3 arg0) -> mapULitkPointD3
        """
        _itkMapContainerPython.mapULitkPointD3_swiginit(self,_itkMapContainerPython.new_mapULitkPointD3(*args))
    def empty(self):
        """empty(self) -> bool"""
        return _itkMapContainerPython.mapULitkPointD3_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _itkMapContainerPython.mapULitkPointD3_size(self)

    def clear(self):
        """clear(self)"""
        return _itkMapContainerPython.mapULitkPointD3_clear(self)

    def swap(self, *args):
        """swap(self, mapULitkPointD3 v)"""
        return _itkMapContainerPython.mapULitkPointD3_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _itkMapContainerPython.mapULitkPointD3_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _itkMapContainerPython.mapULitkPointD3_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _itkMapContainerPython.mapULitkPointD3_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _itkMapContainerPython.mapULitkPointD3_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _itkMapContainerPython.mapULitkPointD3_rend(self)

    def count(self, *args):
        """count(self, key_type x) -> size_type"""
        return _itkMapContainerPython.mapULitkPointD3_count(self, *args)

    def erase(self, *args):
        """
        erase(self, key_type x) -> size_type
        erase(self, iterator position)
        erase(self, iterator first, iterator last)
        """
        return _itkMapContainerPython.mapULitkPointD3_erase(self, *args)

    def find(self, *args):
        """find(self, key_type x) -> iterator"""
        return _itkMapContainerPython.mapULitkPointD3_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(self, key_type x) -> iterator"""
        return _itkMapContainerPython.mapULitkPointD3_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(self, key_type x) -> iterator"""
        return _itkMapContainerPython.mapULitkPointD3_upper_bound(self, *args)

    __swig_destroy__ = _itkMapContainerPython.delete_mapULitkPointD3
mapULitkPointD3.iterator = new_instancemethod(_itkMapContainerPython.mapULitkPointD3_iterator,None,mapULitkPointD3)
mapULitkPointD3.__nonzero__ = new_instancemethod(_itkMapContainerPython.mapULitkPointD3___nonzero__,None,mapULitkPointD3)
mapULitkPointD3.__bool__ = new_instancemethod(_itkMapContainerPython.mapULitkPointD3___bool__,None,mapULitkPointD3)
mapULitkPointD3.__len__ = new_instancemethod(_itkMapContainerPython.mapULitkPointD3___len__,None,mapULitkPointD3)
mapULitkPointD3.__getitem__ = new_instancemethod(_itkMapContainerPython.mapULitkPointD3___getitem__,None,mapULitkPointD3)
mapULitkPointD3.__delitem__ = new_instancemethod(_itkMapContainerPython.mapULitkPointD3___delitem__,None,mapULitkPointD3)
mapULitkPointD3.has_key = new_instancemethod(_itkMapContainerPython.mapULitkPointD3_has_key,None,mapULitkPointD3)
mapULitkPointD3.keys = new_instancemethod(_itkMapContainerPython.mapULitkPointD3_keys,None,mapULitkPointD3)
mapULitkPointD3.values = new_instancemethod(_itkMapContainerPython.mapULitkPointD3_values,None,mapULitkPointD3)
mapULitkPointD3.items = new_instancemethod(_itkMapContainerPython.mapULitkPointD3_items,None,mapULitkPointD3)
mapULitkPointD3.__contains__ = new_instancemethod(_itkMapContainerPython.mapULitkPointD3___contains__,None,mapULitkPointD3)
mapULitkPointD3.key_iterator = new_instancemethod(_itkMapContainerPython.mapULitkPointD3_key_iterator,None,mapULitkPointD3)
mapULitkPointD3.value_iterator = new_instancemethod(_itkMapContainerPython.mapULitkPointD3_value_iterator,None,mapULitkPointD3)
mapULitkPointD3.__setitem__ = new_instancemethod(_itkMapContainerPython.mapULitkPointD3___setitem__,None,mapULitkPointD3)
mapULitkPointD3.empty = new_instancemethod(_itkMapContainerPython.mapULitkPointD3_empty,None,mapULitkPointD3)
mapULitkPointD3.size = new_instancemethod(_itkMapContainerPython.mapULitkPointD3_size,None,mapULitkPointD3)
mapULitkPointD3.clear = new_instancemethod(_itkMapContainerPython.mapULitkPointD3_clear,None,mapULitkPointD3)
mapULitkPointD3.swap = new_instancemethod(_itkMapContainerPython.mapULitkPointD3_swap,None,mapULitkPointD3)
mapULitkPointD3.get_allocator = new_instancemethod(_itkMapContainerPython.mapULitkPointD3_get_allocator,None,mapULitkPointD3)
mapULitkPointD3.begin = new_instancemethod(_itkMapContainerPython.mapULitkPointD3_begin,None,mapULitkPointD3)
mapULitkPointD3.end = new_instancemethod(_itkMapContainerPython.mapULitkPointD3_end,None,mapULitkPointD3)
mapULitkPointD3.rbegin = new_instancemethod(_itkMapContainerPython.mapULitkPointD3_rbegin,None,mapULitkPointD3)
mapULitkPointD3.rend = new_instancemethod(_itkMapContainerPython.mapULitkPointD3_rend,None,mapULitkPointD3)
mapULitkPointD3.count = new_instancemethod(_itkMapContainerPython.mapULitkPointD3_count,None,mapULitkPointD3)
mapULitkPointD3.erase = new_instancemethod(_itkMapContainerPython.mapULitkPointD3_erase,None,mapULitkPointD3)
mapULitkPointD3.find = new_instancemethod(_itkMapContainerPython.mapULitkPointD3_find,None,mapULitkPointD3)
mapULitkPointD3.lower_bound = new_instancemethod(_itkMapContainerPython.mapULitkPointD3_lower_bound,None,mapULitkPointD3)
mapULitkPointD3.upper_bound = new_instancemethod(_itkMapContainerPython.mapULitkPointD3_upper_bound,None,mapULitkPointD3)
mapULitkPointD3_swigregister = _itkMapContainerPython.mapULitkPointD3_swigregister
mapULitkPointD3_swigregister(mapULitkPointD3)

class itkMapContainerULD(ITKCommonBasePython.itkObject,pyBasePython.mapULD):
    """Proxy of C++ itkMapContainerULD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> itkMapContainerULD
        __init__(self, std::less<(unsigned long)> comp) -> itkMapContainerULD
        """
        _itkMapContainerPython.itkMapContainerULD_swiginit(self,_itkMapContainerPython.new_itkMapContainerULD(*args))
    def __New_orig__():
        """__New_orig__()"""
        return _itkMapContainerPython.itkMapContainerULD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> mapULD"""
        return _itkMapContainerPython.itkMapContainerULD_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> mapULD"""
        return _itkMapContainerPython.itkMapContainerULD_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned long arg0) -> double
        ElementAt(self, unsigned long arg0) -> double
        """
        return _itkMapContainerPython.itkMapContainerULD_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned long arg0) -> double"""
        return _itkMapContainerPython.itkMapContainerULD_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned long arg0) -> double"""
        return _itkMapContainerPython.itkMapContainerULD_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned long arg0, double arg1)"""
        return _itkMapContainerPython.itkMapContainerULD_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned long arg0, double arg1)"""
        return _itkMapContainerPython.itkMapContainerULD_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned long arg0) -> bool"""
        return _itkMapContainerPython.itkMapContainerULD_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned long arg0, double arg1) -> bool"""
        return _itkMapContainerPython.itkMapContainerULD_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned long arg0)"""
        return _itkMapContainerPython.itkMapContainerULD_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned long arg0)"""
        return _itkMapContainerPython.itkMapContainerULD_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkMapContainerPython.itkMapContainerULD_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned long arg0)"""
        return _itkMapContainerPython.itkMapContainerULD_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkMapContainerPython.itkMapContainerULD_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkMapContainerPython.itkMapContainerULD_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULD
    def cast(*args):
        """cast(itkLightObject obj) -> itkMapContainerULD"""
        return _itkMapContainerPython.itkMapContainerULD_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMapContainerULD"""
        return _itkMapContainerPython.itkMapContainerULD_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMapContainerULD
        
        Create a new object of the class itkMapContainerULD and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMapContainerULD.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMapContainerULD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULD.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_CastToSTLContainer,None,itkMapContainerULD)
itkMapContainerULD.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_CastToSTLConstContainer,None,itkMapContainerULD)
itkMapContainerULD.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_ElementAt,None,itkMapContainerULD)
itkMapContainerULD.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_CreateElementAt,None,itkMapContainerULD)
itkMapContainerULD.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_GetElement,None,itkMapContainerULD)
itkMapContainerULD.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_SetElement,None,itkMapContainerULD)
itkMapContainerULD.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_InsertElement,None,itkMapContainerULD)
itkMapContainerULD.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_IndexExists,None,itkMapContainerULD)
itkMapContainerULD.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_GetElementIfIndexExists,None,itkMapContainerULD)
itkMapContainerULD.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_CreateIndex,None,itkMapContainerULD)
itkMapContainerULD.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_DeleteIndex,None,itkMapContainerULD)
itkMapContainerULD.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_Size,None,itkMapContainerULD)
itkMapContainerULD.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_Reserve,None,itkMapContainerULD)
itkMapContainerULD.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_Squeeze,None,itkMapContainerULD)
itkMapContainerULD.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_Initialize,None,itkMapContainerULD)
itkMapContainerULD.GetPointer = new_instancemethod(_itkMapContainerPython.itkMapContainerULD_GetPointer,None,itkMapContainerULD)
itkMapContainerULD_swigregister = _itkMapContainerPython.itkMapContainerULD_swigregister
itkMapContainerULD_swigregister(itkMapContainerULD)

def itkMapContainerULD___New_orig__():
  """itkMapContainerULD___New_orig__()"""
  return _itkMapContainerPython.itkMapContainerULD___New_orig__()

def itkMapContainerULD_cast(*args):
  """itkMapContainerULD_cast(itkLightObject obj) -> itkMapContainerULD"""
  return _itkMapContainerPython.itkMapContainerULD_cast(*args)

class itkMapContainerULPD2(ITKCommonBasePython.itkObject,mapULitkPointD2):
    """Proxy of C++ itkMapContainerULPD2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> itkMapContainerULPD2
        __init__(self, std::less<(unsigned long)> comp) -> itkMapContainerULPD2
        """
        _itkMapContainerPython.itkMapContainerULPD2_swiginit(self,_itkMapContainerPython.new_itkMapContainerULPD2(*args))
    def __New_orig__():
        """__New_orig__()"""
        return _itkMapContainerPython.itkMapContainerULPD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> mapULitkPointD2"""
        return _itkMapContainerPython.itkMapContainerULPD2_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> mapULitkPointD2"""
        return _itkMapContainerPython.itkMapContainerULPD2_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned long arg0) -> itkPointD2
        ElementAt(self, unsigned long arg0) -> itkPointD2
        """
        return _itkMapContainerPython.itkMapContainerULPD2_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned long arg0) -> itkPointD2"""
        return _itkMapContainerPython.itkMapContainerULPD2_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned long arg0) -> itkPointD2"""
        return _itkMapContainerPython.itkMapContainerULPD2_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned long arg0, itkPointD2 arg1)"""
        return _itkMapContainerPython.itkMapContainerULPD2_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned long arg0, itkPointD2 arg1)"""
        return _itkMapContainerPython.itkMapContainerULPD2_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned long arg0) -> bool"""
        return _itkMapContainerPython.itkMapContainerULPD2_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned long arg0, itkPointD2 arg1) -> bool"""
        return _itkMapContainerPython.itkMapContainerULPD2_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned long arg0)"""
        return _itkMapContainerPython.itkMapContainerULPD2_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned long arg0)"""
        return _itkMapContainerPython.itkMapContainerULPD2_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkMapContainerPython.itkMapContainerULPD2_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned long arg0)"""
        return _itkMapContainerPython.itkMapContainerULPD2_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkMapContainerPython.itkMapContainerULPD2_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkMapContainerPython.itkMapContainerULPD2_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULPD2
    def cast(*args):
        """cast(itkLightObject obj) -> itkMapContainerULPD2"""
        return _itkMapContainerPython.itkMapContainerULPD2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMapContainerULPD2"""
        return _itkMapContainerPython.itkMapContainerULPD2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMapContainerULPD2
        
        Create a new object of the class itkMapContainerULPD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMapContainerULPD2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMapContainerULPD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULPD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULPD2.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_CastToSTLContainer,None,itkMapContainerULPD2)
itkMapContainerULPD2.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_CastToSTLConstContainer,None,itkMapContainerULPD2)
itkMapContainerULPD2.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_ElementAt,None,itkMapContainerULPD2)
itkMapContainerULPD2.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_CreateElementAt,None,itkMapContainerULPD2)
itkMapContainerULPD2.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_GetElement,None,itkMapContainerULPD2)
itkMapContainerULPD2.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_SetElement,None,itkMapContainerULPD2)
itkMapContainerULPD2.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_InsertElement,None,itkMapContainerULPD2)
itkMapContainerULPD2.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_IndexExists,None,itkMapContainerULPD2)
itkMapContainerULPD2.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_GetElementIfIndexExists,None,itkMapContainerULPD2)
itkMapContainerULPD2.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_CreateIndex,None,itkMapContainerULPD2)
itkMapContainerULPD2.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_DeleteIndex,None,itkMapContainerULPD2)
itkMapContainerULPD2.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_Size,None,itkMapContainerULPD2)
itkMapContainerULPD2.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_Reserve,None,itkMapContainerULPD2)
itkMapContainerULPD2.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_Squeeze,None,itkMapContainerULPD2)
itkMapContainerULPD2.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_Initialize,None,itkMapContainerULPD2)
itkMapContainerULPD2.GetPointer = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD2_GetPointer,None,itkMapContainerULPD2)
itkMapContainerULPD2_swigregister = _itkMapContainerPython.itkMapContainerULPD2_swigregister
itkMapContainerULPD2_swigregister(itkMapContainerULPD2)

def itkMapContainerULPD2___New_orig__():
  """itkMapContainerULPD2___New_orig__()"""
  return _itkMapContainerPython.itkMapContainerULPD2___New_orig__()

def itkMapContainerULPD2_cast(*args):
  """itkMapContainerULPD2_cast(itkLightObject obj) -> itkMapContainerULPD2"""
  return _itkMapContainerPython.itkMapContainerULPD2_cast(*args)

class itkMapContainerULPD3(ITKCommonBasePython.itkObject,mapULitkPointD3):
    """Proxy of C++ itkMapContainerULPD3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> itkMapContainerULPD3
        __init__(self, std::less<(unsigned long)> comp) -> itkMapContainerULPD3
        """
        _itkMapContainerPython.itkMapContainerULPD3_swiginit(self,_itkMapContainerPython.new_itkMapContainerULPD3(*args))
    def __New_orig__():
        """__New_orig__()"""
        return _itkMapContainerPython.itkMapContainerULPD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> mapULitkPointD3"""
        return _itkMapContainerPython.itkMapContainerULPD3_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> mapULitkPointD3"""
        return _itkMapContainerPython.itkMapContainerULPD3_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned long arg0) -> itkPointD3
        ElementAt(self, unsigned long arg0) -> itkPointD3
        """
        return _itkMapContainerPython.itkMapContainerULPD3_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned long arg0) -> itkPointD3"""
        return _itkMapContainerPython.itkMapContainerULPD3_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned long arg0) -> itkPointD3"""
        return _itkMapContainerPython.itkMapContainerULPD3_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned long arg0, itkPointD3 arg1)"""
        return _itkMapContainerPython.itkMapContainerULPD3_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned long arg0, itkPointD3 arg1)"""
        return _itkMapContainerPython.itkMapContainerULPD3_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned long arg0) -> bool"""
        return _itkMapContainerPython.itkMapContainerULPD3_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned long arg0, itkPointD3 arg1) -> bool"""
        return _itkMapContainerPython.itkMapContainerULPD3_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned long arg0)"""
        return _itkMapContainerPython.itkMapContainerULPD3_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned long arg0)"""
        return _itkMapContainerPython.itkMapContainerULPD3_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkMapContainerPython.itkMapContainerULPD3_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned long arg0)"""
        return _itkMapContainerPython.itkMapContainerULPD3_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkMapContainerPython.itkMapContainerULPD3_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkMapContainerPython.itkMapContainerULPD3_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULPD3
    def cast(*args):
        """cast(itkLightObject obj) -> itkMapContainerULPD3"""
        return _itkMapContainerPython.itkMapContainerULPD3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMapContainerULPD3"""
        return _itkMapContainerPython.itkMapContainerULPD3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMapContainerULPD3
        
        Create a new object of the class itkMapContainerULPD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMapContainerULPD3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMapContainerULPD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULPD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULPD3.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_CastToSTLContainer,None,itkMapContainerULPD3)
itkMapContainerULPD3.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_CastToSTLConstContainer,None,itkMapContainerULPD3)
itkMapContainerULPD3.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_ElementAt,None,itkMapContainerULPD3)
itkMapContainerULPD3.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_CreateElementAt,None,itkMapContainerULPD3)
itkMapContainerULPD3.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_GetElement,None,itkMapContainerULPD3)
itkMapContainerULPD3.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_SetElement,None,itkMapContainerULPD3)
itkMapContainerULPD3.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_InsertElement,None,itkMapContainerULPD3)
itkMapContainerULPD3.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_IndexExists,None,itkMapContainerULPD3)
itkMapContainerULPD3.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_GetElementIfIndexExists,None,itkMapContainerULPD3)
itkMapContainerULPD3.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_CreateIndex,None,itkMapContainerULPD3)
itkMapContainerULPD3.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_DeleteIndex,None,itkMapContainerULPD3)
itkMapContainerULPD3.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_Size,None,itkMapContainerULPD3)
itkMapContainerULPD3.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_Reserve,None,itkMapContainerULPD3)
itkMapContainerULPD3.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_Squeeze,None,itkMapContainerULPD3)
itkMapContainerULPD3.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_Initialize,None,itkMapContainerULPD3)
itkMapContainerULPD3.GetPointer = new_instancemethod(_itkMapContainerPython.itkMapContainerULPD3_GetPointer,None,itkMapContainerULPD3)
itkMapContainerULPD3_swigregister = _itkMapContainerPython.itkMapContainerULPD3_swigregister
itkMapContainerULPD3_swigregister(itkMapContainerULPD3)

def itkMapContainerULPD3___New_orig__():
  """itkMapContainerULPD3___New_orig__()"""
  return _itkMapContainerPython.itkMapContainerULPD3___New_orig__()

def itkMapContainerULPD3_cast(*args):
  """itkMapContainerULPD3_cast(itkLightObject obj) -> itkMapContainerULPD3"""
  return _itkMapContainerPython.itkMapContainerULPD3_cast(*args)

class itkMapContainerULSUL(ITKCommonBasePython.itkObject,pyBasePython.mapsetUL):
    """Proxy of C++ itkMapContainerULSUL class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> itkMapContainerULSUL
        __init__(self, std::less<(unsigned long)> comp) -> itkMapContainerULSUL
        """
        _itkMapContainerPython.itkMapContainerULSUL_swiginit(self,_itkMapContainerPython.new_itkMapContainerULSUL(*args))
    def __New_orig__():
        """__New_orig__()"""
        return _itkMapContainerPython.itkMapContainerULSUL___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> mapsetUL"""
        return _itkMapContainerPython.itkMapContainerULSUL_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> mapsetUL"""
        return _itkMapContainerPython.itkMapContainerULSUL_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned long arg0) -> setUL
        ElementAt(self, unsigned long arg0) -> setUL
        """
        return _itkMapContainerPython.itkMapContainerULSUL_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned long arg0) -> setUL"""
        return _itkMapContainerPython.itkMapContainerULSUL_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned long arg0) -> setUL"""
        return _itkMapContainerPython.itkMapContainerULSUL_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned long arg0, setUL arg1)"""
        return _itkMapContainerPython.itkMapContainerULSUL_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned long arg0, setUL arg1)"""
        return _itkMapContainerPython.itkMapContainerULSUL_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned long arg0) -> bool"""
        return _itkMapContainerPython.itkMapContainerULSUL_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned long arg0, setUL arg1) -> bool"""
        return _itkMapContainerPython.itkMapContainerULSUL_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned long arg0)"""
        return _itkMapContainerPython.itkMapContainerULSUL_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned long arg0)"""
        return _itkMapContainerPython.itkMapContainerULSUL_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkMapContainerPython.itkMapContainerULSUL_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned long arg0)"""
        return _itkMapContainerPython.itkMapContainerULSUL_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkMapContainerPython.itkMapContainerULSUL_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkMapContainerPython.itkMapContainerULSUL_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULSUL
    def cast(*args):
        """cast(itkLightObject obj) -> itkMapContainerULSUL"""
        return _itkMapContainerPython.itkMapContainerULSUL_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMapContainerULSUL"""
        return _itkMapContainerPython.itkMapContainerULSUL_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMapContainerULSUL
        
        Create a new object of the class itkMapContainerULSUL and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMapContainerULSUL.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMapContainerULSUL.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULSUL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULSUL.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULSUL_CastToSTLContainer,None,itkMapContainerULSUL)
itkMapContainerULSUL.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULSUL_CastToSTLConstContainer,None,itkMapContainerULSUL)
itkMapContainerULSUL.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULSUL_ElementAt,None,itkMapContainerULSUL)
itkMapContainerULSUL.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULSUL_CreateElementAt,None,itkMapContainerULSUL)
itkMapContainerULSUL.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULSUL_GetElement,None,itkMapContainerULSUL)
itkMapContainerULSUL.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULSUL_SetElement,None,itkMapContainerULSUL)
itkMapContainerULSUL.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULSUL_InsertElement,None,itkMapContainerULSUL)
itkMapContainerULSUL.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULSUL_IndexExists,None,itkMapContainerULSUL)
itkMapContainerULSUL.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULSUL_GetElementIfIndexExists,None,itkMapContainerULSUL)
itkMapContainerULSUL.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULSUL_CreateIndex,None,itkMapContainerULSUL)
itkMapContainerULSUL.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULSUL_DeleteIndex,None,itkMapContainerULSUL)
itkMapContainerULSUL.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULSUL_Size,None,itkMapContainerULSUL)
itkMapContainerULSUL.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULSUL_Reserve,None,itkMapContainerULSUL)
itkMapContainerULSUL.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULSUL_Squeeze,None,itkMapContainerULSUL)
itkMapContainerULSUL.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULSUL_Initialize,None,itkMapContainerULSUL)
itkMapContainerULSUL.GetPointer = new_instancemethod(_itkMapContainerPython.itkMapContainerULSUL_GetPointer,None,itkMapContainerULSUL)
itkMapContainerULSUL_swigregister = _itkMapContainerPython.itkMapContainerULSUL_swigregister
itkMapContainerULSUL_swigregister(itkMapContainerULSUL)

def itkMapContainerULSUL___New_orig__():
  """itkMapContainerULSUL___New_orig__()"""
  return _itkMapContainerPython.itkMapContainerULSUL___New_orig__()

def itkMapContainerULSUL_cast(*args):
  """itkMapContainerULSUL_cast(itkLightObject obj) -> itkMapContainerULSUL"""
  return _itkMapContainerPython.itkMapContainerULSUL_cast(*args)

class itkMapContainerULVD2(ITKCommonBasePython.itkObject,mapULitkVectorD2):
    """Proxy of C++ itkMapContainerULVD2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> itkMapContainerULVD2
        __init__(self, std::less<(unsigned long)> comp) -> itkMapContainerULVD2
        """
        _itkMapContainerPython.itkMapContainerULVD2_swiginit(self,_itkMapContainerPython.new_itkMapContainerULVD2(*args))
    def __New_orig__():
        """__New_orig__()"""
        return _itkMapContainerPython.itkMapContainerULVD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> mapULitkVectorD2"""
        return _itkMapContainerPython.itkMapContainerULVD2_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> mapULitkVectorD2"""
        return _itkMapContainerPython.itkMapContainerULVD2_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned long arg0) -> itkVectorD2
        ElementAt(self, unsigned long arg0) -> itkVectorD2
        """
        return _itkMapContainerPython.itkMapContainerULVD2_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned long arg0) -> itkVectorD2"""
        return _itkMapContainerPython.itkMapContainerULVD2_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned long arg0) -> itkVectorD2"""
        return _itkMapContainerPython.itkMapContainerULVD2_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned long arg0, itkVectorD2 arg1)"""
        return _itkMapContainerPython.itkMapContainerULVD2_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned long arg0, itkVectorD2 arg1)"""
        return _itkMapContainerPython.itkMapContainerULVD2_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned long arg0) -> bool"""
        return _itkMapContainerPython.itkMapContainerULVD2_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned long arg0, itkVectorD2 arg1) -> bool"""
        return _itkMapContainerPython.itkMapContainerULVD2_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned long arg0)"""
        return _itkMapContainerPython.itkMapContainerULVD2_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned long arg0)"""
        return _itkMapContainerPython.itkMapContainerULVD2_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkMapContainerPython.itkMapContainerULVD2_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned long arg0)"""
        return _itkMapContainerPython.itkMapContainerULVD2_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkMapContainerPython.itkMapContainerULVD2_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkMapContainerPython.itkMapContainerULVD2_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULVD2
    def cast(*args):
        """cast(itkLightObject obj) -> itkMapContainerULVD2"""
        return _itkMapContainerPython.itkMapContainerULVD2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMapContainerULVD2"""
        return _itkMapContainerPython.itkMapContainerULVD2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMapContainerULVD2
        
        Create a new object of the class itkMapContainerULVD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMapContainerULVD2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMapContainerULVD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULVD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULVD2.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_CastToSTLContainer,None,itkMapContainerULVD2)
itkMapContainerULVD2.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_CastToSTLConstContainer,None,itkMapContainerULVD2)
itkMapContainerULVD2.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_ElementAt,None,itkMapContainerULVD2)
itkMapContainerULVD2.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_CreateElementAt,None,itkMapContainerULVD2)
itkMapContainerULVD2.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_GetElement,None,itkMapContainerULVD2)
itkMapContainerULVD2.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_SetElement,None,itkMapContainerULVD2)
itkMapContainerULVD2.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_InsertElement,None,itkMapContainerULVD2)
itkMapContainerULVD2.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_IndexExists,None,itkMapContainerULVD2)
itkMapContainerULVD2.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_GetElementIfIndexExists,None,itkMapContainerULVD2)
itkMapContainerULVD2.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_CreateIndex,None,itkMapContainerULVD2)
itkMapContainerULVD2.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_DeleteIndex,None,itkMapContainerULVD2)
itkMapContainerULVD2.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_Size,None,itkMapContainerULVD2)
itkMapContainerULVD2.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_Reserve,None,itkMapContainerULVD2)
itkMapContainerULVD2.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_Squeeze,None,itkMapContainerULVD2)
itkMapContainerULVD2.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_Initialize,None,itkMapContainerULVD2)
itkMapContainerULVD2.GetPointer = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD2_GetPointer,None,itkMapContainerULVD2)
itkMapContainerULVD2_swigregister = _itkMapContainerPython.itkMapContainerULVD2_swigregister
itkMapContainerULVD2_swigregister(itkMapContainerULVD2)

def itkMapContainerULVD2___New_orig__():
  """itkMapContainerULVD2___New_orig__()"""
  return _itkMapContainerPython.itkMapContainerULVD2___New_orig__()

def itkMapContainerULVD2_cast(*args):
  """itkMapContainerULVD2_cast(itkLightObject obj) -> itkMapContainerULVD2"""
  return _itkMapContainerPython.itkMapContainerULVD2_cast(*args)

class itkMapContainerULVD3(ITKCommonBasePython.itkObject,mapULitkVectorD3):
    """Proxy of C++ itkMapContainerULVD3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> itkMapContainerULVD3
        __init__(self, std::less<(unsigned long)> comp) -> itkMapContainerULVD3
        """
        _itkMapContainerPython.itkMapContainerULVD3_swiginit(self,_itkMapContainerPython.new_itkMapContainerULVD3(*args))
    def __New_orig__():
        """__New_orig__()"""
        return _itkMapContainerPython.itkMapContainerULVD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> mapULitkVectorD3"""
        return _itkMapContainerPython.itkMapContainerULVD3_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> mapULitkVectorD3"""
        return _itkMapContainerPython.itkMapContainerULVD3_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned long arg0) -> itkVectorD3
        ElementAt(self, unsigned long arg0) -> itkVectorD3
        """
        return _itkMapContainerPython.itkMapContainerULVD3_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned long arg0) -> itkVectorD3"""
        return _itkMapContainerPython.itkMapContainerULVD3_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned long arg0) -> itkVectorD3"""
        return _itkMapContainerPython.itkMapContainerULVD3_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned long arg0, itkVectorD3 arg1)"""
        return _itkMapContainerPython.itkMapContainerULVD3_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned long arg0, itkVectorD3 arg1)"""
        return _itkMapContainerPython.itkMapContainerULVD3_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned long arg0) -> bool"""
        return _itkMapContainerPython.itkMapContainerULVD3_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned long arg0, itkVectorD3 arg1) -> bool"""
        return _itkMapContainerPython.itkMapContainerULVD3_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned long arg0)"""
        return _itkMapContainerPython.itkMapContainerULVD3_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned long arg0)"""
        return _itkMapContainerPython.itkMapContainerULVD3_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkMapContainerPython.itkMapContainerULVD3_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned long arg0)"""
        return _itkMapContainerPython.itkMapContainerULVD3_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkMapContainerPython.itkMapContainerULVD3_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkMapContainerPython.itkMapContainerULVD3_Initialize(self)

    __swig_destroy__ = _itkMapContainerPython.delete_itkMapContainerULVD3
    def cast(*args):
        """cast(itkLightObject obj) -> itkMapContainerULVD3"""
        return _itkMapContainerPython.itkMapContainerULVD3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMapContainerULVD3"""
        return _itkMapContainerPython.itkMapContainerULVD3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMapContainerULVD3
        
        Create a new object of the class itkMapContainerULVD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMapContainerULVD3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMapContainerULVD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMapContainerULVD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMapContainerULVD3.CastToSTLContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_CastToSTLContainer,None,itkMapContainerULVD3)
itkMapContainerULVD3.CastToSTLConstContainer = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_CastToSTLConstContainer,None,itkMapContainerULVD3)
itkMapContainerULVD3.ElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_ElementAt,None,itkMapContainerULVD3)
itkMapContainerULVD3.CreateElementAt = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_CreateElementAt,None,itkMapContainerULVD3)
itkMapContainerULVD3.GetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_GetElement,None,itkMapContainerULVD3)
itkMapContainerULVD3.SetElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_SetElement,None,itkMapContainerULVD3)
itkMapContainerULVD3.InsertElement = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_InsertElement,None,itkMapContainerULVD3)
itkMapContainerULVD3.IndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_IndexExists,None,itkMapContainerULVD3)
itkMapContainerULVD3.GetElementIfIndexExists = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_GetElementIfIndexExists,None,itkMapContainerULVD3)
itkMapContainerULVD3.CreateIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_CreateIndex,None,itkMapContainerULVD3)
itkMapContainerULVD3.DeleteIndex = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_DeleteIndex,None,itkMapContainerULVD3)
itkMapContainerULVD3.Size = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_Size,None,itkMapContainerULVD3)
itkMapContainerULVD3.Reserve = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_Reserve,None,itkMapContainerULVD3)
itkMapContainerULVD3.Squeeze = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_Squeeze,None,itkMapContainerULVD3)
itkMapContainerULVD3.Initialize = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_Initialize,None,itkMapContainerULVD3)
itkMapContainerULVD3.GetPointer = new_instancemethod(_itkMapContainerPython.itkMapContainerULVD3_GetPointer,None,itkMapContainerULVD3)
itkMapContainerULVD3_swigregister = _itkMapContainerPython.itkMapContainerULVD3_swigregister
itkMapContainerULVD3_swigregister(itkMapContainerULVD3)

def itkMapContainerULVD3___New_orig__():
  """itkMapContainerULVD3___New_orig__()"""
  return _itkMapContainerPython.itkMapContainerULVD3___New_orig__()

def itkMapContainerULVD3_cast(*args):
  """itkMapContainerULVD3_cast(itkLightObject obj) -> itkMapContainerULVD3"""
  return _itkMapContainerPython.itkMapContainerULVD3_cast(*args)



