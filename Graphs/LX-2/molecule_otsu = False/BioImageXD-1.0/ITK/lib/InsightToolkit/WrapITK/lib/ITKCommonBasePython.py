# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _ITKCommonBasePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ITKCommonBasePython', [dirname(__file__)])
        except ImportError:
            import _ITKCommonBasePython
            return _ITKCommonBasePython
        if fp is not None:
            try:
                _mod = imp.load_module('_ITKCommonBasePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ITKCommonBasePython = swig_import_helper()
    del swig_import_helper
else:
    import _ITKCommonBasePython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkEventObjectsPython
import pyBasePython
def itkMultiThreader_New():
  return itkMultiThreader.New()

def itkMetaDataObjectBase_New():
  return itkMetaDataObjectBase.New()

def itkVersion_New():
  return itkVersion.New()

def itkOutputWindow_New():
  return itkOutputWindow.New()

def itkObjectFactoryBase_New():
  return itkObjectFactoryBase.New()

def itkDynamicLoader_New():
  return itkDynamicLoader.New()

def itkDirectory_New():
  return itkDirectory.New()

def itkCommand_New():
  return itkCommand.New()

def itkProcessObject_New():
  return itkProcessObject.New()

def itkLightProcessObject_New():
  return itkLightProcessObject.New()

def itkDataObject_New():
  return itkDataObject.New()

def itkObject_New():
  return itkObject.New()

def itkLightObject_New():
  return itkLightObject.New()

class listitkLightObject(object):
    """Proxy of C++ std::list<(itkLightObject_Pointer)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _ITKCommonBasePython.listitkLightObject_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _ITKCommonBasePython.listitkLightObject___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _ITKCommonBasePython.listitkLightObject___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _ITKCommonBasePython.listitkLightObject___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _ITKCommonBasePython.listitkLightObject_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> listitkLightObject"""
        return _ITKCommonBasePython.listitkLightObject___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, listitkLightObject v)"""
        return _ITKCommonBasePython.listitkLightObject___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _ITKCommonBasePython.listitkLightObject___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _ITKCommonBasePython.listitkLightObject___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> listitkLightObject
        __getitem__(self, difference_type i) -> value_type
        """
        return _ITKCommonBasePython.listitkLightObject___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, listitkLightObject v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _ITKCommonBasePython.listitkLightObject___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _ITKCommonBasePython.listitkLightObject_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _ITKCommonBasePython.listitkLightObject_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _ITKCommonBasePython.listitkLightObject_size(self)

    def clear(self):
        """clear(self)"""
        return _ITKCommonBasePython.listitkLightObject_clear(self)

    def swap(self, *args):
        """swap(self, listitkLightObject v)"""
        return _ITKCommonBasePython.listitkLightObject_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _ITKCommonBasePython.listitkLightObject_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _ITKCommonBasePython.listitkLightObject_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _ITKCommonBasePython.listitkLightObject_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _ITKCommonBasePython.listitkLightObject_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _ITKCommonBasePython.listitkLightObject_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _ITKCommonBasePython.listitkLightObject_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _ITKCommonBasePython.listitkLightObject_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> listitkLightObject
        __init__(self, listitkLightObject arg0) -> listitkLightObject
        __init__(self, size_type size) -> listitkLightObject
        __init__(self, size_type size, value_type value) -> listitkLightObject
        """
        _ITKCommonBasePython.listitkLightObject_swiginit(self,_ITKCommonBasePython.new_listitkLightObject(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _ITKCommonBasePython.listitkLightObject_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _ITKCommonBasePython.listitkLightObject_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _ITKCommonBasePython.listitkLightObject_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _ITKCommonBasePython.listitkLightObject_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _ITKCommonBasePython.listitkLightObject_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _ITKCommonBasePython.listitkLightObject_insert(self, *args)

    def pop_front(self):
        """pop_front(self)"""
        return _ITKCommonBasePython.listitkLightObject_pop_front(self)

    def push_front(self, *args):
        """push_front(self, value_type x)"""
        return _ITKCommonBasePython.listitkLightObject_push_front(self, *args)

    def reverse(self):
        """reverse(self)"""
        return _ITKCommonBasePython.listitkLightObject_reverse(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_listitkLightObject
listitkLightObject.iterator = new_instancemethod(_ITKCommonBasePython.listitkLightObject_iterator,None,listitkLightObject)
listitkLightObject.__nonzero__ = new_instancemethod(_ITKCommonBasePython.listitkLightObject___nonzero__,None,listitkLightObject)
listitkLightObject.__bool__ = new_instancemethod(_ITKCommonBasePython.listitkLightObject___bool__,None,listitkLightObject)
listitkLightObject.__len__ = new_instancemethod(_ITKCommonBasePython.listitkLightObject___len__,None,listitkLightObject)
listitkLightObject.pop = new_instancemethod(_ITKCommonBasePython.listitkLightObject_pop,None,listitkLightObject)
listitkLightObject.__getslice__ = new_instancemethod(_ITKCommonBasePython.listitkLightObject___getslice__,None,listitkLightObject)
listitkLightObject.__setslice__ = new_instancemethod(_ITKCommonBasePython.listitkLightObject___setslice__,None,listitkLightObject)
listitkLightObject.__delslice__ = new_instancemethod(_ITKCommonBasePython.listitkLightObject___delslice__,None,listitkLightObject)
listitkLightObject.__delitem__ = new_instancemethod(_ITKCommonBasePython.listitkLightObject___delitem__,None,listitkLightObject)
listitkLightObject.__getitem__ = new_instancemethod(_ITKCommonBasePython.listitkLightObject___getitem__,None,listitkLightObject)
listitkLightObject.__setitem__ = new_instancemethod(_ITKCommonBasePython.listitkLightObject___setitem__,None,listitkLightObject)
listitkLightObject.append = new_instancemethod(_ITKCommonBasePython.listitkLightObject_append,None,listitkLightObject)
listitkLightObject.empty = new_instancemethod(_ITKCommonBasePython.listitkLightObject_empty,None,listitkLightObject)
listitkLightObject.size = new_instancemethod(_ITKCommonBasePython.listitkLightObject_size,None,listitkLightObject)
listitkLightObject.clear = new_instancemethod(_ITKCommonBasePython.listitkLightObject_clear,None,listitkLightObject)
listitkLightObject.swap = new_instancemethod(_ITKCommonBasePython.listitkLightObject_swap,None,listitkLightObject)
listitkLightObject.get_allocator = new_instancemethod(_ITKCommonBasePython.listitkLightObject_get_allocator,None,listitkLightObject)
listitkLightObject.begin = new_instancemethod(_ITKCommonBasePython.listitkLightObject_begin,None,listitkLightObject)
listitkLightObject.end = new_instancemethod(_ITKCommonBasePython.listitkLightObject_end,None,listitkLightObject)
listitkLightObject.rbegin = new_instancemethod(_ITKCommonBasePython.listitkLightObject_rbegin,None,listitkLightObject)
listitkLightObject.rend = new_instancemethod(_ITKCommonBasePython.listitkLightObject_rend,None,listitkLightObject)
listitkLightObject.pop_back = new_instancemethod(_ITKCommonBasePython.listitkLightObject_pop_back,None,listitkLightObject)
listitkLightObject.erase = new_instancemethod(_ITKCommonBasePython.listitkLightObject_erase,None,listitkLightObject)
listitkLightObject.push_back = new_instancemethod(_ITKCommonBasePython.listitkLightObject_push_back,None,listitkLightObject)
listitkLightObject.front = new_instancemethod(_ITKCommonBasePython.listitkLightObject_front,None,listitkLightObject)
listitkLightObject.back = new_instancemethod(_ITKCommonBasePython.listitkLightObject_back,None,listitkLightObject)
listitkLightObject.assign = new_instancemethod(_ITKCommonBasePython.listitkLightObject_assign,None,listitkLightObject)
listitkLightObject.resize = new_instancemethod(_ITKCommonBasePython.listitkLightObject_resize,None,listitkLightObject)
listitkLightObject.insert = new_instancemethod(_ITKCommonBasePython.listitkLightObject_insert,None,listitkLightObject)
listitkLightObject.pop_front = new_instancemethod(_ITKCommonBasePython.listitkLightObject_pop_front,None,listitkLightObject)
listitkLightObject.push_front = new_instancemethod(_ITKCommonBasePython.listitkLightObject_push_front,None,listitkLightObject)
listitkLightObject.reverse = new_instancemethod(_ITKCommonBasePython.listitkLightObject_reverse,None,listitkLightObject)
listitkLightObject_swigregister = _ITKCommonBasePython.listitkLightObject_swigregister
listitkLightObject_swigregister(listitkLightObject)

class vectoritkDataObject(object):
    """Proxy of C++ std::vector<(itkDataObject_Pointer)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _ITKCommonBasePython.vectoritkDataObject_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _ITKCommonBasePython.vectoritkDataObject___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _ITKCommonBasePython.vectoritkDataObject___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _ITKCommonBasePython.vectoritkDataObject___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _ITKCommonBasePython.vectoritkDataObject_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectoritkDataObject"""
        return _ITKCommonBasePython.vectoritkDataObject___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectoritkDataObject v)"""
        return _ITKCommonBasePython.vectoritkDataObject___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _ITKCommonBasePython.vectoritkDataObject___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _ITKCommonBasePython.vectoritkDataObject___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectoritkDataObject
        __getitem__(self, difference_type i) -> value_type
        """
        return _ITKCommonBasePython.vectoritkDataObject___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectoritkDataObject v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _ITKCommonBasePython.vectoritkDataObject___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _ITKCommonBasePython.vectoritkDataObject_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _ITKCommonBasePython.vectoritkDataObject_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _ITKCommonBasePython.vectoritkDataObject_size(self)

    def clear(self):
        """clear(self)"""
        return _ITKCommonBasePython.vectoritkDataObject_clear(self)

    def swap(self, *args):
        """swap(self, vectoritkDataObject v)"""
        return _ITKCommonBasePython.vectoritkDataObject_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _ITKCommonBasePython.vectoritkDataObject_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _ITKCommonBasePython.vectoritkDataObject_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _ITKCommonBasePython.vectoritkDataObject_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _ITKCommonBasePython.vectoritkDataObject_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _ITKCommonBasePython.vectoritkDataObject_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _ITKCommonBasePython.vectoritkDataObject_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _ITKCommonBasePython.vectoritkDataObject_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectoritkDataObject
        __init__(self, vectoritkDataObject arg0) -> vectoritkDataObject
        __init__(self, size_type size) -> vectoritkDataObject
        __init__(self, size_type size, value_type value) -> vectoritkDataObject
        """
        _ITKCommonBasePython.vectoritkDataObject_swiginit(self,_ITKCommonBasePython.new_vectoritkDataObject(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _ITKCommonBasePython.vectoritkDataObject_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _ITKCommonBasePython.vectoritkDataObject_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _ITKCommonBasePython.vectoritkDataObject_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _ITKCommonBasePython.vectoritkDataObject_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _ITKCommonBasePython.vectoritkDataObject_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _ITKCommonBasePython.vectoritkDataObject_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _ITKCommonBasePython.vectoritkDataObject_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _ITKCommonBasePython.vectoritkDataObject_capacity(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_vectoritkDataObject
vectoritkDataObject.iterator = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_iterator,None,vectoritkDataObject)
vectoritkDataObject.__nonzero__ = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject___nonzero__,None,vectoritkDataObject)
vectoritkDataObject.__bool__ = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject___bool__,None,vectoritkDataObject)
vectoritkDataObject.__len__ = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject___len__,None,vectoritkDataObject)
vectoritkDataObject.pop = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_pop,None,vectoritkDataObject)
vectoritkDataObject.__getslice__ = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject___getslice__,None,vectoritkDataObject)
vectoritkDataObject.__setslice__ = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject___setslice__,None,vectoritkDataObject)
vectoritkDataObject.__delslice__ = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject___delslice__,None,vectoritkDataObject)
vectoritkDataObject.__delitem__ = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject___delitem__,None,vectoritkDataObject)
vectoritkDataObject.__getitem__ = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject___getitem__,None,vectoritkDataObject)
vectoritkDataObject.__setitem__ = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject___setitem__,None,vectoritkDataObject)
vectoritkDataObject.append = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_append,None,vectoritkDataObject)
vectoritkDataObject.empty = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_empty,None,vectoritkDataObject)
vectoritkDataObject.size = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_size,None,vectoritkDataObject)
vectoritkDataObject.clear = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_clear,None,vectoritkDataObject)
vectoritkDataObject.swap = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_swap,None,vectoritkDataObject)
vectoritkDataObject.get_allocator = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_get_allocator,None,vectoritkDataObject)
vectoritkDataObject.begin = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_begin,None,vectoritkDataObject)
vectoritkDataObject.end = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_end,None,vectoritkDataObject)
vectoritkDataObject.rbegin = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_rbegin,None,vectoritkDataObject)
vectoritkDataObject.rend = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_rend,None,vectoritkDataObject)
vectoritkDataObject.pop_back = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_pop_back,None,vectoritkDataObject)
vectoritkDataObject.erase = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_erase,None,vectoritkDataObject)
vectoritkDataObject.push_back = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_push_back,None,vectoritkDataObject)
vectoritkDataObject.front = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_front,None,vectoritkDataObject)
vectoritkDataObject.back = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_back,None,vectoritkDataObject)
vectoritkDataObject.assign = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_assign,None,vectoritkDataObject)
vectoritkDataObject.resize = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_resize,None,vectoritkDataObject)
vectoritkDataObject.insert = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_insert,None,vectoritkDataObject)
vectoritkDataObject.reserve = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_reserve,None,vectoritkDataObject)
vectoritkDataObject.capacity = new_instancemethod(_ITKCommonBasePython.vectoritkDataObject_capacity,None,vectoritkDataObject)
vectoritkDataObject_swigregister = _ITKCommonBasePython.vectoritkDataObject_swigregister
vectoritkDataObject_swigregister(vectoritkDataObject)

class listitkObjectFactoryBase(object):
    """Proxy of C++ std::list<(p.itkObjectFactoryBase)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _ITKCommonBasePython.listitkObjectFactoryBase___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _ITKCommonBasePython.listitkObjectFactoryBase___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _ITKCommonBasePython.listitkObjectFactoryBase___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> listitkObjectFactoryBase"""
        return _ITKCommonBasePython.listitkObjectFactoryBase___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, listitkObjectFactoryBase v)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _ITKCommonBasePython.listitkObjectFactoryBase___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> listitkObjectFactoryBase
        __getitem__(self, difference_type i) -> value_type
        """
        return _ITKCommonBasePython.listitkObjectFactoryBase___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, listitkObjectFactoryBase v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _ITKCommonBasePython.listitkObjectFactoryBase___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_size(self)

    def clear(self):
        """clear(self)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_clear(self)

    def swap(self, *args):
        """swap(self, listitkObjectFactoryBase v)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _ITKCommonBasePython.listitkObjectFactoryBase_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> listitkObjectFactoryBase
        __init__(self, listitkObjectFactoryBase arg0) -> listitkObjectFactoryBase
        __init__(self, size_type size) -> listitkObjectFactoryBase
        __init__(self, size_type size, value_type value) -> listitkObjectFactoryBase
        """
        _ITKCommonBasePython.listitkObjectFactoryBase_swiginit(self,_ITKCommonBasePython.new_listitkObjectFactoryBase(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _ITKCommonBasePython.listitkObjectFactoryBase_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _ITKCommonBasePython.listitkObjectFactoryBase_insert(self, *args)

    def pop_front(self):
        """pop_front(self)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_pop_front(self)

    def push_front(self, *args):
        """push_front(self, value_type x)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_push_front(self, *args)

    def remove(self, *args):
        """remove(self, value_type x)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_remove(self, *args)

    def unique(self):
        """unique(self)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_unique(self)

    def reverse(self):
        """reverse(self)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_reverse(self)

    def sort(self):
        """sort(self)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_sort(self)

    def merge(self, *args):
        """merge(self, listitkObjectFactoryBase x)"""
        return _ITKCommonBasePython.listitkObjectFactoryBase_merge(self, *args)

    __swig_destroy__ = _ITKCommonBasePython.delete_listitkObjectFactoryBase
listitkObjectFactoryBase.iterator = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_iterator,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.__nonzero__ = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase___nonzero__,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.__bool__ = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase___bool__,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.__len__ = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase___len__,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.pop = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_pop,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.__getslice__ = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase___getslice__,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.__setslice__ = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase___setslice__,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.__delslice__ = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase___delslice__,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.__delitem__ = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase___delitem__,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.__getitem__ = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase___getitem__,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.__setitem__ = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase___setitem__,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.append = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_append,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.empty = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_empty,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.size = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_size,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.clear = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_clear,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.swap = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_swap,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.get_allocator = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_get_allocator,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.begin = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_begin,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.end = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_end,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.rbegin = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_rbegin,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.rend = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_rend,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.pop_back = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_pop_back,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.erase = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_erase,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.push_back = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_push_back,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.front = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_front,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.back = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_back,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.assign = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_assign,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.resize = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_resize,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.insert = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_insert,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.pop_front = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_pop_front,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.push_front = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_push_front,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.remove = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_remove,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.unique = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_unique,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.reverse = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_reverse,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.sort = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_sort,None,listitkObjectFactoryBase)
listitkObjectFactoryBase.merge = new_instancemethod(_ITKCommonBasePython.listitkObjectFactoryBase_merge,None,listitkObjectFactoryBase)
listitkObjectFactoryBase_swigregister = _ITKCommonBasePython.listitkObjectFactoryBase_swigregister
listitkObjectFactoryBase_swigregister(listitkObjectFactoryBase)

class vectoritkMetaDataDictionary(object):
    """Proxy of C++ std::vector<(p.itkMetaDataDictionary)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectoritkMetaDataDictionary"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectoritkMetaDataDictionary v)"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _ITKCommonBasePython.vectoritkMetaDataDictionary___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectoritkMetaDataDictionary
        __getitem__(self, difference_type i) -> value_type
        """
        return _ITKCommonBasePython.vectoritkMetaDataDictionary___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectoritkMetaDataDictionary v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _ITKCommonBasePython.vectoritkMetaDataDictionary___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_size(self)

    def clear(self):
        """clear(self)"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_clear(self)

    def swap(self, *args):
        """swap(self, vectoritkMetaDataDictionary v)"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectoritkMetaDataDictionary
        __init__(self, vectoritkMetaDataDictionary arg0) -> vectoritkMetaDataDictionary
        __init__(self, size_type size) -> vectoritkMetaDataDictionary
        __init__(self, size_type size, value_type value) -> vectoritkMetaDataDictionary
        """
        _ITKCommonBasePython.vectoritkMetaDataDictionary_swiginit(self,_ITKCommonBasePython.new_vectoritkMetaDataDictionary(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _ITKCommonBasePython.vectoritkMetaDataDictionary_capacity(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_vectoritkMetaDataDictionary
vectoritkMetaDataDictionary.iterator = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_iterator,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.__nonzero__ = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary___nonzero__,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.__bool__ = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary___bool__,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.__len__ = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary___len__,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.pop = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_pop,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.__getslice__ = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary___getslice__,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.__setslice__ = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary___setslice__,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.__delslice__ = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary___delslice__,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.__delitem__ = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary___delitem__,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.__getitem__ = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary___getitem__,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.__setitem__ = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary___setitem__,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.append = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_append,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.empty = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_empty,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.size = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_size,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.clear = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_clear,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.swap = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_swap,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.get_allocator = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_get_allocator,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.begin = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_begin,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.end = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_end,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.rbegin = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_rbegin,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.rend = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_rend,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.pop_back = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_pop_back,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.erase = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_erase,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.push_back = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_push_back,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.front = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_front,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.back = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_back,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.assign = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_assign,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.resize = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_resize,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.insert = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_insert,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.reserve = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_reserve,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary.capacity = new_instancemethod(_ITKCommonBasePython.vectoritkMetaDataDictionary_capacity,None,vectoritkMetaDataDictionary)
vectoritkMetaDataDictionary_swigregister = _ITKCommonBasePython.vectoritkMetaDataDictionary_swigregister
vectoritkMetaDataDictionary_swigregister(vectoritkMetaDataDictionary)

class itkIndent(object):
    """Proxy of C++ itkIndent class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _ITKCommonBasePython.delete_itkIndent
    def New():
        """New() -> itkIndent"""
        return _ITKCommonBasePython.itkIndent_New()

    New = staticmethod(New)
    def __init__(self, *args): 
        """
        __init__(self, itkIndent arg0) -> itkIndent
        __init__(self, int ind = 0) -> itkIndent
        __init__(self) -> itkIndent
        """
        _ITKCommonBasePython.itkIndent_swiginit(self,_ITKCommonBasePython.new_itkIndent(*args))
    def GetNameOfClass():
        """GetNameOfClass() -> char"""
        return _ITKCommonBasePython.itkIndent_GetNameOfClass()

    GetNameOfClass = staticmethod(GetNameOfClass)
    def GetNextIndent(self):
        """GetNextIndent(self) -> itkIndent"""
        return _ITKCommonBasePython.itkIndent_GetNextIndent(self)

itkIndent.GetNextIndent = new_instancemethod(_ITKCommonBasePython.itkIndent_GetNextIndent,None,itkIndent)
itkIndent_swigregister = _ITKCommonBasePython.itkIndent_swigregister
itkIndent_swigregister(itkIndent)

def itkIndent_New():
  """itkIndent_New() -> itkIndent"""
  return _ITKCommonBasePython.itkIndent_New()

def itkIndent_GetNameOfClass():
  """itkIndent_GetNameOfClass() -> char"""
  return _ITKCommonBasePython.itkIndent_GetNameOfClass()

class itkLightObject(object):
    """Proxy of C++ itkLightObject class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _ITKCommonBasePython.itkLightObject___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CreateAnother(self):
        """CreateAnother(self)"""
        return _ITKCommonBasePython.itkLightObject_CreateAnother(self)

    def GetNameOfClass(self):
        """GetNameOfClass(self) -> char"""
        return _ITKCommonBasePython.itkLightObject_GetNameOfClass(self)

    def Print(self, *args):
        """
        Print(self, ostream os, itkIndent indent = 0)
        Print(self, ostream os)
        """
        return _ITKCommonBasePython.itkLightObject_Print(self, *args)

    def BreakOnError():
        """BreakOnError()"""
        return _ITKCommonBasePython.itkLightObject_BreakOnError()

    BreakOnError = staticmethod(BreakOnError)
    def GetReferenceCount(self):
        """GetReferenceCount(self) -> int"""
        return _ITKCommonBasePython.itkLightObject_GetReferenceCount(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkLightObject
    def cast(*args):
        """cast(itkLightObject obj) -> itkLightObject"""
        return _ITKCommonBasePython.itkLightObject_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkLightObject"""
        return _ITKCommonBasePython.itkLightObject_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkLightObject
        
        Create a new object of the class itkLightObject and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkLightObject.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkLightObject.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLightObject.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

    def __str__(self):
        """__str__(self) -> string"""
        return _ITKCommonBasePython.itkLightObject___str__(self)

    def __eq__(self, *args):
        """__eq__(self, itkLightObject obj) -> bool"""
        return _ITKCommonBasePython.itkLightObject___eq__(self, *args)

itkLightObject.CreateAnother = new_instancemethod(_ITKCommonBasePython.itkLightObject_CreateAnother,None,itkLightObject)
itkLightObject.GetNameOfClass = new_instancemethod(_ITKCommonBasePython.itkLightObject_GetNameOfClass,None,itkLightObject)
itkLightObject.Print = new_instancemethod(_ITKCommonBasePython.itkLightObject_Print,None,itkLightObject)
itkLightObject.GetReferenceCount = new_instancemethod(_ITKCommonBasePython.itkLightObject_GetReferenceCount,None,itkLightObject)
itkLightObject.GetPointer = new_instancemethod(_ITKCommonBasePython.itkLightObject_GetPointer,None,itkLightObject)
itkLightObject.__str__ = new_instancemethod(_ITKCommonBasePython.itkLightObject___str__,None,itkLightObject)
itkLightObject.__eq__ = new_instancemethod(_ITKCommonBasePython.itkLightObject___eq__,None,itkLightObject)
itkLightObject_swigregister = _ITKCommonBasePython.itkLightObject_swigregister
itkLightObject_swigregister(itkLightObject)

def itkLightObject___New_orig__():
  """itkLightObject___New_orig__()"""
  return _ITKCommonBasePython.itkLightObject___New_orig__()

def itkLightObject_BreakOnError():
  """itkLightObject_BreakOnError()"""
  return _ITKCommonBasePython.itkLightObject_BreakOnError()

def itkLightObject_cast(*args):
  """itkLightObject_cast(itkLightObject obj) -> itkLightObject"""
  return _ITKCommonBasePython.itkLightObject_cast(*args)

class itkMetaDataDictionary(object):
    """Proxy of C++ itkMetaDataDictionary class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def Print(self, *args):
        """Print(self, ostream os)"""
        return _ITKCommonBasePython.itkMetaDataDictionary_Print(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> itkMetaDataDictionary
        __init__(self, itkMetaDataDictionary arg0) -> itkMetaDataDictionary
        """
        _ITKCommonBasePython.itkMetaDataDictionary_swiginit(self,_ITKCommonBasePython.new_itkMetaDataDictionary(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkMetaDataDictionary
    def GetKeys(self):
        """GetKeys(self) -> vectorstring"""
        return _ITKCommonBasePython.itkMetaDataDictionary_GetKeys(self)

    def HasKey(self, *args):
        """HasKey(self, string arg0) -> bool"""
        return _ITKCommonBasePython.itkMetaDataDictionary_HasKey(self, *args)

itkMetaDataDictionary.Print = new_instancemethod(_ITKCommonBasePython.itkMetaDataDictionary_Print,None,itkMetaDataDictionary)
itkMetaDataDictionary.GetKeys = new_instancemethod(_ITKCommonBasePython.itkMetaDataDictionary_GetKeys,None,itkMetaDataDictionary)
itkMetaDataDictionary.HasKey = new_instancemethod(_ITKCommonBasePython.itkMetaDataDictionary_HasKey,None,itkMetaDataDictionary)
itkMetaDataDictionary_swigregister = _ITKCommonBasePython.itkMetaDataDictionary_swigregister
itkMetaDataDictionary_swigregister(itkMetaDataDictionary)

class itkMetaDataObjectBase(itkLightObject):
    """Proxy of C++ itkMetaDataObjectBase class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def GetMetaDataObjectTypeName(self):
        """GetMetaDataObjectTypeName(self) -> char"""
        return _ITKCommonBasePython.itkMetaDataObjectBase_GetMetaDataObjectTypeName(self)

    def GetMetaDataObjectTypeInfo(self):
        """GetMetaDataObjectTypeInfo(self) -> std::type_info"""
        return _ITKCommonBasePython.itkMetaDataObjectBase_GetMetaDataObjectTypeInfo(self)

    def Print(self, *args):
        """Print(self, ostream os)"""
        return _ITKCommonBasePython.itkMetaDataObjectBase_Print(self, *args)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkMetaDataObjectBase
    def cast(*args):
        """cast(itkLightObject obj) -> itkMetaDataObjectBase"""
        return _ITKCommonBasePython.itkMetaDataObjectBase_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMetaDataObjectBase"""
        return _ITKCommonBasePython.itkMetaDataObjectBase_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMetaDataObjectBase
        
        Create a new object of the class itkMetaDataObjectBase and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMetaDataObjectBase.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMetaDataObjectBase.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMetaDataObjectBase.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMetaDataObjectBase.GetMetaDataObjectTypeName = new_instancemethod(_ITKCommonBasePython.itkMetaDataObjectBase_GetMetaDataObjectTypeName,None,itkMetaDataObjectBase)
itkMetaDataObjectBase.GetMetaDataObjectTypeInfo = new_instancemethod(_ITKCommonBasePython.itkMetaDataObjectBase_GetMetaDataObjectTypeInfo,None,itkMetaDataObjectBase)
itkMetaDataObjectBase.Print = new_instancemethod(_ITKCommonBasePython.itkMetaDataObjectBase_Print,None,itkMetaDataObjectBase)
itkMetaDataObjectBase.GetPointer = new_instancemethod(_ITKCommonBasePython.itkMetaDataObjectBase_GetPointer,None,itkMetaDataObjectBase)
itkMetaDataObjectBase_swigregister = _ITKCommonBasePython.itkMetaDataObjectBase_swigregister
itkMetaDataObjectBase_swigregister(itkMetaDataObjectBase)

def itkMetaDataObjectBase_cast(*args):
  """itkMetaDataObjectBase_cast(itkLightObject obj) -> itkMetaDataObjectBase"""
  return _ITKCommonBasePython.itkMetaDataObjectBase_cast(*args)

class itkObject(itkLightObject):
    """Proxy of C++ itkObject class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _ITKCommonBasePython.itkObject___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def DebugOn(self):
        """DebugOn(self)"""
        return _ITKCommonBasePython.itkObject_DebugOn(self)

    def DebugOff(self):
        """DebugOff(self)"""
        return _ITKCommonBasePython.itkObject_DebugOff(self)

    def GetDebug(self):
        """GetDebug(self) -> bool"""
        return _ITKCommonBasePython.itkObject_GetDebug(self)

    def SetDebug(self, *args):
        """SetDebug(self, bool debugFlag)"""
        return _ITKCommonBasePython.itkObject_SetDebug(self, *args)

    def GetMTime(self):
        """GetMTime(self) -> unsigned long"""
        return _ITKCommonBasePython.itkObject_GetMTime(self)

    def Modified(self):
        """Modified(self)"""
        return _ITKCommonBasePython.itkObject_Modified(self)

    def SetGlobalWarningDisplay(*args):
        """SetGlobalWarningDisplay(bool flag)"""
        return _ITKCommonBasePython.itkObject_SetGlobalWarningDisplay(*args)

    SetGlobalWarningDisplay = staticmethod(SetGlobalWarningDisplay)
    def GetGlobalWarningDisplay():
        """GetGlobalWarningDisplay() -> bool"""
        return _ITKCommonBasePython.itkObject_GetGlobalWarningDisplay()

    GetGlobalWarningDisplay = staticmethod(GetGlobalWarningDisplay)
    def GlobalWarningDisplayOn():
        """GlobalWarningDisplayOn()"""
        return _ITKCommonBasePython.itkObject_GlobalWarningDisplayOn()

    GlobalWarningDisplayOn = staticmethod(GlobalWarningDisplayOn)
    def GlobalWarningDisplayOff():
        """GlobalWarningDisplayOff()"""
        return _ITKCommonBasePython.itkObject_GlobalWarningDisplayOff()

    GlobalWarningDisplayOff = staticmethod(GlobalWarningDisplayOff)
    def AddObserver(self, *args):
        """
        AddObserver(self, itkEventObject event, itkCommand arg1) -> unsigned long
        AddObserver(self, itkEventObject event, itkCommand arg1) -> unsigned long
        """
        import itk
        # depending on swig version, self is included in args or not, so we have to try both cases
        if len(args) == 3 and not issubclass(args[2].__class__, itk.Command) and callable(args[2]):
          # wrap the callable python object in a PyCommand
          args = list(args)
          pycommand = itk.PyCommand.New()
          pycommand.SetCommandCallable( args[2] )
          args[2] = pycommand
          args = tuple(args)
        elif len(args) == 2 and not issubclass(args[1].__class__, itk.Command) and callable(args[1]):
          # wrap the callable python object in a PyCommand
          args = list(args)
          pycommand = itk.PyCommand.New()
          pycommand.SetCommandCallable( args[1] )
          args[1] = pycommand
          args = tuple(args)


        return _ITKCommonBasePython.itkObject_AddObserver(self, *args)

    def GetCommand(self, *args):
        """GetCommand(self, unsigned long tag) -> itkCommand"""
        return _ITKCommonBasePython.itkObject_GetCommand(self, *args)

    def InvokeEvent(self, *args):
        """
        InvokeEvent(self, itkEventObject arg0)
        InvokeEvent(self, itkEventObject arg0)
        """
        return _ITKCommonBasePython.itkObject_InvokeEvent(self, *args)

    def RemoveObserver(self, *args):
        """RemoveObserver(self, unsigned long tag)"""
        return _ITKCommonBasePython.itkObject_RemoveObserver(self, *args)

    def RemoveAllObservers(self):
        """RemoveAllObservers(self)"""
        return _ITKCommonBasePython.itkObject_RemoveAllObservers(self)

    def HasObserver(self, *args):
        """HasObserver(self, itkEventObject event) -> bool"""
        return _ITKCommonBasePython.itkObject_HasObserver(self, *args)

    def GetMetaDataDictionary(self, *args):
        """
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        GetMetaDataDictionary(self) -> itkMetaDataDictionary
        """
        return _ITKCommonBasePython.itkObject_GetMetaDataDictionary(self, *args)

    def SetMetaDataDictionary(self, *args):
        """SetMetaDataDictionary(self, itkMetaDataDictionary rhs)"""
        return _ITKCommonBasePython.itkObject_SetMetaDataDictionary(self, *args)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkObject
    def cast(*args):
        """cast(itkLightObject obj) -> itkObject"""
        return _ITKCommonBasePython.itkObject_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkObject"""
        return _ITKCommonBasePython.itkObject_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkObject
        
        Create a new object of the class itkObject and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkObject.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkObject.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkObject.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkObject.DebugOn = new_instancemethod(_ITKCommonBasePython.itkObject_DebugOn,None,itkObject)
itkObject.DebugOff = new_instancemethod(_ITKCommonBasePython.itkObject_DebugOff,None,itkObject)
itkObject.GetDebug = new_instancemethod(_ITKCommonBasePython.itkObject_GetDebug,None,itkObject)
itkObject.SetDebug = new_instancemethod(_ITKCommonBasePython.itkObject_SetDebug,None,itkObject)
itkObject.GetMTime = new_instancemethod(_ITKCommonBasePython.itkObject_GetMTime,None,itkObject)
itkObject.Modified = new_instancemethod(_ITKCommonBasePython.itkObject_Modified,None,itkObject)
itkObject.GetCommand = new_instancemethod(_ITKCommonBasePython.itkObject_GetCommand,None,itkObject)
itkObject.InvokeEvent = new_instancemethod(_ITKCommonBasePython.itkObject_InvokeEvent,None,itkObject)
itkObject.RemoveObserver = new_instancemethod(_ITKCommonBasePython.itkObject_RemoveObserver,None,itkObject)
itkObject.RemoveAllObservers = new_instancemethod(_ITKCommonBasePython.itkObject_RemoveAllObservers,None,itkObject)
itkObject.HasObserver = new_instancemethod(_ITKCommonBasePython.itkObject_HasObserver,None,itkObject)
itkObject.GetMetaDataDictionary = new_instancemethod(_ITKCommonBasePython.itkObject_GetMetaDataDictionary,None,itkObject)
itkObject.SetMetaDataDictionary = new_instancemethod(_ITKCommonBasePython.itkObject_SetMetaDataDictionary,None,itkObject)
itkObject.GetPointer = new_instancemethod(_ITKCommonBasePython.itkObject_GetPointer,None,itkObject)
itkObject_swigregister = _ITKCommonBasePython.itkObject_swigregister
itkObject_swigregister(itkObject)

def itkObject___New_orig__():
  """itkObject___New_orig__()"""
  return _ITKCommonBasePython.itkObject___New_orig__()

def itkObject_SetGlobalWarningDisplay(*args):
  """itkObject_SetGlobalWarningDisplay(bool flag)"""
  return _ITKCommonBasePython.itkObject_SetGlobalWarningDisplay(*args)

def itkObject_GetGlobalWarningDisplay():
  """itkObject_GetGlobalWarningDisplay() -> bool"""
  return _ITKCommonBasePython.itkObject_GetGlobalWarningDisplay()

def itkObject_GlobalWarningDisplayOn():
  """itkObject_GlobalWarningDisplayOn()"""
  return _ITKCommonBasePython.itkObject_GlobalWarningDisplayOn()

def itkObject_GlobalWarningDisplayOff():
  """itkObject_GlobalWarningDisplayOff()"""
  return _ITKCommonBasePython.itkObject_GlobalWarningDisplayOff()

def itkObject_cast(*args):
  """itkObject_cast(itkLightObject obj) -> itkObject"""
  return _ITKCommonBasePython.itkObject_cast(*args)

class itkObjectFactoryBase(itkObject):
    """Proxy of C++ itkObjectFactoryBase class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateInstance(*args):
        """CreateInstance(char itkclassname)"""
        return _ITKCommonBasePython.itkObjectFactoryBase_CreateInstance(*args)

    CreateInstance = staticmethod(CreateInstance)
    def CreateAllInstance(*args):
        """CreateAllInstance(char itkclassname) -> listitkLightObject"""
        return _ITKCommonBasePython.itkObjectFactoryBase_CreateAllInstance(*args)

    CreateAllInstance = staticmethod(CreateAllInstance)
    def ReHash():
        """ReHash()"""
        return _ITKCommonBasePython.itkObjectFactoryBase_ReHash()

    ReHash = staticmethod(ReHash)
    def RegisterFactory(*args):
        """RegisterFactory(itkObjectFactoryBase arg0)"""
        return _ITKCommonBasePython.itkObjectFactoryBase_RegisterFactory(*args)

    RegisterFactory = staticmethod(RegisterFactory)
    def UnRegisterFactory(*args):
        """UnRegisterFactory(itkObjectFactoryBase arg0)"""
        return _ITKCommonBasePython.itkObjectFactoryBase_UnRegisterFactory(*args)

    UnRegisterFactory = staticmethod(UnRegisterFactory)
    def UnRegisterAllFactories():
        """UnRegisterAllFactories()"""
        return _ITKCommonBasePython.itkObjectFactoryBase_UnRegisterAllFactories()

    UnRegisterAllFactories = staticmethod(UnRegisterAllFactories)
    def GetRegisteredFactories():
        """GetRegisteredFactories() -> listitkObjectFactoryBase"""
        return _ITKCommonBasePython.itkObjectFactoryBase_GetRegisteredFactories()

    GetRegisteredFactories = staticmethod(GetRegisteredFactories)
    def GetITKSourceVersion(self):
        """GetITKSourceVersion(self) -> char"""
        return _ITKCommonBasePython.itkObjectFactoryBase_GetITKSourceVersion(self)

    def GetDescription(self):
        """GetDescription(self) -> char"""
        return _ITKCommonBasePython.itkObjectFactoryBase_GetDescription(self)

    def GetClassOverrideNames(self):
        """GetClassOverrideNames(self) -> liststring"""
        return _ITKCommonBasePython.itkObjectFactoryBase_GetClassOverrideNames(self)

    def GetClassOverrideWithNames(self):
        """GetClassOverrideWithNames(self) -> liststring"""
        return _ITKCommonBasePython.itkObjectFactoryBase_GetClassOverrideWithNames(self)

    def GetClassOverrideDescriptions(self):
        """GetClassOverrideDescriptions(self) -> liststring"""
        return _ITKCommonBasePython.itkObjectFactoryBase_GetClassOverrideDescriptions(self)

    def GetEnableFlags(self):
        """GetEnableFlags(self) -> std::list<(bool,std::allocator<(bool)>)>"""
        return _ITKCommonBasePython.itkObjectFactoryBase_GetEnableFlags(self)

    def SetEnableFlag(self, *args):
        """SetEnableFlag(self, bool flag, char className, char subclassName)"""
        return _ITKCommonBasePython.itkObjectFactoryBase_SetEnableFlag(self, *args)

    def GetEnableFlag(self, *args):
        """GetEnableFlag(self, char className, char subclassName) -> bool"""
        return _ITKCommonBasePython.itkObjectFactoryBase_GetEnableFlag(self, *args)

    def Disable(self, *args):
        """Disable(self, char className)"""
        return _ITKCommonBasePython.itkObjectFactoryBase_Disable(self, *args)

    def GetLibraryPath(self):
        """GetLibraryPath(self) -> char"""
        return _ITKCommonBasePython.itkObjectFactoryBase_GetLibraryPath(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkObjectFactoryBase
    def cast(*args):
        """cast(itkLightObject obj) -> itkObjectFactoryBase"""
        return _ITKCommonBasePython.itkObjectFactoryBase_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkObjectFactoryBase"""
        return _ITKCommonBasePython.itkObjectFactoryBase_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkObjectFactoryBase
        
        Create a new object of the class itkObjectFactoryBase and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkObjectFactoryBase.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkObjectFactoryBase.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkObjectFactoryBase.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkObjectFactoryBase.GetITKSourceVersion = new_instancemethod(_ITKCommonBasePython.itkObjectFactoryBase_GetITKSourceVersion,None,itkObjectFactoryBase)
itkObjectFactoryBase.GetDescription = new_instancemethod(_ITKCommonBasePython.itkObjectFactoryBase_GetDescription,None,itkObjectFactoryBase)
itkObjectFactoryBase.GetClassOverrideNames = new_instancemethod(_ITKCommonBasePython.itkObjectFactoryBase_GetClassOverrideNames,None,itkObjectFactoryBase)
itkObjectFactoryBase.GetClassOverrideWithNames = new_instancemethod(_ITKCommonBasePython.itkObjectFactoryBase_GetClassOverrideWithNames,None,itkObjectFactoryBase)
itkObjectFactoryBase.GetClassOverrideDescriptions = new_instancemethod(_ITKCommonBasePython.itkObjectFactoryBase_GetClassOverrideDescriptions,None,itkObjectFactoryBase)
itkObjectFactoryBase.GetEnableFlags = new_instancemethod(_ITKCommonBasePython.itkObjectFactoryBase_GetEnableFlags,None,itkObjectFactoryBase)
itkObjectFactoryBase.SetEnableFlag = new_instancemethod(_ITKCommonBasePython.itkObjectFactoryBase_SetEnableFlag,None,itkObjectFactoryBase)
itkObjectFactoryBase.GetEnableFlag = new_instancemethod(_ITKCommonBasePython.itkObjectFactoryBase_GetEnableFlag,None,itkObjectFactoryBase)
itkObjectFactoryBase.Disable = new_instancemethod(_ITKCommonBasePython.itkObjectFactoryBase_Disable,None,itkObjectFactoryBase)
itkObjectFactoryBase.GetLibraryPath = new_instancemethod(_ITKCommonBasePython.itkObjectFactoryBase_GetLibraryPath,None,itkObjectFactoryBase)
itkObjectFactoryBase.GetPointer = new_instancemethod(_ITKCommonBasePython.itkObjectFactoryBase_GetPointer,None,itkObjectFactoryBase)
itkObjectFactoryBase_swigregister = _ITKCommonBasePython.itkObjectFactoryBase_swigregister
itkObjectFactoryBase_swigregister(itkObjectFactoryBase)

def itkObjectFactoryBase_CreateInstance(*args):
  """itkObjectFactoryBase_CreateInstance(char itkclassname)"""
  return _ITKCommonBasePython.itkObjectFactoryBase_CreateInstance(*args)

def itkObjectFactoryBase_CreateAllInstance(*args):
  """itkObjectFactoryBase_CreateAllInstance(char itkclassname) -> listitkLightObject"""
  return _ITKCommonBasePython.itkObjectFactoryBase_CreateAllInstance(*args)

def itkObjectFactoryBase_ReHash():
  """itkObjectFactoryBase_ReHash()"""
  return _ITKCommonBasePython.itkObjectFactoryBase_ReHash()

def itkObjectFactoryBase_RegisterFactory(*args):
  """itkObjectFactoryBase_RegisterFactory(itkObjectFactoryBase arg0)"""
  return _ITKCommonBasePython.itkObjectFactoryBase_RegisterFactory(*args)

def itkObjectFactoryBase_UnRegisterFactory(*args):
  """itkObjectFactoryBase_UnRegisterFactory(itkObjectFactoryBase arg0)"""
  return _ITKCommonBasePython.itkObjectFactoryBase_UnRegisterFactory(*args)

def itkObjectFactoryBase_UnRegisterAllFactories():
  """itkObjectFactoryBase_UnRegisterAllFactories()"""
  return _ITKCommonBasePython.itkObjectFactoryBase_UnRegisterAllFactories()

def itkObjectFactoryBase_GetRegisteredFactories():
  """itkObjectFactoryBase_GetRegisteredFactories() -> listitkObjectFactoryBase"""
  return _ITKCommonBasePython.itkObjectFactoryBase_GetRegisteredFactories()

def itkObjectFactoryBase_cast(*args):
  """itkObjectFactoryBase_cast(itkLightObject obj) -> itkObjectFactoryBase"""
  return _ITKCommonBasePython.itkObjectFactoryBase_cast(*args)

class itkOutputWindow(itkObject):
    """Proxy of C++ itkOutputWindow class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _ITKCommonBasePython.itkOutputWindow___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetInstance():
        """GetInstance()"""
        return _ITKCommonBasePython.itkOutputWindow_GetInstance()

    GetInstance = staticmethod(GetInstance)
    def SetInstance(*args):
        """SetInstance(itkOutputWindow instance)"""
        return _ITKCommonBasePython.itkOutputWindow_SetInstance(*args)

    SetInstance = staticmethod(SetInstance)
    def DisplayText(self, *args):
        """DisplayText(self, char arg0)"""
        return _ITKCommonBasePython.itkOutputWindow_DisplayText(self, *args)

    def DisplayErrorText(self, *args):
        """DisplayErrorText(self, char t)"""
        return _ITKCommonBasePython.itkOutputWindow_DisplayErrorText(self, *args)

    def DisplayWarningText(self, *args):
        """DisplayWarningText(self, char t)"""
        return _ITKCommonBasePython.itkOutputWindow_DisplayWarningText(self, *args)

    def DisplayGenericOutputText(self, *args):
        """DisplayGenericOutputText(self, char t)"""
        return _ITKCommonBasePython.itkOutputWindow_DisplayGenericOutputText(self, *args)

    def DisplayDebugText(self, *args):
        """DisplayDebugText(self, char t)"""
        return _ITKCommonBasePython.itkOutputWindow_DisplayDebugText(self, *args)

    def SetPromptUser(self, *args):
        """SetPromptUser(self, bool _arg)"""
        return _ITKCommonBasePython.itkOutputWindow_SetPromptUser(self, *args)

    def GetPromptUser(self):
        """GetPromptUser(self) -> bool"""
        return _ITKCommonBasePython.itkOutputWindow_GetPromptUser(self)

    def PromptUserOn(self):
        """PromptUserOn(self)"""
        return _ITKCommonBasePython.itkOutputWindow_PromptUserOn(self)

    def PromptUserOff(self):
        """PromptUserOff(self)"""
        return _ITKCommonBasePython.itkOutputWindow_PromptUserOff(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkOutputWindow
    def cast(*args):
        """cast(itkLightObject obj) -> itkOutputWindow"""
        return _ITKCommonBasePython.itkOutputWindow_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkOutputWindow"""
        return _ITKCommonBasePython.itkOutputWindow_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkOutputWindow
        
        Create a new object of the class itkOutputWindow and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkOutputWindow.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkOutputWindow.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkOutputWindow.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkOutputWindow.DisplayText = new_instancemethod(_ITKCommonBasePython.itkOutputWindow_DisplayText,None,itkOutputWindow)
itkOutputWindow.DisplayErrorText = new_instancemethod(_ITKCommonBasePython.itkOutputWindow_DisplayErrorText,None,itkOutputWindow)
itkOutputWindow.DisplayWarningText = new_instancemethod(_ITKCommonBasePython.itkOutputWindow_DisplayWarningText,None,itkOutputWindow)
itkOutputWindow.DisplayGenericOutputText = new_instancemethod(_ITKCommonBasePython.itkOutputWindow_DisplayGenericOutputText,None,itkOutputWindow)
itkOutputWindow.DisplayDebugText = new_instancemethod(_ITKCommonBasePython.itkOutputWindow_DisplayDebugText,None,itkOutputWindow)
itkOutputWindow.SetPromptUser = new_instancemethod(_ITKCommonBasePython.itkOutputWindow_SetPromptUser,None,itkOutputWindow)
itkOutputWindow.GetPromptUser = new_instancemethod(_ITKCommonBasePython.itkOutputWindow_GetPromptUser,None,itkOutputWindow)
itkOutputWindow.PromptUserOn = new_instancemethod(_ITKCommonBasePython.itkOutputWindow_PromptUserOn,None,itkOutputWindow)
itkOutputWindow.PromptUserOff = new_instancemethod(_ITKCommonBasePython.itkOutputWindow_PromptUserOff,None,itkOutputWindow)
itkOutputWindow.GetPointer = new_instancemethod(_ITKCommonBasePython.itkOutputWindow_GetPointer,None,itkOutputWindow)
itkOutputWindow_swigregister = _ITKCommonBasePython.itkOutputWindow_swigregister
itkOutputWindow_swigregister(itkOutputWindow)

def itkOutputWindow___New_orig__():
  """itkOutputWindow___New_orig__()"""
  return _ITKCommonBasePython.itkOutputWindow___New_orig__()

def itkOutputWindow_GetInstance():
  """itkOutputWindow_GetInstance()"""
  return _ITKCommonBasePython.itkOutputWindow_GetInstance()

def itkOutputWindow_SetInstance(*args):
  """itkOutputWindow_SetInstance(itkOutputWindow instance)"""
  return _ITKCommonBasePython.itkOutputWindow_SetInstance(*args)

def itkOutputWindow_cast(*args):
  """itkOutputWindow_cast(itkLightObject obj) -> itkOutputWindow"""
  return _ITKCommonBasePython.itkOutputWindow_cast(*args)

class itkProcessObject(itkObject):
    """Proxy of C++ itkProcessObject class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def GetInputs(self):
        """GetInputs(self) -> vectoritkDataObject"""
        return _ITKCommonBasePython.itkProcessObject_GetInputs(self)

    def GetNumberOfInputs(self):
        """GetNumberOfInputs(self) -> size_t"""
        return _ITKCommonBasePython.itkProcessObject_GetNumberOfInputs(self)

    def GetNumberOfValidRequiredInputs(self):
        """GetNumberOfValidRequiredInputs(self) -> size_t"""
        return _ITKCommonBasePython.itkProcessObject_GetNumberOfValidRequiredInputs(self)

    def GetOutputs(self):
        """GetOutputs(self) -> vectoritkDataObject"""
        return _ITKCommonBasePython.itkProcessObject_GetOutputs(self)

    def GetNumberOfOutputs(self):
        """GetNumberOfOutputs(self) -> size_t"""
        return _ITKCommonBasePython.itkProcessObject_GetNumberOfOutputs(self)

    def SetAbortGenerateData(self, *args):
        """SetAbortGenerateData(self, bool _arg)"""
        return _ITKCommonBasePython.itkProcessObject_SetAbortGenerateData(self, *args)

    def GetAbortGenerateData(self):
        """GetAbortGenerateData(self) -> bool"""
        return _ITKCommonBasePython.itkProcessObject_GetAbortGenerateData(self)

    def AbortGenerateDataOn(self):
        """AbortGenerateDataOn(self)"""
        return _ITKCommonBasePython.itkProcessObject_AbortGenerateDataOn(self)

    def AbortGenerateDataOff(self):
        """AbortGenerateDataOff(self)"""
        return _ITKCommonBasePython.itkProcessObject_AbortGenerateDataOff(self)

    def SetProgress(self, *args):
        """SetProgress(self, float _arg)"""
        return _ITKCommonBasePython.itkProcessObject_SetProgress(self, *args)

    def GetProgress(self):
        """GetProgress(self) -> float"""
        return _ITKCommonBasePython.itkProcessObject_GetProgress(self)

    def UpdateProgress(self, *args):
        """UpdateProgress(self, float amount)"""
        return _ITKCommonBasePython.itkProcessObject_UpdateProgress(self, *args)

    def Update(self):
        """Update(self)"""
        return _ITKCommonBasePython.itkProcessObject_Update(self)

    def UpdateLargestPossibleRegion(self):
        """UpdateLargestPossibleRegion(self)"""
        return _ITKCommonBasePython.itkProcessObject_UpdateLargestPossibleRegion(self)

    def UpdateOutputInformation(self):
        """UpdateOutputInformation(self)"""
        return _ITKCommonBasePython.itkProcessObject_UpdateOutputInformation(self)

    def PropagateRequestedRegion(self, *args):
        """PropagateRequestedRegion(self, itkDataObject output)"""
        return _ITKCommonBasePython.itkProcessObject_PropagateRequestedRegion(self, *args)

    def UpdateOutputData(self, *args):
        """UpdateOutputData(self, itkDataObject output)"""
        return _ITKCommonBasePython.itkProcessObject_UpdateOutputData(self, *args)

    def EnlargeOutputRequestedRegion(self, *args):
        """EnlargeOutputRequestedRegion(self, itkDataObject arg0)"""
        return _ITKCommonBasePython.itkProcessObject_EnlargeOutputRequestedRegion(self, *args)

    def ResetPipeline(self):
        """ResetPipeline(self)"""
        return _ITKCommonBasePython.itkProcessObject_ResetPipeline(self)

    def MakeOutput(self, *args):
        """MakeOutput(self, unsigned int idx)"""
        return _ITKCommonBasePython.itkProcessObject_MakeOutput(self, *args)

    def SetReleaseDataFlag(self, *args):
        """SetReleaseDataFlag(self, bool flag)"""
        return _ITKCommonBasePython.itkProcessObject_SetReleaseDataFlag(self, *args)

    def GetReleaseDataFlag(self):
        """GetReleaseDataFlag(self) -> bool"""
        return _ITKCommonBasePython.itkProcessObject_GetReleaseDataFlag(self)

    def ReleaseDataFlagOn(self):
        """ReleaseDataFlagOn(self)"""
        return _ITKCommonBasePython.itkProcessObject_ReleaseDataFlagOn(self)

    def ReleaseDataFlagOff(self):
        """ReleaseDataFlagOff(self)"""
        return _ITKCommonBasePython.itkProcessObject_ReleaseDataFlagOff(self)

    def SetReleaseDataBeforeUpdateFlag(self, *args):
        """SetReleaseDataBeforeUpdateFlag(self, bool _arg)"""
        return _ITKCommonBasePython.itkProcessObject_SetReleaseDataBeforeUpdateFlag(self, *args)

    def GetReleaseDataBeforeUpdateFlag(self):
        """GetReleaseDataBeforeUpdateFlag(self) -> bool"""
        return _ITKCommonBasePython.itkProcessObject_GetReleaseDataBeforeUpdateFlag(self)

    def ReleaseDataBeforeUpdateFlagOn(self):
        """ReleaseDataBeforeUpdateFlagOn(self)"""
        return _ITKCommonBasePython.itkProcessObject_ReleaseDataBeforeUpdateFlagOn(self)

    def ReleaseDataBeforeUpdateFlagOff(self):
        """ReleaseDataBeforeUpdateFlagOff(self)"""
        return _ITKCommonBasePython.itkProcessObject_ReleaseDataBeforeUpdateFlagOff(self)

    def SetNumberOfThreads(self, *args):
        """SetNumberOfThreads(self, int _arg)"""
        return _ITKCommonBasePython.itkProcessObject_SetNumberOfThreads(self, *args)

    def GetNumberOfThreads(self):
        """GetNumberOfThreads(self) -> int"""
        return _ITKCommonBasePython.itkProcessObject_GetNumberOfThreads(self)

    def GetMultiThreader(self):
        """GetMultiThreader(self) -> itkMultiThreader"""
        return _ITKCommonBasePython.itkProcessObject_GetMultiThreader(self)

    def PrepareOutputs(self):
        """PrepareOutputs(self)"""
        return _ITKCommonBasePython.itkProcessObject_PrepareOutputs(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkProcessObject
    def cast(*args):
        """cast(itkLightObject obj) -> itkProcessObject"""
        return _ITKCommonBasePython.itkProcessObject_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkProcessObject"""
        return _ITKCommonBasePython.itkProcessObject_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkProcessObject
        
        Create a new object of the class itkProcessObject and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkProcessObject.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkProcessObject.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkProcessObject.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

    def __len__(self):
        """Returns the number of outputs of that object.
        """
        return self.GetNumberOfOutputs()
      
    def __getitem__(self, item):
        """Returns the outputs of that object.
        
        The outputs are casted to their real type.
        Several outputs may be returned by using the slice notation.
        """
        import itk
        outputs = self.GetOutputs()
        if isinstance(item, slice):
            indices = item.indices(len(self))
            return [itk.down_cast(outputs[i]) for i in range(*indices)]
        else:
            return itk.down_cast(outputs[item])
      
    def __call__(self, *args, **kargs):
        """Change the inputs and attributes of the object and update it.
        
        The syntax is the same as the one used in New().
        UpdateLargestPossibleRegion() is ran once the input are changed, and
        the current object is returned, to make is easier to get one of the
        outputs. Something like 'filter(newInput, Threshold=10)[0]' would
        return the first output of the filter up to date.
        """
        import itk
        itk.set_inputs( self, args, kargs )
        self.UpdateLargestPossibleRegion()
        return self


itkProcessObject.GetInputs = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetInputs,None,itkProcessObject)
itkProcessObject.GetNumberOfInputs = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetNumberOfInputs,None,itkProcessObject)
itkProcessObject.GetNumberOfValidRequiredInputs = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetNumberOfValidRequiredInputs,None,itkProcessObject)
itkProcessObject.GetOutputs = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetOutputs,None,itkProcessObject)
itkProcessObject.GetNumberOfOutputs = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetNumberOfOutputs,None,itkProcessObject)
itkProcessObject.SetAbortGenerateData = new_instancemethod(_ITKCommonBasePython.itkProcessObject_SetAbortGenerateData,None,itkProcessObject)
itkProcessObject.GetAbortGenerateData = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetAbortGenerateData,None,itkProcessObject)
itkProcessObject.AbortGenerateDataOn = new_instancemethod(_ITKCommonBasePython.itkProcessObject_AbortGenerateDataOn,None,itkProcessObject)
itkProcessObject.AbortGenerateDataOff = new_instancemethod(_ITKCommonBasePython.itkProcessObject_AbortGenerateDataOff,None,itkProcessObject)
itkProcessObject.SetProgress = new_instancemethod(_ITKCommonBasePython.itkProcessObject_SetProgress,None,itkProcessObject)
itkProcessObject.GetProgress = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetProgress,None,itkProcessObject)
itkProcessObject.UpdateProgress = new_instancemethod(_ITKCommonBasePython.itkProcessObject_UpdateProgress,None,itkProcessObject)
itkProcessObject.Update = new_instancemethod(_ITKCommonBasePython.itkProcessObject_Update,None,itkProcessObject)
itkProcessObject.UpdateLargestPossibleRegion = new_instancemethod(_ITKCommonBasePython.itkProcessObject_UpdateLargestPossibleRegion,None,itkProcessObject)
itkProcessObject.UpdateOutputInformation = new_instancemethod(_ITKCommonBasePython.itkProcessObject_UpdateOutputInformation,None,itkProcessObject)
itkProcessObject.PropagateRequestedRegion = new_instancemethod(_ITKCommonBasePython.itkProcessObject_PropagateRequestedRegion,None,itkProcessObject)
itkProcessObject.UpdateOutputData = new_instancemethod(_ITKCommonBasePython.itkProcessObject_UpdateOutputData,None,itkProcessObject)
itkProcessObject.EnlargeOutputRequestedRegion = new_instancemethod(_ITKCommonBasePython.itkProcessObject_EnlargeOutputRequestedRegion,None,itkProcessObject)
itkProcessObject.ResetPipeline = new_instancemethod(_ITKCommonBasePython.itkProcessObject_ResetPipeline,None,itkProcessObject)
itkProcessObject.MakeOutput = new_instancemethod(_ITKCommonBasePython.itkProcessObject_MakeOutput,None,itkProcessObject)
itkProcessObject.SetReleaseDataFlag = new_instancemethod(_ITKCommonBasePython.itkProcessObject_SetReleaseDataFlag,None,itkProcessObject)
itkProcessObject.GetReleaseDataFlag = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetReleaseDataFlag,None,itkProcessObject)
itkProcessObject.ReleaseDataFlagOn = new_instancemethod(_ITKCommonBasePython.itkProcessObject_ReleaseDataFlagOn,None,itkProcessObject)
itkProcessObject.ReleaseDataFlagOff = new_instancemethod(_ITKCommonBasePython.itkProcessObject_ReleaseDataFlagOff,None,itkProcessObject)
itkProcessObject.SetReleaseDataBeforeUpdateFlag = new_instancemethod(_ITKCommonBasePython.itkProcessObject_SetReleaseDataBeforeUpdateFlag,None,itkProcessObject)
itkProcessObject.GetReleaseDataBeforeUpdateFlag = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetReleaseDataBeforeUpdateFlag,None,itkProcessObject)
itkProcessObject.ReleaseDataBeforeUpdateFlagOn = new_instancemethod(_ITKCommonBasePython.itkProcessObject_ReleaseDataBeforeUpdateFlagOn,None,itkProcessObject)
itkProcessObject.ReleaseDataBeforeUpdateFlagOff = new_instancemethod(_ITKCommonBasePython.itkProcessObject_ReleaseDataBeforeUpdateFlagOff,None,itkProcessObject)
itkProcessObject.SetNumberOfThreads = new_instancemethod(_ITKCommonBasePython.itkProcessObject_SetNumberOfThreads,None,itkProcessObject)
itkProcessObject.GetNumberOfThreads = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetNumberOfThreads,None,itkProcessObject)
itkProcessObject.GetMultiThreader = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetMultiThreader,None,itkProcessObject)
itkProcessObject.PrepareOutputs = new_instancemethod(_ITKCommonBasePython.itkProcessObject_PrepareOutputs,None,itkProcessObject)
itkProcessObject.GetPointer = new_instancemethod(_ITKCommonBasePython.itkProcessObject_GetPointer,None,itkProcessObject)
itkProcessObject_swigregister = _ITKCommonBasePython.itkProcessObject_swigregister
itkProcessObject_swigregister(itkProcessObject)

def itkProcessObject_cast(*args):
  """itkProcessObject_cast(itkLightObject obj) -> itkProcessObject"""
  return _ITKCommonBasePython.itkProcessObject_cast(*args)

class itkProgressReporter(object):
    """Proxy of C++ itkProgressReporter class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, itkProgressReporter arg0) -> itkProgressReporter
        __init__(self, itkProcessObject filter, int threadId, unsigned long numberOfPixels, 
            unsigned long numberOfUpdates = 100, 
            float initialProgress = 0.0, float progressWeight = 1.0e+0) -> itkProgressReporter
        __init__(self, itkProcessObject filter, int threadId, unsigned long numberOfPixels, 
            unsigned long numberOfUpdates = 100, 
            float initialProgress = 0.0) -> itkProgressReporter
        __init__(self, itkProcessObject filter, int threadId, unsigned long numberOfPixels, 
            unsigned long numberOfUpdates = 100) -> itkProgressReporter
        __init__(self, itkProcessObject filter, int threadId, unsigned long numberOfPixels) -> itkProgressReporter
        """
        _ITKCommonBasePython.itkProgressReporter_swiginit(self,_ITKCommonBasePython.new_itkProgressReporter(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkProgressReporter
    def CompletedPixel(self):
        """CompletedPixel(self)"""
        return _ITKCommonBasePython.itkProgressReporter_CompletedPixel(self)

itkProgressReporter.CompletedPixel = new_instancemethod(_ITKCommonBasePython.itkProgressReporter_CompletedPixel,None,itkProgressReporter)
itkProgressReporter_swigregister = _ITKCommonBasePython.itkProgressReporter_swigregister
itkProgressReporter_swigregister(itkProgressReporter)

class itkResourceProbeDD(object):
    """Proxy of C++ itkResourceProbeDD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ITKCommonBasePython.delete_itkResourceProbeDD
    def GetType(self):
        """GetType(self) -> string"""
        return _ITKCommonBasePython.itkResourceProbeDD_GetType(self)

    def GetUnit(self):
        """GetUnit(self) -> string"""
        return _ITKCommonBasePython.itkResourceProbeDD_GetUnit(self)

    def Start(self):
        """Start(self)"""
        return _ITKCommonBasePython.itkResourceProbeDD_Start(self)

    def Stop(self):
        """Stop(self)"""
        return _ITKCommonBasePython.itkResourceProbeDD_Stop(self)

    def GetNumberOfStarts(self):
        """GetNumberOfStarts(self) -> unsigned long"""
        return _ITKCommonBasePython.itkResourceProbeDD_GetNumberOfStarts(self)

    def GetNumberOfStops(self):
        """GetNumberOfStops(self) -> unsigned long"""
        return _ITKCommonBasePython.itkResourceProbeDD_GetNumberOfStops(self)

    def GetInstantValue(self):
        """GetInstantValue(self) -> double"""
        return _ITKCommonBasePython.itkResourceProbeDD_GetInstantValue(self)

    def GetTotal(self):
        """GetTotal(self) -> double"""
        return _ITKCommonBasePython.itkResourceProbeDD_GetTotal(self)

    def GetMean(self):
        """GetMean(self) -> double"""
        return _ITKCommonBasePython.itkResourceProbeDD_GetMean(self)

itkResourceProbeDD.GetType = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_GetType,None,itkResourceProbeDD)
itkResourceProbeDD.GetUnit = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_GetUnit,None,itkResourceProbeDD)
itkResourceProbeDD.Start = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_Start,None,itkResourceProbeDD)
itkResourceProbeDD.Stop = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_Stop,None,itkResourceProbeDD)
itkResourceProbeDD.GetNumberOfStarts = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_GetNumberOfStarts,None,itkResourceProbeDD)
itkResourceProbeDD.GetNumberOfStops = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_GetNumberOfStops,None,itkResourceProbeDD)
itkResourceProbeDD.GetInstantValue = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_GetInstantValue,None,itkResourceProbeDD)
itkResourceProbeDD.GetTotal = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_GetTotal,None,itkResourceProbeDD)
itkResourceProbeDD.GetMean = new_instancemethod(_ITKCommonBasePython.itkResourceProbeDD_GetMean,None,itkResourceProbeDD)
itkResourceProbeDD_swigregister = _ITKCommonBasePython.itkResourceProbeDD_swigregister
itkResourceProbeDD_swigregister(itkResourceProbeDD)

class itkSimpleFilterWatcher(object):
    """Proxy of C++ itkSimpleFilterWatcher class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, itkProcessObject o, char comment = "") -> itkSimpleFilterWatcher
        __init__(self, itkProcessObject o) -> itkSimpleFilterWatcher
        __init__(self, itkSimpleFilterWatcher arg0) -> itkSimpleFilterWatcher
        __init__(self) -> itkSimpleFilterWatcher
        """
        _ITKCommonBasePython.itkSimpleFilterWatcher_swiginit(self,_ITKCommonBasePython.new_itkSimpleFilterWatcher(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkSimpleFilterWatcher
    def GetNameOfClass(self):
        """GetNameOfClass(self) -> char"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_GetNameOfClass(self)

    def QuietOn(self):
        """QuietOn(self)"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_QuietOn(self)

    def QuietOff(self):
        """QuietOff(self)"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_QuietOff(self)

    def TestAbortOn(self):
        """TestAbortOn(self)"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_TestAbortOn(self)

    def TestAbortOff(self):
        """TestAbortOff(self)"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_TestAbortOff(self)

    def GetProcess(self):
        """GetProcess(self) -> itkProcessObject"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_GetProcess(self)

    def SetSteps(self, *args):
        """SetSteps(self, int val)"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_SetSteps(self, *args)

    def GetSteps(self):
        """GetSteps(self) -> int"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_GetSteps(self)

    def SetIterations(self, *args):
        """SetIterations(self, int val)"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_SetIterations(self, *args)

    def GetIterations(self):
        """GetIterations(self) -> int"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_GetIterations(self)

    def SetQuiet(self, *args):
        """SetQuiet(self, bool val)"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_SetQuiet(self, *args)

    def GetQuiet(self):
        """GetQuiet(self) -> bool"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_GetQuiet(self)

    def GetComment(self):
        """GetComment(self) -> string"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_GetComment(self)

    def GetTimeProbe(self):
        """GetTimeProbe(self) -> itkTimeProbe"""
        return _ITKCommonBasePython.itkSimpleFilterWatcher_GetTimeProbe(self)

itkSimpleFilterWatcher.GetNameOfClass = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_GetNameOfClass,None,itkSimpleFilterWatcher)
itkSimpleFilterWatcher.QuietOn = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_QuietOn,None,itkSimpleFilterWatcher)
itkSimpleFilterWatcher.QuietOff = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_QuietOff,None,itkSimpleFilterWatcher)
itkSimpleFilterWatcher.TestAbortOn = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_TestAbortOn,None,itkSimpleFilterWatcher)
itkSimpleFilterWatcher.TestAbortOff = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_TestAbortOff,None,itkSimpleFilterWatcher)
itkSimpleFilterWatcher.GetProcess = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_GetProcess,None,itkSimpleFilterWatcher)
itkSimpleFilterWatcher.SetSteps = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_SetSteps,None,itkSimpleFilterWatcher)
itkSimpleFilterWatcher.GetSteps = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_GetSteps,None,itkSimpleFilterWatcher)
itkSimpleFilterWatcher.SetIterations = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_SetIterations,None,itkSimpleFilterWatcher)
itkSimpleFilterWatcher.GetIterations = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_GetIterations,None,itkSimpleFilterWatcher)
itkSimpleFilterWatcher.SetQuiet = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_SetQuiet,None,itkSimpleFilterWatcher)
itkSimpleFilterWatcher.GetQuiet = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_GetQuiet,None,itkSimpleFilterWatcher)
itkSimpleFilterWatcher.GetComment = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_GetComment,None,itkSimpleFilterWatcher)
itkSimpleFilterWatcher.GetTimeProbe = new_instancemethod(_ITKCommonBasePython.itkSimpleFilterWatcher_GetTimeProbe,None,itkSimpleFilterWatcher)
itkSimpleFilterWatcher_swigregister = _ITKCommonBasePython.itkSimpleFilterWatcher_swigregister
itkSimpleFilterWatcher_swigregister(itkSimpleFilterWatcher)

class itkTimeProbe(itkResourceProbeDD):
    """Proxy of C++ itkTimeProbe class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, itkTimeProbe arg0) -> itkTimeProbe
        __init__(self) -> itkTimeProbe
        """
        _ITKCommonBasePython.itkTimeProbe_swiginit(self,_ITKCommonBasePython.new_itkTimeProbe(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkTimeProbe
    def GetMeanTime(self):
        """GetMeanTime(self) -> double"""
        return _ITKCommonBasePython.itkTimeProbe_GetMeanTime(self)

itkTimeProbe.GetMeanTime = new_instancemethod(_ITKCommonBasePython.itkTimeProbe_GetMeanTime,None,itkTimeProbe)
itkTimeProbe_swigregister = _ITKCommonBasePython.itkTimeProbe_swigregister
itkTimeProbe_swigregister(itkTimeProbe)

class itkTimeStamp(object):
    """Proxy of C++ itkTimeStamp class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _ITKCommonBasePython.delete_itkTimeStamp
    def New():
        """New() -> itkTimeStamp"""
        return _ITKCommonBasePython.itkTimeStamp_New()

    New = staticmethod(New)
    def __init__(self, *args): 
        """
        __init__(self, itkTimeStamp arg0) -> itkTimeStamp
        __init__(self) -> itkTimeStamp
        """
        _ITKCommonBasePython.itkTimeStamp_swiginit(self,_ITKCommonBasePython.new_itkTimeStamp(*args))
    def GetNameOfClass():
        """GetNameOfClass() -> char"""
        return _ITKCommonBasePython.itkTimeStamp_GetNameOfClass()

    GetNameOfClass = staticmethod(GetNameOfClass)
    def Modified(self):
        """Modified(self)"""
        return _ITKCommonBasePython.itkTimeStamp_Modified(self)

    def GetMTime(self):
        """GetMTime(self) -> unsigned long"""
        return _ITKCommonBasePython.itkTimeStamp_GetMTime(self)

    def __gt__(self, *args):
        """__gt__(self, itkTimeStamp ts) -> bool"""
        return _ITKCommonBasePython.itkTimeStamp___gt__(self, *args)

    def __lt__(self, *args):
        """__lt__(self, itkTimeStamp ts) -> bool"""
        return _ITKCommonBasePython.itkTimeStamp___lt__(self, *args)

itkTimeStamp.Modified = new_instancemethod(_ITKCommonBasePython.itkTimeStamp_Modified,None,itkTimeStamp)
itkTimeStamp.GetMTime = new_instancemethod(_ITKCommonBasePython.itkTimeStamp_GetMTime,None,itkTimeStamp)
itkTimeStamp.__gt__ = new_instancemethod(_ITKCommonBasePython.itkTimeStamp___gt__,None,itkTimeStamp)
itkTimeStamp.__lt__ = new_instancemethod(_ITKCommonBasePython.itkTimeStamp___lt__,None,itkTimeStamp)
itkTimeStamp_swigregister = _ITKCommonBasePython.itkTimeStamp_swigregister
itkTimeStamp_swigregister(itkTimeStamp)

def itkTimeStamp_New():
  """itkTimeStamp_New() -> itkTimeStamp"""
  return _ITKCommonBasePython.itkTimeStamp_New()

def itkTimeStamp_GetNameOfClass():
  """itkTimeStamp_GetNameOfClass() -> char"""
  return _ITKCommonBasePython.itkTimeStamp_GetNameOfClass()

class itkVersion(itkObject):
    """Proxy of C++ itkVersion class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _ITKCommonBasePython.itkVersion___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetITKVersion():
        """GetITKVersion() -> char"""
        return _ITKCommonBasePython.itkVersion_GetITKVersion()

    GetITKVersion = staticmethod(GetITKVersion)
    def GetITKMajorVersion():
        """GetITKMajorVersion() -> int"""
        return _ITKCommonBasePython.itkVersion_GetITKMajorVersion()

    GetITKMajorVersion = staticmethod(GetITKMajorVersion)
    def GetITKMinorVersion():
        """GetITKMinorVersion() -> int"""
        return _ITKCommonBasePython.itkVersion_GetITKMinorVersion()

    GetITKMinorVersion = staticmethod(GetITKMinorVersion)
    def GetITKBuildVersion():
        """GetITKBuildVersion() -> int"""
        return _ITKCommonBasePython.itkVersion_GetITKBuildVersion()

    GetITKBuildVersion = staticmethod(GetITKBuildVersion)
    def GetITKSourceVersion():
        """GetITKSourceVersion() -> char"""
        return _ITKCommonBasePython.itkVersion_GetITKSourceVersion()

    GetITKSourceVersion = staticmethod(GetITKSourceVersion)
    __swig_destroy__ = _ITKCommonBasePython.delete_itkVersion
    def cast(*args):
        """cast(itkLightObject obj) -> itkVersion"""
        return _ITKCommonBasePython.itkVersion_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkVersion"""
        return _ITKCommonBasePython.itkVersion_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkVersion
        
        Create a new object of the class itkVersion and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkVersion.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkVersion.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVersion.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVersion.GetPointer = new_instancemethod(_ITKCommonBasePython.itkVersion_GetPointer,None,itkVersion)
itkVersion_swigregister = _ITKCommonBasePython.itkVersion_swigregister
itkVersion_swigregister(itkVersion)

def itkVersion___New_orig__():
  """itkVersion___New_orig__()"""
  return _ITKCommonBasePython.itkVersion___New_orig__()

def itkVersion_GetITKVersion():
  """itkVersion_GetITKVersion() -> char"""
  return _ITKCommonBasePython.itkVersion_GetITKVersion()

def itkVersion_GetITKMajorVersion():
  """itkVersion_GetITKMajorVersion() -> int"""
  return _ITKCommonBasePython.itkVersion_GetITKMajorVersion()

def itkVersion_GetITKMinorVersion():
  """itkVersion_GetITKMinorVersion() -> int"""
  return _ITKCommonBasePython.itkVersion_GetITKMinorVersion()

def itkVersion_GetITKBuildVersion():
  """itkVersion_GetITKBuildVersion() -> int"""
  return _ITKCommonBasePython.itkVersion_GetITKBuildVersion()

def itkVersion_GetITKSourceVersion():
  """itkVersion_GetITKSourceVersion() -> char"""
  return _ITKCommonBasePython.itkVersion_GetITKSourceVersion()

def itkVersion_cast(*args):
  """itkVersion_cast(itkLightObject obj) -> itkVersion"""
  return _ITKCommonBasePython.itkVersion_cast(*args)

class itkXMLFilterWatcher(itkSimpleFilterWatcher):
    """Proxy of C++ itkXMLFilterWatcher class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, itkXMLFilterWatcher arg0) -> itkXMLFilterWatcher
        __init__(self, itkProcessObject o, char comment = "") -> itkXMLFilterWatcher
        __init__(self, itkProcessObject o) -> itkXMLFilterWatcher
        """
        _ITKCommonBasePython.itkXMLFilterWatcher_swiginit(self,_ITKCommonBasePython.new_itkXMLFilterWatcher(*args))
    __swig_destroy__ = _ITKCommonBasePython.delete_itkXMLFilterWatcher
itkXMLFilterWatcher_swigregister = _ITKCommonBasePython.itkXMLFilterWatcher_swigregister
itkXMLFilterWatcher_swigregister(itkXMLFilterWatcher)

class itkCommand(itkObject):
    """Proxy of C++ itkCommand class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Execute(self, *args):
        """
        Execute(self, itkObject caller, itkEventObject event)
        Execute(self, itkObject caller, itkEventObject event)
        """
        return _ITKCommonBasePython.itkCommand_Execute(self, *args)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkCommand
    def cast(*args):
        """cast(itkLightObject obj) -> itkCommand"""
        return _ITKCommonBasePython.itkCommand_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkCommand"""
        return _ITKCommonBasePython.itkCommand_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkCommand
        
        Create a new object of the class itkCommand and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkCommand.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkCommand.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCommand.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCommand.Execute = new_instancemethod(_ITKCommonBasePython.itkCommand_Execute,None,itkCommand)
itkCommand.GetPointer = new_instancemethod(_ITKCommonBasePython.itkCommand_GetPointer,None,itkCommand)
itkCommand_swigregister = _ITKCommonBasePython.itkCommand_swigregister
itkCommand_swigregister(itkCommand)

def itkCommand_cast(*args):
  """itkCommand_cast(itkLightObject obj) -> itkCommand"""
  return _ITKCommonBasePython.itkCommand_cast(*args)

class itkDataObject(itkObject):
    """Proxy of C++ itkDataObject class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def DisconnectPipeline(self):
        """DisconnectPipeline(self)"""
        return _ITKCommonBasePython.itkDataObject_DisconnectPipeline(self)

    def GetSource(self):
        """GetSource(self) -> itk::SmartPointerForwardReference<(itk::ProcessObject)>"""
        return _ITKCommonBasePython.itkDataObject_GetSource(self)

    def GetSourceOutputIndex(self):
        """GetSourceOutputIndex(self) -> unsigned int"""
        return _ITKCommonBasePython.itkDataObject_GetSourceOutputIndex(self)

    def Initialize(self):
        """Initialize(self)"""
        return _ITKCommonBasePython.itkDataObject_Initialize(self)

    def SetReleaseDataFlag(self, *args):
        """SetReleaseDataFlag(self, bool flag)"""
        return _ITKCommonBasePython.itkDataObject_SetReleaseDataFlag(self, *args)

    def GetReleaseDataFlag(self):
        """GetReleaseDataFlag(self) -> bool"""
        return _ITKCommonBasePython.itkDataObject_GetReleaseDataFlag(self)

    def ReleaseDataFlagOn(self):
        """ReleaseDataFlagOn(self)"""
        return _ITKCommonBasePython.itkDataObject_ReleaseDataFlagOn(self)

    def ReleaseDataFlagOff(self):
        """ReleaseDataFlagOff(self)"""
        return _ITKCommonBasePython.itkDataObject_ReleaseDataFlagOff(self)

    def SetGlobalReleaseDataFlag(*args):
        """SetGlobalReleaseDataFlag(bool val)"""
        return _ITKCommonBasePython.itkDataObject_SetGlobalReleaseDataFlag(*args)

    SetGlobalReleaseDataFlag = staticmethod(SetGlobalReleaseDataFlag)
    def GetGlobalReleaseDataFlag():
        """GetGlobalReleaseDataFlag() -> bool"""
        return _ITKCommonBasePython.itkDataObject_GetGlobalReleaseDataFlag()

    GetGlobalReleaseDataFlag = staticmethod(GetGlobalReleaseDataFlag)
    def GlobalReleaseDataFlagOn():
        """GlobalReleaseDataFlagOn()"""
        return _ITKCommonBasePython.itkDataObject_GlobalReleaseDataFlagOn()

    GlobalReleaseDataFlagOn = staticmethod(GlobalReleaseDataFlagOn)
    def GlobalReleaseDataFlagOff():
        """GlobalReleaseDataFlagOff()"""
        return _ITKCommonBasePython.itkDataObject_GlobalReleaseDataFlagOff()

    GlobalReleaseDataFlagOff = staticmethod(GlobalReleaseDataFlagOff)
    def ReleaseData(self):
        """ReleaseData(self)"""
        return _ITKCommonBasePython.itkDataObject_ReleaseData(self)

    def ShouldIReleaseData(self):
        """ShouldIReleaseData(self) -> bool"""
        return _ITKCommonBasePython.itkDataObject_ShouldIReleaseData(self)

    def GetDataReleased(self):
        """GetDataReleased(self) -> bool"""
        return _ITKCommonBasePython.itkDataObject_GetDataReleased(self)

    def Update(self):
        """Update(self)"""
        return _ITKCommonBasePython.itkDataObject_Update(self)

    def UpdateOutputInformation(self):
        """UpdateOutputInformation(self)"""
        return _ITKCommonBasePython.itkDataObject_UpdateOutputInformation(self)

    def PropagateRequestedRegion(self):
        """PropagateRequestedRegion(self)"""
        return _ITKCommonBasePython.itkDataObject_PropagateRequestedRegion(self)

    def UpdateOutputData(self):
        """UpdateOutputData(self)"""
        return _ITKCommonBasePython.itkDataObject_UpdateOutputData(self)

    def ResetPipeline(self):
        """ResetPipeline(self)"""
        return _ITKCommonBasePython.itkDataObject_ResetPipeline(self)

    def SetPipelineMTime(self, *args):
        """SetPipelineMTime(self, unsigned long time)"""
        return _ITKCommonBasePython.itkDataObject_SetPipelineMTime(self, *args)

    def GetPipelineMTime(self):
        """GetPipelineMTime(self) -> unsigned long"""
        return _ITKCommonBasePython.itkDataObject_GetPipelineMTime(self)

    def GetUpdateMTime(self):
        """GetUpdateMTime(self) -> unsigned long"""
        return _ITKCommonBasePython.itkDataObject_GetUpdateMTime(self)

    def PrepareForNewData(self):
        """PrepareForNewData(self)"""
        return _ITKCommonBasePython.itkDataObject_PrepareForNewData(self)

    def DataHasBeenGenerated(self):
        """DataHasBeenGenerated(self)"""
        return _ITKCommonBasePython.itkDataObject_DataHasBeenGenerated(self)

    def SetRequestedRegionToLargestPossibleRegion(self):
        """SetRequestedRegionToLargestPossibleRegion(self)"""
        return _ITKCommonBasePython.itkDataObject_SetRequestedRegionToLargestPossibleRegion(self)

    def RequestedRegionIsOutsideOfTheBufferedRegion(self):
        """RequestedRegionIsOutsideOfTheBufferedRegion(self) -> bool"""
        return _ITKCommonBasePython.itkDataObject_RequestedRegionIsOutsideOfTheBufferedRegion(self)

    def VerifyRequestedRegion(self):
        """VerifyRequestedRegion(self) -> bool"""
        return _ITKCommonBasePython.itkDataObject_VerifyRequestedRegion(self)

    def CopyInformation(self, *args):
        """CopyInformation(self, itkDataObject arg0)"""
        return _ITKCommonBasePython.itkDataObject_CopyInformation(self, *args)

    def SetRequestedRegion(self, *args):
        """SetRequestedRegion(self, itkDataObject arg0)"""
        return _ITKCommonBasePython.itkDataObject_SetRequestedRegion(self, *args)

    def Graft(self, *args):
        """Graft(self, itkDataObject arg0)"""
        return _ITKCommonBasePython.itkDataObject_Graft(self, *args)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkDataObject
    def cast(*args):
        """cast(itkLightObject obj) -> itkDataObject"""
        return _ITKCommonBasePython.itkDataObject_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDataObject"""
        return _ITKCommonBasePython.itkDataObject_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDataObject
        
        Create a new object of the class itkDataObject and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDataObject.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDataObject.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDataObject.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDataObject.DisconnectPipeline = new_instancemethod(_ITKCommonBasePython.itkDataObject_DisconnectPipeline,None,itkDataObject)
itkDataObject.GetSource = new_instancemethod(_ITKCommonBasePython.itkDataObject_GetSource,None,itkDataObject)
itkDataObject.GetSourceOutputIndex = new_instancemethod(_ITKCommonBasePython.itkDataObject_GetSourceOutputIndex,None,itkDataObject)
itkDataObject.Initialize = new_instancemethod(_ITKCommonBasePython.itkDataObject_Initialize,None,itkDataObject)
itkDataObject.SetReleaseDataFlag = new_instancemethod(_ITKCommonBasePython.itkDataObject_SetReleaseDataFlag,None,itkDataObject)
itkDataObject.GetReleaseDataFlag = new_instancemethod(_ITKCommonBasePython.itkDataObject_GetReleaseDataFlag,None,itkDataObject)
itkDataObject.ReleaseDataFlagOn = new_instancemethod(_ITKCommonBasePython.itkDataObject_ReleaseDataFlagOn,None,itkDataObject)
itkDataObject.ReleaseDataFlagOff = new_instancemethod(_ITKCommonBasePython.itkDataObject_ReleaseDataFlagOff,None,itkDataObject)
itkDataObject.ReleaseData = new_instancemethod(_ITKCommonBasePython.itkDataObject_ReleaseData,None,itkDataObject)
itkDataObject.ShouldIReleaseData = new_instancemethod(_ITKCommonBasePython.itkDataObject_ShouldIReleaseData,None,itkDataObject)
itkDataObject.GetDataReleased = new_instancemethod(_ITKCommonBasePython.itkDataObject_GetDataReleased,None,itkDataObject)
itkDataObject.Update = new_instancemethod(_ITKCommonBasePython.itkDataObject_Update,None,itkDataObject)
itkDataObject.UpdateOutputInformation = new_instancemethod(_ITKCommonBasePython.itkDataObject_UpdateOutputInformation,None,itkDataObject)
itkDataObject.PropagateRequestedRegion = new_instancemethod(_ITKCommonBasePython.itkDataObject_PropagateRequestedRegion,None,itkDataObject)
itkDataObject.UpdateOutputData = new_instancemethod(_ITKCommonBasePython.itkDataObject_UpdateOutputData,None,itkDataObject)
itkDataObject.ResetPipeline = new_instancemethod(_ITKCommonBasePython.itkDataObject_ResetPipeline,None,itkDataObject)
itkDataObject.SetPipelineMTime = new_instancemethod(_ITKCommonBasePython.itkDataObject_SetPipelineMTime,None,itkDataObject)
itkDataObject.GetPipelineMTime = new_instancemethod(_ITKCommonBasePython.itkDataObject_GetPipelineMTime,None,itkDataObject)
itkDataObject.GetUpdateMTime = new_instancemethod(_ITKCommonBasePython.itkDataObject_GetUpdateMTime,None,itkDataObject)
itkDataObject.PrepareForNewData = new_instancemethod(_ITKCommonBasePython.itkDataObject_PrepareForNewData,None,itkDataObject)
itkDataObject.DataHasBeenGenerated = new_instancemethod(_ITKCommonBasePython.itkDataObject_DataHasBeenGenerated,None,itkDataObject)
itkDataObject.SetRequestedRegionToLargestPossibleRegion = new_instancemethod(_ITKCommonBasePython.itkDataObject_SetRequestedRegionToLargestPossibleRegion,None,itkDataObject)
itkDataObject.RequestedRegionIsOutsideOfTheBufferedRegion = new_instancemethod(_ITKCommonBasePython.itkDataObject_RequestedRegionIsOutsideOfTheBufferedRegion,None,itkDataObject)
itkDataObject.VerifyRequestedRegion = new_instancemethod(_ITKCommonBasePython.itkDataObject_VerifyRequestedRegion,None,itkDataObject)
itkDataObject.CopyInformation = new_instancemethod(_ITKCommonBasePython.itkDataObject_CopyInformation,None,itkDataObject)
itkDataObject.SetRequestedRegion = new_instancemethod(_ITKCommonBasePython.itkDataObject_SetRequestedRegion,None,itkDataObject)
itkDataObject.Graft = new_instancemethod(_ITKCommonBasePython.itkDataObject_Graft,None,itkDataObject)
itkDataObject.GetPointer = new_instancemethod(_ITKCommonBasePython.itkDataObject_GetPointer,None,itkDataObject)
itkDataObject_swigregister = _ITKCommonBasePython.itkDataObject_swigregister
itkDataObject_swigregister(itkDataObject)

def itkDataObject_SetGlobalReleaseDataFlag(*args):
  """itkDataObject_SetGlobalReleaseDataFlag(bool val)"""
  return _ITKCommonBasePython.itkDataObject_SetGlobalReleaseDataFlag(*args)

def itkDataObject_GetGlobalReleaseDataFlag():
  """itkDataObject_GetGlobalReleaseDataFlag() -> bool"""
  return _ITKCommonBasePython.itkDataObject_GetGlobalReleaseDataFlag()

def itkDataObject_GlobalReleaseDataFlagOn():
  """itkDataObject_GlobalReleaseDataFlagOn()"""
  return _ITKCommonBasePython.itkDataObject_GlobalReleaseDataFlagOn()

def itkDataObject_GlobalReleaseDataFlagOff():
  """itkDataObject_GlobalReleaseDataFlagOff()"""
  return _ITKCommonBasePython.itkDataObject_GlobalReleaseDataFlagOff()

def itkDataObject_cast(*args):
  """itkDataObject_cast(itkLightObject obj) -> itkDataObject"""
  return _ITKCommonBasePython.itkDataObject_cast(*args)

class itkDirectory(itkObject):
    """Proxy of C++ itkDirectory class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _ITKCommonBasePython.itkDirectory___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Load(self, *args):
        """Load(self, char dir) -> bool"""
        return _ITKCommonBasePython.itkDirectory_Load(self, *args)

    def GetNumberOfFiles(self):
        """GetNumberOfFiles(self) -> size_t"""
        return _ITKCommonBasePython.itkDirectory_GetNumberOfFiles(self)

    def GetFile(self, *args):
        """GetFile(self, unsigned int index) -> char"""
        return _ITKCommonBasePython.itkDirectory_GetFile(self, *args)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkDirectory
    def cast(*args):
        """cast(itkLightObject obj) -> itkDirectory"""
        return _ITKCommonBasePython.itkDirectory_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDirectory"""
        return _ITKCommonBasePython.itkDirectory_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDirectory
        
        Create a new object of the class itkDirectory and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDirectory.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDirectory.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDirectory.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDirectory.Load = new_instancemethod(_ITKCommonBasePython.itkDirectory_Load,None,itkDirectory)
itkDirectory.GetNumberOfFiles = new_instancemethod(_ITKCommonBasePython.itkDirectory_GetNumberOfFiles,None,itkDirectory)
itkDirectory.GetFile = new_instancemethod(_ITKCommonBasePython.itkDirectory_GetFile,None,itkDirectory)
itkDirectory.GetPointer = new_instancemethod(_ITKCommonBasePython.itkDirectory_GetPointer,None,itkDirectory)
itkDirectory_swigregister = _ITKCommonBasePython.itkDirectory_swigregister
itkDirectory_swigregister(itkDirectory)

def itkDirectory___New_orig__():
  """itkDirectory___New_orig__()"""
  return _ITKCommonBasePython.itkDirectory___New_orig__()

def itkDirectory_cast(*args):
  """itkDirectory_cast(itkLightObject obj) -> itkDirectory"""
  return _ITKCommonBasePython.itkDirectory_cast(*args)

class itkDynamicLoader(itkObject):
    """Proxy of C++ itkDynamicLoader class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _ITKCommonBasePython.itkDynamicLoader___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def OpenLibrary(*args):
        """OpenLibrary(char arg0) -> itk::LibHandle"""
        return _ITKCommonBasePython.itkDynamicLoader_OpenLibrary(*args)

    OpenLibrary = staticmethod(OpenLibrary)
    def CloseLibrary(*args):
        """CloseLibrary(itk::LibHandle arg0) -> int"""
        return _ITKCommonBasePython.itkDynamicLoader_CloseLibrary(*args)

    CloseLibrary = staticmethod(CloseLibrary)
    def GetSymbolAddress(*args):
        """GetSymbolAddress(itk::LibHandle arg0, char arg1) -> void"""
        return _ITKCommonBasePython.itkDynamicLoader_GetSymbolAddress(*args)

    GetSymbolAddress = staticmethod(GetSymbolAddress)
    def LibPrefix():
        """LibPrefix() -> char"""
        return _ITKCommonBasePython.itkDynamicLoader_LibPrefix()

    LibPrefix = staticmethod(LibPrefix)
    def LibExtension():
        """LibExtension() -> char"""
        return _ITKCommonBasePython.itkDynamicLoader_LibExtension()

    LibExtension = staticmethod(LibExtension)
    def LastError():
        """LastError() -> char"""
        return _ITKCommonBasePython.itkDynamicLoader_LastError()

    LastError = staticmethod(LastError)
    __swig_destroy__ = _ITKCommonBasePython.delete_itkDynamicLoader
    def cast(*args):
        """cast(itkLightObject obj) -> itkDynamicLoader"""
        return _ITKCommonBasePython.itkDynamicLoader_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDynamicLoader"""
        return _ITKCommonBasePython.itkDynamicLoader_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDynamicLoader
        
        Create a new object of the class itkDynamicLoader and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDynamicLoader.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDynamicLoader.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDynamicLoader.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDynamicLoader.GetPointer = new_instancemethod(_ITKCommonBasePython.itkDynamicLoader_GetPointer,None,itkDynamicLoader)
itkDynamicLoader_swigregister = _ITKCommonBasePython.itkDynamicLoader_swigregister
itkDynamicLoader_swigregister(itkDynamicLoader)

def itkDynamicLoader___New_orig__():
  """itkDynamicLoader___New_orig__()"""
  return _ITKCommonBasePython.itkDynamicLoader___New_orig__()

def itkDynamicLoader_OpenLibrary(*args):
  """itkDynamicLoader_OpenLibrary(char arg0) -> itk::LibHandle"""
  return _ITKCommonBasePython.itkDynamicLoader_OpenLibrary(*args)

def itkDynamicLoader_CloseLibrary(*args):
  """itkDynamicLoader_CloseLibrary(itk::LibHandle arg0) -> int"""
  return _ITKCommonBasePython.itkDynamicLoader_CloseLibrary(*args)

def itkDynamicLoader_GetSymbolAddress(*args):
  """itkDynamicLoader_GetSymbolAddress(itk::LibHandle arg0, char arg1) -> void"""
  return _ITKCommonBasePython.itkDynamicLoader_GetSymbolAddress(*args)

def itkDynamicLoader_LibPrefix():
  """itkDynamicLoader_LibPrefix() -> char"""
  return _ITKCommonBasePython.itkDynamicLoader_LibPrefix()

def itkDynamicLoader_LibExtension():
  """itkDynamicLoader_LibExtension() -> char"""
  return _ITKCommonBasePython.itkDynamicLoader_LibExtension()

def itkDynamicLoader_LastError():
  """itkDynamicLoader_LastError() -> char"""
  return _ITKCommonBasePython.itkDynamicLoader_LastError()

def itkDynamicLoader_cast(*args):
  """itkDynamicLoader_cast(itkLightObject obj) -> itkDynamicLoader"""
  return _ITKCommonBasePython.itkDynamicLoader_cast(*args)

class itkLightProcessObject(itkObject):
    """Proxy of C++ itkLightProcessObject class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _ITKCommonBasePython.itkLightProcessObject___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetAbortGenerateData(self, *args):
        """SetAbortGenerateData(self, bool _arg)"""
        return _ITKCommonBasePython.itkLightProcessObject_SetAbortGenerateData(self, *args)

    def GetAbortGenerateData(self):
        """GetAbortGenerateData(self) -> bool"""
        return _ITKCommonBasePython.itkLightProcessObject_GetAbortGenerateData(self)

    def AbortGenerateDataOn(self):
        """AbortGenerateDataOn(self)"""
        return _ITKCommonBasePython.itkLightProcessObject_AbortGenerateDataOn(self)

    def AbortGenerateDataOff(self):
        """AbortGenerateDataOff(self)"""
        return _ITKCommonBasePython.itkLightProcessObject_AbortGenerateDataOff(self)

    def SetProgress(self, *args):
        """SetProgress(self, float _arg)"""
        return _ITKCommonBasePython.itkLightProcessObject_SetProgress(self, *args)

    def GetProgress(self):
        """GetProgress(self) -> float"""
        return _ITKCommonBasePython.itkLightProcessObject_GetProgress(self)

    def UpdateProgress(self, *args):
        """UpdateProgress(self, float amount)"""
        return _ITKCommonBasePython.itkLightProcessObject_UpdateProgress(self, *args)

    def UpdateOutputData(self):
        """UpdateOutputData(self)"""
        return _ITKCommonBasePython.itkLightProcessObject_UpdateOutputData(self)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkLightProcessObject
    def cast(*args):
        """cast(itkLightObject obj) -> itkLightProcessObject"""
        return _ITKCommonBasePython.itkLightProcessObject_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkLightProcessObject"""
        return _ITKCommonBasePython.itkLightProcessObject_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkLightProcessObject
        
        Create a new object of the class itkLightProcessObject and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkLightProcessObject.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkLightProcessObject.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLightProcessObject.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLightProcessObject.SetAbortGenerateData = new_instancemethod(_ITKCommonBasePython.itkLightProcessObject_SetAbortGenerateData,None,itkLightProcessObject)
itkLightProcessObject.GetAbortGenerateData = new_instancemethod(_ITKCommonBasePython.itkLightProcessObject_GetAbortGenerateData,None,itkLightProcessObject)
itkLightProcessObject.AbortGenerateDataOn = new_instancemethod(_ITKCommonBasePython.itkLightProcessObject_AbortGenerateDataOn,None,itkLightProcessObject)
itkLightProcessObject.AbortGenerateDataOff = new_instancemethod(_ITKCommonBasePython.itkLightProcessObject_AbortGenerateDataOff,None,itkLightProcessObject)
itkLightProcessObject.SetProgress = new_instancemethod(_ITKCommonBasePython.itkLightProcessObject_SetProgress,None,itkLightProcessObject)
itkLightProcessObject.GetProgress = new_instancemethod(_ITKCommonBasePython.itkLightProcessObject_GetProgress,None,itkLightProcessObject)
itkLightProcessObject.UpdateProgress = new_instancemethod(_ITKCommonBasePython.itkLightProcessObject_UpdateProgress,None,itkLightProcessObject)
itkLightProcessObject.UpdateOutputData = new_instancemethod(_ITKCommonBasePython.itkLightProcessObject_UpdateOutputData,None,itkLightProcessObject)
itkLightProcessObject.GetPointer = new_instancemethod(_ITKCommonBasePython.itkLightProcessObject_GetPointer,None,itkLightProcessObject)
itkLightProcessObject_swigregister = _ITKCommonBasePython.itkLightProcessObject_swigregister
itkLightProcessObject_swigregister(itkLightProcessObject)

def itkLightProcessObject___New_orig__():
  """itkLightProcessObject___New_orig__()"""
  return _ITKCommonBasePython.itkLightProcessObject___New_orig__()

def itkLightProcessObject_cast(*args):
  """itkLightProcessObject_cast(itkLightObject obj) -> itkLightProcessObject"""
  return _ITKCommonBasePython.itkLightProcessObject_cast(*args)

class itkMultiThreader(itkObject):
    """Proxy of C++ itkMultiThreader class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _ITKCommonBasePython.itkMultiThreader___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetNumberOfThreads(self, *args):
        """SetNumberOfThreads(self, int numberOfThreads)"""
        return _ITKCommonBasePython.itkMultiThreader_SetNumberOfThreads(self, *args)

    def GetNumberOfThreads(self):
        """GetNumberOfThreads(self) -> int"""
        return _ITKCommonBasePython.itkMultiThreader_GetNumberOfThreads(self)

    def SetGlobalMaximumNumberOfThreads(*args):
        """SetGlobalMaximumNumberOfThreads(int val)"""
        return _ITKCommonBasePython.itkMultiThreader_SetGlobalMaximumNumberOfThreads(*args)

    SetGlobalMaximumNumberOfThreads = staticmethod(SetGlobalMaximumNumberOfThreads)
    def GetGlobalMaximumNumberOfThreads():
        """GetGlobalMaximumNumberOfThreads() -> int"""
        return _ITKCommonBasePython.itkMultiThreader_GetGlobalMaximumNumberOfThreads()

    GetGlobalMaximumNumberOfThreads = staticmethod(GetGlobalMaximumNumberOfThreads)
    def SetGlobalDefaultNumberOfThreads(*args):
        """SetGlobalDefaultNumberOfThreads(int val)"""
        return _ITKCommonBasePython.itkMultiThreader_SetGlobalDefaultNumberOfThreads(*args)

    SetGlobalDefaultNumberOfThreads = staticmethod(SetGlobalDefaultNumberOfThreads)
    def GetGlobalDefaultNumberOfThreads():
        """GetGlobalDefaultNumberOfThreads() -> int"""
        return _ITKCommonBasePython.itkMultiThreader_GetGlobalDefaultNumberOfThreads()

    GetGlobalDefaultNumberOfThreads = staticmethod(GetGlobalDefaultNumberOfThreads)
    def SingleMethodExecute(self):
        """SingleMethodExecute(self)"""
        return _ITKCommonBasePython.itkMultiThreader_SingleMethodExecute(self)

    def MultipleMethodExecute(self):
        """MultipleMethodExecute(self)"""
        return _ITKCommonBasePython.itkMultiThreader_MultipleMethodExecute(self)

    def SetSingleMethod(self, *args):
        """SetSingleMethod(self, itk::ThreadFunctionType arg0, void data)"""
        return _ITKCommonBasePython.itkMultiThreader_SetSingleMethod(self, *args)

    def SetMultipleMethod(self, *args):
        """SetMultipleMethod(self, int index, itk::ThreadFunctionType arg1, void data)"""
        return _ITKCommonBasePython.itkMultiThreader_SetMultipleMethod(self, *args)

    def SpawnThread(self, *args):
        """SpawnThread(self, itk::ThreadFunctionType arg0, void data) -> int"""
        return _ITKCommonBasePython.itkMultiThreader_SpawnThread(self, *args)

    def TerminateThread(self, *args):
        """TerminateThread(self, int thread_id)"""
        return _ITKCommonBasePython.itkMultiThreader_TerminateThread(self, *args)

    __swig_destroy__ = _ITKCommonBasePython.delete_itkMultiThreader
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiThreader"""
        return _ITKCommonBasePython.itkMultiThreader_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiThreader"""
        return _ITKCommonBasePython.itkMultiThreader_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiThreader
        
        Create a new object of the class itkMultiThreader and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiThreader.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiThreader.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiThreader.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiThreader.SetNumberOfThreads = new_instancemethod(_ITKCommonBasePython.itkMultiThreader_SetNumberOfThreads,None,itkMultiThreader)
itkMultiThreader.GetNumberOfThreads = new_instancemethod(_ITKCommonBasePython.itkMultiThreader_GetNumberOfThreads,None,itkMultiThreader)
itkMultiThreader.SingleMethodExecute = new_instancemethod(_ITKCommonBasePython.itkMultiThreader_SingleMethodExecute,None,itkMultiThreader)
itkMultiThreader.MultipleMethodExecute = new_instancemethod(_ITKCommonBasePython.itkMultiThreader_MultipleMethodExecute,None,itkMultiThreader)
itkMultiThreader.SetSingleMethod = new_instancemethod(_ITKCommonBasePython.itkMultiThreader_SetSingleMethod,None,itkMultiThreader)
itkMultiThreader.SetMultipleMethod = new_instancemethod(_ITKCommonBasePython.itkMultiThreader_SetMultipleMethod,None,itkMultiThreader)
itkMultiThreader.SpawnThread = new_instancemethod(_ITKCommonBasePython.itkMultiThreader_SpawnThread,None,itkMultiThreader)
itkMultiThreader.TerminateThread = new_instancemethod(_ITKCommonBasePython.itkMultiThreader_TerminateThread,None,itkMultiThreader)
itkMultiThreader.GetPointer = new_instancemethod(_ITKCommonBasePython.itkMultiThreader_GetPointer,None,itkMultiThreader)
itkMultiThreader_swigregister = _ITKCommonBasePython.itkMultiThreader_swigregister
itkMultiThreader_swigregister(itkMultiThreader)

def itkMultiThreader___New_orig__():
  """itkMultiThreader___New_orig__()"""
  return _ITKCommonBasePython.itkMultiThreader___New_orig__()

def itkMultiThreader_SetGlobalMaximumNumberOfThreads(*args):
  """itkMultiThreader_SetGlobalMaximumNumberOfThreads(int val)"""
  return _ITKCommonBasePython.itkMultiThreader_SetGlobalMaximumNumberOfThreads(*args)

def itkMultiThreader_GetGlobalMaximumNumberOfThreads():
  """itkMultiThreader_GetGlobalMaximumNumberOfThreads() -> int"""
  return _ITKCommonBasePython.itkMultiThreader_GetGlobalMaximumNumberOfThreads()

def itkMultiThreader_SetGlobalDefaultNumberOfThreads(*args):
  """itkMultiThreader_SetGlobalDefaultNumberOfThreads(int val)"""
  return _ITKCommonBasePython.itkMultiThreader_SetGlobalDefaultNumberOfThreads(*args)

def itkMultiThreader_GetGlobalDefaultNumberOfThreads():
  """itkMultiThreader_GetGlobalDefaultNumberOfThreads() -> int"""
  return _ITKCommonBasePython.itkMultiThreader_GetGlobalDefaultNumberOfThreads()

def itkMultiThreader_cast(*args):
  """itkMultiThreader_cast(itkLightObject obj) -> itkMultiThreader"""
  return _ITKCommonBasePython.itkMultiThreader_cast(*args)



