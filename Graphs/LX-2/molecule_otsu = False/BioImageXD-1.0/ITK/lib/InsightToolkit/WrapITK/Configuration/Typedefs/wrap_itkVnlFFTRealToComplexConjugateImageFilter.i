// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkVnlFFTRealToComplexConjugateImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkVnlFFTRealToComplexConjugateImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkVnlFFTRealToComplexConjugateImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkVnlFFTRealToComplexConjugateImageFilterJava
#endif
#ifdef SWIGLUA
%module itkVnlFFTRealToComplexConjugateImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkVnlFFTRealToComplexConjugateImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkVnlFFTRealToComplexConjugateImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkVnlFFTRealToComplexConjugateImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkVnlFFTRealToComplexConjugateImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkVnlFFTRealToComplexConjugateImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkVnlFFTRealToComplexConjugateImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkVnlFFTRealToComplexConjugateImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkVnlFFTRealToComplexConjugateImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkVnlFFTRealToComplexConjugateImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkVnlFFTRealToComplexConjugateImageFilterPython
#endif
#ifdef SWIGR
%module itkVnlFFTRealToComplexConjugateImageFilterR
#endif
#ifdef SWIGRUBY
%module itkVnlFFTRealToComplexConjugateImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkVnlFFTRealToComplexConjugateImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkVnlFFTRealToComplexConjugateImageFilterTcl
#endif
#ifdef SWIGXML
%module itkVnlFFTRealToComplexConjugateImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "FFT.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkFFTRealToComplexConjugateImageFilter.i
%import wrap_vcl_complex.i


%include itk.i
%include wrap_itkVnlFFTRealToComplexConjugateImageFilter_ext.i


 class itkVnlFFTRealToComplexConjugateImageFilterF2 : public itkFFTRealToComplexConjugateImageFilterF2 {
   public:
     static itkVnlFFTRealToComplexConjugateImageFilterF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void GenerateData();
     virtual bool FullMatrix();
   private:
     vcl_complexF myConj(vcl_complexF const & __z);
     itkVnlFFTRealToComplexConjugateImageFilterF2(itkVnlFFTRealToComplexConjugateImageFilterF2 const & arg0);
     void operator=(itkVnlFFTRealToComplexConjugateImageFilterF2 const & arg0);
   protected:
     itkVnlFFTRealToComplexConjugateImageFilterF2();
     ~itkVnlFFTRealToComplexConjugateImageFilterF2();
     bool Legaldim(int n);
 };


 class itkVnlFFTRealToComplexConjugateImageFilterF2_Pointer {
   public:
     itkVnlFFTRealToComplexConjugateImageFilterF2_Pointer();
     itkVnlFFTRealToComplexConjugateImageFilterF2_Pointer(itkVnlFFTRealToComplexConjugateImageFilterF2_Pointer const & p);
     itkVnlFFTRealToComplexConjugateImageFilterF2_Pointer(itkVnlFFTRealToComplexConjugateImageFilterF2 * p);
     ~itkVnlFFTRealToComplexConjugateImageFilterF2_Pointer();
     itkVnlFFTRealToComplexConjugateImageFilterF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVnlFFTRealToComplexConjugateImageFilterF2 * GetPointer() const;
     bool operator<(itkVnlFFTRealToComplexConjugateImageFilterF2_Pointer const & r) const;
     bool operator>(itkVnlFFTRealToComplexConjugateImageFilterF2_Pointer const & r) const;
     bool operator<=(itkVnlFFTRealToComplexConjugateImageFilterF2_Pointer const & r) const;
     bool operator>=(itkVnlFFTRealToComplexConjugateImageFilterF2_Pointer const & r) const;
     itkVnlFFTRealToComplexConjugateImageFilterF2_Pointer & operator=(itkVnlFFTRealToComplexConjugateImageFilterF2_Pointer const & r);
     itkVnlFFTRealToComplexConjugateImageFilterF2_Pointer & operator=(itkVnlFFTRealToComplexConjugateImageFilterF2 * r);
     itkVnlFFTRealToComplexConjugateImageFilterF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVnlFFTRealToComplexConjugateImageFilterF3 : public itkFFTRealToComplexConjugateImageFilterF3 {
   public:
     static itkVnlFFTRealToComplexConjugateImageFilterF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void GenerateData();
     virtual bool FullMatrix();
   private:
     vcl_complexF myConj(vcl_complexF const & __z);
     itkVnlFFTRealToComplexConjugateImageFilterF3(itkVnlFFTRealToComplexConjugateImageFilterF3 const & arg0);
     void operator=(itkVnlFFTRealToComplexConjugateImageFilterF3 const & arg0);
   protected:
     itkVnlFFTRealToComplexConjugateImageFilterF3();
     ~itkVnlFFTRealToComplexConjugateImageFilterF3();
     bool Legaldim(int n);
 };


 class itkVnlFFTRealToComplexConjugateImageFilterF3_Pointer {
   public:
     itkVnlFFTRealToComplexConjugateImageFilterF3_Pointer();
     itkVnlFFTRealToComplexConjugateImageFilterF3_Pointer(itkVnlFFTRealToComplexConjugateImageFilterF3_Pointer const & p);
     itkVnlFFTRealToComplexConjugateImageFilterF3_Pointer(itkVnlFFTRealToComplexConjugateImageFilterF3 * p);
     ~itkVnlFFTRealToComplexConjugateImageFilterF3_Pointer();
     itkVnlFFTRealToComplexConjugateImageFilterF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVnlFFTRealToComplexConjugateImageFilterF3 * GetPointer() const;
     bool operator<(itkVnlFFTRealToComplexConjugateImageFilterF3_Pointer const & r) const;
     bool operator>(itkVnlFFTRealToComplexConjugateImageFilterF3_Pointer const & r) const;
     bool operator<=(itkVnlFFTRealToComplexConjugateImageFilterF3_Pointer const & r) const;
     bool operator>=(itkVnlFFTRealToComplexConjugateImageFilterF3_Pointer const & r) const;
     itkVnlFFTRealToComplexConjugateImageFilterF3_Pointer & operator=(itkVnlFFTRealToComplexConjugateImageFilterF3_Pointer const & r);
     itkVnlFFTRealToComplexConjugateImageFilterF3_Pointer & operator=(itkVnlFFTRealToComplexConjugateImageFilterF3 * r);
     itkVnlFFTRealToComplexConjugateImageFilterF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


