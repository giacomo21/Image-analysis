// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkBayesianClassifierImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkBayesianClassifierImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkBayesianClassifierImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkBayesianClassifierImageFilterJava
#endif
#ifdef SWIGLUA
%module itkBayesianClassifierImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkBayesianClassifierImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkBayesianClassifierImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkBayesianClassifierImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkBayesianClassifierImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkBayesianClassifierImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkBayesianClassifierImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkBayesianClassifierImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkBayesianClassifierImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkBayesianClassifierImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkBayesianClassifierImageFilterPython
#endif
#ifdef SWIGR
%module itkBayesianClassifierImageFilterR
#endif
#ifdef SWIGRUBY
%module itkBayesianClassifierImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkBayesianClassifierImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkBayesianClassifierImageFilterTcl
#endif
#ifdef SWIGXML
%module itkBayesianClassifierImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "SegmentationAndThreshold.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkImageToImageFilterB.i
%import wrap_itkImageToImageFilterA.i
%import wrap_itkVectorImage.i


%include itk.i
%include wrap_itkBayesianClassifierImageFilter_ext.i


 class itkBayesianClassifierImageFilterVID2UCDD : public itkImageToImageFilterVID2IUC2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVID2UCDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID2ID2 * arg0);
     virtual itkImageToImageFilterID2ID2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVID2UCDD(itkBayesianClassifierImageFilterVID2UCDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVID2UCDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVID2UCDD();
     ~itkBayesianClassifierImageFilterVID2UCDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVID2UCDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVID2UCDD_Pointer();
     itkBayesianClassifierImageFilterVID2UCDD_Pointer(itkBayesianClassifierImageFilterVID2UCDD_Pointer const & p);
     itkBayesianClassifierImageFilterVID2UCDD_Pointer(itkBayesianClassifierImageFilterVID2UCDD * p);
     ~itkBayesianClassifierImageFilterVID2UCDD_Pointer();
     itkBayesianClassifierImageFilterVID2UCDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVID2UCDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVID2UCDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVID2UCDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVID2UCDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVID2UCDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVID2UCDD_Pointer & operator=(itkBayesianClassifierImageFilterVID2UCDD_Pointer const & r);
     itkBayesianClassifierImageFilterVID2UCDD_Pointer & operator=(itkBayesianClassifierImageFilterVID2UCDD * r);
     itkBayesianClassifierImageFilterVID2UCDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVID2UCFF : public itkImageToImageFilterVID2IUC2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVID2UCFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF2IF2 * arg0);
     virtual itkImageToImageFilterIF2IF2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVID2UCFF(itkBayesianClassifierImageFilterVID2UCFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVID2UCFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVID2UCFF();
     ~itkBayesianClassifierImageFilterVID2UCFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVID2UCFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVID2UCFF_Pointer();
     itkBayesianClassifierImageFilterVID2UCFF_Pointer(itkBayesianClassifierImageFilterVID2UCFF_Pointer const & p);
     itkBayesianClassifierImageFilterVID2UCFF_Pointer(itkBayesianClassifierImageFilterVID2UCFF * p);
     ~itkBayesianClassifierImageFilterVID2UCFF_Pointer();
     itkBayesianClassifierImageFilterVID2UCFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVID2UCFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVID2UCFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVID2UCFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVID2UCFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVID2UCFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVID2UCFF_Pointer & operator=(itkBayesianClassifierImageFilterVID2UCFF_Pointer const & r);
     itkBayesianClassifierImageFilterVID2UCFF_Pointer & operator=(itkBayesianClassifierImageFilterVID2UCFF * r);
     itkBayesianClassifierImageFilterVID2UCFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVID2ULDD : public itkImageToImageFilterVID2IUL2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVID2ULDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID2ID2 * arg0);
     virtual itkImageToImageFilterID2ID2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVID2ULDD(itkBayesianClassifierImageFilterVID2ULDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVID2ULDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVID2ULDD();
     ~itkBayesianClassifierImageFilterVID2ULDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVID2ULDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVID2ULDD_Pointer();
     itkBayesianClassifierImageFilterVID2ULDD_Pointer(itkBayesianClassifierImageFilterVID2ULDD_Pointer const & p);
     itkBayesianClassifierImageFilterVID2ULDD_Pointer(itkBayesianClassifierImageFilterVID2ULDD * p);
     ~itkBayesianClassifierImageFilterVID2ULDD_Pointer();
     itkBayesianClassifierImageFilterVID2ULDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVID2ULDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVID2ULDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVID2ULDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVID2ULDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVID2ULDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVID2ULDD_Pointer & operator=(itkBayesianClassifierImageFilterVID2ULDD_Pointer const & r);
     itkBayesianClassifierImageFilterVID2ULDD_Pointer & operator=(itkBayesianClassifierImageFilterVID2ULDD * r);
     itkBayesianClassifierImageFilterVID2ULDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVID2ULFF : public itkImageToImageFilterVID2IUL2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVID2ULFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF2IF2 * arg0);
     virtual itkImageToImageFilterIF2IF2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVID2ULFF(itkBayesianClassifierImageFilterVID2ULFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVID2ULFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVID2ULFF();
     ~itkBayesianClassifierImageFilterVID2ULFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVID2ULFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVID2ULFF_Pointer();
     itkBayesianClassifierImageFilterVID2ULFF_Pointer(itkBayesianClassifierImageFilterVID2ULFF_Pointer const & p);
     itkBayesianClassifierImageFilterVID2ULFF_Pointer(itkBayesianClassifierImageFilterVID2ULFF * p);
     ~itkBayesianClassifierImageFilterVID2ULFF_Pointer();
     itkBayesianClassifierImageFilterVID2ULFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVID2ULFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVID2ULFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVID2ULFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVID2ULFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVID2ULFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVID2ULFF_Pointer & operator=(itkBayesianClassifierImageFilterVID2ULFF_Pointer const & r);
     itkBayesianClassifierImageFilterVID2ULFF_Pointer & operator=(itkBayesianClassifierImageFilterVID2ULFF * r);
     itkBayesianClassifierImageFilterVID2ULFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVID2USDD : public itkImageToImageFilterVID2IUS2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVID2USDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID2ID2 * arg0);
     virtual itkImageToImageFilterID2ID2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVID2USDD(itkBayesianClassifierImageFilterVID2USDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVID2USDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVID2USDD();
     ~itkBayesianClassifierImageFilterVID2USDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVID2USDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVID2USDD_Pointer();
     itkBayesianClassifierImageFilterVID2USDD_Pointer(itkBayesianClassifierImageFilterVID2USDD_Pointer const & p);
     itkBayesianClassifierImageFilterVID2USDD_Pointer(itkBayesianClassifierImageFilterVID2USDD * p);
     ~itkBayesianClassifierImageFilterVID2USDD_Pointer();
     itkBayesianClassifierImageFilterVID2USDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVID2USDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVID2USDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVID2USDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVID2USDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVID2USDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVID2USDD_Pointer & operator=(itkBayesianClassifierImageFilterVID2USDD_Pointer const & r);
     itkBayesianClassifierImageFilterVID2USDD_Pointer & operator=(itkBayesianClassifierImageFilterVID2USDD * r);
     itkBayesianClassifierImageFilterVID2USDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVID2USFF : public itkImageToImageFilterVID2IUS2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVID2USFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF2IF2 * arg0);
     virtual itkImageToImageFilterIF2IF2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVID2USFF(itkBayesianClassifierImageFilterVID2USFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVID2USFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVID2USFF();
     ~itkBayesianClassifierImageFilterVID2USFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVID2USFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVID2USFF_Pointer();
     itkBayesianClassifierImageFilterVID2USFF_Pointer(itkBayesianClassifierImageFilterVID2USFF_Pointer const & p);
     itkBayesianClassifierImageFilterVID2USFF_Pointer(itkBayesianClassifierImageFilterVID2USFF * p);
     ~itkBayesianClassifierImageFilterVID2USFF_Pointer();
     itkBayesianClassifierImageFilterVID2USFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVID2USFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVID2USFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVID2USFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVID2USFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVID2USFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVID2USFF_Pointer & operator=(itkBayesianClassifierImageFilterVID2USFF_Pointer const & r);
     itkBayesianClassifierImageFilterVID2USFF_Pointer & operator=(itkBayesianClassifierImageFilterVID2USFF * r);
     itkBayesianClassifierImageFilterVID2USFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVID3UCDD : public itkImageToImageFilterVID3IUC3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVID3UCDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID3ID3 * arg0);
     virtual itkImageToImageFilterID3ID3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVID3UCDD(itkBayesianClassifierImageFilterVID3UCDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVID3UCDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVID3UCDD();
     ~itkBayesianClassifierImageFilterVID3UCDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVID3UCDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVID3UCDD_Pointer();
     itkBayesianClassifierImageFilterVID3UCDD_Pointer(itkBayesianClassifierImageFilterVID3UCDD_Pointer const & p);
     itkBayesianClassifierImageFilterVID3UCDD_Pointer(itkBayesianClassifierImageFilterVID3UCDD * p);
     ~itkBayesianClassifierImageFilterVID3UCDD_Pointer();
     itkBayesianClassifierImageFilterVID3UCDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVID3UCDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVID3UCDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVID3UCDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVID3UCDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVID3UCDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVID3UCDD_Pointer & operator=(itkBayesianClassifierImageFilterVID3UCDD_Pointer const & r);
     itkBayesianClassifierImageFilterVID3UCDD_Pointer & operator=(itkBayesianClassifierImageFilterVID3UCDD * r);
     itkBayesianClassifierImageFilterVID3UCDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVID3UCFF : public itkImageToImageFilterVID3IUC3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVID3UCFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF3IF3 * arg0);
     virtual itkImageToImageFilterIF3IF3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVID3UCFF(itkBayesianClassifierImageFilterVID3UCFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVID3UCFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVID3UCFF();
     ~itkBayesianClassifierImageFilterVID3UCFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVID3UCFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVID3UCFF_Pointer();
     itkBayesianClassifierImageFilterVID3UCFF_Pointer(itkBayesianClassifierImageFilterVID3UCFF_Pointer const & p);
     itkBayesianClassifierImageFilterVID3UCFF_Pointer(itkBayesianClassifierImageFilterVID3UCFF * p);
     ~itkBayesianClassifierImageFilterVID3UCFF_Pointer();
     itkBayesianClassifierImageFilterVID3UCFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVID3UCFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVID3UCFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVID3UCFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVID3UCFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVID3UCFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVID3UCFF_Pointer & operator=(itkBayesianClassifierImageFilterVID3UCFF_Pointer const & r);
     itkBayesianClassifierImageFilterVID3UCFF_Pointer & operator=(itkBayesianClassifierImageFilterVID3UCFF * r);
     itkBayesianClassifierImageFilterVID3UCFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVID3ULDD : public itkImageToImageFilterVID3IUL3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVID3ULDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID3ID3 * arg0);
     virtual itkImageToImageFilterID3ID3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVID3ULDD(itkBayesianClassifierImageFilterVID3ULDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVID3ULDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVID3ULDD();
     ~itkBayesianClassifierImageFilterVID3ULDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVID3ULDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVID3ULDD_Pointer();
     itkBayesianClassifierImageFilterVID3ULDD_Pointer(itkBayesianClassifierImageFilterVID3ULDD_Pointer const & p);
     itkBayesianClassifierImageFilterVID3ULDD_Pointer(itkBayesianClassifierImageFilterVID3ULDD * p);
     ~itkBayesianClassifierImageFilterVID3ULDD_Pointer();
     itkBayesianClassifierImageFilterVID3ULDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVID3ULDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVID3ULDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVID3ULDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVID3ULDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVID3ULDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVID3ULDD_Pointer & operator=(itkBayesianClassifierImageFilterVID3ULDD_Pointer const & r);
     itkBayesianClassifierImageFilterVID3ULDD_Pointer & operator=(itkBayesianClassifierImageFilterVID3ULDD * r);
     itkBayesianClassifierImageFilterVID3ULDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVID3ULFF : public itkImageToImageFilterVID3IUL3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVID3ULFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF3IF3 * arg0);
     virtual itkImageToImageFilterIF3IF3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVID3ULFF(itkBayesianClassifierImageFilterVID3ULFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVID3ULFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVID3ULFF();
     ~itkBayesianClassifierImageFilterVID3ULFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVID3ULFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVID3ULFF_Pointer();
     itkBayesianClassifierImageFilterVID3ULFF_Pointer(itkBayesianClassifierImageFilterVID3ULFF_Pointer const & p);
     itkBayesianClassifierImageFilterVID3ULFF_Pointer(itkBayesianClassifierImageFilterVID3ULFF * p);
     ~itkBayesianClassifierImageFilterVID3ULFF_Pointer();
     itkBayesianClassifierImageFilterVID3ULFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVID3ULFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVID3ULFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVID3ULFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVID3ULFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVID3ULFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVID3ULFF_Pointer & operator=(itkBayesianClassifierImageFilterVID3ULFF_Pointer const & r);
     itkBayesianClassifierImageFilterVID3ULFF_Pointer & operator=(itkBayesianClassifierImageFilterVID3ULFF * r);
     itkBayesianClassifierImageFilterVID3ULFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVID3USDD : public itkImageToImageFilterVID3IUS3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVID3USDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID3ID3 * arg0);
     virtual itkImageToImageFilterID3ID3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVID3USDD(itkBayesianClassifierImageFilterVID3USDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVID3USDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVID3USDD();
     ~itkBayesianClassifierImageFilterVID3USDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVID3USDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVID3USDD_Pointer();
     itkBayesianClassifierImageFilterVID3USDD_Pointer(itkBayesianClassifierImageFilterVID3USDD_Pointer const & p);
     itkBayesianClassifierImageFilterVID3USDD_Pointer(itkBayesianClassifierImageFilterVID3USDD * p);
     ~itkBayesianClassifierImageFilterVID3USDD_Pointer();
     itkBayesianClassifierImageFilterVID3USDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVID3USDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVID3USDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVID3USDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVID3USDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVID3USDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVID3USDD_Pointer & operator=(itkBayesianClassifierImageFilterVID3USDD_Pointer const & r);
     itkBayesianClassifierImageFilterVID3USDD_Pointer & operator=(itkBayesianClassifierImageFilterVID3USDD * r);
     itkBayesianClassifierImageFilterVID3USDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVID3USFF : public itkImageToImageFilterVID3IUS3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVID3USFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF3IF3 * arg0);
     virtual itkImageToImageFilterIF3IF3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVID3USFF(itkBayesianClassifierImageFilterVID3USFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVID3USFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVID3USFF();
     ~itkBayesianClassifierImageFilterVID3USFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVID3USFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVID3USFF_Pointer();
     itkBayesianClassifierImageFilterVID3USFF_Pointer(itkBayesianClassifierImageFilterVID3USFF_Pointer const & p);
     itkBayesianClassifierImageFilterVID3USFF_Pointer(itkBayesianClassifierImageFilterVID3USFF * p);
     ~itkBayesianClassifierImageFilterVID3USFF_Pointer();
     itkBayesianClassifierImageFilterVID3USFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVID3USFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVID3USFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVID3USFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVID3USFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVID3USFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVID3USFF_Pointer & operator=(itkBayesianClassifierImageFilterVID3USFF_Pointer const & r);
     itkBayesianClassifierImageFilterVID3USFF_Pointer & operator=(itkBayesianClassifierImageFilterVID3USFF * r);
     itkBayesianClassifierImageFilterVID3USFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIF2UCDD : public itkImageToImageFilterVIF2IUC2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIF2UCDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID2ID2 * arg0);
     virtual itkImageToImageFilterID2ID2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIF2UCDD(itkBayesianClassifierImageFilterVIF2UCDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIF2UCDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIF2UCDD();
     ~itkBayesianClassifierImageFilterVIF2UCDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIF2UCDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVIF2UCDD_Pointer();
     itkBayesianClassifierImageFilterVIF2UCDD_Pointer(itkBayesianClassifierImageFilterVIF2UCDD_Pointer const & p);
     itkBayesianClassifierImageFilterVIF2UCDD_Pointer(itkBayesianClassifierImageFilterVIF2UCDD * p);
     ~itkBayesianClassifierImageFilterVIF2UCDD_Pointer();
     itkBayesianClassifierImageFilterVIF2UCDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIF2UCDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIF2UCDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIF2UCDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIF2UCDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIF2UCDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIF2UCDD_Pointer & operator=(itkBayesianClassifierImageFilterVIF2UCDD_Pointer const & r);
     itkBayesianClassifierImageFilterVIF2UCDD_Pointer & operator=(itkBayesianClassifierImageFilterVIF2UCDD * r);
     itkBayesianClassifierImageFilterVIF2UCDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIF2UCFF : public itkImageToImageFilterVIF2IUC2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIF2UCFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF2IF2 * arg0);
     virtual itkImageToImageFilterIF2IF2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIF2UCFF(itkBayesianClassifierImageFilterVIF2UCFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIF2UCFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIF2UCFF();
     ~itkBayesianClassifierImageFilterVIF2UCFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIF2UCFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVIF2UCFF_Pointer();
     itkBayesianClassifierImageFilterVIF2UCFF_Pointer(itkBayesianClassifierImageFilterVIF2UCFF_Pointer const & p);
     itkBayesianClassifierImageFilterVIF2UCFF_Pointer(itkBayesianClassifierImageFilterVIF2UCFF * p);
     ~itkBayesianClassifierImageFilterVIF2UCFF_Pointer();
     itkBayesianClassifierImageFilterVIF2UCFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIF2UCFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIF2UCFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIF2UCFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIF2UCFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIF2UCFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIF2UCFF_Pointer & operator=(itkBayesianClassifierImageFilterVIF2UCFF_Pointer const & r);
     itkBayesianClassifierImageFilterVIF2UCFF_Pointer & operator=(itkBayesianClassifierImageFilterVIF2UCFF * r);
     itkBayesianClassifierImageFilterVIF2UCFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIF2ULDD : public itkImageToImageFilterVIF2IUL2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIF2ULDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID2ID2 * arg0);
     virtual itkImageToImageFilterID2ID2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIF2ULDD(itkBayesianClassifierImageFilterVIF2ULDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIF2ULDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIF2ULDD();
     ~itkBayesianClassifierImageFilterVIF2ULDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIF2ULDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVIF2ULDD_Pointer();
     itkBayesianClassifierImageFilterVIF2ULDD_Pointer(itkBayesianClassifierImageFilterVIF2ULDD_Pointer const & p);
     itkBayesianClassifierImageFilterVIF2ULDD_Pointer(itkBayesianClassifierImageFilterVIF2ULDD * p);
     ~itkBayesianClassifierImageFilterVIF2ULDD_Pointer();
     itkBayesianClassifierImageFilterVIF2ULDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIF2ULDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIF2ULDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIF2ULDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIF2ULDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIF2ULDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIF2ULDD_Pointer & operator=(itkBayesianClassifierImageFilterVIF2ULDD_Pointer const & r);
     itkBayesianClassifierImageFilterVIF2ULDD_Pointer & operator=(itkBayesianClassifierImageFilterVIF2ULDD * r);
     itkBayesianClassifierImageFilterVIF2ULDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIF2ULFF : public itkImageToImageFilterVIF2IUL2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIF2ULFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF2IF2 * arg0);
     virtual itkImageToImageFilterIF2IF2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIF2ULFF(itkBayesianClassifierImageFilterVIF2ULFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIF2ULFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIF2ULFF();
     ~itkBayesianClassifierImageFilterVIF2ULFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIF2ULFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVIF2ULFF_Pointer();
     itkBayesianClassifierImageFilterVIF2ULFF_Pointer(itkBayesianClassifierImageFilterVIF2ULFF_Pointer const & p);
     itkBayesianClassifierImageFilterVIF2ULFF_Pointer(itkBayesianClassifierImageFilterVIF2ULFF * p);
     ~itkBayesianClassifierImageFilterVIF2ULFF_Pointer();
     itkBayesianClassifierImageFilterVIF2ULFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIF2ULFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIF2ULFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIF2ULFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIF2ULFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIF2ULFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIF2ULFF_Pointer & operator=(itkBayesianClassifierImageFilterVIF2ULFF_Pointer const & r);
     itkBayesianClassifierImageFilterVIF2ULFF_Pointer & operator=(itkBayesianClassifierImageFilterVIF2ULFF * r);
     itkBayesianClassifierImageFilterVIF2ULFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIF2USDD : public itkImageToImageFilterVIF2IUS2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIF2USDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID2ID2 * arg0);
     virtual itkImageToImageFilterID2ID2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIF2USDD(itkBayesianClassifierImageFilterVIF2USDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIF2USDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIF2USDD();
     ~itkBayesianClassifierImageFilterVIF2USDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIF2USDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVIF2USDD_Pointer();
     itkBayesianClassifierImageFilterVIF2USDD_Pointer(itkBayesianClassifierImageFilterVIF2USDD_Pointer const & p);
     itkBayesianClassifierImageFilterVIF2USDD_Pointer(itkBayesianClassifierImageFilterVIF2USDD * p);
     ~itkBayesianClassifierImageFilterVIF2USDD_Pointer();
     itkBayesianClassifierImageFilterVIF2USDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIF2USDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIF2USDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIF2USDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIF2USDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIF2USDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIF2USDD_Pointer & operator=(itkBayesianClassifierImageFilterVIF2USDD_Pointer const & r);
     itkBayesianClassifierImageFilterVIF2USDD_Pointer & operator=(itkBayesianClassifierImageFilterVIF2USDD * r);
     itkBayesianClassifierImageFilterVIF2USDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIF2USFF : public itkImageToImageFilterVIF2IUS2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIF2USFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF2IF2 * arg0);
     virtual itkImageToImageFilterIF2IF2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIF2USFF(itkBayesianClassifierImageFilterVIF2USFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIF2USFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIF2USFF();
     ~itkBayesianClassifierImageFilterVIF2USFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIF2USFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVIF2USFF_Pointer();
     itkBayesianClassifierImageFilterVIF2USFF_Pointer(itkBayesianClassifierImageFilterVIF2USFF_Pointer const & p);
     itkBayesianClassifierImageFilterVIF2USFF_Pointer(itkBayesianClassifierImageFilterVIF2USFF * p);
     ~itkBayesianClassifierImageFilterVIF2USFF_Pointer();
     itkBayesianClassifierImageFilterVIF2USFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIF2USFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIF2USFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIF2USFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIF2USFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIF2USFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIF2USFF_Pointer & operator=(itkBayesianClassifierImageFilterVIF2USFF_Pointer const & r);
     itkBayesianClassifierImageFilterVIF2USFF_Pointer & operator=(itkBayesianClassifierImageFilterVIF2USFF * r);
     itkBayesianClassifierImageFilterVIF2USFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIF3UCDD : public itkImageToImageFilterVIF3IUC3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIF3UCDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID3ID3 * arg0);
     virtual itkImageToImageFilterID3ID3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIF3UCDD(itkBayesianClassifierImageFilterVIF3UCDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIF3UCDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIF3UCDD();
     ~itkBayesianClassifierImageFilterVIF3UCDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIF3UCDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVIF3UCDD_Pointer();
     itkBayesianClassifierImageFilterVIF3UCDD_Pointer(itkBayesianClassifierImageFilterVIF3UCDD_Pointer const & p);
     itkBayesianClassifierImageFilterVIF3UCDD_Pointer(itkBayesianClassifierImageFilterVIF3UCDD * p);
     ~itkBayesianClassifierImageFilterVIF3UCDD_Pointer();
     itkBayesianClassifierImageFilterVIF3UCDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIF3UCDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIF3UCDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIF3UCDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIF3UCDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIF3UCDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIF3UCDD_Pointer & operator=(itkBayesianClassifierImageFilterVIF3UCDD_Pointer const & r);
     itkBayesianClassifierImageFilterVIF3UCDD_Pointer & operator=(itkBayesianClassifierImageFilterVIF3UCDD * r);
     itkBayesianClassifierImageFilterVIF3UCDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIF3UCFF : public itkImageToImageFilterVIF3IUC3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIF3UCFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF3IF3 * arg0);
     virtual itkImageToImageFilterIF3IF3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIF3UCFF(itkBayesianClassifierImageFilterVIF3UCFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIF3UCFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIF3UCFF();
     ~itkBayesianClassifierImageFilterVIF3UCFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIF3UCFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVIF3UCFF_Pointer();
     itkBayesianClassifierImageFilterVIF3UCFF_Pointer(itkBayesianClassifierImageFilterVIF3UCFF_Pointer const & p);
     itkBayesianClassifierImageFilterVIF3UCFF_Pointer(itkBayesianClassifierImageFilterVIF3UCFF * p);
     ~itkBayesianClassifierImageFilterVIF3UCFF_Pointer();
     itkBayesianClassifierImageFilterVIF3UCFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIF3UCFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIF3UCFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIF3UCFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIF3UCFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIF3UCFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIF3UCFF_Pointer & operator=(itkBayesianClassifierImageFilterVIF3UCFF_Pointer const & r);
     itkBayesianClassifierImageFilterVIF3UCFF_Pointer & operator=(itkBayesianClassifierImageFilterVIF3UCFF * r);
     itkBayesianClassifierImageFilterVIF3UCFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIF3ULDD : public itkImageToImageFilterVIF3IUL3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIF3ULDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID3ID3 * arg0);
     virtual itkImageToImageFilterID3ID3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIF3ULDD(itkBayesianClassifierImageFilterVIF3ULDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIF3ULDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIF3ULDD();
     ~itkBayesianClassifierImageFilterVIF3ULDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIF3ULDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVIF3ULDD_Pointer();
     itkBayesianClassifierImageFilterVIF3ULDD_Pointer(itkBayesianClassifierImageFilterVIF3ULDD_Pointer const & p);
     itkBayesianClassifierImageFilterVIF3ULDD_Pointer(itkBayesianClassifierImageFilterVIF3ULDD * p);
     ~itkBayesianClassifierImageFilterVIF3ULDD_Pointer();
     itkBayesianClassifierImageFilterVIF3ULDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIF3ULDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIF3ULDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIF3ULDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIF3ULDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIF3ULDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIF3ULDD_Pointer & operator=(itkBayesianClassifierImageFilterVIF3ULDD_Pointer const & r);
     itkBayesianClassifierImageFilterVIF3ULDD_Pointer & operator=(itkBayesianClassifierImageFilterVIF3ULDD * r);
     itkBayesianClassifierImageFilterVIF3ULDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIF3ULFF : public itkImageToImageFilterVIF3IUL3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIF3ULFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF3IF3 * arg0);
     virtual itkImageToImageFilterIF3IF3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIF3ULFF(itkBayesianClassifierImageFilterVIF3ULFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIF3ULFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIF3ULFF();
     ~itkBayesianClassifierImageFilterVIF3ULFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIF3ULFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVIF3ULFF_Pointer();
     itkBayesianClassifierImageFilterVIF3ULFF_Pointer(itkBayesianClassifierImageFilterVIF3ULFF_Pointer const & p);
     itkBayesianClassifierImageFilterVIF3ULFF_Pointer(itkBayesianClassifierImageFilterVIF3ULFF * p);
     ~itkBayesianClassifierImageFilterVIF3ULFF_Pointer();
     itkBayesianClassifierImageFilterVIF3ULFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIF3ULFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIF3ULFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIF3ULFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIF3ULFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIF3ULFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIF3ULFF_Pointer & operator=(itkBayesianClassifierImageFilterVIF3ULFF_Pointer const & r);
     itkBayesianClassifierImageFilterVIF3ULFF_Pointer & operator=(itkBayesianClassifierImageFilterVIF3ULFF * r);
     itkBayesianClassifierImageFilterVIF3ULFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIF3USDD : public itkImageToImageFilterVIF3IUS3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIF3USDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID3ID3 * arg0);
     virtual itkImageToImageFilterID3ID3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIF3USDD(itkBayesianClassifierImageFilterVIF3USDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIF3USDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIF3USDD();
     ~itkBayesianClassifierImageFilterVIF3USDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIF3USDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVIF3USDD_Pointer();
     itkBayesianClassifierImageFilterVIF3USDD_Pointer(itkBayesianClassifierImageFilterVIF3USDD_Pointer const & p);
     itkBayesianClassifierImageFilterVIF3USDD_Pointer(itkBayesianClassifierImageFilterVIF3USDD * p);
     ~itkBayesianClassifierImageFilterVIF3USDD_Pointer();
     itkBayesianClassifierImageFilterVIF3USDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIF3USDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIF3USDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIF3USDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIF3USDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIF3USDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIF3USDD_Pointer & operator=(itkBayesianClassifierImageFilterVIF3USDD_Pointer const & r);
     itkBayesianClassifierImageFilterVIF3USDD_Pointer & operator=(itkBayesianClassifierImageFilterVIF3USDD * r);
     itkBayesianClassifierImageFilterVIF3USDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIF3USFF : public itkImageToImageFilterVIF3IUS3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIF3USFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF3IF3 * arg0);
     virtual itkImageToImageFilterIF3IF3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIF3USFF(itkBayesianClassifierImageFilterVIF3USFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIF3USFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIF3USFF();
     ~itkBayesianClassifierImageFilterVIF3USFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIF3USFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVIF3USFF_Pointer();
     itkBayesianClassifierImageFilterVIF3USFF_Pointer(itkBayesianClassifierImageFilterVIF3USFF_Pointer const & p);
     itkBayesianClassifierImageFilterVIF3USFF_Pointer(itkBayesianClassifierImageFilterVIF3USFF * p);
     ~itkBayesianClassifierImageFilterVIF3USFF_Pointer();
     itkBayesianClassifierImageFilterVIF3USFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIF3USFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIF3USFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIF3USFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIF3USFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIF3USFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIF3USFF_Pointer & operator=(itkBayesianClassifierImageFilterVIF3USFF_Pointer const & r);
     itkBayesianClassifierImageFilterVIF3USFF_Pointer & operator=(itkBayesianClassifierImageFilterVIF3USFF * r);
     itkBayesianClassifierImageFilterVIF3USFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUC2UCDD : public itkImageToImageFilterVIUC2IUC2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUC2UCDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID2ID2 * arg0);
     virtual itkImageToImageFilterID2ID2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUC2UCDD(itkBayesianClassifierImageFilterVIUC2UCDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUC2UCDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUC2UCDD();
     ~itkBayesianClassifierImageFilterVIUC2UCDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUC2UCDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUC2UCDD_Pointer();
     itkBayesianClassifierImageFilterVIUC2UCDD_Pointer(itkBayesianClassifierImageFilterVIUC2UCDD_Pointer const & p);
     itkBayesianClassifierImageFilterVIUC2UCDD_Pointer(itkBayesianClassifierImageFilterVIUC2UCDD * p);
     ~itkBayesianClassifierImageFilterVIUC2UCDD_Pointer();
     itkBayesianClassifierImageFilterVIUC2UCDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUC2UCDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUC2UCDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUC2UCDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUC2UCDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUC2UCDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUC2UCDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUC2UCDD_Pointer const & r);
     itkBayesianClassifierImageFilterVIUC2UCDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUC2UCDD * r);
     itkBayesianClassifierImageFilterVIUC2UCDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUC2UCFF : public itkImageToImageFilterVIUC2IUC2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUC2UCFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF2IF2 * arg0);
     virtual itkImageToImageFilterIF2IF2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUC2UCFF(itkBayesianClassifierImageFilterVIUC2UCFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUC2UCFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUC2UCFF();
     ~itkBayesianClassifierImageFilterVIUC2UCFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUC2UCFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUC2UCFF_Pointer();
     itkBayesianClassifierImageFilterVIUC2UCFF_Pointer(itkBayesianClassifierImageFilterVIUC2UCFF_Pointer const & p);
     itkBayesianClassifierImageFilterVIUC2UCFF_Pointer(itkBayesianClassifierImageFilterVIUC2UCFF * p);
     ~itkBayesianClassifierImageFilterVIUC2UCFF_Pointer();
     itkBayesianClassifierImageFilterVIUC2UCFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUC2UCFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUC2UCFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUC2UCFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUC2UCFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUC2UCFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUC2UCFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUC2UCFF_Pointer const & r);
     itkBayesianClassifierImageFilterVIUC2UCFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUC2UCFF * r);
     itkBayesianClassifierImageFilterVIUC2UCFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUC2ULDD : public itkImageToImageFilterVIUC2IUL2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUC2ULDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID2ID2 * arg0);
     virtual itkImageToImageFilterID2ID2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUC2ULDD(itkBayesianClassifierImageFilterVIUC2ULDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUC2ULDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUC2ULDD();
     ~itkBayesianClassifierImageFilterVIUC2ULDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUC2ULDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUC2ULDD_Pointer();
     itkBayesianClassifierImageFilterVIUC2ULDD_Pointer(itkBayesianClassifierImageFilterVIUC2ULDD_Pointer const & p);
     itkBayesianClassifierImageFilterVIUC2ULDD_Pointer(itkBayesianClassifierImageFilterVIUC2ULDD * p);
     ~itkBayesianClassifierImageFilterVIUC2ULDD_Pointer();
     itkBayesianClassifierImageFilterVIUC2ULDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUC2ULDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUC2ULDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUC2ULDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUC2ULDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUC2ULDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUC2ULDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUC2ULDD_Pointer const & r);
     itkBayesianClassifierImageFilterVIUC2ULDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUC2ULDD * r);
     itkBayesianClassifierImageFilterVIUC2ULDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUC2ULFF : public itkImageToImageFilterVIUC2IUL2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUC2ULFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF2IF2 * arg0);
     virtual itkImageToImageFilterIF2IF2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUC2ULFF(itkBayesianClassifierImageFilterVIUC2ULFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUC2ULFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUC2ULFF();
     ~itkBayesianClassifierImageFilterVIUC2ULFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUC2ULFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUC2ULFF_Pointer();
     itkBayesianClassifierImageFilterVIUC2ULFF_Pointer(itkBayesianClassifierImageFilterVIUC2ULFF_Pointer const & p);
     itkBayesianClassifierImageFilterVIUC2ULFF_Pointer(itkBayesianClassifierImageFilterVIUC2ULFF * p);
     ~itkBayesianClassifierImageFilterVIUC2ULFF_Pointer();
     itkBayesianClassifierImageFilterVIUC2ULFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUC2ULFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUC2ULFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUC2ULFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUC2ULFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUC2ULFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUC2ULFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUC2ULFF_Pointer const & r);
     itkBayesianClassifierImageFilterVIUC2ULFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUC2ULFF * r);
     itkBayesianClassifierImageFilterVIUC2ULFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUC2USDD : public itkImageToImageFilterVIUC2IUS2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUC2USDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID2ID2 * arg0);
     virtual itkImageToImageFilterID2ID2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUC2USDD(itkBayesianClassifierImageFilterVIUC2USDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUC2USDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUC2USDD();
     ~itkBayesianClassifierImageFilterVIUC2USDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUC2USDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUC2USDD_Pointer();
     itkBayesianClassifierImageFilterVIUC2USDD_Pointer(itkBayesianClassifierImageFilterVIUC2USDD_Pointer const & p);
     itkBayesianClassifierImageFilterVIUC2USDD_Pointer(itkBayesianClassifierImageFilterVIUC2USDD * p);
     ~itkBayesianClassifierImageFilterVIUC2USDD_Pointer();
     itkBayesianClassifierImageFilterVIUC2USDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUC2USDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUC2USDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUC2USDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUC2USDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUC2USDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUC2USDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUC2USDD_Pointer const & r);
     itkBayesianClassifierImageFilterVIUC2USDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUC2USDD * r);
     itkBayesianClassifierImageFilterVIUC2USDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUC2USFF : public itkImageToImageFilterVIUC2IUS2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUC2USFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF2IF2 * arg0);
     virtual itkImageToImageFilterIF2IF2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUC2USFF(itkBayesianClassifierImageFilterVIUC2USFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUC2USFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUC2USFF();
     ~itkBayesianClassifierImageFilterVIUC2USFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUC2USFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUC2USFF_Pointer();
     itkBayesianClassifierImageFilterVIUC2USFF_Pointer(itkBayesianClassifierImageFilterVIUC2USFF_Pointer const & p);
     itkBayesianClassifierImageFilterVIUC2USFF_Pointer(itkBayesianClassifierImageFilterVIUC2USFF * p);
     ~itkBayesianClassifierImageFilterVIUC2USFF_Pointer();
     itkBayesianClassifierImageFilterVIUC2USFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUC2USFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUC2USFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUC2USFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUC2USFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUC2USFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUC2USFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUC2USFF_Pointer const & r);
     itkBayesianClassifierImageFilterVIUC2USFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUC2USFF * r);
     itkBayesianClassifierImageFilterVIUC2USFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUC3UCDD : public itkImageToImageFilterVIUC3IUC3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUC3UCDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID3ID3 * arg0);
     virtual itkImageToImageFilterID3ID3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUC3UCDD(itkBayesianClassifierImageFilterVIUC3UCDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUC3UCDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUC3UCDD();
     ~itkBayesianClassifierImageFilterVIUC3UCDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUC3UCDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUC3UCDD_Pointer();
     itkBayesianClassifierImageFilterVIUC3UCDD_Pointer(itkBayesianClassifierImageFilterVIUC3UCDD_Pointer const & p);
     itkBayesianClassifierImageFilterVIUC3UCDD_Pointer(itkBayesianClassifierImageFilterVIUC3UCDD * p);
     ~itkBayesianClassifierImageFilterVIUC3UCDD_Pointer();
     itkBayesianClassifierImageFilterVIUC3UCDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUC3UCDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUC3UCDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUC3UCDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUC3UCDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUC3UCDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUC3UCDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUC3UCDD_Pointer const & r);
     itkBayesianClassifierImageFilterVIUC3UCDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUC3UCDD * r);
     itkBayesianClassifierImageFilterVIUC3UCDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUC3UCFF : public itkImageToImageFilterVIUC3IUC3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUC3UCFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF3IF3 * arg0);
     virtual itkImageToImageFilterIF3IF3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUC3UCFF(itkBayesianClassifierImageFilterVIUC3UCFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUC3UCFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUC3UCFF();
     ~itkBayesianClassifierImageFilterVIUC3UCFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUC3UCFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUC3UCFF_Pointer();
     itkBayesianClassifierImageFilterVIUC3UCFF_Pointer(itkBayesianClassifierImageFilterVIUC3UCFF_Pointer const & p);
     itkBayesianClassifierImageFilterVIUC3UCFF_Pointer(itkBayesianClassifierImageFilterVIUC3UCFF * p);
     ~itkBayesianClassifierImageFilterVIUC3UCFF_Pointer();
     itkBayesianClassifierImageFilterVIUC3UCFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUC3UCFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUC3UCFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUC3UCFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUC3UCFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUC3UCFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUC3UCFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUC3UCFF_Pointer const & r);
     itkBayesianClassifierImageFilterVIUC3UCFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUC3UCFF * r);
     itkBayesianClassifierImageFilterVIUC3UCFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUC3ULDD : public itkImageToImageFilterVIUC3IUL3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUC3ULDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID3ID3 * arg0);
     virtual itkImageToImageFilterID3ID3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUC3ULDD(itkBayesianClassifierImageFilterVIUC3ULDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUC3ULDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUC3ULDD();
     ~itkBayesianClassifierImageFilterVIUC3ULDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUC3ULDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUC3ULDD_Pointer();
     itkBayesianClassifierImageFilterVIUC3ULDD_Pointer(itkBayesianClassifierImageFilterVIUC3ULDD_Pointer const & p);
     itkBayesianClassifierImageFilterVIUC3ULDD_Pointer(itkBayesianClassifierImageFilterVIUC3ULDD * p);
     ~itkBayesianClassifierImageFilterVIUC3ULDD_Pointer();
     itkBayesianClassifierImageFilterVIUC3ULDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUC3ULDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUC3ULDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUC3ULDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUC3ULDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUC3ULDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUC3ULDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUC3ULDD_Pointer const & r);
     itkBayesianClassifierImageFilterVIUC3ULDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUC3ULDD * r);
     itkBayesianClassifierImageFilterVIUC3ULDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUC3ULFF : public itkImageToImageFilterVIUC3IUL3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUC3ULFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF3IF3 * arg0);
     virtual itkImageToImageFilterIF3IF3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUC3ULFF(itkBayesianClassifierImageFilterVIUC3ULFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUC3ULFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUC3ULFF();
     ~itkBayesianClassifierImageFilterVIUC3ULFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUC3ULFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUC3ULFF_Pointer();
     itkBayesianClassifierImageFilterVIUC3ULFF_Pointer(itkBayesianClassifierImageFilterVIUC3ULFF_Pointer const & p);
     itkBayesianClassifierImageFilterVIUC3ULFF_Pointer(itkBayesianClassifierImageFilterVIUC3ULFF * p);
     ~itkBayesianClassifierImageFilterVIUC3ULFF_Pointer();
     itkBayesianClassifierImageFilterVIUC3ULFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUC3ULFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUC3ULFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUC3ULFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUC3ULFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUC3ULFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUC3ULFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUC3ULFF_Pointer const & r);
     itkBayesianClassifierImageFilterVIUC3ULFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUC3ULFF * r);
     itkBayesianClassifierImageFilterVIUC3ULFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUC3USDD : public itkImageToImageFilterVIUC3IUS3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUC3USDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID3ID3 * arg0);
     virtual itkImageToImageFilterID3ID3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUC3USDD(itkBayesianClassifierImageFilterVIUC3USDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUC3USDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUC3USDD();
     ~itkBayesianClassifierImageFilterVIUC3USDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUC3USDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUC3USDD_Pointer();
     itkBayesianClassifierImageFilterVIUC3USDD_Pointer(itkBayesianClassifierImageFilterVIUC3USDD_Pointer const & p);
     itkBayesianClassifierImageFilterVIUC3USDD_Pointer(itkBayesianClassifierImageFilterVIUC3USDD * p);
     ~itkBayesianClassifierImageFilterVIUC3USDD_Pointer();
     itkBayesianClassifierImageFilterVIUC3USDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUC3USDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUC3USDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUC3USDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUC3USDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUC3USDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUC3USDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUC3USDD_Pointer const & r);
     itkBayesianClassifierImageFilterVIUC3USDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUC3USDD * r);
     itkBayesianClassifierImageFilterVIUC3USDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUC3USFF : public itkImageToImageFilterVIUC3IUS3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUC3USFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF3IF3 * arg0);
     virtual itkImageToImageFilterIF3IF3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUC3USFF(itkBayesianClassifierImageFilterVIUC3USFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUC3USFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUC3USFF();
     ~itkBayesianClassifierImageFilterVIUC3USFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUC3USFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUC3USFF_Pointer();
     itkBayesianClassifierImageFilterVIUC3USFF_Pointer(itkBayesianClassifierImageFilterVIUC3USFF_Pointer const & p);
     itkBayesianClassifierImageFilterVIUC3USFF_Pointer(itkBayesianClassifierImageFilterVIUC3USFF * p);
     ~itkBayesianClassifierImageFilterVIUC3USFF_Pointer();
     itkBayesianClassifierImageFilterVIUC3USFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUC3USFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUC3USFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUC3USFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUC3USFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUC3USFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUC3USFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUC3USFF_Pointer const & r);
     itkBayesianClassifierImageFilterVIUC3USFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUC3USFF * r);
     itkBayesianClassifierImageFilterVIUC3USFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUL2UCDD : public itkImageToImageFilterVIUL2IUC2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUL2UCDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID2ID2 * arg0);
     virtual itkImageToImageFilterID2ID2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUL2UCDD(itkBayesianClassifierImageFilterVIUL2UCDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUL2UCDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUL2UCDD();
     ~itkBayesianClassifierImageFilterVIUL2UCDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUL2UCDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUL2UCDD_Pointer();
     itkBayesianClassifierImageFilterVIUL2UCDD_Pointer(itkBayesianClassifierImageFilterVIUL2UCDD_Pointer const & p);
     itkBayesianClassifierImageFilterVIUL2UCDD_Pointer(itkBayesianClassifierImageFilterVIUL2UCDD * p);
     ~itkBayesianClassifierImageFilterVIUL2UCDD_Pointer();
     itkBayesianClassifierImageFilterVIUL2UCDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUL2UCDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUL2UCDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUL2UCDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUL2UCDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUL2UCDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUL2UCDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUL2UCDD_Pointer const & r);
     itkBayesianClassifierImageFilterVIUL2UCDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUL2UCDD * r);
     itkBayesianClassifierImageFilterVIUL2UCDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUL2UCFF : public itkImageToImageFilterVIUL2IUC2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUL2UCFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF2IF2 * arg0);
     virtual itkImageToImageFilterIF2IF2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUL2UCFF(itkBayesianClassifierImageFilterVIUL2UCFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUL2UCFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUL2UCFF();
     ~itkBayesianClassifierImageFilterVIUL2UCFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUL2UCFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUL2UCFF_Pointer();
     itkBayesianClassifierImageFilterVIUL2UCFF_Pointer(itkBayesianClassifierImageFilterVIUL2UCFF_Pointer const & p);
     itkBayesianClassifierImageFilterVIUL2UCFF_Pointer(itkBayesianClassifierImageFilterVIUL2UCFF * p);
     ~itkBayesianClassifierImageFilterVIUL2UCFF_Pointer();
     itkBayesianClassifierImageFilterVIUL2UCFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUL2UCFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUL2UCFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUL2UCFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUL2UCFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUL2UCFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUL2UCFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUL2UCFF_Pointer const & r);
     itkBayesianClassifierImageFilterVIUL2UCFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUL2UCFF * r);
     itkBayesianClassifierImageFilterVIUL2UCFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUL2ULDD : public itkImageToImageFilterVIUL2IUL2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUL2ULDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID2ID2 * arg0);
     virtual itkImageToImageFilterID2ID2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUL2ULDD(itkBayesianClassifierImageFilterVIUL2ULDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUL2ULDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUL2ULDD();
     ~itkBayesianClassifierImageFilterVIUL2ULDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUL2ULDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUL2ULDD_Pointer();
     itkBayesianClassifierImageFilterVIUL2ULDD_Pointer(itkBayesianClassifierImageFilterVIUL2ULDD_Pointer const & p);
     itkBayesianClassifierImageFilterVIUL2ULDD_Pointer(itkBayesianClassifierImageFilterVIUL2ULDD * p);
     ~itkBayesianClassifierImageFilterVIUL2ULDD_Pointer();
     itkBayesianClassifierImageFilterVIUL2ULDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUL2ULDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUL2ULDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUL2ULDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUL2ULDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUL2ULDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUL2ULDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUL2ULDD_Pointer const & r);
     itkBayesianClassifierImageFilterVIUL2ULDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUL2ULDD * r);
     itkBayesianClassifierImageFilterVIUL2ULDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUL2ULFF : public itkImageToImageFilterVIUL2IUL2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUL2ULFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF2IF2 * arg0);
     virtual itkImageToImageFilterIF2IF2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUL2ULFF(itkBayesianClassifierImageFilterVIUL2ULFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUL2ULFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUL2ULFF();
     ~itkBayesianClassifierImageFilterVIUL2ULFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUL2ULFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUL2ULFF_Pointer();
     itkBayesianClassifierImageFilterVIUL2ULFF_Pointer(itkBayesianClassifierImageFilterVIUL2ULFF_Pointer const & p);
     itkBayesianClassifierImageFilterVIUL2ULFF_Pointer(itkBayesianClassifierImageFilterVIUL2ULFF * p);
     ~itkBayesianClassifierImageFilterVIUL2ULFF_Pointer();
     itkBayesianClassifierImageFilterVIUL2ULFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUL2ULFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUL2ULFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUL2ULFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUL2ULFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUL2ULFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUL2ULFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUL2ULFF_Pointer const & r);
     itkBayesianClassifierImageFilterVIUL2ULFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUL2ULFF * r);
     itkBayesianClassifierImageFilterVIUL2ULFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUL2USDD : public itkImageToImageFilterVIUL2IUS2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUL2USDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID2ID2 * arg0);
     virtual itkImageToImageFilterID2ID2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUL2USDD(itkBayesianClassifierImageFilterVIUL2USDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUL2USDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUL2USDD();
     ~itkBayesianClassifierImageFilterVIUL2USDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUL2USDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUL2USDD_Pointer();
     itkBayesianClassifierImageFilterVIUL2USDD_Pointer(itkBayesianClassifierImageFilterVIUL2USDD_Pointer const & p);
     itkBayesianClassifierImageFilterVIUL2USDD_Pointer(itkBayesianClassifierImageFilterVIUL2USDD * p);
     ~itkBayesianClassifierImageFilterVIUL2USDD_Pointer();
     itkBayesianClassifierImageFilterVIUL2USDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUL2USDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUL2USDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUL2USDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUL2USDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUL2USDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUL2USDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUL2USDD_Pointer const & r);
     itkBayesianClassifierImageFilterVIUL2USDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUL2USDD * r);
     itkBayesianClassifierImageFilterVIUL2USDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUL2USFF : public itkImageToImageFilterVIUL2IUS2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUL2USFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF2IF2 * arg0);
     virtual itkImageToImageFilterIF2IF2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUL2USFF(itkBayesianClassifierImageFilterVIUL2USFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUL2USFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUL2USFF();
     ~itkBayesianClassifierImageFilterVIUL2USFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUL2USFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUL2USFF_Pointer();
     itkBayesianClassifierImageFilterVIUL2USFF_Pointer(itkBayesianClassifierImageFilterVIUL2USFF_Pointer const & p);
     itkBayesianClassifierImageFilterVIUL2USFF_Pointer(itkBayesianClassifierImageFilterVIUL2USFF * p);
     ~itkBayesianClassifierImageFilterVIUL2USFF_Pointer();
     itkBayesianClassifierImageFilterVIUL2USFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUL2USFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUL2USFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUL2USFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUL2USFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUL2USFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUL2USFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUL2USFF_Pointer const & r);
     itkBayesianClassifierImageFilterVIUL2USFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUL2USFF * r);
     itkBayesianClassifierImageFilterVIUL2USFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUL3UCDD : public itkImageToImageFilterVIUL3IUC3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUL3UCDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID3ID3 * arg0);
     virtual itkImageToImageFilterID3ID3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUL3UCDD(itkBayesianClassifierImageFilterVIUL3UCDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUL3UCDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUL3UCDD();
     ~itkBayesianClassifierImageFilterVIUL3UCDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUL3UCDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUL3UCDD_Pointer();
     itkBayesianClassifierImageFilterVIUL3UCDD_Pointer(itkBayesianClassifierImageFilterVIUL3UCDD_Pointer const & p);
     itkBayesianClassifierImageFilterVIUL3UCDD_Pointer(itkBayesianClassifierImageFilterVIUL3UCDD * p);
     ~itkBayesianClassifierImageFilterVIUL3UCDD_Pointer();
     itkBayesianClassifierImageFilterVIUL3UCDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUL3UCDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUL3UCDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUL3UCDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUL3UCDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUL3UCDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUL3UCDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUL3UCDD_Pointer const & r);
     itkBayesianClassifierImageFilterVIUL3UCDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUL3UCDD * r);
     itkBayesianClassifierImageFilterVIUL3UCDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUL3UCFF : public itkImageToImageFilterVIUL3IUC3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUL3UCFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF3IF3 * arg0);
     virtual itkImageToImageFilterIF3IF3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUL3UCFF(itkBayesianClassifierImageFilterVIUL3UCFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUL3UCFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUL3UCFF();
     ~itkBayesianClassifierImageFilterVIUL3UCFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUL3UCFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUL3UCFF_Pointer();
     itkBayesianClassifierImageFilterVIUL3UCFF_Pointer(itkBayesianClassifierImageFilterVIUL3UCFF_Pointer const & p);
     itkBayesianClassifierImageFilterVIUL3UCFF_Pointer(itkBayesianClassifierImageFilterVIUL3UCFF * p);
     ~itkBayesianClassifierImageFilterVIUL3UCFF_Pointer();
     itkBayesianClassifierImageFilterVIUL3UCFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUL3UCFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUL3UCFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUL3UCFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUL3UCFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUL3UCFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUL3UCFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUL3UCFF_Pointer const & r);
     itkBayesianClassifierImageFilterVIUL3UCFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUL3UCFF * r);
     itkBayesianClassifierImageFilterVIUL3UCFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUL3ULDD : public itkImageToImageFilterVIUL3IUL3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUL3ULDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID3ID3 * arg0);
     virtual itkImageToImageFilterID3ID3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUL3ULDD(itkBayesianClassifierImageFilterVIUL3ULDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUL3ULDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUL3ULDD();
     ~itkBayesianClassifierImageFilterVIUL3ULDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUL3ULDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUL3ULDD_Pointer();
     itkBayesianClassifierImageFilterVIUL3ULDD_Pointer(itkBayesianClassifierImageFilterVIUL3ULDD_Pointer const & p);
     itkBayesianClassifierImageFilterVIUL3ULDD_Pointer(itkBayesianClassifierImageFilterVIUL3ULDD * p);
     ~itkBayesianClassifierImageFilterVIUL3ULDD_Pointer();
     itkBayesianClassifierImageFilterVIUL3ULDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUL3ULDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUL3ULDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUL3ULDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUL3ULDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUL3ULDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUL3ULDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUL3ULDD_Pointer const & r);
     itkBayesianClassifierImageFilterVIUL3ULDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUL3ULDD * r);
     itkBayesianClassifierImageFilterVIUL3ULDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUL3ULFF : public itkImageToImageFilterVIUL3IUL3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUL3ULFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF3IF3 * arg0);
     virtual itkImageToImageFilterIF3IF3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUL3ULFF(itkBayesianClassifierImageFilterVIUL3ULFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUL3ULFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUL3ULFF();
     ~itkBayesianClassifierImageFilterVIUL3ULFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUL3ULFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUL3ULFF_Pointer();
     itkBayesianClassifierImageFilterVIUL3ULFF_Pointer(itkBayesianClassifierImageFilterVIUL3ULFF_Pointer const & p);
     itkBayesianClassifierImageFilterVIUL3ULFF_Pointer(itkBayesianClassifierImageFilterVIUL3ULFF * p);
     ~itkBayesianClassifierImageFilterVIUL3ULFF_Pointer();
     itkBayesianClassifierImageFilterVIUL3ULFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUL3ULFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUL3ULFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUL3ULFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUL3ULFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUL3ULFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUL3ULFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUL3ULFF_Pointer const & r);
     itkBayesianClassifierImageFilterVIUL3ULFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUL3ULFF * r);
     itkBayesianClassifierImageFilterVIUL3ULFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUL3USDD : public itkImageToImageFilterVIUL3IUS3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUL3USDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID3ID3 * arg0);
     virtual itkImageToImageFilterID3ID3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUL3USDD(itkBayesianClassifierImageFilterVIUL3USDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUL3USDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUL3USDD();
     ~itkBayesianClassifierImageFilterVIUL3USDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUL3USDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUL3USDD_Pointer();
     itkBayesianClassifierImageFilterVIUL3USDD_Pointer(itkBayesianClassifierImageFilterVIUL3USDD_Pointer const & p);
     itkBayesianClassifierImageFilterVIUL3USDD_Pointer(itkBayesianClassifierImageFilterVIUL3USDD * p);
     ~itkBayesianClassifierImageFilterVIUL3USDD_Pointer();
     itkBayesianClassifierImageFilterVIUL3USDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUL3USDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUL3USDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUL3USDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUL3USDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUL3USDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUL3USDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUL3USDD_Pointer const & r);
     itkBayesianClassifierImageFilterVIUL3USDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUL3USDD * r);
     itkBayesianClassifierImageFilterVIUL3USDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUL3USFF : public itkImageToImageFilterVIUL3IUS3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUL3USFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF3IF3 * arg0);
     virtual itkImageToImageFilterIF3IF3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUL3USFF(itkBayesianClassifierImageFilterVIUL3USFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUL3USFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUL3USFF();
     ~itkBayesianClassifierImageFilterVIUL3USFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUL3USFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUL3USFF_Pointer();
     itkBayesianClassifierImageFilterVIUL3USFF_Pointer(itkBayesianClassifierImageFilterVIUL3USFF_Pointer const & p);
     itkBayesianClassifierImageFilterVIUL3USFF_Pointer(itkBayesianClassifierImageFilterVIUL3USFF * p);
     ~itkBayesianClassifierImageFilterVIUL3USFF_Pointer();
     itkBayesianClassifierImageFilterVIUL3USFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUL3USFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUL3USFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUL3USFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUL3USFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUL3USFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUL3USFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUL3USFF_Pointer const & r);
     itkBayesianClassifierImageFilterVIUL3USFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUL3USFF * r);
     itkBayesianClassifierImageFilterVIUL3USFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUS2UCDD : public itkImageToImageFilterVIUS2IUC2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUS2UCDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID2ID2 * arg0);
     virtual itkImageToImageFilterID2ID2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUS2UCDD(itkBayesianClassifierImageFilterVIUS2UCDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUS2UCDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUS2UCDD();
     ~itkBayesianClassifierImageFilterVIUS2UCDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUS2UCDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUS2UCDD_Pointer();
     itkBayesianClassifierImageFilterVIUS2UCDD_Pointer(itkBayesianClassifierImageFilterVIUS2UCDD_Pointer const & p);
     itkBayesianClassifierImageFilterVIUS2UCDD_Pointer(itkBayesianClassifierImageFilterVIUS2UCDD * p);
     ~itkBayesianClassifierImageFilterVIUS2UCDD_Pointer();
     itkBayesianClassifierImageFilterVIUS2UCDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUS2UCDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUS2UCDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUS2UCDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUS2UCDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUS2UCDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUS2UCDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUS2UCDD_Pointer const & r);
     itkBayesianClassifierImageFilterVIUS2UCDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUS2UCDD * r);
     itkBayesianClassifierImageFilterVIUS2UCDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUS2UCFF : public itkImageToImageFilterVIUS2IUC2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUS2UCFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF2IF2 * arg0);
     virtual itkImageToImageFilterIF2IF2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUS2UCFF(itkBayesianClassifierImageFilterVIUS2UCFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUS2UCFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUS2UCFF();
     ~itkBayesianClassifierImageFilterVIUS2UCFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUS2UCFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUS2UCFF_Pointer();
     itkBayesianClassifierImageFilterVIUS2UCFF_Pointer(itkBayesianClassifierImageFilterVIUS2UCFF_Pointer const & p);
     itkBayesianClassifierImageFilterVIUS2UCFF_Pointer(itkBayesianClassifierImageFilterVIUS2UCFF * p);
     ~itkBayesianClassifierImageFilterVIUS2UCFF_Pointer();
     itkBayesianClassifierImageFilterVIUS2UCFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUS2UCFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUS2UCFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUS2UCFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUS2UCFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUS2UCFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUS2UCFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUS2UCFF_Pointer const & r);
     itkBayesianClassifierImageFilterVIUS2UCFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUS2UCFF * r);
     itkBayesianClassifierImageFilterVIUS2UCFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUS2ULDD : public itkImageToImageFilterVIUS2IUL2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUS2ULDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID2ID2 * arg0);
     virtual itkImageToImageFilterID2ID2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUS2ULDD(itkBayesianClassifierImageFilterVIUS2ULDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUS2ULDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUS2ULDD();
     ~itkBayesianClassifierImageFilterVIUS2ULDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUS2ULDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUS2ULDD_Pointer();
     itkBayesianClassifierImageFilterVIUS2ULDD_Pointer(itkBayesianClassifierImageFilterVIUS2ULDD_Pointer const & p);
     itkBayesianClassifierImageFilterVIUS2ULDD_Pointer(itkBayesianClassifierImageFilterVIUS2ULDD * p);
     ~itkBayesianClassifierImageFilterVIUS2ULDD_Pointer();
     itkBayesianClassifierImageFilterVIUS2ULDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUS2ULDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUS2ULDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUS2ULDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUS2ULDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUS2ULDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUS2ULDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUS2ULDD_Pointer const & r);
     itkBayesianClassifierImageFilterVIUS2ULDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUS2ULDD * r);
     itkBayesianClassifierImageFilterVIUS2ULDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUS2ULFF : public itkImageToImageFilterVIUS2IUL2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUS2ULFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF2IF2 * arg0);
     virtual itkImageToImageFilterIF2IF2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUS2ULFF(itkBayesianClassifierImageFilterVIUS2ULFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUS2ULFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUS2ULFF();
     ~itkBayesianClassifierImageFilterVIUS2ULFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUS2ULFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUS2ULFF_Pointer();
     itkBayesianClassifierImageFilterVIUS2ULFF_Pointer(itkBayesianClassifierImageFilterVIUS2ULFF_Pointer const & p);
     itkBayesianClassifierImageFilterVIUS2ULFF_Pointer(itkBayesianClassifierImageFilterVIUS2ULFF * p);
     ~itkBayesianClassifierImageFilterVIUS2ULFF_Pointer();
     itkBayesianClassifierImageFilterVIUS2ULFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUS2ULFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUS2ULFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUS2ULFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUS2ULFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUS2ULFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUS2ULFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUS2ULFF_Pointer const & r);
     itkBayesianClassifierImageFilterVIUS2ULFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUS2ULFF * r);
     itkBayesianClassifierImageFilterVIUS2ULFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUS2USDD : public itkImageToImageFilterVIUS2IUS2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUS2USDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID2ID2 * arg0);
     virtual itkImageToImageFilterID2ID2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUS2USDD(itkBayesianClassifierImageFilterVIUS2USDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUS2USDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUS2USDD();
     ~itkBayesianClassifierImageFilterVIUS2USDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUS2USDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUS2USDD_Pointer();
     itkBayesianClassifierImageFilterVIUS2USDD_Pointer(itkBayesianClassifierImageFilterVIUS2USDD_Pointer const & p);
     itkBayesianClassifierImageFilterVIUS2USDD_Pointer(itkBayesianClassifierImageFilterVIUS2USDD * p);
     ~itkBayesianClassifierImageFilterVIUS2USDD_Pointer();
     itkBayesianClassifierImageFilterVIUS2USDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUS2USDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUS2USDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUS2USDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUS2USDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUS2USDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUS2USDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUS2USDD_Pointer const & r);
     itkBayesianClassifierImageFilterVIUS2USDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUS2USDD * r);
     itkBayesianClassifierImageFilterVIUS2USDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUS2USFF : public itkImageToImageFilterVIUS2IUS2 {
   public:
     enum  {  Dimension = 2 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUS2USFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF2IF2 * arg0);
     virtual itkImageToImageFilterIF2IF2_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF2 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUS2USFF(itkBayesianClassifierImageFilterVIUS2USFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUS2USFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUS2USFF();
     ~itkBayesianClassifierImageFilterVIUS2USFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF2 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUS2USFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUS2USFF_Pointer();
     itkBayesianClassifierImageFilterVIUS2USFF_Pointer(itkBayesianClassifierImageFilterVIUS2USFF_Pointer const & p);
     itkBayesianClassifierImageFilterVIUS2USFF_Pointer(itkBayesianClassifierImageFilterVIUS2USFF * p);
     ~itkBayesianClassifierImageFilterVIUS2USFF_Pointer();
     itkBayesianClassifierImageFilterVIUS2USFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUS2USFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUS2USFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUS2USFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUS2USFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUS2USFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUS2USFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUS2USFF_Pointer const & r);
     itkBayesianClassifierImageFilterVIUS2USFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUS2USFF * r);
     itkBayesianClassifierImageFilterVIUS2USFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUS3UCDD : public itkImageToImageFilterVIUS3IUC3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUS3UCDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID3ID3 * arg0);
     virtual itkImageToImageFilterID3ID3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUS3UCDD(itkBayesianClassifierImageFilterVIUS3UCDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUS3UCDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUS3UCDD();
     ~itkBayesianClassifierImageFilterVIUS3UCDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUS3UCDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUS3UCDD_Pointer();
     itkBayesianClassifierImageFilterVIUS3UCDD_Pointer(itkBayesianClassifierImageFilterVIUS3UCDD_Pointer const & p);
     itkBayesianClassifierImageFilterVIUS3UCDD_Pointer(itkBayesianClassifierImageFilterVIUS3UCDD * p);
     ~itkBayesianClassifierImageFilterVIUS3UCDD_Pointer();
     itkBayesianClassifierImageFilterVIUS3UCDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUS3UCDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUS3UCDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUS3UCDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUS3UCDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUS3UCDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUS3UCDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUS3UCDD_Pointer const & r);
     itkBayesianClassifierImageFilterVIUS3UCDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUS3UCDD * r);
     itkBayesianClassifierImageFilterVIUS3UCDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUS3UCFF : public itkImageToImageFilterVIUS3IUC3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUS3UCFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF3IF3 * arg0);
     virtual itkImageToImageFilterIF3IF3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUS3UCFF(itkBayesianClassifierImageFilterVIUS3UCFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUS3UCFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUS3UCFF();
     ~itkBayesianClassifierImageFilterVIUS3UCFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUS3UCFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUS3UCFF_Pointer();
     itkBayesianClassifierImageFilterVIUS3UCFF_Pointer(itkBayesianClassifierImageFilterVIUS3UCFF_Pointer const & p);
     itkBayesianClassifierImageFilterVIUS3UCFF_Pointer(itkBayesianClassifierImageFilterVIUS3UCFF * p);
     ~itkBayesianClassifierImageFilterVIUS3UCFF_Pointer();
     itkBayesianClassifierImageFilterVIUS3UCFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUS3UCFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUS3UCFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUS3UCFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUS3UCFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUS3UCFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUS3UCFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUS3UCFF_Pointer const & r);
     itkBayesianClassifierImageFilterVIUS3UCFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUS3UCFF * r);
     itkBayesianClassifierImageFilterVIUS3UCFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUS3ULDD : public itkImageToImageFilterVIUS3IUL3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUS3ULDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID3ID3 * arg0);
     virtual itkImageToImageFilterID3ID3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUS3ULDD(itkBayesianClassifierImageFilterVIUS3ULDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUS3ULDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUS3ULDD();
     ~itkBayesianClassifierImageFilterVIUS3ULDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUS3ULDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUS3ULDD_Pointer();
     itkBayesianClassifierImageFilterVIUS3ULDD_Pointer(itkBayesianClassifierImageFilterVIUS3ULDD_Pointer const & p);
     itkBayesianClassifierImageFilterVIUS3ULDD_Pointer(itkBayesianClassifierImageFilterVIUS3ULDD * p);
     ~itkBayesianClassifierImageFilterVIUS3ULDD_Pointer();
     itkBayesianClassifierImageFilterVIUS3ULDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUS3ULDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUS3ULDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUS3ULDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUS3ULDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUS3ULDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUS3ULDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUS3ULDD_Pointer const & r);
     itkBayesianClassifierImageFilterVIUS3ULDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUS3ULDD * r);
     itkBayesianClassifierImageFilterVIUS3ULDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUS3ULFF : public itkImageToImageFilterVIUS3IUL3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUS3ULFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF3IF3 * arg0);
     virtual itkImageToImageFilterIF3IF3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUS3ULFF(itkBayesianClassifierImageFilterVIUS3ULFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUS3ULFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUS3ULFF();
     ~itkBayesianClassifierImageFilterVIUS3ULFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUS3ULFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUS3ULFF_Pointer();
     itkBayesianClassifierImageFilterVIUS3ULFF_Pointer(itkBayesianClassifierImageFilterVIUS3ULFF_Pointer const & p);
     itkBayesianClassifierImageFilterVIUS3ULFF_Pointer(itkBayesianClassifierImageFilterVIUS3ULFF * p);
     ~itkBayesianClassifierImageFilterVIUS3ULFF_Pointer();
     itkBayesianClassifierImageFilterVIUS3ULFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUS3ULFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUS3ULFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUS3ULFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUS3ULFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUS3ULFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUS3ULFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUS3ULFF_Pointer const & r);
     itkBayesianClassifierImageFilterVIUS3ULFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUS3ULFF * r);
     itkBayesianClassifierImageFilterVIUS3ULFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUS3USDD : public itkImageToImageFilterVIUS3IUS3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUS3USDD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterID3ID3 * arg0);
     virtual itkImageToImageFilterID3ID3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageD3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUS3USDD(itkBayesianClassifierImageFilterVIUS3USDD const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUS3USDD const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUS3USDD();
     ~itkBayesianClassifierImageFilterVIUS3USDD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageD3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUS3USDD_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUS3USDD_Pointer();
     itkBayesianClassifierImageFilterVIUS3USDD_Pointer(itkBayesianClassifierImageFilterVIUS3USDD_Pointer const & p);
     itkBayesianClassifierImageFilterVIUS3USDD_Pointer(itkBayesianClassifierImageFilterVIUS3USDD * p);
     ~itkBayesianClassifierImageFilterVIUS3USDD_Pointer();
     itkBayesianClassifierImageFilterVIUS3USDD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUS3USDD * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUS3USDD_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUS3USDD_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUS3USDD_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUS3USDD_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUS3USDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUS3USDD_Pointer const & r);
     itkBayesianClassifierImageFilterVIUS3USDD_Pointer & operator=(itkBayesianClassifierImageFilterVIUS3USDD * r);
     itkBayesianClassifierImageFilterVIUS3USDD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBayesianClassifierImageFilterVIUS3USFF : public itkImageToImageFilterVIUS3IUS3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  UnsignedIntConvertibleToLabelsCheck = 1 };
     enum  {  PosteriorsAdditiveOperatorsCheck = 1 };
     enum  {  IntConvertibleToPosteriorsCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  PosteriorsHasNumericTraitsCheck = 1 };
     enum  {  PriorsHasNumericTraitsCheck = 1 };
     enum  {  InputPriorsPosteriorsMultiplyOperatorCheck = 1 };
     static itkBayesianClassifierImageFilterVIUS3USFF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSmoothingFilter(itkImageToImageFilterIF3IF3 * arg0);
     virtual itkImageToImageFilterIF3IF3_Pointer GetSmoothingFilter() const;
     virtual void SetPriors(itkVectorImageF3 const * arg0);
     virtual void SetNumberOfSmoothingIterations(unsigned int const _arg);
     virtual unsigned int GetNumberOfSmoothingIterations() const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkBayesianClassifierImageFilterVIUS3USFF(itkBayesianClassifierImageFilterVIUS3USFF const & arg0);
     void operator=(itkBayesianClassifierImageFilterVIUS3USFF const & arg0);
   protected:
     itkBayesianClassifierImageFilterVIUS3USFF();
     ~itkBayesianClassifierImageFilterVIUS3USFF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void ComputeBayesRule();
     virtual void NormalizeAndSmoothPosteriors();
     virtual void ClassifyBasedOnPosteriors();
     itkVectorImageF3 * GetPosteriorImage();
 };


 class itkBayesianClassifierImageFilterVIUS3USFF_Pointer {
   public:
     itkBayesianClassifierImageFilterVIUS3USFF_Pointer();
     itkBayesianClassifierImageFilterVIUS3USFF_Pointer(itkBayesianClassifierImageFilterVIUS3USFF_Pointer const & p);
     itkBayesianClassifierImageFilterVIUS3USFF_Pointer(itkBayesianClassifierImageFilterVIUS3USFF * p);
     ~itkBayesianClassifierImageFilterVIUS3USFF_Pointer();
     itkBayesianClassifierImageFilterVIUS3USFF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBayesianClassifierImageFilterVIUS3USFF * GetPointer() const;
     bool operator<(itkBayesianClassifierImageFilterVIUS3USFF_Pointer const & r) const;
     bool operator>(itkBayesianClassifierImageFilterVIUS3USFF_Pointer const & r) const;
     bool operator<=(itkBayesianClassifierImageFilterVIUS3USFF_Pointer const & r) const;
     bool operator>=(itkBayesianClassifierImageFilterVIUS3USFF_Pointer const & r) const;
     itkBayesianClassifierImageFilterVIUS3USFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUS3USFF_Pointer const & r);
     itkBayesianClassifierImageFilterVIUS3USFF_Pointer & operator=(itkBayesianClassifierImageFilterVIUS3USFF * r);
     itkBayesianClassifierImageFilterVIUS3USFF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


