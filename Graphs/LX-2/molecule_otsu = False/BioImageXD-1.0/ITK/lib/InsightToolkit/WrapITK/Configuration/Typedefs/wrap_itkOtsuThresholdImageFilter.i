// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkOtsuThresholdImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkOtsuThresholdImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkOtsuThresholdImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkOtsuThresholdImageFilterJava
#endif
#ifdef SWIGLUA
%module itkOtsuThresholdImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkOtsuThresholdImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkOtsuThresholdImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkOtsuThresholdImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkOtsuThresholdImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkOtsuThresholdImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkOtsuThresholdImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkOtsuThresholdImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkOtsuThresholdImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkOtsuThresholdImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkOtsuThresholdImageFilterPython
#endif
#ifdef SWIGR
%module itkOtsuThresholdImageFilterR
#endif
#ifdef SWIGRUBY
%module itkOtsuThresholdImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkOtsuThresholdImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkOtsuThresholdImageFilterTcl
#endif
#ifdef SWIGXML
%module itkOtsuThresholdImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "SegmentationAndThreshold.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkImageToImageFilterA.i


%include itk.i
%include wrap_itkOtsuThresholdImageFilter_ext.i


 class itkOtsuThresholdImageFilterID2ID2 : public itkImageToImageFilterID2ID2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  OutputEqualityComparableCheck = 1 };
     enum  {  InputOStreamWritableCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     static itkOtsuThresholdImageFilterID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetOutsideValue(double const _arg);
     virtual double GetOutsideValue() const;
     virtual void SetInsideValue(double const _arg);
     virtual double GetInsideValue() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     virtual double GetThreshold() const;
   private:
     itkOtsuThresholdImageFilterID2ID2(itkOtsuThresholdImageFilterID2ID2 const & arg0);
     void operator=(itkOtsuThresholdImageFilterID2ID2 const & arg0);
   protected:
     itkOtsuThresholdImageFilterID2ID2();
     ~itkOtsuThresholdImageFilterID2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void GenerateData();
 };


 class itkOtsuThresholdImageFilterID2ID2_Pointer {
   public:
     itkOtsuThresholdImageFilterID2ID2_Pointer();
     itkOtsuThresholdImageFilterID2ID2_Pointer(itkOtsuThresholdImageFilterID2ID2_Pointer const & p);
     itkOtsuThresholdImageFilterID2ID2_Pointer(itkOtsuThresholdImageFilterID2ID2 * p);
     ~itkOtsuThresholdImageFilterID2ID2_Pointer();
     itkOtsuThresholdImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuThresholdImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkOtsuThresholdImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkOtsuThresholdImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkOtsuThresholdImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkOtsuThresholdImageFilterID2ID2_Pointer const & r) const;
     itkOtsuThresholdImageFilterID2ID2_Pointer & operator=(itkOtsuThresholdImageFilterID2ID2_Pointer const & r);
     itkOtsuThresholdImageFilterID2ID2_Pointer & operator=(itkOtsuThresholdImageFilterID2ID2 * r);
     itkOtsuThresholdImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuThresholdImageFilterID3ID3 : public itkImageToImageFilterID3ID3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  OutputEqualityComparableCheck = 1 };
     enum  {  InputOStreamWritableCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     static itkOtsuThresholdImageFilterID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetOutsideValue(double const _arg);
     virtual double GetOutsideValue() const;
     virtual void SetInsideValue(double const _arg);
     virtual double GetInsideValue() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     virtual double GetThreshold() const;
   private:
     itkOtsuThresholdImageFilterID3ID3(itkOtsuThresholdImageFilterID3ID3 const & arg0);
     void operator=(itkOtsuThresholdImageFilterID3ID3 const & arg0);
   protected:
     itkOtsuThresholdImageFilterID3ID3();
     ~itkOtsuThresholdImageFilterID3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void GenerateData();
 };


 class itkOtsuThresholdImageFilterID3ID3_Pointer {
   public:
     itkOtsuThresholdImageFilterID3ID3_Pointer();
     itkOtsuThresholdImageFilterID3ID3_Pointer(itkOtsuThresholdImageFilterID3ID3_Pointer const & p);
     itkOtsuThresholdImageFilterID3ID3_Pointer(itkOtsuThresholdImageFilterID3ID3 * p);
     ~itkOtsuThresholdImageFilterID3ID3_Pointer();
     itkOtsuThresholdImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuThresholdImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkOtsuThresholdImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkOtsuThresholdImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkOtsuThresholdImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkOtsuThresholdImageFilterID3ID3_Pointer const & r) const;
     itkOtsuThresholdImageFilterID3ID3_Pointer & operator=(itkOtsuThresholdImageFilterID3ID3_Pointer const & r);
     itkOtsuThresholdImageFilterID3ID3_Pointer & operator=(itkOtsuThresholdImageFilterID3ID3 * r);
     itkOtsuThresholdImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuThresholdImageFilterIF2IF2 : public itkImageToImageFilterIF2IF2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  OutputEqualityComparableCheck = 1 };
     enum  {  InputOStreamWritableCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     static itkOtsuThresholdImageFilterIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetOutsideValue(float const _arg);
     virtual float GetOutsideValue() const;
     virtual void SetInsideValue(float const _arg);
     virtual float GetInsideValue() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     virtual float GetThreshold() const;
   private:
     itkOtsuThresholdImageFilterIF2IF2(itkOtsuThresholdImageFilterIF2IF2 const & arg0);
     void operator=(itkOtsuThresholdImageFilterIF2IF2 const & arg0);
   protected:
     itkOtsuThresholdImageFilterIF2IF2();
     ~itkOtsuThresholdImageFilterIF2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void GenerateData();
 };


 class itkOtsuThresholdImageFilterIF2IF2_Pointer {
   public:
     itkOtsuThresholdImageFilterIF2IF2_Pointer();
     itkOtsuThresholdImageFilterIF2IF2_Pointer(itkOtsuThresholdImageFilterIF2IF2_Pointer const & p);
     itkOtsuThresholdImageFilterIF2IF2_Pointer(itkOtsuThresholdImageFilterIF2IF2 * p);
     ~itkOtsuThresholdImageFilterIF2IF2_Pointer();
     itkOtsuThresholdImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuThresholdImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkOtsuThresholdImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkOtsuThresholdImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkOtsuThresholdImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkOtsuThresholdImageFilterIF2IF2_Pointer const & r) const;
     itkOtsuThresholdImageFilterIF2IF2_Pointer & operator=(itkOtsuThresholdImageFilterIF2IF2_Pointer const & r);
     itkOtsuThresholdImageFilterIF2IF2_Pointer & operator=(itkOtsuThresholdImageFilterIF2IF2 * r);
     itkOtsuThresholdImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuThresholdImageFilterIF3IF3 : public itkImageToImageFilterIF3IF3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  OutputEqualityComparableCheck = 1 };
     enum  {  InputOStreamWritableCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     static itkOtsuThresholdImageFilterIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetOutsideValue(float const _arg);
     virtual float GetOutsideValue() const;
     virtual void SetInsideValue(float const _arg);
     virtual float GetInsideValue() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     virtual float GetThreshold() const;
   private:
     itkOtsuThresholdImageFilterIF3IF3(itkOtsuThresholdImageFilterIF3IF3 const & arg0);
     void operator=(itkOtsuThresholdImageFilterIF3IF3 const & arg0);
   protected:
     itkOtsuThresholdImageFilterIF3IF3();
     ~itkOtsuThresholdImageFilterIF3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void GenerateData();
 };


 class itkOtsuThresholdImageFilterIF3IF3_Pointer {
   public:
     itkOtsuThresholdImageFilterIF3IF3_Pointer();
     itkOtsuThresholdImageFilterIF3IF3_Pointer(itkOtsuThresholdImageFilterIF3IF3_Pointer const & p);
     itkOtsuThresholdImageFilterIF3IF3_Pointer(itkOtsuThresholdImageFilterIF3IF3 * p);
     ~itkOtsuThresholdImageFilterIF3IF3_Pointer();
     itkOtsuThresholdImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuThresholdImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkOtsuThresholdImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkOtsuThresholdImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkOtsuThresholdImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkOtsuThresholdImageFilterIF3IF3_Pointer const & r) const;
     itkOtsuThresholdImageFilterIF3IF3_Pointer & operator=(itkOtsuThresholdImageFilterIF3IF3_Pointer const & r);
     itkOtsuThresholdImageFilterIF3IF3_Pointer & operator=(itkOtsuThresholdImageFilterIF3IF3 * r);
     itkOtsuThresholdImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuThresholdImageFilterIUC2IUC2 : public itkImageToImageFilterIUC2IUC2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  OutputEqualityComparableCheck = 1 };
     enum  {  InputOStreamWritableCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     static itkOtsuThresholdImageFilterIUC2IUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetOutsideValue(unsigned char const _arg);
     virtual unsigned char GetOutsideValue() const;
     virtual void SetInsideValue(unsigned char const _arg);
     virtual unsigned char GetInsideValue() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     virtual unsigned char GetThreshold() const;
   private:
     itkOtsuThresholdImageFilterIUC2IUC2(itkOtsuThresholdImageFilterIUC2IUC2 const & arg0);
     void operator=(itkOtsuThresholdImageFilterIUC2IUC2 const & arg0);
   protected:
     itkOtsuThresholdImageFilterIUC2IUC2();
     ~itkOtsuThresholdImageFilterIUC2IUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void GenerateData();
 };


 class itkOtsuThresholdImageFilterIUC2IUC2_Pointer {
   public:
     itkOtsuThresholdImageFilterIUC2IUC2_Pointer();
     itkOtsuThresholdImageFilterIUC2IUC2_Pointer(itkOtsuThresholdImageFilterIUC2IUC2_Pointer const & p);
     itkOtsuThresholdImageFilterIUC2IUC2_Pointer(itkOtsuThresholdImageFilterIUC2IUC2 * p);
     ~itkOtsuThresholdImageFilterIUC2IUC2_Pointer();
     itkOtsuThresholdImageFilterIUC2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuThresholdImageFilterIUC2IUC2 * GetPointer() const;
     bool operator<(itkOtsuThresholdImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>(itkOtsuThresholdImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator<=(itkOtsuThresholdImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>=(itkOtsuThresholdImageFilterIUC2IUC2_Pointer const & r) const;
     itkOtsuThresholdImageFilterIUC2IUC2_Pointer & operator=(itkOtsuThresholdImageFilterIUC2IUC2_Pointer const & r);
     itkOtsuThresholdImageFilterIUC2IUC2_Pointer & operator=(itkOtsuThresholdImageFilterIUC2IUC2 * r);
     itkOtsuThresholdImageFilterIUC2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuThresholdImageFilterIUC3IUC3 : public itkImageToImageFilterIUC3IUC3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  OutputEqualityComparableCheck = 1 };
     enum  {  InputOStreamWritableCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     static itkOtsuThresholdImageFilterIUC3IUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetOutsideValue(unsigned char const _arg);
     virtual unsigned char GetOutsideValue() const;
     virtual void SetInsideValue(unsigned char const _arg);
     virtual unsigned char GetInsideValue() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     virtual unsigned char GetThreshold() const;
   private:
     itkOtsuThresholdImageFilterIUC3IUC3(itkOtsuThresholdImageFilterIUC3IUC3 const & arg0);
     void operator=(itkOtsuThresholdImageFilterIUC3IUC3 const & arg0);
   protected:
     itkOtsuThresholdImageFilterIUC3IUC3();
     ~itkOtsuThresholdImageFilterIUC3IUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void GenerateData();
 };


 class itkOtsuThresholdImageFilterIUC3IUC3_Pointer {
   public:
     itkOtsuThresholdImageFilterIUC3IUC3_Pointer();
     itkOtsuThresholdImageFilterIUC3IUC3_Pointer(itkOtsuThresholdImageFilterIUC3IUC3_Pointer const & p);
     itkOtsuThresholdImageFilterIUC3IUC3_Pointer(itkOtsuThresholdImageFilterIUC3IUC3 * p);
     ~itkOtsuThresholdImageFilterIUC3IUC3_Pointer();
     itkOtsuThresholdImageFilterIUC3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuThresholdImageFilterIUC3IUC3 * GetPointer() const;
     bool operator<(itkOtsuThresholdImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>(itkOtsuThresholdImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator<=(itkOtsuThresholdImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>=(itkOtsuThresholdImageFilterIUC3IUC3_Pointer const & r) const;
     itkOtsuThresholdImageFilterIUC3IUC3_Pointer & operator=(itkOtsuThresholdImageFilterIUC3IUC3_Pointer const & r);
     itkOtsuThresholdImageFilterIUC3IUC3_Pointer & operator=(itkOtsuThresholdImageFilterIUC3IUC3 * r);
     itkOtsuThresholdImageFilterIUC3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuThresholdImageFilterIUL2IUL2 : public itkImageToImageFilterIUL2IUL2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  OutputEqualityComparableCheck = 1 };
     enum  {  InputOStreamWritableCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     static itkOtsuThresholdImageFilterIUL2IUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetOutsideValue(unsigned long const _arg);
     virtual unsigned long GetOutsideValue() const;
     virtual void SetInsideValue(unsigned long const _arg);
     virtual unsigned long GetInsideValue() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     virtual unsigned long GetThreshold() const;
   private:
     itkOtsuThresholdImageFilterIUL2IUL2(itkOtsuThresholdImageFilterIUL2IUL2 const & arg0);
     void operator=(itkOtsuThresholdImageFilterIUL2IUL2 const & arg0);
   protected:
     itkOtsuThresholdImageFilterIUL2IUL2();
     ~itkOtsuThresholdImageFilterIUL2IUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void GenerateData();
 };


 class itkOtsuThresholdImageFilterIUL2IUL2_Pointer {
   public:
     itkOtsuThresholdImageFilterIUL2IUL2_Pointer();
     itkOtsuThresholdImageFilterIUL2IUL2_Pointer(itkOtsuThresholdImageFilterIUL2IUL2_Pointer const & p);
     itkOtsuThresholdImageFilterIUL2IUL2_Pointer(itkOtsuThresholdImageFilterIUL2IUL2 * p);
     ~itkOtsuThresholdImageFilterIUL2IUL2_Pointer();
     itkOtsuThresholdImageFilterIUL2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuThresholdImageFilterIUL2IUL2 * GetPointer() const;
     bool operator<(itkOtsuThresholdImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>(itkOtsuThresholdImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator<=(itkOtsuThresholdImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>=(itkOtsuThresholdImageFilterIUL2IUL2_Pointer const & r) const;
     itkOtsuThresholdImageFilterIUL2IUL2_Pointer & operator=(itkOtsuThresholdImageFilterIUL2IUL2_Pointer const & r);
     itkOtsuThresholdImageFilterIUL2IUL2_Pointer & operator=(itkOtsuThresholdImageFilterIUL2IUL2 * r);
     itkOtsuThresholdImageFilterIUL2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuThresholdImageFilterIUL3IUL3 : public itkImageToImageFilterIUL3IUL3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  OutputEqualityComparableCheck = 1 };
     enum  {  InputOStreamWritableCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     static itkOtsuThresholdImageFilterIUL3IUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetOutsideValue(unsigned long const _arg);
     virtual unsigned long GetOutsideValue() const;
     virtual void SetInsideValue(unsigned long const _arg);
     virtual unsigned long GetInsideValue() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     virtual unsigned long GetThreshold() const;
   private:
     itkOtsuThresholdImageFilterIUL3IUL3(itkOtsuThresholdImageFilterIUL3IUL3 const & arg0);
     void operator=(itkOtsuThresholdImageFilterIUL3IUL3 const & arg0);
   protected:
     itkOtsuThresholdImageFilterIUL3IUL3();
     ~itkOtsuThresholdImageFilterIUL3IUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void GenerateData();
 };


 class itkOtsuThresholdImageFilterIUL3IUL3_Pointer {
   public:
     itkOtsuThresholdImageFilterIUL3IUL3_Pointer();
     itkOtsuThresholdImageFilterIUL3IUL3_Pointer(itkOtsuThresholdImageFilterIUL3IUL3_Pointer const & p);
     itkOtsuThresholdImageFilterIUL3IUL3_Pointer(itkOtsuThresholdImageFilterIUL3IUL3 * p);
     ~itkOtsuThresholdImageFilterIUL3IUL3_Pointer();
     itkOtsuThresholdImageFilterIUL3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuThresholdImageFilterIUL3IUL3 * GetPointer() const;
     bool operator<(itkOtsuThresholdImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>(itkOtsuThresholdImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator<=(itkOtsuThresholdImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>=(itkOtsuThresholdImageFilterIUL3IUL3_Pointer const & r) const;
     itkOtsuThresholdImageFilterIUL3IUL3_Pointer & operator=(itkOtsuThresholdImageFilterIUL3IUL3_Pointer const & r);
     itkOtsuThresholdImageFilterIUL3IUL3_Pointer & operator=(itkOtsuThresholdImageFilterIUL3IUL3 * r);
     itkOtsuThresholdImageFilterIUL3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuThresholdImageFilterIUS2IUS2 : public itkImageToImageFilterIUS2IUS2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  OutputEqualityComparableCheck = 1 };
     enum  {  InputOStreamWritableCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     static itkOtsuThresholdImageFilterIUS2IUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetOutsideValue(unsigned short const _arg);
     virtual unsigned short GetOutsideValue() const;
     virtual void SetInsideValue(unsigned short const _arg);
     virtual unsigned short GetInsideValue() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     virtual unsigned short GetThreshold() const;
   private:
     itkOtsuThresholdImageFilterIUS2IUS2(itkOtsuThresholdImageFilterIUS2IUS2 const & arg0);
     void operator=(itkOtsuThresholdImageFilterIUS2IUS2 const & arg0);
   protected:
     itkOtsuThresholdImageFilterIUS2IUS2();
     ~itkOtsuThresholdImageFilterIUS2IUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void GenerateData();
 };


 class itkOtsuThresholdImageFilterIUS2IUS2_Pointer {
   public:
     itkOtsuThresholdImageFilterIUS2IUS2_Pointer();
     itkOtsuThresholdImageFilterIUS2IUS2_Pointer(itkOtsuThresholdImageFilterIUS2IUS2_Pointer const & p);
     itkOtsuThresholdImageFilterIUS2IUS2_Pointer(itkOtsuThresholdImageFilterIUS2IUS2 * p);
     ~itkOtsuThresholdImageFilterIUS2IUS2_Pointer();
     itkOtsuThresholdImageFilterIUS2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuThresholdImageFilterIUS2IUS2 * GetPointer() const;
     bool operator<(itkOtsuThresholdImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>(itkOtsuThresholdImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator<=(itkOtsuThresholdImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>=(itkOtsuThresholdImageFilterIUS2IUS2_Pointer const & r) const;
     itkOtsuThresholdImageFilterIUS2IUS2_Pointer & operator=(itkOtsuThresholdImageFilterIUS2IUS2_Pointer const & r);
     itkOtsuThresholdImageFilterIUS2IUS2_Pointer & operator=(itkOtsuThresholdImageFilterIUS2IUS2 * r);
     itkOtsuThresholdImageFilterIUS2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuThresholdImageFilterIUS3IUS3 : public itkImageToImageFilterIUS3IUS3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  OutputEqualityComparableCheck = 1 };
     enum  {  InputOStreamWritableCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     static itkOtsuThresholdImageFilterIUS3IUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetOutsideValue(unsigned short const _arg);
     virtual unsigned short GetOutsideValue() const;
     virtual void SetInsideValue(unsigned short const _arg);
     virtual unsigned short GetInsideValue() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     virtual unsigned short GetThreshold() const;
   private:
     itkOtsuThresholdImageFilterIUS3IUS3(itkOtsuThresholdImageFilterIUS3IUS3 const & arg0);
     void operator=(itkOtsuThresholdImageFilterIUS3IUS3 const & arg0);
   protected:
     itkOtsuThresholdImageFilterIUS3IUS3();
     ~itkOtsuThresholdImageFilterIUS3IUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void GenerateData();
 };


 class itkOtsuThresholdImageFilterIUS3IUS3_Pointer {
   public:
     itkOtsuThresholdImageFilterIUS3IUS3_Pointer();
     itkOtsuThresholdImageFilterIUS3IUS3_Pointer(itkOtsuThresholdImageFilterIUS3IUS3_Pointer const & p);
     itkOtsuThresholdImageFilterIUS3IUS3_Pointer(itkOtsuThresholdImageFilterIUS3IUS3 * p);
     ~itkOtsuThresholdImageFilterIUS3IUS3_Pointer();
     itkOtsuThresholdImageFilterIUS3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuThresholdImageFilterIUS3IUS3 * GetPointer() const;
     bool operator<(itkOtsuThresholdImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>(itkOtsuThresholdImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator<=(itkOtsuThresholdImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>=(itkOtsuThresholdImageFilterIUS3IUS3_Pointer const & r) const;
     itkOtsuThresholdImageFilterIUS3IUS3_Pointer & operator=(itkOtsuThresholdImageFilterIUS3IUS3_Pointer const & r);
     itkOtsuThresholdImageFilterIUS3IUS3_Pointer & operator=(itkOtsuThresholdImageFilterIUS3IUS3 * r);
     itkOtsuThresholdImageFilterIUS3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


