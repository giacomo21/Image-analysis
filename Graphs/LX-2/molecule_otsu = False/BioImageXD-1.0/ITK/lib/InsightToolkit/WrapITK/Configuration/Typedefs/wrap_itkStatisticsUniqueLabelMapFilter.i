// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkStatisticsUniqueLabelMapFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkStatisticsUniqueLabelMapFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkStatisticsUniqueLabelMapFilterGuile
#endif
#ifdef SWIGJAVA
%module itkStatisticsUniqueLabelMapFilterJava
#endif
#ifdef SWIGLUA
%module itkStatisticsUniqueLabelMapFilterLua
#endif
#ifdef SWIGMODULA3
%module itkStatisticsUniqueLabelMapFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkStatisticsUniqueLabelMapFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkStatisticsUniqueLabelMapFilterOcaml
#endif
#ifdef SWIGPERL
%module itkStatisticsUniqueLabelMapFilterPerl
#endif
#ifdef SWIGPERL5
%module itkStatisticsUniqueLabelMapFilterPerl5
#endif
#ifdef SWIGPHP
%module itkStatisticsUniqueLabelMapFilterPhp
#endif
#ifdef SWIGPHP4
%module itkStatisticsUniqueLabelMapFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkStatisticsUniqueLabelMapFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkStatisticsUniqueLabelMapFilterPike
#endif
#ifdef SWIGPYTHON
%module itkStatisticsUniqueLabelMapFilterPython
#endif
#ifdef SWIGR
%module itkStatisticsUniqueLabelMapFilterR
#endif
#ifdef SWIGRUBY
%module itkStatisticsUniqueLabelMapFilterRuby
#endif
#ifdef SWIGSEXP
%module itkStatisticsUniqueLabelMapFilterSexp
#endif
#ifdef SWIGTCL
%module itkStatisticsUniqueLabelMapFilterTcl
#endif
#ifdef SWIGXML
%module itkStatisticsUniqueLabelMapFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
#include "Numerics.includes"
#include "BinaryMorphology.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkShapeUniqueLabelMapFilter.i


%include itk.i
%include wrap_itkStatisticsUniqueLabelMapFilter_ext.i


 class itkStatisticsUniqueLabelMapFilterLM2 : public itkShapeUniqueLabelMapFilterLM2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkStatisticsUniqueLabelMapFilterLM2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkStatisticsUniqueLabelMapFilterLM2(itkStatisticsUniqueLabelMapFilterLM2 const & arg0);
     void operator=(itkStatisticsUniqueLabelMapFilterLM2 const & arg0);
   protected:
     itkStatisticsUniqueLabelMapFilterLM2();
     ~itkStatisticsUniqueLabelMapFilterLM2();
     virtual void GenerateData();
 };


 class itkStatisticsUniqueLabelMapFilterLM2_Pointer {
   public:
     itkStatisticsUniqueLabelMapFilterLM2_Pointer();
     itkStatisticsUniqueLabelMapFilterLM2_Pointer(itkStatisticsUniqueLabelMapFilterLM2_Pointer const & p);
     itkStatisticsUniqueLabelMapFilterLM2_Pointer(itkStatisticsUniqueLabelMapFilterLM2 * p);
     ~itkStatisticsUniqueLabelMapFilterLM2_Pointer();
     itkStatisticsUniqueLabelMapFilterLM2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkStatisticsUniqueLabelMapFilterLM2 * GetPointer() const;
     bool operator<(itkStatisticsUniqueLabelMapFilterLM2_Pointer const & r) const;
     bool operator>(itkStatisticsUniqueLabelMapFilterLM2_Pointer const & r) const;
     bool operator<=(itkStatisticsUniqueLabelMapFilterLM2_Pointer const & r) const;
     bool operator>=(itkStatisticsUniqueLabelMapFilterLM2_Pointer const & r) const;
     itkStatisticsUniqueLabelMapFilterLM2_Pointer & operator=(itkStatisticsUniqueLabelMapFilterLM2_Pointer const & r);
     itkStatisticsUniqueLabelMapFilterLM2_Pointer & operator=(itkStatisticsUniqueLabelMapFilterLM2 * r);
     itkStatisticsUniqueLabelMapFilterLM2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkStatisticsUniqueLabelMapFilterLM3 : public itkShapeUniqueLabelMapFilterLM3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkStatisticsUniqueLabelMapFilterLM3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkStatisticsUniqueLabelMapFilterLM3(itkStatisticsUniqueLabelMapFilterLM3 const & arg0);
     void operator=(itkStatisticsUniqueLabelMapFilterLM3 const & arg0);
   protected:
     itkStatisticsUniqueLabelMapFilterLM3();
     ~itkStatisticsUniqueLabelMapFilterLM3();
     virtual void GenerateData();
 };


 class itkStatisticsUniqueLabelMapFilterLM3_Pointer {
   public:
     itkStatisticsUniqueLabelMapFilterLM3_Pointer();
     itkStatisticsUniqueLabelMapFilterLM3_Pointer(itkStatisticsUniqueLabelMapFilterLM3_Pointer const & p);
     itkStatisticsUniqueLabelMapFilterLM3_Pointer(itkStatisticsUniqueLabelMapFilterLM3 * p);
     ~itkStatisticsUniqueLabelMapFilterLM3_Pointer();
     itkStatisticsUniqueLabelMapFilterLM3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkStatisticsUniqueLabelMapFilterLM3 * GetPointer() const;
     bool operator<(itkStatisticsUniqueLabelMapFilterLM3_Pointer const & r) const;
     bool operator>(itkStatisticsUniqueLabelMapFilterLM3_Pointer const & r) const;
     bool operator<=(itkStatisticsUniqueLabelMapFilterLM3_Pointer const & r) const;
     bool operator>=(itkStatisticsUniqueLabelMapFilterLM3_Pointer const & r) const;
     itkStatisticsUniqueLabelMapFilterLM3_Pointer & operator=(itkStatisticsUniqueLabelMapFilterLM3_Pointer const & r);
     itkStatisticsUniqueLabelMapFilterLM3_Pointer & operator=(itkStatisticsUniqueLabelMapFilterLM3 * r);
     itkStatisticsUniqueLabelMapFilterLM3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


