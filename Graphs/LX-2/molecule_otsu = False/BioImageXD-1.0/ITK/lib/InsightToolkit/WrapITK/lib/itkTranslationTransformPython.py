# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkTranslationTransformPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkTranslationTransformPython', [dirname(__file__)])
        except ImportError:
            import _itkTranslationTransformPython
            return _itkTranslationTransformPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkTranslationTransformPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkTranslationTransformPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkTranslationTransformPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkPointPython
import vnl_vectorPython
import vcl_complexPython
import pyBasePython
import vnl_matrixPython
import itkFixedArrayPython
import itkVectorPython
import vnl_vector_refPython
import itkTransformPython
import itkCovariantVectorPython
import itkArray2DPython
import itkArrayPython
import ITKCommonBasePython
import itkEventObjectsPython
def itkTranslationTransformD3_New():
  return itkTranslationTransformD3.New()

def itkTranslationTransformD2_New():
  return itkTranslationTransformD2.New()

class itkTranslationTransformD2(itkTransformPython.itkTransformD22):
    """Proxy of C++ itkTranslationTransformD2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SpaceDimension = _itkTranslationTransformPython.itkTranslationTransformD2_SpaceDimension
    ParametersDimension = _itkTranslationTransformPython.itkTranslationTransformD2_ParametersDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkTranslationTransformPython.itkTranslationTransformD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetOffset(self):
        """GetOffset(self) -> itkVectorD2"""
        return _itkTranslationTransformPython.itkTranslationTransformD2_GetOffset(self)

    def SetOffset(self, *args):
        """SetOffset(self, itkVectorD2 offset)"""
        return _itkTranslationTransformPython.itkTranslationTransformD2_SetOffset(self, *args)

    def Compose(self, *args):
        """
        Compose(self, itkTranslationTransformD2 other, bool pre = 0)
        Compose(self, itkTranslationTransformD2 other)
        """
        return _itkTranslationTransformPython.itkTranslationTransformD2_Compose(self, *args)

    def Translate(self, *args):
        """
        Translate(self, itkVectorD2 offset, bool pre = 0)
        Translate(self, itkVectorD2 offset)
        """
        return _itkTranslationTransformPython.itkTranslationTransformD2_Translate(self, *args)

    def TransformVector(self, *args):
        """
        TransformVector(self, itkVectorD2 vector) -> itkVectorD2
        TransformVector(self, vnl_vector_fixed<(double,2u)> vector) -> vnl_vector_fixed<(double,2u)>
        """
        return _itkTranslationTransformPython.itkTranslationTransformD2_TransformVector(self, *args)

    def BackTransform(self, *args):
        """
        BackTransform(self, itkPointD2 point) -> itkPointD2
        BackTransform(self, itkVectorD2 vect) -> itkVectorD2
        BackTransform(self, vnl_vector_fixed<(double,2u)> vect) -> vnl_vector_fixed<(double,2u)>
        BackTransform(self, itkCovariantVectorD2 vect) -> itkCovariantVectorD2
        """
        return _itkTranslationTransformPython.itkTranslationTransformD2_BackTransform(self, *args)

    def GetInverse(self, *args):
        """GetInverse(self, itkTranslationTransformD2 inverse) -> bool"""
        return _itkTranslationTransformPython.itkTranslationTransformD2_GetInverse(self, *args)

    def SetIdentity(self):
        """SetIdentity(self)"""
        return _itkTranslationTransformPython.itkTranslationTransformD2_SetIdentity(self)

    __swig_destroy__ = _itkTranslationTransformPython.delete_itkTranslationTransformD2
    def cast(*args):
        """cast(itkLightObject obj) -> itkTranslationTransformD2"""
        return _itkTranslationTransformPython.itkTranslationTransformD2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkTranslationTransformD2"""
        return _itkTranslationTransformPython.itkTranslationTransformD2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkTranslationTransformD2
        
        Create a new object of the class itkTranslationTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkTranslationTransformD2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkTranslationTransformD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTranslationTransformD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTranslationTransformD2.GetOffset = new_instancemethod(_itkTranslationTransformPython.itkTranslationTransformD2_GetOffset,None,itkTranslationTransformD2)
itkTranslationTransformD2.SetOffset = new_instancemethod(_itkTranslationTransformPython.itkTranslationTransformD2_SetOffset,None,itkTranslationTransformD2)
itkTranslationTransformD2.Compose = new_instancemethod(_itkTranslationTransformPython.itkTranslationTransformD2_Compose,None,itkTranslationTransformD2)
itkTranslationTransformD2.Translate = new_instancemethod(_itkTranslationTransformPython.itkTranslationTransformD2_Translate,None,itkTranslationTransformD2)
itkTranslationTransformD2.TransformVector = new_instancemethod(_itkTranslationTransformPython.itkTranslationTransformD2_TransformVector,None,itkTranslationTransformD2)
itkTranslationTransformD2.BackTransform = new_instancemethod(_itkTranslationTransformPython.itkTranslationTransformD2_BackTransform,None,itkTranslationTransformD2)
itkTranslationTransformD2.GetInverse = new_instancemethod(_itkTranslationTransformPython.itkTranslationTransformD2_GetInverse,None,itkTranslationTransformD2)
itkTranslationTransformD2.SetIdentity = new_instancemethod(_itkTranslationTransformPython.itkTranslationTransformD2_SetIdentity,None,itkTranslationTransformD2)
itkTranslationTransformD2.GetPointer = new_instancemethod(_itkTranslationTransformPython.itkTranslationTransformD2_GetPointer,None,itkTranslationTransformD2)
itkTranslationTransformD2_swigregister = _itkTranslationTransformPython.itkTranslationTransformD2_swigregister
itkTranslationTransformD2_swigregister(itkTranslationTransformD2)

def itkTranslationTransformD2___New_orig__():
  """itkTranslationTransformD2___New_orig__()"""
  return _itkTranslationTransformPython.itkTranslationTransformD2___New_orig__()

def itkTranslationTransformD2_cast(*args):
  """itkTranslationTransformD2_cast(itkLightObject obj) -> itkTranslationTransformD2"""
  return _itkTranslationTransformPython.itkTranslationTransformD2_cast(*args)

class itkTranslationTransformD3(itkTransformPython.itkTransformD33):
    """Proxy of C++ itkTranslationTransformD3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SpaceDimension = _itkTranslationTransformPython.itkTranslationTransformD3_SpaceDimension
    ParametersDimension = _itkTranslationTransformPython.itkTranslationTransformD3_ParametersDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkTranslationTransformPython.itkTranslationTransformD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetOffset(self):
        """GetOffset(self) -> itkVectorD3"""
        return _itkTranslationTransformPython.itkTranslationTransformD3_GetOffset(self)

    def SetOffset(self, *args):
        """SetOffset(self, itkVectorD3 offset)"""
        return _itkTranslationTransformPython.itkTranslationTransformD3_SetOffset(self, *args)

    def Compose(self, *args):
        """
        Compose(self, itkTranslationTransformD3 other, bool pre = 0)
        Compose(self, itkTranslationTransformD3 other)
        """
        return _itkTranslationTransformPython.itkTranslationTransformD3_Compose(self, *args)

    def Translate(self, *args):
        """
        Translate(self, itkVectorD3 offset, bool pre = 0)
        Translate(self, itkVectorD3 offset)
        """
        return _itkTranslationTransformPython.itkTranslationTransformD3_Translate(self, *args)

    def TransformVector(self, *args):
        """
        TransformVector(self, itkVectorD3 vector) -> itkVectorD3
        TransformVector(self, vnl_vector_fixed<(double,3u)> vector) -> vnl_vector_fixed<(double,3u)>
        """
        return _itkTranslationTransformPython.itkTranslationTransformD3_TransformVector(self, *args)

    def BackTransform(self, *args):
        """
        BackTransform(self, itkPointD3 point) -> itkPointD3
        BackTransform(self, itkVectorD3 vect) -> itkVectorD3
        BackTransform(self, vnl_vector_fixed<(double,3u)> vect) -> vnl_vector_fixed<(double,3u)>
        BackTransform(self, itkCovariantVectorD3 vect) -> itkCovariantVectorD3
        """
        return _itkTranslationTransformPython.itkTranslationTransformD3_BackTransform(self, *args)

    def GetInverse(self, *args):
        """GetInverse(self, itkTranslationTransformD3 inverse) -> bool"""
        return _itkTranslationTransformPython.itkTranslationTransformD3_GetInverse(self, *args)

    def SetIdentity(self):
        """SetIdentity(self)"""
        return _itkTranslationTransformPython.itkTranslationTransformD3_SetIdentity(self)

    __swig_destroy__ = _itkTranslationTransformPython.delete_itkTranslationTransformD3
    def cast(*args):
        """cast(itkLightObject obj) -> itkTranslationTransformD3"""
        return _itkTranslationTransformPython.itkTranslationTransformD3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkTranslationTransformD3"""
        return _itkTranslationTransformPython.itkTranslationTransformD3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkTranslationTransformD3
        
        Create a new object of the class itkTranslationTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkTranslationTransformD3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkTranslationTransformD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTranslationTransformD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTranslationTransformD3.GetOffset = new_instancemethod(_itkTranslationTransformPython.itkTranslationTransformD3_GetOffset,None,itkTranslationTransformD3)
itkTranslationTransformD3.SetOffset = new_instancemethod(_itkTranslationTransformPython.itkTranslationTransformD3_SetOffset,None,itkTranslationTransformD3)
itkTranslationTransformD3.Compose = new_instancemethod(_itkTranslationTransformPython.itkTranslationTransformD3_Compose,None,itkTranslationTransformD3)
itkTranslationTransformD3.Translate = new_instancemethod(_itkTranslationTransformPython.itkTranslationTransformD3_Translate,None,itkTranslationTransformD3)
itkTranslationTransformD3.TransformVector = new_instancemethod(_itkTranslationTransformPython.itkTranslationTransformD3_TransformVector,None,itkTranslationTransformD3)
itkTranslationTransformD3.BackTransform = new_instancemethod(_itkTranslationTransformPython.itkTranslationTransformD3_BackTransform,None,itkTranslationTransformD3)
itkTranslationTransformD3.GetInverse = new_instancemethod(_itkTranslationTransformPython.itkTranslationTransformD3_GetInverse,None,itkTranslationTransformD3)
itkTranslationTransformD3.SetIdentity = new_instancemethod(_itkTranslationTransformPython.itkTranslationTransformD3_SetIdentity,None,itkTranslationTransformD3)
itkTranslationTransformD3.GetPointer = new_instancemethod(_itkTranslationTransformPython.itkTranslationTransformD3_GetPointer,None,itkTranslationTransformD3)
itkTranslationTransformD3_swigregister = _itkTranslationTransformPython.itkTranslationTransformD3_swigregister
itkTranslationTransformD3_swigregister(itkTranslationTransformD3)

def itkTranslationTransformD3___New_orig__():
  """itkTranslationTransformD3___New_orig__()"""
  return _itkTranslationTransformPython.itkTranslationTransformD3___New_orig__()

def itkTranslationTransformD3_cast(*args):
  """itkTranslationTransformD3_cast(itkLightObject obj) -> itkTranslationTransformD3"""
  return _itkTranslationTransformPython.itkTranslationTransformD3_cast(*args)



