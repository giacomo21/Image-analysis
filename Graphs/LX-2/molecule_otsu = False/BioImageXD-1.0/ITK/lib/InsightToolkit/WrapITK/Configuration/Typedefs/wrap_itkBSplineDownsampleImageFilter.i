// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkBSplineDownsampleImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkBSplineDownsampleImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkBSplineDownsampleImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkBSplineDownsampleImageFilterJava
#endif
#ifdef SWIGLUA
%module itkBSplineDownsampleImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkBSplineDownsampleImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkBSplineDownsampleImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkBSplineDownsampleImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkBSplineDownsampleImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkBSplineDownsampleImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkBSplineDownsampleImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkBSplineDownsampleImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkBSplineDownsampleImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkBSplineDownsampleImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkBSplineDownsampleImageFilterPython
#endif
#ifdef SWIGR
%module itkBSplineDownsampleImageFilterR
#endif
#ifdef SWIGRUBY
%module itkBSplineDownsampleImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkBSplineDownsampleImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkBSplineDownsampleImageFilterTcl
#endif
#ifdef SWIGXML
%module itkBSplineDownsampleImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Resize.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkSize.i
%import wrap_itkImageToImageFilterA.i


%include itk.i
%include wrap_itkBSplineDownsampleImageFilter_ext.i


 class itkBSplineDownsampleImageFilterID2ID2_Pointer {
   public:
     itkBSplineDownsampleImageFilterID2ID2_Pointer();
     itkBSplineDownsampleImageFilterID2ID2_Pointer(itkBSplineDownsampleImageFilterID2ID2_Pointer const & p);
     itkBSplineDownsampleImageFilterID2ID2_Pointer(itkBSplineDownsampleImageFilterID2ID2 * p);
     ~itkBSplineDownsampleImageFilterID2ID2_Pointer();
     itkBSplineDownsampleImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineDownsampleImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkBSplineDownsampleImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkBSplineDownsampleImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkBSplineDownsampleImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkBSplineDownsampleImageFilterID2ID2_Pointer const & r) const;
     itkBSplineDownsampleImageFilterID2ID2_Pointer & operator=(itkBSplineDownsampleImageFilterID2ID2_Pointer const & r);
     itkBSplineDownsampleImageFilterID2ID2_Pointer & operator=(itkBSplineDownsampleImageFilterID2ID2 * r);
     itkBSplineDownsampleImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineDownsampleImageFilterID2ID2_Superclass : public itkImageToImageFilterID2ID2 {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     void SetSplineOrder(int SplineOrder);
     virtual int GetSplineOrder() const;
   private:
     void InitializeScratch(itkSize2 DataLength);
     void CopyInputLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< double, 2u > > & Iter);
     void CopyOutputLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< double, 2u > > & Iter);
     void CopyLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< double, 2u > > & Iter);
     itkBSplineDownsampleImageFilterID2ID2_Superclass(itkBSplineDownsampleImageFilterID2ID2_Superclass const & arg0);
     void operator=(itkBSplineDownsampleImageFilterID2ID2_Superclass const & arg0);
   protected:
     void ReduceNDImage(itk::ImageLinearIteratorWithIndex< itk::Image< double, 2u > > & OutItr);
     void ExpandNDImage(itk::ImageLinearIteratorWithIndex< itk::Image< double, 2u > > & OutItr);
     virtual void InitializePyramidSplineFilter(int SplineOrder);
     virtual void Reduce1DImage(std::vector< double > const & In, itk::ImageLinearIteratorWithIndex< itk::Image< double, 2u > > & Iter, unsigned int traverseSize, itkProgressReporter & progress);
     virtual void Expand1DImage(std::vector< double > const & In, itk::ImageLinearIteratorWithIndex< itk::Image< double, 2u > > & Iter, unsigned int traverseSize, itkProgressReporter & progress);
     itkBSplineDownsampleImageFilterID2ID2_Superclass();
     ~itkBSplineDownsampleImageFilterID2ID2_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineDownsampleImageFilterID2ID2_Superclass_Pointer {
   public:
     itkBSplineDownsampleImageFilterID2ID2_Superclass_Pointer();
     itkBSplineDownsampleImageFilterID2ID2_Superclass_Pointer(itkBSplineDownsampleImageFilterID2ID2_Superclass_Pointer const & p);
     itkBSplineDownsampleImageFilterID2ID2_Superclass_Pointer(itkBSplineDownsampleImageFilterID2ID2_Superclass * p);
     ~itkBSplineDownsampleImageFilterID2ID2_Superclass_Pointer();
     itkBSplineDownsampleImageFilterID2ID2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineDownsampleImageFilterID2ID2_Superclass * GetPointer() const;
     bool operator<(itkBSplineDownsampleImageFilterID2ID2_Superclass_Pointer const & r) const;
     bool operator>(itkBSplineDownsampleImageFilterID2ID2_Superclass_Pointer const & r) const;
     bool operator<=(itkBSplineDownsampleImageFilterID2ID2_Superclass_Pointer const & r) const;
     bool operator>=(itkBSplineDownsampleImageFilterID2ID2_Superclass_Pointer const & r) const;
     itkBSplineDownsampleImageFilterID2ID2_Superclass_Pointer & operator=(itkBSplineDownsampleImageFilterID2ID2_Superclass_Pointer const & r);
     itkBSplineDownsampleImageFilterID2ID2_Superclass_Pointer & operator=(itkBSplineDownsampleImageFilterID2ID2_Superclass * r);
     itkBSplineDownsampleImageFilterID2ID2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineDownsampleImageFilterID3ID3_Pointer {
   public:
     itkBSplineDownsampleImageFilterID3ID3_Pointer();
     itkBSplineDownsampleImageFilterID3ID3_Pointer(itkBSplineDownsampleImageFilterID3ID3_Pointer const & p);
     itkBSplineDownsampleImageFilterID3ID3_Pointer(itkBSplineDownsampleImageFilterID3ID3 * p);
     ~itkBSplineDownsampleImageFilterID3ID3_Pointer();
     itkBSplineDownsampleImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineDownsampleImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkBSplineDownsampleImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkBSplineDownsampleImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkBSplineDownsampleImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkBSplineDownsampleImageFilterID3ID3_Pointer const & r) const;
     itkBSplineDownsampleImageFilterID3ID3_Pointer & operator=(itkBSplineDownsampleImageFilterID3ID3_Pointer const & r);
     itkBSplineDownsampleImageFilterID3ID3_Pointer & operator=(itkBSplineDownsampleImageFilterID3ID3 * r);
     itkBSplineDownsampleImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineDownsampleImageFilterID3ID3_Superclass : public itkImageToImageFilterID3ID3 {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     void SetSplineOrder(int SplineOrder);
     virtual int GetSplineOrder() const;
   private:
     void InitializeScratch(itkSize3 DataLength);
     void CopyInputLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< double, 3u > > & Iter);
     void CopyOutputLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< double, 3u > > & Iter);
     void CopyLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< double, 3u > > & Iter);
     itkBSplineDownsampleImageFilterID3ID3_Superclass(itkBSplineDownsampleImageFilterID3ID3_Superclass const & arg0);
     void operator=(itkBSplineDownsampleImageFilterID3ID3_Superclass const & arg0);
   protected:
     void ReduceNDImage(itk::ImageLinearIteratorWithIndex< itk::Image< double, 3u > > & OutItr);
     void ExpandNDImage(itk::ImageLinearIteratorWithIndex< itk::Image< double, 3u > > & OutItr);
     virtual void InitializePyramidSplineFilter(int SplineOrder);
     virtual void Reduce1DImage(std::vector< double > const & In, itk::ImageLinearIteratorWithIndex< itk::Image< double, 3u > > & Iter, unsigned int traverseSize, itkProgressReporter & progress);
     virtual void Expand1DImage(std::vector< double > const & In, itk::ImageLinearIteratorWithIndex< itk::Image< double, 3u > > & Iter, unsigned int traverseSize, itkProgressReporter & progress);
     itkBSplineDownsampleImageFilterID3ID3_Superclass();
     ~itkBSplineDownsampleImageFilterID3ID3_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineDownsampleImageFilterID3ID3_Superclass_Pointer {
   public:
     itkBSplineDownsampleImageFilterID3ID3_Superclass_Pointer();
     itkBSplineDownsampleImageFilterID3ID3_Superclass_Pointer(itkBSplineDownsampleImageFilterID3ID3_Superclass_Pointer const & p);
     itkBSplineDownsampleImageFilterID3ID3_Superclass_Pointer(itkBSplineDownsampleImageFilterID3ID3_Superclass * p);
     ~itkBSplineDownsampleImageFilterID3ID3_Superclass_Pointer();
     itkBSplineDownsampleImageFilterID3ID3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineDownsampleImageFilterID3ID3_Superclass * GetPointer() const;
     bool operator<(itkBSplineDownsampleImageFilterID3ID3_Superclass_Pointer const & r) const;
     bool operator>(itkBSplineDownsampleImageFilterID3ID3_Superclass_Pointer const & r) const;
     bool operator<=(itkBSplineDownsampleImageFilterID3ID3_Superclass_Pointer const & r) const;
     bool operator>=(itkBSplineDownsampleImageFilterID3ID3_Superclass_Pointer const & r) const;
     itkBSplineDownsampleImageFilterID3ID3_Superclass_Pointer & operator=(itkBSplineDownsampleImageFilterID3ID3_Superclass_Pointer const & r);
     itkBSplineDownsampleImageFilterID3ID3_Superclass_Pointer & operator=(itkBSplineDownsampleImageFilterID3ID3_Superclass * r);
     itkBSplineDownsampleImageFilterID3ID3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineDownsampleImageFilterIF2IF2_Pointer {
   public:
     itkBSplineDownsampleImageFilterIF2IF2_Pointer();
     itkBSplineDownsampleImageFilterIF2IF2_Pointer(itkBSplineDownsampleImageFilterIF2IF2_Pointer const & p);
     itkBSplineDownsampleImageFilterIF2IF2_Pointer(itkBSplineDownsampleImageFilterIF2IF2 * p);
     ~itkBSplineDownsampleImageFilterIF2IF2_Pointer();
     itkBSplineDownsampleImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineDownsampleImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkBSplineDownsampleImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkBSplineDownsampleImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkBSplineDownsampleImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkBSplineDownsampleImageFilterIF2IF2_Pointer const & r) const;
     itkBSplineDownsampleImageFilterIF2IF2_Pointer & operator=(itkBSplineDownsampleImageFilterIF2IF2_Pointer const & r);
     itkBSplineDownsampleImageFilterIF2IF2_Pointer & operator=(itkBSplineDownsampleImageFilterIF2IF2 * r);
     itkBSplineDownsampleImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineDownsampleImageFilterIF2IF2_Superclass : public itkImageToImageFilterIF2IF2 {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     void SetSplineOrder(int SplineOrder);
     virtual int GetSplineOrder() const;
   private:
     void InitializeScratch(itkSize2 DataLength);
     void CopyInputLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< float, 2u > > & Iter);
     void CopyOutputLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< float, 2u > > & Iter);
     void CopyLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< float, 2u > > & Iter);
     itkBSplineDownsampleImageFilterIF2IF2_Superclass(itkBSplineDownsampleImageFilterIF2IF2_Superclass const & arg0);
     void operator=(itkBSplineDownsampleImageFilterIF2IF2_Superclass const & arg0);
   protected:
     void ReduceNDImage(itk::ImageLinearIteratorWithIndex< itk::Image< float, 2u > > & OutItr);
     void ExpandNDImage(itk::ImageLinearIteratorWithIndex< itk::Image< float, 2u > > & OutItr);
     virtual void InitializePyramidSplineFilter(int SplineOrder);
     virtual void Reduce1DImage(std::vector< double > const & In, itk::ImageLinearIteratorWithIndex< itk::Image< float, 2u > > & Iter, unsigned int traverseSize, itkProgressReporter & progress);
     virtual void Expand1DImage(std::vector< double > const & In, itk::ImageLinearIteratorWithIndex< itk::Image< float, 2u > > & Iter, unsigned int traverseSize, itkProgressReporter & progress);
     itkBSplineDownsampleImageFilterIF2IF2_Superclass();
     ~itkBSplineDownsampleImageFilterIF2IF2_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineDownsampleImageFilterIF2IF2_Superclass_Pointer {
   public:
     itkBSplineDownsampleImageFilterIF2IF2_Superclass_Pointer();
     itkBSplineDownsampleImageFilterIF2IF2_Superclass_Pointer(itkBSplineDownsampleImageFilterIF2IF2_Superclass_Pointer const & p);
     itkBSplineDownsampleImageFilterIF2IF2_Superclass_Pointer(itkBSplineDownsampleImageFilterIF2IF2_Superclass * p);
     ~itkBSplineDownsampleImageFilterIF2IF2_Superclass_Pointer();
     itkBSplineDownsampleImageFilterIF2IF2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineDownsampleImageFilterIF2IF2_Superclass * GetPointer() const;
     bool operator<(itkBSplineDownsampleImageFilterIF2IF2_Superclass_Pointer const & r) const;
     bool operator>(itkBSplineDownsampleImageFilterIF2IF2_Superclass_Pointer const & r) const;
     bool operator<=(itkBSplineDownsampleImageFilterIF2IF2_Superclass_Pointer const & r) const;
     bool operator>=(itkBSplineDownsampleImageFilterIF2IF2_Superclass_Pointer const & r) const;
     itkBSplineDownsampleImageFilterIF2IF2_Superclass_Pointer & operator=(itkBSplineDownsampleImageFilterIF2IF2_Superclass_Pointer const & r);
     itkBSplineDownsampleImageFilterIF2IF2_Superclass_Pointer & operator=(itkBSplineDownsampleImageFilterIF2IF2_Superclass * r);
     itkBSplineDownsampleImageFilterIF2IF2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineDownsampleImageFilterIF3IF3_Pointer {
   public:
     itkBSplineDownsampleImageFilterIF3IF3_Pointer();
     itkBSplineDownsampleImageFilterIF3IF3_Pointer(itkBSplineDownsampleImageFilterIF3IF3_Pointer const & p);
     itkBSplineDownsampleImageFilterIF3IF3_Pointer(itkBSplineDownsampleImageFilterIF3IF3 * p);
     ~itkBSplineDownsampleImageFilterIF3IF3_Pointer();
     itkBSplineDownsampleImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineDownsampleImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkBSplineDownsampleImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkBSplineDownsampleImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkBSplineDownsampleImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkBSplineDownsampleImageFilterIF3IF3_Pointer const & r) const;
     itkBSplineDownsampleImageFilterIF3IF3_Pointer & operator=(itkBSplineDownsampleImageFilterIF3IF3_Pointer const & r);
     itkBSplineDownsampleImageFilterIF3IF3_Pointer & operator=(itkBSplineDownsampleImageFilterIF3IF3 * r);
     itkBSplineDownsampleImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineDownsampleImageFilterIF3IF3_Superclass : public itkImageToImageFilterIF3IF3 {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     void SetSplineOrder(int SplineOrder);
     virtual int GetSplineOrder() const;
   private:
     void InitializeScratch(itkSize3 DataLength);
     void CopyInputLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< float, 3u > > & Iter);
     void CopyOutputLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< float, 3u > > & Iter);
     void CopyLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< float, 3u > > & Iter);
     itkBSplineDownsampleImageFilterIF3IF3_Superclass(itkBSplineDownsampleImageFilterIF3IF3_Superclass const & arg0);
     void operator=(itkBSplineDownsampleImageFilterIF3IF3_Superclass const & arg0);
   protected:
     void ReduceNDImage(itk::ImageLinearIteratorWithIndex< itk::Image< float, 3u > > & OutItr);
     void ExpandNDImage(itk::ImageLinearIteratorWithIndex< itk::Image< float, 3u > > & OutItr);
     virtual void InitializePyramidSplineFilter(int SplineOrder);
     virtual void Reduce1DImage(std::vector< double > const & In, itk::ImageLinearIteratorWithIndex< itk::Image< float, 3u > > & Iter, unsigned int traverseSize, itkProgressReporter & progress);
     virtual void Expand1DImage(std::vector< double > const & In, itk::ImageLinearIteratorWithIndex< itk::Image< float, 3u > > & Iter, unsigned int traverseSize, itkProgressReporter & progress);
     itkBSplineDownsampleImageFilterIF3IF3_Superclass();
     ~itkBSplineDownsampleImageFilterIF3IF3_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineDownsampleImageFilterIF3IF3_Superclass_Pointer {
   public:
     itkBSplineDownsampleImageFilterIF3IF3_Superclass_Pointer();
     itkBSplineDownsampleImageFilterIF3IF3_Superclass_Pointer(itkBSplineDownsampleImageFilterIF3IF3_Superclass_Pointer const & p);
     itkBSplineDownsampleImageFilterIF3IF3_Superclass_Pointer(itkBSplineDownsampleImageFilterIF3IF3_Superclass * p);
     ~itkBSplineDownsampleImageFilterIF3IF3_Superclass_Pointer();
     itkBSplineDownsampleImageFilterIF3IF3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineDownsampleImageFilterIF3IF3_Superclass * GetPointer() const;
     bool operator<(itkBSplineDownsampleImageFilterIF3IF3_Superclass_Pointer const & r) const;
     bool operator>(itkBSplineDownsampleImageFilterIF3IF3_Superclass_Pointer const & r) const;
     bool operator<=(itkBSplineDownsampleImageFilterIF3IF3_Superclass_Pointer const & r) const;
     bool operator>=(itkBSplineDownsampleImageFilterIF3IF3_Superclass_Pointer const & r) const;
     itkBSplineDownsampleImageFilterIF3IF3_Superclass_Pointer & operator=(itkBSplineDownsampleImageFilterIF3IF3_Superclass_Pointer const & r);
     itkBSplineDownsampleImageFilterIF3IF3_Superclass_Pointer & operator=(itkBSplineDownsampleImageFilterIF3IF3_Superclass * r);
     itkBSplineDownsampleImageFilterIF3IF3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineDownsampleImageFilterIUC2IUC2_Pointer {
   public:
     itkBSplineDownsampleImageFilterIUC2IUC2_Pointer();
     itkBSplineDownsampleImageFilterIUC2IUC2_Pointer(itkBSplineDownsampleImageFilterIUC2IUC2_Pointer const & p);
     itkBSplineDownsampleImageFilterIUC2IUC2_Pointer(itkBSplineDownsampleImageFilterIUC2IUC2 * p);
     ~itkBSplineDownsampleImageFilterIUC2IUC2_Pointer();
     itkBSplineDownsampleImageFilterIUC2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineDownsampleImageFilterIUC2IUC2 * GetPointer() const;
     bool operator<(itkBSplineDownsampleImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>(itkBSplineDownsampleImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator<=(itkBSplineDownsampleImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>=(itkBSplineDownsampleImageFilterIUC2IUC2_Pointer const & r) const;
     itkBSplineDownsampleImageFilterIUC2IUC2_Pointer & operator=(itkBSplineDownsampleImageFilterIUC2IUC2_Pointer const & r);
     itkBSplineDownsampleImageFilterIUC2IUC2_Pointer & operator=(itkBSplineDownsampleImageFilterIUC2IUC2 * r);
     itkBSplineDownsampleImageFilterIUC2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineDownsampleImageFilterIUC2IUC2_Superclass : public itkImageToImageFilterIUC2IUC2 {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     void SetSplineOrder(int SplineOrder);
     virtual int GetSplineOrder() const;
   private:
     void InitializeScratch(itkSize2 DataLength);
     void CopyInputLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< unsigned char, 2u > > & Iter);
     void CopyOutputLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< unsigned char, 2u > > & Iter);
     void CopyLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< unsigned char, 2u > > & Iter);
     itkBSplineDownsampleImageFilterIUC2IUC2_Superclass(itkBSplineDownsampleImageFilterIUC2IUC2_Superclass const & arg0);
     void operator=(itkBSplineDownsampleImageFilterIUC2IUC2_Superclass const & arg0);
   protected:
     void ReduceNDImage(itk::ImageLinearIteratorWithIndex< itk::Image< unsigned char, 2u > > & OutItr);
     void ExpandNDImage(itk::ImageLinearIteratorWithIndex< itk::Image< unsigned char, 2u > > & OutItr);
     virtual void InitializePyramidSplineFilter(int SplineOrder);
     virtual void Reduce1DImage(std::vector< double > const & In, itk::ImageLinearIteratorWithIndex< itk::Image< unsigned char, 2u > > & Iter, unsigned int traverseSize, itkProgressReporter & progress);
     virtual void Expand1DImage(std::vector< double > const & In, itk::ImageLinearIteratorWithIndex< itk::Image< unsigned char, 2u > > & Iter, unsigned int traverseSize, itkProgressReporter & progress);
     itkBSplineDownsampleImageFilterIUC2IUC2_Superclass();
     ~itkBSplineDownsampleImageFilterIUC2IUC2_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineDownsampleImageFilterIUC2IUC2_Superclass_Pointer {
   public:
     itkBSplineDownsampleImageFilterIUC2IUC2_Superclass_Pointer();
     itkBSplineDownsampleImageFilterIUC2IUC2_Superclass_Pointer(itkBSplineDownsampleImageFilterIUC2IUC2_Superclass_Pointer const & p);
     itkBSplineDownsampleImageFilterIUC2IUC2_Superclass_Pointer(itkBSplineDownsampleImageFilterIUC2IUC2_Superclass * p);
     ~itkBSplineDownsampleImageFilterIUC2IUC2_Superclass_Pointer();
     itkBSplineDownsampleImageFilterIUC2IUC2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineDownsampleImageFilterIUC2IUC2_Superclass * GetPointer() const;
     bool operator<(itkBSplineDownsampleImageFilterIUC2IUC2_Superclass_Pointer const & r) const;
     bool operator>(itkBSplineDownsampleImageFilterIUC2IUC2_Superclass_Pointer const & r) const;
     bool operator<=(itkBSplineDownsampleImageFilterIUC2IUC2_Superclass_Pointer const & r) const;
     bool operator>=(itkBSplineDownsampleImageFilterIUC2IUC2_Superclass_Pointer const & r) const;
     itkBSplineDownsampleImageFilterIUC2IUC2_Superclass_Pointer & operator=(itkBSplineDownsampleImageFilterIUC2IUC2_Superclass_Pointer const & r);
     itkBSplineDownsampleImageFilterIUC2IUC2_Superclass_Pointer & operator=(itkBSplineDownsampleImageFilterIUC2IUC2_Superclass * r);
     itkBSplineDownsampleImageFilterIUC2IUC2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineDownsampleImageFilterIUC3IUC3_Pointer {
   public:
     itkBSplineDownsampleImageFilterIUC3IUC3_Pointer();
     itkBSplineDownsampleImageFilterIUC3IUC3_Pointer(itkBSplineDownsampleImageFilterIUC3IUC3_Pointer const & p);
     itkBSplineDownsampleImageFilterIUC3IUC3_Pointer(itkBSplineDownsampleImageFilterIUC3IUC3 * p);
     ~itkBSplineDownsampleImageFilterIUC3IUC3_Pointer();
     itkBSplineDownsampleImageFilterIUC3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineDownsampleImageFilterIUC3IUC3 * GetPointer() const;
     bool operator<(itkBSplineDownsampleImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>(itkBSplineDownsampleImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator<=(itkBSplineDownsampleImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>=(itkBSplineDownsampleImageFilterIUC3IUC3_Pointer const & r) const;
     itkBSplineDownsampleImageFilterIUC3IUC3_Pointer & operator=(itkBSplineDownsampleImageFilterIUC3IUC3_Pointer const & r);
     itkBSplineDownsampleImageFilterIUC3IUC3_Pointer & operator=(itkBSplineDownsampleImageFilterIUC3IUC3 * r);
     itkBSplineDownsampleImageFilterIUC3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineDownsampleImageFilterIUC3IUC3_Superclass : public itkImageToImageFilterIUC3IUC3 {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     void SetSplineOrder(int SplineOrder);
     virtual int GetSplineOrder() const;
   private:
     void InitializeScratch(itkSize3 DataLength);
     void CopyInputLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< unsigned char, 3u > > & Iter);
     void CopyOutputLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< unsigned char, 3u > > & Iter);
     void CopyLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< unsigned char, 3u > > & Iter);
     itkBSplineDownsampleImageFilterIUC3IUC3_Superclass(itkBSplineDownsampleImageFilterIUC3IUC3_Superclass const & arg0);
     void operator=(itkBSplineDownsampleImageFilterIUC3IUC3_Superclass const & arg0);
   protected:
     void ReduceNDImage(itk::ImageLinearIteratorWithIndex< itk::Image< unsigned char, 3u > > & OutItr);
     void ExpandNDImage(itk::ImageLinearIteratorWithIndex< itk::Image< unsigned char, 3u > > & OutItr);
     virtual void InitializePyramidSplineFilter(int SplineOrder);
     virtual void Reduce1DImage(std::vector< double > const & In, itk::ImageLinearIteratorWithIndex< itk::Image< unsigned char, 3u > > & Iter, unsigned int traverseSize, itkProgressReporter & progress);
     virtual void Expand1DImage(std::vector< double > const & In, itk::ImageLinearIteratorWithIndex< itk::Image< unsigned char, 3u > > & Iter, unsigned int traverseSize, itkProgressReporter & progress);
     itkBSplineDownsampleImageFilterIUC3IUC3_Superclass();
     ~itkBSplineDownsampleImageFilterIUC3IUC3_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineDownsampleImageFilterIUC3IUC3_Superclass_Pointer {
   public:
     itkBSplineDownsampleImageFilterIUC3IUC3_Superclass_Pointer();
     itkBSplineDownsampleImageFilterIUC3IUC3_Superclass_Pointer(itkBSplineDownsampleImageFilterIUC3IUC3_Superclass_Pointer const & p);
     itkBSplineDownsampleImageFilterIUC3IUC3_Superclass_Pointer(itkBSplineDownsampleImageFilterIUC3IUC3_Superclass * p);
     ~itkBSplineDownsampleImageFilterIUC3IUC3_Superclass_Pointer();
     itkBSplineDownsampleImageFilterIUC3IUC3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineDownsampleImageFilterIUC3IUC3_Superclass * GetPointer() const;
     bool operator<(itkBSplineDownsampleImageFilterIUC3IUC3_Superclass_Pointer const & r) const;
     bool operator>(itkBSplineDownsampleImageFilterIUC3IUC3_Superclass_Pointer const & r) const;
     bool operator<=(itkBSplineDownsampleImageFilterIUC3IUC3_Superclass_Pointer const & r) const;
     bool operator>=(itkBSplineDownsampleImageFilterIUC3IUC3_Superclass_Pointer const & r) const;
     itkBSplineDownsampleImageFilterIUC3IUC3_Superclass_Pointer & operator=(itkBSplineDownsampleImageFilterIUC3IUC3_Superclass_Pointer const & r);
     itkBSplineDownsampleImageFilterIUC3IUC3_Superclass_Pointer & operator=(itkBSplineDownsampleImageFilterIUC3IUC3_Superclass * r);
     itkBSplineDownsampleImageFilterIUC3IUC3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineDownsampleImageFilterIUL2IUL2_Pointer {
   public:
     itkBSplineDownsampleImageFilterIUL2IUL2_Pointer();
     itkBSplineDownsampleImageFilterIUL2IUL2_Pointer(itkBSplineDownsampleImageFilterIUL2IUL2_Pointer const & p);
     itkBSplineDownsampleImageFilterIUL2IUL2_Pointer(itkBSplineDownsampleImageFilterIUL2IUL2 * p);
     ~itkBSplineDownsampleImageFilterIUL2IUL2_Pointer();
     itkBSplineDownsampleImageFilterIUL2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineDownsampleImageFilterIUL2IUL2 * GetPointer() const;
     bool operator<(itkBSplineDownsampleImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>(itkBSplineDownsampleImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator<=(itkBSplineDownsampleImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>=(itkBSplineDownsampleImageFilterIUL2IUL2_Pointer const & r) const;
     itkBSplineDownsampleImageFilterIUL2IUL2_Pointer & operator=(itkBSplineDownsampleImageFilterIUL2IUL2_Pointer const & r);
     itkBSplineDownsampleImageFilterIUL2IUL2_Pointer & operator=(itkBSplineDownsampleImageFilterIUL2IUL2 * r);
     itkBSplineDownsampleImageFilterIUL2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineDownsampleImageFilterIUL2IUL2_Superclass : public itkImageToImageFilterIUL2IUL2 {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     void SetSplineOrder(int SplineOrder);
     virtual int GetSplineOrder() const;
   private:
     void InitializeScratch(itkSize2 DataLength);
     void CopyInputLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< unsigned long, 2u > > & Iter);
     void CopyOutputLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< unsigned long, 2u > > & Iter);
     void CopyLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< unsigned long, 2u > > & Iter);
     itkBSplineDownsampleImageFilterIUL2IUL2_Superclass(itkBSplineDownsampleImageFilterIUL2IUL2_Superclass const & arg0);
     void operator=(itkBSplineDownsampleImageFilterIUL2IUL2_Superclass const & arg0);
   protected:
     void ReduceNDImage(itk::ImageLinearIteratorWithIndex< itk::Image< unsigned long, 2u > > & OutItr);
     void ExpandNDImage(itk::ImageLinearIteratorWithIndex< itk::Image< unsigned long, 2u > > & OutItr);
     virtual void InitializePyramidSplineFilter(int SplineOrder);
     virtual void Reduce1DImage(std::vector< double > const & In, itk::ImageLinearIteratorWithIndex< itk::Image< unsigned long, 2u > > & Iter, unsigned int traverseSize, itkProgressReporter & progress);
     virtual void Expand1DImage(std::vector< double > const & In, itk::ImageLinearIteratorWithIndex< itk::Image< unsigned long, 2u > > & Iter, unsigned int traverseSize, itkProgressReporter & progress);
     itkBSplineDownsampleImageFilterIUL2IUL2_Superclass();
     ~itkBSplineDownsampleImageFilterIUL2IUL2_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineDownsampleImageFilterIUL2IUL2_Superclass_Pointer {
   public:
     itkBSplineDownsampleImageFilterIUL2IUL2_Superclass_Pointer();
     itkBSplineDownsampleImageFilterIUL2IUL2_Superclass_Pointer(itkBSplineDownsampleImageFilterIUL2IUL2_Superclass_Pointer const & p);
     itkBSplineDownsampleImageFilterIUL2IUL2_Superclass_Pointer(itkBSplineDownsampleImageFilterIUL2IUL2_Superclass * p);
     ~itkBSplineDownsampleImageFilterIUL2IUL2_Superclass_Pointer();
     itkBSplineDownsampleImageFilterIUL2IUL2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineDownsampleImageFilterIUL2IUL2_Superclass * GetPointer() const;
     bool operator<(itkBSplineDownsampleImageFilterIUL2IUL2_Superclass_Pointer const & r) const;
     bool operator>(itkBSplineDownsampleImageFilterIUL2IUL2_Superclass_Pointer const & r) const;
     bool operator<=(itkBSplineDownsampleImageFilterIUL2IUL2_Superclass_Pointer const & r) const;
     bool operator>=(itkBSplineDownsampleImageFilterIUL2IUL2_Superclass_Pointer const & r) const;
     itkBSplineDownsampleImageFilterIUL2IUL2_Superclass_Pointer & operator=(itkBSplineDownsampleImageFilterIUL2IUL2_Superclass_Pointer const & r);
     itkBSplineDownsampleImageFilterIUL2IUL2_Superclass_Pointer & operator=(itkBSplineDownsampleImageFilterIUL2IUL2_Superclass * r);
     itkBSplineDownsampleImageFilterIUL2IUL2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineDownsampleImageFilterIUL3IUL3_Pointer {
   public:
     itkBSplineDownsampleImageFilterIUL3IUL3_Pointer();
     itkBSplineDownsampleImageFilterIUL3IUL3_Pointer(itkBSplineDownsampleImageFilterIUL3IUL3_Pointer const & p);
     itkBSplineDownsampleImageFilterIUL3IUL3_Pointer(itkBSplineDownsampleImageFilterIUL3IUL3 * p);
     ~itkBSplineDownsampleImageFilterIUL3IUL3_Pointer();
     itkBSplineDownsampleImageFilterIUL3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineDownsampleImageFilterIUL3IUL3 * GetPointer() const;
     bool operator<(itkBSplineDownsampleImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>(itkBSplineDownsampleImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator<=(itkBSplineDownsampleImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>=(itkBSplineDownsampleImageFilterIUL3IUL3_Pointer const & r) const;
     itkBSplineDownsampleImageFilterIUL3IUL3_Pointer & operator=(itkBSplineDownsampleImageFilterIUL3IUL3_Pointer const & r);
     itkBSplineDownsampleImageFilterIUL3IUL3_Pointer & operator=(itkBSplineDownsampleImageFilterIUL3IUL3 * r);
     itkBSplineDownsampleImageFilterIUL3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineDownsampleImageFilterIUL3IUL3_Superclass : public itkImageToImageFilterIUL3IUL3 {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     void SetSplineOrder(int SplineOrder);
     virtual int GetSplineOrder() const;
   private:
     void InitializeScratch(itkSize3 DataLength);
     void CopyInputLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< unsigned long, 3u > > & Iter);
     void CopyOutputLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< unsigned long, 3u > > & Iter);
     void CopyLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< unsigned long, 3u > > & Iter);
     itkBSplineDownsampleImageFilterIUL3IUL3_Superclass(itkBSplineDownsampleImageFilterIUL3IUL3_Superclass const & arg0);
     void operator=(itkBSplineDownsampleImageFilterIUL3IUL3_Superclass const & arg0);
   protected:
     void ReduceNDImage(itk::ImageLinearIteratorWithIndex< itk::Image< unsigned long, 3u > > & OutItr);
     void ExpandNDImage(itk::ImageLinearIteratorWithIndex< itk::Image< unsigned long, 3u > > & OutItr);
     virtual void InitializePyramidSplineFilter(int SplineOrder);
     virtual void Reduce1DImage(std::vector< double > const & In, itk::ImageLinearIteratorWithIndex< itk::Image< unsigned long, 3u > > & Iter, unsigned int traverseSize, itkProgressReporter & progress);
     virtual void Expand1DImage(std::vector< double > const & In, itk::ImageLinearIteratorWithIndex< itk::Image< unsigned long, 3u > > & Iter, unsigned int traverseSize, itkProgressReporter & progress);
     itkBSplineDownsampleImageFilterIUL3IUL3_Superclass();
     ~itkBSplineDownsampleImageFilterIUL3IUL3_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineDownsampleImageFilterIUL3IUL3_Superclass_Pointer {
   public:
     itkBSplineDownsampleImageFilterIUL3IUL3_Superclass_Pointer();
     itkBSplineDownsampleImageFilterIUL3IUL3_Superclass_Pointer(itkBSplineDownsampleImageFilterIUL3IUL3_Superclass_Pointer const & p);
     itkBSplineDownsampleImageFilterIUL3IUL3_Superclass_Pointer(itkBSplineDownsampleImageFilterIUL3IUL3_Superclass * p);
     ~itkBSplineDownsampleImageFilterIUL3IUL3_Superclass_Pointer();
     itkBSplineDownsampleImageFilterIUL3IUL3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineDownsampleImageFilterIUL3IUL3_Superclass * GetPointer() const;
     bool operator<(itkBSplineDownsampleImageFilterIUL3IUL3_Superclass_Pointer const & r) const;
     bool operator>(itkBSplineDownsampleImageFilterIUL3IUL3_Superclass_Pointer const & r) const;
     bool operator<=(itkBSplineDownsampleImageFilterIUL3IUL3_Superclass_Pointer const & r) const;
     bool operator>=(itkBSplineDownsampleImageFilterIUL3IUL3_Superclass_Pointer const & r) const;
     itkBSplineDownsampleImageFilterIUL3IUL3_Superclass_Pointer & operator=(itkBSplineDownsampleImageFilterIUL3IUL3_Superclass_Pointer const & r);
     itkBSplineDownsampleImageFilterIUL3IUL3_Superclass_Pointer & operator=(itkBSplineDownsampleImageFilterIUL3IUL3_Superclass * r);
     itkBSplineDownsampleImageFilterIUL3IUL3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineDownsampleImageFilterIUS2IUS2_Pointer {
   public:
     itkBSplineDownsampleImageFilterIUS2IUS2_Pointer();
     itkBSplineDownsampleImageFilterIUS2IUS2_Pointer(itkBSplineDownsampleImageFilterIUS2IUS2_Pointer const & p);
     itkBSplineDownsampleImageFilterIUS2IUS2_Pointer(itkBSplineDownsampleImageFilterIUS2IUS2 * p);
     ~itkBSplineDownsampleImageFilterIUS2IUS2_Pointer();
     itkBSplineDownsampleImageFilterIUS2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineDownsampleImageFilterIUS2IUS2 * GetPointer() const;
     bool operator<(itkBSplineDownsampleImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>(itkBSplineDownsampleImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator<=(itkBSplineDownsampleImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>=(itkBSplineDownsampleImageFilterIUS2IUS2_Pointer const & r) const;
     itkBSplineDownsampleImageFilterIUS2IUS2_Pointer & operator=(itkBSplineDownsampleImageFilterIUS2IUS2_Pointer const & r);
     itkBSplineDownsampleImageFilterIUS2IUS2_Pointer & operator=(itkBSplineDownsampleImageFilterIUS2IUS2 * r);
     itkBSplineDownsampleImageFilterIUS2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineDownsampleImageFilterIUS2IUS2_Superclass : public itkImageToImageFilterIUS2IUS2 {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     void SetSplineOrder(int SplineOrder);
     virtual int GetSplineOrder() const;
   private:
     void InitializeScratch(itkSize2 DataLength);
     void CopyInputLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< unsigned short, 2u > > & Iter);
     void CopyOutputLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< unsigned short, 2u > > & Iter);
     void CopyLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< unsigned short, 2u > > & Iter);
     itkBSplineDownsampleImageFilterIUS2IUS2_Superclass(itkBSplineDownsampleImageFilterIUS2IUS2_Superclass const & arg0);
     void operator=(itkBSplineDownsampleImageFilterIUS2IUS2_Superclass const & arg0);
   protected:
     void ReduceNDImage(itk::ImageLinearIteratorWithIndex< itk::Image< unsigned short, 2u > > & OutItr);
     void ExpandNDImage(itk::ImageLinearIteratorWithIndex< itk::Image< unsigned short, 2u > > & OutItr);
     virtual void InitializePyramidSplineFilter(int SplineOrder);
     virtual void Reduce1DImage(std::vector< double > const & In, itk::ImageLinearIteratorWithIndex< itk::Image< unsigned short, 2u > > & Iter, unsigned int traverseSize, itkProgressReporter & progress);
     virtual void Expand1DImage(std::vector< double > const & In, itk::ImageLinearIteratorWithIndex< itk::Image< unsigned short, 2u > > & Iter, unsigned int traverseSize, itkProgressReporter & progress);
     itkBSplineDownsampleImageFilterIUS2IUS2_Superclass();
     ~itkBSplineDownsampleImageFilterIUS2IUS2_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineDownsampleImageFilterIUS2IUS2_Superclass_Pointer {
   public:
     itkBSplineDownsampleImageFilterIUS2IUS2_Superclass_Pointer();
     itkBSplineDownsampleImageFilterIUS2IUS2_Superclass_Pointer(itkBSplineDownsampleImageFilterIUS2IUS2_Superclass_Pointer const & p);
     itkBSplineDownsampleImageFilterIUS2IUS2_Superclass_Pointer(itkBSplineDownsampleImageFilterIUS2IUS2_Superclass * p);
     ~itkBSplineDownsampleImageFilterIUS2IUS2_Superclass_Pointer();
     itkBSplineDownsampleImageFilterIUS2IUS2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineDownsampleImageFilterIUS2IUS2_Superclass * GetPointer() const;
     bool operator<(itkBSplineDownsampleImageFilterIUS2IUS2_Superclass_Pointer const & r) const;
     bool operator>(itkBSplineDownsampleImageFilterIUS2IUS2_Superclass_Pointer const & r) const;
     bool operator<=(itkBSplineDownsampleImageFilterIUS2IUS2_Superclass_Pointer const & r) const;
     bool operator>=(itkBSplineDownsampleImageFilterIUS2IUS2_Superclass_Pointer const & r) const;
     itkBSplineDownsampleImageFilterIUS2IUS2_Superclass_Pointer & operator=(itkBSplineDownsampleImageFilterIUS2IUS2_Superclass_Pointer const & r);
     itkBSplineDownsampleImageFilterIUS2IUS2_Superclass_Pointer & operator=(itkBSplineDownsampleImageFilterIUS2IUS2_Superclass * r);
     itkBSplineDownsampleImageFilterIUS2IUS2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineDownsampleImageFilterIUS3IUS3_Pointer {
   public:
     itkBSplineDownsampleImageFilterIUS3IUS3_Pointer();
     itkBSplineDownsampleImageFilterIUS3IUS3_Pointer(itkBSplineDownsampleImageFilterIUS3IUS3_Pointer const & p);
     itkBSplineDownsampleImageFilterIUS3IUS3_Pointer(itkBSplineDownsampleImageFilterIUS3IUS3 * p);
     ~itkBSplineDownsampleImageFilterIUS3IUS3_Pointer();
     itkBSplineDownsampleImageFilterIUS3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineDownsampleImageFilterIUS3IUS3 * GetPointer() const;
     bool operator<(itkBSplineDownsampleImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>(itkBSplineDownsampleImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator<=(itkBSplineDownsampleImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>=(itkBSplineDownsampleImageFilterIUS3IUS3_Pointer const & r) const;
     itkBSplineDownsampleImageFilterIUS3IUS3_Pointer & operator=(itkBSplineDownsampleImageFilterIUS3IUS3_Pointer const & r);
     itkBSplineDownsampleImageFilterIUS3IUS3_Pointer & operator=(itkBSplineDownsampleImageFilterIUS3IUS3 * r);
     itkBSplineDownsampleImageFilterIUS3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineDownsampleImageFilterIUS3IUS3_Superclass : public itkImageToImageFilterIUS3IUS3 {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     void SetSplineOrder(int SplineOrder);
     virtual int GetSplineOrder() const;
   private:
     void InitializeScratch(itkSize3 DataLength);
     void CopyInputLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< unsigned short, 3u > > & Iter);
     void CopyOutputLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< unsigned short, 3u > > & Iter);
     void CopyLineToScratch(itk::ImageLinearConstIteratorWithIndex< itk::Image< unsigned short, 3u > > & Iter);
     itkBSplineDownsampleImageFilterIUS3IUS3_Superclass(itkBSplineDownsampleImageFilterIUS3IUS3_Superclass const & arg0);
     void operator=(itkBSplineDownsampleImageFilterIUS3IUS3_Superclass const & arg0);
   protected:
     void ReduceNDImage(itk::ImageLinearIteratorWithIndex< itk::Image< unsigned short, 3u > > & OutItr);
     void ExpandNDImage(itk::ImageLinearIteratorWithIndex< itk::Image< unsigned short, 3u > > & OutItr);
     virtual void InitializePyramidSplineFilter(int SplineOrder);
     virtual void Reduce1DImage(std::vector< double > const & In, itk::ImageLinearIteratorWithIndex< itk::Image< unsigned short, 3u > > & Iter, unsigned int traverseSize, itkProgressReporter & progress);
     virtual void Expand1DImage(std::vector< double > const & In, itk::ImageLinearIteratorWithIndex< itk::Image< unsigned short, 3u > > & Iter, unsigned int traverseSize, itkProgressReporter & progress);
     itkBSplineDownsampleImageFilterIUS3IUS3_Superclass();
     ~itkBSplineDownsampleImageFilterIUS3IUS3_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineDownsampleImageFilterIUS3IUS3_Superclass_Pointer {
   public:
     itkBSplineDownsampleImageFilterIUS3IUS3_Superclass_Pointer();
     itkBSplineDownsampleImageFilterIUS3IUS3_Superclass_Pointer(itkBSplineDownsampleImageFilterIUS3IUS3_Superclass_Pointer const & p);
     itkBSplineDownsampleImageFilterIUS3IUS3_Superclass_Pointer(itkBSplineDownsampleImageFilterIUS3IUS3_Superclass * p);
     ~itkBSplineDownsampleImageFilterIUS3IUS3_Superclass_Pointer();
     itkBSplineDownsampleImageFilterIUS3IUS3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineDownsampleImageFilterIUS3IUS3_Superclass * GetPointer() const;
     bool operator<(itkBSplineDownsampleImageFilterIUS3IUS3_Superclass_Pointer const & r) const;
     bool operator>(itkBSplineDownsampleImageFilterIUS3IUS3_Superclass_Pointer const & r) const;
     bool operator<=(itkBSplineDownsampleImageFilterIUS3IUS3_Superclass_Pointer const & r) const;
     bool operator>=(itkBSplineDownsampleImageFilterIUS3IUS3_Superclass_Pointer const & r) const;
     itkBSplineDownsampleImageFilterIUS3IUS3_Superclass_Pointer & operator=(itkBSplineDownsampleImageFilterIUS3IUS3_Superclass_Pointer const & r);
     itkBSplineDownsampleImageFilterIUS3IUS3_Superclass_Pointer & operator=(itkBSplineDownsampleImageFilterIUS3IUS3_Superclass * r);
     itkBSplineDownsampleImageFilterIUS3IUS3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineDownsampleImageFilterID2ID2 : public itkBSplineDownsampleImageFilterID2ID2_Superclass {
   public:
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineDownsampleImageFilterID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
   private:
     itkBSplineDownsampleImageFilterID2ID2(itkBSplineDownsampleImageFilterID2ID2 const & arg0);
     void operator=(itkBSplineDownsampleImageFilterID2ID2 const & arg0);
   protected:
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
     itkBSplineDownsampleImageFilterID2ID2();
     ~itkBSplineDownsampleImageFilterID2ID2();
 };


 class itkBSplineDownsampleImageFilterID3ID3 : public itkBSplineDownsampleImageFilterID3ID3_Superclass {
   public:
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineDownsampleImageFilterID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
   private:
     itkBSplineDownsampleImageFilterID3ID3(itkBSplineDownsampleImageFilterID3ID3 const & arg0);
     void operator=(itkBSplineDownsampleImageFilterID3ID3 const & arg0);
   protected:
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
     itkBSplineDownsampleImageFilterID3ID3();
     ~itkBSplineDownsampleImageFilterID3ID3();
 };


 class itkBSplineDownsampleImageFilterIF2IF2 : public itkBSplineDownsampleImageFilterIF2IF2_Superclass {
   public:
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineDownsampleImageFilterIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
   private:
     itkBSplineDownsampleImageFilterIF2IF2(itkBSplineDownsampleImageFilterIF2IF2 const & arg0);
     void operator=(itkBSplineDownsampleImageFilterIF2IF2 const & arg0);
   protected:
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
     itkBSplineDownsampleImageFilterIF2IF2();
     ~itkBSplineDownsampleImageFilterIF2IF2();
 };


 class itkBSplineDownsampleImageFilterIF3IF3 : public itkBSplineDownsampleImageFilterIF3IF3_Superclass {
   public:
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineDownsampleImageFilterIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
   private:
     itkBSplineDownsampleImageFilterIF3IF3(itkBSplineDownsampleImageFilterIF3IF3 const & arg0);
     void operator=(itkBSplineDownsampleImageFilterIF3IF3 const & arg0);
   protected:
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
     itkBSplineDownsampleImageFilterIF3IF3();
     ~itkBSplineDownsampleImageFilterIF3IF3();
 };


 class itkBSplineDownsampleImageFilterIUC2IUC2 : public itkBSplineDownsampleImageFilterIUC2IUC2_Superclass {
   public:
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineDownsampleImageFilterIUC2IUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
   private:
     itkBSplineDownsampleImageFilterIUC2IUC2(itkBSplineDownsampleImageFilterIUC2IUC2 const & arg0);
     void operator=(itkBSplineDownsampleImageFilterIUC2IUC2 const & arg0);
   protected:
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
     itkBSplineDownsampleImageFilterIUC2IUC2();
     ~itkBSplineDownsampleImageFilterIUC2IUC2();
 };


 class itkBSplineDownsampleImageFilterIUC3IUC3 : public itkBSplineDownsampleImageFilterIUC3IUC3_Superclass {
   public:
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineDownsampleImageFilterIUC3IUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
   private:
     itkBSplineDownsampleImageFilterIUC3IUC3(itkBSplineDownsampleImageFilterIUC3IUC3 const & arg0);
     void operator=(itkBSplineDownsampleImageFilterIUC3IUC3 const & arg0);
   protected:
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
     itkBSplineDownsampleImageFilterIUC3IUC3();
     ~itkBSplineDownsampleImageFilterIUC3IUC3();
 };


 class itkBSplineDownsampleImageFilterIUL2IUL2 : public itkBSplineDownsampleImageFilterIUL2IUL2_Superclass {
   public:
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineDownsampleImageFilterIUL2IUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
   private:
     itkBSplineDownsampleImageFilterIUL2IUL2(itkBSplineDownsampleImageFilterIUL2IUL2 const & arg0);
     void operator=(itkBSplineDownsampleImageFilterIUL2IUL2 const & arg0);
   protected:
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
     itkBSplineDownsampleImageFilterIUL2IUL2();
     ~itkBSplineDownsampleImageFilterIUL2IUL2();
 };


 class itkBSplineDownsampleImageFilterIUL3IUL3 : public itkBSplineDownsampleImageFilterIUL3IUL3_Superclass {
   public:
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineDownsampleImageFilterIUL3IUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
   private:
     itkBSplineDownsampleImageFilterIUL3IUL3(itkBSplineDownsampleImageFilterIUL3IUL3 const & arg0);
     void operator=(itkBSplineDownsampleImageFilterIUL3IUL3 const & arg0);
   protected:
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
     itkBSplineDownsampleImageFilterIUL3IUL3();
     ~itkBSplineDownsampleImageFilterIUL3IUL3();
 };


 class itkBSplineDownsampleImageFilterIUS2IUS2 : public itkBSplineDownsampleImageFilterIUS2IUS2_Superclass {
   public:
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineDownsampleImageFilterIUS2IUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
   private:
     itkBSplineDownsampleImageFilterIUS2IUS2(itkBSplineDownsampleImageFilterIUS2IUS2 const & arg0);
     void operator=(itkBSplineDownsampleImageFilterIUS2IUS2 const & arg0);
   protected:
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
     itkBSplineDownsampleImageFilterIUS2IUS2();
     ~itkBSplineDownsampleImageFilterIUS2IUS2();
 };


 class itkBSplineDownsampleImageFilterIUS3IUS3 : public itkBSplineDownsampleImageFilterIUS3IUS3_Superclass {
   public:
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineDownsampleImageFilterIUS3IUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
   private:
     itkBSplineDownsampleImageFilterIUS3IUS3(itkBSplineDownsampleImageFilterIUS3IUS3 const & arg0);
     void operator=(itkBSplineDownsampleImageFilterIUS3IUS3 const & arg0);
   protected:
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
     itkBSplineDownsampleImageFilterIUS3IUS3();
     ~itkBSplineDownsampleImageFilterIUS3IUS3();
 };


