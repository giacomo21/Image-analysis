// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkBinaryThinningImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkBinaryThinningImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkBinaryThinningImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkBinaryThinningImageFilterJava
#endif
#ifdef SWIGLUA
%module itkBinaryThinningImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkBinaryThinningImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkBinaryThinningImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkBinaryThinningImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkBinaryThinningImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkBinaryThinningImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkBinaryThinningImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkBinaryThinningImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkBinaryThinningImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkBinaryThinningImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkBinaryThinningImageFilterPython
#endif
#ifdef SWIGR
%module itkBinaryThinningImageFilterR
#endif
#ifdef SWIGRUBY
%module itkBinaryThinningImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkBinaryThinningImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkBinaryThinningImageFilterTcl
#endif
#ifdef SWIGXML
%module itkBinaryThinningImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
#include "Numerics.includes"
#include "BinaryMorphology.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkImage.i
%import wrap_itkImageToImageFilterA.i


%include itk.i
%include wrap_itkBinaryThinningImageFilter_ext.i


 class itkBinaryThinningImageFilterIUC2IUC2 : public itkImageToImageFilterIUC2IUC2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  InputAdditiveOperatorsCheck = 1 };
     enum  {  InputConvertibleToIntCheck = 1 };
     enum  {  IntConvertibleToInputCheck = 1 };
     enum  {  SameTypeCheck = 1 };
     enum  {  InputIntComparableCheck = 1 };
     static itkBinaryThinningImageFilterIUC2IUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itkImageUC2 * GetThinning();
   private:
     itkBinaryThinningImageFilterIUC2IUC2(itkBinaryThinningImageFilterIUC2IUC2 const & arg0);
     void operator=(itkBinaryThinningImageFilterIUC2IUC2 const & arg0);
   protected:
     itkBinaryThinningImageFilterIUC2IUC2();
     ~itkBinaryThinningImageFilterIUC2IUC2();
     virtual void GenerateData();
     void PrepareData();
     void ComputeThinImage();
 };


 class itkBinaryThinningImageFilterIUC2IUC2_Pointer {
   public:
     itkBinaryThinningImageFilterIUC2IUC2_Pointer();
     itkBinaryThinningImageFilterIUC2IUC2_Pointer(itkBinaryThinningImageFilterIUC2IUC2_Pointer const & p);
     itkBinaryThinningImageFilterIUC2IUC2_Pointer(itkBinaryThinningImageFilterIUC2IUC2 * p);
     ~itkBinaryThinningImageFilterIUC2IUC2_Pointer();
     itkBinaryThinningImageFilterIUC2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryThinningImageFilterIUC2IUC2 * GetPointer() const;
     bool operator<(itkBinaryThinningImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>(itkBinaryThinningImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator<=(itkBinaryThinningImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>=(itkBinaryThinningImageFilterIUC2IUC2_Pointer const & r) const;
     itkBinaryThinningImageFilterIUC2IUC2_Pointer & operator=(itkBinaryThinningImageFilterIUC2IUC2_Pointer const & r);
     itkBinaryThinningImageFilterIUC2IUC2_Pointer & operator=(itkBinaryThinningImageFilterIUC2IUC2 * r);
     itkBinaryThinningImageFilterIUC2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryThinningImageFilterIUL2IUL2 : public itkImageToImageFilterIUL2IUL2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  InputAdditiveOperatorsCheck = 1 };
     enum  {  InputConvertibleToIntCheck = 1 };
     enum  {  IntConvertibleToInputCheck = 1 };
     enum  {  SameTypeCheck = 1 };
     enum  {  InputIntComparableCheck = 1 };
     static itkBinaryThinningImageFilterIUL2IUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itkImageUL2 * GetThinning();
   private:
     itkBinaryThinningImageFilterIUL2IUL2(itkBinaryThinningImageFilterIUL2IUL2 const & arg0);
     void operator=(itkBinaryThinningImageFilterIUL2IUL2 const & arg0);
   protected:
     itkBinaryThinningImageFilterIUL2IUL2();
     ~itkBinaryThinningImageFilterIUL2IUL2();
     virtual void GenerateData();
     void PrepareData();
     void ComputeThinImage();
 };


 class itkBinaryThinningImageFilterIUL2IUL2_Pointer {
   public:
     itkBinaryThinningImageFilterIUL2IUL2_Pointer();
     itkBinaryThinningImageFilterIUL2IUL2_Pointer(itkBinaryThinningImageFilterIUL2IUL2_Pointer const & p);
     itkBinaryThinningImageFilterIUL2IUL2_Pointer(itkBinaryThinningImageFilterIUL2IUL2 * p);
     ~itkBinaryThinningImageFilterIUL2IUL2_Pointer();
     itkBinaryThinningImageFilterIUL2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryThinningImageFilterIUL2IUL2 * GetPointer() const;
     bool operator<(itkBinaryThinningImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>(itkBinaryThinningImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator<=(itkBinaryThinningImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>=(itkBinaryThinningImageFilterIUL2IUL2_Pointer const & r) const;
     itkBinaryThinningImageFilterIUL2IUL2_Pointer & operator=(itkBinaryThinningImageFilterIUL2IUL2_Pointer const & r);
     itkBinaryThinningImageFilterIUL2IUL2_Pointer & operator=(itkBinaryThinningImageFilterIUL2IUL2 * r);
     itkBinaryThinningImageFilterIUL2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryThinningImageFilterIUS2IUS2 : public itkImageToImageFilterIUS2IUS2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  InputAdditiveOperatorsCheck = 1 };
     enum  {  InputConvertibleToIntCheck = 1 };
     enum  {  IntConvertibleToInputCheck = 1 };
     enum  {  SameTypeCheck = 1 };
     enum  {  InputIntComparableCheck = 1 };
     static itkBinaryThinningImageFilterIUS2IUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itkImageUS2 * GetThinning();
   private:
     itkBinaryThinningImageFilterIUS2IUS2(itkBinaryThinningImageFilterIUS2IUS2 const & arg0);
     void operator=(itkBinaryThinningImageFilterIUS2IUS2 const & arg0);
   protected:
     itkBinaryThinningImageFilterIUS2IUS2();
     ~itkBinaryThinningImageFilterIUS2IUS2();
     virtual void GenerateData();
     void PrepareData();
     void ComputeThinImage();
 };


 class itkBinaryThinningImageFilterIUS2IUS2_Pointer {
   public:
     itkBinaryThinningImageFilterIUS2IUS2_Pointer();
     itkBinaryThinningImageFilterIUS2IUS2_Pointer(itkBinaryThinningImageFilterIUS2IUS2_Pointer const & p);
     itkBinaryThinningImageFilterIUS2IUS2_Pointer(itkBinaryThinningImageFilterIUS2IUS2 * p);
     ~itkBinaryThinningImageFilterIUS2IUS2_Pointer();
     itkBinaryThinningImageFilterIUS2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryThinningImageFilterIUS2IUS2 * GetPointer() const;
     bool operator<(itkBinaryThinningImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>(itkBinaryThinningImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator<=(itkBinaryThinningImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>=(itkBinaryThinningImageFilterIUS2IUS2_Pointer const & r) const;
     itkBinaryThinningImageFilterIUS2IUS2_Pointer & operator=(itkBinaryThinningImageFilterIUS2IUS2_Pointer const & r);
     itkBinaryThinningImageFilterIUS2IUS2_Pointer & operator=(itkBinaryThinningImageFilterIUS2IUS2 * r);
     itkBinaryThinningImageFilterIUS2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


