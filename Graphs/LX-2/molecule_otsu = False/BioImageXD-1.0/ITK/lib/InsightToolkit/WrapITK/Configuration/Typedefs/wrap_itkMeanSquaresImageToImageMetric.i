// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkMeanSquaresImageToImageMetricChicken
#endif
#ifdef SWIGCSHARP
%module itkMeanSquaresImageToImageMetricCsharp
#endif
#ifdef SWIGGUILE
%module itkMeanSquaresImageToImageMetricGuile
#endif
#ifdef SWIGJAVA
%module itkMeanSquaresImageToImageMetricJava
#endif
#ifdef SWIGLUA
%module itkMeanSquaresImageToImageMetricLua
#endif
#ifdef SWIGMODULA3
%module itkMeanSquaresImageToImageMetricModula3
#endif
#ifdef SWIGMZSCHEME
%module itkMeanSquaresImageToImageMetricMzscheme
#endif
#ifdef SWIGOCAML
%module itkMeanSquaresImageToImageMetricOcaml
#endif
#ifdef SWIGPERL
%module itkMeanSquaresImageToImageMetricPerl
#endif
#ifdef SWIGPERL5
%module itkMeanSquaresImageToImageMetricPerl5
#endif
#ifdef SWIGPHP
%module itkMeanSquaresImageToImageMetricPhp
#endif
#ifdef SWIGPHP4
%module itkMeanSquaresImageToImageMetricPhp4
#endif
#ifdef SWIGPHP5
%module itkMeanSquaresImageToImageMetricPhp5
#endif
#ifdef SWIGPIKE
%module itkMeanSquaresImageToImageMetricPike
#endif
#ifdef SWIGPYTHON
%module itkMeanSquaresImageToImageMetricPython
#endif
#ifdef SWIGR
%module itkMeanSquaresImageToImageMetricR
#endif
#ifdef SWIGRUBY
%module itkMeanSquaresImageToImageMetricRuby
#endif
#ifdef SWIGSEXP
%module itkMeanSquaresImageToImageMetricSexp
#endif
#ifdef SWIGTCL
%module itkMeanSquaresImageToImageMetricTcl
#endif
#ifdef SWIGXML
%module itkMeanSquaresImageToImageMetricXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Numerics.includes"
#include "Transforms.includes"
#include "SpatialObject.includes"
#include "Resize.includes"
#include "Calculators.includes"
#include "Registration.includes"
%}


%{
%}




%import wrap_itkCovariantVector.i
%import wrap_itkImageToImageMetric.i
%import wrap_itkPoint.i
%import wrap_itkArray.i
%import wrap_ITKCommonBase.i


%include itk.i
%include wrap_itkMeanSquaresImageToImageMetric_ext.i


 class itkMeanSquaresImageToImageMetricID2ID2 : public itkImageToImageMetricID2ID2 {
   public:
     enum  {  MovingImageDimension = 2 };
     static itkMeanSquaresImageToImageMetricID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Initialize();
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & Derivative) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & Derivative) const;
   private:
     itkMeanSquaresImageToImageMetricID2ID2(itkMeanSquaresImageToImageMetricID2ID2 const & arg0);
     void operator=(itkMeanSquaresImageToImageMetricID2ID2 const & arg0);
     virtual bool GetValueThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD2 const & mappedPoint, double movingImageValue) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD2 const & mappedPoint, double movingImageValue, itkCovariantVectorD2 const & movingImageGradientValue) const;
   protected:
     itkMeanSquaresImageToImageMetricID2ID2();
     ~itkMeanSquaresImageToImageMetricID2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMeanSquaresImageToImageMetricID2ID2_Pointer {
   public:
     itkMeanSquaresImageToImageMetricID2ID2_Pointer();
     itkMeanSquaresImageToImageMetricID2ID2_Pointer(itkMeanSquaresImageToImageMetricID2ID2_Pointer const & p);
     itkMeanSquaresImageToImageMetricID2ID2_Pointer(itkMeanSquaresImageToImageMetricID2ID2 * p);
     ~itkMeanSquaresImageToImageMetricID2ID2_Pointer();
     itkMeanSquaresImageToImageMetricID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeanSquaresImageToImageMetricID2ID2 * GetPointer() const;
     bool operator<(itkMeanSquaresImageToImageMetricID2ID2_Pointer const & r) const;
     bool operator>(itkMeanSquaresImageToImageMetricID2ID2_Pointer const & r) const;
     bool operator<=(itkMeanSquaresImageToImageMetricID2ID2_Pointer const & r) const;
     bool operator>=(itkMeanSquaresImageToImageMetricID2ID2_Pointer const & r) const;
     itkMeanSquaresImageToImageMetricID2ID2_Pointer & operator=(itkMeanSquaresImageToImageMetricID2ID2_Pointer const & r);
     itkMeanSquaresImageToImageMetricID2ID2_Pointer & operator=(itkMeanSquaresImageToImageMetricID2ID2 * r);
     itkMeanSquaresImageToImageMetricID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMeanSquaresImageToImageMetricID3ID3 : public itkImageToImageMetricID3ID3 {
   public:
     enum  {  MovingImageDimension = 3 };
     static itkMeanSquaresImageToImageMetricID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Initialize();
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & Derivative) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & Derivative) const;
   private:
     itkMeanSquaresImageToImageMetricID3ID3(itkMeanSquaresImageToImageMetricID3ID3 const & arg0);
     void operator=(itkMeanSquaresImageToImageMetricID3ID3 const & arg0);
     virtual bool GetValueThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD3 const & mappedPoint, double movingImageValue) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD3 const & mappedPoint, double movingImageValue, itkCovariantVectorD3 const & movingImageGradientValue) const;
   protected:
     itkMeanSquaresImageToImageMetricID3ID3();
     ~itkMeanSquaresImageToImageMetricID3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMeanSquaresImageToImageMetricID3ID3_Pointer {
   public:
     itkMeanSquaresImageToImageMetricID3ID3_Pointer();
     itkMeanSquaresImageToImageMetricID3ID3_Pointer(itkMeanSquaresImageToImageMetricID3ID3_Pointer const & p);
     itkMeanSquaresImageToImageMetricID3ID3_Pointer(itkMeanSquaresImageToImageMetricID3ID3 * p);
     ~itkMeanSquaresImageToImageMetricID3ID3_Pointer();
     itkMeanSquaresImageToImageMetricID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeanSquaresImageToImageMetricID3ID3 * GetPointer() const;
     bool operator<(itkMeanSquaresImageToImageMetricID3ID3_Pointer const & r) const;
     bool operator>(itkMeanSquaresImageToImageMetricID3ID3_Pointer const & r) const;
     bool operator<=(itkMeanSquaresImageToImageMetricID3ID3_Pointer const & r) const;
     bool operator>=(itkMeanSquaresImageToImageMetricID3ID3_Pointer const & r) const;
     itkMeanSquaresImageToImageMetricID3ID3_Pointer & operator=(itkMeanSquaresImageToImageMetricID3ID3_Pointer const & r);
     itkMeanSquaresImageToImageMetricID3ID3_Pointer & operator=(itkMeanSquaresImageToImageMetricID3ID3 * r);
     itkMeanSquaresImageToImageMetricID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMeanSquaresImageToImageMetricIF2IF2 : public itkImageToImageMetricIF2IF2 {
   public:
     enum  {  MovingImageDimension = 2 };
     static itkMeanSquaresImageToImageMetricIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Initialize();
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & Derivative) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & Derivative) const;
   private:
     itkMeanSquaresImageToImageMetricIF2IF2(itkMeanSquaresImageToImageMetricIF2IF2 const & arg0);
     void operator=(itkMeanSquaresImageToImageMetricIF2IF2 const & arg0);
     virtual bool GetValueThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD2 const & mappedPoint, double movingImageValue) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD2 const & mappedPoint, double movingImageValue, itkCovariantVectorD2 const & movingImageGradientValue) const;
   protected:
     itkMeanSquaresImageToImageMetricIF2IF2();
     ~itkMeanSquaresImageToImageMetricIF2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMeanSquaresImageToImageMetricIF2IF2_Pointer {
   public:
     itkMeanSquaresImageToImageMetricIF2IF2_Pointer();
     itkMeanSquaresImageToImageMetricIF2IF2_Pointer(itkMeanSquaresImageToImageMetricIF2IF2_Pointer const & p);
     itkMeanSquaresImageToImageMetricIF2IF2_Pointer(itkMeanSquaresImageToImageMetricIF2IF2 * p);
     ~itkMeanSquaresImageToImageMetricIF2IF2_Pointer();
     itkMeanSquaresImageToImageMetricIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeanSquaresImageToImageMetricIF2IF2 * GetPointer() const;
     bool operator<(itkMeanSquaresImageToImageMetricIF2IF2_Pointer const & r) const;
     bool operator>(itkMeanSquaresImageToImageMetricIF2IF2_Pointer const & r) const;
     bool operator<=(itkMeanSquaresImageToImageMetricIF2IF2_Pointer const & r) const;
     bool operator>=(itkMeanSquaresImageToImageMetricIF2IF2_Pointer const & r) const;
     itkMeanSquaresImageToImageMetricIF2IF2_Pointer & operator=(itkMeanSquaresImageToImageMetricIF2IF2_Pointer const & r);
     itkMeanSquaresImageToImageMetricIF2IF2_Pointer & operator=(itkMeanSquaresImageToImageMetricIF2IF2 * r);
     itkMeanSquaresImageToImageMetricIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMeanSquaresImageToImageMetricIF3IF3 : public itkImageToImageMetricIF3IF3 {
   public:
     enum  {  MovingImageDimension = 3 };
     static itkMeanSquaresImageToImageMetricIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Initialize();
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & Derivative) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & Derivative) const;
   private:
     itkMeanSquaresImageToImageMetricIF3IF3(itkMeanSquaresImageToImageMetricIF3IF3 const & arg0);
     void operator=(itkMeanSquaresImageToImageMetricIF3IF3 const & arg0);
     virtual bool GetValueThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD3 const & mappedPoint, double movingImageValue) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD3 const & mappedPoint, double movingImageValue, itkCovariantVectorD3 const & movingImageGradientValue) const;
   protected:
     itkMeanSquaresImageToImageMetricIF3IF3();
     ~itkMeanSquaresImageToImageMetricIF3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMeanSquaresImageToImageMetricIF3IF3_Pointer {
   public:
     itkMeanSquaresImageToImageMetricIF3IF3_Pointer();
     itkMeanSquaresImageToImageMetricIF3IF3_Pointer(itkMeanSquaresImageToImageMetricIF3IF3_Pointer const & p);
     itkMeanSquaresImageToImageMetricIF3IF3_Pointer(itkMeanSquaresImageToImageMetricIF3IF3 * p);
     ~itkMeanSquaresImageToImageMetricIF3IF3_Pointer();
     itkMeanSquaresImageToImageMetricIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeanSquaresImageToImageMetricIF3IF3 * GetPointer() const;
     bool operator<(itkMeanSquaresImageToImageMetricIF3IF3_Pointer const & r) const;
     bool operator>(itkMeanSquaresImageToImageMetricIF3IF3_Pointer const & r) const;
     bool operator<=(itkMeanSquaresImageToImageMetricIF3IF3_Pointer const & r) const;
     bool operator>=(itkMeanSquaresImageToImageMetricIF3IF3_Pointer const & r) const;
     itkMeanSquaresImageToImageMetricIF3IF3_Pointer & operator=(itkMeanSquaresImageToImageMetricIF3IF3_Pointer const & r);
     itkMeanSquaresImageToImageMetricIF3IF3_Pointer & operator=(itkMeanSquaresImageToImageMetricIF3IF3 * r);
     itkMeanSquaresImageToImageMetricIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMeanSquaresImageToImageMetricIUC2IUC2 : public itkImageToImageMetricIUC2IUC2 {
   public:
     enum  {  MovingImageDimension = 2 };
     static itkMeanSquaresImageToImageMetricIUC2IUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Initialize();
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & Derivative) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & Derivative) const;
   private:
     itkMeanSquaresImageToImageMetricIUC2IUC2(itkMeanSquaresImageToImageMetricIUC2IUC2 const & arg0);
     void operator=(itkMeanSquaresImageToImageMetricIUC2IUC2 const & arg0);
     virtual bool GetValueThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD2 const & mappedPoint, double movingImageValue) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD2 const & mappedPoint, double movingImageValue, itkCovariantVectorD2 const & movingImageGradientValue) const;
   protected:
     itkMeanSquaresImageToImageMetricIUC2IUC2();
     ~itkMeanSquaresImageToImageMetricIUC2IUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMeanSquaresImageToImageMetricIUC2IUC2_Pointer {
   public:
     itkMeanSquaresImageToImageMetricIUC2IUC2_Pointer();
     itkMeanSquaresImageToImageMetricIUC2IUC2_Pointer(itkMeanSquaresImageToImageMetricIUC2IUC2_Pointer const & p);
     itkMeanSquaresImageToImageMetricIUC2IUC2_Pointer(itkMeanSquaresImageToImageMetricIUC2IUC2 * p);
     ~itkMeanSquaresImageToImageMetricIUC2IUC2_Pointer();
     itkMeanSquaresImageToImageMetricIUC2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeanSquaresImageToImageMetricIUC2IUC2 * GetPointer() const;
     bool operator<(itkMeanSquaresImageToImageMetricIUC2IUC2_Pointer const & r) const;
     bool operator>(itkMeanSquaresImageToImageMetricIUC2IUC2_Pointer const & r) const;
     bool operator<=(itkMeanSquaresImageToImageMetricIUC2IUC2_Pointer const & r) const;
     bool operator>=(itkMeanSquaresImageToImageMetricIUC2IUC2_Pointer const & r) const;
     itkMeanSquaresImageToImageMetricIUC2IUC2_Pointer & operator=(itkMeanSquaresImageToImageMetricIUC2IUC2_Pointer const & r);
     itkMeanSquaresImageToImageMetricIUC2IUC2_Pointer & operator=(itkMeanSquaresImageToImageMetricIUC2IUC2 * r);
     itkMeanSquaresImageToImageMetricIUC2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMeanSquaresImageToImageMetricIUC3IUC3 : public itkImageToImageMetricIUC3IUC3 {
   public:
     enum  {  MovingImageDimension = 3 };
     static itkMeanSquaresImageToImageMetricIUC3IUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Initialize();
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & Derivative) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & Derivative) const;
   private:
     itkMeanSquaresImageToImageMetricIUC3IUC3(itkMeanSquaresImageToImageMetricIUC3IUC3 const & arg0);
     void operator=(itkMeanSquaresImageToImageMetricIUC3IUC3 const & arg0);
     virtual bool GetValueThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD3 const & mappedPoint, double movingImageValue) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD3 const & mappedPoint, double movingImageValue, itkCovariantVectorD3 const & movingImageGradientValue) const;
   protected:
     itkMeanSquaresImageToImageMetricIUC3IUC3();
     ~itkMeanSquaresImageToImageMetricIUC3IUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMeanSquaresImageToImageMetricIUC3IUC3_Pointer {
   public:
     itkMeanSquaresImageToImageMetricIUC3IUC3_Pointer();
     itkMeanSquaresImageToImageMetricIUC3IUC3_Pointer(itkMeanSquaresImageToImageMetricIUC3IUC3_Pointer const & p);
     itkMeanSquaresImageToImageMetricIUC3IUC3_Pointer(itkMeanSquaresImageToImageMetricIUC3IUC3 * p);
     ~itkMeanSquaresImageToImageMetricIUC3IUC3_Pointer();
     itkMeanSquaresImageToImageMetricIUC3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeanSquaresImageToImageMetricIUC3IUC3 * GetPointer() const;
     bool operator<(itkMeanSquaresImageToImageMetricIUC3IUC3_Pointer const & r) const;
     bool operator>(itkMeanSquaresImageToImageMetricIUC3IUC3_Pointer const & r) const;
     bool operator<=(itkMeanSquaresImageToImageMetricIUC3IUC3_Pointer const & r) const;
     bool operator>=(itkMeanSquaresImageToImageMetricIUC3IUC3_Pointer const & r) const;
     itkMeanSquaresImageToImageMetricIUC3IUC3_Pointer & operator=(itkMeanSquaresImageToImageMetricIUC3IUC3_Pointer const & r);
     itkMeanSquaresImageToImageMetricIUC3IUC3_Pointer & operator=(itkMeanSquaresImageToImageMetricIUC3IUC3 * r);
     itkMeanSquaresImageToImageMetricIUC3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMeanSquaresImageToImageMetricIUL2IUL2 : public itkImageToImageMetricIUL2IUL2 {
   public:
     enum  {  MovingImageDimension = 2 };
     static itkMeanSquaresImageToImageMetricIUL2IUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Initialize();
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & Derivative) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & Derivative) const;
   private:
     itkMeanSquaresImageToImageMetricIUL2IUL2(itkMeanSquaresImageToImageMetricIUL2IUL2 const & arg0);
     void operator=(itkMeanSquaresImageToImageMetricIUL2IUL2 const & arg0);
     virtual bool GetValueThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD2 const & mappedPoint, double movingImageValue) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD2 const & mappedPoint, double movingImageValue, itkCovariantVectorD2 const & movingImageGradientValue) const;
   protected:
     itkMeanSquaresImageToImageMetricIUL2IUL2();
     ~itkMeanSquaresImageToImageMetricIUL2IUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMeanSquaresImageToImageMetricIUL2IUL2_Pointer {
   public:
     itkMeanSquaresImageToImageMetricIUL2IUL2_Pointer();
     itkMeanSquaresImageToImageMetricIUL2IUL2_Pointer(itkMeanSquaresImageToImageMetricIUL2IUL2_Pointer const & p);
     itkMeanSquaresImageToImageMetricIUL2IUL2_Pointer(itkMeanSquaresImageToImageMetricIUL2IUL2 * p);
     ~itkMeanSquaresImageToImageMetricIUL2IUL2_Pointer();
     itkMeanSquaresImageToImageMetricIUL2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeanSquaresImageToImageMetricIUL2IUL2 * GetPointer() const;
     bool operator<(itkMeanSquaresImageToImageMetricIUL2IUL2_Pointer const & r) const;
     bool operator>(itkMeanSquaresImageToImageMetricIUL2IUL2_Pointer const & r) const;
     bool operator<=(itkMeanSquaresImageToImageMetricIUL2IUL2_Pointer const & r) const;
     bool operator>=(itkMeanSquaresImageToImageMetricIUL2IUL2_Pointer const & r) const;
     itkMeanSquaresImageToImageMetricIUL2IUL2_Pointer & operator=(itkMeanSquaresImageToImageMetricIUL2IUL2_Pointer const & r);
     itkMeanSquaresImageToImageMetricIUL2IUL2_Pointer & operator=(itkMeanSquaresImageToImageMetricIUL2IUL2 * r);
     itkMeanSquaresImageToImageMetricIUL2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMeanSquaresImageToImageMetricIUL3IUL3 : public itkImageToImageMetricIUL3IUL3 {
   public:
     enum  {  MovingImageDimension = 3 };
     static itkMeanSquaresImageToImageMetricIUL3IUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Initialize();
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & Derivative) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & Derivative) const;
   private:
     itkMeanSquaresImageToImageMetricIUL3IUL3(itkMeanSquaresImageToImageMetricIUL3IUL3 const & arg0);
     void operator=(itkMeanSquaresImageToImageMetricIUL3IUL3 const & arg0);
     virtual bool GetValueThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD3 const & mappedPoint, double movingImageValue) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD3 const & mappedPoint, double movingImageValue, itkCovariantVectorD3 const & movingImageGradientValue) const;
   protected:
     itkMeanSquaresImageToImageMetricIUL3IUL3();
     ~itkMeanSquaresImageToImageMetricIUL3IUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMeanSquaresImageToImageMetricIUL3IUL3_Pointer {
   public:
     itkMeanSquaresImageToImageMetricIUL3IUL3_Pointer();
     itkMeanSquaresImageToImageMetricIUL3IUL3_Pointer(itkMeanSquaresImageToImageMetricIUL3IUL3_Pointer const & p);
     itkMeanSquaresImageToImageMetricIUL3IUL3_Pointer(itkMeanSquaresImageToImageMetricIUL3IUL3 * p);
     ~itkMeanSquaresImageToImageMetricIUL3IUL3_Pointer();
     itkMeanSquaresImageToImageMetricIUL3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeanSquaresImageToImageMetricIUL3IUL3 * GetPointer() const;
     bool operator<(itkMeanSquaresImageToImageMetricIUL3IUL3_Pointer const & r) const;
     bool operator>(itkMeanSquaresImageToImageMetricIUL3IUL3_Pointer const & r) const;
     bool operator<=(itkMeanSquaresImageToImageMetricIUL3IUL3_Pointer const & r) const;
     bool operator>=(itkMeanSquaresImageToImageMetricIUL3IUL3_Pointer const & r) const;
     itkMeanSquaresImageToImageMetricIUL3IUL3_Pointer & operator=(itkMeanSquaresImageToImageMetricIUL3IUL3_Pointer const & r);
     itkMeanSquaresImageToImageMetricIUL3IUL3_Pointer & operator=(itkMeanSquaresImageToImageMetricIUL3IUL3 * r);
     itkMeanSquaresImageToImageMetricIUL3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMeanSquaresImageToImageMetricIUS2IUS2 : public itkImageToImageMetricIUS2IUS2 {
   public:
     enum  {  MovingImageDimension = 2 };
     static itkMeanSquaresImageToImageMetricIUS2IUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Initialize();
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & Derivative) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & Derivative) const;
   private:
     itkMeanSquaresImageToImageMetricIUS2IUS2(itkMeanSquaresImageToImageMetricIUS2IUS2 const & arg0);
     void operator=(itkMeanSquaresImageToImageMetricIUS2IUS2 const & arg0);
     virtual bool GetValueThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD2 const & mappedPoint, double movingImageValue) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD2 const & mappedPoint, double movingImageValue, itkCovariantVectorD2 const & movingImageGradientValue) const;
   protected:
     itkMeanSquaresImageToImageMetricIUS2IUS2();
     ~itkMeanSquaresImageToImageMetricIUS2IUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMeanSquaresImageToImageMetricIUS2IUS2_Pointer {
   public:
     itkMeanSquaresImageToImageMetricIUS2IUS2_Pointer();
     itkMeanSquaresImageToImageMetricIUS2IUS2_Pointer(itkMeanSquaresImageToImageMetricIUS2IUS2_Pointer const & p);
     itkMeanSquaresImageToImageMetricIUS2IUS2_Pointer(itkMeanSquaresImageToImageMetricIUS2IUS2 * p);
     ~itkMeanSquaresImageToImageMetricIUS2IUS2_Pointer();
     itkMeanSquaresImageToImageMetricIUS2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeanSquaresImageToImageMetricIUS2IUS2 * GetPointer() const;
     bool operator<(itkMeanSquaresImageToImageMetricIUS2IUS2_Pointer const & r) const;
     bool operator>(itkMeanSquaresImageToImageMetricIUS2IUS2_Pointer const & r) const;
     bool operator<=(itkMeanSquaresImageToImageMetricIUS2IUS2_Pointer const & r) const;
     bool operator>=(itkMeanSquaresImageToImageMetricIUS2IUS2_Pointer const & r) const;
     itkMeanSquaresImageToImageMetricIUS2IUS2_Pointer & operator=(itkMeanSquaresImageToImageMetricIUS2IUS2_Pointer const & r);
     itkMeanSquaresImageToImageMetricIUS2IUS2_Pointer & operator=(itkMeanSquaresImageToImageMetricIUS2IUS2 * r);
     itkMeanSquaresImageToImageMetricIUS2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMeanSquaresImageToImageMetricIUS3IUS3 : public itkImageToImageMetricIUS3IUS3 {
   public:
     enum  {  MovingImageDimension = 3 };
     static itkMeanSquaresImageToImageMetricIUS3IUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Initialize();
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & Derivative) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & Derivative) const;
   private:
     itkMeanSquaresImageToImageMetricIUS3IUS3(itkMeanSquaresImageToImageMetricIUS3IUS3 const & arg0);
     void operator=(itkMeanSquaresImageToImageMetricIUS3IUS3 const & arg0);
     virtual bool GetValueThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD3 const & mappedPoint, double movingImageValue) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD3 const & mappedPoint, double movingImageValue, itkCovariantVectorD3 const & movingImageGradientValue) const;
   protected:
     itkMeanSquaresImageToImageMetricIUS3IUS3();
     ~itkMeanSquaresImageToImageMetricIUS3IUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMeanSquaresImageToImageMetricIUS3IUS3_Pointer {
   public:
     itkMeanSquaresImageToImageMetricIUS3IUS3_Pointer();
     itkMeanSquaresImageToImageMetricIUS3IUS3_Pointer(itkMeanSquaresImageToImageMetricIUS3IUS3_Pointer const & p);
     itkMeanSquaresImageToImageMetricIUS3IUS3_Pointer(itkMeanSquaresImageToImageMetricIUS3IUS3 * p);
     ~itkMeanSquaresImageToImageMetricIUS3IUS3_Pointer();
     itkMeanSquaresImageToImageMetricIUS3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeanSquaresImageToImageMetricIUS3IUS3 * GetPointer() const;
     bool operator<(itkMeanSquaresImageToImageMetricIUS3IUS3_Pointer const & r) const;
     bool operator>(itkMeanSquaresImageToImageMetricIUS3IUS3_Pointer const & r) const;
     bool operator<=(itkMeanSquaresImageToImageMetricIUS3IUS3_Pointer const & r) const;
     bool operator>=(itkMeanSquaresImageToImageMetricIUS3IUS3_Pointer const & r) const;
     itkMeanSquaresImageToImageMetricIUS3IUS3_Pointer & operator=(itkMeanSquaresImageToImageMetricIUS3IUS3_Pointer const & r);
     itkMeanSquaresImageToImageMetricIUS3IUS3_Pointer & operator=(itkMeanSquaresImageToImageMetricIUS3IUS3 * r);
     itkMeanSquaresImageToImageMetricIUS3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


