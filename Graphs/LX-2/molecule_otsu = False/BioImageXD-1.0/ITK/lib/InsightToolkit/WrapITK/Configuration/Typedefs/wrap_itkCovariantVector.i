// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkCovariantVectorChicken
#endif
#ifdef SWIGCSHARP
%module itkCovariantVectorCsharp
#endif
#ifdef SWIGGUILE
%module itkCovariantVectorGuile
#endif
#ifdef SWIGJAVA
%module itkCovariantVectorJava
#endif
#ifdef SWIGLUA
%module itkCovariantVectorLua
#endif
#ifdef SWIGMODULA3
%module itkCovariantVectorModula3
#endif
#ifdef SWIGMZSCHEME
%module itkCovariantVectorMzscheme
#endif
#ifdef SWIGOCAML
%module itkCovariantVectorOcaml
#endif
#ifdef SWIGPERL
%module itkCovariantVectorPerl
#endif
#ifdef SWIGPERL5
%module itkCovariantVectorPerl5
#endif
#ifdef SWIGPHP
%module itkCovariantVectorPhp
#endif
#ifdef SWIGPHP4
%module itkCovariantVectorPhp4
#endif
#ifdef SWIGPHP5
%module itkCovariantVectorPhp5
#endif
#ifdef SWIGPIKE
%module itkCovariantVectorPike
#endif
#ifdef SWIGPYTHON
%module itkCovariantVectorPython
#endif
#ifdef SWIGR
%module itkCovariantVectorR
#endif
#ifdef SWIGRUBY
%module itkCovariantVectorRuby
#endif
#ifdef SWIGSEXP
%module itkCovariantVectorSexp
#endif
#ifdef SWIGTCL
%module itkCovariantVectorTcl
#endif
#ifdef SWIGXML
%module itkCovariantVectorXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
%}


%{
%}




%import wrap_vnl_vector.i
%import wrap_itkFixedArray.i
%import wrap_itkVector.i
%import wrap_vnl_vector_ref.i


%include itk.i
%include wrap_itkCovariantVector_ext.i


 class itkCovariantVectorD2 : public itkFixedArrayD2 {
   public:
     enum  {  Dimension = 2 };
     ~itkCovariantVectorD2();
     itkCovariantVectorD2(itkCovariantVectorD2 const & arg0);
     static unsigned int GetCovariantVectorDimension();
     void SetVnlVector(vnl_vectorD const & arg0);
     vnl_vector_refD GetVnlVector();
     vnl_vectorD GetVnlVector() const;
     void Set_vnl_vector(vnl_vectorD const & arg0);
     vnl_vector_refD Get_vnl_vector();
     vnl_vectorD Get_vnl_vector() const;
     itkCovariantVectorD2();
     itkCovariantVectorD2(double const & r);
     itkCovariantVectorD2(double const * r);
     itkCovariantVectorD2 & operator=(itkCovariantVectorD2 const & r);
     itkCovariantVectorD2 & operator=(double const * r);
     itkCovariantVectorD2 const & operator+=(itkCovariantVectorD2 const & vec);
     itkCovariantVectorD2 const & operator-=(itkCovariantVectorD2 const & vec);
     itkCovariantVectorD2 operator-() const;
     itkCovariantVectorD2 operator+(itkCovariantVectorD2 const & vec) const;
     itkCovariantVectorD2 operator-(itkCovariantVectorD2 const & vec) const;
     double operator*(itkCovariantVectorD2 const & vec) const;
     double operator*(itkVectorD2 const & vec) const;
     itkCovariantVectorD2 operator*(double const & val) const;
     double GetNorm() const;
     static unsigned int GetNumberOfComponents();
     void Normalize();
     double GetSquaredNorm() const;
   private:
   protected:
 };


 class itkCovariantVectorD3 : public itkFixedArrayD3 {
   public:
     enum  {  Dimension = 3 };
     ~itkCovariantVectorD3();
     itkCovariantVectorD3(itkCovariantVectorD3 const & arg0);
     static unsigned int GetCovariantVectorDimension();
     void SetVnlVector(vnl_vectorD const & arg0);
     vnl_vector_refD GetVnlVector();
     vnl_vectorD GetVnlVector() const;
     void Set_vnl_vector(vnl_vectorD const & arg0);
     vnl_vector_refD Get_vnl_vector();
     vnl_vectorD Get_vnl_vector() const;
     itkCovariantVectorD3();
     itkCovariantVectorD3(double const & r);
     itkCovariantVectorD3(double const * r);
     itkCovariantVectorD3 & operator=(itkCovariantVectorD3 const & r);
     itkCovariantVectorD3 & operator=(double const * r);
     itkCovariantVectorD3 const & operator+=(itkCovariantVectorD3 const & vec);
     itkCovariantVectorD3 const & operator-=(itkCovariantVectorD3 const & vec);
     itkCovariantVectorD3 operator-() const;
     itkCovariantVectorD3 operator+(itkCovariantVectorD3 const & vec) const;
     itkCovariantVectorD3 operator-(itkCovariantVectorD3 const & vec) const;
     double operator*(itkCovariantVectorD3 const & vec) const;
     double operator*(itkVectorD3 const & vec) const;
     itkCovariantVectorD3 operator*(double const & val) const;
     double GetNorm() const;
     static unsigned int GetNumberOfComponents();
     void Normalize();
     double GetSquaredNorm() const;
   private:
   protected:
 };


 class itkCovariantVectorF2 : public itkFixedArrayF2 {
   public:
     enum  {  Dimension = 2 };
     ~itkCovariantVectorF2();
     itkCovariantVectorF2(itkCovariantVectorF2 const & arg0);
     static unsigned int GetCovariantVectorDimension();
     void SetVnlVector(vnl_vectorF const & arg0);
     vnl_vector_refF GetVnlVector();
     vnl_vectorF GetVnlVector() const;
     void Set_vnl_vector(vnl_vectorF const & arg0);
     vnl_vector_refF Get_vnl_vector();
     vnl_vectorF Get_vnl_vector() const;
     itkCovariantVectorF2();
     itkCovariantVectorF2(float const & r);
     itkCovariantVectorF2(float const * r);
     itkCovariantVectorF2 & operator=(itkCovariantVectorF2 const & r);
     itkCovariantVectorF2 & operator=(float const * r);
     itkCovariantVectorF2 const & operator+=(itkCovariantVectorF2 const & vec);
     itkCovariantVectorF2 const & operator-=(itkCovariantVectorF2 const & vec);
     itkCovariantVectorF2 operator-() const;
     itkCovariantVectorF2 operator+(itkCovariantVectorF2 const & vec) const;
     itkCovariantVectorF2 operator-(itkCovariantVectorF2 const & vec) const;
     float operator*(itkCovariantVectorF2 const & vec) const;
     float operator*(itkVectorF2 const & vec) const;
     itkCovariantVectorF2 operator*(float const & val) const;
     double GetNorm() const;
     static unsigned int GetNumberOfComponents();
     void Normalize();
     double GetSquaredNorm() const;
   private:
   protected:
 };


 class itkCovariantVectorF3 : public itkFixedArrayF3 {
   public:
     enum  {  Dimension = 3 };
     ~itkCovariantVectorF3();
     itkCovariantVectorF3(itkCovariantVectorF3 const & arg0);
     static unsigned int GetCovariantVectorDimension();
     void SetVnlVector(vnl_vectorF const & arg0);
     vnl_vector_refF GetVnlVector();
     vnl_vectorF GetVnlVector() const;
     void Set_vnl_vector(vnl_vectorF const & arg0);
     vnl_vector_refF Get_vnl_vector();
     vnl_vectorF Get_vnl_vector() const;
     itkCovariantVectorF3();
     itkCovariantVectorF3(float const & r);
     itkCovariantVectorF3(float const * r);
     itkCovariantVectorF3 & operator=(itkCovariantVectorF3 const & r);
     itkCovariantVectorF3 & operator=(float const * r);
     itkCovariantVectorF3 const & operator+=(itkCovariantVectorF3 const & vec);
     itkCovariantVectorF3 const & operator-=(itkCovariantVectorF3 const & vec);
     itkCovariantVectorF3 operator-() const;
     itkCovariantVectorF3 operator+(itkCovariantVectorF3 const & vec) const;
     itkCovariantVectorF3 operator-(itkCovariantVectorF3 const & vec) const;
     float operator*(itkCovariantVectorF3 const & vec) const;
     float operator*(itkVectorF3 const & vec) const;
     itkCovariantVectorF3 operator*(float const & val) const;
     double GetNorm() const;
     static unsigned int GetNumberOfComponents();
     void Normalize();
     double GetSquaredNorm() const;
   private:
   protected:
 };


