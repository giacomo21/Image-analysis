// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkLaplacianImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkLaplacianImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkLaplacianImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkLaplacianImageFilterJava
#endif
#ifdef SWIGLUA
%module itkLaplacianImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkLaplacianImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkLaplacianImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkLaplacianImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkLaplacianImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkLaplacianImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkLaplacianImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkLaplacianImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkLaplacianImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkLaplacianImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkLaplacianImageFilterPython
#endif
#ifdef SWIGR
%module itkLaplacianImageFilterR
#endif
#ifdef SWIGRUBY
%module itkLaplacianImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkLaplacianImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkLaplacianImageFilterTcl
#endif
#ifdef SWIGXML
%module itkLaplacianImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Filtering.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkImageToImageFilterA.i


%include itk.i
%include wrap_itkLaplacianImageFilter_ext.i


 class itkLaplacianImageFilterID2ID2 : public itkImageToImageFilterID2ID2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  ImageDimension = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  InputPixelTypeIsFloatingPointCheck = 1 };
     enum  {  OutputPixelTypeIsFloatingPointCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkLaplacianImageFilterID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void GenerateInputRequestedRegion();
     void SetUseImageSpacingOn();
     void SetUseImageSpacingOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool GetUseImageSpacing() const;
   private:
     itkLaplacianImageFilterID2ID2(itkLaplacianImageFilterID2ID2 const & arg0);
     void operator=(itkLaplacianImageFilterID2ID2 const & arg0);
   protected:
     itkLaplacianImageFilterID2ID2();
     ~itkLaplacianImageFilterID2ID2();
     virtual void GenerateData();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
 };


 class itkLaplacianImageFilterID2ID2_Pointer {
   public:
     itkLaplacianImageFilterID2ID2_Pointer();
     itkLaplacianImageFilterID2ID2_Pointer(itkLaplacianImageFilterID2ID2_Pointer const & p);
     itkLaplacianImageFilterID2ID2_Pointer(itkLaplacianImageFilterID2ID2 * p);
     ~itkLaplacianImageFilterID2ID2_Pointer();
     itkLaplacianImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkLaplacianImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkLaplacianImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkLaplacianImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkLaplacianImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkLaplacianImageFilterID2ID2_Pointer const & r) const;
     itkLaplacianImageFilterID2ID2_Pointer & operator=(itkLaplacianImageFilterID2ID2_Pointer const & r);
     itkLaplacianImageFilterID2ID2_Pointer & operator=(itkLaplacianImageFilterID2ID2 * r);
     itkLaplacianImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkLaplacianImageFilterID3ID3 : public itkImageToImageFilterID3ID3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  ImageDimension = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  InputPixelTypeIsFloatingPointCheck = 1 };
     enum  {  OutputPixelTypeIsFloatingPointCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkLaplacianImageFilterID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void GenerateInputRequestedRegion();
     void SetUseImageSpacingOn();
     void SetUseImageSpacingOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool GetUseImageSpacing() const;
   private:
     itkLaplacianImageFilterID3ID3(itkLaplacianImageFilterID3ID3 const & arg0);
     void operator=(itkLaplacianImageFilterID3ID3 const & arg0);
   protected:
     itkLaplacianImageFilterID3ID3();
     ~itkLaplacianImageFilterID3ID3();
     virtual void GenerateData();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
 };


 class itkLaplacianImageFilterID3ID3_Pointer {
   public:
     itkLaplacianImageFilterID3ID3_Pointer();
     itkLaplacianImageFilterID3ID3_Pointer(itkLaplacianImageFilterID3ID3_Pointer const & p);
     itkLaplacianImageFilterID3ID3_Pointer(itkLaplacianImageFilterID3ID3 * p);
     ~itkLaplacianImageFilterID3ID3_Pointer();
     itkLaplacianImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkLaplacianImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkLaplacianImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkLaplacianImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkLaplacianImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkLaplacianImageFilterID3ID3_Pointer const & r) const;
     itkLaplacianImageFilterID3ID3_Pointer & operator=(itkLaplacianImageFilterID3ID3_Pointer const & r);
     itkLaplacianImageFilterID3ID3_Pointer & operator=(itkLaplacianImageFilterID3ID3 * r);
     itkLaplacianImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkLaplacianImageFilterIF2IF2 : public itkImageToImageFilterIF2IF2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  ImageDimension = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  InputPixelTypeIsFloatingPointCheck = 1 };
     enum  {  OutputPixelTypeIsFloatingPointCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkLaplacianImageFilterIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void GenerateInputRequestedRegion();
     void SetUseImageSpacingOn();
     void SetUseImageSpacingOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool GetUseImageSpacing() const;
   private:
     itkLaplacianImageFilterIF2IF2(itkLaplacianImageFilterIF2IF2 const & arg0);
     void operator=(itkLaplacianImageFilterIF2IF2 const & arg0);
   protected:
     itkLaplacianImageFilterIF2IF2();
     ~itkLaplacianImageFilterIF2IF2();
     virtual void GenerateData();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
 };


 class itkLaplacianImageFilterIF2IF2_Pointer {
   public:
     itkLaplacianImageFilterIF2IF2_Pointer();
     itkLaplacianImageFilterIF2IF2_Pointer(itkLaplacianImageFilterIF2IF2_Pointer const & p);
     itkLaplacianImageFilterIF2IF2_Pointer(itkLaplacianImageFilterIF2IF2 * p);
     ~itkLaplacianImageFilterIF2IF2_Pointer();
     itkLaplacianImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkLaplacianImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkLaplacianImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkLaplacianImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkLaplacianImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkLaplacianImageFilterIF2IF2_Pointer const & r) const;
     itkLaplacianImageFilterIF2IF2_Pointer & operator=(itkLaplacianImageFilterIF2IF2_Pointer const & r);
     itkLaplacianImageFilterIF2IF2_Pointer & operator=(itkLaplacianImageFilterIF2IF2 * r);
     itkLaplacianImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkLaplacianImageFilterIF3IF3 : public itkImageToImageFilterIF3IF3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  ImageDimension = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  InputPixelTypeIsFloatingPointCheck = 1 };
     enum  {  OutputPixelTypeIsFloatingPointCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkLaplacianImageFilterIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void GenerateInputRequestedRegion();
     void SetUseImageSpacingOn();
     void SetUseImageSpacingOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool GetUseImageSpacing() const;
   private:
     itkLaplacianImageFilterIF3IF3(itkLaplacianImageFilterIF3IF3 const & arg0);
     void operator=(itkLaplacianImageFilterIF3IF3 const & arg0);
   protected:
     itkLaplacianImageFilterIF3IF3();
     ~itkLaplacianImageFilterIF3IF3();
     virtual void GenerateData();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
 };


 class itkLaplacianImageFilterIF3IF3_Pointer {
   public:
     itkLaplacianImageFilterIF3IF3_Pointer();
     itkLaplacianImageFilterIF3IF3_Pointer(itkLaplacianImageFilterIF3IF3_Pointer const & p);
     itkLaplacianImageFilterIF3IF3_Pointer(itkLaplacianImageFilterIF3IF3 * p);
     ~itkLaplacianImageFilterIF3IF3_Pointer();
     itkLaplacianImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkLaplacianImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkLaplacianImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkLaplacianImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkLaplacianImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkLaplacianImageFilterIF3IF3_Pointer const & r) const;
     itkLaplacianImageFilterIF3IF3_Pointer & operator=(itkLaplacianImageFilterIF3IF3_Pointer const & r);
     itkLaplacianImageFilterIF3IF3_Pointer & operator=(itkLaplacianImageFilterIF3IF3 * r);
     itkLaplacianImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


