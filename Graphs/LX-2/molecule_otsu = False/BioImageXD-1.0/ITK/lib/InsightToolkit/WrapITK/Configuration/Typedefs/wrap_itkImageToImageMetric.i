// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkImageToImageMetricChicken
#endif
#ifdef SWIGCSHARP
%module itkImageToImageMetricCsharp
#endif
#ifdef SWIGGUILE
%module itkImageToImageMetricGuile
#endif
#ifdef SWIGJAVA
%module itkImageToImageMetricJava
#endif
#ifdef SWIGLUA
%module itkImageToImageMetricLua
#endif
#ifdef SWIGMODULA3
%module itkImageToImageMetricModula3
#endif
#ifdef SWIGMZSCHEME
%module itkImageToImageMetricMzscheme
#endif
#ifdef SWIGOCAML
%module itkImageToImageMetricOcaml
#endif
#ifdef SWIGPERL
%module itkImageToImageMetricPerl
#endif
#ifdef SWIGPERL5
%module itkImageToImageMetricPerl5
#endif
#ifdef SWIGPHP
%module itkImageToImageMetricPhp
#endif
#ifdef SWIGPHP4
%module itkImageToImageMetricPhp4
#endif
#ifdef SWIGPHP5
%module itkImageToImageMetricPhp5
#endif
#ifdef SWIGPIKE
%module itkImageToImageMetricPike
#endif
#ifdef SWIGPYTHON
%module itkImageToImageMetricPython
#endif
#ifdef SWIGR
%module itkImageToImageMetricR
#endif
#ifdef SWIGRUBY
%module itkImageToImageMetricRuby
#endif
#ifdef SWIGSEXP
%module itkImageToImageMetricSexp
#endif
#ifdef SWIGTCL
%module itkImageToImageMetricTcl
#endif
#ifdef SWIGXML
%module itkImageToImageMetricXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Numerics.includes"
#include "Transforms.includes"
#include "SpatialObject.includes"
#include "Resize.includes"
#include "Calculators.includes"
#include "Registration.includes"
%}


%{
%}




%import wrap_itkCovariantVector.i
%import wrap_itkPoint.i
%import wrap_ITKRegions.i
%import wrap_itkTransform.i
%import wrap_itkIndex.i
%import wrap_itkImage.i
%import wrap_itkSpatialObjectBase.i
%import wrap_itkArray.i
%import wrap_ITKCommonBase.i
%import wrap_ITKCostFunctions.i
%import wrap_itkInterpolateImageFunction.i


%include itk.i
%include wrap_itkImageToImageMetric_ext.i


 class itkImageToImageMetricID2ID2 : public itkSingleValuedCostFunction {
   public:
     enum  {  MovingImageDimension = 2 };
     enum  {  FixedImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetFixedImage(itkImageD2 const * _arg);
     virtual itkImageD2 const * GetFixedImage() const;
     virtual void SetMovingImage(itkImageD2 const * _arg);
     virtual itkImageD2 const * GetMovingImage() const;
     virtual void SetTransform(itkTransformD22 * _arg);
     virtual itkTransformD22 const * GetTransform() const;
     virtual void SetInterpolator(itkInterpolateImageFunctionID2D * _arg);
     virtual itkInterpolateImageFunctionID2D const * GetInterpolator() const;
     unsigned long GetNumberOfMovingImageSamples();
     virtual unsigned long const & GetNumberOfPixelsCounted() const;
     void SetFixedImageRegion(itkImageRegion2 const reg);
     virtual itkImageRegion2 const & GetFixedImageRegion() const;
     virtual void SetMovingImageMask(itkSpatialObject2 * _arg);
     virtual void SetMovingImageMask(itkSpatialObject2 const * _arg);
     virtual itkSpatialObject2 const * GetMovingImageMask() const;
     virtual void SetFixedImageMask(itkSpatialObject2 * _arg);
     virtual void SetFixedImageMask(itkSpatialObject2 const * _arg);
     virtual itkSpatialObject2 const * GetFixedImageMask() const;
     void SetFixedImageIndexes(std::vector< itkIndex2 > const & indexes);
     void SetUseFixedImageIndexes(bool useIndex);
     virtual bool const & GetUseFixedImageIndexes() const;
     void SetNumberOfThreads(unsigned int numberOfThreads);
     virtual unsigned int const & GetNumberOfThreads() const;
     virtual void SetComputeGradient(bool const _arg);
     virtual bool const & GetComputeGradient() const;
     virtual void ComputeGradientOn();
     virtual void ComputeGradientOff();
     virtual void ComputeGradient();
     virtual itk::Image< itk::CovariantVector< double, 2u >, 2u > const * GetGradientImage() const;
     void SetTransformParameters(itkArrayD const & parameters) const;
     virtual unsigned int GetNumberOfParameters() const;
     virtual void Initialize();
     virtual void MultiThreadingInitialize();
     virtual void SetNumberOfFixedImageSamples(unsigned long numSamples);
     virtual unsigned long const & GetNumberOfFixedImageSamples() const;
     void SetNumberOfSpatialSamples(unsigned long num);
     unsigned long GetNumberOfSpatialSamples();
     void SetFixedImageSamplesIntensityThreshold(double const & thresh);
     virtual double const & GetFixedImageSamplesIntensityThreshold() const;
     void SetUseFixedImageSamplesIntensityThreshold(bool useThresh);
     virtual bool const & GetUseFixedImageSamplesIntensityThreshold() const;
     void SetUseAllPixels(bool useAllPixels);
     void UseAllPixelsOn();
     void UseAllPixelsOff();
     virtual bool const & GetUseAllPixels() const;
     void SetUseSequentialSampling(bool sequentialSampling);
     virtual bool const & GetUseSequentialSampling() const;
     void ReinitializeSeed();
     void ReinitializeSeed(int seed);
     virtual void SetUseCachingOfBSplineWeights(bool const _arg);
     virtual bool const & GetUseCachingOfBSplineWeights() const;
     virtual void UseCachingOfBSplineWeightsOn();
     virtual void UseCachingOfBSplineWeightsOff();
     virtual itkMultiThreader const * GetThreader() const;
     itkTransformD22_Pointer const * GetThreaderTransform();
   private:
     itkImageToImageMetricID2ID2(itkImageToImageMetricID2ID2 const & arg0);
     void operator=(itkImageToImageMetricID2ID2 const & arg0);
   protected:
     enum  {  DeformationSplineOrder = 3 };
     itkImageToImageMetricID2ID2();
     ~itkImageToImageMetricID2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void SampleFixedImageRegion(std::vector< itkImageToImageMetricID2ID2::FixedImageSamplePoint > & samples) const;
     virtual void SampleFixedImageIndexes(std::vector< itkImageToImageMetricID2ID2::FixedImageSamplePoint > & samples) const;
     virtual void SampleFullFixedImageRegion(std::vector< itkImageToImageMetricID2ID2::FixedImageSamplePoint > & samples) const;
     virtual void PreComputeTransformValues();
     virtual void TransformPoint(unsigned int sampleNumber, itkPointD2 & mappedPoint, bool & sampleWithinSupportRegion, double & movingImageValue, unsigned int threadID) const;
     virtual void TransformPointWithDerivatives(unsigned int sampleNumber, itkPointD2 & mappedPoint, bool & sampleWithinSupportRegion, double & movingImageValue, itkCovariantVectorD2 & gradient, unsigned int threadID) const;
     virtual void ComputeImageDerivatives(itkPointD2 const & mappedPoint, itkCovariantVectorD2 & gradient, unsigned int threadID) const;
     void GetValueMultiThreadedPreProcessInitiate() const;
     void GetValueMultiThreadedInitiate() const;
     void GetValueMultiThreadedPostProcessInitiate() const;
     static void * GetValueMultiThreadedPreProcess(void * arg);
     static void * GetValueMultiThreaded(void * arg);
     static void * GetValueMultiThreadedPostProcess(void * arg);
     virtual void GetValueThread(unsigned int threadID) const;
     virtual void GetValueThreadPreProcess(unsigned int arg0, bool arg1) const;
     virtual bool GetValueThreadProcessSample(unsigned int arg0, unsigned long arg1, itkPointD2 const & arg2, double arg3) const;
     virtual void GetValueThreadPostProcess(unsigned int arg0, bool arg1) const;
     void GetValueAndDerivativeMultiThreadedPreProcessInitiate() const;
     void GetValueAndDerivativeMultiThreadedInitiate() const;
     void GetValueAndDerivativeMultiThreadedPostProcessInitiate() const;
     static void * GetValueAndDerivativeMultiThreadedPreProcess(void * arg);
     static void * GetValueAndDerivativeMultiThreaded(void * arg);
     static void * GetValueAndDerivativeMultiThreadedPostProcess(void * arg);
     virtual void GetValueAndDerivativeThread(unsigned int threadID) const;
     virtual void GetValueAndDerivativeThreadPreProcess(unsigned int arg0, bool arg1) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int arg0, unsigned long arg1, itkPointD2 const & arg2, double arg3, itkCovariantVectorD2 const & arg4) const;
     virtual void GetValueAndDerivativeThreadPostProcess(unsigned int arg0, bool arg1) const;
     virtual void SynchronizeTransforms() const;
 };


 class itkImageToImageMetricID2ID2_Pointer {
   public:
     itkImageToImageMetricID2ID2_Pointer();
     itkImageToImageMetricID2ID2_Pointer(itkImageToImageMetricID2ID2_Pointer const & p);
     itkImageToImageMetricID2ID2_Pointer(itkImageToImageMetricID2ID2 * p);
     ~itkImageToImageMetricID2ID2_Pointer();
     itkImageToImageMetricID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageMetricID2ID2 * GetPointer() const;
     bool operator<(itkImageToImageMetricID2ID2_Pointer const & r) const;
     bool operator>(itkImageToImageMetricID2ID2_Pointer const & r) const;
     bool operator<=(itkImageToImageMetricID2ID2_Pointer const & r) const;
     bool operator>=(itkImageToImageMetricID2ID2_Pointer const & r) const;
     itkImageToImageMetricID2ID2_Pointer & operator=(itkImageToImageMetricID2ID2_Pointer const & r);
     itkImageToImageMetricID2ID2_Pointer & operator=(itkImageToImageMetricID2ID2 * r);
     itkImageToImageMetricID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageMetricID3ID3 : public itkSingleValuedCostFunction {
   public:
     enum  {  MovingImageDimension = 3 };
     enum  {  FixedImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetFixedImage(itkImageD3 const * _arg);
     virtual itkImageD3 const * GetFixedImage() const;
     virtual void SetMovingImage(itkImageD3 const * _arg);
     virtual itkImageD3 const * GetMovingImage() const;
     virtual void SetTransform(itkTransformD33 * _arg);
     virtual itkTransformD33 const * GetTransform() const;
     virtual void SetInterpolator(itkInterpolateImageFunctionID3D * _arg);
     virtual itkInterpolateImageFunctionID3D const * GetInterpolator() const;
     unsigned long GetNumberOfMovingImageSamples();
     virtual unsigned long const & GetNumberOfPixelsCounted() const;
     void SetFixedImageRegion(itkImageRegion3 const reg);
     virtual itkImageRegion3 const & GetFixedImageRegion() const;
     virtual void SetMovingImageMask(itkSpatialObject3 * _arg);
     virtual void SetMovingImageMask(itkSpatialObject3 const * _arg);
     virtual itkSpatialObject3 const * GetMovingImageMask() const;
     virtual void SetFixedImageMask(itkSpatialObject3 * _arg);
     virtual void SetFixedImageMask(itkSpatialObject3 const * _arg);
     virtual itkSpatialObject3 const * GetFixedImageMask() const;
     void SetFixedImageIndexes(std::vector< itkIndex3 > const & indexes);
     void SetUseFixedImageIndexes(bool useIndex);
     virtual bool const & GetUseFixedImageIndexes() const;
     void SetNumberOfThreads(unsigned int numberOfThreads);
     virtual unsigned int const & GetNumberOfThreads() const;
     virtual void SetComputeGradient(bool const _arg);
     virtual bool const & GetComputeGradient() const;
     virtual void ComputeGradientOn();
     virtual void ComputeGradientOff();
     virtual void ComputeGradient();
     virtual itk::Image< itk::CovariantVector< double, 3u >, 3u > const * GetGradientImage() const;
     void SetTransformParameters(itkArrayD const & parameters) const;
     virtual unsigned int GetNumberOfParameters() const;
     virtual void Initialize();
     virtual void MultiThreadingInitialize();
     virtual void SetNumberOfFixedImageSamples(unsigned long numSamples);
     virtual unsigned long const & GetNumberOfFixedImageSamples() const;
     void SetNumberOfSpatialSamples(unsigned long num);
     unsigned long GetNumberOfSpatialSamples();
     void SetFixedImageSamplesIntensityThreshold(double const & thresh);
     virtual double const & GetFixedImageSamplesIntensityThreshold() const;
     void SetUseFixedImageSamplesIntensityThreshold(bool useThresh);
     virtual bool const & GetUseFixedImageSamplesIntensityThreshold() const;
     void SetUseAllPixels(bool useAllPixels);
     void UseAllPixelsOn();
     void UseAllPixelsOff();
     virtual bool const & GetUseAllPixels() const;
     void SetUseSequentialSampling(bool sequentialSampling);
     virtual bool const & GetUseSequentialSampling() const;
     void ReinitializeSeed();
     void ReinitializeSeed(int seed);
     virtual void SetUseCachingOfBSplineWeights(bool const _arg);
     virtual bool const & GetUseCachingOfBSplineWeights() const;
     virtual void UseCachingOfBSplineWeightsOn();
     virtual void UseCachingOfBSplineWeightsOff();
     virtual itkMultiThreader const * GetThreader() const;
     itkTransformD33_Pointer const * GetThreaderTransform();
   private:
     itkImageToImageMetricID3ID3(itkImageToImageMetricID3ID3 const & arg0);
     void operator=(itkImageToImageMetricID3ID3 const & arg0);
   protected:
     enum  {  DeformationSplineOrder = 3 };
     itkImageToImageMetricID3ID3();
     ~itkImageToImageMetricID3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void SampleFixedImageRegion(std::vector< itkImageToImageMetricID3ID3::FixedImageSamplePoint > & samples) const;
     virtual void SampleFixedImageIndexes(std::vector< itkImageToImageMetricID3ID3::FixedImageSamplePoint > & samples) const;
     virtual void SampleFullFixedImageRegion(std::vector< itkImageToImageMetricID3ID3::FixedImageSamplePoint > & samples) const;
     virtual void PreComputeTransformValues();
     virtual void TransformPoint(unsigned int sampleNumber, itkPointD3 & mappedPoint, bool & sampleWithinSupportRegion, double & movingImageValue, unsigned int threadID) const;
     virtual void TransformPointWithDerivatives(unsigned int sampleNumber, itkPointD3 & mappedPoint, bool & sampleWithinSupportRegion, double & movingImageValue, itkCovariantVectorD3 & gradient, unsigned int threadID) const;
     virtual void ComputeImageDerivatives(itkPointD3 const & mappedPoint, itkCovariantVectorD3 & gradient, unsigned int threadID) const;
     void GetValueMultiThreadedPreProcessInitiate() const;
     void GetValueMultiThreadedInitiate() const;
     void GetValueMultiThreadedPostProcessInitiate() const;
     static void * GetValueMultiThreadedPreProcess(void * arg);
     static void * GetValueMultiThreaded(void * arg);
     static void * GetValueMultiThreadedPostProcess(void * arg);
     virtual void GetValueThread(unsigned int threadID) const;
     virtual void GetValueThreadPreProcess(unsigned int arg0, bool arg1) const;
     virtual bool GetValueThreadProcessSample(unsigned int arg0, unsigned long arg1, itkPointD3 const & arg2, double arg3) const;
     virtual void GetValueThreadPostProcess(unsigned int arg0, bool arg1) const;
     void GetValueAndDerivativeMultiThreadedPreProcessInitiate() const;
     void GetValueAndDerivativeMultiThreadedInitiate() const;
     void GetValueAndDerivativeMultiThreadedPostProcessInitiate() const;
     static void * GetValueAndDerivativeMultiThreadedPreProcess(void * arg);
     static void * GetValueAndDerivativeMultiThreaded(void * arg);
     static void * GetValueAndDerivativeMultiThreadedPostProcess(void * arg);
     virtual void GetValueAndDerivativeThread(unsigned int threadID) const;
     virtual void GetValueAndDerivativeThreadPreProcess(unsigned int arg0, bool arg1) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int arg0, unsigned long arg1, itkPointD3 const & arg2, double arg3, itkCovariantVectorD3 const & arg4) const;
     virtual void GetValueAndDerivativeThreadPostProcess(unsigned int arg0, bool arg1) const;
     virtual void SynchronizeTransforms() const;
 };


 class itkImageToImageMetricID3ID3_Pointer {
   public:
     itkImageToImageMetricID3ID3_Pointer();
     itkImageToImageMetricID3ID3_Pointer(itkImageToImageMetricID3ID3_Pointer const & p);
     itkImageToImageMetricID3ID3_Pointer(itkImageToImageMetricID3ID3 * p);
     ~itkImageToImageMetricID3ID3_Pointer();
     itkImageToImageMetricID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageMetricID3ID3 * GetPointer() const;
     bool operator<(itkImageToImageMetricID3ID3_Pointer const & r) const;
     bool operator>(itkImageToImageMetricID3ID3_Pointer const & r) const;
     bool operator<=(itkImageToImageMetricID3ID3_Pointer const & r) const;
     bool operator>=(itkImageToImageMetricID3ID3_Pointer const & r) const;
     itkImageToImageMetricID3ID3_Pointer & operator=(itkImageToImageMetricID3ID3_Pointer const & r);
     itkImageToImageMetricID3ID3_Pointer & operator=(itkImageToImageMetricID3ID3 * r);
     itkImageToImageMetricID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageMetricIF2IF2 : public itkSingleValuedCostFunction {
   public:
     enum  {  MovingImageDimension = 2 };
     enum  {  FixedImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetFixedImage(itkImageF2 const * _arg);
     virtual itkImageF2 const * GetFixedImage() const;
     virtual void SetMovingImage(itkImageF2 const * _arg);
     virtual itkImageF2 const * GetMovingImage() const;
     virtual void SetTransform(itkTransformD22 * _arg);
     virtual itkTransformD22 const * GetTransform() const;
     virtual void SetInterpolator(itkInterpolateImageFunctionIF2D * _arg);
     virtual itkInterpolateImageFunctionIF2D const * GetInterpolator() const;
     unsigned long GetNumberOfMovingImageSamples();
     virtual unsigned long const & GetNumberOfPixelsCounted() const;
     void SetFixedImageRegion(itkImageRegion2 const reg);
     virtual itkImageRegion2 const & GetFixedImageRegion() const;
     virtual void SetMovingImageMask(itkSpatialObject2 * _arg);
     virtual void SetMovingImageMask(itkSpatialObject2 const * _arg);
     virtual itkSpatialObject2 const * GetMovingImageMask() const;
     virtual void SetFixedImageMask(itkSpatialObject2 * _arg);
     virtual void SetFixedImageMask(itkSpatialObject2 const * _arg);
     virtual itkSpatialObject2 const * GetFixedImageMask() const;
     void SetFixedImageIndexes(std::vector< itkIndex2 > const & indexes);
     void SetUseFixedImageIndexes(bool useIndex);
     virtual bool const & GetUseFixedImageIndexes() const;
     void SetNumberOfThreads(unsigned int numberOfThreads);
     virtual unsigned int const & GetNumberOfThreads() const;
     virtual void SetComputeGradient(bool const _arg);
     virtual bool const & GetComputeGradient() const;
     virtual void ComputeGradientOn();
     virtual void ComputeGradientOff();
     virtual void ComputeGradient();
     virtual itk::Image< itk::CovariantVector< double, 2u >, 2u > const * GetGradientImage() const;
     void SetTransformParameters(itkArrayD const & parameters) const;
     virtual unsigned int GetNumberOfParameters() const;
     virtual void Initialize();
     virtual void MultiThreadingInitialize();
     virtual void SetNumberOfFixedImageSamples(unsigned long numSamples);
     virtual unsigned long const & GetNumberOfFixedImageSamples() const;
     void SetNumberOfSpatialSamples(unsigned long num);
     unsigned long GetNumberOfSpatialSamples();
     void SetFixedImageSamplesIntensityThreshold(float const & thresh);
     virtual float const & GetFixedImageSamplesIntensityThreshold() const;
     void SetUseFixedImageSamplesIntensityThreshold(bool useThresh);
     virtual bool const & GetUseFixedImageSamplesIntensityThreshold() const;
     void SetUseAllPixels(bool useAllPixels);
     void UseAllPixelsOn();
     void UseAllPixelsOff();
     virtual bool const & GetUseAllPixels() const;
     void SetUseSequentialSampling(bool sequentialSampling);
     virtual bool const & GetUseSequentialSampling() const;
     void ReinitializeSeed();
     void ReinitializeSeed(int seed);
     virtual void SetUseCachingOfBSplineWeights(bool const _arg);
     virtual bool const & GetUseCachingOfBSplineWeights() const;
     virtual void UseCachingOfBSplineWeightsOn();
     virtual void UseCachingOfBSplineWeightsOff();
     virtual itkMultiThreader const * GetThreader() const;
     itkTransformD22_Pointer const * GetThreaderTransform();
   private:
     itkImageToImageMetricIF2IF2(itkImageToImageMetricIF2IF2 const & arg0);
     void operator=(itkImageToImageMetricIF2IF2 const & arg0);
   protected:
     enum  {  DeformationSplineOrder = 3 };
     itkImageToImageMetricIF2IF2();
     ~itkImageToImageMetricIF2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void SampleFixedImageRegion(std::vector< itkImageToImageMetricIF2IF2::FixedImageSamplePoint > & samples) const;
     virtual void SampleFixedImageIndexes(std::vector< itkImageToImageMetricIF2IF2::FixedImageSamplePoint > & samples) const;
     virtual void SampleFullFixedImageRegion(std::vector< itkImageToImageMetricIF2IF2::FixedImageSamplePoint > & samples) const;
     virtual void PreComputeTransformValues();
     virtual void TransformPoint(unsigned int sampleNumber, itkPointD2 & mappedPoint, bool & sampleWithinSupportRegion, double & movingImageValue, unsigned int threadID) const;
     virtual void TransformPointWithDerivatives(unsigned int sampleNumber, itkPointD2 & mappedPoint, bool & sampleWithinSupportRegion, double & movingImageValue, itkCovariantVectorD2 & gradient, unsigned int threadID) const;
     virtual void ComputeImageDerivatives(itkPointD2 const & mappedPoint, itkCovariantVectorD2 & gradient, unsigned int threadID) const;
     void GetValueMultiThreadedPreProcessInitiate() const;
     void GetValueMultiThreadedInitiate() const;
     void GetValueMultiThreadedPostProcessInitiate() const;
     static void * GetValueMultiThreadedPreProcess(void * arg);
     static void * GetValueMultiThreaded(void * arg);
     static void * GetValueMultiThreadedPostProcess(void * arg);
     virtual void GetValueThread(unsigned int threadID) const;
     virtual void GetValueThreadPreProcess(unsigned int arg0, bool arg1) const;
     virtual bool GetValueThreadProcessSample(unsigned int arg0, unsigned long arg1, itkPointD2 const & arg2, double arg3) const;
     virtual void GetValueThreadPostProcess(unsigned int arg0, bool arg1) const;
     void GetValueAndDerivativeMultiThreadedPreProcessInitiate() const;
     void GetValueAndDerivativeMultiThreadedInitiate() const;
     void GetValueAndDerivativeMultiThreadedPostProcessInitiate() const;
     static void * GetValueAndDerivativeMultiThreadedPreProcess(void * arg);
     static void * GetValueAndDerivativeMultiThreaded(void * arg);
     static void * GetValueAndDerivativeMultiThreadedPostProcess(void * arg);
     virtual void GetValueAndDerivativeThread(unsigned int threadID) const;
     virtual void GetValueAndDerivativeThreadPreProcess(unsigned int arg0, bool arg1) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int arg0, unsigned long arg1, itkPointD2 const & arg2, double arg3, itkCovariantVectorD2 const & arg4) const;
     virtual void GetValueAndDerivativeThreadPostProcess(unsigned int arg0, bool arg1) const;
     virtual void SynchronizeTransforms() const;
 };


 class itkImageToImageMetricIF2IF2_Pointer {
   public:
     itkImageToImageMetricIF2IF2_Pointer();
     itkImageToImageMetricIF2IF2_Pointer(itkImageToImageMetricIF2IF2_Pointer const & p);
     itkImageToImageMetricIF2IF2_Pointer(itkImageToImageMetricIF2IF2 * p);
     ~itkImageToImageMetricIF2IF2_Pointer();
     itkImageToImageMetricIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageMetricIF2IF2 * GetPointer() const;
     bool operator<(itkImageToImageMetricIF2IF2_Pointer const & r) const;
     bool operator>(itkImageToImageMetricIF2IF2_Pointer const & r) const;
     bool operator<=(itkImageToImageMetricIF2IF2_Pointer const & r) const;
     bool operator>=(itkImageToImageMetricIF2IF2_Pointer const & r) const;
     itkImageToImageMetricIF2IF2_Pointer & operator=(itkImageToImageMetricIF2IF2_Pointer const & r);
     itkImageToImageMetricIF2IF2_Pointer & operator=(itkImageToImageMetricIF2IF2 * r);
     itkImageToImageMetricIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageMetricIF3IF3 : public itkSingleValuedCostFunction {
   public:
     enum  {  MovingImageDimension = 3 };
     enum  {  FixedImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetFixedImage(itkImageF3 const * _arg);
     virtual itkImageF3 const * GetFixedImage() const;
     virtual void SetMovingImage(itkImageF3 const * _arg);
     virtual itkImageF3 const * GetMovingImage() const;
     virtual void SetTransform(itkTransformD33 * _arg);
     virtual itkTransformD33 const * GetTransform() const;
     virtual void SetInterpolator(itkInterpolateImageFunctionIF3D * _arg);
     virtual itkInterpolateImageFunctionIF3D const * GetInterpolator() const;
     unsigned long GetNumberOfMovingImageSamples();
     virtual unsigned long const & GetNumberOfPixelsCounted() const;
     void SetFixedImageRegion(itkImageRegion3 const reg);
     virtual itkImageRegion3 const & GetFixedImageRegion() const;
     virtual void SetMovingImageMask(itkSpatialObject3 * _arg);
     virtual void SetMovingImageMask(itkSpatialObject3 const * _arg);
     virtual itkSpatialObject3 const * GetMovingImageMask() const;
     virtual void SetFixedImageMask(itkSpatialObject3 * _arg);
     virtual void SetFixedImageMask(itkSpatialObject3 const * _arg);
     virtual itkSpatialObject3 const * GetFixedImageMask() const;
     void SetFixedImageIndexes(std::vector< itkIndex3 > const & indexes);
     void SetUseFixedImageIndexes(bool useIndex);
     virtual bool const & GetUseFixedImageIndexes() const;
     void SetNumberOfThreads(unsigned int numberOfThreads);
     virtual unsigned int const & GetNumberOfThreads() const;
     virtual void SetComputeGradient(bool const _arg);
     virtual bool const & GetComputeGradient() const;
     virtual void ComputeGradientOn();
     virtual void ComputeGradientOff();
     virtual void ComputeGradient();
     virtual itk::Image< itk::CovariantVector< double, 3u >, 3u > const * GetGradientImage() const;
     void SetTransformParameters(itkArrayD const & parameters) const;
     virtual unsigned int GetNumberOfParameters() const;
     virtual void Initialize();
     virtual void MultiThreadingInitialize();
     virtual void SetNumberOfFixedImageSamples(unsigned long numSamples);
     virtual unsigned long const & GetNumberOfFixedImageSamples() const;
     void SetNumberOfSpatialSamples(unsigned long num);
     unsigned long GetNumberOfSpatialSamples();
     void SetFixedImageSamplesIntensityThreshold(float const & thresh);
     virtual float const & GetFixedImageSamplesIntensityThreshold() const;
     void SetUseFixedImageSamplesIntensityThreshold(bool useThresh);
     virtual bool const & GetUseFixedImageSamplesIntensityThreshold() const;
     void SetUseAllPixels(bool useAllPixels);
     void UseAllPixelsOn();
     void UseAllPixelsOff();
     virtual bool const & GetUseAllPixels() const;
     void SetUseSequentialSampling(bool sequentialSampling);
     virtual bool const & GetUseSequentialSampling() const;
     void ReinitializeSeed();
     void ReinitializeSeed(int seed);
     virtual void SetUseCachingOfBSplineWeights(bool const _arg);
     virtual bool const & GetUseCachingOfBSplineWeights() const;
     virtual void UseCachingOfBSplineWeightsOn();
     virtual void UseCachingOfBSplineWeightsOff();
     virtual itkMultiThreader const * GetThreader() const;
     itkTransformD33_Pointer const * GetThreaderTransform();
   private:
     itkImageToImageMetricIF3IF3(itkImageToImageMetricIF3IF3 const & arg0);
     void operator=(itkImageToImageMetricIF3IF3 const & arg0);
   protected:
     enum  {  DeformationSplineOrder = 3 };
     itkImageToImageMetricIF3IF3();
     ~itkImageToImageMetricIF3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void SampleFixedImageRegion(std::vector< itkImageToImageMetricIF3IF3::FixedImageSamplePoint > & samples) const;
     virtual void SampleFixedImageIndexes(std::vector< itkImageToImageMetricIF3IF3::FixedImageSamplePoint > & samples) const;
     virtual void SampleFullFixedImageRegion(std::vector< itkImageToImageMetricIF3IF3::FixedImageSamplePoint > & samples) const;
     virtual void PreComputeTransformValues();
     virtual void TransformPoint(unsigned int sampleNumber, itkPointD3 & mappedPoint, bool & sampleWithinSupportRegion, double & movingImageValue, unsigned int threadID) const;
     virtual void TransformPointWithDerivatives(unsigned int sampleNumber, itkPointD3 & mappedPoint, bool & sampleWithinSupportRegion, double & movingImageValue, itkCovariantVectorD3 & gradient, unsigned int threadID) const;
     virtual void ComputeImageDerivatives(itkPointD3 const & mappedPoint, itkCovariantVectorD3 & gradient, unsigned int threadID) const;
     void GetValueMultiThreadedPreProcessInitiate() const;
     void GetValueMultiThreadedInitiate() const;
     void GetValueMultiThreadedPostProcessInitiate() const;
     static void * GetValueMultiThreadedPreProcess(void * arg);
     static void * GetValueMultiThreaded(void * arg);
     static void * GetValueMultiThreadedPostProcess(void * arg);
     virtual void GetValueThread(unsigned int threadID) const;
     virtual void GetValueThreadPreProcess(unsigned int arg0, bool arg1) const;
     virtual bool GetValueThreadProcessSample(unsigned int arg0, unsigned long arg1, itkPointD3 const & arg2, double arg3) const;
     virtual void GetValueThreadPostProcess(unsigned int arg0, bool arg1) const;
     void GetValueAndDerivativeMultiThreadedPreProcessInitiate() const;
     void GetValueAndDerivativeMultiThreadedInitiate() const;
     void GetValueAndDerivativeMultiThreadedPostProcessInitiate() const;
     static void * GetValueAndDerivativeMultiThreadedPreProcess(void * arg);
     static void * GetValueAndDerivativeMultiThreaded(void * arg);
     static void * GetValueAndDerivativeMultiThreadedPostProcess(void * arg);
     virtual void GetValueAndDerivativeThread(unsigned int threadID) const;
     virtual void GetValueAndDerivativeThreadPreProcess(unsigned int arg0, bool arg1) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int arg0, unsigned long arg1, itkPointD3 const & arg2, double arg3, itkCovariantVectorD3 const & arg4) const;
     virtual void GetValueAndDerivativeThreadPostProcess(unsigned int arg0, bool arg1) const;
     virtual void SynchronizeTransforms() const;
 };


 class itkImageToImageMetricIF3IF3_Pointer {
   public:
     itkImageToImageMetricIF3IF3_Pointer();
     itkImageToImageMetricIF3IF3_Pointer(itkImageToImageMetricIF3IF3_Pointer const & p);
     itkImageToImageMetricIF3IF3_Pointer(itkImageToImageMetricIF3IF3 * p);
     ~itkImageToImageMetricIF3IF3_Pointer();
     itkImageToImageMetricIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageMetricIF3IF3 * GetPointer() const;
     bool operator<(itkImageToImageMetricIF3IF3_Pointer const & r) const;
     bool operator>(itkImageToImageMetricIF3IF3_Pointer const & r) const;
     bool operator<=(itkImageToImageMetricIF3IF3_Pointer const & r) const;
     bool operator>=(itkImageToImageMetricIF3IF3_Pointer const & r) const;
     itkImageToImageMetricIF3IF3_Pointer & operator=(itkImageToImageMetricIF3IF3_Pointer const & r);
     itkImageToImageMetricIF3IF3_Pointer & operator=(itkImageToImageMetricIF3IF3 * r);
     itkImageToImageMetricIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageMetricIUC2IUC2 : public itkSingleValuedCostFunction {
   public:
     enum  {  MovingImageDimension = 2 };
     enum  {  FixedImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetFixedImage(itkImageUC2 const * _arg);
     virtual itkImageUC2 const * GetFixedImage() const;
     virtual void SetMovingImage(itkImageUC2 const * _arg);
     virtual itkImageUC2 const * GetMovingImage() const;
     virtual void SetTransform(itkTransformD22 * _arg);
     virtual itkTransformD22 const * GetTransform() const;
     virtual void SetInterpolator(itkInterpolateImageFunctionIUC2D * _arg);
     virtual itkInterpolateImageFunctionIUC2D const * GetInterpolator() const;
     unsigned long GetNumberOfMovingImageSamples();
     virtual unsigned long const & GetNumberOfPixelsCounted() const;
     void SetFixedImageRegion(itkImageRegion2 const reg);
     virtual itkImageRegion2 const & GetFixedImageRegion() const;
     virtual void SetMovingImageMask(itkSpatialObject2 * _arg);
     virtual void SetMovingImageMask(itkSpatialObject2 const * _arg);
     virtual itkSpatialObject2 const * GetMovingImageMask() const;
     virtual void SetFixedImageMask(itkSpatialObject2 * _arg);
     virtual void SetFixedImageMask(itkSpatialObject2 const * _arg);
     virtual itkSpatialObject2 const * GetFixedImageMask() const;
     void SetFixedImageIndexes(std::vector< itkIndex2 > const & indexes);
     void SetUseFixedImageIndexes(bool useIndex);
     virtual bool const & GetUseFixedImageIndexes() const;
     void SetNumberOfThreads(unsigned int numberOfThreads);
     virtual unsigned int const & GetNumberOfThreads() const;
     virtual void SetComputeGradient(bool const _arg);
     virtual bool const & GetComputeGradient() const;
     virtual void ComputeGradientOn();
     virtual void ComputeGradientOff();
     virtual void ComputeGradient();
     virtual itk::Image< itk::CovariantVector< double, 2u >, 2u > const * GetGradientImage() const;
     void SetTransformParameters(itkArrayD const & parameters) const;
     virtual unsigned int GetNumberOfParameters() const;
     virtual void Initialize();
     virtual void MultiThreadingInitialize();
     virtual void SetNumberOfFixedImageSamples(unsigned long numSamples);
     virtual unsigned long const & GetNumberOfFixedImageSamples() const;
     void SetNumberOfSpatialSamples(unsigned long num);
     unsigned long GetNumberOfSpatialSamples();
     void SetFixedImageSamplesIntensityThreshold(unsigned char const & thresh);
     virtual unsigned char const & GetFixedImageSamplesIntensityThreshold() const;
     void SetUseFixedImageSamplesIntensityThreshold(bool useThresh);
     virtual bool const & GetUseFixedImageSamplesIntensityThreshold() const;
     void SetUseAllPixels(bool useAllPixels);
     void UseAllPixelsOn();
     void UseAllPixelsOff();
     virtual bool const & GetUseAllPixels() const;
     void SetUseSequentialSampling(bool sequentialSampling);
     virtual bool const & GetUseSequentialSampling() const;
     void ReinitializeSeed();
     void ReinitializeSeed(int seed);
     virtual void SetUseCachingOfBSplineWeights(bool const _arg);
     virtual bool const & GetUseCachingOfBSplineWeights() const;
     virtual void UseCachingOfBSplineWeightsOn();
     virtual void UseCachingOfBSplineWeightsOff();
     virtual itkMultiThreader const * GetThreader() const;
     itkTransformD22_Pointer const * GetThreaderTransform();
   private:
     itkImageToImageMetricIUC2IUC2(itkImageToImageMetricIUC2IUC2 const & arg0);
     void operator=(itkImageToImageMetricIUC2IUC2 const & arg0);
   protected:
     enum  {  DeformationSplineOrder = 3 };
     itkImageToImageMetricIUC2IUC2();
     ~itkImageToImageMetricIUC2IUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void SampleFixedImageRegion(std::vector< itkImageToImageMetricIUC2IUC2::FixedImageSamplePoint > & samples) const;
     virtual void SampleFixedImageIndexes(std::vector< itkImageToImageMetricIUC2IUC2::FixedImageSamplePoint > & samples) const;
     virtual void SampleFullFixedImageRegion(std::vector< itkImageToImageMetricIUC2IUC2::FixedImageSamplePoint > & samples) const;
     virtual void PreComputeTransformValues();
     virtual void TransformPoint(unsigned int sampleNumber, itkPointD2 & mappedPoint, bool & sampleWithinSupportRegion, double & movingImageValue, unsigned int threadID) const;
     virtual void TransformPointWithDerivatives(unsigned int sampleNumber, itkPointD2 & mappedPoint, bool & sampleWithinSupportRegion, double & movingImageValue, itkCovariantVectorD2 & gradient, unsigned int threadID) const;
     virtual void ComputeImageDerivatives(itkPointD2 const & mappedPoint, itkCovariantVectorD2 & gradient, unsigned int threadID) const;
     void GetValueMultiThreadedPreProcessInitiate() const;
     void GetValueMultiThreadedInitiate() const;
     void GetValueMultiThreadedPostProcessInitiate() const;
     static void * GetValueMultiThreadedPreProcess(void * arg);
     static void * GetValueMultiThreaded(void * arg);
     static void * GetValueMultiThreadedPostProcess(void * arg);
     virtual void GetValueThread(unsigned int threadID) const;
     virtual void GetValueThreadPreProcess(unsigned int arg0, bool arg1) const;
     virtual bool GetValueThreadProcessSample(unsigned int arg0, unsigned long arg1, itkPointD2 const & arg2, double arg3) const;
     virtual void GetValueThreadPostProcess(unsigned int arg0, bool arg1) const;
     void GetValueAndDerivativeMultiThreadedPreProcessInitiate() const;
     void GetValueAndDerivativeMultiThreadedInitiate() const;
     void GetValueAndDerivativeMultiThreadedPostProcessInitiate() const;
     static void * GetValueAndDerivativeMultiThreadedPreProcess(void * arg);
     static void * GetValueAndDerivativeMultiThreaded(void * arg);
     static void * GetValueAndDerivativeMultiThreadedPostProcess(void * arg);
     virtual void GetValueAndDerivativeThread(unsigned int threadID) const;
     virtual void GetValueAndDerivativeThreadPreProcess(unsigned int arg0, bool arg1) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int arg0, unsigned long arg1, itkPointD2 const & arg2, double arg3, itkCovariantVectorD2 const & arg4) const;
     virtual void GetValueAndDerivativeThreadPostProcess(unsigned int arg0, bool arg1) const;
     virtual void SynchronizeTransforms() const;
 };


 class itkImageToImageMetricIUC2IUC2_Pointer {
   public:
     itkImageToImageMetricIUC2IUC2_Pointer();
     itkImageToImageMetricIUC2IUC2_Pointer(itkImageToImageMetricIUC2IUC2_Pointer const & p);
     itkImageToImageMetricIUC2IUC2_Pointer(itkImageToImageMetricIUC2IUC2 * p);
     ~itkImageToImageMetricIUC2IUC2_Pointer();
     itkImageToImageMetricIUC2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageMetricIUC2IUC2 * GetPointer() const;
     bool operator<(itkImageToImageMetricIUC2IUC2_Pointer const & r) const;
     bool operator>(itkImageToImageMetricIUC2IUC2_Pointer const & r) const;
     bool operator<=(itkImageToImageMetricIUC2IUC2_Pointer const & r) const;
     bool operator>=(itkImageToImageMetricIUC2IUC2_Pointer const & r) const;
     itkImageToImageMetricIUC2IUC2_Pointer & operator=(itkImageToImageMetricIUC2IUC2_Pointer const & r);
     itkImageToImageMetricIUC2IUC2_Pointer & operator=(itkImageToImageMetricIUC2IUC2 * r);
     itkImageToImageMetricIUC2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageMetricIUC3IUC3 : public itkSingleValuedCostFunction {
   public:
     enum  {  MovingImageDimension = 3 };
     enum  {  FixedImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetFixedImage(itkImageUC3 const * _arg);
     virtual itkImageUC3 const * GetFixedImage() const;
     virtual void SetMovingImage(itkImageUC3 const * _arg);
     virtual itkImageUC3 const * GetMovingImage() const;
     virtual void SetTransform(itkTransformD33 * _arg);
     virtual itkTransformD33 const * GetTransform() const;
     virtual void SetInterpolator(itkInterpolateImageFunctionIUC3D * _arg);
     virtual itkInterpolateImageFunctionIUC3D const * GetInterpolator() const;
     unsigned long GetNumberOfMovingImageSamples();
     virtual unsigned long const & GetNumberOfPixelsCounted() const;
     void SetFixedImageRegion(itkImageRegion3 const reg);
     virtual itkImageRegion3 const & GetFixedImageRegion() const;
     virtual void SetMovingImageMask(itkSpatialObject3 * _arg);
     virtual void SetMovingImageMask(itkSpatialObject3 const * _arg);
     virtual itkSpatialObject3 const * GetMovingImageMask() const;
     virtual void SetFixedImageMask(itkSpatialObject3 * _arg);
     virtual void SetFixedImageMask(itkSpatialObject3 const * _arg);
     virtual itkSpatialObject3 const * GetFixedImageMask() const;
     void SetFixedImageIndexes(std::vector< itkIndex3 > const & indexes);
     void SetUseFixedImageIndexes(bool useIndex);
     virtual bool const & GetUseFixedImageIndexes() const;
     void SetNumberOfThreads(unsigned int numberOfThreads);
     virtual unsigned int const & GetNumberOfThreads() const;
     virtual void SetComputeGradient(bool const _arg);
     virtual bool const & GetComputeGradient() const;
     virtual void ComputeGradientOn();
     virtual void ComputeGradientOff();
     virtual void ComputeGradient();
     virtual itk::Image< itk::CovariantVector< double, 3u >, 3u > const * GetGradientImage() const;
     void SetTransformParameters(itkArrayD const & parameters) const;
     virtual unsigned int GetNumberOfParameters() const;
     virtual void Initialize();
     virtual void MultiThreadingInitialize();
     virtual void SetNumberOfFixedImageSamples(unsigned long numSamples);
     virtual unsigned long const & GetNumberOfFixedImageSamples() const;
     void SetNumberOfSpatialSamples(unsigned long num);
     unsigned long GetNumberOfSpatialSamples();
     void SetFixedImageSamplesIntensityThreshold(unsigned char const & thresh);
     virtual unsigned char const & GetFixedImageSamplesIntensityThreshold() const;
     void SetUseFixedImageSamplesIntensityThreshold(bool useThresh);
     virtual bool const & GetUseFixedImageSamplesIntensityThreshold() const;
     void SetUseAllPixels(bool useAllPixels);
     void UseAllPixelsOn();
     void UseAllPixelsOff();
     virtual bool const & GetUseAllPixels() const;
     void SetUseSequentialSampling(bool sequentialSampling);
     virtual bool const & GetUseSequentialSampling() const;
     void ReinitializeSeed();
     void ReinitializeSeed(int seed);
     virtual void SetUseCachingOfBSplineWeights(bool const _arg);
     virtual bool const & GetUseCachingOfBSplineWeights() const;
     virtual void UseCachingOfBSplineWeightsOn();
     virtual void UseCachingOfBSplineWeightsOff();
     virtual itkMultiThreader const * GetThreader() const;
     itkTransformD33_Pointer const * GetThreaderTransform();
   private:
     itkImageToImageMetricIUC3IUC3(itkImageToImageMetricIUC3IUC3 const & arg0);
     void operator=(itkImageToImageMetricIUC3IUC3 const & arg0);
   protected:
     enum  {  DeformationSplineOrder = 3 };
     itkImageToImageMetricIUC3IUC3();
     ~itkImageToImageMetricIUC3IUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void SampleFixedImageRegion(std::vector< itkImageToImageMetricIUC3IUC3::FixedImageSamplePoint > & samples) const;
     virtual void SampleFixedImageIndexes(std::vector< itkImageToImageMetricIUC3IUC3::FixedImageSamplePoint > & samples) const;
     virtual void SampleFullFixedImageRegion(std::vector< itkImageToImageMetricIUC3IUC3::FixedImageSamplePoint > & samples) const;
     virtual void PreComputeTransformValues();
     virtual void TransformPoint(unsigned int sampleNumber, itkPointD3 & mappedPoint, bool & sampleWithinSupportRegion, double & movingImageValue, unsigned int threadID) const;
     virtual void TransformPointWithDerivatives(unsigned int sampleNumber, itkPointD3 & mappedPoint, bool & sampleWithinSupportRegion, double & movingImageValue, itkCovariantVectorD3 & gradient, unsigned int threadID) const;
     virtual void ComputeImageDerivatives(itkPointD3 const & mappedPoint, itkCovariantVectorD3 & gradient, unsigned int threadID) const;
     void GetValueMultiThreadedPreProcessInitiate() const;
     void GetValueMultiThreadedInitiate() const;
     void GetValueMultiThreadedPostProcessInitiate() const;
     static void * GetValueMultiThreadedPreProcess(void * arg);
     static void * GetValueMultiThreaded(void * arg);
     static void * GetValueMultiThreadedPostProcess(void * arg);
     virtual void GetValueThread(unsigned int threadID) const;
     virtual void GetValueThreadPreProcess(unsigned int arg0, bool arg1) const;
     virtual bool GetValueThreadProcessSample(unsigned int arg0, unsigned long arg1, itkPointD3 const & arg2, double arg3) const;
     virtual void GetValueThreadPostProcess(unsigned int arg0, bool arg1) const;
     void GetValueAndDerivativeMultiThreadedPreProcessInitiate() const;
     void GetValueAndDerivativeMultiThreadedInitiate() const;
     void GetValueAndDerivativeMultiThreadedPostProcessInitiate() const;
     static void * GetValueAndDerivativeMultiThreadedPreProcess(void * arg);
     static void * GetValueAndDerivativeMultiThreaded(void * arg);
     static void * GetValueAndDerivativeMultiThreadedPostProcess(void * arg);
     virtual void GetValueAndDerivativeThread(unsigned int threadID) const;
     virtual void GetValueAndDerivativeThreadPreProcess(unsigned int arg0, bool arg1) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int arg0, unsigned long arg1, itkPointD3 const & arg2, double arg3, itkCovariantVectorD3 const & arg4) const;
     virtual void GetValueAndDerivativeThreadPostProcess(unsigned int arg0, bool arg1) const;
     virtual void SynchronizeTransforms() const;
 };


 class itkImageToImageMetricIUC3IUC3_Pointer {
   public:
     itkImageToImageMetricIUC3IUC3_Pointer();
     itkImageToImageMetricIUC3IUC3_Pointer(itkImageToImageMetricIUC3IUC3_Pointer const & p);
     itkImageToImageMetricIUC3IUC3_Pointer(itkImageToImageMetricIUC3IUC3 * p);
     ~itkImageToImageMetricIUC3IUC3_Pointer();
     itkImageToImageMetricIUC3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageMetricIUC3IUC3 * GetPointer() const;
     bool operator<(itkImageToImageMetricIUC3IUC3_Pointer const & r) const;
     bool operator>(itkImageToImageMetricIUC3IUC3_Pointer const & r) const;
     bool operator<=(itkImageToImageMetricIUC3IUC3_Pointer const & r) const;
     bool operator>=(itkImageToImageMetricIUC3IUC3_Pointer const & r) const;
     itkImageToImageMetricIUC3IUC3_Pointer & operator=(itkImageToImageMetricIUC3IUC3_Pointer const & r);
     itkImageToImageMetricIUC3IUC3_Pointer & operator=(itkImageToImageMetricIUC3IUC3 * r);
     itkImageToImageMetricIUC3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageMetricIUL2IUL2 : public itkSingleValuedCostFunction {
   public:
     enum  {  MovingImageDimension = 2 };
     enum  {  FixedImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetFixedImage(itkImageUL2 const * _arg);
     virtual itkImageUL2 const * GetFixedImage() const;
     virtual void SetMovingImage(itkImageUL2 const * _arg);
     virtual itkImageUL2 const * GetMovingImage() const;
     virtual void SetTransform(itkTransformD22 * _arg);
     virtual itkTransformD22 const * GetTransform() const;
     virtual void SetInterpolator(itkInterpolateImageFunctionIUL2D * _arg);
     virtual itkInterpolateImageFunctionIUL2D const * GetInterpolator() const;
     unsigned long GetNumberOfMovingImageSamples();
     virtual unsigned long const & GetNumberOfPixelsCounted() const;
     void SetFixedImageRegion(itkImageRegion2 const reg);
     virtual itkImageRegion2 const & GetFixedImageRegion() const;
     virtual void SetMovingImageMask(itkSpatialObject2 * _arg);
     virtual void SetMovingImageMask(itkSpatialObject2 const * _arg);
     virtual itkSpatialObject2 const * GetMovingImageMask() const;
     virtual void SetFixedImageMask(itkSpatialObject2 * _arg);
     virtual void SetFixedImageMask(itkSpatialObject2 const * _arg);
     virtual itkSpatialObject2 const * GetFixedImageMask() const;
     void SetFixedImageIndexes(std::vector< itkIndex2 > const & indexes);
     void SetUseFixedImageIndexes(bool useIndex);
     virtual bool const & GetUseFixedImageIndexes() const;
     void SetNumberOfThreads(unsigned int numberOfThreads);
     virtual unsigned int const & GetNumberOfThreads() const;
     virtual void SetComputeGradient(bool const _arg);
     virtual bool const & GetComputeGradient() const;
     virtual void ComputeGradientOn();
     virtual void ComputeGradientOff();
     virtual void ComputeGradient();
     virtual itk::Image< itk::CovariantVector< double, 2u >, 2u > const * GetGradientImage() const;
     void SetTransformParameters(itkArrayD const & parameters) const;
     virtual unsigned int GetNumberOfParameters() const;
     virtual void Initialize();
     virtual void MultiThreadingInitialize();
     virtual void SetNumberOfFixedImageSamples(unsigned long numSamples);
     virtual unsigned long const & GetNumberOfFixedImageSamples() const;
     void SetNumberOfSpatialSamples(unsigned long num);
     unsigned long GetNumberOfSpatialSamples();
     void SetFixedImageSamplesIntensityThreshold(unsigned long const & thresh);
     virtual unsigned long const & GetFixedImageSamplesIntensityThreshold() const;
     void SetUseFixedImageSamplesIntensityThreshold(bool useThresh);
     virtual bool const & GetUseFixedImageSamplesIntensityThreshold() const;
     void SetUseAllPixels(bool useAllPixels);
     void UseAllPixelsOn();
     void UseAllPixelsOff();
     virtual bool const & GetUseAllPixels() const;
     void SetUseSequentialSampling(bool sequentialSampling);
     virtual bool const & GetUseSequentialSampling() const;
     void ReinitializeSeed();
     void ReinitializeSeed(int seed);
     virtual void SetUseCachingOfBSplineWeights(bool const _arg);
     virtual bool const & GetUseCachingOfBSplineWeights() const;
     virtual void UseCachingOfBSplineWeightsOn();
     virtual void UseCachingOfBSplineWeightsOff();
     virtual itkMultiThreader const * GetThreader() const;
     itkTransformD22_Pointer const * GetThreaderTransform();
   private:
     itkImageToImageMetricIUL2IUL2(itkImageToImageMetricIUL2IUL2 const & arg0);
     void operator=(itkImageToImageMetricIUL2IUL2 const & arg0);
   protected:
     enum  {  DeformationSplineOrder = 3 };
     itkImageToImageMetricIUL2IUL2();
     ~itkImageToImageMetricIUL2IUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void SampleFixedImageRegion(std::vector< itkImageToImageMetricIUL2IUL2::FixedImageSamplePoint > & samples) const;
     virtual void SampleFixedImageIndexes(std::vector< itkImageToImageMetricIUL2IUL2::FixedImageSamplePoint > & samples) const;
     virtual void SampleFullFixedImageRegion(std::vector< itkImageToImageMetricIUL2IUL2::FixedImageSamplePoint > & samples) const;
     virtual void PreComputeTransformValues();
     virtual void TransformPoint(unsigned int sampleNumber, itkPointD2 & mappedPoint, bool & sampleWithinSupportRegion, double & movingImageValue, unsigned int threadID) const;
     virtual void TransformPointWithDerivatives(unsigned int sampleNumber, itkPointD2 & mappedPoint, bool & sampleWithinSupportRegion, double & movingImageValue, itkCovariantVectorD2 & gradient, unsigned int threadID) const;
     virtual void ComputeImageDerivatives(itkPointD2 const & mappedPoint, itkCovariantVectorD2 & gradient, unsigned int threadID) const;
     void GetValueMultiThreadedPreProcessInitiate() const;
     void GetValueMultiThreadedInitiate() const;
     void GetValueMultiThreadedPostProcessInitiate() const;
     static void * GetValueMultiThreadedPreProcess(void * arg);
     static void * GetValueMultiThreaded(void * arg);
     static void * GetValueMultiThreadedPostProcess(void * arg);
     virtual void GetValueThread(unsigned int threadID) const;
     virtual void GetValueThreadPreProcess(unsigned int arg0, bool arg1) const;
     virtual bool GetValueThreadProcessSample(unsigned int arg0, unsigned long arg1, itkPointD2 const & arg2, double arg3) const;
     virtual void GetValueThreadPostProcess(unsigned int arg0, bool arg1) const;
     void GetValueAndDerivativeMultiThreadedPreProcessInitiate() const;
     void GetValueAndDerivativeMultiThreadedInitiate() const;
     void GetValueAndDerivativeMultiThreadedPostProcessInitiate() const;
     static void * GetValueAndDerivativeMultiThreadedPreProcess(void * arg);
     static void * GetValueAndDerivativeMultiThreaded(void * arg);
     static void * GetValueAndDerivativeMultiThreadedPostProcess(void * arg);
     virtual void GetValueAndDerivativeThread(unsigned int threadID) const;
     virtual void GetValueAndDerivativeThreadPreProcess(unsigned int arg0, bool arg1) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int arg0, unsigned long arg1, itkPointD2 const & arg2, double arg3, itkCovariantVectorD2 const & arg4) const;
     virtual void GetValueAndDerivativeThreadPostProcess(unsigned int arg0, bool arg1) const;
     virtual void SynchronizeTransforms() const;
 };


 class itkImageToImageMetricIUL2IUL2_Pointer {
   public:
     itkImageToImageMetricIUL2IUL2_Pointer();
     itkImageToImageMetricIUL2IUL2_Pointer(itkImageToImageMetricIUL2IUL2_Pointer const & p);
     itkImageToImageMetricIUL2IUL2_Pointer(itkImageToImageMetricIUL2IUL2 * p);
     ~itkImageToImageMetricIUL2IUL2_Pointer();
     itkImageToImageMetricIUL2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageMetricIUL2IUL2 * GetPointer() const;
     bool operator<(itkImageToImageMetricIUL2IUL2_Pointer const & r) const;
     bool operator>(itkImageToImageMetricIUL2IUL2_Pointer const & r) const;
     bool operator<=(itkImageToImageMetricIUL2IUL2_Pointer const & r) const;
     bool operator>=(itkImageToImageMetricIUL2IUL2_Pointer const & r) const;
     itkImageToImageMetricIUL2IUL2_Pointer & operator=(itkImageToImageMetricIUL2IUL2_Pointer const & r);
     itkImageToImageMetricIUL2IUL2_Pointer & operator=(itkImageToImageMetricIUL2IUL2 * r);
     itkImageToImageMetricIUL2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageMetricIUL3IUL3 : public itkSingleValuedCostFunction {
   public:
     enum  {  MovingImageDimension = 3 };
     enum  {  FixedImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetFixedImage(itkImageUL3 const * _arg);
     virtual itkImageUL3 const * GetFixedImage() const;
     virtual void SetMovingImage(itkImageUL3 const * _arg);
     virtual itkImageUL3 const * GetMovingImage() const;
     virtual void SetTransform(itkTransformD33 * _arg);
     virtual itkTransformD33 const * GetTransform() const;
     virtual void SetInterpolator(itkInterpolateImageFunctionIUL3D * _arg);
     virtual itkInterpolateImageFunctionIUL3D const * GetInterpolator() const;
     unsigned long GetNumberOfMovingImageSamples();
     virtual unsigned long const & GetNumberOfPixelsCounted() const;
     void SetFixedImageRegion(itkImageRegion3 const reg);
     virtual itkImageRegion3 const & GetFixedImageRegion() const;
     virtual void SetMovingImageMask(itkSpatialObject3 * _arg);
     virtual void SetMovingImageMask(itkSpatialObject3 const * _arg);
     virtual itkSpatialObject3 const * GetMovingImageMask() const;
     virtual void SetFixedImageMask(itkSpatialObject3 * _arg);
     virtual void SetFixedImageMask(itkSpatialObject3 const * _arg);
     virtual itkSpatialObject3 const * GetFixedImageMask() const;
     void SetFixedImageIndexes(std::vector< itkIndex3 > const & indexes);
     void SetUseFixedImageIndexes(bool useIndex);
     virtual bool const & GetUseFixedImageIndexes() const;
     void SetNumberOfThreads(unsigned int numberOfThreads);
     virtual unsigned int const & GetNumberOfThreads() const;
     virtual void SetComputeGradient(bool const _arg);
     virtual bool const & GetComputeGradient() const;
     virtual void ComputeGradientOn();
     virtual void ComputeGradientOff();
     virtual void ComputeGradient();
     virtual itk::Image< itk::CovariantVector< double, 3u >, 3u > const * GetGradientImage() const;
     void SetTransformParameters(itkArrayD const & parameters) const;
     virtual unsigned int GetNumberOfParameters() const;
     virtual void Initialize();
     virtual void MultiThreadingInitialize();
     virtual void SetNumberOfFixedImageSamples(unsigned long numSamples);
     virtual unsigned long const & GetNumberOfFixedImageSamples() const;
     void SetNumberOfSpatialSamples(unsigned long num);
     unsigned long GetNumberOfSpatialSamples();
     void SetFixedImageSamplesIntensityThreshold(unsigned long const & thresh);
     virtual unsigned long const & GetFixedImageSamplesIntensityThreshold() const;
     void SetUseFixedImageSamplesIntensityThreshold(bool useThresh);
     virtual bool const & GetUseFixedImageSamplesIntensityThreshold() const;
     void SetUseAllPixels(bool useAllPixels);
     void UseAllPixelsOn();
     void UseAllPixelsOff();
     virtual bool const & GetUseAllPixels() const;
     void SetUseSequentialSampling(bool sequentialSampling);
     virtual bool const & GetUseSequentialSampling() const;
     void ReinitializeSeed();
     void ReinitializeSeed(int seed);
     virtual void SetUseCachingOfBSplineWeights(bool const _arg);
     virtual bool const & GetUseCachingOfBSplineWeights() const;
     virtual void UseCachingOfBSplineWeightsOn();
     virtual void UseCachingOfBSplineWeightsOff();
     virtual itkMultiThreader const * GetThreader() const;
     itkTransformD33_Pointer const * GetThreaderTransform();
   private:
     itkImageToImageMetricIUL3IUL3(itkImageToImageMetricIUL3IUL3 const & arg0);
     void operator=(itkImageToImageMetricIUL3IUL3 const & arg0);
   protected:
     enum  {  DeformationSplineOrder = 3 };
     itkImageToImageMetricIUL3IUL3();
     ~itkImageToImageMetricIUL3IUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void SampleFixedImageRegion(std::vector< itkImageToImageMetricIUL3IUL3::FixedImageSamplePoint > & samples) const;
     virtual void SampleFixedImageIndexes(std::vector< itkImageToImageMetricIUL3IUL3::FixedImageSamplePoint > & samples) const;
     virtual void SampleFullFixedImageRegion(std::vector< itkImageToImageMetricIUL3IUL3::FixedImageSamplePoint > & samples) const;
     virtual void PreComputeTransformValues();
     virtual void TransformPoint(unsigned int sampleNumber, itkPointD3 & mappedPoint, bool & sampleWithinSupportRegion, double & movingImageValue, unsigned int threadID) const;
     virtual void TransformPointWithDerivatives(unsigned int sampleNumber, itkPointD3 & mappedPoint, bool & sampleWithinSupportRegion, double & movingImageValue, itkCovariantVectorD3 & gradient, unsigned int threadID) const;
     virtual void ComputeImageDerivatives(itkPointD3 const & mappedPoint, itkCovariantVectorD3 & gradient, unsigned int threadID) const;
     void GetValueMultiThreadedPreProcessInitiate() const;
     void GetValueMultiThreadedInitiate() const;
     void GetValueMultiThreadedPostProcessInitiate() const;
     static void * GetValueMultiThreadedPreProcess(void * arg);
     static void * GetValueMultiThreaded(void * arg);
     static void * GetValueMultiThreadedPostProcess(void * arg);
     virtual void GetValueThread(unsigned int threadID) const;
     virtual void GetValueThreadPreProcess(unsigned int arg0, bool arg1) const;
     virtual bool GetValueThreadProcessSample(unsigned int arg0, unsigned long arg1, itkPointD3 const & arg2, double arg3) const;
     virtual void GetValueThreadPostProcess(unsigned int arg0, bool arg1) const;
     void GetValueAndDerivativeMultiThreadedPreProcessInitiate() const;
     void GetValueAndDerivativeMultiThreadedInitiate() const;
     void GetValueAndDerivativeMultiThreadedPostProcessInitiate() const;
     static void * GetValueAndDerivativeMultiThreadedPreProcess(void * arg);
     static void * GetValueAndDerivativeMultiThreaded(void * arg);
     static void * GetValueAndDerivativeMultiThreadedPostProcess(void * arg);
     virtual void GetValueAndDerivativeThread(unsigned int threadID) const;
     virtual void GetValueAndDerivativeThreadPreProcess(unsigned int arg0, bool arg1) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int arg0, unsigned long arg1, itkPointD3 const & arg2, double arg3, itkCovariantVectorD3 const & arg4) const;
     virtual void GetValueAndDerivativeThreadPostProcess(unsigned int arg0, bool arg1) const;
     virtual void SynchronizeTransforms() const;
 };


 class itkImageToImageMetricIUL3IUL3_Pointer {
   public:
     itkImageToImageMetricIUL3IUL3_Pointer();
     itkImageToImageMetricIUL3IUL3_Pointer(itkImageToImageMetricIUL3IUL3_Pointer const & p);
     itkImageToImageMetricIUL3IUL3_Pointer(itkImageToImageMetricIUL3IUL3 * p);
     ~itkImageToImageMetricIUL3IUL3_Pointer();
     itkImageToImageMetricIUL3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageMetricIUL3IUL3 * GetPointer() const;
     bool operator<(itkImageToImageMetricIUL3IUL3_Pointer const & r) const;
     bool operator>(itkImageToImageMetricIUL3IUL3_Pointer const & r) const;
     bool operator<=(itkImageToImageMetricIUL3IUL3_Pointer const & r) const;
     bool operator>=(itkImageToImageMetricIUL3IUL3_Pointer const & r) const;
     itkImageToImageMetricIUL3IUL3_Pointer & operator=(itkImageToImageMetricIUL3IUL3_Pointer const & r);
     itkImageToImageMetricIUL3IUL3_Pointer & operator=(itkImageToImageMetricIUL3IUL3 * r);
     itkImageToImageMetricIUL3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageMetricIUS2IUS2 : public itkSingleValuedCostFunction {
   public:
     enum  {  MovingImageDimension = 2 };
     enum  {  FixedImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetFixedImage(itkImageUS2 const * _arg);
     virtual itkImageUS2 const * GetFixedImage() const;
     virtual void SetMovingImage(itkImageUS2 const * _arg);
     virtual itkImageUS2 const * GetMovingImage() const;
     virtual void SetTransform(itkTransformD22 * _arg);
     virtual itkTransformD22 const * GetTransform() const;
     virtual void SetInterpolator(itkInterpolateImageFunctionIUS2D * _arg);
     virtual itkInterpolateImageFunctionIUS2D const * GetInterpolator() const;
     unsigned long GetNumberOfMovingImageSamples();
     virtual unsigned long const & GetNumberOfPixelsCounted() const;
     void SetFixedImageRegion(itkImageRegion2 const reg);
     virtual itkImageRegion2 const & GetFixedImageRegion() const;
     virtual void SetMovingImageMask(itkSpatialObject2 * _arg);
     virtual void SetMovingImageMask(itkSpatialObject2 const * _arg);
     virtual itkSpatialObject2 const * GetMovingImageMask() const;
     virtual void SetFixedImageMask(itkSpatialObject2 * _arg);
     virtual void SetFixedImageMask(itkSpatialObject2 const * _arg);
     virtual itkSpatialObject2 const * GetFixedImageMask() const;
     void SetFixedImageIndexes(std::vector< itkIndex2 > const & indexes);
     void SetUseFixedImageIndexes(bool useIndex);
     virtual bool const & GetUseFixedImageIndexes() const;
     void SetNumberOfThreads(unsigned int numberOfThreads);
     virtual unsigned int const & GetNumberOfThreads() const;
     virtual void SetComputeGradient(bool const _arg);
     virtual bool const & GetComputeGradient() const;
     virtual void ComputeGradientOn();
     virtual void ComputeGradientOff();
     virtual void ComputeGradient();
     virtual itk::Image< itk::CovariantVector< double, 2u >, 2u > const * GetGradientImage() const;
     void SetTransformParameters(itkArrayD const & parameters) const;
     virtual unsigned int GetNumberOfParameters() const;
     virtual void Initialize();
     virtual void MultiThreadingInitialize();
     virtual void SetNumberOfFixedImageSamples(unsigned long numSamples);
     virtual unsigned long const & GetNumberOfFixedImageSamples() const;
     void SetNumberOfSpatialSamples(unsigned long num);
     unsigned long GetNumberOfSpatialSamples();
     void SetFixedImageSamplesIntensityThreshold(unsigned short const & thresh);
     virtual unsigned short const & GetFixedImageSamplesIntensityThreshold() const;
     void SetUseFixedImageSamplesIntensityThreshold(bool useThresh);
     virtual bool const & GetUseFixedImageSamplesIntensityThreshold() const;
     void SetUseAllPixels(bool useAllPixels);
     void UseAllPixelsOn();
     void UseAllPixelsOff();
     virtual bool const & GetUseAllPixels() const;
     void SetUseSequentialSampling(bool sequentialSampling);
     virtual bool const & GetUseSequentialSampling() const;
     void ReinitializeSeed();
     void ReinitializeSeed(int seed);
     virtual void SetUseCachingOfBSplineWeights(bool const _arg);
     virtual bool const & GetUseCachingOfBSplineWeights() const;
     virtual void UseCachingOfBSplineWeightsOn();
     virtual void UseCachingOfBSplineWeightsOff();
     virtual itkMultiThreader const * GetThreader() const;
     itkTransformD22_Pointer const * GetThreaderTransform();
   private:
     itkImageToImageMetricIUS2IUS2(itkImageToImageMetricIUS2IUS2 const & arg0);
     void operator=(itkImageToImageMetricIUS2IUS2 const & arg0);
   protected:
     enum  {  DeformationSplineOrder = 3 };
     itkImageToImageMetricIUS2IUS2();
     ~itkImageToImageMetricIUS2IUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void SampleFixedImageRegion(std::vector< itkImageToImageMetricIUS2IUS2::FixedImageSamplePoint > & samples) const;
     virtual void SampleFixedImageIndexes(std::vector< itkImageToImageMetricIUS2IUS2::FixedImageSamplePoint > & samples) const;
     virtual void SampleFullFixedImageRegion(std::vector< itkImageToImageMetricIUS2IUS2::FixedImageSamplePoint > & samples) const;
     virtual void PreComputeTransformValues();
     virtual void TransformPoint(unsigned int sampleNumber, itkPointD2 & mappedPoint, bool & sampleWithinSupportRegion, double & movingImageValue, unsigned int threadID) const;
     virtual void TransformPointWithDerivatives(unsigned int sampleNumber, itkPointD2 & mappedPoint, bool & sampleWithinSupportRegion, double & movingImageValue, itkCovariantVectorD2 & gradient, unsigned int threadID) const;
     virtual void ComputeImageDerivatives(itkPointD2 const & mappedPoint, itkCovariantVectorD2 & gradient, unsigned int threadID) const;
     void GetValueMultiThreadedPreProcessInitiate() const;
     void GetValueMultiThreadedInitiate() const;
     void GetValueMultiThreadedPostProcessInitiate() const;
     static void * GetValueMultiThreadedPreProcess(void * arg);
     static void * GetValueMultiThreaded(void * arg);
     static void * GetValueMultiThreadedPostProcess(void * arg);
     virtual void GetValueThread(unsigned int threadID) const;
     virtual void GetValueThreadPreProcess(unsigned int arg0, bool arg1) const;
     virtual bool GetValueThreadProcessSample(unsigned int arg0, unsigned long arg1, itkPointD2 const & arg2, double arg3) const;
     virtual void GetValueThreadPostProcess(unsigned int arg0, bool arg1) const;
     void GetValueAndDerivativeMultiThreadedPreProcessInitiate() const;
     void GetValueAndDerivativeMultiThreadedInitiate() const;
     void GetValueAndDerivativeMultiThreadedPostProcessInitiate() const;
     static void * GetValueAndDerivativeMultiThreadedPreProcess(void * arg);
     static void * GetValueAndDerivativeMultiThreaded(void * arg);
     static void * GetValueAndDerivativeMultiThreadedPostProcess(void * arg);
     virtual void GetValueAndDerivativeThread(unsigned int threadID) const;
     virtual void GetValueAndDerivativeThreadPreProcess(unsigned int arg0, bool arg1) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int arg0, unsigned long arg1, itkPointD2 const & arg2, double arg3, itkCovariantVectorD2 const & arg4) const;
     virtual void GetValueAndDerivativeThreadPostProcess(unsigned int arg0, bool arg1) const;
     virtual void SynchronizeTransforms() const;
 };


 class itkImageToImageMetricIUS2IUS2_Pointer {
   public:
     itkImageToImageMetricIUS2IUS2_Pointer();
     itkImageToImageMetricIUS2IUS2_Pointer(itkImageToImageMetricIUS2IUS2_Pointer const & p);
     itkImageToImageMetricIUS2IUS2_Pointer(itkImageToImageMetricIUS2IUS2 * p);
     ~itkImageToImageMetricIUS2IUS2_Pointer();
     itkImageToImageMetricIUS2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageMetricIUS2IUS2 * GetPointer() const;
     bool operator<(itkImageToImageMetricIUS2IUS2_Pointer const & r) const;
     bool operator>(itkImageToImageMetricIUS2IUS2_Pointer const & r) const;
     bool operator<=(itkImageToImageMetricIUS2IUS2_Pointer const & r) const;
     bool operator>=(itkImageToImageMetricIUS2IUS2_Pointer const & r) const;
     itkImageToImageMetricIUS2IUS2_Pointer & operator=(itkImageToImageMetricIUS2IUS2_Pointer const & r);
     itkImageToImageMetricIUS2IUS2_Pointer & operator=(itkImageToImageMetricIUS2IUS2 * r);
     itkImageToImageMetricIUS2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageMetricIUS3IUS3 : public itkSingleValuedCostFunction {
   public:
     enum  {  MovingImageDimension = 3 };
     enum  {  FixedImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetFixedImage(itkImageUS3 const * _arg);
     virtual itkImageUS3 const * GetFixedImage() const;
     virtual void SetMovingImage(itkImageUS3 const * _arg);
     virtual itkImageUS3 const * GetMovingImage() const;
     virtual void SetTransform(itkTransformD33 * _arg);
     virtual itkTransformD33 const * GetTransform() const;
     virtual void SetInterpolator(itkInterpolateImageFunctionIUS3D * _arg);
     virtual itkInterpolateImageFunctionIUS3D const * GetInterpolator() const;
     unsigned long GetNumberOfMovingImageSamples();
     virtual unsigned long const & GetNumberOfPixelsCounted() const;
     void SetFixedImageRegion(itkImageRegion3 const reg);
     virtual itkImageRegion3 const & GetFixedImageRegion() const;
     virtual void SetMovingImageMask(itkSpatialObject3 * _arg);
     virtual void SetMovingImageMask(itkSpatialObject3 const * _arg);
     virtual itkSpatialObject3 const * GetMovingImageMask() const;
     virtual void SetFixedImageMask(itkSpatialObject3 * _arg);
     virtual void SetFixedImageMask(itkSpatialObject3 const * _arg);
     virtual itkSpatialObject3 const * GetFixedImageMask() const;
     void SetFixedImageIndexes(std::vector< itkIndex3 > const & indexes);
     void SetUseFixedImageIndexes(bool useIndex);
     virtual bool const & GetUseFixedImageIndexes() const;
     void SetNumberOfThreads(unsigned int numberOfThreads);
     virtual unsigned int const & GetNumberOfThreads() const;
     virtual void SetComputeGradient(bool const _arg);
     virtual bool const & GetComputeGradient() const;
     virtual void ComputeGradientOn();
     virtual void ComputeGradientOff();
     virtual void ComputeGradient();
     virtual itk::Image< itk::CovariantVector< double, 3u >, 3u > const * GetGradientImage() const;
     void SetTransformParameters(itkArrayD const & parameters) const;
     virtual unsigned int GetNumberOfParameters() const;
     virtual void Initialize();
     virtual void MultiThreadingInitialize();
     virtual void SetNumberOfFixedImageSamples(unsigned long numSamples);
     virtual unsigned long const & GetNumberOfFixedImageSamples() const;
     void SetNumberOfSpatialSamples(unsigned long num);
     unsigned long GetNumberOfSpatialSamples();
     void SetFixedImageSamplesIntensityThreshold(unsigned short const & thresh);
     virtual unsigned short const & GetFixedImageSamplesIntensityThreshold() const;
     void SetUseFixedImageSamplesIntensityThreshold(bool useThresh);
     virtual bool const & GetUseFixedImageSamplesIntensityThreshold() const;
     void SetUseAllPixels(bool useAllPixels);
     void UseAllPixelsOn();
     void UseAllPixelsOff();
     virtual bool const & GetUseAllPixels() const;
     void SetUseSequentialSampling(bool sequentialSampling);
     virtual bool const & GetUseSequentialSampling() const;
     void ReinitializeSeed();
     void ReinitializeSeed(int seed);
     virtual void SetUseCachingOfBSplineWeights(bool const _arg);
     virtual bool const & GetUseCachingOfBSplineWeights() const;
     virtual void UseCachingOfBSplineWeightsOn();
     virtual void UseCachingOfBSplineWeightsOff();
     virtual itkMultiThreader const * GetThreader() const;
     itkTransformD33_Pointer const * GetThreaderTransform();
   private:
     itkImageToImageMetricIUS3IUS3(itkImageToImageMetricIUS3IUS3 const & arg0);
     void operator=(itkImageToImageMetricIUS3IUS3 const & arg0);
   protected:
     enum  {  DeformationSplineOrder = 3 };
     itkImageToImageMetricIUS3IUS3();
     ~itkImageToImageMetricIUS3IUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void SampleFixedImageRegion(std::vector< itkImageToImageMetricIUS3IUS3::FixedImageSamplePoint > & samples) const;
     virtual void SampleFixedImageIndexes(std::vector< itkImageToImageMetricIUS3IUS3::FixedImageSamplePoint > & samples) const;
     virtual void SampleFullFixedImageRegion(std::vector< itkImageToImageMetricIUS3IUS3::FixedImageSamplePoint > & samples) const;
     virtual void PreComputeTransformValues();
     virtual void TransformPoint(unsigned int sampleNumber, itkPointD3 & mappedPoint, bool & sampleWithinSupportRegion, double & movingImageValue, unsigned int threadID) const;
     virtual void TransformPointWithDerivatives(unsigned int sampleNumber, itkPointD3 & mappedPoint, bool & sampleWithinSupportRegion, double & movingImageValue, itkCovariantVectorD3 & gradient, unsigned int threadID) const;
     virtual void ComputeImageDerivatives(itkPointD3 const & mappedPoint, itkCovariantVectorD3 & gradient, unsigned int threadID) const;
     void GetValueMultiThreadedPreProcessInitiate() const;
     void GetValueMultiThreadedInitiate() const;
     void GetValueMultiThreadedPostProcessInitiate() const;
     static void * GetValueMultiThreadedPreProcess(void * arg);
     static void * GetValueMultiThreaded(void * arg);
     static void * GetValueMultiThreadedPostProcess(void * arg);
     virtual void GetValueThread(unsigned int threadID) const;
     virtual void GetValueThreadPreProcess(unsigned int arg0, bool arg1) const;
     virtual bool GetValueThreadProcessSample(unsigned int arg0, unsigned long arg1, itkPointD3 const & arg2, double arg3) const;
     virtual void GetValueThreadPostProcess(unsigned int arg0, bool arg1) const;
     void GetValueAndDerivativeMultiThreadedPreProcessInitiate() const;
     void GetValueAndDerivativeMultiThreadedInitiate() const;
     void GetValueAndDerivativeMultiThreadedPostProcessInitiate() const;
     static void * GetValueAndDerivativeMultiThreadedPreProcess(void * arg);
     static void * GetValueAndDerivativeMultiThreaded(void * arg);
     static void * GetValueAndDerivativeMultiThreadedPostProcess(void * arg);
     virtual void GetValueAndDerivativeThread(unsigned int threadID) const;
     virtual void GetValueAndDerivativeThreadPreProcess(unsigned int arg0, bool arg1) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int arg0, unsigned long arg1, itkPointD3 const & arg2, double arg3, itkCovariantVectorD3 const & arg4) const;
     virtual void GetValueAndDerivativeThreadPostProcess(unsigned int arg0, bool arg1) const;
     virtual void SynchronizeTransforms() const;
 };


 class itkImageToImageMetricIUS3IUS3_Pointer {
   public:
     itkImageToImageMetricIUS3IUS3_Pointer();
     itkImageToImageMetricIUS3IUS3_Pointer(itkImageToImageMetricIUS3IUS3_Pointer const & p);
     itkImageToImageMetricIUS3IUS3_Pointer(itkImageToImageMetricIUS3IUS3 * p);
     ~itkImageToImageMetricIUS3IUS3_Pointer();
     itkImageToImageMetricIUS3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageMetricIUS3IUS3 * GetPointer() const;
     bool operator<(itkImageToImageMetricIUS3IUS3_Pointer const & r) const;
     bool operator>(itkImageToImageMetricIUS3IUS3_Pointer const & r) const;
     bool operator<=(itkImageToImageMetricIUS3IUS3_Pointer const & r) const;
     bool operator>=(itkImageToImageMetricIUS3IUS3_Pointer const & r) const;
     itkImageToImageMetricIUS3IUS3_Pointer & operator=(itkImageToImageMetricIUS3IUS3_Pointer const & r);
     itkImageToImageMetricIUS3IUS3_Pointer & operator=(itkImageToImageMetricIUS3IUS3 * r);
     itkImageToImageMetricIUS3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


