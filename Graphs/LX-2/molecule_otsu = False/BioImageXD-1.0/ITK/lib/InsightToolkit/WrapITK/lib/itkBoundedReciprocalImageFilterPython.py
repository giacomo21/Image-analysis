# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkBoundedReciprocalImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkBoundedReciprocalImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkBoundedReciprocalImageFilterPython
            return _itkBoundedReciprocalImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkBoundedReciprocalImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkBoundedReciprocalImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkBoundedReciprocalImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import itkEventObjectsPython
import pyBasePython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import ITKRegionsPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkImagePython
import itkFixedArrayPython
import itkCovariantVectorPython
import vnl_vectorPython
import vcl_complexPython
import vnl_matrixPython
import itkVectorPython
import vnl_vector_refPython
import itkPointPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkRGBPixelPython
import itkImageSourcePython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterAPython
def itkBoundedReciprocalImageFilterID3ID3_New():
  return itkBoundedReciprocalImageFilterID3ID3.New()

def itkBoundedReciprocalImageFilterID3ID3_Superclass_New():
  return itkBoundedReciprocalImageFilterID3ID3_Superclass.New()

def itkBoundedReciprocalImageFilterID2ID2_New():
  return itkBoundedReciprocalImageFilterID2ID2.New()

def itkBoundedReciprocalImageFilterID2ID2_Superclass_New():
  return itkBoundedReciprocalImageFilterID2ID2_Superclass.New()

def itkBoundedReciprocalImageFilterIF3IF3_New():
  return itkBoundedReciprocalImageFilterIF3IF3.New()

def itkBoundedReciprocalImageFilterIF3IF3_Superclass_New():
  return itkBoundedReciprocalImageFilterIF3IF3_Superclass.New()

def itkBoundedReciprocalImageFilterIF2IF2_New():
  return itkBoundedReciprocalImageFilterIF2IF2.New()

def itkBoundedReciprocalImageFilterIF2IF2_Superclass_New():
  return itkBoundedReciprocalImageFilterIF2IF2_Superclass.New()

def itkBoundedReciprocalImageFilterIUS3IUS3_New():
  return itkBoundedReciprocalImageFilterIUS3IUS3.New()

def itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_New():
  return itkBoundedReciprocalImageFilterIUS3IUS3_Superclass.New()

def itkBoundedReciprocalImageFilterIUS2IUS2_New():
  return itkBoundedReciprocalImageFilterIUS2IUS2.New()

def itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_New():
  return itkBoundedReciprocalImageFilterIUS2IUS2_Superclass.New()

def itkBoundedReciprocalImageFilterIUL3IUL3_New():
  return itkBoundedReciprocalImageFilterIUL3IUL3.New()

def itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_New():
  return itkBoundedReciprocalImageFilterIUL3IUL3_Superclass.New()

def itkBoundedReciprocalImageFilterIUL2IUL2_New():
  return itkBoundedReciprocalImageFilterIUL2IUL2.New()

def itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_New():
  return itkBoundedReciprocalImageFilterIUL2IUL2_Superclass.New()

def itkBoundedReciprocalImageFilterIUC3IUC3_New():
  return itkBoundedReciprocalImageFilterIUC3IUC3.New()

def itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_New():
  return itkBoundedReciprocalImageFilterIUC3IUC3_Superclass.New()

def itkBoundedReciprocalImageFilterIUC2IUC2_New():
  return itkBoundedReciprocalImageFilterIUC2IUC2.New()

def itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_New():
  return itkBoundedReciprocalImageFilterIUC2IUC2_Superclass.New()

class itkBoundedReciprocalImageFilterID2ID2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    """Proxy of C++ itkBoundedReciprocalImageFilterID2ID2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::BoundedReciprocal<(double,double)>
        GetFunctor(self) -> itk::Functor::BoundedReciprocal<(double,double)>
        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::BoundedReciprocal<(double,double)> functor)"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterID2ID2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterID2ID2_Superclass"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBoundedReciprocalImageFilterID2ID2_Superclass"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterID2ID2_Superclass
        
        Create a new object of the class itkBoundedReciprocalImageFilterID2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBoundedReciprocalImageFilterID2ID2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBoundedReciprocalImageFilterID2ID2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundedReciprocalImageFilterID2ID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundedReciprocalImageFilterID2ID2_Superclass.GetFunctor = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_Superclass_GetFunctor,None,itkBoundedReciprocalImageFilterID2ID2_Superclass)
itkBoundedReciprocalImageFilterID2ID2_Superclass.SetFunctor = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_Superclass_SetFunctor,None,itkBoundedReciprocalImageFilterID2ID2_Superclass)
itkBoundedReciprocalImageFilterID2ID2_Superclass.GetPointer = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_Superclass_GetPointer,None,itkBoundedReciprocalImageFilterID2ID2_Superclass)
itkBoundedReciprocalImageFilterID2ID2_Superclass_swigregister = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_Superclass_swigregister
itkBoundedReciprocalImageFilterID2ID2_Superclass_swigregister(itkBoundedReciprocalImageFilterID2ID2_Superclass)

def itkBoundedReciprocalImageFilterID2ID2_Superclass___New_orig__():
  """itkBoundedReciprocalImageFilterID2ID2_Superclass___New_orig__()"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_Superclass___New_orig__()

def itkBoundedReciprocalImageFilterID2ID2_Superclass_cast(*args):
  """itkBoundedReciprocalImageFilterID2ID2_Superclass_cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterID2ID2_Superclass"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_Superclass_cast(*args)

class itkBoundedReciprocalImageFilterID3ID3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    """Proxy of C++ itkBoundedReciprocalImageFilterID3ID3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::BoundedReciprocal<(double,double)>
        GetFunctor(self) -> itk::Functor::BoundedReciprocal<(double,double)>
        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::BoundedReciprocal<(double,double)> functor)"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterID3ID3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterID3ID3_Superclass"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBoundedReciprocalImageFilterID3ID3_Superclass"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterID3ID3_Superclass
        
        Create a new object of the class itkBoundedReciprocalImageFilterID3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBoundedReciprocalImageFilterID3ID3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBoundedReciprocalImageFilterID3ID3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundedReciprocalImageFilterID3ID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundedReciprocalImageFilterID3ID3_Superclass.GetFunctor = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_Superclass_GetFunctor,None,itkBoundedReciprocalImageFilterID3ID3_Superclass)
itkBoundedReciprocalImageFilterID3ID3_Superclass.SetFunctor = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_Superclass_SetFunctor,None,itkBoundedReciprocalImageFilterID3ID3_Superclass)
itkBoundedReciprocalImageFilterID3ID3_Superclass.GetPointer = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_Superclass_GetPointer,None,itkBoundedReciprocalImageFilterID3ID3_Superclass)
itkBoundedReciprocalImageFilterID3ID3_Superclass_swigregister = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_Superclass_swigregister
itkBoundedReciprocalImageFilterID3ID3_Superclass_swigregister(itkBoundedReciprocalImageFilterID3ID3_Superclass)

def itkBoundedReciprocalImageFilterID3ID3_Superclass___New_orig__():
  """itkBoundedReciprocalImageFilterID3ID3_Superclass___New_orig__()"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_Superclass___New_orig__()

def itkBoundedReciprocalImageFilterID3ID3_Superclass_cast(*args):
  """itkBoundedReciprocalImageFilterID3ID3_Superclass_cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterID3ID3_Superclass"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_Superclass_cast(*args)

class itkBoundedReciprocalImageFilterIF2IF2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    """Proxy of C++ itkBoundedReciprocalImageFilterIF2IF2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::BoundedReciprocal<(float,float)>
        GetFunctor(self) -> itk::Functor::BoundedReciprocal<(float,float)>
        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::BoundedReciprocal<(float,float)> functor)"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIF2IF2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIF2IF2_Superclass"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBoundedReciprocalImageFilterIF2IF2_Superclass"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIF2IF2_Superclass
        
        Create a new object of the class itkBoundedReciprocalImageFilterIF2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBoundedReciprocalImageFilterIF2IF2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBoundedReciprocalImageFilterIF2IF2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundedReciprocalImageFilterIF2IF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundedReciprocalImageFilterIF2IF2_Superclass.GetFunctor = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_Superclass_GetFunctor,None,itkBoundedReciprocalImageFilterIF2IF2_Superclass)
itkBoundedReciprocalImageFilterIF2IF2_Superclass.SetFunctor = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_Superclass_SetFunctor,None,itkBoundedReciprocalImageFilterIF2IF2_Superclass)
itkBoundedReciprocalImageFilterIF2IF2_Superclass.GetPointer = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_Superclass_GetPointer,None,itkBoundedReciprocalImageFilterIF2IF2_Superclass)
itkBoundedReciprocalImageFilterIF2IF2_Superclass_swigregister = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_Superclass_swigregister
itkBoundedReciprocalImageFilterIF2IF2_Superclass_swigregister(itkBoundedReciprocalImageFilterIF2IF2_Superclass)

def itkBoundedReciprocalImageFilterIF2IF2_Superclass___New_orig__():
  """itkBoundedReciprocalImageFilterIF2IF2_Superclass___New_orig__()"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_Superclass___New_orig__()

def itkBoundedReciprocalImageFilterIF2IF2_Superclass_cast(*args):
  """itkBoundedReciprocalImageFilterIF2IF2_Superclass_cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIF2IF2_Superclass"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_Superclass_cast(*args)

class itkBoundedReciprocalImageFilterIF3IF3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    """Proxy of C++ itkBoundedReciprocalImageFilterIF3IF3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::BoundedReciprocal<(float,float)>
        GetFunctor(self) -> itk::Functor::BoundedReciprocal<(float,float)>
        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::BoundedReciprocal<(float,float)> functor)"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIF3IF3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIF3IF3_Superclass"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBoundedReciprocalImageFilterIF3IF3_Superclass"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIF3IF3_Superclass
        
        Create a new object of the class itkBoundedReciprocalImageFilterIF3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBoundedReciprocalImageFilterIF3IF3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBoundedReciprocalImageFilterIF3IF3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundedReciprocalImageFilterIF3IF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundedReciprocalImageFilterIF3IF3_Superclass.GetFunctor = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_Superclass_GetFunctor,None,itkBoundedReciprocalImageFilterIF3IF3_Superclass)
itkBoundedReciprocalImageFilterIF3IF3_Superclass.SetFunctor = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_Superclass_SetFunctor,None,itkBoundedReciprocalImageFilterIF3IF3_Superclass)
itkBoundedReciprocalImageFilterIF3IF3_Superclass.GetPointer = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_Superclass_GetPointer,None,itkBoundedReciprocalImageFilterIF3IF3_Superclass)
itkBoundedReciprocalImageFilterIF3IF3_Superclass_swigregister = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_Superclass_swigregister
itkBoundedReciprocalImageFilterIF3IF3_Superclass_swigregister(itkBoundedReciprocalImageFilterIF3IF3_Superclass)

def itkBoundedReciprocalImageFilterIF3IF3_Superclass___New_orig__():
  """itkBoundedReciprocalImageFilterIF3IF3_Superclass___New_orig__()"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_Superclass___New_orig__()

def itkBoundedReciprocalImageFilterIF3IF3_Superclass_cast(*args):
  """itkBoundedReciprocalImageFilterIF3IF3_Superclass_cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIF3IF3_Superclass"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_Superclass_cast(*args)

class itkBoundedReciprocalImageFilterIUC2IUC2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    """Proxy of C++ itkBoundedReciprocalImageFilterIUC2IUC2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::BoundedReciprocal<(unsigned char,unsigned char)>
        GetFunctor(self) -> itk::Functor::BoundedReciprocal<(unsigned char,unsigned char)>
        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::BoundedReciprocal<(unsigned char,unsigned char)> functor)"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIUC2IUC2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIUC2IUC2_Superclass"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBoundedReciprocalImageFilterIUC2IUC2_Superclass"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIUC2IUC2_Superclass
        
        Create a new object of the class itkBoundedReciprocalImageFilterIUC2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBoundedReciprocalImageFilterIUC2IUC2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBoundedReciprocalImageFilterIUC2IUC2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundedReciprocalImageFilterIUC2IUC2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundedReciprocalImageFilterIUC2IUC2_Superclass.GetFunctor = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_GetFunctor,None,itkBoundedReciprocalImageFilterIUC2IUC2_Superclass)
itkBoundedReciprocalImageFilterIUC2IUC2_Superclass.SetFunctor = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_SetFunctor,None,itkBoundedReciprocalImageFilterIUC2IUC2_Superclass)
itkBoundedReciprocalImageFilterIUC2IUC2_Superclass.GetPointer = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_GetPointer,None,itkBoundedReciprocalImageFilterIUC2IUC2_Superclass)
itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_swigregister = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_swigregister
itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_swigregister(itkBoundedReciprocalImageFilterIUC2IUC2_Superclass)

def itkBoundedReciprocalImageFilterIUC2IUC2_Superclass___New_orig__():
  """itkBoundedReciprocalImageFilterIUC2IUC2_Superclass___New_orig__()"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_Superclass___New_orig__()

def itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_cast(*args):
  """itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIUC2IUC2_Superclass"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_cast(*args)

class itkBoundedReciprocalImageFilterIUC3IUC3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    """Proxy of C++ itkBoundedReciprocalImageFilterIUC3IUC3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::BoundedReciprocal<(unsigned char,unsigned char)>
        GetFunctor(self) -> itk::Functor::BoundedReciprocal<(unsigned char,unsigned char)>
        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::BoundedReciprocal<(unsigned char,unsigned char)> functor)"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIUC3IUC3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIUC3IUC3_Superclass"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBoundedReciprocalImageFilterIUC3IUC3_Superclass"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIUC3IUC3_Superclass
        
        Create a new object of the class itkBoundedReciprocalImageFilterIUC3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBoundedReciprocalImageFilterIUC3IUC3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBoundedReciprocalImageFilterIUC3IUC3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundedReciprocalImageFilterIUC3IUC3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundedReciprocalImageFilterIUC3IUC3_Superclass.GetFunctor = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_GetFunctor,None,itkBoundedReciprocalImageFilterIUC3IUC3_Superclass)
itkBoundedReciprocalImageFilterIUC3IUC3_Superclass.SetFunctor = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_SetFunctor,None,itkBoundedReciprocalImageFilterIUC3IUC3_Superclass)
itkBoundedReciprocalImageFilterIUC3IUC3_Superclass.GetPointer = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_GetPointer,None,itkBoundedReciprocalImageFilterIUC3IUC3_Superclass)
itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_swigregister = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_swigregister
itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_swigregister(itkBoundedReciprocalImageFilterIUC3IUC3_Superclass)

def itkBoundedReciprocalImageFilterIUC3IUC3_Superclass___New_orig__():
  """itkBoundedReciprocalImageFilterIUC3IUC3_Superclass___New_orig__()"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_Superclass___New_orig__()

def itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_cast(*args):
  """itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIUC3IUC3_Superclass"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_cast(*args)

class itkBoundedReciprocalImageFilterIUL2IUL2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUL2):
    """Proxy of C++ itkBoundedReciprocalImageFilterIUL2IUL2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL2IUL2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::BoundedReciprocal<(unsigned long,unsigned long)>
        GetFunctor(self) -> itk::Functor::BoundedReciprocal<(unsigned long,unsigned long)>
        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::BoundedReciprocal<(unsigned long,unsigned long)> functor)"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIUL2IUL2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIUL2IUL2_Superclass"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBoundedReciprocalImageFilterIUL2IUL2_Superclass"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIUL2IUL2_Superclass
        
        Create a new object of the class itkBoundedReciprocalImageFilterIUL2IUL2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBoundedReciprocalImageFilterIUL2IUL2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBoundedReciprocalImageFilterIUL2IUL2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundedReciprocalImageFilterIUL2IUL2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundedReciprocalImageFilterIUL2IUL2_Superclass.GetFunctor = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_GetFunctor,None,itkBoundedReciprocalImageFilterIUL2IUL2_Superclass)
itkBoundedReciprocalImageFilterIUL2IUL2_Superclass.SetFunctor = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_SetFunctor,None,itkBoundedReciprocalImageFilterIUL2IUL2_Superclass)
itkBoundedReciprocalImageFilterIUL2IUL2_Superclass.GetPointer = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_GetPointer,None,itkBoundedReciprocalImageFilterIUL2IUL2_Superclass)
itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_swigregister = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_swigregister
itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_swigregister(itkBoundedReciprocalImageFilterIUL2IUL2_Superclass)

def itkBoundedReciprocalImageFilterIUL2IUL2_Superclass___New_orig__():
  """itkBoundedReciprocalImageFilterIUL2IUL2_Superclass___New_orig__()"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL2IUL2_Superclass___New_orig__()

def itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_cast(*args):
  """itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIUL2IUL2_Superclass"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_cast(*args)

class itkBoundedReciprocalImageFilterIUL3IUL3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUL3):
    """Proxy of C++ itkBoundedReciprocalImageFilterIUL3IUL3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL3IUL3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::BoundedReciprocal<(unsigned long,unsigned long)>
        GetFunctor(self) -> itk::Functor::BoundedReciprocal<(unsigned long,unsigned long)>
        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::BoundedReciprocal<(unsigned long,unsigned long)> functor)"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIUL3IUL3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIUL3IUL3_Superclass"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBoundedReciprocalImageFilterIUL3IUL3_Superclass"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIUL3IUL3_Superclass
        
        Create a new object of the class itkBoundedReciprocalImageFilterIUL3IUL3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBoundedReciprocalImageFilterIUL3IUL3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBoundedReciprocalImageFilterIUL3IUL3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundedReciprocalImageFilterIUL3IUL3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundedReciprocalImageFilterIUL3IUL3_Superclass.GetFunctor = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_GetFunctor,None,itkBoundedReciprocalImageFilterIUL3IUL3_Superclass)
itkBoundedReciprocalImageFilterIUL3IUL3_Superclass.SetFunctor = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_SetFunctor,None,itkBoundedReciprocalImageFilterIUL3IUL3_Superclass)
itkBoundedReciprocalImageFilterIUL3IUL3_Superclass.GetPointer = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_GetPointer,None,itkBoundedReciprocalImageFilterIUL3IUL3_Superclass)
itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_swigregister = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_swigregister
itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_swigregister(itkBoundedReciprocalImageFilterIUL3IUL3_Superclass)

def itkBoundedReciprocalImageFilterIUL3IUL3_Superclass___New_orig__():
  """itkBoundedReciprocalImageFilterIUL3IUL3_Superclass___New_orig__()"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL3IUL3_Superclass___New_orig__()

def itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_cast(*args):
  """itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIUL3IUL3_Superclass"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_cast(*args)

class itkBoundedReciprocalImageFilterIUS2IUS2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    """Proxy of C++ itkBoundedReciprocalImageFilterIUS2IUS2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::BoundedReciprocal<(unsigned short,unsigned short)>
        GetFunctor(self) -> itk::Functor::BoundedReciprocal<(unsigned short,unsigned short)>
        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::BoundedReciprocal<(unsigned short,unsigned short)> functor)"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIUS2IUS2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIUS2IUS2_Superclass"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBoundedReciprocalImageFilterIUS2IUS2_Superclass"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIUS2IUS2_Superclass
        
        Create a new object of the class itkBoundedReciprocalImageFilterIUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBoundedReciprocalImageFilterIUS2IUS2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBoundedReciprocalImageFilterIUS2IUS2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundedReciprocalImageFilterIUS2IUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundedReciprocalImageFilterIUS2IUS2_Superclass.GetFunctor = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_GetFunctor,None,itkBoundedReciprocalImageFilterIUS2IUS2_Superclass)
itkBoundedReciprocalImageFilterIUS2IUS2_Superclass.SetFunctor = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_SetFunctor,None,itkBoundedReciprocalImageFilterIUS2IUS2_Superclass)
itkBoundedReciprocalImageFilterIUS2IUS2_Superclass.GetPointer = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_GetPointer,None,itkBoundedReciprocalImageFilterIUS2IUS2_Superclass)
itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_swigregister = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_swigregister
itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_swigregister(itkBoundedReciprocalImageFilterIUS2IUS2_Superclass)

def itkBoundedReciprocalImageFilterIUS2IUS2_Superclass___New_orig__():
  """itkBoundedReciprocalImageFilterIUS2IUS2_Superclass___New_orig__()"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_Superclass___New_orig__()

def itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_cast(*args):
  """itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIUS2IUS2_Superclass"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_cast(*args)

class itkBoundedReciprocalImageFilterIUS3IUS3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    """Proxy of C++ itkBoundedReciprocalImageFilterIUS3IUS3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::BoundedReciprocal<(unsigned short,unsigned short)>
        GetFunctor(self) -> itk::Functor::BoundedReciprocal<(unsigned short,unsigned short)>
        """
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::BoundedReciprocal<(unsigned short,unsigned short)> functor)"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIUS3IUS3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIUS3IUS3_Superclass"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBoundedReciprocalImageFilterIUS3IUS3_Superclass"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIUS3IUS3_Superclass
        
        Create a new object of the class itkBoundedReciprocalImageFilterIUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBoundedReciprocalImageFilterIUS3IUS3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBoundedReciprocalImageFilterIUS3IUS3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundedReciprocalImageFilterIUS3IUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundedReciprocalImageFilterIUS3IUS3_Superclass.GetFunctor = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_GetFunctor,None,itkBoundedReciprocalImageFilterIUS3IUS3_Superclass)
itkBoundedReciprocalImageFilterIUS3IUS3_Superclass.SetFunctor = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_SetFunctor,None,itkBoundedReciprocalImageFilterIUS3IUS3_Superclass)
itkBoundedReciprocalImageFilterIUS3IUS3_Superclass.GetPointer = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_GetPointer,None,itkBoundedReciprocalImageFilterIUS3IUS3_Superclass)
itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_swigregister = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_swigregister
itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_swigregister(itkBoundedReciprocalImageFilterIUS3IUS3_Superclass)

def itkBoundedReciprocalImageFilterIUS3IUS3_Superclass___New_orig__():
  """itkBoundedReciprocalImageFilterIUS3IUS3_Superclass___New_orig__()"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_Superclass___New_orig__()

def itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_cast(*args):
  """itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIUS3IUS3_Superclass"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_cast(*args)

class itkBoundedReciprocalImageFilterID2ID2(itkBoundedReciprocalImageFilterID2ID2_Superclass):
    """Proxy of C++ itkBoundedReciprocalImageFilterID2ID2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_DoubleConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterID2ID2
    def cast(*args):
        """cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterID2ID2"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBoundedReciprocalImageFilterID2ID2"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterID2ID2
        
        Create a new object of the class itkBoundedReciprocalImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBoundedReciprocalImageFilterID2ID2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBoundedReciprocalImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundedReciprocalImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundedReciprocalImageFilterID2ID2.GetPointer = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_GetPointer,None,itkBoundedReciprocalImageFilterID2ID2)
itkBoundedReciprocalImageFilterID2ID2_swigregister = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_swigregister
itkBoundedReciprocalImageFilterID2ID2_swigregister(itkBoundedReciprocalImageFilterID2ID2)

def itkBoundedReciprocalImageFilterID2ID2___New_orig__():
  """itkBoundedReciprocalImageFilterID2ID2___New_orig__()"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2___New_orig__()

def itkBoundedReciprocalImageFilterID2ID2_cast(*args):
  """itkBoundedReciprocalImageFilterID2ID2_cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterID2ID2"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID2ID2_cast(*args)

class itkBoundedReciprocalImageFilterID3ID3(itkBoundedReciprocalImageFilterID3ID3_Superclass):
    """Proxy of C++ itkBoundedReciprocalImageFilterID3ID3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_DoubleConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterID3ID3
    def cast(*args):
        """cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterID3ID3"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBoundedReciprocalImageFilterID3ID3"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterID3ID3
        
        Create a new object of the class itkBoundedReciprocalImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBoundedReciprocalImageFilterID3ID3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBoundedReciprocalImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundedReciprocalImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundedReciprocalImageFilterID3ID3.GetPointer = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_GetPointer,None,itkBoundedReciprocalImageFilterID3ID3)
itkBoundedReciprocalImageFilterID3ID3_swigregister = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_swigregister
itkBoundedReciprocalImageFilterID3ID3_swigregister(itkBoundedReciprocalImageFilterID3ID3)

def itkBoundedReciprocalImageFilterID3ID3___New_orig__():
  """itkBoundedReciprocalImageFilterID3ID3___New_orig__()"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3___New_orig__()

def itkBoundedReciprocalImageFilterID3ID3_cast(*args):
  """itkBoundedReciprocalImageFilterID3ID3_cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterID3ID3"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterID3ID3_cast(*args)

class itkBoundedReciprocalImageFilterIF2IF2(itkBoundedReciprocalImageFilterIF2IF2_Superclass):
    """Proxy of C++ itkBoundedReciprocalImageFilterIF2IF2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIF2IF2
    def cast(*args):
        """cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIF2IF2"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBoundedReciprocalImageFilterIF2IF2"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIF2IF2
        
        Create a new object of the class itkBoundedReciprocalImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBoundedReciprocalImageFilterIF2IF2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBoundedReciprocalImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundedReciprocalImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundedReciprocalImageFilterIF2IF2.GetPointer = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_GetPointer,None,itkBoundedReciprocalImageFilterIF2IF2)
itkBoundedReciprocalImageFilterIF2IF2_swigregister = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_swigregister
itkBoundedReciprocalImageFilterIF2IF2_swigregister(itkBoundedReciprocalImageFilterIF2IF2)

def itkBoundedReciprocalImageFilterIF2IF2___New_orig__():
  """itkBoundedReciprocalImageFilterIF2IF2___New_orig__()"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2___New_orig__()

def itkBoundedReciprocalImageFilterIF2IF2_cast(*args):
  """itkBoundedReciprocalImageFilterIF2IF2_cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIF2IF2"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF2IF2_cast(*args)

class itkBoundedReciprocalImageFilterIF3IF3(itkBoundedReciprocalImageFilterIF3IF3_Superclass):
    """Proxy of C++ itkBoundedReciprocalImageFilterIF3IF3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIF3IF3
    def cast(*args):
        """cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIF3IF3"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBoundedReciprocalImageFilterIF3IF3"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIF3IF3
        
        Create a new object of the class itkBoundedReciprocalImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBoundedReciprocalImageFilterIF3IF3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBoundedReciprocalImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundedReciprocalImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundedReciprocalImageFilterIF3IF3.GetPointer = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_GetPointer,None,itkBoundedReciprocalImageFilterIF3IF3)
itkBoundedReciprocalImageFilterIF3IF3_swigregister = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_swigregister
itkBoundedReciprocalImageFilterIF3IF3_swigregister(itkBoundedReciprocalImageFilterIF3IF3)

def itkBoundedReciprocalImageFilterIF3IF3___New_orig__():
  """itkBoundedReciprocalImageFilterIF3IF3___New_orig__()"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3___New_orig__()

def itkBoundedReciprocalImageFilterIF3IF3_cast(*args):
  """itkBoundedReciprocalImageFilterIF3IF3_cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIF3IF3"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIF3IF3_cast(*args)

class itkBoundedReciprocalImageFilterIUC2IUC2(itkBoundedReciprocalImageFilterIUC2IUC2_Superclass):
    """Proxy of C++ itkBoundedReciprocalImageFilterIUC2IUC2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_DoubleConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIUC2IUC2
    def cast(*args):
        """cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIUC2IUC2"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBoundedReciprocalImageFilterIUC2IUC2"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIUC2IUC2
        
        Create a new object of the class itkBoundedReciprocalImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBoundedReciprocalImageFilterIUC2IUC2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBoundedReciprocalImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundedReciprocalImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundedReciprocalImageFilterIUC2IUC2.GetPointer = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_GetPointer,None,itkBoundedReciprocalImageFilterIUC2IUC2)
itkBoundedReciprocalImageFilterIUC2IUC2_swigregister = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_swigregister
itkBoundedReciprocalImageFilterIUC2IUC2_swigregister(itkBoundedReciprocalImageFilterIUC2IUC2)

def itkBoundedReciprocalImageFilterIUC2IUC2___New_orig__():
  """itkBoundedReciprocalImageFilterIUC2IUC2___New_orig__()"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2___New_orig__()

def itkBoundedReciprocalImageFilterIUC2IUC2_cast(*args):
  """itkBoundedReciprocalImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIUC2IUC2"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC2IUC2_cast(*args)

class itkBoundedReciprocalImageFilterIUC3IUC3(itkBoundedReciprocalImageFilterIUC3IUC3_Superclass):
    """Proxy of C++ itkBoundedReciprocalImageFilterIUC3IUC3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_DoubleConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIUC3IUC3
    def cast(*args):
        """cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIUC3IUC3"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBoundedReciprocalImageFilterIUC3IUC3"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIUC3IUC3
        
        Create a new object of the class itkBoundedReciprocalImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBoundedReciprocalImageFilterIUC3IUC3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBoundedReciprocalImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundedReciprocalImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundedReciprocalImageFilterIUC3IUC3.GetPointer = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_GetPointer,None,itkBoundedReciprocalImageFilterIUC3IUC3)
itkBoundedReciprocalImageFilterIUC3IUC3_swigregister = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_swigregister
itkBoundedReciprocalImageFilterIUC3IUC3_swigregister(itkBoundedReciprocalImageFilterIUC3IUC3)

def itkBoundedReciprocalImageFilterIUC3IUC3___New_orig__():
  """itkBoundedReciprocalImageFilterIUC3IUC3___New_orig__()"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3___New_orig__()

def itkBoundedReciprocalImageFilterIUC3IUC3_cast(*args):
  """itkBoundedReciprocalImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIUC3IUC3"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUC3IUC3_cast(*args)

class itkBoundedReciprocalImageFilterIUL2IUL2(itkBoundedReciprocalImageFilterIUL2IUL2_Superclass):
    """Proxy of C++ itkBoundedReciprocalImageFilterIUL2IUL2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL2IUL2_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL2IUL2_DoubleConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL2IUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIUL2IUL2
    def cast(*args):
        """cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIUL2IUL2"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL2IUL2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBoundedReciprocalImageFilterIUL2IUL2"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL2IUL2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIUL2IUL2
        
        Create a new object of the class itkBoundedReciprocalImageFilterIUL2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBoundedReciprocalImageFilterIUL2IUL2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBoundedReciprocalImageFilterIUL2IUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundedReciprocalImageFilterIUL2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundedReciprocalImageFilterIUL2IUL2.GetPointer = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL2IUL2_GetPointer,None,itkBoundedReciprocalImageFilterIUL2IUL2)
itkBoundedReciprocalImageFilterIUL2IUL2_swigregister = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL2IUL2_swigregister
itkBoundedReciprocalImageFilterIUL2IUL2_swigregister(itkBoundedReciprocalImageFilterIUL2IUL2)

def itkBoundedReciprocalImageFilterIUL2IUL2___New_orig__():
  """itkBoundedReciprocalImageFilterIUL2IUL2___New_orig__()"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL2IUL2___New_orig__()

def itkBoundedReciprocalImageFilterIUL2IUL2_cast(*args):
  """itkBoundedReciprocalImageFilterIUL2IUL2_cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIUL2IUL2"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL2IUL2_cast(*args)

class itkBoundedReciprocalImageFilterIUL3IUL3(itkBoundedReciprocalImageFilterIUL3IUL3_Superclass):
    """Proxy of C++ itkBoundedReciprocalImageFilterIUL3IUL3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL3IUL3_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL3IUL3_DoubleConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL3IUL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIUL3IUL3
    def cast(*args):
        """cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIUL3IUL3"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL3IUL3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBoundedReciprocalImageFilterIUL3IUL3"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL3IUL3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIUL3IUL3
        
        Create a new object of the class itkBoundedReciprocalImageFilterIUL3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBoundedReciprocalImageFilterIUL3IUL3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBoundedReciprocalImageFilterIUL3IUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundedReciprocalImageFilterIUL3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundedReciprocalImageFilterIUL3IUL3.GetPointer = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL3IUL3_GetPointer,None,itkBoundedReciprocalImageFilterIUL3IUL3)
itkBoundedReciprocalImageFilterIUL3IUL3_swigregister = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL3IUL3_swigregister
itkBoundedReciprocalImageFilterIUL3IUL3_swigregister(itkBoundedReciprocalImageFilterIUL3IUL3)

def itkBoundedReciprocalImageFilterIUL3IUL3___New_orig__():
  """itkBoundedReciprocalImageFilterIUL3IUL3___New_orig__()"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL3IUL3___New_orig__()

def itkBoundedReciprocalImageFilterIUL3IUL3_cast(*args):
  """itkBoundedReciprocalImageFilterIUL3IUL3_cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIUL3IUL3"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUL3IUL3_cast(*args)

class itkBoundedReciprocalImageFilterIUS2IUS2(itkBoundedReciprocalImageFilterIUS2IUS2_Superclass):
    """Proxy of C++ itkBoundedReciprocalImageFilterIUS2IUS2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_DoubleConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIUS2IUS2
    def cast(*args):
        """cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIUS2IUS2"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBoundedReciprocalImageFilterIUS2IUS2"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIUS2IUS2
        
        Create a new object of the class itkBoundedReciprocalImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBoundedReciprocalImageFilterIUS2IUS2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBoundedReciprocalImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundedReciprocalImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundedReciprocalImageFilterIUS2IUS2.GetPointer = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_GetPointer,None,itkBoundedReciprocalImageFilterIUS2IUS2)
itkBoundedReciprocalImageFilterIUS2IUS2_swigregister = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_swigregister
itkBoundedReciprocalImageFilterIUS2IUS2_swigregister(itkBoundedReciprocalImageFilterIUS2IUS2)

def itkBoundedReciprocalImageFilterIUS2IUS2___New_orig__():
  """itkBoundedReciprocalImageFilterIUS2IUS2___New_orig__()"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2___New_orig__()

def itkBoundedReciprocalImageFilterIUS2IUS2_cast(*args):
  """itkBoundedReciprocalImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIUS2IUS2"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS2IUS2_cast(*args)

class itkBoundedReciprocalImageFilterIUS3IUS3(itkBoundedReciprocalImageFilterIUS3IUS3_Superclass):
    """Proxy of C++ itkBoundedReciprocalImageFilterIUS3IUS3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToDoubleCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_DoubleConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkBoundedReciprocalImageFilterPython.delete_itkBoundedReciprocalImageFilterIUS3IUS3
    def cast(*args):
        """cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIUS3IUS3"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBoundedReciprocalImageFilterIUS3IUS3"""
        return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBoundedReciprocalImageFilterIUS3IUS3
        
        Create a new object of the class itkBoundedReciprocalImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBoundedReciprocalImageFilterIUS3IUS3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBoundedReciprocalImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBoundedReciprocalImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBoundedReciprocalImageFilterIUS3IUS3.GetPointer = new_instancemethod(_itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_GetPointer,None,itkBoundedReciprocalImageFilterIUS3IUS3)
itkBoundedReciprocalImageFilterIUS3IUS3_swigregister = _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_swigregister
itkBoundedReciprocalImageFilterIUS3IUS3_swigregister(itkBoundedReciprocalImageFilterIUS3IUS3)

def itkBoundedReciprocalImageFilterIUS3IUS3___New_orig__():
  """itkBoundedReciprocalImageFilterIUS3IUS3___New_orig__()"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3___New_orig__()

def itkBoundedReciprocalImageFilterIUS3IUS3_cast(*args):
  """itkBoundedReciprocalImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkBoundedReciprocalImageFilterIUS3IUS3"""
  return _itkBoundedReciprocalImageFilterPython.itkBoundedReciprocalImageFilterIUS3IUS3_cast(*args)



