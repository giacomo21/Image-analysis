// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkCurvatureFlowImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkCurvatureFlowImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkCurvatureFlowImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkCurvatureFlowImageFilterJava
#endif
#ifdef SWIGLUA
%module itkCurvatureFlowImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkCurvatureFlowImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkCurvatureFlowImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkCurvatureFlowImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkCurvatureFlowImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkCurvatureFlowImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkCurvatureFlowImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkCurvatureFlowImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkCurvatureFlowImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkCurvatureFlowImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkCurvatureFlowImageFilterPython
#endif
#ifdef SWIGR
%module itkCurvatureFlowImageFilterR
#endif
#ifdef SWIGRUBY
%module itkCurvatureFlowImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkCurvatureFlowImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkCurvatureFlowImageFilterTcl
#endif
#ifdef SWIGXML
%module itkCurvatureFlowImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Denoising.includes"
%}


%{
%}




%import wrap_itkDenseFiniteDifferenceImageFilter.i
%import wrap_ITKCommonBase.i


%include itk.i
%include wrap_itkCurvatureFlowImageFilter_ext.i


 class itkCurvatureFlowImageFilterID2ID2 : public itkDenseFiniteDifferenceImageFilterID2ID2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  OutputConvertibleToDoubleCheck = 1 };
     enum  {  OutputDivisionOperatorsCheck = 1 };
     enum  {  DoubleOutputMultiplyOperatorCheck = 1 };
     enum  {  IntOutputMultiplyOperatorCheck = 1 };
     enum  {  OutputLessThanDoubleCheck = 1 };
     enum  {  OutputDoubleAdditiveOperatorsCheck = 1 };
     static itkCurvatureFlowImageFilterID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetTimeStep(double const _arg);
     virtual double GetTimeStep() const;
   private:
     itkCurvatureFlowImageFilterID2ID2(itkCurvatureFlowImageFilterID2ID2 const & arg0);
     void operator=(itkCurvatureFlowImageFilterID2ID2 const & arg0);
   protected:
     itkCurvatureFlowImageFilterID2ID2();
     ~itkCurvatureFlowImageFilterID2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual bool Halt();
     virtual void InitializeIteration();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * arg0);
     virtual void GenerateInputRequestedRegion();
 };


 class itkCurvatureFlowImageFilterID2ID2_Pointer {
   public:
     itkCurvatureFlowImageFilterID2ID2_Pointer();
     itkCurvatureFlowImageFilterID2ID2_Pointer(itkCurvatureFlowImageFilterID2ID2_Pointer const & p);
     itkCurvatureFlowImageFilterID2ID2_Pointer(itkCurvatureFlowImageFilterID2ID2 * p);
     ~itkCurvatureFlowImageFilterID2ID2_Pointer();
     itkCurvatureFlowImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkCurvatureFlowImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkCurvatureFlowImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkCurvatureFlowImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkCurvatureFlowImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkCurvatureFlowImageFilterID2ID2_Pointer const & r) const;
     itkCurvatureFlowImageFilterID2ID2_Pointer & operator=(itkCurvatureFlowImageFilterID2ID2_Pointer const & r);
     itkCurvatureFlowImageFilterID2ID2_Pointer & operator=(itkCurvatureFlowImageFilterID2ID2 * r);
     itkCurvatureFlowImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkCurvatureFlowImageFilterID3ID3 : public itkDenseFiniteDifferenceImageFilterID3ID3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  OutputConvertibleToDoubleCheck = 1 };
     enum  {  OutputDivisionOperatorsCheck = 1 };
     enum  {  DoubleOutputMultiplyOperatorCheck = 1 };
     enum  {  IntOutputMultiplyOperatorCheck = 1 };
     enum  {  OutputLessThanDoubleCheck = 1 };
     enum  {  OutputDoubleAdditiveOperatorsCheck = 1 };
     static itkCurvatureFlowImageFilterID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetTimeStep(double const _arg);
     virtual double GetTimeStep() const;
   private:
     itkCurvatureFlowImageFilterID3ID3(itkCurvatureFlowImageFilterID3ID3 const & arg0);
     void operator=(itkCurvatureFlowImageFilterID3ID3 const & arg0);
   protected:
     itkCurvatureFlowImageFilterID3ID3();
     ~itkCurvatureFlowImageFilterID3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual bool Halt();
     virtual void InitializeIteration();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * arg0);
     virtual void GenerateInputRequestedRegion();
 };


 class itkCurvatureFlowImageFilterID3ID3_Pointer {
   public:
     itkCurvatureFlowImageFilterID3ID3_Pointer();
     itkCurvatureFlowImageFilterID3ID3_Pointer(itkCurvatureFlowImageFilterID3ID3_Pointer const & p);
     itkCurvatureFlowImageFilterID3ID3_Pointer(itkCurvatureFlowImageFilterID3ID3 * p);
     ~itkCurvatureFlowImageFilterID3ID3_Pointer();
     itkCurvatureFlowImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkCurvatureFlowImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkCurvatureFlowImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkCurvatureFlowImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkCurvatureFlowImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkCurvatureFlowImageFilterID3ID3_Pointer const & r) const;
     itkCurvatureFlowImageFilterID3ID3_Pointer & operator=(itkCurvatureFlowImageFilterID3ID3_Pointer const & r);
     itkCurvatureFlowImageFilterID3ID3_Pointer & operator=(itkCurvatureFlowImageFilterID3ID3 * r);
     itkCurvatureFlowImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkCurvatureFlowImageFilterIF2IF2 : public itkDenseFiniteDifferenceImageFilterIF2IF2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  OutputConvertibleToDoubleCheck = 1 };
     enum  {  OutputDivisionOperatorsCheck = 1 };
     enum  {  DoubleOutputMultiplyOperatorCheck = 1 };
     enum  {  IntOutputMultiplyOperatorCheck = 1 };
     enum  {  OutputLessThanDoubleCheck = 1 };
     enum  {  OutputDoubleAdditiveOperatorsCheck = 1 };
     static itkCurvatureFlowImageFilterIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetTimeStep(double const _arg);
     virtual double GetTimeStep() const;
   private:
     itkCurvatureFlowImageFilterIF2IF2(itkCurvatureFlowImageFilterIF2IF2 const & arg0);
     void operator=(itkCurvatureFlowImageFilterIF2IF2 const & arg0);
   protected:
     itkCurvatureFlowImageFilterIF2IF2();
     ~itkCurvatureFlowImageFilterIF2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual bool Halt();
     virtual void InitializeIteration();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * arg0);
     virtual void GenerateInputRequestedRegion();
 };


 class itkCurvatureFlowImageFilterIF2IF2_Pointer {
   public:
     itkCurvatureFlowImageFilterIF2IF2_Pointer();
     itkCurvatureFlowImageFilterIF2IF2_Pointer(itkCurvatureFlowImageFilterIF2IF2_Pointer const & p);
     itkCurvatureFlowImageFilterIF2IF2_Pointer(itkCurvatureFlowImageFilterIF2IF2 * p);
     ~itkCurvatureFlowImageFilterIF2IF2_Pointer();
     itkCurvatureFlowImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkCurvatureFlowImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkCurvatureFlowImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkCurvatureFlowImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkCurvatureFlowImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkCurvatureFlowImageFilterIF2IF2_Pointer const & r) const;
     itkCurvatureFlowImageFilterIF2IF2_Pointer & operator=(itkCurvatureFlowImageFilterIF2IF2_Pointer const & r);
     itkCurvatureFlowImageFilterIF2IF2_Pointer & operator=(itkCurvatureFlowImageFilterIF2IF2 * r);
     itkCurvatureFlowImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkCurvatureFlowImageFilterIF3IF3 : public itkDenseFiniteDifferenceImageFilterIF3IF3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  OutputConvertibleToDoubleCheck = 1 };
     enum  {  OutputDivisionOperatorsCheck = 1 };
     enum  {  DoubleOutputMultiplyOperatorCheck = 1 };
     enum  {  IntOutputMultiplyOperatorCheck = 1 };
     enum  {  OutputLessThanDoubleCheck = 1 };
     enum  {  OutputDoubleAdditiveOperatorsCheck = 1 };
     static itkCurvatureFlowImageFilterIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetTimeStep(double const _arg);
     virtual double GetTimeStep() const;
   private:
     itkCurvatureFlowImageFilterIF3IF3(itkCurvatureFlowImageFilterIF3IF3 const & arg0);
     void operator=(itkCurvatureFlowImageFilterIF3IF3 const & arg0);
   protected:
     itkCurvatureFlowImageFilterIF3IF3();
     ~itkCurvatureFlowImageFilterIF3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual bool Halt();
     virtual void InitializeIteration();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * arg0);
     virtual void GenerateInputRequestedRegion();
 };


 class itkCurvatureFlowImageFilterIF3IF3_Pointer {
   public:
     itkCurvatureFlowImageFilterIF3IF3_Pointer();
     itkCurvatureFlowImageFilterIF3IF3_Pointer(itkCurvatureFlowImageFilterIF3IF3_Pointer const & p);
     itkCurvatureFlowImageFilterIF3IF3_Pointer(itkCurvatureFlowImageFilterIF3IF3 * p);
     ~itkCurvatureFlowImageFilterIF3IF3_Pointer();
     itkCurvatureFlowImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkCurvatureFlowImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkCurvatureFlowImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkCurvatureFlowImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkCurvatureFlowImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkCurvatureFlowImageFilterIF3IF3_Pointer const & r) const;
     itkCurvatureFlowImageFilterIF3IF3_Pointer & operator=(itkCurvatureFlowImageFilterIF3IF3_Pointer const & r);
     itkCurvatureFlowImageFilterIF3IF3_Pointer & operator=(itkCurvatureFlowImageFilterIF3IF3 * r);
     itkCurvatureFlowImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


