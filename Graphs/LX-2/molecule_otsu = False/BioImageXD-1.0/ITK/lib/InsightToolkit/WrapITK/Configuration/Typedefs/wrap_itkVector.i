// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkVectorChicken
#endif
#ifdef SWIGCSHARP
%module itkVectorCsharp
#endif
#ifdef SWIGGUILE
%module itkVectorGuile
#endif
#ifdef SWIGJAVA
%module itkVectorJava
#endif
#ifdef SWIGLUA
%module itkVectorLua
#endif
#ifdef SWIGMODULA3
%module itkVectorModula3
#endif
#ifdef SWIGMZSCHEME
%module itkVectorMzscheme
#endif
#ifdef SWIGOCAML
%module itkVectorOcaml
#endif
#ifdef SWIGPERL
%module itkVectorPerl
#endif
#ifdef SWIGPERL5
%module itkVectorPerl5
#endif
#ifdef SWIGPHP
%module itkVectorPhp
#endif
#ifdef SWIGPHP4
%module itkVectorPhp4
#endif
#ifdef SWIGPHP5
%module itkVectorPhp5
#endif
#ifdef SWIGPIKE
%module itkVectorPike
#endif
#ifdef SWIGPYTHON
%module itkVectorPython
#endif
#ifdef SWIGR
%module itkVectorR
#endif
#ifdef SWIGRUBY
%module itkVectorRuby
#endif
#ifdef SWIGSEXP
%module itkVectorSexp
#endif
#ifdef SWIGTCL
%module itkVectorTcl
#endif
#ifdef SWIGXML
%module itkVectorXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
%}


%{
%}




%import wrap_itkFixedArray.i
%import wrap_vnl_vector.i
%import wrap_vnl_vector_ref.i


%include itk.i
%include wrap_itkVector_ext.i


 class itkVectorD1 : public itkFixedArrayD1 {
   public:
     enum  {  Dimension = 1 };
     ~itkVectorD1();
     itkVectorD1 & operator=(itkVectorD1 const & arg0);
     itkVectorD1(itkVectorD1 const & arg0);
     static unsigned int GetVectorDimension();
     void SetVnlVector(vnl_vectorD const & arg0);
     vnl_vector_refD GetVnlVector();
     vnl_vectorD GetVnlVector() const;
     void Set_vnl_vector(vnl_vectorD const & arg0);
     vnl_vector_refD Get_vnl_vector();
     vnl_vectorD Get_vnl_vector() const;
     itkVectorD1();
     itkVectorD1(double const & r);
     itkVectorD1(double const * r);
     itkVectorD1 & operator=(double const * r);
     itkVectorD1 const & operator+=(itkVectorD1 const & vec);
     itkVectorD1 const & operator-=(itkVectorD1 const & vec);
     itkVectorD1 operator-() const;
     itkVectorD1 operator+(itkVectorD1 const & vec) const;
     itkVectorD1 operator-(itkVectorD1 const & vec) const;
     double operator*(itkVectorD1 const & vec) const;
     itkVectorD1 operator*(double const & value) const;
     bool operator==(itkVectorD1 const & v) const;
     bool operator!=(itkVectorD1 const & v) const;
     double GetNorm() const;
     double GetSquaredNorm() const;
     static unsigned int GetNumberOfComponents();
     void Normalize();
     void SetNthComponent(int c, double const & v);
   private:
   protected:
 };


 class itkVectorD2 : public itkFixedArrayD2 {
   public:
     enum  {  Dimension = 2 };
     ~itkVectorD2();
     itkVectorD2 & operator=(itkVectorD2 const & arg0);
     itkVectorD2(itkVectorD2 const & arg0);
     static unsigned int GetVectorDimension();
     void SetVnlVector(vnl_vectorD const & arg0);
     vnl_vector_refD GetVnlVector();
     vnl_vectorD GetVnlVector() const;
     void Set_vnl_vector(vnl_vectorD const & arg0);
     vnl_vector_refD Get_vnl_vector();
     vnl_vectorD Get_vnl_vector() const;
     itkVectorD2();
     itkVectorD2(double const & r);
     itkVectorD2(double const * r);
     itkVectorD2 & operator=(double const * r);
     itkVectorD2 const & operator+=(itkVectorD2 const & vec);
     itkVectorD2 const & operator-=(itkVectorD2 const & vec);
     itkVectorD2 operator-() const;
     itkVectorD2 operator+(itkVectorD2 const & vec) const;
     itkVectorD2 operator-(itkVectorD2 const & vec) const;
     double operator*(itkVectorD2 const & vec) const;
     itkVectorD2 operator*(double const & value) const;
     bool operator==(itkVectorD2 const & v) const;
     bool operator!=(itkVectorD2 const & v) const;
     double GetNorm() const;
     double GetSquaredNorm() const;
     static unsigned int GetNumberOfComponents();
     void Normalize();
     void SetNthComponent(int c, double const & v);
   private:
   protected:
 };


 class itkVectorD3 : public itkFixedArrayD3 {
   public:
     enum  {  Dimension = 3 };
     ~itkVectorD3();
     itkVectorD3 & operator=(itkVectorD3 const & arg0);
     itkVectorD3(itkVectorD3 const & arg0);
     static unsigned int GetVectorDimension();
     void SetVnlVector(vnl_vectorD const & arg0);
     vnl_vector_refD GetVnlVector();
     vnl_vectorD GetVnlVector() const;
     void Set_vnl_vector(vnl_vectorD const & arg0);
     vnl_vector_refD Get_vnl_vector();
     vnl_vectorD Get_vnl_vector() const;
     itkVectorD3();
     itkVectorD3(double const & r);
     itkVectorD3(double const * r);
     itkVectorD3 & operator=(double const * r);
     itkVectorD3 const & operator+=(itkVectorD3 const & vec);
     itkVectorD3 const & operator-=(itkVectorD3 const & vec);
     itkVectorD3 operator-() const;
     itkVectorD3 operator+(itkVectorD3 const & vec) const;
     itkVectorD3 operator-(itkVectorD3 const & vec) const;
     double operator*(itkVectorD3 const & vec) const;
     itkVectorD3 operator*(double const & value) const;
     bool operator==(itkVectorD3 const & v) const;
     bool operator!=(itkVectorD3 const & v) const;
     double GetNorm() const;
     double GetSquaredNorm() const;
     static unsigned int GetNumberOfComponents();
     void Normalize();
     void SetNthComponent(int c, double const & v);
   private:
   protected:
 };


 class itkVectorD6 : public itkFixedArrayD6 {
   public:
     enum  {  Dimension = 6 };
     ~itkVectorD6();
     itkVectorD6 & operator=(itkVectorD6 const & arg0);
     itkVectorD6(itkVectorD6 const & arg0);
     static unsigned int GetVectorDimension();
     void SetVnlVector(vnl_vectorD const & arg0);
     vnl_vector_refD GetVnlVector();
     vnl_vectorD GetVnlVector() const;
     void Set_vnl_vector(vnl_vectorD const & arg0);
     vnl_vector_refD Get_vnl_vector();
     vnl_vectorD Get_vnl_vector() const;
     itkVectorD6();
     itkVectorD6(double const & r);
     itkVectorD6(double const * r);
     itkVectorD6 & operator=(double const * r);
     itkVectorD6 const & operator+=(itkVectorD6 const & vec);
     itkVectorD6 const & operator-=(itkVectorD6 const & vec);
     itkVectorD6 operator-() const;
     itkVectorD6 operator+(itkVectorD6 const & vec) const;
     itkVectorD6 operator-(itkVectorD6 const & vec) const;
     double operator*(itkVectorD6 const & vec) const;
     itkVectorD6 operator*(double const & value) const;
     bool operator==(itkVectorD6 const & v) const;
     bool operator!=(itkVectorD6 const & v) const;
     double GetNorm() const;
     double GetSquaredNorm() const;
     static unsigned int GetNumberOfComponents();
     void Normalize();
     void SetNthComponent(int c, double const & v);
   private:
   protected:
 };


 class itkVectorF1 : public itkFixedArrayF1 {
   public:
     enum  {  Dimension = 1 };
     ~itkVectorF1();
     itkVectorF1 & operator=(itkVectorF1 const & arg0);
     itkVectorF1(itkVectorF1 const & arg0);
     static unsigned int GetVectorDimension();
     void SetVnlVector(vnl_vectorF const & arg0);
     vnl_vector_refF GetVnlVector();
     vnl_vectorF GetVnlVector() const;
     void Set_vnl_vector(vnl_vectorF const & arg0);
     vnl_vector_refF Get_vnl_vector();
     vnl_vectorF Get_vnl_vector() const;
     itkVectorF1();
     itkVectorF1(float const & r);
     itkVectorF1(float const * r);
     itkVectorF1 & operator=(float const * r);
     itkVectorF1 const & operator+=(itkVectorF1 const & vec);
     itkVectorF1 const & operator-=(itkVectorF1 const & vec);
     itkVectorF1 operator-() const;
     itkVectorF1 operator+(itkVectorF1 const & vec) const;
     itkVectorF1 operator-(itkVectorF1 const & vec) const;
     float operator*(itkVectorF1 const & vec) const;
     itkVectorF1 operator*(float const & value) const;
     bool operator==(itkVectorF1 const & v) const;
     bool operator!=(itkVectorF1 const & v) const;
     double GetNorm() const;
     double GetSquaredNorm() const;
     static unsigned int GetNumberOfComponents();
     void Normalize();
     void SetNthComponent(int c, float const & v);
   private:
   protected:
 };


 class itkVectorF2 : public itkFixedArrayF2 {
   public:
     enum  {  Dimension = 2 };
     ~itkVectorF2();
     itkVectorF2 & operator=(itkVectorF2 const & arg0);
     itkVectorF2(itkVectorF2 const & arg0);
     static unsigned int GetVectorDimension();
     void SetVnlVector(vnl_vectorF const & arg0);
     vnl_vector_refF GetVnlVector();
     vnl_vectorF GetVnlVector() const;
     void Set_vnl_vector(vnl_vectorF const & arg0);
     vnl_vector_refF Get_vnl_vector();
     vnl_vectorF Get_vnl_vector() const;
     itkVectorF2();
     itkVectorF2(float const & r);
     itkVectorF2(float const * r);
     itkVectorF2 & operator=(float const * r);
     itkVectorF2 const & operator+=(itkVectorF2 const & vec);
     itkVectorF2 const & operator-=(itkVectorF2 const & vec);
     itkVectorF2 operator-() const;
     itkVectorF2 operator+(itkVectorF2 const & vec) const;
     itkVectorF2 operator-(itkVectorF2 const & vec) const;
     float operator*(itkVectorF2 const & vec) const;
     itkVectorF2 operator*(float const & value) const;
     bool operator==(itkVectorF2 const & v) const;
     bool operator!=(itkVectorF2 const & v) const;
     double GetNorm() const;
     double GetSquaredNorm() const;
     static unsigned int GetNumberOfComponents();
     void Normalize();
     void SetNthComponent(int c, float const & v);
   private:
   protected:
 };


 class itkVectorF3 : public itkFixedArrayF3 {
   public:
     enum  {  Dimension = 3 };
     ~itkVectorF3();
     itkVectorF3 & operator=(itkVectorF3 const & arg0);
     itkVectorF3(itkVectorF3 const & arg0);
     static unsigned int GetVectorDimension();
     void SetVnlVector(vnl_vectorF const & arg0);
     vnl_vector_refF GetVnlVector();
     vnl_vectorF GetVnlVector() const;
     void Set_vnl_vector(vnl_vectorF const & arg0);
     vnl_vector_refF Get_vnl_vector();
     vnl_vectorF Get_vnl_vector() const;
     itkVectorF3();
     itkVectorF3(float const & r);
     itkVectorF3(float const * r);
     itkVectorF3 & operator=(float const * r);
     itkVectorF3 const & operator+=(itkVectorF3 const & vec);
     itkVectorF3 const & operator-=(itkVectorF3 const & vec);
     itkVectorF3 operator-() const;
     itkVectorF3 operator+(itkVectorF3 const & vec) const;
     itkVectorF3 operator-(itkVectorF3 const & vec) const;
     float operator*(itkVectorF3 const & vec) const;
     itkVectorF3 operator*(float const & value) const;
     bool operator==(itkVectorF3 const & v) const;
     bool operator!=(itkVectorF3 const & v) const;
     double GetNorm() const;
     double GetSquaredNorm() const;
     static unsigned int GetNumberOfComponents();
     void Normalize();
     void SetNthComponent(int c, float const & v);
   private:
   protected:
 };


 class itkVectorF6 : public itkFixedArrayF6 {
   public:
     enum  {  Dimension = 6 };
     ~itkVectorF6();
     itkVectorF6 & operator=(itkVectorF6 const & arg0);
     itkVectorF6(itkVectorF6 const & arg0);
     static unsigned int GetVectorDimension();
     void SetVnlVector(vnl_vectorF const & arg0);
     vnl_vector_refF GetVnlVector();
     vnl_vectorF GetVnlVector() const;
     void Set_vnl_vector(vnl_vectorF const & arg0);
     vnl_vector_refF Get_vnl_vector();
     vnl_vectorF Get_vnl_vector() const;
     itkVectorF6();
     itkVectorF6(float const & r);
     itkVectorF6(float const * r);
     itkVectorF6 & operator=(float const * r);
     itkVectorF6 const & operator+=(itkVectorF6 const & vec);
     itkVectorF6 const & operator-=(itkVectorF6 const & vec);
     itkVectorF6 operator-() const;
     itkVectorF6 operator+(itkVectorF6 const & vec) const;
     itkVectorF6 operator-(itkVectorF6 const & vec) const;
     float operator*(itkVectorF6 const & vec) const;
     itkVectorF6 operator*(float const & value) const;
     bool operator==(itkVectorF6 const & v) const;
     bool operator!=(itkVectorF6 const & v) const;
     double GetNorm() const;
     double GetSquaredNorm() const;
     static unsigned int GetNumberOfComponents();
     void Normalize();
     void SetNthComponent(int c, float const & v);
   private:
   protected:
 };


 class itkVectorUC1 : public itkFixedArrayUC1 {
   public:
     enum  {  Dimension = 1 };
     ~itkVectorUC1();
     itkVectorUC1 & operator=(itkVectorUC1 const & arg0);
     itkVectorUC1(itkVectorUC1 const & arg0);
     static unsigned int GetVectorDimension();
     void SetVnlVector(vnl_vectorUC const & arg0);
     vnl_vector_refUC GetVnlVector();
     vnl_vectorUC GetVnlVector() const;
     void Set_vnl_vector(vnl_vectorUC const & arg0);
     vnl_vector_refUC Get_vnl_vector();
     vnl_vectorUC Get_vnl_vector() const;
     itkVectorUC1();
     itkVectorUC1(unsigned char const & r);
     itkVectorUC1(unsigned char const * r);
     itkVectorUC1 & operator=(unsigned char const * r);
     itkVectorUC1 const & operator+=(itkVectorUC1 const & vec);
     itkVectorUC1 const & operator-=(itkVectorUC1 const & vec);
     itkVectorUC1 operator-() const;
     itkVectorUC1 operator+(itkVectorUC1 const & vec) const;
     itkVectorUC1 operator-(itkVectorUC1 const & vec) const;
     unsigned char operator*(itkVectorUC1 const & vec) const;
     itkVectorUC1 operator*(unsigned char const & value) const;
     bool operator==(itkVectorUC1 const & v) const;
     bool operator!=(itkVectorUC1 const & v) const;
     double GetNorm() const;
     double GetSquaredNorm() const;
     static unsigned int GetNumberOfComponents();
     void Normalize();
     void SetNthComponent(int c, unsigned char const & v);
   private:
   protected:
 };


 class itkVectorUC2 : public itkFixedArrayUC2 {
   public:
     enum  {  Dimension = 2 };
     ~itkVectorUC2();
     itkVectorUC2 & operator=(itkVectorUC2 const & arg0);
     itkVectorUC2(itkVectorUC2 const & arg0);
     static unsigned int GetVectorDimension();
     void SetVnlVector(vnl_vectorUC const & arg0);
     vnl_vector_refUC GetVnlVector();
     vnl_vectorUC GetVnlVector() const;
     void Set_vnl_vector(vnl_vectorUC const & arg0);
     vnl_vector_refUC Get_vnl_vector();
     vnl_vectorUC Get_vnl_vector() const;
     itkVectorUC2();
     itkVectorUC2(unsigned char const & r);
     itkVectorUC2(unsigned char const * r);
     itkVectorUC2 & operator=(unsigned char const * r);
     itkVectorUC2 const & operator+=(itkVectorUC2 const & vec);
     itkVectorUC2 const & operator-=(itkVectorUC2 const & vec);
     itkVectorUC2 operator-() const;
     itkVectorUC2 operator+(itkVectorUC2 const & vec) const;
     itkVectorUC2 operator-(itkVectorUC2 const & vec) const;
     unsigned char operator*(itkVectorUC2 const & vec) const;
     itkVectorUC2 operator*(unsigned char const & value) const;
     bool operator==(itkVectorUC2 const & v) const;
     bool operator!=(itkVectorUC2 const & v) const;
     double GetNorm() const;
     double GetSquaredNorm() const;
     static unsigned int GetNumberOfComponents();
     void Normalize();
     void SetNthComponent(int c, unsigned char const & v);
   private:
   protected:
 };


 class itkVectorUC3 : public itkFixedArrayUC3 {
   public:
     enum  {  Dimension = 3 };
     ~itkVectorUC3();
     itkVectorUC3 & operator=(itkVectorUC3 const & arg0);
     itkVectorUC3(itkVectorUC3 const & arg0);
     static unsigned int GetVectorDimension();
     void SetVnlVector(vnl_vectorUC const & arg0);
     vnl_vector_refUC GetVnlVector();
     vnl_vectorUC GetVnlVector() const;
     void Set_vnl_vector(vnl_vectorUC const & arg0);
     vnl_vector_refUC Get_vnl_vector();
     vnl_vectorUC Get_vnl_vector() const;
     itkVectorUC3();
     itkVectorUC3(unsigned char const & r);
     itkVectorUC3(unsigned char const * r);
     itkVectorUC3 & operator=(unsigned char const * r);
     itkVectorUC3 const & operator+=(itkVectorUC3 const & vec);
     itkVectorUC3 const & operator-=(itkVectorUC3 const & vec);
     itkVectorUC3 operator-() const;
     itkVectorUC3 operator+(itkVectorUC3 const & vec) const;
     itkVectorUC3 operator-(itkVectorUC3 const & vec) const;
     unsigned char operator*(itkVectorUC3 const & vec) const;
     itkVectorUC3 operator*(unsigned char const & value) const;
     bool operator==(itkVectorUC3 const & v) const;
     bool operator!=(itkVectorUC3 const & v) const;
     double GetNorm() const;
     double GetSquaredNorm() const;
     static unsigned int GetNumberOfComponents();
     void Normalize();
     void SetNthComponent(int c, unsigned char const & v);
   private:
   protected:
 };


 class itkVectorUC6 : public itkFixedArrayUC6 {
   public:
     enum  {  Dimension = 6 };
     ~itkVectorUC6();
     itkVectorUC6 & operator=(itkVectorUC6 const & arg0);
     itkVectorUC6(itkVectorUC6 const & arg0);
     static unsigned int GetVectorDimension();
     void SetVnlVector(vnl_vectorUC const & arg0);
     vnl_vector_refUC GetVnlVector();
     vnl_vectorUC GetVnlVector() const;
     void Set_vnl_vector(vnl_vectorUC const & arg0);
     vnl_vector_refUC Get_vnl_vector();
     vnl_vectorUC Get_vnl_vector() const;
     itkVectorUC6();
     itkVectorUC6(unsigned char const & r);
     itkVectorUC6(unsigned char const * r);
     itkVectorUC6 & operator=(unsigned char const * r);
     itkVectorUC6 const & operator+=(itkVectorUC6 const & vec);
     itkVectorUC6 const & operator-=(itkVectorUC6 const & vec);
     itkVectorUC6 operator-() const;
     itkVectorUC6 operator+(itkVectorUC6 const & vec) const;
     itkVectorUC6 operator-(itkVectorUC6 const & vec) const;
     unsigned char operator*(itkVectorUC6 const & vec) const;
     itkVectorUC6 operator*(unsigned char const & value) const;
     bool operator==(itkVectorUC6 const & v) const;
     bool operator!=(itkVectorUC6 const & v) const;
     double GetNorm() const;
     double GetSquaredNorm() const;
     static unsigned int GetNumberOfComponents();
     void Normalize();
     void SetNthComponent(int c, unsigned char const & v);
   private:
   protected:
 };


 class itkVectorUL1 : public itkFixedArrayUL1 {
   public:
     enum  {  Dimension = 1 };
     ~itkVectorUL1();
     itkVectorUL1 & operator=(itkVectorUL1 const & arg0);
     itkVectorUL1(itkVectorUL1 const & arg0);
     static unsigned int GetVectorDimension();
     void SetVnlVector(vnl_vectorUL const & arg0);
     vnl_vector_refUL GetVnlVector();
     vnl_vectorUL GetVnlVector() const;
     void Set_vnl_vector(vnl_vectorUL const & arg0);
     vnl_vector_refUL Get_vnl_vector();
     vnl_vectorUL Get_vnl_vector() const;
     itkVectorUL1();
     itkVectorUL1(unsigned long const & r);
     itkVectorUL1(unsigned long const * r);
     itkVectorUL1 & operator=(unsigned long const * r);
     itkVectorUL1 const & operator+=(itkVectorUL1 const & vec);
     itkVectorUL1 const & operator-=(itkVectorUL1 const & vec);
     itkVectorUL1 operator-() const;
     itkVectorUL1 operator+(itkVectorUL1 const & vec) const;
     itkVectorUL1 operator-(itkVectorUL1 const & vec) const;
     unsigned long operator*(itkVectorUL1 const & vec) const;
     itkVectorUL1 operator*(unsigned long const & value) const;
     bool operator==(itkVectorUL1 const & v) const;
     bool operator!=(itkVectorUL1 const & v) const;
     double GetNorm() const;
     double GetSquaredNorm() const;
     static unsigned int GetNumberOfComponents();
     void Normalize();
     void SetNthComponent(int c, unsigned long const & v);
   private:
   protected:
 };


 class itkVectorUL2 : public itkFixedArrayUL2 {
   public:
     enum  {  Dimension = 2 };
     ~itkVectorUL2();
     itkVectorUL2 & operator=(itkVectorUL2 const & arg0);
     itkVectorUL2(itkVectorUL2 const & arg0);
     static unsigned int GetVectorDimension();
     void SetVnlVector(vnl_vectorUL const & arg0);
     vnl_vector_refUL GetVnlVector();
     vnl_vectorUL GetVnlVector() const;
     void Set_vnl_vector(vnl_vectorUL const & arg0);
     vnl_vector_refUL Get_vnl_vector();
     vnl_vectorUL Get_vnl_vector() const;
     itkVectorUL2();
     itkVectorUL2(unsigned long const & r);
     itkVectorUL2(unsigned long const * r);
     itkVectorUL2 & operator=(unsigned long const * r);
     itkVectorUL2 const & operator+=(itkVectorUL2 const & vec);
     itkVectorUL2 const & operator-=(itkVectorUL2 const & vec);
     itkVectorUL2 operator-() const;
     itkVectorUL2 operator+(itkVectorUL2 const & vec) const;
     itkVectorUL2 operator-(itkVectorUL2 const & vec) const;
     unsigned long operator*(itkVectorUL2 const & vec) const;
     itkVectorUL2 operator*(unsigned long const & value) const;
     bool operator==(itkVectorUL2 const & v) const;
     bool operator!=(itkVectorUL2 const & v) const;
     double GetNorm() const;
     double GetSquaredNorm() const;
     static unsigned int GetNumberOfComponents();
     void Normalize();
     void SetNthComponent(int c, unsigned long const & v);
   private:
   protected:
 };


 class itkVectorUL3 : public itkFixedArrayUL3 {
   public:
     enum  {  Dimension = 3 };
     ~itkVectorUL3();
     itkVectorUL3 & operator=(itkVectorUL3 const & arg0);
     itkVectorUL3(itkVectorUL3 const & arg0);
     static unsigned int GetVectorDimension();
     void SetVnlVector(vnl_vectorUL const & arg0);
     vnl_vector_refUL GetVnlVector();
     vnl_vectorUL GetVnlVector() const;
     void Set_vnl_vector(vnl_vectorUL const & arg0);
     vnl_vector_refUL Get_vnl_vector();
     vnl_vectorUL Get_vnl_vector() const;
     itkVectorUL3();
     itkVectorUL3(unsigned long const & r);
     itkVectorUL3(unsigned long const * r);
     itkVectorUL3 & operator=(unsigned long const * r);
     itkVectorUL3 const & operator+=(itkVectorUL3 const & vec);
     itkVectorUL3 const & operator-=(itkVectorUL3 const & vec);
     itkVectorUL3 operator-() const;
     itkVectorUL3 operator+(itkVectorUL3 const & vec) const;
     itkVectorUL3 operator-(itkVectorUL3 const & vec) const;
     unsigned long operator*(itkVectorUL3 const & vec) const;
     itkVectorUL3 operator*(unsigned long const & value) const;
     bool operator==(itkVectorUL3 const & v) const;
     bool operator!=(itkVectorUL3 const & v) const;
     double GetNorm() const;
     double GetSquaredNorm() const;
     static unsigned int GetNumberOfComponents();
     void Normalize();
     void SetNthComponent(int c, unsigned long const & v);
   private:
   protected:
 };


 class itkVectorUL6 : public itkFixedArrayUL6 {
   public:
     enum  {  Dimension = 6 };
     ~itkVectorUL6();
     itkVectorUL6 & operator=(itkVectorUL6 const & arg0);
     itkVectorUL6(itkVectorUL6 const & arg0);
     static unsigned int GetVectorDimension();
     void SetVnlVector(vnl_vectorUL const & arg0);
     vnl_vector_refUL GetVnlVector();
     vnl_vectorUL GetVnlVector() const;
     void Set_vnl_vector(vnl_vectorUL const & arg0);
     vnl_vector_refUL Get_vnl_vector();
     vnl_vectorUL Get_vnl_vector() const;
     itkVectorUL6();
     itkVectorUL6(unsigned long const & r);
     itkVectorUL6(unsigned long const * r);
     itkVectorUL6 & operator=(unsigned long const * r);
     itkVectorUL6 const & operator+=(itkVectorUL6 const & vec);
     itkVectorUL6 const & operator-=(itkVectorUL6 const & vec);
     itkVectorUL6 operator-() const;
     itkVectorUL6 operator+(itkVectorUL6 const & vec) const;
     itkVectorUL6 operator-(itkVectorUL6 const & vec) const;
     unsigned long operator*(itkVectorUL6 const & vec) const;
     itkVectorUL6 operator*(unsigned long const & value) const;
     bool operator==(itkVectorUL6 const & v) const;
     bool operator!=(itkVectorUL6 const & v) const;
     double GetNorm() const;
     double GetSquaredNorm() const;
     static unsigned int GetNumberOfComponents();
     void Normalize();
     void SetNthComponent(int c, unsigned long const & v);
   private:
   protected:
 };


 class itkVectorUS1 : public itkFixedArrayUS1 {
   public:
     enum  {  Dimension = 1 };
     ~itkVectorUS1();
     itkVectorUS1 & operator=(itkVectorUS1 const & arg0);
     itkVectorUS1(itkVectorUS1 const & arg0);
     static unsigned int GetVectorDimension();
     void SetVnlVector(vnl_vectorUS const & arg0);
     vnl_vector_refUS GetVnlVector();
     vnl_vectorUS GetVnlVector() const;
     void Set_vnl_vector(vnl_vectorUS const & arg0);
     vnl_vector_refUS Get_vnl_vector();
     vnl_vectorUS Get_vnl_vector() const;
     itkVectorUS1();
     itkVectorUS1(unsigned short const & r);
     itkVectorUS1(unsigned short const * r);
     itkVectorUS1 & operator=(unsigned short const * r);
     itkVectorUS1 const & operator+=(itkVectorUS1 const & vec);
     itkVectorUS1 const & operator-=(itkVectorUS1 const & vec);
     itkVectorUS1 operator-() const;
     itkVectorUS1 operator+(itkVectorUS1 const & vec) const;
     itkVectorUS1 operator-(itkVectorUS1 const & vec) const;
     unsigned short operator*(itkVectorUS1 const & vec) const;
     itkVectorUS1 operator*(unsigned short const & value) const;
     bool operator==(itkVectorUS1 const & v) const;
     bool operator!=(itkVectorUS1 const & v) const;
     double GetNorm() const;
     double GetSquaredNorm() const;
     static unsigned int GetNumberOfComponents();
     void Normalize();
     void SetNthComponent(int c, unsigned short const & v);
   private:
   protected:
 };


 class itkVectorUS2 : public itkFixedArrayUS2 {
   public:
     enum  {  Dimension = 2 };
     ~itkVectorUS2();
     itkVectorUS2 & operator=(itkVectorUS2 const & arg0);
     itkVectorUS2(itkVectorUS2 const & arg0);
     static unsigned int GetVectorDimension();
     void SetVnlVector(vnl_vectorUS const & arg0);
     vnl_vector_refUS GetVnlVector();
     vnl_vectorUS GetVnlVector() const;
     void Set_vnl_vector(vnl_vectorUS const & arg0);
     vnl_vector_refUS Get_vnl_vector();
     vnl_vectorUS Get_vnl_vector() const;
     itkVectorUS2();
     itkVectorUS2(unsigned short const & r);
     itkVectorUS2(unsigned short const * r);
     itkVectorUS2 & operator=(unsigned short const * r);
     itkVectorUS2 const & operator+=(itkVectorUS2 const & vec);
     itkVectorUS2 const & operator-=(itkVectorUS2 const & vec);
     itkVectorUS2 operator-() const;
     itkVectorUS2 operator+(itkVectorUS2 const & vec) const;
     itkVectorUS2 operator-(itkVectorUS2 const & vec) const;
     unsigned short operator*(itkVectorUS2 const & vec) const;
     itkVectorUS2 operator*(unsigned short const & value) const;
     bool operator==(itkVectorUS2 const & v) const;
     bool operator!=(itkVectorUS2 const & v) const;
     double GetNorm() const;
     double GetSquaredNorm() const;
     static unsigned int GetNumberOfComponents();
     void Normalize();
     void SetNthComponent(int c, unsigned short const & v);
   private:
   protected:
 };


 class itkVectorUS3 : public itkFixedArrayUS3 {
   public:
     enum  {  Dimension = 3 };
     ~itkVectorUS3();
     itkVectorUS3 & operator=(itkVectorUS3 const & arg0);
     itkVectorUS3(itkVectorUS3 const & arg0);
     static unsigned int GetVectorDimension();
     void SetVnlVector(vnl_vectorUS const & arg0);
     vnl_vector_refUS GetVnlVector();
     vnl_vectorUS GetVnlVector() const;
     void Set_vnl_vector(vnl_vectorUS const & arg0);
     vnl_vector_refUS Get_vnl_vector();
     vnl_vectorUS Get_vnl_vector() const;
     itkVectorUS3();
     itkVectorUS3(unsigned short const & r);
     itkVectorUS3(unsigned short const * r);
     itkVectorUS3 & operator=(unsigned short const * r);
     itkVectorUS3 const & operator+=(itkVectorUS3 const & vec);
     itkVectorUS3 const & operator-=(itkVectorUS3 const & vec);
     itkVectorUS3 operator-() const;
     itkVectorUS3 operator+(itkVectorUS3 const & vec) const;
     itkVectorUS3 operator-(itkVectorUS3 const & vec) const;
     unsigned short operator*(itkVectorUS3 const & vec) const;
     itkVectorUS3 operator*(unsigned short const & value) const;
     bool operator==(itkVectorUS3 const & v) const;
     bool operator!=(itkVectorUS3 const & v) const;
     double GetNorm() const;
     double GetSquaredNorm() const;
     static unsigned int GetNumberOfComponents();
     void Normalize();
     void SetNthComponent(int c, unsigned short const & v);
   private:
   protected:
 };


 class itkVectorUS6 : public itkFixedArrayUS6 {
   public:
     enum  {  Dimension = 6 };
     ~itkVectorUS6();
     itkVectorUS6 & operator=(itkVectorUS6 const & arg0);
     itkVectorUS6(itkVectorUS6 const & arg0);
     static unsigned int GetVectorDimension();
     void SetVnlVector(vnl_vectorUS const & arg0);
     vnl_vector_refUS GetVnlVector();
     vnl_vectorUS GetVnlVector() const;
     void Set_vnl_vector(vnl_vectorUS const & arg0);
     vnl_vector_refUS Get_vnl_vector();
     vnl_vectorUS Get_vnl_vector() const;
     itkVectorUS6();
     itkVectorUS6(unsigned short const & r);
     itkVectorUS6(unsigned short const * r);
     itkVectorUS6 & operator=(unsigned short const * r);
     itkVectorUS6 const & operator+=(itkVectorUS6 const & vec);
     itkVectorUS6 const & operator-=(itkVectorUS6 const & vec);
     itkVectorUS6 operator-() const;
     itkVectorUS6 operator+(itkVectorUS6 const & vec) const;
     itkVectorUS6 operator-(itkVectorUS6 const & vec) const;
     unsigned short operator*(itkVectorUS6 const & vec) const;
     itkVectorUS6 operator*(unsigned short const & value) const;
     bool operator==(itkVectorUS6 const & v) const;
     bool operator!=(itkVectorUS6 const & v) const;
     double GetNorm() const;
     double GetSquaredNorm() const;
     static unsigned int GetNumberOfComponents();
     void Normalize();
     void SetNthComponent(int c, unsigned short const & v);
   private:
   protected:
 };


