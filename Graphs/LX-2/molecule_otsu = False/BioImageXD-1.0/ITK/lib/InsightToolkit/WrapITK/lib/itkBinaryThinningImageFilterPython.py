# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkBinaryThinningImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkBinaryThinningImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkBinaryThinningImageFilterPython
            return _itkBinaryThinningImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkBinaryThinningImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkBinaryThinningImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkBinaryThinningImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import itkEventObjectsPython
import pyBasePython
import itkImagePython
import itkFixedArrayPython
import itkCovariantVectorPython
import vnl_vectorPython
import vcl_complexPython
import vnl_matrixPython
import itkVectorPython
import vnl_vector_refPython
import ITKRegionsPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkPointPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkRGBPixelPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkVectorImagePython
import itkVariableLengthVectorPython
def itkBinaryThinningImageFilterIUS2IUS2_New():
  return itkBinaryThinningImageFilterIUS2IUS2.New()

def itkBinaryThinningImageFilterIUL2IUL2_New():
  return itkBinaryThinningImageFilterIUL2IUL2.New()

def itkBinaryThinningImageFilterIUC2IUC2_New():
  return itkBinaryThinningImageFilterIUC2IUC2.New()

class itkBinaryThinningImageFilterIUC2IUC2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """Proxy of C++ itkBinaryThinningImageFilterIUC2IUC2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImageDimension = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUC2IUC2_InputImageDimension
    OutputImageDimension = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUC2IUC2_OutputImageDimension
    SameDimensionCheck = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUC2IUC2_SameDimensionCheck
    InputAdditiveOperatorsCheck = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUC2IUC2_InputAdditiveOperatorsCheck
    InputConvertibleToIntCheck = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUC2IUC2_InputConvertibleToIntCheck
    IntConvertibleToInputCheck = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUC2IUC2_IntConvertibleToInputCheck
    SameTypeCheck = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUC2IUC2_SameTypeCheck
    InputIntComparableCheck = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUC2IUC2_InputIntComparableCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetThinning(self):
        """GetThinning(self) -> itkImageUC2"""
        return _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUC2IUC2_GetThinning(self)

    __swig_destroy__ = _itkBinaryThinningImageFilterPython.delete_itkBinaryThinningImageFilterIUC2IUC2
    def cast(*args):
        """cast(itkLightObject obj) -> itkBinaryThinningImageFilterIUC2IUC2"""
        return _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUC2IUC2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBinaryThinningImageFilterIUC2IUC2"""
        return _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUC2IUC2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBinaryThinningImageFilterIUC2IUC2
        
        Create a new object of the class itkBinaryThinningImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBinaryThinningImageFilterIUC2IUC2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBinaryThinningImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryThinningImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryThinningImageFilterIUC2IUC2.GetThinning = new_instancemethod(_itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUC2IUC2_GetThinning,None,itkBinaryThinningImageFilterIUC2IUC2)
itkBinaryThinningImageFilterIUC2IUC2.GetPointer = new_instancemethod(_itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUC2IUC2_GetPointer,None,itkBinaryThinningImageFilterIUC2IUC2)
itkBinaryThinningImageFilterIUC2IUC2_swigregister = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUC2IUC2_swigregister
itkBinaryThinningImageFilterIUC2IUC2_swigregister(itkBinaryThinningImageFilterIUC2IUC2)

def itkBinaryThinningImageFilterIUC2IUC2___New_orig__():
  """itkBinaryThinningImageFilterIUC2IUC2___New_orig__()"""
  return _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUC2IUC2___New_orig__()

def itkBinaryThinningImageFilterIUC2IUC2_cast(*args):
  """itkBinaryThinningImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkBinaryThinningImageFilterIUC2IUC2"""
  return _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUC2IUC2_cast(*args)

class itkBinaryThinningImageFilterIUL2IUL2(itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUL2):
    """Proxy of C++ itkBinaryThinningImageFilterIUL2IUL2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImageDimension = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUL2IUL2_InputImageDimension
    OutputImageDimension = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUL2IUL2_OutputImageDimension
    SameDimensionCheck = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUL2IUL2_SameDimensionCheck
    InputAdditiveOperatorsCheck = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUL2IUL2_InputAdditiveOperatorsCheck
    InputConvertibleToIntCheck = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUL2IUL2_InputConvertibleToIntCheck
    IntConvertibleToInputCheck = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUL2IUL2_IntConvertibleToInputCheck
    SameTypeCheck = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUL2IUL2_SameTypeCheck
    InputIntComparableCheck = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUL2IUL2_InputIntComparableCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUL2IUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetThinning(self):
        """GetThinning(self) -> itkImageUL2"""
        return _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUL2IUL2_GetThinning(self)

    __swig_destroy__ = _itkBinaryThinningImageFilterPython.delete_itkBinaryThinningImageFilterIUL2IUL2
    def cast(*args):
        """cast(itkLightObject obj) -> itkBinaryThinningImageFilterIUL2IUL2"""
        return _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUL2IUL2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBinaryThinningImageFilterIUL2IUL2"""
        return _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUL2IUL2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBinaryThinningImageFilterIUL2IUL2
        
        Create a new object of the class itkBinaryThinningImageFilterIUL2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBinaryThinningImageFilterIUL2IUL2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBinaryThinningImageFilterIUL2IUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryThinningImageFilterIUL2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryThinningImageFilterIUL2IUL2.GetThinning = new_instancemethod(_itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUL2IUL2_GetThinning,None,itkBinaryThinningImageFilterIUL2IUL2)
itkBinaryThinningImageFilterIUL2IUL2.GetPointer = new_instancemethod(_itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUL2IUL2_GetPointer,None,itkBinaryThinningImageFilterIUL2IUL2)
itkBinaryThinningImageFilterIUL2IUL2_swigregister = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUL2IUL2_swigregister
itkBinaryThinningImageFilterIUL2IUL2_swigregister(itkBinaryThinningImageFilterIUL2IUL2)

def itkBinaryThinningImageFilterIUL2IUL2___New_orig__():
  """itkBinaryThinningImageFilterIUL2IUL2___New_orig__()"""
  return _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUL2IUL2___New_orig__()

def itkBinaryThinningImageFilterIUL2IUL2_cast(*args):
  """itkBinaryThinningImageFilterIUL2IUL2_cast(itkLightObject obj) -> itkBinaryThinningImageFilterIUL2IUL2"""
  return _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUL2IUL2_cast(*args)

class itkBinaryThinningImageFilterIUS2IUS2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """Proxy of C++ itkBinaryThinningImageFilterIUS2IUS2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImageDimension = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUS2IUS2_InputImageDimension
    OutputImageDimension = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUS2IUS2_OutputImageDimension
    SameDimensionCheck = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUS2IUS2_SameDimensionCheck
    InputAdditiveOperatorsCheck = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUS2IUS2_InputAdditiveOperatorsCheck
    InputConvertibleToIntCheck = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUS2IUS2_InputConvertibleToIntCheck
    IntConvertibleToInputCheck = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUS2IUS2_IntConvertibleToInputCheck
    SameTypeCheck = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUS2IUS2_SameTypeCheck
    InputIntComparableCheck = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUS2IUS2_InputIntComparableCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetThinning(self):
        """GetThinning(self) -> itkImageUS2"""
        return _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUS2IUS2_GetThinning(self)

    __swig_destroy__ = _itkBinaryThinningImageFilterPython.delete_itkBinaryThinningImageFilterIUS2IUS2
    def cast(*args):
        """cast(itkLightObject obj) -> itkBinaryThinningImageFilterIUS2IUS2"""
        return _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUS2IUS2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBinaryThinningImageFilterIUS2IUS2"""
        return _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUS2IUS2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBinaryThinningImageFilterIUS2IUS2
        
        Create a new object of the class itkBinaryThinningImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBinaryThinningImageFilterIUS2IUS2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBinaryThinningImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBinaryThinningImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBinaryThinningImageFilterIUS2IUS2.GetThinning = new_instancemethod(_itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUS2IUS2_GetThinning,None,itkBinaryThinningImageFilterIUS2IUS2)
itkBinaryThinningImageFilterIUS2IUS2.GetPointer = new_instancemethod(_itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUS2IUS2_GetPointer,None,itkBinaryThinningImageFilterIUS2IUS2)
itkBinaryThinningImageFilterIUS2IUS2_swigregister = _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUS2IUS2_swigregister
itkBinaryThinningImageFilterIUS2IUS2_swigregister(itkBinaryThinningImageFilterIUS2IUS2)

def itkBinaryThinningImageFilterIUS2IUS2___New_orig__():
  """itkBinaryThinningImageFilterIUS2IUS2___New_orig__()"""
  return _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUS2IUS2___New_orig__()

def itkBinaryThinningImageFilterIUS2IUS2_cast(*args):
  """itkBinaryThinningImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkBinaryThinningImageFilterIUS2IUS2"""
  return _itkBinaryThinningImageFilterPython.itkBinaryThinningImageFilterIUS2IUS2_cast(*args)



