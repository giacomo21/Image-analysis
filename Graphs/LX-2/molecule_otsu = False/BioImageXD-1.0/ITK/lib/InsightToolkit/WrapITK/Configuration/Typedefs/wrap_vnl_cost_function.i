// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module vnl_cost_functionChicken
#endif
#ifdef SWIGCSHARP
%module vnl_cost_functionCsharp
#endif
#ifdef SWIGGUILE
%module vnl_cost_functionGuile
#endif
#ifdef SWIGJAVA
%module vnl_cost_functionJava
#endif
#ifdef SWIGLUA
%module vnl_cost_functionLua
#endif
#ifdef SWIGMODULA3
%module vnl_cost_functionModula3
#endif
#ifdef SWIGMZSCHEME
%module vnl_cost_functionMzscheme
#endif
#ifdef SWIGOCAML
%module vnl_cost_functionOcaml
#endif
#ifdef SWIGPERL
%module vnl_cost_functionPerl
#endif
#ifdef SWIGPERL5
%module vnl_cost_functionPerl5
#endif
#ifdef SWIGPHP
%module vnl_cost_functionPhp
#endif
#ifdef SWIGPHP4
%module vnl_cost_functionPhp4
#endif
#ifdef SWIGPHP5
%module vnl_cost_functionPhp5
#endif
#ifdef SWIGPIKE
%module vnl_cost_functionPike
#endif
#ifdef SWIGPYTHON
%module vnl_cost_functionPython
#endif
#ifdef SWIGR
%module vnl_cost_functionR
#endif
#ifdef SWIGRUBY
%module vnl_cost_functionRuby
#endif
#ifdef SWIGSEXP
%module vnl_cost_functionSexp
#endif
#ifdef SWIGTCL
%module vnl_cost_functionTcl
#endif
#ifdef SWIGXML
%module vnl_cost_functionXml
#endif

%{
#include "VXLNumerics.includes"
%}


%{
%}




%import wrap_vnl_unary_function.i
%import wrap_vnl_vector.i


%include itk.i
%include wrap_vnl_cost_function_ext.i


 class vnl_cost_function : public vnl_unary_functionD_vnl_vectorD {
   public:
     vnl_cost_function & operator=(vnl_cost_function const & arg0);
     vnl_cost_function(vnl_cost_function const & arg0);
     vnl_cost_function();
     vnl_cost_function(int number_of_unknowns);
     ~vnl_cost_function();
     virtual double f(vnl_vectorD const & x);
     virtual void gradf(vnl_vectorD const & x, vnl_vectorD & gradient);
     virtual void compute(vnl_vectorD const & x, double * f, vnl_vectorD * g);
     int get_number_of_unknowns() const;
     void fdgradf(vnl_vectorD const & x, vnl_vectorD & gradient, double stepsize = 1.00000000000000008180305391403130954586231382563710212708e-5);
     virtual double reported_error(double f_value);
     vnl_vectorD gradf(vnl_vectorD const & x);
     vnl_vectorD fdgradf(vnl_vectorD const & x);
   private:
   protected:
     void set_number_of_unknowns(int number_of_unknowns);
 };


