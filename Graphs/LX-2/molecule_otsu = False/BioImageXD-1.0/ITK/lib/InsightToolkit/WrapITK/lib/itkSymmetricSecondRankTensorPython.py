# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkSymmetricSecondRankTensorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkSymmetricSecondRankTensorPython', [dirname(__file__)])
        except ImportError:
            import _itkSymmetricSecondRankTensorPython
            return _itkSymmetricSecondRankTensorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkSymmetricSecondRankTensorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkSymmetricSecondRankTensorPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkSymmetricSecondRankTensorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkFixedArrayPython
import pyBasePython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_vectorPython
import vcl_complexPython
import vnl_matrixPython
import itkVectorPython
import vnl_vector_refPython
import vnl_matrix_fixedPython
import itkPointPython
class itkSymmetricSecondRankTensorD2(itkFixedArrayPython.itkFixedArrayD3):
    """Proxy of C++ itkSymmetricSecondRankTensorD2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_Dimension
    InternalDimension = _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_InternalDimension
    __swig_destroy__ = _itkSymmetricSecondRankTensorPython.delete_itkSymmetricSecondRankTensorD2
    def __init__(self, *args): 
        """
        __init__(self, itkSymmetricSecondRankTensorD2 arg0) -> itkSymmetricSecondRankTensorD2
        __init__(self) -> itkSymmetricSecondRankTensorD2
        __init__(self, double r) -> itkSymmetricSecondRankTensorD2
        __init__(self, double r) -> itkSymmetricSecondRankTensorD2
        """
        _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_swiginit(self,_itkSymmetricSecondRankTensorPython.new_itkSymmetricSecondRankTensorD2(*args))
    def __add__(self, *args):
        """__add__(self, itkSymmetricSecondRankTensorD2 vec) -> itkSymmetricSecondRankTensorD2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, itkSymmetricSecondRankTensorD2 vec) -> itkSymmetricSecondRankTensorD2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___sub__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, itkSymmetricSecondRankTensorD2 vec) -> itkSymmetricSecondRankTensorD2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(self, itkSymmetricSecondRankTensorD2 vec) -> itkSymmetricSecondRankTensorD2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___isub__(self, *args)

    def __mul__(self, *args):
        """__mul__(self, double scalar) -> itkSymmetricSecondRankTensorD2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___mul__(self, *args)

    def __div__(self, *args):
        """__div__(self, double scalar) -> itkSymmetricSecondRankTensorD2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___div__(self, *args)

    def __imul__(self, *args):
        """__imul__(self, double scalar) -> itkSymmetricSecondRankTensorD2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___imul__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, double scalar) -> itkSymmetricSecondRankTensorD2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___idiv__(self, *args)

    def GetNumberOfComponents():
        """GetNumberOfComponents() -> unsigned int"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_GetNumberOfComponents()

    GetNumberOfComponents = staticmethod(GetNumberOfComponents)
    def GetNthComponent(self, *args):
        """GetNthComponent(self, int c) -> double"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_GetNthComponent(self, *args)

    def SetNthComponent(self, *args):
        """SetNthComponent(self, int c, double v)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_SetNthComponent(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int row, unsigned int col) -> double
        __call__(self, unsigned int row, unsigned int col) -> double
        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___call__(self, *args)

    def SetIdentity(self):
        """SetIdentity(self)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_SetIdentity(self)

    def GetTrace(self):
        """GetTrace(self) -> double"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_GetTrace(self)

    def ComputeEigenValues(self, *args):
        """ComputeEigenValues(self, itkFixedArrayD2 eigenValues)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_ComputeEigenValues(self, *args)

    def ComputeEigenAnalysis(self, *args):
        """ComputeEigenAnalysis(self, itkFixedArrayD2 eigenValues, itkMatrixD22 eigenVectors)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_ComputeEigenAnalysis(self, *args)

    def PreMultiply(self, *args):
        """PreMultiply(self, itkMatrixD22 m) -> itkSymmetricSecondRankTensorD2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_PreMultiply(self, *args)

    def PostMultiply(self, *args):
        """PostMultiply(self, itkMatrixD22 m) -> itkSymmetricSecondRankTensorD2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_PostMultiply(self, *args)

itkSymmetricSecondRankTensorD2.__add__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___add__,None,itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.__sub__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___sub__,None,itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.__iadd__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___iadd__,None,itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.__isub__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___isub__,None,itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.__mul__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___mul__,None,itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.__div__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___div__,None,itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.__imul__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___imul__,None,itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.__idiv__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___idiv__,None,itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.GetNthComponent = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_GetNthComponent,None,itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.SetNthComponent = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_SetNthComponent,None,itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.__call__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2___call__,None,itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.SetIdentity = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_SetIdentity,None,itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.GetTrace = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_GetTrace,None,itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.ComputeEigenValues = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_ComputeEigenValues,None,itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.ComputeEigenAnalysis = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_ComputeEigenAnalysis,None,itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.PreMultiply = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_PreMultiply,None,itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2.PostMultiply = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_PostMultiply,None,itkSymmetricSecondRankTensorD2)
itkSymmetricSecondRankTensorD2_swigregister = _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_swigregister
itkSymmetricSecondRankTensorD2_swigregister(itkSymmetricSecondRankTensorD2)

def itkSymmetricSecondRankTensorD2_GetNumberOfComponents():
  """itkSymmetricSecondRankTensorD2_GetNumberOfComponents() -> unsigned int"""
  return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD2_GetNumberOfComponents()

class itkSymmetricSecondRankTensorD3(itkFixedArrayPython.itkFixedArrayD6):
    """Proxy of C++ itkSymmetricSecondRankTensorD3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_Dimension
    InternalDimension = _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_InternalDimension
    __swig_destroy__ = _itkSymmetricSecondRankTensorPython.delete_itkSymmetricSecondRankTensorD3
    def __init__(self, *args): 
        """
        __init__(self, itkSymmetricSecondRankTensorD3 arg0) -> itkSymmetricSecondRankTensorD3
        __init__(self) -> itkSymmetricSecondRankTensorD3
        __init__(self, double r) -> itkSymmetricSecondRankTensorD3
        __init__(self, double r) -> itkSymmetricSecondRankTensorD3
        """
        _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_swiginit(self,_itkSymmetricSecondRankTensorPython.new_itkSymmetricSecondRankTensorD3(*args))
    def __add__(self, *args):
        """__add__(self, itkSymmetricSecondRankTensorD3 vec) -> itkSymmetricSecondRankTensorD3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, itkSymmetricSecondRankTensorD3 vec) -> itkSymmetricSecondRankTensorD3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___sub__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, itkSymmetricSecondRankTensorD3 vec) -> itkSymmetricSecondRankTensorD3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(self, itkSymmetricSecondRankTensorD3 vec) -> itkSymmetricSecondRankTensorD3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___isub__(self, *args)

    def __mul__(self, *args):
        """__mul__(self, double scalar) -> itkSymmetricSecondRankTensorD3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___mul__(self, *args)

    def __div__(self, *args):
        """__div__(self, double scalar) -> itkSymmetricSecondRankTensorD3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___div__(self, *args)

    def __imul__(self, *args):
        """__imul__(self, double scalar) -> itkSymmetricSecondRankTensorD3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___imul__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, double scalar) -> itkSymmetricSecondRankTensorD3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___idiv__(self, *args)

    def GetNumberOfComponents():
        """GetNumberOfComponents() -> unsigned int"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_GetNumberOfComponents()

    GetNumberOfComponents = staticmethod(GetNumberOfComponents)
    def GetNthComponent(self, *args):
        """GetNthComponent(self, int c) -> double"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_GetNthComponent(self, *args)

    def SetNthComponent(self, *args):
        """SetNthComponent(self, int c, double v)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_SetNthComponent(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int row, unsigned int col) -> double
        __call__(self, unsigned int row, unsigned int col) -> double
        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___call__(self, *args)

    def SetIdentity(self):
        """SetIdentity(self)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_SetIdentity(self)

    def GetTrace(self):
        """GetTrace(self) -> double"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_GetTrace(self)

    def ComputeEigenValues(self, *args):
        """ComputeEigenValues(self, itkFixedArrayD3 eigenValues)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_ComputeEigenValues(self, *args)

    def ComputeEigenAnalysis(self, *args):
        """ComputeEigenAnalysis(self, itkFixedArrayD3 eigenValues, itkMatrixD33 eigenVectors)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_ComputeEigenAnalysis(self, *args)

    def PreMultiply(self, *args):
        """PreMultiply(self, itkMatrixD33 m) -> itkSymmetricSecondRankTensorD3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_PreMultiply(self, *args)

    def PostMultiply(self, *args):
        """PostMultiply(self, itkMatrixD33 m) -> itkSymmetricSecondRankTensorD3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_PostMultiply(self, *args)

itkSymmetricSecondRankTensorD3.__add__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___add__,None,itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.__sub__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___sub__,None,itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.__iadd__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___iadd__,None,itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.__isub__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___isub__,None,itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.__mul__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___mul__,None,itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.__div__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___div__,None,itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.__imul__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___imul__,None,itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.__idiv__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___idiv__,None,itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.GetNthComponent = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_GetNthComponent,None,itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.SetNthComponent = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_SetNthComponent,None,itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.__call__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3___call__,None,itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.SetIdentity = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_SetIdentity,None,itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.GetTrace = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_GetTrace,None,itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.ComputeEigenValues = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_ComputeEigenValues,None,itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.ComputeEigenAnalysis = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_ComputeEigenAnalysis,None,itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.PreMultiply = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_PreMultiply,None,itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3.PostMultiply = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_PostMultiply,None,itkSymmetricSecondRankTensorD3)
itkSymmetricSecondRankTensorD3_swigregister = _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_swigregister
itkSymmetricSecondRankTensorD3_swigregister(itkSymmetricSecondRankTensorD3)

def itkSymmetricSecondRankTensorD3_GetNumberOfComponents():
  """itkSymmetricSecondRankTensorD3_GetNumberOfComponents() -> unsigned int"""
  return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3_GetNumberOfComponents()

class itkSymmetricSecondRankTensorF2(itkFixedArrayPython.itkFixedArrayF3):
    """Proxy of C++ itkSymmetricSecondRankTensorF2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_Dimension
    InternalDimension = _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_InternalDimension
    __swig_destroy__ = _itkSymmetricSecondRankTensorPython.delete_itkSymmetricSecondRankTensorF2
    def __init__(self, *args): 
        """
        __init__(self, itkSymmetricSecondRankTensorF2 arg0) -> itkSymmetricSecondRankTensorF2
        __init__(self) -> itkSymmetricSecondRankTensorF2
        __init__(self, float r) -> itkSymmetricSecondRankTensorF2
        __init__(self, float r) -> itkSymmetricSecondRankTensorF2
        """
        _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_swiginit(self,_itkSymmetricSecondRankTensorPython.new_itkSymmetricSecondRankTensorF2(*args))
    def __add__(self, *args):
        """__add__(self, itkSymmetricSecondRankTensorF2 vec) -> itkSymmetricSecondRankTensorF2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, itkSymmetricSecondRankTensorF2 vec) -> itkSymmetricSecondRankTensorF2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___sub__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, itkSymmetricSecondRankTensorF2 vec) -> itkSymmetricSecondRankTensorF2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(self, itkSymmetricSecondRankTensorF2 vec) -> itkSymmetricSecondRankTensorF2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___isub__(self, *args)

    def __mul__(self, *args):
        """__mul__(self, double scalar) -> itkSymmetricSecondRankTensorF2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___mul__(self, *args)

    def __div__(self, *args):
        """__div__(self, double scalar) -> itkSymmetricSecondRankTensorF2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___div__(self, *args)

    def __imul__(self, *args):
        """__imul__(self, double scalar) -> itkSymmetricSecondRankTensorF2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___imul__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, double scalar) -> itkSymmetricSecondRankTensorF2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___idiv__(self, *args)

    def GetNumberOfComponents():
        """GetNumberOfComponents() -> unsigned int"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_GetNumberOfComponents()

    GetNumberOfComponents = staticmethod(GetNumberOfComponents)
    def GetNthComponent(self, *args):
        """GetNthComponent(self, int c) -> float"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_GetNthComponent(self, *args)

    def SetNthComponent(self, *args):
        """SetNthComponent(self, int c, float v)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_SetNthComponent(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int row, unsigned int col) -> float
        __call__(self, unsigned int row, unsigned int col) -> float
        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___call__(self, *args)

    def SetIdentity(self):
        """SetIdentity(self)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_SetIdentity(self)

    def GetTrace(self):
        """GetTrace(self) -> double"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_GetTrace(self)

    def ComputeEigenValues(self, *args):
        """ComputeEigenValues(self, itkFixedArrayF2 eigenValues)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_ComputeEigenValues(self, *args)

    def ComputeEigenAnalysis(self, *args):
        """ComputeEigenAnalysis(self, itkFixedArrayF2 eigenValues, itkMatrixF22 eigenVectors)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_ComputeEigenAnalysis(self, *args)

    def PreMultiply(self, *args):
        """PreMultiply(self, itkMatrixF22 m) -> itkSymmetricSecondRankTensorF2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_PreMultiply(self, *args)

    def PostMultiply(self, *args):
        """PostMultiply(self, itkMatrixF22 m) -> itkSymmetricSecondRankTensorF2"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_PostMultiply(self, *args)

itkSymmetricSecondRankTensorF2.__add__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___add__,None,itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.__sub__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___sub__,None,itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.__iadd__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___iadd__,None,itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.__isub__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___isub__,None,itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.__mul__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___mul__,None,itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.__div__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___div__,None,itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.__imul__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___imul__,None,itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.__idiv__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___idiv__,None,itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.GetNthComponent = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_GetNthComponent,None,itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.SetNthComponent = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_SetNthComponent,None,itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.__call__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2___call__,None,itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.SetIdentity = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_SetIdentity,None,itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.GetTrace = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_GetTrace,None,itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.ComputeEigenValues = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_ComputeEigenValues,None,itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.ComputeEigenAnalysis = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_ComputeEigenAnalysis,None,itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.PreMultiply = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_PreMultiply,None,itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2.PostMultiply = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_PostMultiply,None,itkSymmetricSecondRankTensorF2)
itkSymmetricSecondRankTensorF2_swigregister = _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_swigregister
itkSymmetricSecondRankTensorF2_swigregister(itkSymmetricSecondRankTensorF2)

def itkSymmetricSecondRankTensorF2_GetNumberOfComponents():
  """itkSymmetricSecondRankTensorF2_GetNumberOfComponents() -> unsigned int"""
  return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF2_GetNumberOfComponents()

class itkSymmetricSecondRankTensorF3(itkFixedArrayPython.itkFixedArrayF6):
    """Proxy of C++ itkSymmetricSecondRankTensorF3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    Dimension = _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_Dimension
    InternalDimension = _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_InternalDimension
    __swig_destroy__ = _itkSymmetricSecondRankTensorPython.delete_itkSymmetricSecondRankTensorF3
    def __init__(self, *args): 
        """
        __init__(self, itkSymmetricSecondRankTensorF3 arg0) -> itkSymmetricSecondRankTensorF3
        __init__(self) -> itkSymmetricSecondRankTensorF3
        __init__(self, float r) -> itkSymmetricSecondRankTensorF3
        __init__(self, float r) -> itkSymmetricSecondRankTensorF3
        """
        _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_swiginit(self,_itkSymmetricSecondRankTensorPython.new_itkSymmetricSecondRankTensorF3(*args))
    def __add__(self, *args):
        """__add__(self, itkSymmetricSecondRankTensorF3 vec) -> itkSymmetricSecondRankTensorF3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___add__(self, *args)

    def __sub__(self, *args):
        """__sub__(self, itkSymmetricSecondRankTensorF3 vec) -> itkSymmetricSecondRankTensorF3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___sub__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(self, itkSymmetricSecondRankTensorF3 vec) -> itkSymmetricSecondRankTensorF3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(self, itkSymmetricSecondRankTensorF3 vec) -> itkSymmetricSecondRankTensorF3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___isub__(self, *args)

    def __mul__(self, *args):
        """__mul__(self, double scalar) -> itkSymmetricSecondRankTensorF3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___mul__(self, *args)

    def __div__(self, *args):
        """__div__(self, double scalar) -> itkSymmetricSecondRankTensorF3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___div__(self, *args)

    def __imul__(self, *args):
        """__imul__(self, double scalar) -> itkSymmetricSecondRankTensorF3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___imul__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, double scalar) -> itkSymmetricSecondRankTensorF3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___idiv__(self, *args)

    def GetNumberOfComponents():
        """GetNumberOfComponents() -> unsigned int"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_GetNumberOfComponents()

    GetNumberOfComponents = staticmethod(GetNumberOfComponents)
    def GetNthComponent(self, *args):
        """GetNthComponent(self, int c) -> float"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_GetNthComponent(self, *args)

    def SetNthComponent(self, *args):
        """SetNthComponent(self, int c, float v)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_SetNthComponent(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int row, unsigned int col) -> float
        __call__(self, unsigned int row, unsigned int col) -> float
        """
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___call__(self, *args)

    def SetIdentity(self):
        """SetIdentity(self)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_SetIdentity(self)

    def GetTrace(self):
        """GetTrace(self) -> double"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_GetTrace(self)

    def ComputeEigenValues(self, *args):
        """ComputeEigenValues(self, itkFixedArrayF3 eigenValues)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_ComputeEigenValues(self, *args)

    def ComputeEigenAnalysis(self, *args):
        """ComputeEigenAnalysis(self, itkFixedArrayF3 eigenValues, itkMatrixF33 eigenVectors)"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_ComputeEigenAnalysis(self, *args)

    def PreMultiply(self, *args):
        """PreMultiply(self, itkMatrixF33 m) -> itkSymmetricSecondRankTensorF3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_PreMultiply(self, *args)

    def PostMultiply(self, *args):
        """PostMultiply(self, itkMatrixF33 m) -> itkSymmetricSecondRankTensorF3"""
        return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_PostMultiply(self, *args)

itkSymmetricSecondRankTensorF3.__add__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___add__,None,itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.__sub__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___sub__,None,itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.__iadd__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___iadd__,None,itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.__isub__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___isub__,None,itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.__mul__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___mul__,None,itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.__div__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___div__,None,itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.__imul__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___imul__,None,itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.__idiv__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___idiv__,None,itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.GetNthComponent = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_GetNthComponent,None,itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.SetNthComponent = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_SetNthComponent,None,itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.__call__ = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3___call__,None,itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.SetIdentity = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_SetIdentity,None,itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.GetTrace = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_GetTrace,None,itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.ComputeEigenValues = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_ComputeEigenValues,None,itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.ComputeEigenAnalysis = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_ComputeEigenAnalysis,None,itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.PreMultiply = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_PreMultiply,None,itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3.PostMultiply = new_instancemethod(_itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_PostMultiply,None,itkSymmetricSecondRankTensorF3)
itkSymmetricSecondRankTensorF3_swigregister = _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_swigregister
itkSymmetricSecondRankTensorF3_swigregister(itkSymmetricSecondRankTensorF3)

def itkSymmetricSecondRankTensorF3_GetNumberOfComponents():
  """itkSymmetricSecondRankTensorF3_GetNumberOfComponents() -> unsigned int"""
  return _itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3_GetNumberOfComponents()



