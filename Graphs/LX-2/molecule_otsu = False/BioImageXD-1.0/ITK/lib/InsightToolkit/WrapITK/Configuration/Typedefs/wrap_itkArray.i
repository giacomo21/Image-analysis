// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkArrayChicken
#endif
#ifdef SWIGCSHARP
%module itkArrayCsharp
#endif
#ifdef SWIGGUILE
%module itkArrayGuile
#endif
#ifdef SWIGJAVA
%module itkArrayJava
#endif
#ifdef SWIGLUA
%module itkArrayLua
#endif
#ifdef SWIGMODULA3
%module itkArrayModula3
#endif
#ifdef SWIGMZSCHEME
%module itkArrayMzscheme
#endif
#ifdef SWIGOCAML
%module itkArrayOcaml
#endif
#ifdef SWIGPERL
%module itkArrayPerl
#endif
#ifdef SWIGPERL5
%module itkArrayPerl5
#endif
#ifdef SWIGPHP
%module itkArrayPhp
#endif
#ifdef SWIGPHP4
%module itkArrayPhp4
#endif
#ifdef SWIGPHP5
%module itkArrayPhp5
#endif
#ifdef SWIGPIKE
%module itkArrayPike
#endif
#ifdef SWIGPYTHON
%module itkArrayPython
#endif
#ifdef SWIGR
%module itkArrayR
#endif
#ifdef SWIGRUBY
%module itkArrayRuby
#endif
#ifdef SWIGSEXP
%module itkArraySexp
#endif
#ifdef SWIGTCL
%module itkArrayTcl
#endif
#ifdef SWIGXML
%module itkArrayXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
%}


%{
%}




%import wrap_vnl_vector.i


%include itk.i
%include wrap_itkArray_ext.i


 class itkArrayD : public vnl_vectorD {
   public:
     itkArrayD(itkArrayD const & arg0);
     itkArrayD();
     itkArrayD(unsigned int dimension);
     itkArrayD(double * data, unsigned int sz, bool LetArrayManageMemory = false);
     itkArrayD(double const * data, unsigned int sz, bool LetArrayManageMemory = false);
     void Fill(double const & v);
     itkArrayD const & operator=(itkArrayD const & rhs);
     itkArrayD const & operator=(vnl_vectorD const & rhs);
     unsigned int Size() const;
     unsigned int GetNumberOfElements() const;
     double const & GetElement(unsigned int i) const;
     void SetElement(unsigned int i, double const & value);
     void SetSize(unsigned int sz);
     unsigned int GetSize() const;
     void SetData(double * data, bool LetArrayManageMemory = false);
     void SetData(double * data, unsigned int sz, bool LetArrayManageMemory = false);
     ~itkArrayD();
   private:
   protected:
 };


 class itkArrayF : public vnl_vectorF {
   public:
     itkArrayF(itkArrayF const & arg0);
     itkArrayF();
     itkArrayF(unsigned int dimension);
     itkArrayF(float * data, unsigned int sz, bool LetArrayManageMemory = false);
     itkArrayF(float const * data, unsigned int sz, bool LetArrayManageMemory = false);
     void Fill(float const & v);
     itkArrayF const & operator=(itkArrayF const & rhs);
     itkArrayF const & operator=(vnl_vectorF const & rhs);
     unsigned int Size() const;
     unsigned int GetNumberOfElements() const;
     float const & GetElement(unsigned int i) const;
     void SetElement(unsigned int i, float const & value);
     void SetSize(unsigned int sz);
     unsigned int GetSize() const;
     void SetData(float * data, bool LetArrayManageMemory = false);
     void SetData(float * data, unsigned int sz, bool LetArrayManageMemory = false);
     ~itkArrayF();
   private:
   protected:
 };


 class itkArraySL : public vnl_vectorSL {
   public:
     itkArraySL(itkArraySL const & arg0);
     itkArraySL();
     itkArraySL(unsigned int dimension);
     itkArraySL(long * data, unsigned int sz, bool LetArrayManageMemory = false);
     itkArraySL(long const * data, unsigned int sz, bool LetArrayManageMemory = false);
     void Fill(long const & v);
     itkArraySL const & operator=(itkArraySL const & rhs);
     itkArraySL const & operator=(vnl_vectorSL const & rhs);
     unsigned int Size() const;
     unsigned int GetNumberOfElements() const;
     long const & GetElement(unsigned int i) const;
     void SetElement(unsigned int i, long const & value);
     void SetSize(unsigned int sz);
     unsigned int GetSize() const;
     void SetData(long * data, bool LetArrayManageMemory = false);
     void SetData(long * data, unsigned int sz, bool LetArrayManageMemory = false);
     ~itkArraySL();
   private:
   protected:
 };


 class itkArrayUL : public vnl_vectorUL {
   public:
     itkArrayUL(itkArrayUL const & arg0);
     itkArrayUL();
     itkArrayUL(unsigned int dimension);
     itkArrayUL(unsigned long * data, unsigned int sz, bool LetArrayManageMemory = false);
     itkArrayUL(unsigned long const * data, unsigned int sz, bool LetArrayManageMemory = false);
     void Fill(unsigned long const & v);
     itkArrayUL const & operator=(itkArrayUL const & rhs);
     itkArrayUL const & operator=(vnl_vectorUL const & rhs);
     unsigned int Size() const;
     unsigned int GetNumberOfElements() const;
     unsigned long const & GetElement(unsigned int i) const;
     void SetElement(unsigned int i, unsigned long const & value);
     void SetSize(unsigned int sz);
     unsigned int GetSize() const;
     void SetData(unsigned long * data, bool LetArrayManageMemory = false);
     void SetData(unsigned long * data, unsigned int sz, bool LetArrayManageMemory = false);
     ~itkArrayUL();
   private:
   protected:
 };


