// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkVTKImageImportChicken
#endif
#ifdef SWIGCSHARP
%module itkVTKImageImportCsharp
#endif
#ifdef SWIGGUILE
%module itkVTKImageImportGuile
#endif
#ifdef SWIGJAVA
%module itkVTKImageImportJava
#endif
#ifdef SWIGLUA
%module itkVTKImageImportLua
#endif
#ifdef SWIGMODULA3
%module itkVTKImageImportModula3
#endif
#ifdef SWIGMZSCHEME
%module itkVTKImageImportMzscheme
#endif
#ifdef SWIGOCAML
%module itkVTKImageImportOcaml
#endif
#ifdef SWIGPERL
%module itkVTKImageImportPerl
#endif
#ifdef SWIGPERL5
%module itkVTKImageImportPerl5
#endif
#ifdef SWIGPHP
%module itkVTKImageImportPhp
#endif
#ifdef SWIGPHP4
%module itkVTKImageImportPhp4
#endif
#ifdef SWIGPHP5
%module itkVTKImageImportPhp5
#endif
#ifdef SWIGPIKE
%module itkVTKImageImportPike
#endif
#ifdef SWIGPYTHON
%module itkVTKImageImportPython
#endif
#ifdef SWIGR
%module itkVTKImageImportR
#endif
#ifdef SWIGRUBY
%module itkVTKImageImportRuby
#endif
#ifdef SWIGSEXP
%module itkVTKImageImportSexp
#endif
#ifdef SWIGTCL
%module itkVTKImageImportTcl
#endif
#ifdef SWIGXML
%module itkVTKImageImportXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
#include "SimpleFilters.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkImageSource.i


%include itk.i
%include wrap_itkVTKImageImport_ext.i


 class itkVTKImageImportID2 : public itkImageSourceID2 {
   public:
     enum  {  OutputImageDimension = 2 };
     static itkVTKImageImportID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetCallbackUserData(void * _arg);
     virtual void * GetCallbackUserData() const;
   private:
     itkVTKImageImportID2(itkVTKImageImportID2 const & arg0);
     void operator=(itkVTKImageImportID2 const & arg0);
   protected:
     itkVTKImageImportID2();
     ~itkVTKImageImportID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void PropagateRequestedRegion(itkDataObject * arg0);
     virtual void UpdateOutputInformation();
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
 };


 class itkVTKImageImportID2_Pointer {
   public:
     itkVTKImageImportID2_Pointer();
     itkVTKImageImportID2_Pointer(itkVTKImageImportID2_Pointer const & p);
     itkVTKImageImportID2_Pointer(itkVTKImageImportID2 * p);
     ~itkVTKImageImportID2_Pointer();
     itkVTKImageImportID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVTKImageImportID2 * GetPointer() const;
     bool operator<(itkVTKImageImportID2_Pointer const & r) const;
     bool operator>(itkVTKImageImportID2_Pointer const & r) const;
     bool operator<=(itkVTKImageImportID2_Pointer const & r) const;
     bool operator>=(itkVTKImageImportID2_Pointer const & r) const;
     itkVTKImageImportID2_Pointer & operator=(itkVTKImageImportID2_Pointer const & r);
     itkVTKImageImportID2_Pointer & operator=(itkVTKImageImportID2 * r);
     itkVTKImageImportID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVTKImageImportID3 : public itkImageSourceID3 {
   public:
     enum  {  OutputImageDimension = 3 };
     static itkVTKImageImportID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetCallbackUserData(void * _arg);
     virtual void * GetCallbackUserData() const;
   private:
     itkVTKImageImportID3(itkVTKImageImportID3 const & arg0);
     void operator=(itkVTKImageImportID3 const & arg0);
   protected:
     itkVTKImageImportID3();
     ~itkVTKImageImportID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void PropagateRequestedRegion(itkDataObject * arg0);
     virtual void UpdateOutputInformation();
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
 };


 class itkVTKImageImportID3_Pointer {
   public:
     itkVTKImageImportID3_Pointer();
     itkVTKImageImportID3_Pointer(itkVTKImageImportID3_Pointer const & p);
     itkVTKImageImportID3_Pointer(itkVTKImageImportID3 * p);
     ~itkVTKImageImportID3_Pointer();
     itkVTKImageImportID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVTKImageImportID3 * GetPointer() const;
     bool operator<(itkVTKImageImportID3_Pointer const & r) const;
     bool operator>(itkVTKImageImportID3_Pointer const & r) const;
     bool operator<=(itkVTKImageImportID3_Pointer const & r) const;
     bool operator>=(itkVTKImageImportID3_Pointer const & r) const;
     itkVTKImageImportID3_Pointer & operator=(itkVTKImageImportID3_Pointer const & r);
     itkVTKImageImportID3_Pointer & operator=(itkVTKImageImportID3 * r);
     itkVTKImageImportID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVTKImageImportIF2 : public itkImageSourceIF2 {
   public:
     enum  {  OutputImageDimension = 2 };
     static itkVTKImageImportIF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetCallbackUserData(void * _arg);
     virtual void * GetCallbackUserData() const;
   private:
     itkVTKImageImportIF2(itkVTKImageImportIF2 const & arg0);
     void operator=(itkVTKImageImportIF2 const & arg0);
   protected:
     itkVTKImageImportIF2();
     ~itkVTKImageImportIF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void PropagateRequestedRegion(itkDataObject * arg0);
     virtual void UpdateOutputInformation();
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
 };


 class itkVTKImageImportIF2_Pointer {
   public:
     itkVTKImageImportIF2_Pointer();
     itkVTKImageImportIF2_Pointer(itkVTKImageImportIF2_Pointer const & p);
     itkVTKImageImportIF2_Pointer(itkVTKImageImportIF2 * p);
     ~itkVTKImageImportIF2_Pointer();
     itkVTKImageImportIF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVTKImageImportIF2 * GetPointer() const;
     bool operator<(itkVTKImageImportIF2_Pointer const & r) const;
     bool operator>(itkVTKImageImportIF2_Pointer const & r) const;
     bool operator<=(itkVTKImageImportIF2_Pointer const & r) const;
     bool operator>=(itkVTKImageImportIF2_Pointer const & r) const;
     itkVTKImageImportIF2_Pointer & operator=(itkVTKImageImportIF2_Pointer const & r);
     itkVTKImageImportIF2_Pointer & operator=(itkVTKImageImportIF2 * r);
     itkVTKImageImportIF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVTKImageImportIF3 : public itkImageSourceIF3 {
   public:
     enum  {  OutputImageDimension = 3 };
     static itkVTKImageImportIF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetCallbackUserData(void * _arg);
     virtual void * GetCallbackUserData() const;
   private:
     itkVTKImageImportIF3(itkVTKImageImportIF3 const & arg0);
     void operator=(itkVTKImageImportIF3 const & arg0);
   protected:
     itkVTKImageImportIF3();
     ~itkVTKImageImportIF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void PropagateRequestedRegion(itkDataObject * arg0);
     virtual void UpdateOutputInformation();
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
 };


 class itkVTKImageImportIF3_Pointer {
   public:
     itkVTKImageImportIF3_Pointer();
     itkVTKImageImportIF3_Pointer(itkVTKImageImportIF3_Pointer const & p);
     itkVTKImageImportIF3_Pointer(itkVTKImageImportIF3 * p);
     ~itkVTKImageImportIF3_Pointer();
     itkVTKImageImportIF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVTKImageImportIF3 * GetPointer() const;
     bool operator<(itkVTKImageImportIF3_Pointer const & r) const;
     bool operator>(itkVTKImageImportIF3_Pointer const & r) const;
     bool operator<=(itkVTKImageImportIF3_Pointer const & r) const;
     bool operator>=(itkVTKImageImportIF3_Pointer const & r) const;
     itkVTKImageImportIF3_Pointer & operator=(itkVTKImageImportIF3_Pointer const & r);
     itkVTKImageImportIF3_Pointer & operator=(itkVTKImageImportIF3 * r);
     itkVTKImageImportIF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVTKImageImportIUC2 : public itkImageSourceIUC2 {
   public:
     enum  {  OutputImageDimension = 2 };
     static itkVTKImageImportIUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetCallbackUserData(void * _arg);
     virtual void * GetCallbackUserData() const;
   private:
     itkVTKImageImportIUC2(itkVTKImageImportIUC2 const & arg0);
     void operator=(itkVTKImageImportIUC2 const & arg0);
   protected:
     itkVTKImageImportIUC2();
     ~itkVTKImageImportIUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void PropagateRequestedRegion(itkDataObject * arg0);
     virtual void UpdateOutputInformation();
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
 };


 class itkVTKImageImportIUC2_Pointer {
   public:
     itkVTKImageImportIUC2_Pointer();
     itkVTKImageImportIUC2_Pointer(itkVTKImageImportIUC2_Pointer const & p);
     itkVTKImageImportIUC2_Pointer(itkVTKImageImportIUC2 * p);
     ~itkVTKImageImportIUC2_Pointer();
     itkVTKImageImportIUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVTKImageImportIUC2 * GetPointer() const;
     bool operator<(itkVTKImageImportIUC2_Pointer const & r) const;
     bool operator>(itkVTKImageImportIUC2_Pointer const & r) const;
     bool operator<=(itkVTKImageImportIUC2_Pointer const & r) const;
     bool operator>=(itkVTKImageImportIUC2_Pointer const & r) const;
     itkVTKImageImportIUC2_Pointer & operator=(itkVTKImageImportIUC2_Pointer const & r);
     itkVTKImageImportIUC2_Pointer & operator=(itkVTKImageImportIUC2 * r);
     itkVTKImageImportIUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVTKImageImportIUC3 : public itkImageSourceIUC3 {
   public:
     enum  {  OutputImageDimension = 3 };
     static itkVTKImageImportIUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetCallbackUserData(void * _arg);
     virtual void * GetCallbackUserData() const;
   private:
     itkVTKImageImportIUC3(itkVTKImageImportIUC3 const & arg0);
     void operator=(itkVTKImageImportIUC3 const & arg0);
   protected:
     itkVTKImageImportIUC3();
     ~itkVTKImageImportIUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void PropagateRequestedRegion(itkDataObject * arg0);
     virtual void UpdateOutputInformation();
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
 };


 class itkVTKImageImportIUC3_Pointer {
   public:
     itkVTKImageImportIUC3_Pointer();
     itkVTKImageImportIUC3_Pointer(itkVTKImageImportIUC3_Pointer const & p);
     itkVTKImageImportIUC3_Pointer(itkVTKImageImportIUC3 * p);
     ~itkVTKImageImportIUC3_Pointer();
     itkVTKImageImportIUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVTKImageImportIUC3 * GetPointer() const;
     bool operator<(itkVTKImageImportIUC3_Pointer const & r) const;
     bool operator>(itkVTKImageImportIUC3_Pointer const & r) const;
     bool operator<=(itkVTKImageImportIUC3_Pointer const & r) const;
     bool operator>=(itkVTKImageImportIUC3_Pointer const & r) const;
     itkVTKImageImportIUC3_Pointer & operator=(itkVTKImageImportIUC3_Pointer const & r);
     itkVTKImageImportIUC3_Pointer & operator=(itkVTKImageImportIUC3 * r);
     itkVTKImageImportIUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVTKImageImportIUL2 : public itkImageSourceIUL2 {
   public:
     enum  {  OutputImageDimension = 2 };
     static itkVTKImageImportIUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetCallbackUserData(void * _arg);
     virtual void * GetCallbackUserData() const;
   private:
     itkVTKImageImportIUL2(itkVTKImageImportIUL2 const & arg0);
     void operator=(itkVTKImageImportIUL2 const & arg0);
   protected:
     itkVTKImageImportIUL2();
     ~itkVTKImageImportIUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void PropagateRequestedRegion(itkDataObject * arg0);
     virtual void UpdateOutputInformation();
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
 };


 class itkVTKImageImportIUL2_Pointer {
   public:
     itkVTKImageImportIUL2_Pointer();
     itkVTKImageImportIUL2_Pointer(itkVTKImageImportIUL2_Pointer const & p);
     itkVTKImageImportIUL2_Pointer(itkVTKImageImportIUL2 * p);
     ~itkVTKImageImportIUL2_Pointer();
     itkVTKImageImportIUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVTKImageImportIUL2 * GetPointer() const;
     bool operator<(itkVTKImageImportIUL2_Pointer const & r) const;
     bool operator>(itkVTKImageImportIUL2_Pointer const & r) const;
     bool operator<=(itkVTKImageImportIUL2_Pointer const & r) const;
     bool operator>=(itkVTKImageImportIUL2_Pointer const & r) const;
     itkVTKImageImportIUL2_Pointer & operator=(itkVTKImageImportIUL2_Pointer const & r);
     itkVTKImageImportIUL2_Pointer & operator=(itkVTKImageImportIUL2 * r);
     itkVTKImageImportIUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVTKImageImportIUL3 : public itkImageSourceIUL3 {
   public:
     enum  {  OutputImageDimension = 3 };
     static itkVTKImageImportIUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetCallbackUserData(void * _arg);
     virtual void * GetCallbackUserData() const;
   private:
     itkVTKImageImportIUL3(itkVTKImageImportIUL3 const & arg0);
     void operator=(itkVTKImageImportIUL3 const & arg0);
   protected:
     itkVTKImageImportIUL3();
     ~itkVTKImageImportIUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void PropagateRequestedRegion(itkDataObject * arg0);
     virtual void UpdateOutputInformation();
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
 };


 class itkVTKImageImportIUL3_Pointer {
   public:
     itkVTKImageImportIUL3_Pointer();
     itkVTKImageImportIUL3_Pointer(itkVTKImageImportIUL3_Pointer const & p);
     itkVTKImageImportIUL3_Pointer(itkVTKImageImportIUL3 * p);
     ~itkVTKImageImportIUL3_Pointer();
     itkVTKImageImportIUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVTKImageImportIUL3 * GetPointer() const;
     bool operator<(itkVTKImageImportIUL3_Pointer const & r) const;
     bool operator>(itkVTKImageImportIUL3_Pointer const & r) const;
     bool operator<=(itkVTKImageImportIUL3_Pointer const & r) const;
     bool operator>=(itkVTKImageImportIUL3_Pointer const & r) const;
     itkVTKImageImportIUL3_Pointer & operator=(itkVTKImageImportIUL3_Pointer const & r);
     itkVTKImageImportIUL3_Pointer & operator=(itkVTKImageImportIUL3 * r);
     itkVTKImageImportIUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVTKImageImportIUS2 : public itkImageSourceIUS2 {
   public:
     enum  {  OutputImageDimension = 2 };
     static itkVTKImageImportIUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetCallbackUserData(void * _arg);
     virtual void * GetCallbackUserData() const;
   private:
     itkVTKImageImportIUS2(itkVTKImageImportIUS2 const & arg0);
     void operator=(itkVTKImageImportIUS2 const & arg0);
   protected:
     itkVTKImageImportIUS2();
     ~itkVTKImageImportIUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void PropagateRequestedRegion(itkDataObject * arg0);
     virtual void UpdateOutputInformation();
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
 };


 class itkVTKImageImportIUS2_Pointer {
   public:
     itkVTKImageImportIUS2_Pointer();
     itkVTKImageImportIUS2_Pointer(itkVTKImageImportIUS2_Pointer const & p);
     itkVTKImageImportIUS2_Pointer(itkVTKImageImportIUS2 * p);
     ~itkVTKImageImportIUS2_Pointer();
     itkVTKImageImportIUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVTKImageImportIUS2 * GetPointer() const;
     bool operator<(itkVTKImageImportIUS2_Pointer const & r) const;
     bool operator>(itkVTKImageImportIUS2_Pointer const & r) const;
     bool operator<=(itkVTKImageImportIUS2_Pointer const & r) const;
     bool operator>=(itkVTKImageImportIUS2_Pointer const & r) const;
     itkVTKImageImportIUS2_Pointer & operator=(itkVTKImageImportIUS2_Pointer const & r);
     itkVTKImageImportIUS2_Pointer & operator=(itkVTKImageImportIUS2 * r);
     itkVTKImageImportIUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVTKImageImportIUS3 : public itkImageSourceIUS3 {
   public:
     enum  {  OutputImageDimension = 3 };
     static itkVTKImageImportIUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetCallbackUserData(void * _arg);
     virtual void * GetCallbackUserData() const;
   private:
     itkVTKImageImportIUS3(itkVTKImageImportIUS3 const & arg0);
     void operator=(itkVTKImageImportIUS3 const & arg0);
   protected:
     itkVTKImageImportIUS3();
     ~itkVTKImageImportIUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void PropagateRequestedRegion(itkDataObject * arg0);
     virtual void UpdateOutputInformation();
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
 };


 class itkVTKImageImportIUS3_Pointer {
   public:
     itkVTKImageImportIUS3_Pointer();
     itkVTKImageImportIUS3_Pointer(itkVTKImageImportIUS3_Pointer const & p);
     itkVTKImageImportIUS3_Pointer(itkVTKImageImportIUS3 * p);
     ~itkVTKImageImportIUS3_Pointer();
     itkVTKImageImportIUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVTKImageImportIUS3 * GetPointer() const;
     bool operator<(itkVTKImageImportIUS3_Pointer const & r) const;
     bool operator>(itkVTKImageImportIUS3_Pointer const & r) const;
     bool operator<=(itkVTKImageImportIUS3_Pointer const & r) const;
     bool operator>=(itkVTKImageImportIUS3_Pointer const & r) const;
     itkVTKImageImportIUS3_Pointer & operator=(itkVTKImageImportIUS3_Pointer const & r);
     itkVTKImageImportIUS3_Pointer & operator=(itkVTKImageImportIUS3 * r);
     itkVTKImageImportIUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


