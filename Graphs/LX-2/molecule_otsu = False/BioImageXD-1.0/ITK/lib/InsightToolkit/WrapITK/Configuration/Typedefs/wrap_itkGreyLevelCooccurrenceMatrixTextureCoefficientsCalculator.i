// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkGreyLevelCooccurrenceMatrixTextureCoefficientsCalculatorChicken
#endif
#ifdef SWIGCSHARP
%module itkGreyLevelCooccurrenceMatrixTextureCoefficientsCalculatorCsharp
#endif
#ifdef SWIGGUILE
%module itkGreyLevelCooccurrenceMatrixTextureCoefficientsCalculatorGuile
#endif
#ifdef SWIGJAVA
%module itkGreyLevelCooccurrenceMatrixTextureCoefficientsCalculatorJava
#endif
#ifdef SWIGLUA
%module itkGreyLevelCooccurrenceMatrixTextureCoefficientsCalculatorLua
#endif
#ifdef SWIGMODULA3
%module itkGreyLevelCooccurrenceMatrixTextureCoefficientsCalculatorModula3
#endif
#ifdef SWIGMZSCHEME
%module itkGreyLevelCooccurrenceMatrixTextureCoefficientsCalculatorMzscheme
#endif
#ifdef SWIGOCAML
%module itkGreyLevelCooccurrenceMatrixTextureCoefficientsCalculatorOcaml
#endif
#ifdef SWIGPERL
%module itkGreyLevelCooccurrenceMatrixTextureCoefficientsCalculatorPerl
#endif
#ifdef SWIGPERL5
%module itkGreyLevelCooccurrenceMatrixTextureCoefficientsCalculatorPerl5
#endif
#ifdef SWIGPHP
%module itkGreyLevelCooccurrenceMatrixTextureCoefficientsCalculatorPhp
#endif
#ifdef SWIGPHP4
%module itkGreyLevelCooccurrenceMatrixTextureCoefficientsCalculatorPhp4
#endif
#ifdef SWIGPHP5
%module itkGreyLevelCooccurrenceMatrixTextureCoefficientsCalculatorPhp5
#endif
#ifdef SWIGPIKE
%module itkGreyLevelCooccurrenceMatrixTextureCoefficientsCalculatorPike
#endif
#ifdef SWIGPYTHON
%module itkGreyLevelCooccurrenceMatrixTextureCoefficientsCalculatorPython
#endif
#ifdef SWIGR
%module itkGreyLevelCooccurrenceMatrixTextureCoefficientsCalculatorR
#endif
#ifdef SWIGRUBY
%module itkGreyLevelCooccurrenceMatrixTextureCoefficientsCalculatorRuby
#endif
#ifdef SWIGSEXP
%module itkGreyLevelCooccurrenceMatrixTextureCoefficientsCalculatorSexp
#endif
#ifdef SWIGTCL
%module itkGreyLevelCooccurrenceMatrixTextureCoefficientsCalculatorTcl
#endif
#ifdef SWIGXML
%module itkGreyLevelCooccurrenceMatrixTextureCoefficientsCalculatorXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Numerics.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkSimpleDataObjectDecorator.i
%import wrap_itkHistogram.i


%include itk.i
%include wrap_itkGreyLevelCooccurrenceMatrixTextureCoefficientsCalculator_ext.i


 class itkHistogramToTextureFeaturesFilterHD : public itkProcessObject {
   public:
     enum TextureFeatureName {  Energy = 0,  Entropy = 1,  Correlation = 2,  InverseDifferenceMoment = 3,  Inertia = 4,  ClusterShade = 5,  ClusterProminence = 6,  HaralickCorrelation = 7,  InvalidFeatureName = 8 };
     virtual char const * GetNameOfClass() const;
     static itkHistogramToTextureFeaturesFilterHD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void SetInput(itkHistogramD const * histogram);
     itkHistogramD const * GetInput() const;
     double GetEnergy() const;
     itkSimpleDataObjectDecoratorD const * GetEnergyOutput() const;
     double GetEntropy() const;
     itkSimpleDataObjectDecoratorD const * GetEntropyOutput() const;
     double GetCorrelation() const;
     itkSimpleDataObjectDecoratorD const * GetCorrelationOutput() const;
     double GetInverseDifferenceMoment() const;
     itkSimpleDataObjectDecoratorD const * GetInverseDifferenceMomentOutput() const;
     double GetInertia() const;
     itkSimpleDataObjectDecoratorD const * GetInertiaOutput() const;
     double GetClusterShade() const;
     itkSimpleDataObjectDecoratorD const * GetClusterShadeOutput() const;
     double GetClusterProminence() const;
     itkSimpleDataObjectDecoratorD const * GetClusterProminenceOutput() const;
     double GetHaralickCorrelation() const;
     itkSimpleDataObjectDecoratorD const * GetHaralickCorrelationOutput() const;
     double GetFeature(itkHistogramToTextureFeaturesFilterHD::TextureFeatureName name);
   private:
     itkHistogramToTextureFeaturesFilterHD(itkHistogramToTextureFeaturesFilterHD const & arg0);
     void operator=(itkHistogramToTextureFeaturesFilterHD const & arg0);
     void ComputeMeansAndVariances(double & pixelMean, double & marginalMean, double & marginalDevSquared, double & pixelVariance);
   protected:
     itkHistogramToTextureFeaturesFilterHD();
     ~itkHistogramToTextureFeaturesFilterHD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int arg0);
     virtual void GenerateData();
 };


 class itkHistogramToTextureFeaturesFilterHD_Pointer {
   public:
     itkHistogramToTextureFeaturesFilterHD_Pointer();
     itkHistogramToTextureFeaturesFilterHD_Pointer(itkHistogramToTextureFeaturesFilterHD_Pointer const & p);
     itkHistogramToTextureFeaturesFilterHD_Pointer(itkHistogramToTextureFeaturesFilterHD * p);
     ~itkHistogramToTextureFeaturesFilterHD_Pointer();
     itkHistogramToTextureFeaturesFilterHD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkHistogramToTextureFeaturesFilterHD * GetPointer() const;
     bool operator<(itkHistogramToTextureFeaturesFilterHD_Pointer const & r) const;
     bool operator>(itkHistogramToTextureFeaturesFilterHD_Pointer const & r) const;
     bool operator<=(itkHistogramToTextureFeaturesFilterHD_Pointer const & r) const;
     bool operator>=(itkHistogramToTextureFeaturesFilterHD_Pointer const & r) const;
     itkHistogramToTextureFeaturesFilterHD_Pointer & operator=(itkHistogramToTextureFeaturesFilterHD_Pointer const & r);
     itkHistogramToTextureFeaturesFilterHD_Pointer & operator=(itkHistogramToTextureFeaturesFilterHD * r);
     itkHistogramToTextureFeaturesFilterHD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkHistogramToTextureFeaturesFilterHF : public itkProcessObject {
   public:
     enum TextureFeatureName {  Energy = 0,  Entropy = 1,  Correlation = 2,  InverseDifferenceMoment = 3,  Inertia = 4,  ClusterShade = 5,  ClusterProminence = 6,  HaralickCorrelation = 7,  InvalidFeatureName = 8 };
     virtual char const * GetNameOfClass() const;
     static itkHistogramToTextureFeaturesFilterHF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void SetInput(itkHistogramF const * histogram);
     itkHistogramF const * GetInput() const;
     float GetEnergy() const;
     itkSimpleDataObjectDecoratorF const * GetEnergyOutput() const;
     float GetEntropy() const;
     itkSimpleDataObjectDecoratorF const * GetEntropyOutput() const;
     float GetCorrelation() const;
     itkSimpleDataObjectDecoratorF const * GetCorrelationOutput() const;
     float GetInverseDifferenceMoment() const;
     itkSimpleDataObjectDecoratorF const * GetInverseDifferenceMomentOutput() const;
     float GetInertia() const;
     itkSimpleDataObjectDecoratorF const * GetInertiaOutput() const;
     float GetClusterShade() const;
     itkSimpleDataObjectDecoratorF const * GetClusterShadeOutput() const;
     float GetClusterProminence() const;
     itkSimpleDataObjectDecoratorF const * GetClusterProminenceOutput() const;
     float GetHaralickCorrelation() const;
     itkSimpleDataObjectDecoratorF const * GetHaralickCorrelationOutput() const;
     float GetFeature(itkHistogramToTextureFeaturesFilterHF::TextureFeatureName name);
   private:
     itkHistogramToTextureFeaturesFilterHF(itkHistogramToTextureFeaturesFilterHF const & arg0);
     void operator=(itkHistogramToTextureFeaturesFilterHF const & arg0);
     void ComputeMeansAndVariances(double & pixelMean, double & marginalMean, double & marginalDevSquared, double & pixelVariance);
   protected:
     itkHistogramToTextureFeaturesFilterHF();
     ~itkHistogramToTextureFeaturesFilterHF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual itkDataObject_Pointer MakeOutput(unsigned int arg0);
     virtual void GenerateData();
 };


 class itkHistogramToTextureFeaturesFilterHF_Pointer {
   public:
     itkHistogramToTextureFeaturesFilterHF_Pointer();
     itkHistogramToTextureFeaturesFilterHF_Pointer(itkHistogramToTextureFeaturesFilterHF_Pointer const & p);
     itkHistogramToTextureFeaturesFilterHF_Pointer(itkHistogramToTextureFeaturesFilterHF * p);
     ~itkHistogramToTextureFeaturesFilterHF_Pointer();
     itkHistogramToTextureFeaturesFilterHF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkHistogramToTextureFeaturesFilterHF * GetPointer() const;
     bool operator<(itkHistogramToTextureFeaturesFilterHF_Pointer const & r) const;
     bool operator>(itkHistogramToTextureFeaturesFilterHF_Pointer const & r) const;
     bool operator<=(itkHistogramToTextureFeaturesFilterHF_Pointer const & r) const;
     bool operator>=(itkHistogramToTextureFeaturesFilterHF_Pointer const & r) const;
     itkHistogramToTextureFeaturesFilterHF_Pointer & operator=(itkHistogramToTextureFeaturesFilterHF_Pointer const & r);
     itkHistogramToTextureFeaturesFilterHF_Pointer & operator=(itkHistogramToTextureFeaturesFilterHF * r);
     itkHistogramToTextureFeaturesFilterHF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


