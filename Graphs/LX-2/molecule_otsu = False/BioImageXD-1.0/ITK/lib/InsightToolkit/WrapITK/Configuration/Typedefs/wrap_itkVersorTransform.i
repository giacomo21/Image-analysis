// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkVersorTransformChicken
#endif
#ifdef SWIGCSHARP
%module itkVersorTransformCsharp
#endif
#ifdef SWIGGUILE
%module itkVersorTransformGuile
#endif
#ifdef SWIGJAVA
%module itkVersorTransformJava
#endif
#ifdef SWIGLUA
%module itkVersorTransformLua
#endif
#ifdef SWIGMODULA3
%module itkVersorTransformModula3
#endif
#ifdef SWIGMZSCHEME
%module itkVersorTransformMzscheme
#endif
#ifdef SWIGOCAML
%module itkVersorTransformOcaml
#endif
#ifdef SWIGPERL
%module itkVersorTransformPerl
#endif
#ifdef SWIGPERL5
%module itkVersorTransformPerl5
#endif
#ifdef SWIGPHP
%module itkVersorTransformPhp
#endif
#ifdef SWIGPHP4
%module itkVersorTransformPhp4
#endif
#ifdef SWIGPHP5
%module itkVersorTransformPhp5
#endif
#ifdef SWIGPIKE
%module itkVersorTransformPike
#endif
#ifdef SWIGPYTHON
%module itkVersorTransformPython
#endif
#ifdef SWIGR
%module itkVersorTransformR
#endif
#ifdef SWIGRUBY
%module itkVersorTransformRuby
#endif
#ifdef SWIGSEXP
%module itkVersorTransformSexp
#endif
#ifdef SWIGTCL
%module itkVersorTransformTcl
#endif
#ifdef SWIGXML
%module itkVersorTransformXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
%}


%{
%}




%import wrap_itkPoint.i
%import wrap_ITKRigidTransforms.i
%import wrap_itkArray2D.i
%import wrap_itkVector.i
%import wrap_itkArray.i
%import wrap_itkMatrix.i
%import wrap_ITKCommonBase.i
%import wrap_itkVersor.i


%include itk.i
%include wrap_itkVersorTransform_ext.i


 class itkVersorTransformD : public itkRigid3DTransformD {
   public:
     enum  {  SpaceDimension = 3 };
     enum  {  InputSpaceDimension = 3 };
     enum  {  OutputSpaceDimension = 3 };
     enum  {  ParametersDimension = 3 };
     virtual char const * GetNameOfClass() const;
     static itkVersorTransformD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void SetParameters(itkArrayD const & parameters);
     virtual itkArrayD const & GetParameters() const;
     void SetRotation(itkVersorD const & versor);
     void SetRotation(itkVectorD3 const & axis, double angle);
     virtual itkVersorD const & GetVersor() const;
     virtual void SetIdentity();
     virtual itkArray2DD const & GetJacobian(itkPointD3 const & point) const;
   private:
     itkVersorTransformD(itkVersorTransformD const & other);
     itkVersorTransformD const & operator=(itkVersorTransformD const & arg0);
   protected:
     itkVersorTransformD(itkMatrixD33 const & matrix, itkVectorD3 const & offset);
     itkVersorTransformD(unsigned int outputDims, unsigned int paramDims);
     itkVersorTransformD();
     ~itkVersorTransformD();
     virtual void SetRotationMatrix(itkMatrixD33 const & matrix);
     void SetVarVersor(itkVersorD const & newVersor);
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ComputeMatrix();
     virtual void ComputeMatrixParameters();
 };


 class itkVersorTransformD_Pointer {
   public:
     itkVersorTransformD_Pointer();
     itkVersorTransformD_Pointer(itkVersorTransformD_Pointer const & p);
     itkVersorTransformD_Pointer(itkVersorTransformD * p);
     ~itkVersorTransformD_Pointer();
     itkVersorTransformD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVersorTransformD * GetPointer() const;
     bool operator<(itkVersorTransformD_Pointer const & r) const;
     bool operator>(itkVersorTransformD_Pointer const & r) const;
     bool operator<=(itkVersorTransformD_Pointer const & r) const;
     bool operator>=(itkVersorTransformD_Pointer const & r) const;
     itkVersorTransformD_Pointer & operator=(itkVersorTransformD_Pointer const & r);
     itkVersorTransformD_Pointer & operator=(itkVersorTransformD * r);
     itkVersorTransformD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


