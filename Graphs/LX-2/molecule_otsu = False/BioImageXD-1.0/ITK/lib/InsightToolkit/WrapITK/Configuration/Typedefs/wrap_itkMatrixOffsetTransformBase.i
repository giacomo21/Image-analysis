// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkMatrixOffsetTransformBaseChicken
#endif
#ifdef SWIGCSHARP
%module itkMatrixOffsetTransformBaseCsharp
#endif
#ifdef SWIGGUILE
%module itkMatrixOffsetTransformBaseGuile
#endif
#ifdef SWIGJAVA
%module itkMatrixOffsetTransformBaseJava
#endif
#ifdef SWIGLUA
%module itkMatrixOffsetTransformBaseLua
#endif
#ifdef SWIGMODULA3
%module itkMatrixOffsetTransformBaseModula3
#endif
#ifdef SWIGMZSCHEME
%module itkMatrixOffsetTransformBaseMzscheme
#endif
#ifdef SWIGOCAML
%module itkMatrixOffsetTransformBaseOcaml
#endif
#ifdef SWIGPERL
%module itkMatrixOffsetTransformBasePerl
#endif
#ifdef SWIGPERL5
%module itkMatrixOffsetTransformBasePerl5
#endif
#ifdef SWIGPHP
%module itkMatrixOffsetTransformBasePhp
#endif
#ifdef SWIGPHP4
%module itkMatrixOffsetTransformBasePhp4
#endif
#ifdef SWIGPHP5
%module itkMatrixOffsetTransformBasePhp5
#endif
#ifdef SWIGPIKE
%module itkMatrixOffsetTransformBasePike
#endif
#ifdef SWIGPYTHON
%module itkMatrixOffsetTransformBasePython
#endif
#ifdef SWIGR
%module itkMatrixOffsetTransformBaseR
#endif
#ifdef SWIGRUBY
%module itkMatrixOffsetTransformBaseRuby
#endif
#ifdef SWIGSEXP
%module itkMatrixOffsetTransformBaseSexp
#endif
#ifdef SWIGTCL
%module itkMatrixOffsetTransformBaseTcl
#endif
#ifdef SWIGXML
%module itkMatrixOffsetTransformBaseXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
%}


%{
%}




%import wrap_itkPoint.i
%import wrap_itkTransform.i
%import wrap_itkArray2D.i
%import wrap_itkCovariantVector.i
%import wrap_itkVector.i
%import wrap_itkArray.i
%import wrap_itkMatrix.i
%import wrap_ITKCommonBase.i


%include itk.i
%include wrap_itkMatrixOffsetTransformBase_ext.i


 class itkMatrixOffsetTransformBaseD22 : public itkTransformD22 {
   public:
     enum  {  InputSpaceDimension = 2 };
     enum  {  OutputSpaceDimension = 2 };
     enum  {  ParametersDimension = 6 };
     virtual char const * GetNameOfClass() const;
     static itkMatrixOffsetTransformBaseD22_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void SetIdentity();
     virtual void SetMatrix(itkMatrixD22 const & matrix);
     itkMatrixD22 const & GetMatrix() const;
     void SetOffset(itkVectorD2 const & offset);
     itkVectorD2 const & GetOffset() const;
     void SetCenter(itkPointD2 const & center);
     itkPointD2 const & GetCenter() const;
     void SetTranslation(itkVectorD2 const & translation);
     itkVectorD2 const & GetTranslation() const;
     virtual void SetParameters(itkArrayD const & parameters);
     virtual itkArrayD const & GetParameters() const;
     virtual void SetFixedParameters(itkArrayD const & arg0);
     virtual itkArrayD const & GetFixedParameters() const;
     void Compose(itkMatrixOffsetTransformBaseD22 const * other, bool pre = 0);
     virtual itkPointD2 TransformPoint(itkPointD2 const & point) const;
     virtual itkVectorD2 TransformVector(itkVectorD2 const & vector) const;
     virtual vnl_vector_fixed< double, 2u > TransformVector(vnl_vector_fixed< double, 2u > const & vector) const;
     virtual itkCovariantVectorD2 TransformCovariantVector(itkCovariantVectorD2 const & vector) const;
     virtual itkArray2DD const & GetJacobian(itkPointD2 const & point) const;
     bool GetInverse(itkMatrixOffsetTransformBaseD22 * inverse) const;
     virtual itkTransformBase_Pointer GetInverseTransform() const;
     itkMatrixD22 const & GetInverseMatrix() const;
     virtual bool IsLinear() const;
   private:
     itkMatrixOffsetTransformBaseD22(itkMatrixOffsetTransformBaseD22 const & other);
     itkMatrixOffsetTransformBaseD22 const & operator=(itkMatrixOffsetTransformBaseD22 const & arg0);
   protected:
     itkMatrixOffsetTransformBaseD22(itkMatrixD22 const & matrix, itkVectorD2 const & offset);
     itkMatrixOffsetTransformBaseD22(unsigned int outputDims, unsigned int paramDims);
     itkMatrixOffsetTransformBaseD22();
     ~itkMatrixOffsetTransformBaseD22();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & s, itkIndent indent) const;
     itkMatrixD22 const & GetVarInverseMatrix() const;
     void SetVarInverseMatrix(itkMatrixD22 const & matrix) const;
     bool InverseMatrixIsOld() const;
     virtual void ComputeMatrixParameters();
     virtual void ComputeMatrix();
     void SetVarMatrix(itkMatrixD22 const & matrix);
     virtual void ComputeTranslation();
     void SetVarTranslation(itkVectorD2 const & translation);
     virtual void ComputeOffset();
     void SetVarOffset(itkVectorD2 const & offset);
     void SetVarCenter(itkPointD2 const & center);
 };


 class itkMatrixOffsetTransformBaseD22_Pointer {
   public:
     itkMatrixOffsetTransformBaseD22_Pointer();
     itkMatrixOffsetTransformBaseD22_Pointer(itkMatrixOffsetTransformBaseD22_Pointer const & p);
     itkMatrixOffsetTransformBaseD22_Pointer(itkMatrixOffsetTransformBaseD22 * p);
     ~itkMatrixOffsetTransformBaseD22_Pointer();
     itkMatrixOffsetTransformBaseD22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMatrixOffsetTransformBaseD22 * GetPointer() const;
     bool operator<(itkMatrixOffsetTransformBaseD22_Pointer const & r) const;
     bool operator>(itkMatrixOffsetTransformBaseD22_Pointer const & r) const;
     bool operator<=(itkMatrixOffsetTransformBaseD22_Pointer const & r) const;
     bool operator>=(itkMatrixOffsetTransformBaseD22_Pointer const & r) const;
     itkMatrixOffsetTransformBaseD22_Pointer & operator=(itkMatrixOffsetTransformBaseD22_Pointer const & r);
     itkMatrixOffsetTransformBaseD22_Pointer & operator=(itkMatrixOffsetTransformBaseD22 * r);
     itkMatrixOffsetTransformBaseD22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMatrixOffsetTransformBaseD33 : public itkTransformD33 {
   public:
     enum  {  InputSpaceDimension = 3 };
     enum  {  OutputSpaceDimension = 3 };
     enum  {  ParametersDimension = 12 };
     virtual char const * GetNameOfClass() const;
     static itkMatrixOffsetTransformBaseD33_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void SetIdentity();
     virtual void SetMatrix(itkMatrixD33 const & matrix);
     itkMatrixD33 const & GetMatrix() const;
     void SetOffset(itkVectorD3 const & offset);
     itkVectorD3 const & GetOffset() const;
     void SetCenter(itkPointD3 const & center);
     itkPointD3 const & GetCenter() const;
     void SetTranslation(itkVectorD3 const & translation);
     itkVectorD3 const & GetTranslation() const;
     virtual void SetParameters(itkArrayD const & parameters);
     virtual itkArrayD const & GetParameters() const;
     virtual void SetFixedParameters(itkArrayD const & arg0);
     virtual itkArrayD const & GetFixedParameters() const;
     void Compose(itkMatrixOffsetTransformBaseD33 const * other, bool pre = 0);
     virtual itkPointD3 TransformPoint(itkPointD3 const & point) const;
     virtual itkVectorD3 TransformVector(itkVectorD3 const & vector) const;
     virtual vnl_vector_fixed< double, 3u > TransformVector(vnl_vector_fixed< double, 3u > const & vector) const;
     virtual itkCovariantVectorD3 TransformCovariantVector(itkCovariantVectorD3 const & vector) const;
     virtual itkArray2DD const & GetJacobian(itkPointD3 const & point) const;
     bool GetInverse(itkMatrixOffsetTransformBaseD33 * inverse) const;
     virtual itkTransformBase_Pointer GetInverseTransform() const;
     itkMatrixD33 const & GetInverseMatrix() const;
     virtual bool IsLinear() const;
   private:
     itkMatrixOffsetTransformBaseD33(itkMatrixOffsetTransformBaseD33 const & other);
     itkMatrixOffsetTransformBaseD33 const & operator=(itkMatrixOffsetTransformBaseD33 const & arg0);
   protected:
     itkMatrixOffsetTransformBaseD33(itkMatrixD33 const & matrix, itkVectorD3 const & offset);
     itkMatrixOffsetTransformBaseD33(unsigned int outputDims, unsigned int paramDims);
     itkMatrixOffsetTransformBaseD33();
     ~itkMatrixOffsetTransformBaseD33();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & s, itkIndent indent) const;
     itkMatrixD33 const & GetVarInverseMatrix() const;
     void SetVarInverseMatrix(itkMatrixD33 const & matrix) const;
     bool InverseMatrixIsOld() const;
     virtual void ComputeMatrixParameters();
     virtual void ComputeMatrix();
     void SetVarMatrix(itkMatrixD33 const & matrix);
     virtual void ComputeTranslation();
     void SetVarTranslation(itkVectorD3 const & translation);
     virtual void ComputeOffset();
     void SetVarOffset(itkVectorD3 const & offset);
     void SetVarCenter(itkPointD3 const & center);
 };


 class itkMatrixOffsetTransformBaseD33_Pointer {
   public:
     itkMatrixOffsetTransformBaseD33_Pointer();
     itkMatrixOffsetTransformBaseD33_Pointer(itkMatrixOffsetTransformBaseD33_Pointer const & p);
     itkMatrixOffsetTransformBaseD33_Pointer(itkMatrixOffsetTransformBaseD33 * p);
     ~itkMatrixOffsetTransformBaseD33_Pointer();
     itkMatrixOffsetTransformBaseD33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMatrixOffsetTransformBaseD33 * GetPointer() const;
     bool operator<(itkMatrixOffsetTransformBaseD33_Pointer const & r) const;
     bool operator>(itkMatrixOffsetTransformBaseD33_Pointer const & r) const;
     bool operator<=(itkMatrixOffsetTransformBaseD33_Pointer const & r) const;
     bool operator>=(itkMatrixOffsetTransformBaseD33_Pointer const & r) const;
     itkMatrixOffsetTransformBaseD33_Pointer & operator=(itkMatrixOffsetTransformBaseD33_Pointer const & r);
     itkMatrixOffsetTransformBaseD33_Pointer & operator=(itkMatrixOffsetTransformBaseD33 * r);
     itkMatrixOffsetTransformBaseD33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


