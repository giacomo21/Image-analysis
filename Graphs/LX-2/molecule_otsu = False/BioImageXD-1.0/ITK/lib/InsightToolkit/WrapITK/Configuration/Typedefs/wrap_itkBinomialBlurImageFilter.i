// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkBinomialBlurImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkBinomialBlurImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkBinomialBlurImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkBinomialBlurImageFilterJava
#endif
#ifdef SWIGLUA
%module itkBinomialBlurImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkBinomialBlurImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkBinomialBlurImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkBinomialBlurImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkBinomialBlurImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkBinomialBlurImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkBinomialBlurImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkBinomialBlurImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkBinomialBlurImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkBinomialBlurImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkBinomialBlurImageFilterPython
#endif
#ifdef SWIGR
%module itkBinomialBlurImageFilterR
#endif
#ifdef SWIGRUBY
%module itkBinomialBlurImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkBinomialBlurImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkBinomialBlurImageFilterTcl
#endif
#ifdef SWIGXML
%module itkBinomialBlurImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Filtering.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkImageToImageFilterA.i


%include itk.i
%include wrap_itkBinomialBlurImageFilter_ext.i


 class itkBinomialBlurImageFilterID2ID2 : public itkImageToImageFilterID2ID2 {
   public:
     enum  {  NDimensions = 2 };
     enum  {  NOutputDimensions = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  InputConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     static itkBinomialBlurImageFilterID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetRepetitions(unsigned int const _arg);
     virtual unsigned int GetRepetitions() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkBinomialBlurImageFilterID2ID2(itkBinomialBlurImageFilterID2ID2 const & arg0);
     void operator=(itkBinomialBlurImageFilterID2ID2 const & arg0);
   protected:
     itkBinomialBlurImageFilterID2ID2();
     ~itkBinomialBlurImageFilterID2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkBinomialBlurImageFilterID2ID2_Pointer {
   public:
     itkBinomialBlurImageFilterID2ID2_Pointer();
     itkBinomialBlurImageFilterID2ID2_Pointer(itkBinomialBlurImageFilterID2ID2_Pointer const & p);
     itkBinomialBlurImageFilterID2ID2_Pointer(itkBinomialBlurImageFilterID2ID2 * p);
     ~itkBinomialBlurImageFilterID2ID2_Pointer();
     itkBinomialBlurImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinomialBlurImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkBinomialBlurImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkBinomialBlurImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkBinomialBlurImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkBinomialBlurImageFilterID2ID2_Pointer const & r) const;
     itkBinomialBlurImageFilterID2ID2_Pointer & operator=(itkBinomialBlurImageFilterID2ID2_Pointer const & r);
     itkBinomialBlurImageFilterID2ID2_Pointer & operator=(itkBinomialBlurImageFilterID2ID2 * r);
     itkBinomialBlurImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinomialBlurImageFilterID3ID3 : public itkImageToImageFilterID3ID3 {
   public:
     enum  {  NDimensions = 3 };
     enum  {  NOutputDimensions = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  InputConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     static itkBinomialBlurImageFilterID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetRepetitions(unsigned int const _arg);
     virtual unsigned int GetRepetitions() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkBinomialBlurImageFilterID3ID3(itkBinomialBlurImageFilterID3ID3 const & arg0);
     void operator=(itkBinomialBlurImageFilterID3ID3 const & arg0);
   protected:
     itkBinomialBlurImageFilterID3ID3();
     ~itkBinomialBlurImageFilterID3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkBinomialBlurImageFilterID3ID3_Pointer {
   public:
     itkBinomialBlurImageFilterID3ID3_Pointer();
     itkBinomialBlurImageFilterID3ID3_Pointer(itkBinomialBlurImageFilterID3ID3_Pointer const & p);
     itkBinomialBlurImageFilterID3ID3_Pointer(itkBinomialBlurImageFilterID3ID3 * p);
     ~itkBinomialBlurImageFilterID3ID3_Pointer();
     itkBinomialBlurImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinomialBlurImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkBinomialBlurImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkBinomialBlurImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkBinomialBlurImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkBinomialBlurImageFilterID3ID3_Pointer const & r) const;
     itkBinomialBlurImageFilterID3ID3_Pointer & operator=(itkBinomialBlurImageFilterID3ID3_Pointer const & r);
     itkBinomialBlurImageFilterID3ID3_Pointer & operator=(itkBinomialBlurImageFilterID3ID3 * r);
     itkBinomialBlurImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinomialBlurImageFilterIF2IF2 : public itkImageToImageFilterIF2IF2 {
   public:
     enum  {  NDimensions = 2 };
     enum  {  NOutputDimensions = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  InputConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     static itkBinomialBlurImageFilterIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetRepetitions(unsigned int const _arg);
     virtual unsigned int GetRepetitions() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkBinomialBlurImageFilterIF2IF2(itkBinomialBlurImageFilterIF2IF2 const & arg0);
     void operator=(itkBinomialBlurImageFilterIF2IF2 const & arg0);
   protected:
     itkBinomialBlurImageFilterIF2IF2();
     ~itkBinomialBlurImageFilterIF2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkBinomialBlurImageFilterIF2IF2_Pointer {
   public:
     itkBinomialBlurImageFilterIF2IF2_Pointer();
     itkBinomialBlurImageFilterIF2IF2_Pointer(itkBinomialBlurImageFilterIF2IF2_Pointer const & p);
     itkBinomialBlurImageFilterIF2IF2_Pointer(itkBinomialBlurImageFilterIF2IF2 * p);
     ~itkBinomialBlurImageFilterIF2IF2_Pointer();
     itkBinomialBlurImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinomialBlurImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkBinomialBlurImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkBinomialBlurImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkBinomialBlurImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkBinomialBlurImageFilterIF2IF2_Pointer const & r) const;
     itkBinomialBlurImageFilterIF2IF2_Pointer & operator=(itkBinomialBlurImageFilterIF2IF2_Pointer const & r);
     itkBinomialBlurImageFilterIF2IF2_Pointer & operator=(itkBinomialBlurImageFilterIF2IF2 * r);
     itkBinomialBlurImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinomialBlurImageFilterIF3IF3 : public itkImageToImageFilterIF3IF3 {
   public:
     enum  {  NDimensions = 3 };
     enum  {  NOutputDimensions = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  InputConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     static itkBinomialBlurImageFilterIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetRepetitions(unsigned int const _arg);
     virtual unsigned int GetRepetitions() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkBinomialBlurImageFilterIF3IF3(itkBinomialBlurImageFilterIF3IF3 const & arg0);
     void operator=(itkBinomialBlurImageFilterIF3IF3 const & arg0);
   protected:
     itkBinomialBlurImageFilterIF3IF3();
     ~itkBinomialBlurImageFilterIF3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkBinomialBlurImageFilterIF3IF3_Pointer {
   public:
     itkBinomialBlurImageFilterIF3IF3_Pointer();
     itkBinomialBlurImageFilterIF3IF3_Pointer(itkBinomialBlurImageFilterIF3IF3_Pointer const & p);
     itkBinomialBlurImageFilterIF3IF3_Pointer(itkBinomialBlurImageFilterIF3IF3 * p);
     ~itkBinomialBlurImageFilterIF3IF3_Pointer();
     itkBinomialBlurImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinomialBlurImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkBinomialBlurImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkBinomialBlurImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkBinomialBlurImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkBinomialBlurImageFilterIF3IF3_Pointer const & r) const;
     itkBinomialBlurImageFilterIF3IF3_Pointer & operator=(itkBinomialBlurImageFilterIF3IF3_Pointer const & r);
     itkBinomialBlurImageFilterIF3IF3_Pointer & operator=(itkBinomialBlurImageFilterIF3IF3 * r);
     itkBinomialBlurImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinomialBlurImageFilterIUC2IUC2 : public itkImageToImageFilterIUC2IUC2 {
   public:
     enum  {  NDimensions = 2 };
     enum  {  NOutputDimensions = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  InputConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     static itkBinomialBlurImageFilterIUC2IUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetRepetitions(unsigned int const _arg);
     virtual unsigned int GetRepetitions() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkBinomialBlurImageFilterIUC2IUC2(itkBinomialBlurImageFilterIUC2IUC2 const & arg0);
     void operator=(itkBinomialBlurImageFilterIUC2IUC2 const & arg0);
   protected:
     itkBinomialBlurImageFilterIUC2IUC2();
     ~itkBinomialBlurImageFilterIUC2IUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkBinomialBlurImageFilterIUC2IUC2_Pointer {
   public:
     itkBinomialBlurImageFilterIUC2IUC2_Pointer();
     itkBinomialBlurImageFilterIUC2IUC2_Pointer(itkBinomialBlurImageFilterIUC2IUC2_Pointer const & p);
     itkBinomialBlurImageFilterIUC2IUC2_Pointer(itkBinomialBlurImageFilterIUC2IUC2 * p);
     ~itkBinomialBlurImageFilterIUC2IUC2_Pointer();
     itkBinomialBlurImageFilterIUC2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinomialBlurImageFilterIUC2IUC2 * GetPointer() const;
     bool operator<(itkBinomialBlurImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>(itkBinomialBlurImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator<=(itkBinomialBlurImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>=(itkBinomialBlurImageFilterIUC2IUC2_Pointer const & r) const;
     itkBinomialBlurImageFilterIUC2IUC2_Pointer & operator=(itkBinomialBlurImageFilterIUC2IUC2_Pointer const & r);
     itkBinomialBlurImageFilterIUC2IUC2_Pointer & operator=(itkBinomialBlurImageFilterIUC2IUC2 * r);
     itkBinomialBlurImageFilterIUC2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinomialBlurImageFilterIUC3IUC3 : public itkImageToImageFilterIUC3IUC3 {
   public:
     enum  {  NDimensions = 3 };
     enum  {  NOutputDimensions = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  InputConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     static itkBinomialBlurImageFilterIUC3IUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetRepetitions(unsigned int const _arg);
     virtual unsigned int GetRepetitions() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkBinomialBlurImageFilterIUC3IUC3(itkBinomialBlurImageFilterIUC3IUC3 const & arg0);
     void operator=(itkBinomialBlurImageFilterIUC3IUC3 const & arg0);
   protected:
     itkBinomialBlurImageFilterIUC3IUC3();
     ~itkBinomialBlurImageFilterIUC3IUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkBinomialBlurImageFilterIUC3IUC3_Pointer {
   public:
     itkBinomialBlurImageFilterIUC3IUC3_Pointer();
     itkBinomialBlurImageFilterIUC3IUC3_Pointer(itkBinomialBlurImageFilterIUC3IUC3_Pointer const & p);
     itkBinomialBlurImageFilterIUC3IUC3_Pointer(itkBinomialBlurImageFilterIUC3IUC3 * p);
     ~itkBinomialBlurImageFilterIUC3IUC3_Pointer();
     itkBinomialBlurImageFilterIUC3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinomialBlurImageFilterIUC3IUC3 * GetPointer() const;
     bool operator<(itkBinomialBlurImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>(itkBinomialBlurImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator<=(itkBinomialBlurImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>=(itkBinomialBlurImageFilterIUC3IUC3_Pointer const & r) const;
     itkBinomialBlurImageFilterIUC3IUC3_Pointer & operator=(itkBinomialBlurImageFilterIUC3IUC3_Pointer const & r);
     itkBinomialBlurImageFilterIUC3IUC3_Pointer & operator=(itkBinomialBlurImageFilterIUC3IUC3 * r);
     itkBinomialBlurImageFilterIUC3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinomialBlurImageFilterIUL2IUL2 : public itkImageToImageFilterIUL2IUL2 {
   public:
     enum  {  NDimensions = 2 };
     enum  {  NOutputDimensions = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  InputConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     static itkBinomialBlurImageFilterIUL2IUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetRepetitions(unsigned int const _arg);
     virtual unsigned int GetRepetitions() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkBinomialBlurImageFilterIUL2IUL2(itkBinomialBlurImageFilterIUL2IUL2 const & arg0);
     void operator=(itkBinomialBlurImageFilterIUL2IUL2 const & arg0);
   protected:
     itkBinomialBlurImageFilterIUL2IUL2();
     ~itkBinomialBlurImageFilterIUL2IUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkBinomialBlurImageFilterIUL2IUL2_Pointer {
   public:
     itkBinomialBlurImageFilterIUL2IUL2_Pointer();
     itkBinomialBlurImageFilterIUL2IUL2_Pointer(itkBinomialBlurImageFilterIUL2IUL2_Pointer const & p);
     itkBinomialBlurImageFilterIUL2IUL2_Pointer(itkBinomialBlurImageFilterIUL2IUL2 * p);
     ~itkBinomialBlurImageFilterIUL2IUL2_Pointer();
     itkBinomialBlurImageFilterIUL2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinomialBlurImageFilterIUL2IUL2 * GetPointer() const;
     bool operator<(itkBinomialBlurImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>(itkBinomialBlurImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator<=(itkBinomialBlurImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>=(itkBinomialBlurImageFilterIUL2IUL2_Pointer const & r) const;
     itkBinomialBlurImageFilterIUL2IUL2_Pointer & operator=(itkBinomialBlurImageFilterIUL2IUL2_Pointer const & r);
     itkBinomialBlurImageFilterIUL2IUL2_Pointer & operator=(itkBinomialBlurImageFilterIUL2IUL2 * r);
     itkBinomialBlurImageFilterIUL2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinomialBlurImageFilterIUL3IUL3 : public itkImageToImageFilterIUL3IUL3 {
   public:
     enum  {  NDimensions = 3 };
     enum  {  NOutputDimensions = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  InputConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     static itkBinomialBlurImageFilterIUL3IUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetRepetitions(unsigned int const _arg);
     virtual unsigned int GetRepetitions() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkBinomialBlurImageFilterIUL3IUL3(itkBinomialBlurImageFilterIUL3IUL3 const & arg0);
     void operator=(itkBinomialBlurImageFilterIUL3IUL3 const & arg0);
   protected:
     itkBinomialBlurImageFilterIUL3IUL3();
     ~itkBinomialBlurImageFilterIUL3IUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkBinomialBlurImageFilterIUL3IUL3_Pointer {
   public:
     itkBinomialBlurImageFilterIUL3IUL3_Pointer();
     itkBinomialBlurImageFilterIUL3IUL3_Pointer(itkBinomialBlurImageFilterIUL3IUL3_Pointer const & p);
     itkBinomialBlurImageFilterIUL3IUL3_Pointer(itkBinomialBlurImageFilterIUL3IUL3 * p);
     ~itkBinomialBlurImageFilterIUL3IUL3_Pointer();
     itkBinomialBlurImageFilterIUL3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinomialBlurImageFilterIUL3IUL3 * GetPointer() const;
     bool operator<(itkBinomialBlurImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>(itkBinomialBlurImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator<=(itkBinomialBlurImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>=(itkBinomialBlurImageFilterIUL3IUL3_Pointer const & r) const;
     itkBinomialBlurImageFilterIUL3IUL3_Pointer & operator=(itkBinomialBlurImageFilterIUL3IUL3_Pointer const & r);
     itkBinomialBlurImageFilterIUL3IUL3_Pointer & operator=(itkBinomialBlurImageFilterIUL3IUL3 * r);
     itkBinomialBlurImageFilterIUL3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinomialBlurImageFilterIUS2IUS2 : public itkImageToImageFilterIUS2IUS2 {
   public:
     enum  {  NDimensions = 2 };
     enum  {  NOutputDimensions = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  InputConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     static itkBinomialBlurImageFilterIUS2IUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetRepetitions(unsigned int const _arg);
     virtual unsigned int GetRepetitions() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkBinomialBlurImageFilterIUS2IUS2(itkBinomialBlurImageFilterIUS2IUS2 const & arg0);
     void operator=(itkBinomialBlurImageFilterIUS2IUS2 const & arg0);
   protected:
     itkBinomialBlurImageFilterIUS2IUS2();
     ~itkBinomialBlurImageFilterIUS2IUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkBinomialBlurImageFilterIUS2IUS2_Pointer {
   public:
     itkBinomialBlurImageFilterIUS2IUS2_Pointer();
     itkBinomialBlurImageFilterIUS2IUS2_Pointer(itkBinomialBlurImageFilterIUS2IUS2_Pointer const & p);
     itkBinomialBlurImageFilterIUS2IUS2_Pointer(itkBinomialBlurImageFilterIUS2IUS2 * p);
     ~itkBinomialBlurImageFilterIUS2IUS2_Pointer();
     itkBinomialBlurImageFilterIUS2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinomialBlurImageFilterIUS2IUS2 * GetPointer() const;
     bool operator<(itkBinomialBlurImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>(itkBinomialBlurImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator<=(itkBinomialBlurImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>=(itkBinomialBlurImageFilterIUS2IUS2_Pointer const & r) const;
     itkBinomialBlurImageFilterIUS2IUS2_Pointer & operator=(itkBinomialBlurImageFilterIUS2IUS2_Pointer const & r);
     itkBinomialBlurImageFilterIUS2IUS2_Pointer & operator=(itkBinomialBlurImageFilterIUS2IUS2 * r);
     itkBinomialBlurImageFilterIUS2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinomialBlurImageFilterIUS3IUS3 : public itkImageToImageFilterIUS3IUS3 {
   public:
     enum  {  NDimensions = 3 };
     enum  {  NOutputDimensions = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  InputConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     static itkBinomialBlurImageFilterIUS3IUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetRepetitions(unsigned int const _arg);
     virtual unsigned int GetRepetitions() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkBinomialBlurImageFilterIUS3IUS3(itkBinomialBlurImageFilterIUS3IUS3 const & arg0);
     void operator=(itkBinomialBlurImageFilterIUS3IUS3 const & arg0);
   protected:
     itkBinomialBlurImageFilterIUS3IUS3();
     ~itkBinomialBlurImageFilterIUS3IUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkBinomialBlurImageFilterIUS3IUS3_Pointer {
   public:
     itkBinomialBlurImageFilterIUS3IUS3_Pointer();
     itkBinomialBlurImageFilterIUS3IUS3_Pointer(itkBinomialBlurImageFilterIUS3IUS3_Pointer const & p);
     itkBinomialBlurImageFilterIUS3IUS3_Pointer(itkBinomialBlurImageFilterIUS3IUS3 * p);
     ~itkBinomialBlurImageFilterIUS3IUS3_Pointer();
     itkBinomialBlurImageFilterIUS3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinomialBlurImageFilterIUS3IUS3 * GetPointer() const;
     bool operator<(itkBinomialBlurImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>(itkBinomialBlurImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator<=(itkBinomialBlurImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>=(itkBinomialBlurImageFilterIUS3IUS3_Pointer const & r) const;
     itkBinomialBlurImageFilterIUS3IUS3_Pointer & operator=(itkBinomialBlurImageFilterIUS3IUS3_Pointer const & r);
     itkBinomialBlurImageFilterIUS3IUS3_Pointer & operator=(itkBinomialBlurImageFilterIUS3IUS3 * r);
     itkBinomialBlurImageFilterIUS3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


