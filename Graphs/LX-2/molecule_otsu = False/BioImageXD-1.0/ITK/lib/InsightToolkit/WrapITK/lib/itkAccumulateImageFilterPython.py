# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkAccumulateImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkAccumulateImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkAccumulateImageFilterPython
            return _itkAccumulateImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkAccumulateImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkAccumulateImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkAccumulateImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import itkEventObjectsPython
import pyBasePython
import itkImageToImageFilterAPython
import itkImagePython
import itkFixedArrayPython
import itkCovariantVectorPython
import vnl_vectorPython
import vcl_complexPython
import vnl_matrixPython
import itkVectorPython
import vnl_vector_refPython
import ITKRegionsPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkPointPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkRGBPixelPython
import itkImageSourcePython
import itkVectorImagePython
import itkVariableLengthVectorPython
def itkAccumulateImageFilterID3ID3_New():
  return itkAccumulateImageFilterID3ID3.New()

def itkAccumulateImageFilterID2ID2_New():
  return itkAccumulateImageFilterID2ID2.New()

def itkAccumulateImageFilterIF3IF3_New():
  return itkAccumulateImageFilterIF3IF3.New()

def itkAccumulateImageFilterIF2IF2_New():
  return itkAccumulateImageFilterIF2IF2.New()

def itkAccumulateImageFilterIUS3IUS3_New():
  return itkAccumulateImageFilterIUS3IUS3.New()

def itkAccumulateImageFilterIUS2IUS2_New():
  return itkAccumulateImageFilterIUS2IUS2.New()

def itkAccumulateImageFilterIUL3IUL3_New():
  return itkAccumulateImageFilterIUL3IUL3.New()

def itkAccumulateImageFilterIUL2IUL2_New():
  return itkAccumulateImageFilterIUL2IUL2.New()

def itkAccumulateImageFilterIUC3IUC3_New():
  return itkAccumulateImageFilterIUC3IUC3.New()

def itkAccumulateImageFilterIUC2IUC2_New():
  return itkAccumulateImageFilterIUC2IUC2.New()

class itkAccumulateImageFilterID2ID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """Proxy of C++ itkAccumulateImageFilterID2ID2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImageDimension = _itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_InputImageDimension
    OutputImageDimension = _itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_OutputImageDimension
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_ImageDimensionCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetAccumulateDimension(self):
        """GetAccumulateDimension(self) -> unsigned int"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_GetAccumulateDimension(self)

    def SetAccumulateDimension(self, *args):
        """SetAccumulateDimension(self, unsigned int _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_SetAccumulateDimension(self, *args)

    def SetAverage(self, *args):
        """SetAverage(self, bool _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_SetAverage(self, *args)

    def GetAverage(self):
        """GetAverage(self) -> bool"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_GetAverage(self)

    def AverageOn(self):
        """AverageOn(self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_AverageOn(self)

    def AverageOff(self):
        """AverageOff(self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_AverageOff(self)

    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterID2ID2
    def cast(*args):
        """cast(itkLightObject obj) -> itkAccumulateImageFilterID2ID2"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAccumulateImageFilterID2ID2"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterID2ID2
        
        Create a new object of the class itkAccumulateImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAccumulateImageFilterID2ID2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAccumulateImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAccumulateImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAccumulateImageFilterID2ID2.GetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_GetAccumulateDimension,None,itkAccumulateImageFilterID2ID2)
itkAccumulateImageFilterID2ID2.SetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_SetAccumulateDimension,None,itkAccumulateImageFilterID2ID2)
itkAccumulateImageFilterID2ID2.SetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_SetAverage,None,itkAccumulateImageFilterID2ID2)
itkAccumulateImageFilterID2ID2.GetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_GetAverage,None,itkAccumulateImageFilterID2ID2)
itkAccumulateImageFilterID2ID2.AverageOn = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_AverageOn,None,itkAccumulateImageFilterID2ID2)
itkAccumulateImageFilterID2ID2.AverageOff = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_AverageOff,None,itkAccumulateImageFilterID2ID2)
itkAccumulateImageFilterID2ID2.GetPointer = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_GetPointer,None,itkAccumulateImageFilterID2ID2)
itkAccumulateImageFilterID2ID2_swigregister = _itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_swigregister
itkAccumulateImageFilterID2ID2_swigregister(itkAccumulateImageFilterID2ID2)

def itkAccumulateImageFilterID2ID2___New_orig__():
  """itkAccumulateImageFilterID2ID2___New_orig__()"""
  return _itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2___New_orig__()

def itkAccumulateImageFilterID2ID2_cast(*args):
  """itkAccumulateImageFilterID2ID2_cast(itkLightObject obj) -> itkAccumulateImageFilterID2ID2"""
  return _itkAccumulateImageFilterPython.itkAccumulateImageFilterID2ID2_cast(*args)

class itkAccumulateImageFilterID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """Proxy of C++ itkAccumulateImageFilterID3ID3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImageDimension = _itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_InputImageDimension
    OutputImageDimension = _itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_OutputImageDimension
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_ImageDimensionCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetAccumulateDimension(self):
        """GetAccumulateDimension(self) -> unsigned int"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_GetAccumulateDimension(self)

    def SetAccumulateDimension(self, *args):
        """SetAccumulateDimension(self, unsigned int _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_SetAccumulateDimension(self, *args)

    def SetAverage(self, *args):
        """SetAverage(self, bool _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_SetAverage(self, *args)

    def GetAverage(self):
        """GetAverage(self) -> bool"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_GetAverage(self)

    def AverageOn(self):
        """AverageOn(self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_AverageOn(self)

    def AverageOff(self):
        """AverageOff(self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_AverageOff(self)

    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterID3ID3
    def cast(*args):
        """cast(itkLightObject obj) -> itkAccumulateImageFilterID3ID3"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAccumulateImageFilterID3ID3"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterID3ID3
        
        Create a new object of the class itkAccumulateImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAccumulateImageFilterID3ID3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAccumulateImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAccumulateImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAccumulateImageFilterID3ID3.GetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_GetAccumulateDimension,None,itkAccumulateImageFilterID3ID3)
itkAccumulateImageFilterID3ID3.SetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_SetAccumulateDimension,None,itkAccumulateImageFilterID3ID3)
itkAccumulateImageFilterID3ID3.SetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_SetAverage,None,itkAccumulateImageFilterID3ID3)
itkAccumulateImageFilterID3ID3.GetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_GetAverage,None,itkAccumulateImageFilterID3ID3)
itkAccumulateImageFilterID3ID3.AverageOn = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_AverageOn,None,itkAccumulateImageFilterID3ID3)
itkAccumulateImageFilterID3ID3.AverageOff = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_AverageOff,None,itkAccumulateImageFilterID3ID3)
itkAccumulateImageFilterID3ID3.GetPointer = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_GetPointer,None,itkAccumulateImageFilterID3ID3)
itkAccumulateImageFilterID3ID3_swigregister = _itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_swigregister
itkAccumulateImageFilterID3ID3_swigregister(itkAccumulateImageFilterID3ID3)

def itkAccumulateImageFilterID3ID3___New_orig__():
  """itkAccumulateImageFilterID3ID3___New_orig__()"""
  return _itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3___New_orig__()

def itkAccumulateImageFilterID3ID3_cast(*args):
  """itkAccumulateImageFilterID3ID3_cast(itkLightObject obj) -> itkAccumulateImageFilterID3ID3"""
  return _itkAccumulateImageFilterPython.itkAccumulateImageFilterID3ID3_cast(*args)

class itkAccumulateImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """Proxy of C++ itkAccumulateImageFilterIF2IF2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImageDimension = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_InputImageDimension
    OutputImageDimension = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_OutputImageDimension
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_ImageDimensionCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetAccumulateDimension(self):
        """GetAccumulateDimension(self) -> unsigned int"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_GetAccumulateDimension(self)

    def SetAccumulateDimension(self, *args):
        """SetAccumulateDimension(self, unsigned int _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_SetAccumulateDimension(self, *args)

    def SetAverage(self, *args):
        """SetAverage(self, bool _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_SetAverage(self, *args)

    def GetAverage(self):
        """GetAverage(self) -> bool"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_GetAverage(self)

    def AverageOn(self):
        """AverageOn(self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_AverageOn(self)

    def AverageOff(self):
        """AverageOff(self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_AverageOff(self)

    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterIF2IF2
    def cast(*args):
        """cast(itkLightObject obj) -> itkAccumulateImageFilterIF2IF2"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAccumulateImageFilterIF2IF2"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterIF2IF2
        
        Create a new object of the class itkAccumulateImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAccumulateImageFilterIF2IF2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAccumulateImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAccumulateImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAccumulateImageFilterIF2IF2.GetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_GetAccumulateDimension,None,itkAccumulateImageFilterIF2IF2)
itkAccumulateImageFilterIF2IF2.SetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_SetAccumulateDimension,None,itkAccumulateImageFilterIF2IF2)
itkAccumulateImageFilterIF2IF2.SetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_SetAverage,None,itkAccumulateImageFilterIF2IF2)
itkAccumulateImageFilterIF2IF2.GetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_GetAverage,None,itkAccumulateImageFilterIF2IF2)
itkAccumulateImageFilterIF2IF2.AverageOn = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_AverageOn,None,itkAccumulateImageFilterIF2IF2)
itkAccumulateImageFilterIF2IF2.AverageOff = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_AverageOff,None,itkAccumulateImageFilterIF2IF2)
itkAccumulateImageFilterIF2IF2.GetPointer = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_GetPointer,None,itkAccumulateImageFilterIF2IF2)
itkAccumulateImageFilterIF2IF2_swigregister = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_swigregister
itkAccumulateImageFilterIF2IF2_swigregister(itkAccumulateImageFilterIF2IF2)

def itkAccumulateImageFilterIF2IF2___New_orig__():
  """itkAccumulateImageFilterIF2IF2___New_orig__()"""
  return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2___New_orig__()

def itkAccumulateImageFilterIF2IF2_cast(*args):
  """itkAccumulateImageFilterIF2IF2_cast(itkLightObject obj) -> itkAccumulateImageFilterIF2IF2"""
  return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF2IF2_cast(*args)

class itkAccumulateImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """Proxy of C++ itkAccumulateImageFilterIF3IF3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImageDimension = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_InputImageDimension
    OutputImageDimension = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_OutputImageDimension
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_ImageDimensionCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetAccumulateDimension(self):
        """GetAccumulateDimension(self) -> unsigned int"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_GetAccumulateDimension(self)

    def SetAccumulateDimension(self, *args):
        """SetAccumulateDimension(self, unsigned int _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_SetAccumulateDimension(self, *args)

    def SetAverage(self, *args):
        """SetAverage(self, bool _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_SetAverage(self, *args)

    def GetAverage(self):
        """GetAverage(self) -> bool"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_GetAverage(self)

    def AverageOn(self):
        """AverageOn(self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_AverageOn(self)

    def AverageOff(self):
        """AverageOff(self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_AverageOff(self)

    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterIF3IF3
    def cast(*args):
        """cast(itkLightObject obj) -> itkAccumulateImageFilterIF3IF3"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAccumulateImageFilterIF3IF3"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterIF3IF3
        
        Create a new object of the class itkAccumulateImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAccumulateImageFilterIF3IF3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAccumulateImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAccumulateImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAccumulateImageFilterIF3IF3.GetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_GetAccumulateDimension,None,itkAccumulateImageFilterIF3IF3)
itkAccumulateImageFilterIF3IF3.SetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_SetAccumulateDimension,None,itkAccumulateImageFilterIF3IF3)
itkAccumulateImageFilterIF3IF3.SetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_SetAverage,None,itkAccumulateImageFilterIF3IF3)
itkAccumulateImageFilterIF3IF3.GetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_GetAverage,None,itkAccumulateImageFilterIF3IF3)
itkAccumulateImageFilterIF3IF3.AverageOn = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_AverageOn,None,itkAccumulateImageFilterIF3IF3)
itkAccumulateImageFilterIF3IF3.AverageOff = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_AverageOff,None,itkAccumulateImageFilterIF3IF3)
itkAccumulateImageFilterIF3IF3.GetPointer = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_GetPointer,None,itkAccumulateImageFilterIF3IF3)
itkAccumulateImageFilterIF3IF3_swigregister = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_swigregister
itkAccumulateImageFilterIF3IF3_swigregister(itkAccumulateImageFilterIF3IF3)

def itkAccumulateImageFilterIF3IF3___New_orig__():
  """itkAccumulateImageFilterIF3IF3___New_orig__()"""
  return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3___New_orig__()

def itkAccumulateImageFilterIF3IF3_cast(*args):
  """itkAccumulateImageFilterIF3IF3_cast(itkLightObject obj) -> itkAccumulateImageFilterIF3IF3"""
  return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIF3IF3_cast(*args)

class itkAccumulateImageFilterIUC2IUC2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """Proxy of C++ itkAccumulateImageFilterIUC2IUC2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImageDimension = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_InputImageDimension
    OutputImageDimension = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_OutputImageDimension
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_ImageDimensionCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetAccumulateDimension(self):
        """GetAccumulateDimension(self) -> unsigned int"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_GetAccumulateDimension(self)

    def SetAccumulateDimension(self, *args):
        """SetAccumulateDimension(self, unsigned int _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_SetAccumulateDimension(self, *args)

    def SetAverage(self, *args):
        """SetAverage(self, bool _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_SetAverage(self, *args)

    def GetAverage(self):
        """GetAverage(self) -> bool"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_GetAverage(self)

    def AverageOn(self):
        """AverageOn(self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_AverageOn(self)

    def AverageOff(self):
        """AverageOff(self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_AverageOff(self)

    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterIUC2IUC2
    def cast(*args):
        """cast(itkLightObject obj) -> itkAccumulateImageFilterIUC2IUC2"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAccumulateImageFilterIUC2IUC2"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterIUC2IUC2
        
        Create a new object of the class itkAccumulateImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAccumulateImageFilterIUC2IUC2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAccumulateImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAccumulateImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAccumulateImageFilterIUC2IUC2.GetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_GetAccumulateDimension,None,itkAccumulateImageFilterIUC2IUC2)
itkAccumulateImageFilterIUC2IUC2.SetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_SetAccumulateDimension,None,itkAccumulateImageFilterIUC2IUC2)
itkAccumulateImageFilterIUC2IUC2.SetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_SetAverage,None,itkAccumulateImageFilterIUC2IUC2)
itkAccumulateImageFilterIUC2IUC2.GetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_GetAverage,None,itkAccumulateImageFilterIUC2IUC2)
itkAccumulateImageFilterIUC2IUC2.AverageOn = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_AverageOn,None,itkAccumulateImageFilterIUC2IUC2)
itkAccumulateImageFilterIUC2IUC2.AverageOff = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_AverageOff,None,itkAccumulateImageFilterIUC2IUC2)
itkAccumulateImageFilterIUC2IUC2.GetPointer = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_GetPointer,None,itkAccumulateImageFilterIUC2IUC2)
itkAccumulateImageFilterIUC2IUC2_swigregister = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_swigregister
itkAccumulateImageFilterIUC2IUC2_swigregister(itkAccumulateImageFilterIUC2IUC2)

def itkAccumulateImageFilterIUC2IUC2___New_orig__():
  """itkAccumulateImageFilterIUC2IUC2___New_orig__()"""
  return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2___New_orig__()

def itkAccumulateImageFilterIUC2IUC2_cast(*args):
  """itkAccumulateImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkAccumulateImageFilterIUC2IUC2"""
  return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC2IUC2_cast(*args)

class itkAccumulateImageFilterIUC3IUC3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """Proxy of C++ itkAccumulateImageFilterIUC3IUC3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImageDimension = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_InputImageDimension
    OutputImageDimension = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_OutputImageDimension
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_ImageDimensionCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetAccumulateDimension(self):
        """GetAccumulateDimension(self) -> unsigned int"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_GetAccumulateDimension(self)

    def SetAccumulateDimension(self, *args):
        """SetAccumulateDimension(self, unsigned int _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_SetAccumulateDimension(self, *args)

    def SetAverage(self, *args):
        """SetAverage(self, bool _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_SetAverage(self, *args)

    def GetAverage(self):
        """GetAverage(self) -> bool"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_GetAverage(self)

    def AverageOn(self):
        """AverageOn(self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_AverageOn(self)

    def AverageOff(self):
        """AverageOff(self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_AverageOff(self)

    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterIUC3IUC3
    def cast(*args):
        """cast(itkLightObject obj) -> itkAccumulateImageFilterIUC3IUC3"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAccumulateImageFilterIUC3IUC3"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterIUC3IUC3
        
        Create a new object of the class itkAccumulateImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAccumulateImageFilterIUC3IUC3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAccumulateImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAccumulateImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAccumulateImageFilterIUC3IUC3.GetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_GetAccumulateDimension,None,itkAccumulateImageFilterIUC3IUC3)
itkAccumulateImageFilterIUC3IUC3.SetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_SetAccumulateDimension,None,itkAccumulateImageFilterIUC3IUC3)
itkAccumulateImageFilterIUC3IUC3.SetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_SetAverage,None,itkAccumulateImageFilterIUC3IUC3)
itkAccumulateImageFilterIUC3IUC3.GetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_GetAverage,None,itkAccumulateImageFilterIUC3IUC3)
itkAccumulateImageFilterIUC3IUC3.AverageOn = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_AverageOn,None,itkAccumulateImageFilterIUC3IUC3)
itkAccumulateImageFilterIUC3IUC3.AverageOff = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_AverageOff,None,itkAccumulateImageFilterIUC3IUC3)
itkAccumulateImageFilterIUC3IUC3.GetPointer = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_GetPointer,None,itkAccumulateImageFilterIUC3IUC3)
itkAccumulateImageFilterIUC3IUC3_swigregister = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_swigregister
itkAccumulateImageFilterIUC3IUC3_swigregister(itkAccumulateImageFilterIUC3IUC3)

def itkAccumulateImageFilterIUC3IUC3___New_orig__():
  """itkAccumulateImageFilterIUC3IUC3___New_orig__()"""
  return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3___New_orig__()

def itkAccumulateImageFilterIUC3IUC3_cast(*args):
  """itkAccumulateImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkAccumulateImageFilterIUC3IUC3"""
  return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUC3IUC3_cast(*args)

class itkAccumulateImageFilterIUL2IUL2(itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUL2):
    """Proxy of C++ itkAccumulateImageFilterIUL2IUL2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImageDimension = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL2IUL2_InputImageDimension
    OutputImageDimension = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL2IUL2_OutputImageDimension
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL2IUL2_ImageDimensionCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL2IUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetAccumulateDimension(self):
        """GetAccumulateDimension(self) -> unsigned int"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL2IUL2_GetAccumulateDimension(self)

    def SetAccumulateDimension(self, *args):
        """SetAccumulateDimension(self, unsigned int _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL2IUL2_SetAccumulateDimension(self, *args)

    def SetAverage(self, *args):
        """SetAverage(self, bool _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL2IUL2_SetAverage(self, *args)

    def GetAverage(self):
        """GetAverage(self) -> bool"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL2IUL2_GetAverage(self)

    def AverageOn(self):
        """AverageOn(self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL2IUL2_AverageOn(self)

    def AverageOff(self):
        """AverageOff(self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL2IUL2_AverageOff(self)

    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterIUL2IUL2
    def cast(*args):
        """cast(itkLightObject obj) -> itkAccumulateImageFilterIUL2IUL2"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL2IUL2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAccumulateImageFilterIUL2IUL2"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL2IUL2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterIUL2IUL2
        
        Create a new object of the class itkAccumulateImageFilterIUL2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAccumulateImageFilterIUL2IUL2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAccumulateImageFilterIUL2IUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAccumulateImageFilterIUL2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAccumulateImageFilterIUL2IUL2.GetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL2IUL2_GetAccumulateDimension,None,itkAccumulateImageFilterIUL2IUL2)
itkAccumulateImageFilterIUL2IUL2.SetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL2IUL2_SetAccumulateDimension,None,itkAccumulateImageFilterIUL2IUL2)
itkAccumulateImageFilterIUL2IUL2.SetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL2IUL2_SetAverage,None,itkAccumulateImageFilterIUL2IUL2)
itkAccumulateImageFilterIUL2IUL2.GetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL2IUL2_GetAverage,None,itkAccumulateImageFilterIUL2IUL2)
itkAccumulateImageFilterIUL2IUL2.AverageOn = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL2IUL2_AverageOn,None,itkAccumulateImageFilterIUL2IUL2)
itkAccumulateImageFilterIUL2IUL2.AverageOff = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL2IUL2_AverageOff,None,itkAccumulateImageFilterIUL2IUL2)
itkAccumulateImageFilterIUL2IUL2.GetPointer = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL2IUL2_GetPointer,None,itkAccumulateImageFilterIUL2IUL2)
itkAccumulateImageFilterIUL2IUL2_swigregister = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL2IUL2_swigregister
itkAccumulateImageFilterIUL2IUL2_swigregister(itkAccumulateImageFilterIUL2IUL2)

def itkAccumulateImageFilterIUL2IUL2___New_orig__():
  """itkAccumulateImageFilterIUL2IUL2___New_orig__()"""
  return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL2IUL2___New_orig__()

def itkAccumulateImageFilterIUL2IUL2_cast(*args):
  """itkAccumulateImageFilterIUL2IUL2_cast(itkLightObject obj) -> itkAccumulateImageFilterIUL2IUL2"""
  return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL2IUL2_cast(*args)

class itkAccumulateImageFilterIUL3IUL3(itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUL3):
    """Proxy of C++ itkAccumulateImageFilterIUL3IUL3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImageDimension = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL3IUL3_InputImageDimension
    OutputImageDimension = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL3IUL3_OutputImageDimension
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL3IUL3_ImageDimensionCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL3IUL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetAccumulateDimension(self):
        """GetAccumulateDimension(self) -> unsigned int"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL3IUL3_GetAccumulateDimension(self)

    def SetAccumulateDimension(self, *args):
        """SetAccumulateDimension(self, unsigned int _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL3IUL3_SetAccumulateDimension(self, *args)

    def SetAverage(self, *args):
        """SetAverage(self, bool _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL3IUL3_SetAverage(self, *args)

    def GetAverage(self):
        """GetAverage(self) -> bool"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL3IUL3_GetAverage(self)

    def AverageOn(self):
        """AverageOn(self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL3IUL3_AverageOn(self)

    def AverageOff(self):
        """AverageOff(self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL3IUL3_AverageOff(self)

    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterIUL3IUL3
    def cast(*args):
        """cast(itkLightObject obj) -> itkAccumulateImageFilterIUL3IUL3"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL3IUL3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAccumulateImageFilterIUL3IUL3"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL3IUL3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterIUL3IUL3
        
        Create a new object of the class itkAccumulateImageFilterIUL3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAccumulateImageFilterIUL3IUL3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAccumulateImageFilterIUL3IUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAccumulateImageFilterIUL3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAccumulateImageFilterIUL3IUL3.GetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL3IUL3_GetAccumulateDimension,None,itkAccumulateImageFilterIUL3IUL3)
itkAccumulateImageFilterIUL3IUL3.SetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL3IUL3_SetAccumulateDimension,None,itkAccumulateImageFilterIUL3IUL3)
itkAccumulateImageFilterIUL3IUL3.SetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL3IUL3_SetAverage,None,itkAccumulateImageFilterIUL3IUL3)
itkAccumulateImageFilterIUL3IUL3.GetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL3IUL3_GetAverage,None,itkAccumulateImageFilterIUL3IUL3)
itkAccumulateImageFilterIUL3IUL3.AverageOn = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL3IUL3_AverageOn,None,itkAccumulateImageFilterIUL3IUL3)
itkAccumulateImageFilterIUL3IUL3.AverageOff = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL3IUL3_AverageOff,None,itkAccumulateImageFilterIUL3IUL3)
itkAccumulateImageFilterIUL3IUL3.GetPointer = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL3IUL3_GetPointer,None,itkAccumulateImageFilterIUL3IUL3)
itkAccumulateImageFilterIUL3IUL3_swigregister = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL3IUL3_swigregister
itkAccumulateImageFilterIUL3IUL3_swigregister(itkAccumulateImageFilterIUL3IUL3)

def itkAccumulateImageFilterIUL3IUL3___New_orig__():
  """itkAccumulateImageFilterIUL3IUL3___New_orig__()"""
  return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL3IUL3___New_orig__()

def itkAccumulateImageFilterIUL3IUL3_cast(*args):
  """itkAccumulateImageFilterIUL3IUL3_cast(itkLightObject obj) -> itkAccumulateImageFilterIUL3IUL3"""
  return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUL3IUL3_cast(*args)

class itkAccumulateImageFilterIUS2IUS2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """Proxy of C++ itkAccumulateImageFilterIUS2IUS2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImageDimension = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_InputImageDimension
    OutputImageDimension = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_OutputImageDimension
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_ImageDimensionCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetAccumulateDimension(self):
        """GetAccumulateDimension(self) -> unsigned int"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_GetAccumulateDimension(self)

    def SetAccumulateDimension(self, *args):
        """SetAccumulateDimension(self, unsigned int _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_SetAccumulateDimension(self, *args)

    def SetAverage(self, *args):
        """SetAverage(self, bool _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_SetAverage(self, *args)

    def GetAverage(self):
        """GetAverage(self) -> bool"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_GetAverage(self)

    def AverageOn(self):
        """AverageOn(self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_AverageOn(self)

    def AverageOff(self):
        """AverageOff(self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_AverageOff(self)

    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterIUS2IUS2
    def cast(*args):
        """cast(itkLightObject obj) -> itkAccumulateImageFilterIUS2IUS2"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAccumulateImageFilterIUS2IUS2"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterIUS2IUS2
        
        Create a new object of the class itkAccumulateImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAccumulateImageFilterIUS2IUS2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAccumulateImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAccumulateImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAccumulateImageFilterIUS2IUS2.GetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_GetAccumulateDimension,None,itkAccumulateImageFilterIUS2IUS2)
itkAccumulateImageFilterIUS2IUS2.SetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_SetAccumulateDimension,None,itkAccumulateImageFilterIUS2IUS2)
itkAccumulateImageFilterIUS2IUS2.SetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_SetAverage,None,itkAccumulateImageFilterIUS2IUS2)
itkAccumulateImageFilterIUS2IUS2.GetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_GetAverage,None,itkAccumulateImageFilterIUS2IUS2)
itkAccumulateImageFilterIUS2IUS2.AverageOn = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_AverageOn,None,itkAccumulateImageFilterIUS2IUS2)
itkAccumulateImageFilterIUS2IUS2.AverageOff = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_AverageOff,None,itkAccumulateImageFilterIUS2IUS2)
itkAccumulateImageFilterIUS2IUS2.GetPointer = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_GetPointer,None,itkAccumulateImageFilterIUS2IUS2)
itkAccumulateImageFilterIUS2IUS2_swigregister = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_swigregister
itkAccumulateImageFilterIUS2IUS2_swigregister(itkAccumulateImageFilterIUS2IUS2)

def itkAccumulateImageFilterIUS2IUS2___New_orig__():
  """itkAccumulateImageFilterIUS2IUS2___New_orig__()"""
  return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2___New_orig__()

def itkAccumulateImageFilterIUS2IUS2_cast(*args):
  """itkAccumulateImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkAccumulateImageFilterIUS2IUS2"""
  return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS2IUS2_cast(*args)

class itkAccumulateImageFilterIUS3IUS3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """Proxy of C++ itkAccumulateImageFilterIUS3IUS3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImageDimension = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_InputImageDimension
    OutputImageDimension = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_OutputImageDimension
    ImageDimensionCheck = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_ImageDimensionCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetAccumulateDimension(self):
        """GetAccumulateDimension(self) -> unsigned int"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_GetAccumulateDimension(self)

    def SetAccumulateDimension(self, *args):
        """SetAccumulateDimension(self, unsigned int _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_SetAccumulateDimension(self, *args)

    def SetAverage(self, *args):
        """SetAverage(self, bool _arg)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_SetAverage(self, *args)

    def GetAverage(self):
        """GetAverage(self) -> bool"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_GetAverage(self)

    def AverageOn(self):
        """AverageOn(self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_AverageOn(self)

    def AverageOff(self):
        """AverageOff(self)"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_AverageOff(self)

    __swig_destroy__ = _itkAccumulateImageFilterPython.delete_itkAccumulateImageFilterIUS3IUS3
    def cast(*args):
        """cast(itkLightObject obj) -> itkAccumulateImageFilterIUS3IUS3"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAccumulateImageFilterIUS3IUS3"""
        return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAccumulateImageFilterIUS3IUS3
        
        Create a new object of the class itkAccumulateImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAccumulateImageFilterIUS3IUS3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAccumulateImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAccumulateImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAccumulateImageFilterIUS3IUS3.GetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_GetAccumulateDimension,None,itkAccumulateImageFilterIUS3IUS3)
itkAccumulateImageFilterIUS3IUS3.SetAccumulateDimension = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_SetAccumulateDimension,None,itkAccumulateImageFilterIUS3IUS3)
itkAccumulateImageFilterIUS3IUS3.SetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_SetAverage,None,itkAccumulateImageFilterIUS3IUS3)
itkAccumulateImageFilterIUS3IUS3.GetAverage = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_GetAverage,None,itkAccumulateImageFilterIUS3IUS3)
itkAccumulateImageFilterIUS3IUS3.AverageOn = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_AverageOn,None,itkAccumulateImageFilterIUS3IUS3)
itkAccumulateImageFilterIUS3IUS3.AverageOff = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_AverageOff,None,itkAccumulateImageFilterIUS3IUS3)
itkAccumulateImageFilterIUS3IUS3.GetPointer = new_instancemethod(_itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_GetPointer,None,itkAccumulateImageFilterIUS3IUS3)
itkAccumulateImageFilterIUS3IUS3_swigregister = _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_swigregister
itkAccumulateImageFilterIUS3IUS3_swigregister(itkAccumulateImageFilterIUS3IUS3)

def itkAccumulateImageFilterIUS3IUS3___New_orig__():
  """itkAccumulateImageFilterIUS3IUS3___New_orig__()"""
  return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3___New_orig__()

def itkAccumulateImageFilterIUS3IUS3_cast(*args):
  """itkAccumulateImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkAccumulateImageFilterIUS3IUS3"""
  return _itkAccumulateImageFilterPython.itkAccumulateImageFilterIUS3IUS3_cast(*args)



