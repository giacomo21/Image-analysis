// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkDiffusionTensor3DChicken
#endif
#ifdef SWIGCSHARP
%module itkDiffusionTensor3DCsharp
#endif
#ifdef SWIGGUILE
%module itkDiffusionTensor3DGuile
#endif
#ifdef SWIGJAVA
%module itkDiffusionTensor3DJava
#endif
#ifdef SWIGLUA
%module itkDiffusionTensor3DLua
#endif
#ifdef SWIGMODULA3
%module itkDiffusionTensor3DModula3
#endif
#ifdef SWIGMZSCHEME
%module itkDiffusionTensor3DMzscheme
#endif
#ifdef SWIGOCAML
%module itkDiffusionTensor3DOcaml
#endif
#ifdef SWIGPERL
%module itkDiffusionTensor3DPerl
#endif
#ifdef SWIGPERL5
%module itkDiffusionTensor3DPerl5
#endif
#ifdef SWIGPHP
%module itkDiffusionTensor3DPhp
#endif
#ifdef SWIGPHP4
%module itkDiffusionTensor3DPhp4
#endif
#ifdef SWIGPHP5
%module itkDiffusionTensor3DPhp5
#endif
#ifdef SWIGPIKE
%module itkDiffusionTensor3DPike
#endif
#ifdef SWIGPYTHON
%module itkDiffusionTensor3DPython
#endif
#ifdef SWIGR
%module itkDiffusionTensor3DR
#endif
#ifdef SWIGRUBY
%module itkDiffusionTensor3DRuby
#endif
#ifdef SWIGSEXP
%module itkDiffusionTensor3DSexp
#endif
#ifdef SWIGTCL
%module itkDiffusionTensor3DTcl
#endif
#ifdef SWIGXML
%module itkDiffusionTensor3DXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
%}


%{
%}




%import wrap_itkSymmetricSecondRankTensor.i


%include itk.i
%include wrap_itkDiffusionTensor3D_ext.i


 class itkDiffusionTensor3DD : public itkSymmetricSecondRankTensorD3 {
   public:
     ~itkDiffusionTensor3DD();
     itkDiffusionTensor3DD & operator=(itkDiffusionTensor3DD const & arg0);
     itkDiffusionTensor3DD(itkDiffusionTensor3DD const & arg0);
     itkDiffusionTensor3DD();
     itkDiffusionTensor3DD(itkSymmetricSecondRankTensorD3 const & r);
     itkDiffusionTensor3DD(double const & r);
     itkDiffusionTensor3DD(double const * r);
     itkDiffusionTensor3DD & operator=(itkSymmetricSecondRankTensorD3 const & r);
     itkDiffusionTensor3DD & operator=(double const & r);
     itkDiffusionTensor3DD & operator=(double const * r);
     double GetTrace() const;
     double GetFractionalAnisotropy() const;
     double GetRelativeAnisotropy() const;
     double GetInnerScalarProduct() const;
   private:
   protected:
 };


 class itkDiffusionTensor3DF : public itkSymmetricSecondRankTensorF3 {
   public:
     ~itkDiffusionTensor3DF();
     itkDiffusionTensor3DF & operator=(itkDiffusionTensor3DF const & arg0);
     itkDiffusionTensor3DF(itkDiffusionTensor3DF const & arg0);
     itkDiffusionTensor3DF();
     itkDiffusionTensor3DF(itkSymmetricSecondRankTensorF3 const & r);
     itkDiffusionTensor3DF(float const & r);
     itkDiffusionTensor3DF(float const * r);
     itkDiffusionTensor3DF & operator=(itkSymmetricSecondRankTensorF3 const & r);
     itkDiffusionTensor3DF & operator=(float const & r);
     itkDiffusionTensor3DF & operator=(float const * r);
     double GetTrace() const;
     double GetFractionalAnisotropy() const;
     double GetRelativeAnisotropy() const;
     double GetInnerScalarProduct() const;
   private:
   protected:
 };


