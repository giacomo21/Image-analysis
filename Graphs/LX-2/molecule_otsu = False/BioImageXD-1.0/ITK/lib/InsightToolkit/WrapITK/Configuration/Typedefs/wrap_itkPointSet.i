// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkPointSetChicken
#endif
#ifdef SWIGCSHARP
%module itkPointSetCsharp
#endif
#ifdef SWIGGUILE
%module itkPointSetGuile
#endif
#ifdef SWIGJAVA
%module itkPointSetJava
#endif
#ifdef SWIGLUA
%module itkPointSetLua
#endif
#ifdef SWIGMODULA3
%module itkPointSetModula3
#endif
#ifdef SWIGMZSCHEME
%module itkPointSetMzscheme
#endif
#ifdef SWIGOCAML
%module itkPointSetOcaml
#endif
#ifdef SWIGPERL
%module itkPointSetPerl
#endif
#ifdef SWIGPERL5
%module itkPointSetPerl5
#endif
#ifdef SWIGPHP
%module itkPointSetPhp
#endif
#ifdef SWIGPHP4
%module itkPointSetPhp4
#endif
#ifdef SWIGPHP5
%module itkPointSetPhp5
#endif
#ifdef SWIGPIKE
%module itkPointSetPike
#endif
#ifdef SWIGPYTHON
%module itkPointSetPython
#endif
#ifdef SWIGR
%module itkPointSetR
#endif
#ifdef SWIGRUBY
%module itkPointSetRuby
#endif
#ifdef SWIGSEXP
%module itkPointSetSexp
#endif
#ifdef SWIGTCL
%module itkPointSetTcl
#endif
#ifdef SWIGXML
%module itkPointSetXml
#endif

%{
#include "Base.includes"
#include "Mesh.includes"
%}


%{
%}




%import wrap_itkPoint.i
%import wrap_itkMapContainer.i
%import wrap_ITKCommonBase.i
%import wrap_itkQuadEdgeMeshBase.i
%import wrap_itkVectorContainer.i
%import wrap_itkBoundingBox.i
%import wrap_itkQuadEdgeMeshPoint.i


%include itk.i
%include wrap_itkPointSet_ext.i


 class itkPointSetD2D : public itkDataObject {
   public:
     enum  {  PointDimension = 2 };
     static itkPointSetD2D_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual long GetMaximumNumberOfRegions() const;
     void PassStructure(itkPointSetD2D * inputPointSet);
     virtual void Initialize();
     unsigned long GetNumberOfPoints() const;
     void SetPoints(itkMapContainerULPD2 * arg0);
     itkMapContainerULPD2 * GetPoints();
     itkMapContainerULPD2 const * GetPoints() const;
     void SetPointData(itkMapContainerULD * arg0);
     itkMapContainerULD * GetPointData();
     itkMapContainerULD const * GetPointData() const;
     void SetPoint(unsigned long arg0, itkPointD2 arg1);
     bool GetPoint(unsigned long arg0, itkPointD2 * arg1) const;
     void SetPointData(unsigned long arg0, double arg1);
     bool GetPointData(unsigned long arg0, double * arg1) const;
     itkBoundingBoxUL2DMCULPD2 const * GetBoundingBox() const;
     bool FindClosestPoint(double * arg0, unsigned long * pointId);
     virtual void UpdateOutputInformation();
     virtual void SetRequestedRegionToLargestPossibleRegion();
     virtual void CopyInformation(itkDataObject const * data);
     virtual void Graft(itkDataObject const * data);
     virtual bool RequestedRegionIsOutsideOfTheBufferedRegion();
     virtual bool VerifyRequestedRegion();
     virtual void SetRequestedRegion(itkDataObject * data);
     virtual void SetRequestedRegion(long const & region);
     virtual long GetRequestedRegion() const;
     virtual void SetBufferedRegion(long const & region);
     virtual long GetBufferedRegion() const;
   private:
     itkPointSetD2D(itkPointSetD2D const & arg0);
     void operator=(itkPointSetD2D const & arg0);
   protected:
     itkPointSetD2D();
     ~itkPointSetD2D();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkPointSetD2D_Pointer {
   public:
     itkPointSetD2D_Pointer();
     itkPointSetD2D_Pointer(itkPointSetD2D_Pointer const & p);
     itkPointSetD2D_Pointer(itkPointSetD2D * p);
     ~itkPointSetD2D_Pointer();
     itkPointSetD2D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkPointSetD2D * GetPointer() const;
     bool operator<(itkPointSetD2D_Pointer const & r) const;
     bool operator>(itkPointSetD2D_Pointer const & r) const;
     bool operator<=(itkPointSetD2D_Pointer const & r) const;
     bool operator>=(itkPointSetD2D_Pointer const & r) const;
     itkPointSetD2D_Pointer & operator=(itkPointSetD2D_Pointer const & r);
     itkPointSetD2D_Pointer & operator=(itkPointSetD2D * r);
     itkPointSetD2D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkPointSetD2Q : public itkDataObject {
   public:
     enum  {  PointDimension = 2 };
     static itkPointSetD2Q_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual long GetMaximumNumberOfRegions() const;
     void PassStructure(itkPointSetD2Q * inputPointSet);
     virtual void Initialize();
     unsigned long GetNumberOfPoints() const;
     void SetPoints(itkMapContainerULQEMPF2 * arg0);
     itkMapContainerULQEMPF2 * GetPoints();
     itkMapContainerULQEMPF2 const * GetPoints() const;
     void SetPointData(itkMapContainerULD * arg0);
     itkMapContainerULD * GetPointData();
     itkMapContainerULD const * GetPointData() const;
     void SetPoint(unsigned long arg0, itkQuadEdgeMeshPointF2 arg1);
     bool GetPoint(unsigned long arg0, itkQuadEdgeMeshPointF2 * arg1) const;
     void SetPointData(unsigned long arg0, double arg1);
     bool GetPointData(unsigned long arg0, double * arg1) const;
     itkBoundingBoxUL2FMCULQEMPF2 const * GetBoundingBox() const;
     bool FindClosestPoint(float * arg0, unsigned long * pointId);
     virtual void UpdateOutputInformation();
     virtual void SetRequestedRegionToLargestPossibleRegion();
     virtual void CopyInformation(itkDataObject const * data);
     virtual void Graft(itkDataObject const * data);
     virtual bool RequestedRegionIsOutsideOfTheBufferedRegion();
     virtual bool VerifyRequestedRegion();
     virtual void SetRequestedRegion(itkDataObject * data);
     virtual void SetRequestedRegion(long const & region);
     virtual long GetRequestedRegion() const;
     virtual void SetBufferedRegion(long const & region);
     virtual long GetBufferedRegion() const;
   private:
     itkPointSetD2Q(itkPointSetD2Q const & arg0);
     void operator=(itkPointSetD2Q const & arg0);
   protected:
     itkPointSetD2Q();
     ~itkPointSetD2Q();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkPointSetD2Q_Pointer {
   public:
     itkPointSetD2Q_Pointer();
     itkPointSetD2Q_Pointer(itkPointSetD2Q_Pointer const & p);
     itkPointSetD2Q_Pointer(itkPointSetD2Q * p);
     ~itkPointSetD2Q_Pointer();
     itkPointSetD2Q * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkPointSetD2Q * GetPointer() const;
     bool operator<(itkPointSetD2Q_Pointer const & r) const;
     bool operator>(itkPointSetD2Q_Pointer const & r) const;
     bool operator<=(itkPointSetD2Q_Pointer const & r) const;
     bool operator>=(itkPointSetD2Q_Pointer const & r) const;
     itkPointSetD2Q_Pointer & operator=(itkPointSetD2Q_Pointer const & r);
     itkPointSetD2Q_Pointer & operator=(itkPointSetD2Q * r);
     itkPointSetD2Q * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkPointSetD2S : public itkDataObject {
   public:
     enum  {  PointDimension = 2 };
     static itkPointSetD2S_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual long GetMaximumNumberOfRegions() const;
     void PassStructure(itkPointSetD2S * inputPointSet);
     virtual void Initialize();
     unsigned long GetNumberOfPoints() const;
     void SetPoints(itkVectorContainerULPD2 * arg0);
     itkVectorContainerULPD2 * GetPoints();
     itkVectorContainerULPD2 const * GetPoints() const;
     void SetPointData(itkVectorContainerULD * arg0);
     itkVectorContainerULD * GetPointData();
     itkVectorContainerULD const * GetPointData() const;
     void SetPoint(unsigned long arg0, itkPointD2 arg1);
     bool GetPoint(unsigned long arg0, itkPointD2 * arg1) const;
     void SetPointData(unsigned long arg0, double arg1);
     bool GetPointData(unsigned long arg0, double * arg1) const;
     itkBoundingBoxUL2DVCULPD2 const * GetBoundingBox() const;
     bool FindClosestPoint(double * arg0, unsigned long * pointId);
     virtual void UpdateOutputInformation();
     virtual void SetRequestedRegionToLargestPossibleRegion();
     virtual void CopyInformation(itkDataObject const * data);
     virtual void Graft(itkDataObject const * data);
     virtual bool RequestedRegionIsOutsideOfTheBufferedRegion();
     virtual bool VerifyRequestedRegion();
     virtual void SetRequestedRegion(itkDataObject * data);
     virtual void SetRequestedRegion(long const & region);
     virtual long GetRequestedRegion() const;
     virtual void SetBufferedRegion(long const & region);
     virtual long GetBufferedRegion() const;
   private:
     itkPointSetD2S(itkPointSetD2S const & arg0);
     void operator=(itkPointSetD2S const & arg0);
   protected:
     itkPointSetD2S();
     ~itkPointSetD2S();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkPointSetD2S_Pointer {
   public:
     itkPointSetD2S_Pointer();
     itkPointSetD2S_Pointer(itkPointSetD2S_Pointer const & p);
     itkPointSetD2S_Pointer(itkPointSetD2S * p);
     ~itkPointSetD2S_Pointer();
     itkPointSetD2S * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkPointSetD2S * GetPointer() const;
     bool operator<(itkPointSetD2S_Pointer const & r) const;
     bool operator>(itkPointSetD2S_Pointer const & r) const;
     bool operator<=(itkPointSetD2S_Pointer const & r) const;
     bool operator>=(itkPointSetD2S_Pointer const & r) const;
     itkPointSetD2S_Pointer & operator=(itkPointSetD2S_Pointer const & r);
     itkPointSetD2S_Pointer & operator=(itkPointSetD2S * r);
     itkPointSetD2S * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkPointSetD3D : public itkDataObject {
   public:
     enum  {  PointDimension = 3 };
     static itkPointSetD3D_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual long GetMaximumNumberOfRegions() const;
     void PassStructure(itkPointSetD3D * inputPointSet);
     virtual void Initialize();
     unsigned long GetNumberOfPoints() const;
     void SetPoints(itkMapContainerULPD3 * arg0);
     itkMapContainerULPD3 * GetPoints();
     itkMapContainerULPD3 const * GetPoints() const;
     void SetPointData(itkMapContainerULD * arg0);
     itkMapContainerULD * GetPointData();
     itkMapContainerULD const * GetPointData() const;
     void SetPoint(unsigned long arg0, itkPointD3 arg1);
     bool GetPoint(unsigned long arg0, itkPointD3 * arg1) const;
     void SetPointData(unsigned long arg0, double arg1);
     bool GetPointData(unsigned long arg0, double * arg1) const;
     itkBoundingBoxUL3DMCULPD3 const * GetBoundingBox() const;
     bool FindClosestPoint(double * arg0, unsigned long * pointId);
     virtual void UpdateOutputInformation();
     virtual void SetRequestedRegionToLargestPossibleRegion();
     virtual void CopyInformation(itkDataObject const * data);
     virtual void Graft(itkDataObject const * data);
     virtual bool RequestedRegionIsOutsideOfTheBufferedRegion();
     virtual bool VerifyRequestedRegion();
     virtual void SetRequestedRegion(itkDataObject * data);
     virtual void SetRequestedRegion(long const & region);
     virtual long GetRequestedRegion() const;
     virtual void SetBufferedRegion(long const & region);
     virtual long GetBufferedRegion() const;
   private:
     itkPointSetD3D(itkPointSetD3D const & arg0);
     void operator=(itkPointSetD3D const & arg0);
   protected:
     itkPointSetD3D();
     ~itkPointSetD3D();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkPointSetD3D_Pointer {
   public:
     itkPointSetD3D_Pointer();
     itkPointSetD3D_Pointer(itkPointSetD3D_Pointer const & p);
     itkPointSetD3D_Pointer(itkPointSetD3D * p);
     ~itkPointSetD3D_Pointer();
     itkPointSetD3D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkPointSetD3D * GetPointer() const;
     bool operator<(itkPointSetD3D_Pointer const & r) const;
     bool operator>(itkPointSetD3D_Pointer const & r) const;
     bool operator<=(itkPointSetD3D_Pointer const & r) const;
     bool operator>=(itkPointSetD3D_Pointer const & r) const;
     itkPointSetD3D_Pointer & operator=(itkPointSetD3D_Pointer const & r);
     itkPointSetD3D_Pointer & operator=(itkPointSetD3D * r);
     itkPointSetD3D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkPointSetD3Q : public itkDataObject {
   public:
     enum  {  PointDimension = 3 };
     static itkPointSetD3Q_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual long GetMaximumNumberOfRegions() const;
     void PassStructure(itkPointSetD3Q * inputPointSet);
     virtual void Initialize();
     unsigned long GetNumberOfPoints() const;
     void SetPoints(itkMapContainerULQEMPF3 * arg0);
     itkMapContainerULQEMPF3 * GetPoints();
     itkMapContainerULQEMPF3 const * GetPoints() const;
     void SetPointData(itkMapContainerULD * arg0);
     itkMapContainerULD * GetPointData();
     itkMapContainerULD const * GetPointData() const;
     void SetPoint(unsigned long arg0, itkQuadEdgeMeshPointF3 arg1);
     bool GetPoint(unsigned long arg0, itkQuadEdgeMeshPointF3 * arg1) const;
     void SetPointData(unsigned long arg0, double arg1);
     bool GetPointData(unsigned long arg0, double * arg1) const;
     itkBoundingBoxUL3FMCULQEMPF3 const * GetBoundingBox() const;
     bool FindClosestPoint(float * arg0, unsigned long * pointId);
     virtual void UpdateOutputInformation();
     virtual void SetRequestedRegionToLargestPossibleRegion();
     virtual void CopyInformation(itkDataObject const * data);
     virtual void Graft(itkDataObject const * data);
     virtual bool RequestedRegionIsOutsideOfTheBufferedRegion();
     virtual bool VerifyRequestedRegion();
     virtual void SetRequestedRegion(itkDataObject * data);
     virtual void SetRequestedRegion(long const & region);
     virtual long GetRequestedRegion() const;
     virtual void SetBufferedRegion(long const & region);
     virtual long GetBufferedRegion() const;
   private:
     itkPointSetD3Q(itkPointSetD3Q const & arg0);
     void operator=(itkPointSetD3Q const & arg0);
   protected:
     itkPointSetD3Q();
     ~itkPointSetD3Q();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkPointSetD3Q_Pointer {
   public:
     itkPointSetD3Q_Pointer();
     itkPointSetD3Q_Pointer(itkPointSetD3Q_Pointer const & p);
     itkPointSetD3Q_Pointer(itkPointSetD3Q * p);
     ~itkPointSetD3Q_Pointer();
     itkPointSetD3Q * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkPointSetD3Q * GetPointer() const;
     bool operator<(itkPointSetD3Q_Pointer const & r) const;
     bool operator>(itkPointSetD3Q_Pointer const & r) const;
     bool operator<=(itkPointSetD3Q_Pointer const & r) const;
     bool operator>=(itkPointSetD3Q_Pointer const & r) const;
     itkPointSetD3Q_Pointer & operator=(itkPointSetD3Q_Pointer const & r);
     itkPointSetD3Q_Pointer & operator=(itkPointSetD3Q * r);
     itkPointSetD3Q * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkPointSetD3S : public itkDataObject {
   public:
     enum  {  PointDimension = 3 };
     static itkPointSetD3S_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual long GetMaximumNumberOfRegions() const;
     void PassStructure(itkPointSetD3S * inputPointSet);
     virtual void Initialize();
     unsigned long GetNumberOfPoints() const;
     void SetPoints(itkVectorContainerULPD3 * arg0);
     itkVectorContainerULPD3 * GetPoints();
     itkVectorContainerULPD3 const * GetPoints() const;
     void SetPointData(itkVectorContainerULD * arg0);
     itkVectorContainerULD * GetPointData();
     itkVectorContainerULD const * GetPointData() const;
     void SetPoint(unsigned long arg0, itkPointD3 arg1);
     bool GetPoint(unsigned long arg0, itkPointD3 * arg1) const;
     void SetPointData(unsigned long arg0, double arg1);
     bool GetPointData(unsigned long arg0, double * arg1) const;
     itkBoundingBoxUL3DVCULPD3 const * GetBoundingBox() const;
     bool FindClosestPoint(double * arg0, unsigned long * pointId);
     virtual void UpdateOutputInformation();
     virtual void SetRequestedRegionToLargestPossibleRegion();
     virtual void CopyInformation(itkDataObject const * data);
     virtual void Graft(itkDataObject const * data);
     virtual bool RequestedRegionIsOutsideOfTheBufferedRegion();
     virtual bool VerifyRequestedRegion();
     virtual void SetRequestedRegion(itkDataObject * data);
     virtual void SetRequestedRegion(long const & region);
     virtual long GetRequestedRegion() const;
     virtual void SetBufferedRegion(long const & region);
     virtual long GetBufferedRegion() const;
   private:
     itkPointSetD3S(itkPointSetD3S const & arg0);
     void operator=(itkPointSetD3S const & arg0);
   protected:
     itkPointSetD3S();
     ~itkPointSetD3S();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkPointSetD3S_Pointer {
   public:
     itkPointSetD3S_Pointer();
     itkPointSetD3S_Pointer(itkPointSetD3S_Pointer const & p);
     itkPointSetD3S_Pointer(itkPointSetD3S * p);
     ~itkPointSetD3S_Pointer();
     itkPointSetD3S * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkPointSetD3S * GetPointer() const;
     bool operator<(itkPointSetD3S_Pointer const & r) const;
     bool operator>(itkPointSetD3S_Pointer const & r) const;
     bool operator<=(itkPointSetD3S_Pointer const & r) const;
     bool operator>=(itkPointSetD3S_Pointer const & r) const;
     itkPointSetD3S_Pointer & operator=(itkPointSetD3S_Pointer const & r);
     itkPointSetD3S_Pointer & operator=(itkPointSetD3S * r);
     itkPointSetD3S * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkPointSetPD22S : public itkDataObject {
   public:
     enum  {  PointDimension = 2 };
     static itkPointSetPD22S_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual long GetMaximumNumberOfRegions() const;
     void PassStructure(itkPointSetPD22S * inputPointSet);
     virtual void Initialize();
     unsigned long GetNumberOfPoints() const;
     void SetPoints(itkVectorContainerULPD2 * arg0);
     itkVectorContainerULPD2 * GetPoints();
     itkVectorContainerULPD2 const * GetPoints() const;
     void SetPointData(itkVectorContainerULD * arg0);
     itkVectorContainerULD * GetPointData();
     itkVectorContainerULD const * GetPointData() const;
     void SetPoint(unsigned long arg0, itkPointD2 arg1);
     bool GetPoint(unsigned long arg0, itkPointD2 * arg1) const;
     void SetPointData(unsigned long arg0, double arg1);
     bool GetPointData(unsigned long arg0, double * arg1) const;
     itkBoundingBoxUL2DVCULPD2 const * GetBoundingBox() const;
     bool FindClosestPoint(double * arg0, unsigned long * pointId);
     virtual void UpdateOutputInformation();
     virtual void SetRequestedRegionToLargestPossibleRegion();
     virtual void CopyInformation(itkDataObject const * data);
     virtual void Graft(itkDataObject const * data);
     virtual bool RequestedRegionIsOutsideOfTheBufferedRegion();
     virtual bool VerifyRequestedRegion();
     virtual void SetRequestedRegion(itkDataObject * data);
     virtual void SetRequestedRegion(long const & region);
     virtual long GetRequestedRegion() const;
     virtual void SetBufferedRegion(long const & region);
     virtual long GetBufferedRegion() const;
   private:
     itkPointSetPD22S(itkPointSetPD22S const & arg0);
     void operator=(itkPointSetPD22S const & arg0);
   protected:
     itkPointSetPD22S();
     ~itkPointSetPD22S();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkPointSetPD22S_Pointer {
   public:
     itkPointSetPD22S_Pointer();
     itkPointSetPD22S_Pointer(itkPointSetPD22S_Pointer const & p);
     itkPointSetPD22S_Pointer(itkPointSetPD22S * p);
     ~itkPointSetPD22S_Pointer();
     itkPointSetPD22S * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkPointSetPD22S * GetPointer() const;
     bool operator<(itkPointSetPD22S_Pointer const & r) const;
     bool operator>(itkPointSetPD22S_Pointer const & r) const;
     bool operator<=(itkPointSetPD22S_Pointer const & r) const;
     bool operator>=(itkPointSetPD22S_Pointer const & r) const;
     itkPointSetPD22S_Pointer & operator=(itkPointSetPD22S_Pointer const & r);
     itkPointSetPD22S_Pointer & operator=(itkPointSetPD22S * r);
     itkPointSetPD22S * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkPointSetPD33S : public itkDataObject {
   public:
     enum  {  PointDimension = 3 };
     static itkPointSetPD33S_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual long GetMaximumNumberOfRegions() const;
     void PassStructure(itkPointSetPD33S * inputPointSet);
     virtual void Initialize();
     unsigned long GetNumberOfPoints() const;
     void SetPoints(itkVectorContainerULPD3 * arg0);
     itkVectorContainerULPD3 * GetPoints();
     itkVectorContainerULPD3 const * GetPoints() const;
     void SetPointData(itkVectorContainerULD * arg0);
     itkVectorContainerULD * GetPointData();
     itkVectorContainerULD const * GetPointData() const;
     void SetPoint(unsigned long arg0, itkPointD3 arg1);
     bool GetPoint(unsigned long arg0, itkPointD3 * arg1) const;
     void SetPointData(unsigned long arg0, double arg1);
     bool GetPointData(unsigned long arg0, double * arg1) const;
     itkBoundingBoxUL3DVCULPD3 const * GetBoundingBox() const;
     bool FindClosestPoint(double * arg0, unsigned long * pointId);
     virtual void UpdateOutputInformation();
     virtual void SetRequestedRegionToLargestPossibleRegion();
     virtual void CopyInformation(itkDataObject const * data);
     virtual void Graft(itkDataObject const * data);
     virtual bool RequestedRegionIsOutsideOfTheBufferedRegion();
     virtual bool VerifyRequestedRegion();
     virtual void SetRequestedRegion(itkDataObject * data);
     virtual void SetRequestedRegion(long const & region);
     virtual long GetRequestedRegion() const;
     virtual void SetBufferedRegion(long const & region);
     virtual long GetBufferedRegion() const;
   private:
     itkPointSetPD33S(itkPointSetPD33S const & arg0);
     void operator=(itkPointSetPD33S const & arg0);
   protected:
     itkPointSetPD33S();
     ~itkPointSetPD33S();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkPointSetPD33S_Pointer {
   public:
     itkPointSetPD33S_Pointer();
     itkPointSetPD33S_Pointer(itkPointSetPD33S_Pointer const & p);
     itkPointSetPD33S_Pointer(itkPointSetPD33S * p);
     ~itkPointSetPD33S_Pointer();
     itkPointSetPD33S * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkPointSetPD33S * GetPointer() const;
     bool operator<(itkPointSetPD33S_Pointer const & r) const;
     bool operator>(itkPointSetPD33S_Pointer const & r) const;
     bool operator<=(itkPointSetPD33S_Pointer const & r) const;
     bool operator>=(itkPointSetPD33S_Pointer const & r) const;
     itkPointSetPD33S_Pointer & operator=(itkPointSetPD33S_Pointer const & r);
     itkPointSetPD33S_Pointer & operator=(itkPointSetPD33S * r);
     itkPointSetPD33S * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


