// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module ITKCenteredEulerTransformChicken
#endif
#ifdef SWIGCSHARP
%module ITKCenteredEulerTransformCsharp
#endif
#ifdef SWIGGUILE
%module ITKCenteredEulerTransformGuile
#endif
#ifdef SWIGJAVA
%module ITKCenteredEulerTransformJava
#endif
#ifdef SWIGLUA
%module ITKCenteredEulerTransformLua
#endif
#ifdef SWIGMODULA3
%module ITKCenteredEulerTransformModula3
#endif
#ifdef SWIGMZSCHEME
%module ITKCenteredEulerTransformMzscheme
#endif
#ifdef SWIGOCAML
%module ITKCenteredEulerTransformOcaml
#endif
#ifdef SWIGPERL
%module ITKCenteredEulerTransformPerl
#endif
#ifdef SWIGPERL5
%module ITKCenteredEulerTransformPerl5
#endif
#ifdef SWIGPHP
%module ITKCenteredEulerTransformPhp
#endif
#ifdef SWIGPHP4
%module ITKCenteredEulerTransformPhp4
#endif
#ifdef SWIGPHP5
%module ITKCenteredEulerTransformPhp5
#endif
#ifdef SWIGPIKE
%module ITKCenteredEulerTransformPike
#endif
#ifdef SWIGPYTHON
%module ITKCenteredEulerTransformPython
#endif
#ifdef SWIGR
%module ITKCenteredEulerTransformR
#endif
#ifdef SWIGRUBY
%module ITKCenteredEulerTransformRuby
#endif
#ifdef SWIGSEXP
%module ITKCenteredEulerTransformSexp
#endif
#ifdef SWIGTCL
%module ITKCenteredEulerTransformTcl
#endif
#ifdef SWIGXML
%module ITKCenteredEulerTransformXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
%}


%{
%}




%import wrap_itkPoint.i
%import wrap_itkTransform.i
%import wrap_itkArray2D.i
%import wrap_ITKEulerTransform.i
%import wrap_itkArray.i
%import wrap_itkMatrix.i
%import wrap_ITKCommonBase.i


%include itk.i
%include wrap_ITKCenteredEulerTransform_ext.i


 class itkCenteredEuler3DTransformD : public itkEuler3DTransformD {
   public:
     enum  {  SpaceDimension = 3 };
     enum  {  InputSpaceDimension = 3 };
     enum  {  OutputSpaceDimension = 3 };
     enum  {  ParametersDimension = 9 };
     virtual char const * GetNameOfClass() const;
     static itkCenteredEuler3DTransformD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void SetParameters(itkArrayD const & parameters);
     virtual itkArrayD const & GetParameters() const;
     virtual itkArray2DD const & GetJacobian(itkPointD3 const & point) const;
     bool GetInverse(itkCenteredEuler3DTransformD * inverse) const;
     virtual itkTransformBase_Pointer GetInverseTransform() const;
   private:
     itkCenteredEuler3DTransformD(itkCenteredEuler3DTransformD const & arg0);
     void operator=(itkCenteredEuler3DTransformD const & arg0);
   protected:
     itkCenteredEuler3DTransformD();
     itkCenteredEuler3DTransformD(unsigned int SpaceDimension, unsigned int ParametersDimension);
     itkCenteredEuler3DTransformD(itkMatrixD33 const & matrix, itkPointD3 const & offset);
     ~itkCenteredEuler3DTransformD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkCenteredEuler3DTransformD_Pointer {
   public:
     itkCenteredEuler3DTransformD_Pointer();
     itkCenteredEuler3DTransformD_Pointer(itkCenteredEuler3DTransformD_Pointer const & p);
     itkCenteredEuler3DTransformD_Pointer(itkCenteredEuler3DTransformD * p);
     ~itkCenteredEuler3DTransformD_Pointer();
     itkCenteredEuler3DTransformD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkCenteredEuler3DTransformD * GetPointer() const;
     bool operator<(itkCenteredEuler3DTransformD_Pointer const & r) const;
     bool operator>(itkCenteredEuler3DTransformD_Pointer const & r) const;
     bool operator<=(itkCenteredEuler3DTransformD_Pointer const & r) const;
     bool operator>=(itkCenteredEuler3DTransformD_Pointer const & r) const;
     itkCenteredEuler3DTransformD_Pointer & operator=(itkCenteredEuler3DTransformD_Pointer const & r);
     itkCenteredEuler3DTransformD_Pointer & operator=(itkCenteredEuler3DTransformD * r);
     itkCenteredEuler3DTransformD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


