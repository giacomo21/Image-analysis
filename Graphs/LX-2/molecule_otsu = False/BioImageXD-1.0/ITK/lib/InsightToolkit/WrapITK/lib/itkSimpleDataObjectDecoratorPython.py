# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkSimpleDataObjectDecoratorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkSimpleDataObjectDecoratorPython', [dirname(__file__)])
        except ImportError:
            import _itkSimpleDataObjectDecoratorPython
            return _itkSimpleDataObjectDecoratorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkSimpleDataObjectDecoratorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkSimpleDataObjectDecoratorPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkSimpleDataObjectDecoratorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import itkEventObjectsPython
import pyBasePython
def itkSimpleDataObjectDecoratorB_New():
  return itkSimpleDataObjectDecoratorB.New()

def itkSimpleDataObjectDecoratorSC_New():
  return itkSimpleDataObjectDecoratorSC.New()

def itkSimpleDataObjectDecoratorSS_New():
  return itkSimpleDataObjectDecoratorSS.New()

def itkSimpleDataObjectDecoratorSL_New():
  return itkSimpleDataObjectDecoratorSL.New()

def itkSimpleDataObjectDecoratorUC_New():
  return itkSimpleDataObjectDecoratorUC.New()

def itkSimpleDataObjectDecoratorUS_New():
  return itkSimpleDataObjectDecoratorUS.New()

def itkSimpleDataObjectDecoratorUL_New():
  return itkSimpleDataObjectDecoratorUL.New()

def itkSimpleDataObjectDecoratorF_New():
  return itkSimpleDataObjectDecoratorF.New()

def itkSimpleDataObjectDecoratorD_New():
  return itkSimpleDataObjectDecoratorD.New()

class itkSimpleDataObjectDecoratorB(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkSimpleDataObjectDecoratorB class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Set(self, *args):
        """Set(self, bool val)"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_Set(self, *args)

    def Get(self, *args):
        """
        Get(self) -> bool
        Get(self) -> bool
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorB
    def cast(*args):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorB"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkSimpleDataObjectDecoratorB"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorB
        
        Create a new object of the class itkSimpleDataObjectDecoratorB and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkSimpleDataObjectDecoratorB.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkSimpleDataObjectDecoratorB.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorB.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorB.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_Set,None,itkSimpleDataObjectDecoratorB)
itkSimpleDataObjectDecoratorB.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_Get,None,itkSimpleDataObjectDecoratorB)
itkSimpleDataObjectDecoratorB.GetPointer = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_GetPointer,None,itkSimpleDataObjectDecoratorB)
itkSimpleDataObjectDecoratorB_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_swigregister
itkSimpleDataObjectDecoratorB_swigregister(itkSimpleDataObjectDecoratorB)

def itkSimpleDataObjectDecoratorB___New_orig__():
  """itkSimpleDataObjectDecoratorB___New_orig__()"""
  return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB___New_orig__()

def itkSimpleDataObjectDecoratorB_cast(*args):
  """itkSimpleDataObjectDecoratorB_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorB"""
  return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorB_cast(*args)

class itkSimpleDataObjectDecoratorD(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkSimpleDataObjectDecoratorD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Set(self, *args):
        """Set(self, double val)"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_Set(self, *args)

    def Get(self, *args):
        """
        Get(self) -> double
        Get(self) -> double
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorD
    def cast(*args):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorD"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkSimpleDataObjectDecoratorD"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorD
        
        Create a new object of the class itkSimpleDataObjectDecoratorD and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkSimpleDataObjectDecoratorD.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkSimpleDataObjectDecoratorD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorD.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_Set,None,itkSimpleDataObjectDecoratorD)
itkSimpleDataObjectDecoratorD.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_Get,None,itkSimpleDataObjectDecoratorD)
itkSimpleDataObjectDecoratorD.GetPointer = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_GetPointer,None,itkSimpleDataObjectDecoratorD)
itkSimpleDataObjectDecoratorD_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_swigregister
itkSimpleDataObjectDecoratorD_swigregister(itkSimpleDataObjectDecoratorD)

def itkSimpleDataObjectDecoratorD___New_orig__():
  """itkSimpleDataObjectDecoratorD___New_orig__()"""
  return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD___New_orig__()

def itkSimpleDataObjectDecoratorD_cast(*args):
  """itkSimpleDataObjectDecoratorD_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorD"""
  return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorD_cast(*args)

class itkSimpleDataObjectDecoratorF(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkSimpleDataObjectDecoratorF class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Set(self, *args):
        """Set(self, float val)"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_Set(self, *args)

    def Get(self, *args):
        """
        Get(self) -> float
        Get(self) -> float
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorF
    def cast(*args):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorF"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkSimpleDataObjectDecoratorF"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorF
        
        Create a new object of the class itkSimpleDataObjectDecoratorF and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkSimpleDataObjectDecoratorF.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkSimpleDataObjectDecoratorF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorF.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_Set,None,itkSimpleDataObjectDecoratorF)
itkSimpleDataObjectDecoratorF.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_Get,None,itkSimpleDataObjectDecoratorF)
itkSimpleDataObjectDecoratorF.GetPointer = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_GetPointer,None,itkSimpleDataObjectDecoratorF)
itkSimpleDataObjectDecoratorF_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_swigregister
itkSimpleDataObjectDecoratorF_swigregister(itkSimpleDataObjectDecoratorF)

def itkSimpleDataObjectDecoratorF___New_orig__():
  """itkSimpleDataObjectDecoratorF___New_orig__()"""
  return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF___New_orig__()

def itkSimpleDataObjectDecoratorF_cast(*args):
  """itkSimpleDataObjectDecoratorF_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorF"""
  return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorF_cast(*args)

class itkSimpleDataObjectDecoratorSC(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkSimpleDataObjectDecoratorSC class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Set(self, *args):
        """Set(self, signed char val)"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_Set(self, *args)

    def Get(self, *args):
        """
        Get(self) -> signed char
        Get(self) -> signed char
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorSC
    def cast(*args):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorSC"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkSimpleDataObjectDecoratorSC"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorSC
        
        Create a new object of the class itkSimpleDataObjectDecoratorSC and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkSimpleDataObjectDecoratorSC.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkSimpleDataObjectDecoratorSC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorSC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorSC.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_Set,None,itkSimpleDataObjectDecoratorSC)
itkSimpleDataObjectDecoratorSC.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_Get,None,itkSimpleDataObjectDecoratorSC)
itkSimpleDataObjectDecoratorSC.GetPointer = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_GetPointer,None,itkSimpleDataObjectDecoratorSC)
itkSimpleDataObjectDecoratorSC_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_swigregister
itkSimpleDataObjectDecoratorSC_swigregister(itkSimpleDataObjectDecoratorSC)

def itkSimpleDataObjectDecoratorSC___New_orig__():
  """itkSimpleDataObjectDecoratorSC___New_orig__()"""
  return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC___New_orig__()

def itkSimpleDataObjectDecoratorSC_cast(*args):
  """itkSimpleDataObjectDecoratorSC_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorSC"""
  return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSC_cast(*args)

class itkSimpleDataObjectDecoratorSL(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkSimpleDataObjectDecoratorSL class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Set(self, *args):
        """Set(self, long val)"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_Set(self, *args)

    def Get(self, *args):
        """
        Get(self) -> long
        Get(self) -> long
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorSL
    def cast(*args):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorSL"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkSimpleDataObjectDecoratorSL"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorSL
        
        Create a new object of the class itkSimpleDataObjectDecoratorSL and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkSimpleDataObjectDecoratorSL.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkSimpleDataObjectDecoratorSL.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorSL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorSL.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_Set,None,itkSimpleDataObjectDecoratorSL)
itkSimpleDataObjectDecoratorSL.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_Get,None,itkSimpleDataObjectDecoratorSL)
itkSimpleDataObjectDecoratorSL.GetPointer = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_GetPointer,None,itkSimpleDataObjectDecoratorSL)
itkSimpleDataObjectDecoratorSL_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_swigregister
itkSimpleDataObjectDecoratorSL_swigregister(itkSimpleDataObjectDecoratorSL)

def itkSimpleDataObjectDecoratorSL___New_orig__():
  """itkSimpleDataObjectDecoratorSL___New_orig__()"""
  return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL___New_orig__()

def itkSimpleDataObjectDecoratorSL_cast(*args):
  """itkSimpleDataObjectDecoratorSL_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorSL"""
  return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSL_cast(*args)

class itkSimpleDataObjectDecoratorSS(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkSimpleDataObjectDecoratorSS class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Set(self, *args):
        """Set(self, short val)"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_Set(self, *args)

    def Get(self, *args):
        """
        Get(self) -> short
        Get(self) -> short
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorSS
    def cast(*args):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorSS"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkSimpleDataObjectDecoratorSS"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorSS
        
        Create a new object of the class itkSimpleDataObjectDecoratorSS and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkSimpleDataObjectDecoratorSS.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkSimpleDataObjectDecoratorSS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorSS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorSS.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_Set,None,itkSimpleDataObjectDecoratorSS)
itkSimpleDataObjectDecoratorSS.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_Get,None,itkSimpleDataObjectDecoratorSS)
itkSimpleDataObjectDecoratorSS.GetPointer = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_GetPointer,None,itkSimpleDataObjectDecoratorSS)
itkSimpleDataObjectDecoratorSS_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_swigregister
itkSimpleDataObjectDecoratorSS_swigregister(itkSimpleDataObjectDecoratorSS)

def itkSimpleDataObjectDecoratorSS___New_orig__():
  """itkSimpleDataObjectDecoratorSS___New_orig__()"""
  return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS___New_orig__()

def itkSimpleDataObjectDecoratorSS_cast(*args):
  """itkSimpleDataObjectDecoratorSS_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorSS"""
  return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorSS_cast(*args)

class itkSimpleDataObjectDecoratorUC(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkSimpleDataObjectDecoratorUC class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Set(self, *args):
        """Set(self, unsigned char val)"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_Set(self, *args)

    def Get(self, *args):
        """
        Get(self) -> unsigned char
        Get(self) -> unsigned char
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorUC
    def cast(*args):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorUC"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkSimpleDataObjectDecoratorUC"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorUC
        
        Create a new object of the class itkSimpleDataObjectDecoratorUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkSimpleDataObjectDecoratorUC.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkSimpleDataObjectDecoratorUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorUC.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_Set,None,itkSimpleDataObjectDecoratorUC)
itkSimpleDataObjectDecoratorUC.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_Get,None,itkSimpleDataObjectDecoratorUC)
itkSimpleDataObjectDecoratorUC.GetPointer = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_GetPointer,None,itkSimpleDataObjectDecoratorUC)
itkSimpleDataObjectDecoratorUC_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_swigregister
itkSimpleDataObjectDecoratorUC_swigregister(itkSimpleDataObjectDecoratorUC)

def itkSimpleDataObjectDecoratorUC___New_orig__():
  """itkSimpleDataObjectDecoratorUC___New_orig__()"""
  return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC___New_orig__()

def itkSimpleDataObjectDecoratorUC_cast(*args):
  """itkSimpleDataObjectDecoratorUC_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorUC"""
  return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUC_cast(*args)

class itkSimpleDataObjectDecoratorUL(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkSimpleDataObjectDecoratorUL class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Set(self, *args):
        """Set(self, unsigned long val)"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_Set(self, *args)

    def Get(self, *args):
        """
        Get(self) -> unsigned long
        Get(self) -> unsigned long
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorUL
    def cast(*args):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorUL"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkSimpleDataObjectDecoratorUL"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorUL
        
        Create a new object of the class itkSimpleDataObjectDecoratorUL and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkSimpleDataObjectDecoratorUL.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkSimpleDataObjectDecoratorUL.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorUL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorUL.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_Set,None,itkSimpleDataObjectDecoratorUL)
itkSimpleDataObjectDecoratorUL.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_Get,None,itkSimpleDataObjectDecoratorUL)
itkSimpleDataObjectDecoratorUL.GetPointer = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_GetPointer,None,itkSimpleDataObjectDecoratorUL)
itkSimpleDataObjectDecoratorUL_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_swigregister
itkSimpleDataObjectDecoratorUL_swigregister(itkSimpleDataObjectDecoratorUL)

def itkSimpleDataObjectDecoratorUL___New_orig__():
  """itkSimpleDataObjectDecoratorUL___New_orig__()"""
  return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL___New_orig__()

def itkSimpleDataObjectDecoratorUL_cast(*args):
  """itkSimpleDataObjectDecoratorUL_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorUL"""
  return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUL_cast(*args)

class itkSimpleDataObjectDecoratorUS(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkSimpleDataObjectDecoratorUS class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Set(self, *args):
        """Set(self, unsigned short val)"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_Set(self, *args)

    def Get(self, *args):
        """
        Get(self) -> unsigned short
        Get(self) -> unsigned short
        """
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_Get(self, *args)

    __swig_destroy__ = _itkSimpleDataObjectDecoratorPython.delete_itkSimpleDataObjectDecoratorUS
    def cast(*args):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorUS"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkSimpleDataObjectDecoratorUS"""
        return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorUS
        
        Create a new object of the class itkSimpleDataObjectDecoratorUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkSimpleDataObjectDecoratorUS.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkSimpleDataObjectDecoratorUS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorUS.Set = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_Set,None,itkSimpleDataObjectDecoratorUS)
itkSimpleDataObjectDecoratorUS.Get = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_Get,None,itkSimpleDataObjectDecoratorUS)
itkSimpleDataObjectDecoratorUS.GetPointer = new_instancemethod(_itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_GetPointer,None,itkSimpleDataObjectDecoratorUS)
itkSimpleDataObjectDecoratorUS_swigregister = _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_swigregister
itkSimpleDataObjectDecoratorUS_swigregister(itkSimpleDataObjectDecoratorUS)

def itkSimpleDataObjectDecoratorUS___New_orig__():
  """itkSimpleDataObjectDecoratorUS___New_orig__()"""
  return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS___New_orig__()

def itkSimpleDataObjectDecoratorUS_cast(*args):
  """itkSimpleDataObjectDecoratorUS_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorUS"""
  return _itkSimpleDataObjectDecoratorPython.itkSimpleDataObjectDecoratorUS_cast(*args)



