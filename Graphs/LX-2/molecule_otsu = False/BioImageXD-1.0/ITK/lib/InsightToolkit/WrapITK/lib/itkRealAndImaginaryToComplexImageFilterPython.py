# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkRealAndImaginaryToComplexImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkRealAndImaginaryToComplexImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkRealAndImaginaryToComplexImageFilterPython
            return _itkRealAndImaginaryToComplexImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkRealAndImaginaryToComplexImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkRealAndImaginaryToComplexImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkRealAndImaginaryToComplexImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import itkEventObjectsPython
import pyBasePython
import ITKRegionsPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkInPlaceImageFilterBPython
import itkImageToImageFilterBPython
import itkImagePython
import itkFixedArrayPython
import itkCovariantVectorPython
import vnl_vectorPython
import vcl_complexPython
import vnl_matrixPython
import itkVectorPython
import vnl_vector_refPython
import itkPointPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkRGBPixelPython
import itkImageSourcePython
import itkVectorImagePython
import itkVariableLengthVectorPython
def itkRealAndImaginaryToComplexImageFilterDDF3_New():
  return itkRealAndImaginaryToComplexImageFilterDDF3.New()

def itkRealAndImaginaryToComplexImageFilterDDF3_Superclass_New():
  return itkRealAndImaginaryToComplexImageFilterDDF3_Superclass.New()

def itkRealAndImaginaryToComplexImageFilterFFF3_New():
  return itkRealAndImaginaryToComplexImageFilterFFF3.New()

def itkRealAndImaginaryToComplexImageFilterFFF3_Superclass_New():
  return itkRealAndImaginaryToComplexImageFilterFFF3_Superclass.New()

def itkRealAndImaginaryToComplexImageFilterDDF2_New():
  return itkRealAndImaginaryToComplexImageFilterDDF2.New()

def itkRealAndImaginaryToComplexImageFilterDDF2_Superclass_New():
  return itkRealAndImaginaryToComplexImageFilterDDF2_Superclass.New()

def itkRealAndImaginaryToComplexImageFilterFFF2_New():
  return itkRealAndImaginaryToComplexImageFilterFFF2.New()

def itkRealAndImaginaryToComplexImageFilterFFF2_Superclass_New():
  return itkRealAndImaginaryToComplexImageFilterFFF2_Superclass.New()

class itkRealAndImaginaryToComplexImageFilterDDF2_Superclass(itkInPlaceImageFilterBPython.itkInPlaceImageFilterID2ICF2):
    """Proxy of C++ itkRealAndImaginaryToComplexImageFilterDDF2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImage1Dimension = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_Superclass_InputImage1Dimension
    InputImage2Dimension = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_Superclass_InputImage2Dimension
    OutputImageDimension = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_Superclass_OutputImageDimension
    SameDimensionCheck1 = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_Superclass_SameDimensionCheck1
    SameDimensionCheck2 = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_Superclass_SameDimensionCheck2
    def __New_orig__():
        """__New_orig__()"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetInput1(self, *args):
        """SetInput1(self, itkImageD2 image1)"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_Superclass_SetInput1(self, *args)

    def SetInput2(self, *args):
        """SetInput2(self, itkImageD2 image2)"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_Superclass_SetInput2(self, *args)

    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::RealAndImaginaryToComplex<(double,double,float)>
        GetFunctor(self) -> itk::Functor::RealAndImaginaryToComplex<(double,double,float)>
        """
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::RealAndImaginaryToComplex<(double,double,float)> functor)"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkRealAndImaginaryToComplexImageFilterPython.delete_itkRealAndImaginaryToComplexImageFilterDDF2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkRealAndImaginaryToComplexImageFilterDDF2_Superclass"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkRealAndImaginaryToComplexImageFilterDDF2_Superclass"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkRealAndImaginaryToComplexImageFilterDDF2_Superclass
        
        Create a new object of the class itkRealAndImaginaryToComplexImageFilterDDF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkRealAndImaginaryToComplexImageFilterDDF2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkRealAndImaginaryToComplexImageFilterDDF2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRealAndImaginaryToComplexImageFilterDDF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRealAndImaginaryToComplexImageFilterDDF2_Superclass.SetInput1 = new_instancemethod(_itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_Superclass_SetInput1,None,itkRealAndImaginaryToComplexImageFilterDDF2_Superclass)
itkRealAndImaginaryToComplexImageFilterDDF2_Superclass.SetInput2 = new_instancemethod(_itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_Superclass_SetInput2,None,itkRealAndImaginaryToComplexImageFilterDDF2_Superclass)
itkRealAndImaginaryToComplexImageFilterDDF2_Superclass.GetFunctor = new_instancemethod(_itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_Superclass_GetFunctor,None,itkRealAndImaginaryToComplexImageFilterDDF2_Superclass)
itkRealAndImaginaryToComplexImageFilterDDF2_Superclass.SetFunctor = new_instancemethod(_itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_Superclass_SetFunctor,None,itkRealAndImaginaryToComplexImageFilterDDF2_Superclass)
itkRealAndImaginaryToComplexImageFilterDDF2_Superclass.GetPointer = new_instancemethod(_itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_Superclass_GetPointer,None,itkRealAndImaginaryToComplexImageFilterDDF2_Superclass)
itkRealAndImaginaryToComplexImageFilterDDF2_Superclass_swigregister = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_Superclass_swigregister
itkRealAndImaginaryToComplexImageFilterDDF2_Superclass_swigregister(itkRealAndImaginaryToComplexImageFilterDDF2_Superclass)

def itkRealAndImaginaryToComplexImageFilterDDF2_Superclass___New_orig__():
  """itkRealAndImaginaryToComplexImageFilterDDF2_Superclass___New_orig__()"""
  return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_Superclass___New_orig__()

def itkRealAndImaginaryToComplexImageFilterDDF2_Superclass_cast(*args):
  """itkRealAndImaginaryToComplexImageFilterDDF2_Superclass_cast(itkLightObject obj) -> itkRealAndImaginaryToComplexImageFilterDDF2_Superclass"""
  return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_Superclass_cast(*args)

class itkRealAndImaginaryToComplexImageFilterDDF3_Superclass(itkInPlaceImageFilterBPython.itkInPlaceImageFilterID3ICF3):
    """Proxy of C++ itkRealAndImaginaryToComplexImageFilterDDF3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImage1Dimension = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_Superclass_InputImage1Dimension
    InputImage2Dimension = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_Superclass_InputImage2Dimension
    OutputImageDimension = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_Superclass_OutputImageDimension
    SameDimensionCheck1 = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_Superclass_SameDimensionCheck1
    SameDimensionCheck2 = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_Superclass_SameDimensionCheck2
    def __New_orig__():
        """__New_orig__()"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetInput1(self, *args):
        """SetInput1(self, itkImageD3 image1)"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_Superclass_SetInput1(self, *args)

    def SetInput2(self, *args):
        """SetInput2(self, itkImageD3 image2)"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_Superclass_SetInput2(self, *args)

    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::RealAndImaginaryToComplex<(double,double,float)>
        GetFunctor(self) -> itk::Functor::RealAndImaginaryToComplex<(double,double,float)>
        """
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::RealAndImaginaryToComplex<(double,double,float)> functor)"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkRealAndImaginaryToComplexImageFilterPython.delete_itkRealAndImaginaryToComplexImageFilterDDF3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkRealAndImaginaryToComplexImageFilterDDF3_Superclass"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkRealAndImaginaryToComplexImageFilterDDF3_Superclass"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkRealAndImaginaryToComplexImageFilterDDF3_Superclass
        
        Create a new object of the class itkRealAndImaginaryToComplexImageFilterDDF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkRealAndImaginaryToComplexImageFilterDDF3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkRealAndImaginaryToComplexImageFilterDDF3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRealAndImaginaryToComplexImageFilterDDF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRealAndImaginaryToComplexImageFilterDDF3_Superclass.SetInput1 = new_instancemethod(_itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_Superclass_SetInput1,None,itkRealAndImaginaryToComplexImageFilterDDF3_Superclass)
itkRealAndImaginaryToComplexImageFilterDDF3_Superclass.SetInput2 = new_instancemethod(_itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_Superclass_SetInput2,None,itkRealAndImaginaryToComplexImageFilterDDF3_Superclass)
itkRealAndImaginaryToComplexImageFilterDDF3_Superclass.GetFunctor = new_instancemethod(_itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_Superclass_GetFunctor,None,itkRealAndImaginaryToComplexImageFilterDDF3_Superclass)
itkRealAndImaginaryToComplexImageFilterDDF3_Superclass.SetFunctor = new_instancemethod(_itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_Superclass_SetFunctor,None,itkRealAndImaginaryToComplexImageFilterDDF3_Superclass)
itkRealAndImaginaryToComplexImageFilterDDF3_Superclass.GetPointer = new_instancemethod(_itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_Superclass_GetPointer,None,itkRealAndImaginaryToComplexImageFilterDDF3_Superclass)
itkRealAndImaginaryToComplexImageFilterDDF3_Superclass_swigregister = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_Superclass_swigregister
itkRealAndImaginaryToComplexImageFilterDDF3_Superclass_swigregister(itkRealAndImaginaryToComplexImageFilterDDF3_Superclass)

def itkRealAndImaginaryToComplexImageFilterDDF3_Superclass___New_orig__():
  """itkRealAndImaginaryToComplexImageFilterDDF3_Superclass___New_orig__()"""
  return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_Superclass___New_orig__()

def itkRealAndImaginaryToComplexImageFilterDDF3_Superclass_cast(*args):
  """itkRealAndImaginaryToComplexImageFilterDDF3_Superclass_cast(itkLightObject obj) -> itkRealAndImaginaryToComplexImageFilterDDF3_Superclass"""
  return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_Superclass_cast(*args)

class itkRealAndImaginaryToComplexImageFilterFFF2_Superclass(itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF2ICF2):
    """Proxy of C++ itkRealAndImaginaryToComplexImageFilterFFF2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImage1Dimension = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_Superclass_InputImage1Dimension
    InputImage2Dimension = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_Superclass_InputImage2Dimension
    OutputImageDimension = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_Superclass_OutputImageDimension
    SameDimensionCheck1 = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_Superclass_SameDimensionCheck1
    SameDimensionCheck2 = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_Superclass_SameDimensionCheck2
    def __New_orig__():
        """__New_orig__()"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetInput1(self, *args):
        """SetInput1(self, itkImageF2 image1)"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_Superclass_SetInput1(self, *args)

    def SetInput2(self, *args):
        """SetInput2(self, itkImageF2 image2)"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_Superclass_SetInput2(self, *args)

    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::RealAndImaginaryToComplex<(float,float,float)>
        GetFunctor(self) -> itk::Functor::RealAndImaginaryToComplex<(float,float,float)>
        """
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::RealAndImaginaryToComplex<(float,float,float)> functor)"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkRealAndImaginaryToComplexImageFilterPython.delete_itkRealAndImaginaryToComplexImageFilterFFF2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkRealAndImaginaryToComplexImageFilterFFF2_Superclass"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkRealAndImaginaryToComplexImageFilterFFF2_Superclass"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkRealAndImaginaryToComplexImageFilterFFF2_Superclass
        
        Create a new object of the class itkRealAndImaginaryToComplexImageFilterFFF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkRealAndImaginaryToComplexImageFilterFFF2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkRealAndImaginaryToComplexImageFilterFFF2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRealAndImaginaryToComplexImageFilterFFF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRealAndImaginaryToComplexImageFilterFFF2_Superclass.SetInput1 = new_instancemethod(_itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_Superclass_SetInput1,None,itkRealAndImaginaryToComplexImageFilterFFF2_Superclass)
itkRealAndImaginaryToComplexImageFilterFFF2_Superclass.SetInput2 = new_instancemethod(_itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_Superclass_SetInput2,None,itkRealAndImaginaryToComplexImageFilterFFF2_Superclass)
itkRealAndImaginaryToComplexImageFilterFFF2_Superclass.GetFunctor = new_instancemethod(_itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_Superclass_GetFunctor,None,itkRealAndImaginaryToComplexImageFilterFFF2_Superclass)
itkRealAndImaginaryToComplexImageFilterFFF2_Superclass.SetFunctor = new_instancemethod(_itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_Superclass_SetFunctor,None,itkRealAndImaginaryToComplexImageFilterFFF2_Superclass)
itkRealAndImaginaryToComplexImageFilterFFF2_Superclass.GetPointer = new_instancemethod(_itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_Superclass_GetPointer,None,itkRealAndImaginaryToComplexImageFilterFFF2_Superclass)
itkRealAndImaginaryToComplexImageFilterFFF2_Superclass_swigregister = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_Superclass_swigregister
itkRealAndImaginaryToComplexImageFilterFFF2_Superclass_swigregister(itkRealAndImaginaryToComplexImageFilterFFF2_Superclass)

def itkRealAndImaginaryToComplexImageFilterFFF2_Superclass___New_orig__():
  """itkRealAndImaginaryToComplexImageFilterFFF2_Superclass___New_orig__()"""
  return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_Superclass___New_orig__()

def itkRealAndImaginaryToComplexImageFilterFFF2_Superclass_cast(*args):
  """itkRealAndImaginaryToComplexImageFilterFFF2_Superclass_cast(itkLightObject obj) -> itkRealAndImaginaryToComplexImageFilterFFF2_Superclass"""
  return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_Superclass_cast(*args)

class itkRealAndImaginaryToComplexImageFilterFFF3_Superclass(itkInPlaceImageFilterBPython.itkInPlaceImageFilterIF3ICF3):
    """Proxy of C++ itkRealAndImaginaryToComplexImageFilterFFF3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImage1Dimension = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_Superclass_InputImage1Dimension
    InputImage2Dimension = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_Superclass_InputImage2Dimension
    OutputImageDimension = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_Superclass_OutputImageDimension
    SameDimensionCheck1 = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_Superclass_SameDimensionCheck1
    SameDimensionCheck2 = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_Superclass_SameDimensionCheck2
    def __New_orig__():
        """__New_orig__()"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetInput1(self, *args):
        """SetInput1(self, itkImageF3 image1)"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_Superclass_SetInput1(self, *args)

    def SetInput2(self, *args):
        """SetInput2(self, itkImageF3 image2)"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_Superclass_SetInput2(self, *args)

    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::RealAndImaginaryToComplex<(float,float,float)>
        GetFunctor(self) -> itk::Functor::RealAndImaginaryToComplex<(float,float,float)>
        """
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::RealAndImaginaryToComplex<(float,float,float)> functor)"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkRealAndImaginaryToComplexImageFilterPython.delete_itkRealAndImaginaryToComplexImageFilterFFF3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkRealAndImaginaryToComplexImageFilterFFF3_Superclass"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkRealAndImaginaryToComplexImageFilterFFF3_Superclass"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkRealAndImaginaryToComplexImageFilterFFF3_Superclass
        
        Create a new object of the class itkRealAndImaginaryToComplexImageFilterFFF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkRealAndImaginaryToComplexImageFilterFFF3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkRealAndImaginaryToComplexImageFilterFFF3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRealAndImaginaryToComplexImageFilterFFF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRealAndImaginaryToComplexImageFilterFFF3_Superclass.SetInput1 = new_instancemethod(_itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_Superclass_SetInput1,None,itkRealAndImaginaryToComplexImageFilterFFF3_Superclass)
itkRealAndImaginaryToComplexImageFilterFFF3_Superclass.SetInput2 = new_instancemethod(_itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_Superclass_SetInput2,None,itkRealAndImaginaryToComplexImageFilterFFF3_Superclass)
itkRealAndImaginaryToComplexImageFilterFFF3_Superclass.GetFunctor = new_instancemethod(_itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_Superclass_GetFunctor,None,itkRealAndImaginaryToComplexImageFilterFFF3_Superclass)
itkRealAndImaginaryToComplexImageFilterFFF3_Superclass.SetFunctor = new_instancemethod(_itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_Superclass_SetFunctor,None,itkRealAndImaginaryToComplexImageFilterFFF3_Superclass)
itkRealAndImaginaryToComplexImageFilterFFF3_Superclass.GetPointer = new_instancemethod(_itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_Superclass_GetPointer,None,itkRealAndImaginaryToComplexImageFilterFFF3_Superclass)
itkRealAndImaginaryToComplexImageFilterFFF3_Superclass_swigregister = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_Superclass_swigregister
itkRealAndImaginaryToComplexImageFilterFFF3_Superclass_swigregister(itkRealAndImaginaryToComplexImageFilterFFF3_Superclass)

def itkRealAndImaginaryToComplexImageFilterFFF3_Superclass___New_orig__():
  """itkRealAndImaginaryToComplexImageFilterFFF3_Superclass___New_orig__()"""
  return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_Superclass___New_orig__()

def itkRealAndImaginaryToComplexImageFilterFFF3_Superclass_cast(*args):
  """itkRealAndImaginaryToComplexImageFilterFFF3_Superclass_cast(itkLightObject obj) -> itkRealAndImaginaryToComplexImageFilterFFF3_Superclass"""
  return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_Superclass_cast(*args)

class itkRealAndImaginaryToComplexImageFilterDDF2(itkRealAndImaginaryToComplexImageFilterDDF2_Superclass):
    """Proxy of C++ itkRealAndImaginaryToComplexImageFilterDDF2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Input1ConvertibleToDoubleCheck = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_Input1ConvertibleToDoubleCheck
    Input2ConvertibleToDoubleCheck = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_Input2ConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_DoubleConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkRealAndImaginaryToComplexImageFilterPython.delete_itkRealAndImaginaryToComplexImageFilterDDF2
    def cast(*args):
        """cast(itkLightObject obj) -> itkRealAndImaginaryToComplexImageFilterDDF2"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkRealAndImaginaryToComplexImageFilterDDF2"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkRealAndImaginaryToComplexImageFilterDDF2
        
        Create a new object of the class itkRealAndImaginaryToComplexImageFilterDDF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkRealAndImaginaryToComplexImageFilterDDF2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkRealAndImaginaryToComplexImageFilterDDF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRealAndImaginaryToComplexImageFilterDDF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRealAndImaginaryToComplexImageFilterDDF2.GetPointer = new_instancemethod(_itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_GetPointer,None,itkRealAndImaginaryToComplexImageFilterDDF2)
itkRealAndImaginaryToComplexImageFilterDDF2_swigregister = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_swigregister
itkRealAndImaginaryToComplexImageFilterDDF2_swigregister(itkRealAndImaginaryToComplexImageFilterDDF2)

def itkRealAndImaginaryToComplexImageFilterDDF2___New_orig__():
  """itkRealAndImaginaryToComplexImageFilterDDF2___New_orig__()"""
  return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2___New_orig__()

def itkRealAndImaginaryToComplexImageFilterDDF2_cast(*args):
  """itkRealAndImaginaryToComplexImageFilterDDF2_cast(itkLightObject obj) -> itkRealAndImaginaryToComplexImageFilterDDF2"""
  return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF2_cast(*args)

class itkRealAndImaginaryToComplexImageFilterDDF3(itkRealAndImaginaryToComplexImageFilterDDF3_Superclass):
    """Proxy of C++ itkRealAndImaginaryToComplexImageFilterDDF3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Input1ConvertibleToDoubleCheck = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_Input1ConvertibleToDoubleCheck
    Input2ConvertibleToDoubleCheck = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_Input2ConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_DoubleConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkRealAndImaginaryToComplexImageFilterPython.delete_itkRealAndImaginaryToComplexImageFilterDDF3
    def cast(*args):
        """cast(itkLightObject obj) -> itkRealAndImaginaryToComplexImageFilterDDF3"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkRealAndImaginaryToComplexImageFilterDDF3"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkRealAndImaginaryToComplexImageFilterDDF3
        
        Create a new object of the class itkRealAndImaginaryToComplexImageFilterDDF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkRealAndImaginaryToComplexImageFilterDDF3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkRealAndImaginaryToComplexImageFilterDDF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRealAndImaginaryToComplexImageFilterDDF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRealAndImaginaryToComplexImageFilterDDF3.GetPointer = new_instancemethod(_itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_GetPointer,None,itkRealAndImaginaryToComplexImageFilterDDF3)
itkRealAndImaginaryToComplexImageFilterDDF3_swigregister = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_swigregister
itkRealAndImaginaryToComplexImageFilterDDF3_swigregister(itkRealAndImaginaryToComplexImageFilterDDF3)

def itkRealAndImaginaryToComplexImageFilterDDF3___New_orig__():
  """itkRealAndImaginaryToComplexImageFilterDDF3___New_orig__()"""
  return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3___New_orig__()

def itkRealAndImaginaryToComplexImageFilterDDF3_cast(*args):
  """itkRealAndImaginaryToComplexImageFilterDDF3_cast(itkLightObject obj) -> itkRealAndImaginaryToComplexImageFilterDDF3"""
  return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterDDF3_cast(*args)

class itkRealAndImaginaryToComplexImageFilterFFF2(itkRealAndImaginaryToComplexImageFilterFFF2_Superclass):
    """Proxy of C++ itkRealAndImaginaryToComplexImageFilterFFF2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Input1ConvertibleToDoubleCheck = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_Input1ConvertibleToDoubleCheck
    Input2ConvertibleToDoubleCheck = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_Input2ConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_DoubleConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkRealAndImaginaryToComplexImageFilterPython.delete_itkRealAndImaginaryToComplexImageFilterFFF2
    def cast(*args):
        """cast(itkLightObject obj) -> itkRealAndImaginaryToComplexImageFilterFFF2"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkRealAndImaginaryToComplexImageFilterFFF2"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkRealAndImaginaryToComplexImageFilterFFF2
        
        Create a new object of the class itkRealAndImaginaryToComplexImageFilterFFF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkRealAndImaginaryToComplexImageFilterFFF2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkRealAndImaginaryToComplexImageFilterFFF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRealAndImaginaryToComplexImageFilterFFF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRealAndImaginaryToComplexImageFilterFFF2.GetPointer = new_instancemethod(_itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_GetPointer,None,itkRealAndImaginaryToComplexImageFilterFFF2)
itkRealAndImaginaryToComplexImageFilterFFF2_swigregister = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_swigregister
itkRealAndImaginaryToComplexImageFilterFFF2_swigregister(itkRealAndImaginaryToComplexImageFilterFFF2)

def itkRealAndImaginaryToComplexImageFilterFFF2___New_orig__():
  """itkRealAndImaginaryToComplexImageFilterFFF2___New_orig__()"""
  return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2___New_orig__()

def itkRealAndImaginaryToComplexImageFilterFFF2_cast(*args):
  """itkRealAndImaginaryToComplexImageFilterFFF2_cast(itkLightObject obj) -> itkRealAndImaginaryToComplexImageFilterFFF2"""
  return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF2_cast(*args)

class itkRealAndImaginaryToComplexImageFilterFFF3(itkRealAndImaginaryToComplexImageFilterFFF3_Superclass):
    """Proxy of C++ itkRealAndImaginaryToComplexImageFilterFFF3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    Input1ConvertibleToDoubleCheck = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_Input1ConvertibleToDoubleCheck
    Input2ConvertibleToDoubleCheck = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_Input2ConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_DoubleConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkRealAndImaginaryToComplexImageFilterPython.delete_itkRealAndImaginaryToComplexImageFilterFFF3
    def cast(*args):
        """cast(itkLightObject obj) -> itkRealAndImaginaryToComplexImageFilterFFF3"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkRealAndImaginaryToComplexImageFilterFFF3"""
        return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkRealAndImaginaryToComplexImageFilterFFF3
        
        Create a new object of the class itkRealAndImaginaryToComplexImageFilterFFF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkRealAndImaginaryToComplexImageFilterFFF3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkRealAndImaginaryToComplexImageFilterFFF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRealAndImaginaryToComplexImageFilterFFF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRealAndImaginaryToComplexImageFilterFFF3.GetPointer = new_instancemethod(_itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_GetPointer,None,itkRealAndImaginaryToComplexImageFilterFFF3)
itkRealAndImaginaryToComplexImageFilterFFF3_swigregister = _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_swigregister
itkRealAndImaginaryToComplexImageFilterFFF3_swigregister(itkRealAndImaginaryToComplexImageFilterFFF3)

def itkRealAndImaginaryToComplexImageFilterFFF3___New_orig__():
  """itkRealAndImaginaryToComplexImageFilterFFF3___New_orig__()"""
  return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3___New_orig__()

def itkRealAndImaginaryToComplexImageFilterFFF3_cast(*args):
  """itkRealAndImaginaryToComplexImageFilterFFF3_cast(itkLightObject obj) -> itkRealAndImaginaryToComplexImageFilterFFF3"""
  return _itkRealAndImaginaryToComplexImageFilterPython.itkRealAndImaginaryToComplexImageFilterFFF3_cast(*args)



