// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkQuadEdgeMeshChicken
#endif
#ifdef SWIGCSHARP
%module itkQuadEdgeMeshCsharp
#endif
#ifdef SWIGGUILE
%module itkQuadEdgeMeshGuile
#endif
#ifdef SWIGJAVA
%module itkQuadEdgeMeshJava
#endif
#ifdef SWIGLUA
%module itkQuadEdgeMeshLua
#endif
#ifdef SWIGMODULA3
%module itkQuadEdgeMeshModula3
#endif
#ifdef SWIGMZSCHEME
%module itkQuadEdgeMeshMzscheme
#endif
#ifdef SWIGOCAML
%module itkQuadEdgeMeshOcaml
#endif
#ifdef SWIGPERL
%module itkQuadEdgeMeshPerl
#endif
#ifdef SWIGPERL5
%module itkQuadEdgeMeshPerl5
#endif
#ifdef SWIGPHP
%module itkQuadEdgeMeshPhp
#endif
#ifdef SWIGPHP4
%module itkQuadEdgeMeshPhp4
#endif
#ifdef SWIGPHP5
%module itkQuadEdgeMeshPhp5
#endif
#ifdef SWIGPIKE
%module itkQuadEdgeMeshPike
#endif
#ifdef SWIGPYTHON
%module itkQuadEdgeMeshPython
#endif
#ifdef SWIGR
%module itkQuadEdgeMeshR
#endif
#ifdef SWIGRUBY
%module itkQuadEdgeMeshRuby
#endif
#ifdef SWIGSEXP
%module itkQuadEdgeMeshSexp
#endif
#ifdef SWIGTCL
%module itkQuadEdgeMeshTcl
#endif
#ifdef SWIGXML
%module itkQuadEdgeMeshXml
#endif

%{
#include "Base.includes"
#include "Mesh.includes"
%}


%{
%}




%import wrap_itkQuadEdgeMeshLineCell.i
%import wrap_itkMesh.i
%import wrap_itkCellInterface.i
%import wrap_itkQuadEdgeMeshBase.i
%import wrap_itkGeometricalQuadEdge.i
%import wrap_itkVector.i
%import wrap_ITKCommonBase.i
%import wrap_itkQuadEdgeMeshPoint.i


%include itk.i
%include wrap_itkQuadEdgeMesh_ext.i


 class itkQuadEdgeMeshD3S : public itkMeshD3Q {
   public:
     enum  {  PointDimension = 3 };
     enum  {  MaxTopologicalDimension = 3 };
     enum  {  DimensionShouldBe3 = 1 };
     static itkQuadEdgeMeshD3S_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool RequestedRegionIsOutsideOfTheBufferedRegion();
     virtual void Initialize();
     virtual void Clear();
     itkMapContainerULCIDQEMCTI3 * GetEdgeCells();
     itkMapContainerULCIDQEMCTI3 const * GetEdgeCells() const;
     void SetEdgeCells(itkMapContainerULCIDQEMCTI3 * edgeCells);
     void SetEdgeCell(unsigned long cellId, itkCellInterfaceDQEMCTI3_AutoPointer & cellPointer);
     virtual void CopyInformation(itkDataObject const * data);
     virtual void Graft(itkDataObject const * data);
     void SqueezePointsIds();
     void BuildCellLinks();
     void SetBoundaryAssignment(int dimension, unsigned long cellId, unsigned char featureId, unsigned long boundaryId);
     bool GetBoundaryAssignment(int dimension, unsigned long cellId, unsigned char featureId, unsigned long * boundaryId) const;
     bool RemoveBoundaryAssignment(int dimension, unsigned long cellId, unsigned char featureId);
     bool GetCellBoundaryFeature(int dimension, unsigned long cellId, unsigned char featureId, itkCellInterfaceDQEMCTI3_AutoPointer & cellAP) const;
     unsigned long GetCellBoundaryFeatureNeighbors(int dimension, unsigned long cellId, unsigned char featureId, std::set< unsigned long, std::less< unsigned long > > * cellSet);
     unsigned long GetCellNeighbors(unsigned long cellId, std::set< unsigned long, std::less< unsigned long > > * cellSet);
     bool GetAssignedCellBoundaryIfOneExists(int dimension, unsigned long cellId, unsigned char featureId, itkCellInterfaceDQEMCTI3_AutoPointer & cellAP) const;
     void SetCell(unsigned long cId, itkCellInterfaceDQEMCTI3_AutoPointer & cell);
     virtual unsigned long FindFirstUnusedPointIndex();
     virtual unsigned long FindFirstUnusedCellIndex();
     virtual void PushOnContainer(itkQuadEdgeMeshLineCellCIDQEMCTIF3 * newEdge);
     virtual unsigned long AddPoint(itkQuadEdgeMeshPointF3 const & p);
     virtual itkGeometricalQuadEdgeULULBBF * AddEdge(unsigned long const & orgPid, unsigned long const & destPid);
     virtual itkGeometricalQuadEdgeULULBBF * AddEdgeWithSecurePointList(unsigned long const & orgPid, unsigned long const & destPid);
     virtual void AddFace(itkGeometricalQuadEdgeULULBBF * e);
     virtual itkGeometricalQuadEdgeULULBBF * AddFace(std::vector< unsigned long > const & points);
     virtual itkGeometricalQuadEdgeULULBBF * AddFaceWithSecurePointList(std::vector< unsigned long > const & points);
     virtual itkGeometricalQuadEdgeULULBBF * AddFaceWithSecurePointList(std::vector< unsigned long > const & points, bool CheckEdges);
     virtual itkGeometricalQuadEdgeULULBBF * AddFaceTriangle(unsigned long const & aPid, unsigned long const & bPid, unsigned long const & cPid);
     virtual void DeletePoint(unsigned long const & pid);
     virtual void DeleteEdge(unsigned long const & orgPid, unsigned long const & destPid);
     virtual void DeleteEdge(itkGeometricalQuadEdgeULULBBF * e);
     virtual void LightWeightDeleteEdge(itkQuadEdgeMeshLineCellCIDQEMCTIF3 * e);
     virtual void LightWeightDeleteEdge(itkGeometricalQuadEdgeULULBBF * e);
     virtual void DeleteFace(unsigned long faceToDelete);
     bool GetPoint(unsigned long pid, itkQuadEdgeMeshPointF3 * pt) const;
     virtual itkQuadEdgeMeshPointF3 GetPoint(unsigned long const & pid) const;
     virtual itkVectorF3 GetVector(unsigned long const & pid) const;
     virtual itkGeometricalQuadEdgeULULBBF * GetEdge() const;
     virtual itkGeometricalQuadEdgeULULBBF * GetEdge(unsigned long const & eid) const;
     virtual itkGeometricalQuadEdgeULULBBF * FindEdge(unsigned long const & pid0) const;
     virtual itkGeometricalQuadEdgeULULBBF * FindEdge(unsigned long const & pid0, unsigned long const & pid1) const;
     virtual itkQuadEdgeMeshLineCellCIDQEMCTIF3 * FindEdgeCell(unsigned long const & pid0, unsigned long const & pid1) const;
     float ComputeEdgeLength(itkGeometricalQuadEdgeULULBBF * e);
     unsigned long ComputeNumberOfPoints() const;
     unsigned long ComputeNumberOfFaces() const;
     unsigned long ComputeNumberOfEdges() const;
     unsigned long Splice(itkGeometricalQuadEdgeULULBBF * a, itkGeometricalQuadEdgeULULBBF * b);
     void ClearFreePointAndCellIndexesLists();
     unsigned long GetNumberOfFaces() const;
     unsigned long GetNumberOfEdges() const;
   private:
     itkQuadEdgeMeshD3S(itkQuadEdgeMeshD3S const & arg0);
     void operator=(itkQuadEdgeMeshD3S const & arg0);
   protected:
     itkQuadEdgeMeshD3S();
     ~itkQuadEdgeMeshD3S();
     virtual void ClearCellsContainer();
 };


 class itkQuadEdgeMeshD3S_Pointer {
   public:
     itkQuadEdgeMeshD3S_Pointer();
     itkQuadEdgeMeshD3S_Pointer(itkQuadEdgeMeshD3S_Pointer const & p);
     itkQuadEdgeMeshD3S_Pointer(itkQuadEdgeMeshD3S * p);
     ~itkQuadEdgeMeshD3S_Pointer();
     itkQuadEdgeMeshD3S * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkQuadEdgeMeshD3S * GetPointer() const;
     bool operator<(itkQuadEdgeMeshD3S_Pointer const & r) const;
     bool operator>(itkQuadEdgeMeshD3S_Pointer const & r) const;
     bool operator<=(itkQuadEdgeMeshD3S_Pointer const & r) const;
     bool operator>=(itkQuadEdgeMeshD3S_Pointer const & r) const;
     itkQuadEdgeMeshD3S_Pointer & operator=(itkQuadEdgeMeshD3S_Pointer const & r);
     itkQuadEdgeMeshD3S_Pointer & operator=(itkQuadEdgeMeshD3S * r);
     itkQuadEdgeMeshD3S * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


