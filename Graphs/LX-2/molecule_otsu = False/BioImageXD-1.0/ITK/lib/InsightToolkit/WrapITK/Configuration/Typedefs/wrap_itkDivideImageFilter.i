// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkDivideImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkDivideImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkDivideImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkDivideImageFilterJava
#endif
#ifdef SWIGLUA
%module itkDivideImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkDivideImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkDivideImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkDivideImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkDivideImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkDivideImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkDivideImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkDivideImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkDivideImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkDivideImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkDivideImageFilterPython
#endif
#ifdef SWIGR
%module itkDivideImageFilterR
#endif
#ifdef SWIGRUBY
%module itkDivideImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkDivideImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkDivideImageFilterTcl
#endif
#ifdef SWIGXML
%module itkDivideImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "PixelMath.includes"
%}


%{
%}




%import wrap_ITKRegions.i
%import wrap_itkImage.i
%import wrap_itkInPlaceImageFilterB.i
%import wrap_ITKCommonBase.i
%import wrap_itkInPlaceImageFilterA.i


%include itk.i
%include wrap_itkDivideImageFilter_ext.i


 class itkDivideImageFilterICF2ICF2ICF2_Pointer {
   public:
     itkDivideImageFilterICF2ICF2ICF2_Pointer();
     itkDivideImageFilterICF2ICF2ICF2_Pointer(itkDivideImageFilterICF2ICF2ICF2_Pointer const & p);
     itkDivideImageFilterICF2ICF2ICF2_Pointer(itkDivideImageFilterICF2ICF2ICF2 * p);
     ~itkDivideImageFilterICF2ICF2ICF2_Pointer();
     itkDivideImageFilterICF2ICF2ICF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterICF2ICF2ICF2 * GetPointer() const;
     bool operator<(itkDivideImageFilterICF2ICF2ICF2_Pointer const & r) const;
     bool operator>(itkDivideImageFilterICF2ICF2ICF2_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterICF2ICF2ICF2_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterICF2ICF2ICF2_Pointer const & r) const;
     itkDivideImageFilterICF2ICF2ICF2_Pointer & operator=(itkDivideImageFilterICF2ICF2ICF2_Pointer const & r);
     itkDivideImageFilterICF2ICF2ICF2_Pointer & operator=(itkDivideImageFilterICF2ICF2ICF2 * r);
     itkDivideImageFilterICF2ICF2ICF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterICF2ICF2ICF2_Superclass : public itkInPlaceImageFilterICF2ICF2 {
   public:
     enum  {  InputImage1Dimension = 2 };
     enum  {  InputImage2Dimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     static itkDivideImageFilterICF2ICF2ICF2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetInput1(itkImageCF2 const * image1);
     void SetInput2(itkImageCF2 const * image2);
     itk::Function::Div< std::complex< float >, std::complex< float >, std::complex< float > > & GetFunctor();
     itk::Function::Div< std::complex< float >, std::complex< float >, std::complex< float > > const & GetFunctor() const;
     void SetFunctor(itk::Function::Div< std::complex< float >, std::complex< float >, std::complex< float > > const & functor);
   private:
     itkDivideImageFilterICF2ICF2ICF2_Superclass(itkDivideImageFilterICF2ICF2ICF2_Superclass const & arg0);
     void operator=(itkDivideImageFilterICF2ICF2ICF2_Superclass const & arg0);
   protected:
     itkDivideImageFilterICF2ICF2ICF2_Superclass();
     ~itkDivideImageFilterICF2ICF2ICF2_Superclass();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkDivideImageFilterICF2ICF2ICF2_Superclass_Pointer {
   public:
     itkDivideImageFilterICF2ICF2ICF2_Superclass_Pointer();
     itkDivideImageFilterICF2ICF2ICF2_Superclass_Pointer(itkDivideImageFilterICF2ICF2ICF2_Superclass_Pointer const & p);
     itkDivideImageFilterICF2ICF2ICF2_Superclass_Pointer(itkDivideImageFilterICF2ICF2ICF2_Superclass * p);
     ~itkDivideImageFilterICF2ICF2ICF2_Superclass_Pointer();
     itkDivideImageFilterICF2ICF2ICF2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterICF2ICF2ICF2_Superclass * GetPointer() const;
     bool operator<(itkDivideImageFilterICF2ICF2ICF2_Superclass_Pointer const & r) const;
     bool operator>(itkDivideImageFilterICF2ICF2ICF2_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterICF2ICF2ICF2_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterICF2ICF2ICF2_Superclass_Pointer const & r) const;
     itkDivideImageFilterICF2ICF2ICF2_Superclass_Pointer & operator=(itkDivideImageFilterICF2ICF2ICF2_Superclass_Pointer const & r);
     itkDivideImageFilterICF2ICF2ICF2_Superclass_Pointer & operator=(itkDivideImageFilterICF2ICF2ICF2_Superclass * r);
     itkDivideImageFilterICF2ICF2ICF2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterICF2IF2ICF2_Pointer {
   public:
     itkDivideImageFilterICF2IF2ICF2_Pointer();
     itkDivideImageFilterICF2IF2ICF2_Pointer(itkDivideImageFilterICF2IF2ICF2_Pointer const & p);
     itkDivideImageFilterICF2IF2ICF2_Pointer(itkDivideImageFilterICF2IF2ICF2 * p);
     ~itkDivideImageFilterICF2IF2ICF2_Pointer();
     itkDivideImageFilterICF2IF2ICF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterICF2IF2ICF2 * GetPointer() const;
     bool operator<(itkDivideImageFilterICF2IF2ICF2_Pointer const & r) const;
     bool operator>(itkDivideImageFilterICF2IF2ICF2_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterICF2IF2ICF2_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterICF2IF2ICF2_Pointer const & r) const;
     itkDivideImageFilterICF2IF2ICF2_Pointer & operator=(itkDivideImageFilterICF2IF2ICF2_Pointer const & r);
     itkDivideImageFilterICF2IF2ICF2_Pointer & operator=(itkDivideImageFilterICF2IF2ICF2 * r);
     itkDivideImageFilterICF2IF2ICF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterICF2IF2ICF2_Superclass : public itkInPlaceImageFilterICF2ICF2 {
   public:
     enum  {  InputImage1Dimension = 2 };
     enum  {  InputImage2Dimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     static itkDivideImageFilterICF2IF2ICF2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetInput1(itkImageCF2 const * image1);
     void SetInput2(itkImageF2 const * image2);
     itk::Function::Div< std::complex< float >, float, std::complex< float > > & GetFunctor();
     itk::Function::Div< std::complex< float >, float, std::complex< float > > const & GetFunctor() const;
     void SetFunctor(itk::Function::Div< std::complex< float >, float, std::complex< float > > const & functor);
   private:
     itkDivideImageFilterICF2IF2ICF2_Superclass(itkDivideImageFilterICF2IF2ICF2_Superclass const & arg0);
     void operator=(itkDivideImageFilterICF2IF2ICF2_Superclass const & arg0);
   protected:
     itkDivideImageFilterICF2IF2ICF2_Superclass();
     ~itkDivideImageFilterICF2IF2ICF2_Superclass();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkDivideImageFilterICF2IF2ICF2_Superclass_Pointer {
   public:
     itkDivideImageFilterICF2IF2ICF2_Superclass_Pointer();
     itkDivideImageFilterICF2IF2ICF2_Superclass_Pointer(itkDivideImageFilterICF2IF2ICF2_Superclass_Pointer const & p);
     itkDivideImageFilterICF2IF2ICF2_Superclass_Pointer(itkDivideImageFilterICF2IF2ICF2_Superclass * p);
     ~itkDivideImageFilterICF2IF2ICF2_Superclass_Pointer();
     itkDivideImageFilterICF2IF2ICF2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterICF2IF2ICF2_Superclass * GetPointer() const;
     bool operator<(itkDivideImageFilterICF2IF2ICF2_Superclass_Pointer const & r) const;
     bool operator>(itkDivideImageFilterICF2IF2ICF2_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterICF2IF2ICF2_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterICF2IF2ICF2_Superclass_Pointer const & r) const;
     itkDivideImageFilterICF2IF2ICF2_Superclass_Pointer & operator=(itkDivideImageFilterICF2IF2ICF2_Superclass_Pointer const & r);
     itkDivideImageFilterICF2IF2ICF2_Superclass_Pointer & operator=(itkDivideImageFilterICF2IF2ICF2_Superclass * r);
     itkDivideImageFilterICF2IF2ICF2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterICF3ICF3ICF3_Pointer {
   public:
     itkDivideImageFilterICF3ICF3ICF3_Pointer();
     itkDivideImageFilterICF3ICF3ICF3_Pointer(itkDivideImageFilterICF3ICF3ICF3_Pointer const & p);
     itkDivideImageFilterICF3ICF3ICF3_Pointer(itkDivideImageFilterICF3ICF3ICF3 * p);
     ~itkDivideImageFilterICF3ICF3ICF3_Pointer();
     itkDivideImageFilterICF3ICF3ICF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterICF3ICF3ICF3 * GetPointer() const;
     bool operator<(itkDivideImageFilterICF3ICF3ICF3_Pointer const & r) const;
     bool operator>(itkDivideImageFilterICF3ICF3ICF3_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterICF3ICF3ICF3_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterICF3ICF3ICF3_Pointer const & r) const;
     itkDivideImageFilterICF3ICF3ICF3_Pointer & operator=(itkDivideImageFilterICF3ICF3ICF3_Pointer const & r);
     itkDivideImageFilterICF3ICF3ICF3_Pointer & operator=(itkDivideImageFilterICF3ICF3ICF3 * r);
     itkDivideImageFilterICF3ICF3ICF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterICF3ICF3ICF3_Superclass : public itkInPlaceImageFilterICF3ICF3 {
   public:
     enum  {  InputImage1Dimension = 3 };
     enum  {  InputImage2Dimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     static itkDivideImageFilterICF3ICF3ICF3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetInput1(itkImageCF3 const * image1);
     void SetInput2(itkImageCF3 const * image2);
     itk::Function::Div< std::complex< float >, std::complex< float >, std::complex< float > > & GetFunctor();
     itk::Function::Div< std::complex< float >, std::complex< float >, std::complex< float > > const & GetFunctor() const;
     void SetFunctor(itk::Function::Div< std::complex< float >, std::complex< float >, std::complex< float > > const & functor);
   private:
     itkDivideImageFilterICF3ICF3ICF3_Superclass(itkDivideImageFilterICF3ICF3ICF3_Superclass const & arg0);
     void operator=(itkDivideImageFilterICF3ICF3ICF3_Superclass const & arg0);
   protected:
     itkDivideImageFilterICF3ICF3ICF3_Superclass();
     ~itkDivideImageFilterICF3ICF3ICF3_Superclass();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkDivideImageFilterICF3ICF3ICF3_Superclass_Pointer {
   public:
     itkDivideImageFilterICF3ICF3ICF3_Superclass_Pointer();
     itkDivideImageFilterICF3ICF3ICF3_Superclass_Pointer(itkDivideImageFilterICF3ICF3ICF3_Superclass_Pointer const & p);
     itkDivideImageFilterICF3ICF3ICF3_Superclass_Pointer(itkDivideImageFilterICF3ICF3ICF3_Superclass * p);
     ~itkDivideImageFilterICF3ICF3ICF3_Superclass_Pointer();
     itkDivideImageFilterICF3ICF3ICF3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterICF3ICF3ICF3_Superclass * GetPointer() const;
     bool operator<(itkDivideImageFilterICF3ICF3ICF3_Superclass_Pointer const & r) const;
     bool operator>(itkDivideImageFilterICF3ICF3ICF3_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterICF3ICF3ICF3_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterICF3ICF3ICF3_Superclass_Pointer const & r) const;
     itkDivideImageFilterICF3ICF3ICF3_Superclass_Pointer & operator=(itkDivideImageFilterICF3ICF3ICF3_Superclass_Pointer const & r);
     itkDivideImageFilterICF3ICF3ICF3_Superclass_Pointer & operator=(itkDivideImageFilterICF3ICF3ICF3_Superclass * r);
     itkDivideImageFilterICF3ICF3ICF3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterICF3IF3ICF3_Pointer {
   public:
     itkDivideImageFilterICF3IF3ICF3_Pointer();
     itkDivideImageFilterICF3IF3ICF3_Pointer(itkDivideImageFilterICF3IF3ICF3_Pointer const & p);
     itkDivideImageFilterICF3IF3ICF3_Pointer(itkDivideImageFilterICF3IF3ICF3 * p);
     ~itkDivideImageFilterICF3IF3ICF3_Pointer();
     itkDivideImageFilterICF3IF3ICF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterICF3IF3ICF3 * GetPointer() const;
     bool operator<(itkDivideImageFilterICF3IF3ICF3_Pointer const & r) const;
     bool operator>(itkDivideImageFilterICF3IF3ICF3_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterICF3IF3ICF3_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterICF3IF3ICF3_Pointer const & r) const;
     itkDivideImageFilterICF3IF3ICF3_Pointer & operator=(itkDivideImageFilterICF3IF3ICF3_Pointer const & r);
     itkDivideImageFilterICF3IF3ICF3_Pointer & operator=(itkDivideImageFilterICF3IF3ICF3 * r);
     itkDivideImageFilterICF3IF3ICF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterICF3IF3ICF3_Superclass : public itkInPlaceImageFilterICF3ICF3 {
   public:
     enum  {  InputImage1Dimension = 3 };
     enum  {  InputImage2Dimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     static itkDivideImageFilterICF3IF3ICF3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetInput1(itkImageCF3 const * image1);
     void SetInput2(itkImageF3 const * image2);
     itk::Function::Div< std::complex< float >, float, std::complex< float > > & GetFunctor();
     itk::Function::Div< std::complex< float >, float, std::complex< float > > const & GetFunctor() const;
     void SetFunctor(itk::Function::Div< std::complex< float >, float, std::complex< float > > const & functor);
   private:
     itkDivideImageFilterICF3IF3ICF3_Superclass(itkDivideImageFilterICF3IF3ICF3_Superclass const & arg0);
     void operator=(itkDivideImageFilterICF3IF3ICF3_Superclass const & arg0);
   protected:
     itkDivideImageFilterICF3IF3ICF3_Superclass();
     ~itkDivideImageFilterICF3IF3ICF3_Superclass();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkDivideImageFilterICF3IF3ICF3_Superclass_Pointer {
   public:
     itkDivideImageFilterICF3IF3ICF3_Superclass_Pointer();
     itkDivideImageFilterICF3IF3ICF3_Superclass_Pointer(itkDivideImageFilterICF3IF3ICF3_Superclass_Pointer const & p);
     itkDivideImageFilterICF3IF3ICF3_Superclass_Pointer(itkDivideImageFilterICF3IF3ICF3_Superclass * p);
     ~itkDivideImageFilterICF3IF3ICF3_Superclass_Pointer();
     itkDivideImageFilterICF3IF3ICF3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterICF3IF3ICF3_Superclass * GetPointer() const;
     bool operator<(itkDivideImageFilterICF3IF3ICF3_Superclass_Pointer const & r) const;
     bool operator>(itkDivideImageFilterICF3IF3ICF3_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterICF3IF3ICF3_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterICF3IF3ICF3_Superclass_Pointer const & r) const;
     itkDivideImageFilterICF3IF3ICF3_Superclass_Pointer & operator=(itkDivideImageFilterICF3IF3ICF3_Superclass_Pointer const & r);
     itkDivideImageFilterICF3IF3ICF3_Superclass_Pointer & operator=(itkDivideImageFilterICF3IF3ICF3_Superclass * r);
     itkDivideImageFilterICF3IF3ICF3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterID2ID2ID2_Pointer {
   public:
     itkDivideImageFilterID2ID2ID2_Pointer();
     itkDivideImageFilterID2ID2ID2_Pointer(itkDivideImageFilterID2ID2ID2_Pointer const & p);
     itkDivideImageFilterID2ID2ID2_Pointer(itkDivideImageFilterID2ID2ID2 * p);
     ~itkDivideImageFilterID2ID2ID2_Pointer();
     itkDivideImageFilterID2ID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterID2ID2ID2 * GetPointer() const;
     bool operator<(itkDivideImageFilterID2ID2ID2_Pointer const & r) const;
     bool operator>(itkDivideImageFilterID2ID2ID2_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterID2ID2ID2_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterID2ID2ID2_Pointer const & r) const;
     itkDivideImageFilterID2ID2ID2_Pointer & operator=(itkDivideImageFilterID2ID2ID2_Pointer const & r);
     itkDivideImageFilterID2ID2ID2_Pointer & operator=(itkDivideImageFilterID2ID2ID2 * r);
     itkDivideImageFilterID2ID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterID2ID2ID2_Superclass : public itkInPlaceImageFilterID2ID2 {
   public:
     enum  {  InputImage1Dimension = 2 };
     enum  {  InputImage2Dimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     static itkDivideImageFilterID2ID2ID2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetInput1(itkImageD2 const * image1);
     void SetInput2(itkImageD2 const * image2);
     itk::Function::Div< double, double, double > & GetFunctor();
     itk::Function::Div< double, double, double > const & GetFunctor() const;
     void SetFunctor(itk::Function::Div< double, double, double > const & functor);
   private:
     itkDivideImageFilterID2ID2ID2_Superclass(itkDivideImageFilterID2ID2ID2_Superclass const & arg0);
     void operator=(itkDivideImageFilterID2ID2ID2_Superclass const & arg0);
   protected:
     itkDivideImageFilterID2ID2ID2_Superclass();
     ~itkDivideImageFilterID2ID2ID2_Superclass();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkDivideImageFilterID2ID2ID2_Superclass_Pointer {
   public:
     itkDivideImageFilterID2ID2ID2_Superclass_Pointer();
     itkDivideImageFilterID2ID2ID2_Superclass_Pointer(itkDivideImageFilterID2ID2ID2_Superclass_Pointer const & p);
     itkDivideImageFilterID2ID2ID2_Superclass_Pointer(itkDivideImageFilterID2ID2ID2_Superclass * p);
     ~itkDivideImageFilterID2ID2ID2_Superclass_Pointer();
     itkDivideImageFilterID2ID2ID2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterID2ID2ID2_Superclass * GetPointer() const;
     bool operator<(itkDivideImageFilterID2ID2ID2_Superclass_Pointer const & r) const;
     bool operator>(itkDivideImageFilterID2ID2ID2_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterID2ID2ID2_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterID2ID2ID2_Superclass_Pointer const & r) const;
     itkDivideImageFilterID2ID2ID2_Superclass_Pointer & operator=(itkDivideImageFilterID2ID2ID2_Superclass_Pointer const & r);
     itkDivideImageFilterID2ID2ID2_Superclass_Pointer & operator=(itkDivideImageFilterID2ID2ID2_Superclass * r);
     itkDivideImageFilterID2ID2ID2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterID3ID3ID3_Pointer {
   public:
     itkDivideImageFilterID3ID3ID3_Pointer();
     itkDivideImageFilterID3ID3ID3_Pointer(itkDivideImageFilterID3ID3ID3_Pointer const & p);
     itkDivideImageFilterID3ID3ID3_Pointer(itkDivideImageFilterID3ID3ID3 * p);
     ~itkDivideImageFilterID3ID3ID3_Pointer();
     itkDivideImageFilterID3ID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterID3ID3ID3 * GetPointer() const;
     bool operator<(itkDivideImageFilterID3ID3ID3_Pointer const & r) const;
     bool operator>(itkDivideImageFilterID3ID3ID3_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterID3ID3ID3_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterID3ID3ID3_Pointer const & r) const;
     itkDivideImageFilterID3ID3ID3_Pointer & operator=(itkDivideImageFilterID3ID3ID3_Pointer const & r);
     itkDivideImageFilterID3ID3ID3_Pointer & operator=(itkDivideImageFilterID3ID3ID3 * r);
     itkDivideImageFilterID3ID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterID3ID3ID3_Superclass : public itkInPlaceImageFilterID3ID3 {
   public:
     enum  {  InputImage1Dimension = 3 };
     enum  {  InputImage2Dimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     static itkDivideImageFilterID3ID3ID3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetInput1(itkImageD3 const * image1);
     void SetInput2(itkImageD3 const * image2);
     itk::Function::Div< double, double, double > & GetFunctor();
     itk::Function::Div< double, double, double > const & GetFunctor() const;
     void SetFunctor(itk::Function::Div< double, double, double > const & functor);
   private:
     itkDivideImageFilterID3ID3ID3_Superclass(itkDivideImageFilterID3ID3ID3_Superclass const & arg0);
     void operator=(itkDivideImageFilterID3ID3ID3_Superclass const & arg0);
   protected:
     itkDivideImageFilterID3ID3ID3_Superclass();
     ~itkDivideImageFilterID3ID3ID3_Superclass();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkDivideImageFilterID3ID3ID3_Superclass_Pointer {
   public:
     itkDivideImageFilterID3ID3ID3_Superclass_Pointer();
     itkDivideImageFilterID3ID3ID3_Superclass_Pointer(itkDivideImageFilterID3ID3ID3_Superclass_Pointer const & p);
     itkDivideImageFilterID3ID3ID3_Superclass_Pointer(itkDivideImageFilterID3ID3ID3_Superclass * p);
     ~itkDivideImageFilterID3ID3ID3_Superclass_Pointer();
     itkDivideImageFilterID3ID3ID3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterID3ID3ID3_Superclass * GetPointer() const;
     bool operator<(itkDivideImageFilterID3ID3ID3_Superclass_Pointer const & r) const;
     bool operator>(itkDivideImageFilterID3ID3ID3_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterID3ID3ID3_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterID3ID3ID3_Superclass_Pointer const & r) const;
     itkDivideImageFilterID3ID3ID3_Superclass_Pointer & operator=(itkDivideImageFilterID3ID3ID3_Superclass_Pointer const & r);
     itkDivideImageFilterID3ID3ID3_Superclass_Pointer & operator=(itkDivideImageFilterID3ID3ID3_Superclass * r);
     itkDivideImageFilterID3ID3ID3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterIF2IF2IF2_Pointer {
   public:
     itkDivideImageFilterIF2IF2IF2_Pointer();
     itkDivideImageFilterIF2IF2IF2_Pointer(itkDivideImageFilterIF2IF2IF2_Pointer const & p);
     itkDivideImageFilterIF2IF2IF2_Pointer(itkDivideImageFilterIF2IF2IF2 * p);
     ~itkDivideImageFilterIF2IF2IF2_Pointer();
     itkDivideImageFilterIF2IF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterIF2IF2IF2 * GetPointer() const;
     bool operator<(itkDivideImageFilterIF2IF2IF2_Pointer const & r) const;
     bool operator>(itkDivideImageFilterIF2IF2IF2_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterIF2IF2IF2_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterIF2IF2IF2_Pointer const & r) const;
     itkDivideImageFilterIF2IF2IF2_Pointer & operator=(itkDivideImageFilterIF2IF2IF2_Pointer const & r);
     itkDivideImageFilterIF2IF2IF2_Pointer & operator=(itkDivideImageFilterIF2IF2IF2 * r);
     itkDivideImageFilterIF2IF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterIF2IF2IF2_Superclass : public itkInPlaceImageFilterIF2IF2 {
   public:
     enum  {  InputImage1Dimension = 2 };
     enum  {  InputImage2Dimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     static itkDivideImageFilterIF2IF2IF2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetInput1(itkImageF2 const * image1);
     void SetInput2(itkImageF2 const * image2);
     itk::Function::Div< float, float, float > & GetFunctor();
     itk::Function::Div< float, float, float > const & GetFunctor() const;
     void SetFunctor(itk::Function::Div< float, float, float > const & functor);
   private:
     itkDivideImageFilterIF2IF2IF2_Superclass(itkDivideImageFilterIF2IF2IF2_Superclass const & arg0);
     void operator=(itkDivideImageFilterIF2IF2IF2_Superclass const & arg0);
   protected:
     itkDivideImageFilterIF2IF2IF2_Superclass();
     ~itkDivideImageFilterIF2IF2IF2_Superclass();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkDivideImageFilterIF2IF2IF2_Superclass_Pointer {
   public:
     itkDivideImageFilterIF2IF2IF2_Superclass_Pointer();
     itkDivideImageFilterIF2IF2IF2_Superclass_Pointer(itkDivideImageFilterIF2IF2IF2_Superclass_Pointer const & p);
     itkDivideImageFilterIF2IF2IF2_Superclass_Pointer(itkDivideImageFilterIF2IF2IF2_Superclass * p);
     ~itkDivideImageFilterIF2IF2IF2_Superclass_Pointer();
     itkDivideImageFilterIF2IF2IF2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterIF2IF2IF2_Superclass * GetPointer() const;
     bool operator<(itkDivideImageFilterIF2IF2IF2_Superclass_Pointer const & r) const;
     bool operator>(itkDivideImageFilterIF2IF2IF2_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterIF2IF2IF2_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterIF2IF2IF2_Superclass_Pointer const & r) const;
     itkDivideImageFilterIF2IF2IF2_Superclass_Pointer & operator=(itkDivideImageFilterIF2IF2IF2_Superclass_Pointer const & r);
     itkDivideImageFilterIF2IF2IF2_Superclass_Pointer & operator=(itkDivideImageFilterIF2IF2IF2_Superclass * r);
     itkDivideImageFilterIF2IF2IF2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterIF3IF3IF3_Pointer {
   public:
     itkDivideImageFilterIF3IF3IF3_Pointer();
     itkDivideImageFilterIF3IF3IF3_Pointer(itkDivideImageFilterIF3IF3IF3_Pointer const & p);
     itkDivideImageFilterIF3IF3IF3_Pointer(itkDivideImageFilterIF3IF3IF3 * p);
     ~itkDivideImageFilterIF3IF3IF3_Pointer();
     itkDivideImageFilterIF3IF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterIF3IF3IF3 * GetPointer() const;
     bool operator<(itkDivideImageFilterIF3IF3IF3_Pointer const & r) const;
     bool operator>(itkDivideImageFilterIF3IF3IF3_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterIF3IF3IF3_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterIF3IF3IF3_Pointer const & r) const;
     itkDivideImageFilterIF3IF3IF3_Pointer & operator=(itkDivideImageFilterIF3IF3IF3_Pointer const & r);
     itkDivideImageFilterIF3IF3IF3_Pointer & operator=(itkDivideImageFilterIF3IF3IF3 * r);
     itkDivideImageFilterIF3IF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterIF3IF3IF3_Superclass : public itkInPlaceImageFilterIF3IF3 {
   public:
     enum  {  InputImage1Dimension = 3 };
     enum  {  InputImage2Dimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     static itkDivideImageFilterIF3IF3IF3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetInput1(itkImageF3 const * image1);
     void SetInput2(itkImageF3 const * image2);
     itk::Function::Div< float, float, float > & GetFunctor();
     itk::Function::Div< float, float, float > const & GetFunctor() const;
     void SetFunctor(itk::Function::Div< float, float, float > const & functor);
   private:
     itkDivideImageFilterIF3IF3IF3_Superclass(itkDivideImageFilterIF3IF3IF3_Superclass const & arg0);
     void operator=(itkDivideImageFilterIF3IF3IF3_Superclass const & arg0);
   protected:
     itkDivideImageFilterIF3IF3IF3_Superclass();
     ~itkDivideImageFilterIF3IF3IF3_Superclass();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkDivideImageFilterIF3IF3IF3_Superclass_Pointer {
   public:
     itkDivideImageFilterIF3IF3IF3_Superclass_Pointer();
     itkDivideImageFilterIF3IF3IF3_Superclass_Pointer(itkDivideImageFilterIF3IF3IF3_Superclass_Pointer const & p);
     itkDivideImageFilterIF3IF3IF3_Superclass_Pointer(itkDivideImageFilterIF3IF3IF3_Superclass * p);
     ~itkDivideImageFilterIF3IF3IF3_Superclass_Pointer();
     itkDivideImageFilterIF3IF3IF3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterIF3IF3IF3_Superclass * GetPointer() const;
     bool operator<(itkDivideImageFilterIF3IF3IF3_Superclass_Pointer const & r) const;
     bool operator>(itkDivideImageFilterIF3IF3IF3_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterIF3IF3IF3_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterIF3IF3IF3_Superclass_Pointer const & r) const;
     itkDivideImageFilterIF3IF3IF3_Superclass_Pointer & operator=(itkDivideImageFilterIF3IF3IF3_Superclass_Pointer const & r);
     itkDivideImageFilterIF3IF3IF3_Superclass_Pointer & operator=(itkDivideImageFilterIF3IF3IF3_Superclass * r);
     itkDivideImageFilterIF3IF3IF3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterIUC2IUC2IUC2_Pointer {
   public:
     itkDivideImageFilterIUC2IUC2IUC2_Pointer();
     itkDivideImageFilterIUC2IUC2IUC2_Pointer(itkDivideImageFilterIUC2IUC2IUC2_Pointer const & p);
     itkDivideImageFilterIUC2IUC2IUC2_Pointer(itkDivideImageFilterIUC2IUC2IUC2 * p);
     ~itkDivideImageFilterIUC2IUC2IUC2_Pointer();
     itkDivideImageFilterIUC2IUC2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterIUC2IUC2IUC2 * GetPointer() const;
     bool operator<(itkDivideImageFilterIUC2IUC2IUC2_Pointer const & r) const;
     bool operator>(itkDivideImageFilterIUC2IUC2IUC2_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterIUC2IUC2IUC2_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterIUC2IUC2IUC2_Pointer const & r) const;
     itkDivideImageFilterIUC2IUC2IUC2_Pointer & operator=(itkDivideImageFilterIUC2IUC2IUC2_Pointer const & r);
     itkDivideImageFilterIUC2IUC2IUC2_Pointer & operator=(itkDivideImageFilterIUC2IUC2IUC2 * r);
     itkDivideImageFilterIUC2IUC2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterIUC2IUC2IUC2_Superclass : public itkInPlaceImageFilterIUC2IUC2 {
   public:
     enum  {  InputImage1Dimension = 2 };
     enum  {  InputImage2Dimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     static itkDivideImageFilterIUC2IUC2IUC2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetInput1(itkImageUC2 const * image1);
     void SetInput2(itkImageUC2 const * image2);
     itk::Function::Div< unsigned char, unsigned char, unsigned char > & GetFunctor();
     itk::Function::Div< unsigned char, unsigned char, unsigned char > const & GetFunctor() const;
     void SetFunctor(itk::Function::Div< unsigned char, unsigned char, unsigned char > const & functor);
   private:
     itkDivideImageFilterIUC2IUC2IUC2_Superclass(itkDivideImageFilterIUC2IUC2IUC2_Superclass const & arg0);
     void operator=(itkDivideImageFilterIUC2IUC2IUC2_Superclass const & arg0);
   protected:
     itkDivideImageFilterIUC2IUC2IUC2_Superclass();
     ~itkDivideImageFilterIUC2IUC2IUC2_Superclass();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkDivideImageFilterIUC2IUC2IUC2_Superclass_Pointer {
   public:
     itkDivideImageFilterIUC2IUC2IUC2_Superclass_Pointer();
     itkDivideImageFilterIUC2IUC2IUC2_Superclass_Pointer(itkDivideImageFilterIUC2IUC2IUC2_Superclass_Pointer const & p);
     itkDivideImageFilterIUC2IUC2IUC2_Superclass_Pointer(itkDivideImageFilterIUC2IUC2IUC2_Superclass * p);
     ~itkDivideImageFilterIUC2IUC2IUC2_Superclass_Pointer();
     itkDivideImageFilterIUC2IUC2IUC2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterIUC2IUC2IUC2_Superclass * GetPointer() const;
     bool operator<(itkDivideImageFilterIUC2IUC2IUC2_Superclass_Pointer const & r) const;
     bool operator>(itkDivideImageFilterIUC2IUC2IUC2_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterIUC2IUC2IUC2_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterIUC2IUC2IUC2_Superclass_Pointer const & r) const;
     itkDivideImageFilterIUC2IUC2IUC2_Superclass_Pointer & operator=(itkDivideImageFilterIUC2IUC2IUC2_Superclass_Pointer const & r);
     itkDivideImageFilterIUC2IUC2IUC2_Superclass_Pointer & operator=(itkDivideImageFilterIUC2IUC2IUC2_Superclass * r);
     itkDivideImageFilterIUC2IUC2IUC2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterIUC3IUC3IUC3_Pointer {
   public:
     itkDivideImageFilterIUC3IUC3IUC3_Pointer();
     itkDivideImageFilterIUC3IUC3IUC3_Pointer(itkDivideImageFilterIUC3IUC3IUC3_Pointer const & p);
     itkDivideImageFilterIUC3IUC3IUC3_Pointer(itkDivideImageFilterIUC3IUC3IUC3 * p);
     ~itkDivideImageFilterIUC3IUC3IUC3_Pointer();
     itkDivideImageFilterIUC3IUC3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterIUC3IUC3IUC3 * GetPointer() const;
     bool operator<(itkDivideImageFilterIUC3IUC3IUC3_Pointer const & r) const;
     bool operator>(itkDivideImageFilterIUC3IUC3IUC3_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterIUC3IUC3IUC3_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterIUC3IUC3IUC3_Pointer const & r) const;
     itkDivideImageFilterIUC3IUC3IUC3_Pointer & operator=(itkDivideImageFilterIUC3IUC3IUC3_Pointer const & r);
     itkDivideImageFilterIUC3IUC3IUC3_Pointer & operator=(itkDivideImageFilterIUC3IUC3IUC3 * r);
     itkDivideImageFilterIUC3IUC3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterIUC3IUC3IUC3_Superclass : public itkInPlaceImageFilterIUC3IUC3 {
   public:
     enum  {  InputImage1Dimension = 3 };
     enum  {  InputImage2Dimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     static itkDivideImageFilterIUC3IUC3IUC3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetInput1(itkImageUC3 const * image1);
     void SetInput2(itkImageUC3 const * image2);
     itk::Function::Div< unsigned char, unsigned char, unsigned char > & GetFunctor();
     itk::Function::Div< unsigned char, unsigned char, unsigned char > const & GetFunctor() const;
     void SetFunctor(itk::Function::Div< unsigned char, unsigned char, unsigned char > const & functor);
   private:
     itkDivideImageFilterIUC3IUC3IUC3_Superclass(itkDivideImageFilterIUC3IUC3IUC3_Superclass const & arg0);
     void operator=(itkDivideImageFilterIUC3IUC3IUC3_Superclass const & arg0);
   protected:
     itkDivideImageFilterIUC3IUC3IUC3_Superclass();
     ~itkDivideImageFilterIUC3IUC3IUC3_Superclass();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkDivideImageFilterIUC3IUC3IUC3_Superclass_Pointer {
   public:
     itkDivideImageFilterIUC3IUC3IUC3_Superclass_Pointer();
     itkDivideImageFilterIUC3IUC3IUC3_Superclass_Pointer(itkDivideImageFilterIUC3IUC3IUC3_Superclass_Pointer const & p);
     itkDivideImageFilterIUC3IUC3IUC3_Superclass_Pointer(itkDivideImageFilterIUC3IUC3IUC3_Superclass * p);
     ~itkDivideImageFilterIUC3IUC3IUC3_Superclass_Pointer();
     itkDivideImageFilterIUC3IUC3IUC3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterIUC3IUC3IUC3_Superclass * GetPointer() const;
     bool operator<(itkDivideImageFilterIUC3IUC3IUC3_Superclass_Pointer const & r) const;
     bool operator>(itkDivideImageFilterIUC3IUC3IUC3_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterIUC3IUC3IUC3_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterIUC3IUC3IUC3_Superclass_Pointer const & r) const;
     itkDivideImageFilterIUC3IUC3IUC3_Superclass_Pointer & operator=(itkDivideImageFilterIUC3IUC3IUC3_Superclass_Pointer const & r);
     itkDivideImageFilterIUC3IUC3IUC3_Superclass_Pointer & operator=(itkDivideImageFilterIUC3IUC3IUC3_Superclass * r);
     itkDivideImageFilterIUC3IUC3IUC3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterIUL2IUL2IUL2_Pointer {
   public:
     itkDivideImageFilterIUL2IUL2IUL2_Pointer();
     itkDivideImageFilterIUL2IUL2IUL2_Pointer(itkDivideImageFilterIUL2IUL2IUL2_Pointer const & p);
     itkDivideImageFilterIUL2IUL2IUL2_Pointer(itkDivideImageFilterIUL2IUL2IUL2 * p);
     ~itkDivideImageFilterIUL2IUL2IUL2_Pointer();
     itkDivideImageFilterIUL2IUL2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterIUL2IUL2IUL2 * GetPointer() const;
     bool operator<(itkDivideImageFilterIUL2IUL2IUL2_Pointer const & r) const;
     bool operator>(itkDivideImageFilterIUL2IUL2IUL2_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterIUL2IUL2IUL2_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterIUL2IUL2IUL2_Pointer const & r) const;
     itkDivideImageFilterIUL2IUL2IUL2_Pointer & operator=(itkDivideImageFilterIUL2IUL2IUL2_Pointer const & r);
     itkDivideImageFilterIUL2IUL2IUL2_Pointer & operator=(itkDivideImageFilterIUL2IUL2IUL2 * r);
     itkDivideImageFilterIUL2IUL2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterIUL2IUL2IUL2_Superclass : public itkInPlaceImageFilterIUL2IUL2 {
   public:
     enum  {  InputImage1Dimension = 2 };
     enum  {  InputImage2Dimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     static itkDivideImageFilterIUL2IUL2IUL2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetInput1(itkImageUL2 const * image1);
     void SetInput2(itkImageUL2 const * image2);
     itk::Function::Div< unsigned long, unsigned long, unsigned long > & GetFunctor();
     itk::Function::Div< unsigned long, unsigned long, unsigned long > const & GetFunctor() const;
     void SetFunctor(itk::Function::Div< unsigned long, unsigned long, unsigned long > const & functor);
   private:
     itkDivideImageFilterIUL2IUL2IUL2_Superclass(itkDivideImageFilterIUL2IUL2IUL2_Superclass const & arg0);
     void operator=(itkDivideImageFilterIUL2IUL2IUL2_Superclass const & arg0);
   protected:
     itkDivideImageFilterIUL2IUL2IUL2_Superclass();
     ~itkDivideImageFilterIUL2IUL2IUL2_Superclass();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkDivideImageFilterIUL2IUL2IUL2_Superclass_Pointer {
   public:
     itkDivideImageFilterIUL2IUL2IUL2_Superclass_Pointer();
     itkDivideImageFilterIUL2IUL2IUL2_Superclass_Pointer(itkDivideImageFilterIUL2IUL2IUL2_Superclass_Pointer const & p);
     itkDivideImageFilterIUL2IUL2IUL2_Superclass_Pointer(itkDivideImageFilterIUL2IUL2IUL2_Superclass * p);
     ~itkDivideImageFilterIUL2IUL2IUL2_Superclass_Pointer();
     itkDivideImageFilterIUL2IUL2IUL2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterIUL2IUL2IUL2_Superclass * GetPointer() const;
     bool operator<(itkDivideImageFilterIUL2IUL2IUL2_Superclass_Pointer const & r) const;
     bool operator>(itkDivideImageFilterIUL2IUL2IUL2_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterIUL2IUL2IUL2_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterIUL2IUL2IUL2_Superclass_Pointer const & r) const;
     itkDivideImageFilterIUL2IUL2IUL2_Superclass_Pointer & operator=(itkDivideImageFilterIUL2IUL2IUL2_Superclass_Pointer const & r);
     itkDivideImageFilterIUL2IUL2IUL2_Superclass_Pointer & operator=(itkDivideImageFilterIUL2IUL2IUL2_Superclass * r);
     itkDivideImageFilterIUL2IUL2IUL2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterIUL3IUL3IUL3_Pointer {
   public:
     itkDivideImageFilterIUL3IUL3IUL3_Pointer();
     itkDivideImageFilterIUL3IUL3IUL3_Pointer(itkDivideImageFilterIUL3IUL3IUL3_Pointer const & p);
     itkDivideImageFilterIUL3IUL3IUL3_Pointer(itkDivideImageFilterIUL3IUL3IUL3 * p);
     ~itkDivideImageFilterIUL3IUL3IUL3_Pointer();
     itkDivideImageFilterIUL3IUL3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterIUL3IUL3IUL3 * GetPointer() const;
     bool operator<(itkDivideImageFilterIUL3IUL3IUL3_Pointer const & r) const;
     bool operator>(itkDivideImageFilterIUL3IUL3IUL3_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterIUL3IUL3IUL3_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterIUL3IUL3IUL3_Pointer const & r) const;
     itkDivideImageFilterIUL3IUL3IUL3_Pointer & operator=(itkDivideImageFilterIUL3IUL3IUL3_Pointer const & r);
     itkDivideImageFilterIUL3IUL3IUL3_Pointer & operator=(itkDivideImageFilterIUL3IUL3IUL3 * r);
     itkDivideImageFilterIUL3IUL3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterIUL3IUL3IUL3_Superclass : public itkInPlaceImageFilterIUL3IUL3 {
   public:
     enum  {  InputImage1Dimension = 3 };
     enum  {  InputImage2Dimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     static itkDivideImageFilterIUL3IUL3IUL3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetInput1(itkImageUL3 const * image1);
     void SetInput2(itkImageUL3 const * image2);
     itk::Function::Div< unsigned long, unsigned long, unsigned long > & GetFunctor();
     itk::Function::Div< unsigned long, unsigned long, unsigned long > const & GetFunctor() const;
     void SetFunctor(itk::Function::Div< unsigned long, unsigned long, unsigned long > const & functor);
   private:
     itkDivideImageFilterIUL3IUL3IUL3_Superclass(itkDivideImageFilterIUL3IUL3IUL3_Superclass const & arg0);
     void operator=(itkDivideImageFilterIUL3IUL3IUL3_Superclass const & arg0);
   protected:
     itkDivideImageFilterIUL3IUL3IUL3_Superclass();
     ~itkDivideImageFilterIUL3IUL3IUL3_Superclass();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkDivideImageFilterIUL3IUL3IUL3_Superclass_Pointer {
   public:
     itkDivideImageFilterIUL3IUL3IUL3_Superclass_Pointer();
     itkDivideImageFilterIUL3IUL3IUL3_Superclass_Pointer(itkDivideImageFilterIUL3IUL3IUL3_Superclass_Pointer const & p);
     itkDivideImageFilterIUL3IUL3IUL3_Superclass_Pointer(itkDivideImageFilterIUL3IUL3IUL3_Superclass * p);
     ~itkDivideImageFilterIUL3IUL3IUL3_Superclass_Pointer();
     itkDivideImageFilterIUL3IUL3IUL3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterIUL3IUL3IUL3_Superclass * GetPointer() const;
     bool operator<(itkDivideImageFilterIUL3IUL3IUL3_Superclass_Pointer const & r) const;
     bool operator>(itkDivideImageFilterIUL3IUL3IUL3_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterIUL3IUL3IUL3_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterIUL3IUL3IUL3_Superclass_Pointer const & r) const;
     itkDivideImageFilterIUL3IUL3IUL3_Superclass_Pointer & operator=(itkDivideImageFilterIUL3IUL3IUL3_Superclass_Pointer const & r);
     itkDivideImageFilterIUL3IUL3IUL3_Superclass_Pointer & operator=(itkDivideImageFilterIUL3IUL3IUL3_Superclass * r);
     itkDivideImageFilterIUL3IUL3IUL3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterIUS2IUS2IUS2_Pointer {
   public:
     itkDivideImageFilterIUS2IUS2IUS2_Pointer();
     itkDivideImageFilterIUS2IUS2IUS2_Pointer(itkDivideImageFilterIUS2IUS2IUS2_Pointer const & p);
     itkDivideImageFilterIUS2IUS2IUS2_Pointer(itkDivideImageFilterIUS2IUS2IUS2 * p);
     ~itkDivideImageFilterIUS2IUS2IUS2_Pointer();
     itkDivideImageFilterIUS2IUS2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterIUS2IUS2IUS2 * GetPointer() const;
     bool operator<(itkDivideImageFilterIUS2IUS2IUS2_Pointer const & r) const;
     bool operator>(itkDivideImageFilterIUS2IUS2IUS2_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterIUS2IUS2IUS2_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterIUS2IUS2IUS2_Pointer const & r) const;
     itkDivideImageFilterIUS2IUS2IUS2_Pointer & operator=(itkDivideImageFilterIUS2IUS2IUS2_Pointer const & r);
     itkDivideImageFilterIUS2IUS2IUS2_Pointer & operator=(itkDivideImageFilterIUS2IUS2IUS2 * r);
     itkDivideImageFilterIUS2IUS2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterIUS2IUS2IUS2_Superclass : public itkInPlaceImageFilterIUS2IUS2 {
   public:
     enum  {  InputImage1Dimension = 2 };
     enum  {  InputImage2Dimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     static itkDivideImageFilterIUS2IUS2IUS2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetInput1(itkImageUS2 const * image1);
     void SetInput2(itkImageUS2 const * image2);
     itk::Function::Div< unsigned short, unsigned short, unsigned short > & GetFunctor();
     itk::Function::Div< unsigned short, unsigned short, unsigned short > const & GetFunctor() const;
     void SetFunctor(itk::Function::Div< unsigned short, unsigned short, unsigned short > const & functor);
   private:
     itkDivideImageFilterIUS2IUS2IUS2_Superclass(itkDivideImageFilterIUS2IUS2IUS2_Superclass const & arg0);
     void operator=(itkDivideImageFilterIUS2IUS2IUS2_Superclass const & arg0);
   protected:
     itkDivideImageFilterIUS2IUS2IUS2_Superclass();
     ~itkDivideImageFilterIUS2IUS2IUS2_Superclass();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkDivideImageFilterIUS2IUS2IUS2_Superclass_Pointer {
   public:
     itkDivideImageFilterIUS2IUS2IUS2_Superclass_Pointer();
     itkDivideImageFilterIUS2IUS2IUS2_Superclass_Pointer(itkDivideImageFilterIUS2IUS2IUS2_Superclass_Pointer const & p);
     itkDivideImageFilterIUS2IUS2IUS2_Superclass_Pointer(itkDivideImageFilterIUS2IUS2IUS2_Superclass * p);
     ~itkDivideImageFilterIUS2IUS2IUS2_Superclass_Pointer();
     itkDivideImageFilterIUS2IUS2IUS2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterIUS2IUS2IUS2_Superclass * GetPointer() const;
     bool operator<(itkDivideImageFilterIUS2IUS2IUS2_Superclass_Pointer const & r) const;
     bool operator>(itkDivideImageFilterIUS2IUS2IUS2_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterIUS2IUS2IUS2_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterIUS2IUS2IUS2_Superclass_Pointer const & r) const;
     itkDivideImageFilterIUS2IUS2IUS2_Superclass_Pointer & operator=(itkDivideImageFilterIUS2IUS2IUS2_Superclass_Pointer const & r);
     itkDivideImageFilterIUS2IUS2IUS2_Superclass_Pointer & operator=(itkDivideImageFilterIUS2IUS2IUS2_Superclass * r);
     itkDivideImageFilterIUS2IUS2IUS2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterIUS3IUS3IUS3_Pointer {
   public:
     itkDivideImageFilterIUS3IUS3IUS3_Pointer();
     itkDivideImageFilterIUS3IUS3IUS3_Pointer(itkDivideImageFilterIUS3IUS3IUS3_Pointer const & p);
     itkDivideImageFilterIUS3IUS3IUS3_Pointer(itkDivideImageFilterIUS3IUS3IUS3 * p);
     ~itkDivideImageFilterIUS3IUS3IUS3_Pointer();
     itkDivideImageFilterIUS3IUS3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterIUS3IUS3IUS3 * GetPointer() const;
     bool operator<(itkDivideImageFilterIUS3IUS3IUS3_Pointer const & r) const;
     bool operator>(itkDivideImageFilterIUS3IUS3IUS3_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterIUS3IUS3IUS3_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterIUS3IUS3IUS3_Pointer const & r) const;
     itkDivideImageFilterIUS3IUS3IUS3_Pointer & operator=(itkDivideImageFilterIUS3IUS3IUS3_Pointer const & r);
     itkDivideImageFilterIUS3IUS3IUS3_Pointer & operator=(itkDivideImageFilterIUS3IUS3IUS3 * r);
     itkDivideImageFilterIUS3IUS3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterIUS3IUS3IUS3_Superclass : public itkInPlaceImageFilterIUS3IUS3 {
   public:
     enum  {  InputImage1Dimension = 3 };
     enum  {  InputImage2Dimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     static itkDivideImageFilterIUS3IUS3IUS3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetInput1(itkImageUS3 const * image1);
     void SetInput2(itkImageUS3 const * image2);
     itk::Function::Div< unsigned short, unsigned short, unsigned short > & GetFunctor();
     itk::Function::Div< unsigned short, unsigned short, unsigned short > const & GetFunctor() const;
     void SetFunctor(itk::Function::Div< unsigned short, unsigned short, unsigned short > const & functor);
   private:
     itkDivideImageFilterIUS3IUS3IUS3_Superclass(itkDivideImageFilterIUS3IUS3IUS3_Superclass const & arg0);
     void operator=(itkDivideImageFilterIUS3IUS3IUS3_Superclass const & arg0);
   protected:
     itkDivideImageFilterIUS3IUS3IUS3_Superclass();
     ~itkDivideImageFilterIUS3IUS3IUS3_Superclass();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkDivideImageFilterIUS3IUS3IUS3_Superclass_Pointer {
   public:
     itkDivideImageFilterIUS3IUS3IUS3_Superclass_Pointer();
     itkDivideImageFilterIUS3IUS3IUS3_Superclass_Pointer(itkDivideImageFilterIUS3IUS3IUS3_Superclass_Pointer const & p);
     itkDivideImageFilterIUS3IUS3IUS3_Superclass_Pointer(itkDivideImageFilterIUS3IUS3IUS3_Superclass * p);
     ~itkDivideImageFilterIUS3IUS3IUS3_Superclass_Pointer();
     itkDivideImageFilterIUS3IUS3IUS3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideImageFilterIUS3IUS3IUS3_Superclass * GetPointer() const;
     bool operator<(itkDivideImageFilterIUS3IUS3IUS3_Superclass_Pointer const & r) const;
     bool operator>(itkDivideImageFilterIUS3IUS3IUS3_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideImageFilterIUS3IUS3IUS3_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideImageFilterIUS3IUS3IUS3_Superclass_Pointer const & r) const;
     itkDivideImageFilterIUS3IUS3IUS3_Superclass_Pointer & operator=(itkDivideImageFilterIUS3IUS3IUS3_Superclass_Pointer const & r);
     itkDivideImageFilterIUS3IUS3IUS3_Superclass_Pointer & operator=(itkDivideImageFilterIUS3IUS3IUS3_Superclass * r);
     itkDivideImageFilterIUS3IUS3IUS3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideImageFilterICF2ICF2ICF2 : public itkDivideImageFilterICF2ICF2ICF2_Superclass {
   public:
     enum  {  IntConvertibleToInput2Check = 1 };
     enum  {  Input1Input2OutputDivisionOperatorsCheck = 1 };
     static itkDivideImageFilterICF2ICF2ICF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
   protected:
     itkDivideImageFilterICF2ICF2ICF2();
     ~itkDivideImageFilterICF2ICF2ICF2();
     itkDivideImageFilterICF2ICF2ICF2(itkDivideImageFilterICF2ICF2ICF2 const & arg0);
     void operator=(itkDivideImageFilterICF2ICF2ICF2 const & arg0);
 };


 class itkDivideImageFilterICF2IF2ICF2 : public itkDivideImageFilterICF2IF2ICF2_Superclass {
   public:
     enum  {  IntConvertibleToInput2Check = 1 };
     enum  {  Input1Input2OutputDivisionOperatorsCheck = 1 };
     static itkDivideImageFilterICF2IF2ICF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
   protected:
     itkDivideImageFilterICF2IF2ICF2();
     ~itkDivideImageFilterICF2IF2ICF2();
     itkDivideImageFilterICF2IF2ICF2(itkDivideImageFilterICF2IF2ICF2 const & arg0);
     void operator=(itkDivideImageFilterICF2IF2ICF2 const & arg0);
 };


 class itkDivideImageFilterICF3ICF3ICF3 : public itkDivideImageFilterICF3ICF3ICF3_Superclass {
   public:
     enum  {  IntConvertibleToInput2Check = 1 };
     enum  {  Input1Input2OutputDivisionOperatorsCheck = 1 };
     static itkDivideImageFilterICF3ICF3ICF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
   protected:
     itkDivideImageFilterICF3ICF3ICF3();
     ~itkDivideImageFilterICF3ICF3ICF3();
     itkDivideImageFilterICF3ICF3ICF3(itkDivideImageFilterICF3ICF3ICF3 const & arg0);
     void operator=(itkDivideImageFilterICF3ICF3ICF3 const & arg0);
 };


 class itkDivideImageFilterICF3IF3ICF3 : public itkDivideImageFilterICF3IF3ICF3_Superclass {
   public:
     enum  {  IntConvertibleToInput2Check = 1 };
     enum  {  Input1Input2OutputDivisionOperatorsCheck = 1 };
     static itkDivideImageFilterICF3IF3ICF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
   protected:
     itkDivideImageFilterICF3IF3ICF3();
     ~itkDivideImageFilterICF3IF3ICF3();
     itkDivideImageFilterICF3IF3ICF3(itkDivideImageFilterICF3IF3ICF3 const & arg0);
     void operator=(itkDivideImageFilterICF3IF3ICF3 const & arg0);
 };


 class itkDivideImageFilterID2ID2ID2 : public itkDivideImageFilterID2ID2ID2_Superclass {
   public:
     enum  {  IntConvertibleToInput2Check = 1 };
     enum  {  Input1Input2OutputDivisionOperatorsCheck = 1 };
     static itkDivideImageFilterID2ID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
   protected:
     itkDivideImageFilterID2ID2ID2();
     ~itkDivideImageFilterID2ID2ID2();
     itkDivideImageFilterID2ID2ID2(itkDivideImageFilterID2ID2ID2 const & arg0);
     void operator=(itkDivideImageFilterID2ID2ID2 const & arg0);
 };


 class itkDivideImageFilterID3ID3ID3 : public itkDivideImageFilterID3ID3ID3_Superclass {
   public:
     enum  {  IntConvertibleToInput2Check = 1 };
     enum  {  Input1Input2OutputDivisionOperatorsCheck = 1 };
     static itkDivideImageFilterID3ID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
   protected:
     itkDivideImageFilterID3ID3ID3();
     ~itkDivideImageFilterID3ID3ID3();
     itkDivideImageFilterID3ID3ID3(itkDivideImageFilterID3ID3ID3 const & arg0);
     void operator=(itkDivideImageFilterID3ID3ID3 const & arg0);
 };


 class itkDivideImageFilterIF2IF2IF2 : public itkDivideImageFilterIF2IF2IF2_Superclass {
   public:
     enum  {  IntConvertibleToInput2Check = 1 };
     enum  {  Input1Input2OutputDivisionOperatorsCheck = 1 };
     static itkDivideImageFilterIF2IF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
   protected:
     itkDivideImageFilterIF2IF2IF2();
     ~itkDivideImageFilterIF2IF2IF2();
     itkDivideImageFilterIF2IF2IF2(itkDivideImageFilterIF2IF2IF2 const & arg0);
     void operator=(itkDivideImageFilterIF2IF2IF2 const & arg0);
 };


 class itkDivideImageFilterIF3IF3IF3 : public itkDivideImageFilterIF3IF3IF3_Superclass {
   public:
     enum  {  IntConvertibleToInput2Check = 1 };
     enum  {  Input1Input2OutputDivisionOperatorsCheck = 1 };
     static itkDivideImageFilterIF3IF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
   protected:
     itkDivideImageFilterIF3IF3IF3();
     ~itkDivideImageFilterIF3IF3IF3();
     itkDivideImageFilterIF3IF3IF3(itkDivideImageFilterIF3IF3IF3 const & arg0);
     void operator=(itkDivideImageFilterIF3IF3IF3 const & arg0);
 };


 class itkDivideImageFilterIUC2IUC2IUC2 : public itkDivideImageFilterIUC2IUC2IUC2_Superclass {
   public:
     enum  {  IntConvertibleToInput2Check = 1 };
     enum  {  Input1Input2OutputDivisionOperatorsCheck = 1 };
     static itkDivideImageFilterIUC2IUC2IUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
   protected:
     itkDivideImageFilterIUC2IUC2IUC2();
     ~itkDivideImageFilterIUC2IUC2IUC2();
     itkDivideImageFilterIUC2IUC2IUC2(itkDivideImageFilterIUC2IUC2IUC2 const & arg0);
     void operator=(itkDivideImageFilterIUC2IUC2IUC2 const & arg0);
 };


 class itkDivideImageFilterIUC3IUC3IUC3 : public itkDivideImageFilterIUC3IUC3IUC3_Superclass {
   public:
     enum  {  IntConvertibleToInput2Check = 1 };
     enum  {  Input1Input2OutputDivisionOperatorsCheck = 1 };
     static itkDivideImageFilterIUC3IUC3IUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
   protected:
     itkDivideImageFilterIUC3IUC3IUC3();
     ~itkDivideImageFilterIUC3IUC3IUC3();
     itkDivideImageFilterIUC3IUC3IUC3(itkDivideImageFilterIUC3IUC3IUC3 const & arg0);
     void operator=(itkDivideImageFilterIUC3IUC3IUC3 const & arg0);
 };


 class itkDivideImageFilterIUL2IUL2IUL2 : public itkDivideImageFilterIUL2IUL2IUL2_Superclass {
   public:
     enum  {  IntConvertibleToInput2Check = 1 };
     enum  {  Input1Input2OutputDivisionOperatorsCheck = 1 };
     static itkDivideImageFilterIUL2IUL2IUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
   protected:
     itkDivideImageFilterIUL2IUL2IUL2();
     ~itkDivideImageFilterIUL2IUL2IUL2();
     itkDivideImageFilterIUL2IUL2IUL2(itkDivideImageFilterIUL2IUL2IUL2 const & arg0);
     void operator=(itkDivideImageFilterIUL2IUL2IUL2 const & arg0);
 };


 class itkDivideImageFilterIUL3IUL3IUL3 : public itkDivideImageFilterIUL3IUL3IUL3_Superclass {
   public:
     enum  {  IntConvertibleToInput2Check = 1 };
     enum  {  Input1Input2OutputDivisionOperatorsCheck = 1 };
     static itkDivideImageFilterIUL3IUL3IUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
   protected:
     itkDivideImageFilterIUL3IUL3IUL3();
     ~itkDivideImageFilterIUL3IUL3IUL3();
     itkDivideImageFilterIUL3IUL3IUL3(itkDivideImageFilterIUL3IUL3IUL3 const & arg0);
     void operator=(itkDivideImageFilterIUL3IUL3IUL3 const & arg0);
 };


 class itkDivideImageFilterIUS2IUS2IUS2 : public itkDivideImageFilterIUS2IUS2IUS2_Superclass {
   public:
     enum  {  IntConvertibleToInput2Check = 1 };
     enum  {  Input1Input2OutputDivisionOperatorsCheck = 1 };
     static itkDivideImageFilterIUS2IUS2IUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
   protected:
     itkDivideImageFilterIUS2IUS2IUS2();
     ~itkDivideImageFilterIUS2IUS2IUS2();
     itkDivideImageFilterIUS2IUS2IUS2(itkDivideImageFilterIUS2IUS2IUS2 const & arg0);
     void operator=(itkDivideImageFilterIUS2IUS2IUS2 const & arg0);
 };


 class itkDivideImageFilterIUS3IUS3IUS3 : public itkDivideImageFilterIUS3IUS3IUS3_Superclass {
   public:
     enum  {  IntConvertibleToInput2Check = 1 };
     enum  {  Input1Input2OutputDivisionOperatorsCheck = 1 };
     static itkDivideImageFilterIUS3IUS3IUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
   protected:
     itkDivideImageFilterIUS3IUS3IUS3();
     ~itkDivideImageFilterIUS3IUS3IUS3();
     itkDivideImageFilterIUS3IUS3IUS3(itkDivideImageFilterIUS3IUS3IUS3 const & arg0);
     void operator=(itkDivideImageFilterIUS3IUS3IUS3 const & arg0);
 };


