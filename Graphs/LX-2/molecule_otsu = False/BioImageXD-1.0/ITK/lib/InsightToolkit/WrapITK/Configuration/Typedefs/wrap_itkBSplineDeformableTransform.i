// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkBSplineDeformableTransformChicken
#endif
#ifdef SWIGCSHARP
%module itkBSplineDeformableTransformCsharp
#endif
#ifdef SWIGGUILE
%module itkBSplineDeformableTransformGuile
#endif
#ifdef SWIGJAVA
%module itkBSplineDeformableTransformJava
#endif
#ifdef SWIGLUA
%module itkBSplineDeformableTransformLua
#endif
#ifdef SWIGMODULA3
%module itkBSplineDeformableTransformModula3
#endif
#ifdef SWIGMZSCHEME
%module itkBSplineDeformableTransformMzscheme
#endif
#ifdef SWIGOCAML
%module itkBSplineDeformableTransformOcaml
#endif
#ifdef SWIGPERL
%module itkBSplineDeformableTransformPerl
#endif
#ifdef SWIGPERL5
%module itkBSplineDeformableTransformPerl5
#endif
#ifdef SWIGPHP
%module itkBSplineDeformableTransformPhp
#endif
#ifdef SWIGPHP4
%module itkBSplineDeformableTransformPhp4
#endif
#ifdef SWIGPHP5
%module itkBSplineDeformableTransformPhp5
#endif
#ifdef SWIGPIKE
%module itkBSplineDeformableTransformPike
#endif
#ifdef SWIGPYTHON
%module itkBSplineDeformableTransformPython
#endif
#ifdef SWIGR
%module itkBSplineDeformableTransformR
#endif
#ifdef SWIGRUBY
%module itkBSplineDeformableTransformRuby
#endif
#ifdef SWIGSEXP
%module itkBSplineDeformableTransformSexp
#endif
#ifdef SWIGTCL
%module itkBSplineDeformableTransformTcl
#endif
#ifdef SWIGXML
%module itkBSplineDeformableTransformXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
#include "Interpolators.includes"
#include "Mesh.includes"
#include "DeformableTransforms.includes"
%}


%{
%}




%import wrap_itkPoint.i
%import wrap_itkImage.i
%import wrap_ITKRegions.i
%import wrap_itkTransform.i
%import wrap_itkContinuousIndex.i
%import wrap_itkArray2D.i
%import wrap_itkCovariantVector.i
%import wrap_itkBSplineInterpolationWeightFunction.i
%import wrap_itkArray.i
%import wrap_itkMatrix.i
%import wrap_ITKCommonBase.i
%import wrap_itkVector.i


%include itk.i
%include wrap_itkBSplineDeformableTransform_ext.i


 class itkBSplineDeformableTransformD22 : public itkTransformD22 {
   public:
     enum  {  SpaceDimension = 2 };
     enum  {  SplineOrder = 2 };
     static itkBSplineDeformableTransformD22_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetParameters(itkArrayD const & parameters);
     virtual void SetFixedParameters(itkArrayD const & parameters);
     virtual void SetParametersByValue(itkArrayD const & parameters);
     void SetIdentity();
     virtual itkArrayD const & GetParameters() const;
     virtual itkArrayD const & GetFixedParameters() const;
     virtual itkImageD2_Pointer * GetCoefficientImage();
     virtual itkImageD2_Pointer const * GetCoefficientImage() const;
     virtual void SetCoefficientImage(itkImageD2_Pointer * images);
     virtual void SetGridRegion(itkImageRegion2 const & region);
     virtual itkImageRegion2 GetGridRegion() const;
     virtual void SetGridSpacing(itkVectorD2 const & spacing);
     virtual itkVectorD2 GetGridSpacing() const;
     virtual void SetGridDirection(itkMatrixD22 const & spacing);
     virtual itkMatrixD22 GetGridDirection() const;
     virtual void SetGridOrigin(itkPointD2 const & origin);
     virtual itkPointD2 GetGridOrigin() const;
     virtual void SetBulkTransform(itkTransformD22 const * _arg);
     virtual itkTransformD22 const * GetBulkTransform() const;
     virtual itkPointD2 TransformPoint(itkPointD2 const & point) const;
     virtual void TransformPoint(itkPointD2 const & inputPoint, itkPointD2 & outputPoint, itkArrayD & weights, itkArrayUL & indices, bool & inside) const;
     virtual void GetJacobian(itkPointD2 const & inputPoint, itkArrayD & weights, itkArrayUL & indices) const;
     unsigned long GetNumberOfWeights() const;
     virtual itkVectorD2 TransformVector(itkVectorD2 const & arg0) const;
     virtual vnl_vector_fixed< double, 2u > TransformVector(vnl_vector_fixed< double, 2u > const & arg0) const;
     virtual itkCovariantVectorD2 TransformCovariantVector(itkCovariantVectorD2 const & arg0) const;
     virtual itkArray2DD const & GetJacobian(itkPointD2 const & point) const;
     virtual unsigned int GetNumberOfParameters() const;
     unsigned int GetNumberOfParametersPerDimension() const;
     virtual itkImageRegion2 const & GetValidRegion() const;
     virtual bool IsLinear() const;
     unsigned int GetNumberOfAffectedWeights() const;
   private:
     itkBSplineDeformableTransformD22(itkBSplineDeformableTransformD22 const & arg0);
     void operator=(itkBSplineDeformableTransformD22 const & arg0);
     bool InsideValidRegion(itkContinuousIndexD2 const & index) const;
   protected:
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     itkBSplineDeformableTransformD22();
     ~itkBSplineDeformableTransformD22();
     virtual void SetWeightsFunction(itkBSplineInterpolationWeightFunctionD22 * _arg);
     virtual itkBSplineInterpolationWeightFunctionD22 * GetWeightsFunction();
     void WrapAsImages();
     void TransformPointToContinuousIndex(itkPointD2 const & point, itkContinuousIndexD2 & index) const;
 };


 class itkBSplineDeformableTransformD22_Pointer {
   public:
     itkBSplineDeformableTransformD22_Pointer();
     itkBSplineDeformableTransformD22_Pointer(itkBSplineDeformableTransformD22_Pointer const & p);
     itkBSplineDeformableTransformD22_Pointer(itkBSplineDeformableTransformD22 * p);
     ~itkBSplineDeformableTransformD22_Pointer();
     itkBSplineDeformableTransformD22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineDeformableTransformD22 * GetPointer() const;
     bool operator<(itkBSplineDeformableTransformD22_Pointer const & r) const;
     bool operator>(itkBSplineDeformableTransformD22_Pointer const & r) const;
     bool operator<=(itkBSplineDeformableTransformD22_Pointer const & r) const;
     bool operator>=(itkBSplineDeformableTransformD22_Pointer const & r) const;
     itkBSplineDeformableTransformD22_Pointer & operator=(itkBSplineDeformableTransformD22_Pointer const & r);
     itkBSplineDeformableTransformD22_Pointer & operator=(itkBSplineDeformableTransformD22 * r);
     itkBSplineDeformableTransformD22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineDeformableTransformD33 : public itkTransformD33 {
   public:
     enum  {  SpaceDimension = 3 };
     enum  {  SplineOrder = 3 };
     static itkBSplineDeformableTransformD33_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetParameters(itkArrayD const & parameters);
     virtual void SetFixedParameters(itkArrayD const & parameters);
     virtual void SetParametersByValue(itkArrayD const & parameters);
     void SetIdentity();
     virtual itkArrayD const & GetParameters() const;
     virtual itkArrayD const & GetFixedParameters() const;
     virtual itkImageD3_Pointer * GetCoefficientImage();
     virtual itkImageD3_Pointer const * GetCoefficientImage() const;
     virtual void SetCoefficientImage(itkImageD3_Pointer * images);
     virtual void SetGridRegion(itkImageRegion3 const & region);
     virtual itkImageRegion3 GetGridRegion() const;
     virtual void SetGridSpacing(itkVectorD3 const & spacing);
     virtual itkVectorD3 GetGridSpacing() const;
     virtual void SetGridDirection(itkMatrixD33 const & spacing);
     virtual itkMatrixD33 GetGridDirection() const;
     virtual void SetGridOrigin(itkPointD3 const & origin);
     virtual itkPointD3 GetGridOrigin() const;
     virtual void SetBulkTransform(itkTransformD33 const * _arg);
     virtual itkTransformD33 const * GetBulkTransform() const;
     virtual itkPointD3 TransformPoint(itkPointD3 const & point) const;
     virtual void TransformPoint(itkPointD3 const & inputPoint, itkPointD3 & outputPoint, itkArrayD & weights, itkArrayUL & indices, bool & inside) const;
     virtual void GetJacobian(itkPointD3 const & inputPoint, itkArrayD & weights, itkArrayUL & indices) const;
     unsigned long GetNumberOfWeights() const;
     virtual itkVectorD3 TransformVector(itkVectorD3 const & arg0) const;
     virtual vnl_vector_fixed< double, 3u > TransformVector(vnl_vector_fixed< double, 3u > const & arg0) const;
     virtual itkCovariantVectorD3 TransformCovariantVector(itkCovariantVectorD3 const & arg0) const;
     virtual itkArray2DD const & GetJacobian(itkPointD3 const & point) const;
     virtual unsigned int GetNumberOfParameters() const;
     unsigned int GetNumberOfParametersPerDimension() const;
     virtual itkImageRegion3 const & GetValidRegion() const;
     virtual bool IsLinear() const;
     unsigned int GetNumberOfAffectedWeights() const;
   private:
     itkBSplineDeformableTransformD33(itkBSplineDeformableTransformD33 const & arg0);
     void operator=(itkBSplineDeformableTransformD33 const & arg0);
     bool InsideValidRegion(itkContinuousIndexD3 const & index) const;
   protected:
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     itkBSplineDeformableTransformD33();
     ~itkBSplineDeformableTransformD33();
     virtual void SetWeightsFunction(itkBSplineInterpolationWeightFunctionD33 * _arg);
     virtual itkBSplineInterpolationWeightFunctionD33 * GetWeightsFunction();
     void WrapAsImages();
     void TransformPointToContinuousIndex(itkPointD3 const & point, itkContinuousIndexD3 & index) const;
 };


 class itkBSplineDeformableTransformD33_Pointer {
   public:
     itkBSplineDeformableTransformD33_Pointer();
     itkBSplineDeformableTransformD33_Pointer(itkBSplineDeformableTransformD33_Pointer const & p);
     itkBSplineDeformableTransformD33_Pointer(itkBSplineDeformableTransformD33 * p);
     ~itkBSplineDeformableTransformD33_Pointer();
     itkBSplineDeformableTransformD33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineDeformableTransformD33 * GetPointer() const;
     bool operator<(itkBSplineDeformableTransformD33_Pointer const & r) const;
     bool operator>(itkBSplineDeformableTransformD33_Pointer const & r) const;
     bool operator<=(itkBSplineDeformableTransformD33_Pointer const & r) const;
     bool operator>=(itkBSplineDeformableTransformD33_Pointer const & r) const;
     itkBSplineDeformableTransformD33_Pointer & operator=(itkBSplineDeformableTransformD33_Pointer const & r);
     itkBSplineDeformableTransformD33_Pointer & operator=(itkBSplineDeformableTransformD33 * r);
     itkBSplineDeformableTransformD33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


