# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkScalableAffineTransformPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkScalableAffineTransformPython', [dirname(__file__)])
        except ImportError:
            import _itkScalableAffineTransformPython
            return _itkScalableAffineTransformPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkScalableAffineTransformPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkScalableAffineTransformPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkScalableAffineTransformPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkAffineTransformPython
import itkPointPython
import vnl_vectorPython
import vcl_complexPython
import pyBasePython
import vnl_matrixPython
import itkFixedArrayPython
import itkVectorPython
import vnl_vector_refPython
import itkTransformPython
import itkCovariantVectorPython
import itkArray2DPython
import itkArrayPython
import ITKCommonBasePython
import itkEventObjectsPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkMatrixOffsetTransformBasePython
def itkScalableAffineTransformD3_New():
  return itkScalableAffineTransformD3.New()

def itkScalableAffineTransformD2_New():
  return itkScalableAffineTransformD2.New()

class itkScalableAffineTransformD2(itkAffineTransformPython.itkAffineTransformD2):
    """Proxy of C++ itkScalableAffineTransformD2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputSpaceDimension = _itkScalableAffineTransformPython.itkScalableAffineTransformD2_InputSpaceDimension
    OutputSpaceDimension = _itkScalableAffineTransformPython.itkScalableAffineTransformD2_OutputSpaceDimension
    SpaceDimension = _itkScalableAffineTransformPython.itkScalableAffineTransformD2_SpaceDimension
    ParametersDimension = _itkScalableAffineTransformPython.itkScalableAffineTransformD2_ParametersDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkScalableAffineTransformPython.itkScalableAffineTransformD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetScale(self, *args):
        """
        SetScale(self, itkVectorD2 scale)
        SetScale(self, double scale)
        """
        return _itkScalableAffineTransformPython.itkScalableAffineTransformD2_SetScale(self, *args)

    def SetScaleComponent(self, *args):
        """
        SetScaleComponent(self, itkVectorD2 scale)
        SetScaleComponent(self, double scale)
        """
        return _itkScalableAffineTransformPython.itkScalableAffineTransformD2_SetScaleComponent(self, *args)

    def GetScale(self):
        """GetScale(self) -> double"""
        return _itkScalableAffineTransformPython.itkScalableAffineTransformD2_GetScale(self)

    def GetScaleComponent(self):
        """GetScaleComponent(self) -> double"""
        return _itkScalableAffineTransformPython.itkScalableAffineTransformD2_GetScaleComponent(self)

    def SetMatrixComponent(self, *args):
        """SetMatrixComponent(self, itkMatrixD22 matrix)"""
        return _itkScalableAffineTransformPython.itkScalableAffineTransformD2_SetMatrixComponent(self, *args)

    def GetMatrixComponent(self):
        """GetMatrixComponent(self) -> itkMatrixD22"""
        return _itkScalableAffineTransformPython.itkScalableAffineTransformD2_GetMatrixComponent(self)

    def SetOffsetComponent(self, *args):
        """SetOffsetComponent(self, itkVectorD2 offset)"""
        return _itkScalableAffineTransformPython.itkScalableAffineTransformD2_SetOffsetComponent(self, *args)

    def GetOffsetComponent(self):
        """GetOffsetComponent(self) -> itkVectorD2"""
        return _itkScalableAffineTransformPython.itkScalableAffineTransformD2_GetOffsetComponent(self)

    def GetInverse(self, *args):
        """GetInverse(self, itkScalableAffineTransformD2 inverse) -> bool"""
        return _itkScalableAffineTransformPython.itkScalableAffineTransformD2_GetInverse(self, *args)

    __swig_destroy__ = _itkScalableAffineTransformPython.delete_itkScalableAffineTransformD2
    def cast(*args):
        """cast(itkLightObject obj) -> itkScalableAffineTransformD2"""
        return _itkScalableAffineTransformPython.itkScalableAffineTransformD2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkScalableAffineTransformD2"""
        return _itkScalableAffineTransformPython.itkScalableAffineTransformD2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkScalableAffineTransformD2
        
        Create a new object of the class itkScalableAffineTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkScalableAffineTransformD2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkScalableAffineTransformD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalableAffineTransformD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalableAffineTransformD2.SetScale = new_instancemethod(_itkScalableAffineTransformPython.itkScalableAffineTransformD2_SetScale,None,itkScalableAffineTransformD2)
itkScalableAffineTransformD2.SetScaleComponent = new_instancemethod(_itkScalableAffineTransformPython.itkScalableAffineTransformD2_SetScaleComponent,None,itkScalableAffineTransformD2)
itkScalableAffineTransformD2.GetScale = new_instancemethod(_itkScalableAffineTransformPython.itkScalableAffineTransformD2_GetScale,None,itkScalableAffineTransformD2)
itkScalableAffineTransformD2.GetScaleComponent = new_instancemethod(_itkScalableAffineTransformPython.itkScalableAffineTransformD2_GetScaleComponent,None,itkScalableAffineTransformD2)
itkScalableAffineTransformD2.SetMatrixComponent = new_instancemethod(_itkScalableAffineTransformPython.itkScalableAffineTransformD2_SetMatrixComponent,None,itkScalableAffineTransformD2)
itkScalableAffineTransformD2.GetMatrixComponent = new_instancemethod(_itkScalableAffineTransformPython.itkScalableAffineTransformD2_GetMatrixComponent,None,itkScalableAffineTransformD2)
itkScalableAffineTransformD2.SetOffsetComponent = new_instancemethod(_itkScalableAffineTransformPython.itkScalableAffineTransformD2_SetOffsetComponent,None,itkScalableAffineTransformD2)
itkScalableAffineTransformD2.GetOffsetComponent = new_instancemethod(_itkScalableAffineTransformPython.itkScalableAffineTransformD2_GetOffsetComponent,None,itkScalableAffineTransformD2)
itkScalableAffineTransformD2.GetInverse = new_instancemethod(_itkScalableAffineTransformPython.itkScalableAffineTransformD2_GetInverse,None,itkScalableAffineTransformD2)
itkScalableAffineTransformD2.GetPointer = new_instancemethod(_itkScalableAffineTransformPython.itkScalableAffineTransformD2_GetPointer,None,itkScalableAffineTransformD2)
itkScalableAffineTransformD2_swigregister = _itkScalableAffineTransformPython.itkScalableAffineTransformD2_swigregister
itkScalableAffineTransformD2_swigregister(itkScalableAffineTransformD2)

def itkScalableAffineTransformD2___New_orig__():
  """itkScalableAffineTransformD2___New_orig__()"""
  return _itkScalableAffineTransformPython.itkScalableAffineTransformD2___New_orig__()

def itkScalableAffineTransformD2_cast(*args):
  """itkScalableAffineTransformD2_cast(itkLightObject obj) -> itkScalableAffineTransformD2"""
  return _itkScalableAffineTransformPython.itkScalableAffineTransformD2_cast(*args)

class itkScalableAffineTransformD3(itkAffineTransformPython.itkAffineTransformD3):
    """Proxy of C++ itkScalableAffineTransformD3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputSpaceDimension = _itkScalableAffineTransformPython.itkScalableAffineTransformD3_InputSpaceDimension
    OutputSpaceDimension = _itkScalableAffineTransformPython.itkScalableAffineTransformD3_OutputSpaceDimension
    SpaceDimension = _itkScalableAffineTransformPython.itkScalableAffineTransformD3_SpaceDimension
    ParametersDimension = _itkScalableAffineTransformPython.itkScalableAffineTransformD3_ParametersDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkScalableAffineTransformPython.itkScalableAffineTransformD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetScale(self, *args):
        """
        SetScale(self, itkVectorD3 scale)
        SetScale(self, double scale)
        """
        return _itkScalableAffineTransformPython.itkScalableAffineTransformD3_SetScale(self, *args)

    def SetScaleComponent(self, *args):
        """
        SetScaleComponent(self, itkVectorD3 scale)
        SetScaleComponent(self, double scale)
        """
        return _itkScalableAffineTransformPython.itkScalableAffineTransformD3_SetScaleComponent(self, *args)

    def GetScale(self):
        """GetScale(self) -> double"""
        return _itkScalableAffineTransformPython.itkScalableAffineTransformD3_GetScale(self)

    def GetScaleComponent(self):
        """GetScaleComponent(self) -> double"""
        return _itkScalableAffineTransformPython.itkScalableAffineTransformD3_GetScaleComponent(self)

    def SetMatrixComponent(self, *args):
        """SetMatrixComponent(self, itkMatrixD33 matrix)"""
        return _itkScalableAffineTransformPython.itkScalableAffineTransformD3_SetMatrixComponent(self, *args)

    def GetMatrixComponent(self):
        """GetMatrixComponent(self) -> itkMatrixD33"""
        return _itkScalableAffineTransformPython.itkScalableAffineTransformD3_GetMatrixComponent(self)

    def SetOffsetComponent(self, *args):
        """SetOffsetComponent(self, itkVectorD3 offset)"""
        return _itkScalableAffineTransformPython.itkScalableAffineTransformD3_SetOffsetComponent(self, *args)

    def GetOffsetComponent(self):
        """GetOffsetComponent(self) -> itkVectorD3"""
        return _itkScalableAffineTransformPython.itkScalableAffineTransformD3_GetOffsetComponent(self)

    def GetInverse(self, *args):
        """GetInverse(self, itkScalableAffineTransformD3 inverse) -> bool"""
        return _itkScalableAffineTransformPython.itkScalableAffineTransformD3_GetInverse(self, *args)

    __swig_destroy__ = _itkScalableAffineTransformPython.delete_itkScalableAffineTransformD3
    def cast(*args):
        """cast(itkLightObject obj) -> itkScalableAffineTransformD3"""
        return _itkScalableAffineTransformPython.itkScalableAffineTransformD3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkScalableAffineTransformD3"""
        return _itkScalableAffineTransformPython.itkScalableAffineTransformD3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkScalableAffineTransformD3
        
        Create a new object of the class itkScalableAffineTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkScalableAffineTransformD3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkScalableAffineTransformD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScalableAffineTransformD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScalableAffineTransformD3.SetScale = new_instancemethod(_itkScalableAffineTransformPython.itkScalableAffineTransformD3_SetScale,None,itkScalableAffineTransformD3)
itkScalableAffineTransformD3.SetScaleComponent = new_instancemethod(_itkScalableAffineTransformPython.itkScalableAffineTransformD3_SetScaleComponent,None,itkScalableAffineTransformD3)
itkScalableAffineTransformD3.GetScale = new_instancemethod(_itkScalableAffineTransformPython.itkScalableAffineTransformD3_GetScale,None,itkScalableAffineTransformD3)
itkScalableAffineTransformD3.GetScaleComponent = new_instancemethod(_itkScalableAffineTransformPython.itkScalableAffineTransformD3_GetScaleComponent,None,itkScalableAffineTransformD3)
itkScalableAffineTransformD3.SetMatrixComponent = new_instancemethod(_itkScalableAffineTransformPython.itkScalableAffineTransformD3_SetMatrixComponent,None,itkScalableAffineTransformD3)
itkScalableAffineTransformD3.GetMatrixComponent = new_instancemethod(_itkScalableAffineTransformPython.itkScalableAffineTransformD3_GetMatrixComponent,None,itkScalableAffineTransformD3)
itkScalableAffineTransformD3.SetOffsetComponent = new_instancemethod(_itkScalableAffineTransformPython.itkScalableAffineTransformD3_SetOffsetComponent,None,itkScalableAffineTransformD3)
itkScalableAffineTransformD3.GetOffsetComponent = new_instancemethod(_itkScalableAffineTransformPython.itkScalableAffineTransformD3_GetOffsetComponent,None,itkScalableAffineTransformD3)
itkScalableAffineTransformD3.GetInverse = new_instancemethod(_itkScalableAffineTransformPython.itkScalableAffineTransformD3_GetInverse,None,itkScalableAffineTransformD3)
itkScalableAffineTransformD3.GetPointer = new_instancemethod(_itkScalableAffineTransformPython.itkScalableAffineTransformD3_GetPointer,None,itkScalableAffineTransformD3)
itkScalableAffineTransformD3_swigregister = _itkScalableAffineTransformPython.itkScalableAffineTransformD3_swigregister
itkScalableAffineTransformD3_swigregister(itkScalableAffineTransformD3)

def itkScalableAffineTransformD3___New_orig__():
  """itkScalableAffineTransformD3___New_orig__()"""
  return _itkScalableAffineTransformPython.itkScalableAffineTransformD3___New_orig__()

def itkScalableAffineTransformD3_cast(*args):
  """itkScalableAffineTransformD3_cast(itkLightObject obj) -> itkScalableAffineTransformD3"""
  return _itkScalableAffineTransformPython.itkScalableAffineTransformD3_cast(*args)



