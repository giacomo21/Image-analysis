// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module vnl_matrix_fixedChicken
#endif
#ifdef SWIGCSHARP
%module vnl_matrix_fixedCsharp
#endif
#ifdef SWIGGUILE
%module vnl_matrix_fixedGuile
#endif
#ifdef SWIGJAVA
%module vnl_matrix_fixedJava
#endif
#ifdef SWIGLUA
%module vnl_matrix_fixedLua
#endif
#ifdef SWIGMODULA3
%module vnl_matrix_fixedModula3
#endif
#ifdef SWIGMZSCHEME
%module vnl_matrix_fixedMzscheme
#endif
#ifdef SWIGOCAML
%module vnl_matrix_fixedOcaml
#endif
#ifdef SWIGPERL
%module vnl_matrix_fixedPerl
#endif
#ifdef SWIGPERL5
%module vnl_matrix_fixedPerl5
#endif
#ifdef SWIGPHP
%module vnl_matrix_fixedPhp
#endif
#ifdef SWIGPHP4
%module vnl_matrix_fixedPhp4
#endif
#ifdef SWIGPHP5
%module vnl_matrix_fixedPhp5
#endif
#ifdef SWIGPIKE
%module vnl_matrix_fixedPike
#endif
#ifdef SWIGPYTHON
%module vnl_matrix_fixedPython
#endif
#ifdef SWIGR
%module vnl_matrix_fixedR
#endif
#ifdef SWIGRUBY
%module vnl_matrix_fixedRuby
#endif
#ifdef SWIGSEXP
%module vnl_matrix_fixedSexp
#endif
#ifdef SWIGTCL
%module vnl_matrix_fixedTcl
#endif
#ifdef SWIGXML
%module vnl_matrix_fixedXml
#endif

%{
#include "VXLNumerics.includes"
%}


%{
%}




%import wrap_vnl_vector.i
%import wrap_vnl_matrix.i


%include itk.i
%include wrap_vnl_matrix_fixed_ext.i


 class vnl_matrix_fixedD_2_2 {
   public:
     vnl_matrix_fixedD_2_2();
     vnl_matrix_fixedD_2_2(double value);
     vnl_matrix_fixedD_2_2(double const * datablck);
     vnl_matrix_fixedD_2_2(vnl_matrix_fixedD_2_2 const & rhs);
     vnl_matrix_fixedD_2_2(vnl_matrixD const & rhs);
     ~vnl_matrix_fixedD_2_2();
     vnl_matrix_fixedD_2_2 & operator=(double const & v);
     vnl_matrix_fixedD_2_2 & operator=(vnl_matrixD const & rhs);
     vnl_matrix_fixedD_2_2 & operator=(vnl_matrix_fixedD_2_2 const & rhs);
     unsigned int rows() const;
     unsigned int columns() const;
     unsigned int cols() const;
     unsigned int size() const;
     void put(unsigned int r, unsigned int c, double const & v);
     double get(unsigned int r, unsigned int c) const;
     double * operator[](unsigned int r);
     double const * operator[](unsigned int r) const;
     double & operator()(unsigned int r, unsigned int c);
     double const & operator()(unsigned int r, unsigned int c) const;
     void fill(double value);
     void fill_diagonal(double value);
     void copy_in(double const * p);
     void set(double const * d);
     void copy_out(double * p) const;
     void inplace_transpose();
     vnl_matrix_fixedD_2_2 & operator+=(double s);
     vnl_matrix_fixedD_2_2 & operator-=(double s);
     vnl_matrix_fixedD_2_2 & operator*=(double s);
     vnl_matrix_fixedD_2_2 & operator/=(double s);
     vnl_matrix_fixedD_2_2 & operator+=(vnl_matrix_fixedD_2_2 const & m);
     vnl_matrix_fixedD_2_2 & operator+=(vnl_matrixD const & m);
     vnl_matrix_fixedD_2_2 & operator-=(vnl_matrix_fixedD_2_2 const & m);
     vnl_matrix_fixedD_2_2 & operator-=(vnl_matrixD const & m);
     vnl_matrix_fixedD_2_2 operator-() const;
     vnl_matrix_fixedD_2_2 & operator*=(vnl_matrix_fixedD_2_2 const & s);
     vnl_matrix_fixedD_2_2 transpose() const;
     vnl_matrix_fixedD_2_2 conjugate_transpose() const;
     vnl_matrix_fixedD_2_2 & update(vnl_matrixD const & m, unsigned int top = 0, unsigned int left = 0);
     void set_column(unsigned int column_index, double const * v);
     void set_column(unsigned int column_index, double v);
     void set_column(unsigned int column_index, vnl_vectorD const & v);
     void set_columns(unsigned int starting_column, vnl_matrixD const & m);
     void set_row(unsigned int row_index, double const * v);
     void set_row(unsigned int row_index, double v);
     void set_row(unsigned int row_index, vnl_vectorD const & v);
     vnl_matrixD extract(unsigned int rowz, unsigned int colz, unsigned int top = 0, unsigned int left = 0) const;
     vnl_vectorD get_row(unsigned int row_index) const;
     vnl_vectorD get_column(unsigned int column_index) const;
     vnl_matrixD get_n_rows(unsigned int row, unsigned int n) const;
     vnl_matrixD get_n_columns(unsigned int column, unsigned int n) const;
     void set_identity();
     void flipud();
     void fliplr();
     void normalize_rows();
     void normalize_columns();
     void scale_row(unsigned int row_index, double value);
     void scale_column(unsigned int column_index, double value);
     double array_one_norm() const;
     double array_two_norm() const;
     double array_inf_norm() const;
     double absolute_value_sum() const;
     double absolute_value_max() const;
     double operator_one_norm() const;
     double operator_inf_norm() const;
     double frobenius_norm() const;
     double fro_norm() const;
     double rms() const;
     double min_value() const;
     double max_value() const;
     double mean() const;
     bool empty() const;
     bool is_identity() const;
     bool is_identity(double tol) const;
     bool is_zero() const;
     bool is_zero(double tol) const;
     bool is_finite() const;
     bool has_nans() const;
     void assert_size(unsigned int nr_rows, unsigned int nr_cols) const;
     void assert_finite() const;
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     double const * data_block() const;
     double * data_block();
     vnl_matrixD const as_matrix() const;
     double * begin();
     double * end();
     double const * begin() const;
     double const * end() const;
     bool operator_eq(vnl_matrix_fixedD_2_2 const & rhs) const;
     bool operator==(vnl_matrixD const & that) const;
     bool operator!=(vnl_matrixD const & that) const;
     void print(std::basic_ostream< char, std::char_traits< char > > & os) const;
     static void add(double const * a, double const * b, double * r);
     static void add(double const * a, double b, double * r);
     static void sub(double const * a, double const * b, double * r);
     static void sub(double const * a, double b, double * r);
     static void sub(double a, double const * b, double * r);
     static void mul(double const * a, double const * b, double * r);
     static void mul(double const * a, double b, double * r);
     static void div(double const * a, double const * b, double * r);
     static void div(double const * a, double b, double * r);
     static bool equal(double const * a, double const * b);
   private:
     void assert_finite_internal() const;
     void assert_size_internal(unsigned int rs, unsigned int cs) const;
   protected:
 };


 class vnl_matrix_fixedD_2_3 {
   public:
     vnl_matrix_fixedD_2_3();
     vnl_matrix_fixedD_2_3(double value);
     vnl_matrix_fixedD_2_3(double const * datablck);
     vnl_matrix_fixedD_2_3(vnl_matrix_fixedD_2_3 const & rhs);
     vnl_matrix_fixedD_2_3(vnl_matrixD const & rhs);
     ~vnl_matrix_fixedD_2_3();
     vnl_matrix_fixedD_2_3 & operator=(double const & v);
     vnl_matrix_fixedD_2_3 & operator=(vnl_matrixD const & rhs);
     vnl_matrix_fixedD_2_3 & operator=(vnl_matrix_fixedD_2_3 const & rhs);
     unsigned int rows() const;
     unsigned int columns() const;
     unsigned int cols() const;
     unsigned int size() const;
     void put(unsigned int r, unsigned int c, double const & v);
     double get(unsigned int r, unsigned int c) const;
     double * operator[](unsigned int r);
     double const * operator[](unsigned int r) const;
     double & operator()(unsigned int r, unsigned int c);
     double const & operator()(unsigned int r, unsigned int c) const;
     void fill(double value);
     void fill_diagonal(double value);
     void copy_in(double const * p);
     void set(double const * d);
     void copy_out(double * p) const;
     void inplace_transpose();
     vnl_matrix_fixedD_2_3 & operator+=(double s);
     vnl_matrix_fixedD_2_3 & operator-=(double s);
     vnl_matrix_fixedD_2_3 & operator*=(double s);
     vnl_matrix_fixedD_2_3 & operator/=(double s);
     vnl_matrix_fixedD_2_3 & operator+=(vnl_matrix_fixedD_2_3 const & m);
     vnl_matrix_fixedD_2_3 & operator+=(vnl_matrixD const & m);
     vnl_matrix_fixedD_2_3 & operator-=(vnl_matrix_fixedD_2_3 const & m);
     vnl_matrix_fixedD_2_3 & operator-=(vnl_matrixD const & m);
     vnl_matrix_fixedD_2_3 operator-() const;
     vnl_matrix_fixedD_2_3 & operator*=(vnl_matrix_fixedD_3_3 const & s);
     vnl_matrix_fixed< double, 3u, 2u > transpose() const;
     vnl_matrix_fixed< double, 3u, 2u > conjugate_transpose() const;
     vnl_matrix_fixedD_2_3 & update(vnl_matrixD const & m, unsigned int top = 0, unsigned int left = 0);
     void set_column(unsigned int column_index, double const * v);
     void set_column(unsigned int column_index, double v);
     void set_column(unsigned int column_index, vnl_vectorD const & v);
     void set_columns(unsigned int starting_column, vnl_matrixD const & m);
     void set_row(unsigned int row_index, double const * v);
     void set_row(unsigned int row_index, double v);
     void set_row(unsigned int row_index, vnl_vectorD const & v);
     vnl_matrixD extract(unsigned int rowz, unsigned int colz, unsigned int top = 0, unsigned int left = 0) const;
     vnl_vectorD get_row(unsigned int row_index) const;
     vnl_vectorD get_column(unsigned int column_index) const;
     vnl_matrixD get_n_rows(unsigned int row, unsigned int n) const;
     vnl_matrixD get_n_columns(unsigned int column, unsigned int n) const;
     void set_identity();
     void flipud();
     void fliplr();
     void normalize_rows();
     void normalize_columns();
     void scale_row(unsigned int row_index, double value);
     void scale_column(unsigned int column_index, double value);
     double array_one_norm() const;
     double array_two_norm() const;
     double array_inf_norm() const;
     double absolute_value_sum() const;
     double absolute_value_max() const;
     double operator_one_norm() const;
     double operator_inf_norm() const;
     double frobenius_norm() const;
     double fro_norm() const;
     double rms() const;
     double min_value() const;
     double max_value() const;
     double mean() const;
     bool empty() const;
     bool is_identity() const;
     bool is_identity(double tol) const;
     bool is_zero() const;
     bool is_zero(double tol) const;
     bool is_finite() const;
     bool has_nans() const;
     void assert_size(unsigned int nr_rows, unsigned int nr_cols) const;
     void assert_finite() const;
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     double const * data_block() const;
     double * data_block();
     vnl_matrixD const as_matrix() const;
     double * begin();
     double * end();
     double const * begin() const;
     double const * end() const;
     bool operator_eq(vnl_matrix_fixedD_2_3 const & rhs) const;
     bool operator==(vnl_matrixD const & that) const;
     bool operator!=(vnl_matrixD const & that) const;
     void print(std::basic_ostream< char, std::char_traits< char > > & os) const;
     static void add(double const * a, double const * b, double * r);
     static void add(double const * a, double b, double * r);
     static void sub(double const * a, double const * b, double * r);
     static void sub(double const * a, double b, double * r);
     static void sub(double a, double const * b, double * r);
     static void mul(double const * a, double const * b, double * r);
     static void mul(double const * a, double b, double * r);
     static void div(double const * a, double const * b, double * r);
     static void div(double const * a, double b, double * r);
     static bool equal(double const * a, double const * b);
   private:
     void assert_finite_internal() const;
     void assert_size_internal(unsigned int rs, unsigned int cs) const;
   protected:
 };


 class vnl_matrix_fixedD_2_6 {
   public:
     vnl_matrix_fixedD_2_6();
     vnl_matrix_fixedD_2_6(double value);
     vnl_matrix_fixedD_2_6(double const * datablck);
     vnl_matrix_fixedD_2_6(vnl_matrix_fixedD_2_6 const & rhs);
     vnl_matrix_fixedD_2_6(vnl_matrixD const & rhs);
     ~vnl_matrix_fixedD_2_6();
     vnl_matrix_fixedD_2_6 & operator=(double const & v);
     vnl_matrix_fixedD_2_6 & operator=(vnl_matrixD const & rhs);
     vnl_matrix_fixedD_2_6 & operator=(vnl_matrix_fixedD_2_6 const & rhs);
     unsigned int rows() const;
     unsigned int columns() const;
     unsigned int cols() const;
     unsigned int size() const;
     void put(unsigned int r, unsigned int c, double const & v);
     double get(unsigned int r, unsigned int c) const;
     double * operator[](unsigned int r);
     double const * operator[](unsigned int r) const;
     double & operator()(unsigned int r, unsigned int c);
     double const & operator()(unsigned int r, unsigned int c) const;
     void fill(double value);
     void fill_diagonal(double value);
     void copy_in(double const * p);
     void set(double const * d);
     void copy_out(double * p) const;
     void inplace_transpose();
     vnl_matrix_fixedD_2_6 & operator+=(double s);
     vnl_matrix_fixedD_2_6 & operator-=(double s);
     vnl_matrix_fixedD_2_6 & operator*=(double s);
     vnl_matrix_fixedD_2_6 & operator/=(double s);
     vnl_matrix_fixedD_2_6 & operator+=(vnl_matrix_fixedD_2_6 const & m);
     vnl_matrix_fixedD_2_6 & operator+=(vnl_matrixD const & m);
     vnl_matrix_fixedD_2_6 & operator-=(vnl_matrix_fixedD_2_6 const & m);
     vnl_matrix_fixedD_2_6 & operator-=(vnl_matrixD const & m);
     vnl_matrix_fixedD_2_6 operator-() const;
     vnl_matrix_fixedD_2_6 & operator*=(vnl_matrix_fixed< double, 6u, 6u > const & s);
     vnl_matrix_fixed< double, 6u, 2u > transpose() const;
     vnl_matrix_fixed< double, 6u, 2u > conjugate_transpose() const;
     vnl_matrix_fixedD_2_6 & update(vnl_matrixD const & m, unsigned int top = 0, unsigned int left = 0);
     void set_column(unsigned int column_index, double const * v);
     void set_column(unsigned int column_index, double v);
     void set_column(unsigned int column_index, vnl_vectorD const & v);
     void set_columns(unsigned int starting_column, vnl_matrixD const & m);
     void set_row(unsigned int row_index, double const * v);
     void set_row(unsigned int row_index, double v);
     void set_row(unsigned int row_index, vnl_vectorD const & v);
     vnl_matrixD extract(unsigned int rowz, unsigned int colz, unsigned int top = 0, unsigned int left = 0) const;
     vnl_vectorD get_row(unsigned int row_index) const;
     vnl_vectorD get_column(unsigned int column_index) const;
     vnl_matrixD get_n_rows(unsigned int row, unsigned int n) const;
     vnl_matrixD get_n_columns(unsigned int column, unsigned int n) const;
     void set_identity();
     void flipud();
     void fliplr();
     void normalize_rows();
     void normalize_columns();
     void scale_row(unsigned int row_index, double value);
     void scale_column(unsigned int column_index, double value);
     double array_one_norm() const;
     double array_two_norm() const;
     double array_inf_norm() const;
     double absolute_value_sum() const;
     double absolute_value_max() const;
     double operator_one_norm() const;
     double operator_inf_norm() const;
     double frobenius_norm() const;
     double fro_norm() const;
     double rms() const;
     double min_value() const;
     double max_value() const;
     double mean() const;
     bool empty() const;
     bool is_identity() const;
     bool is_identity(double tol) const;
     bool is_zero() const;
     bool is_zero(double tol) const;
     bool is_finite() const;
     bool has_nans() const;
     void assert_size(unsigned int nr_rows, unsigned int nr_cols) const;
     void assert_finite() const;
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     double const * data_block() const;
     double * data_block();
     vnl_matrixD const as_matrix() const;
     double * begin();
     double * end();
     double const * begin() const;
     double const * end() const;
     bool operator_eq(vnl_matrix_fixedD_2_6 const & rhs) const;
     bool operator==(vnl_matrixD const & that) const;
     bool operator!=(vnl_matrixD const & that) const;
     void print(std::basic_ostream< char, std::char_traits< char > > & os) const;
     static void add(double const * a, double const * b, double * r);
     static void add(double const * a, double b, double * r);
     static void sub(double const * a, double const * b, double * r);
     static void sub(double const * a, double b, double * r);
     static void sub(double a, double const * b, double * r);
     static void mul(double const * a, double const * b, double * r);
     static void mul(double const * a, double b, double * r);
     static void div(double const * a, double const * b, double * r);
     static void div(double const * a, double b, double * r);
     static bool equal(double const * a, double const * b);
   private:
     void assert_finite_internal() const;
     void assert_size_internal(unsigned int rs, unsigned int cs) const;
   protected:
 };


 class vnl_matrix_fixedD_3_12 {
   public:
     vnl_matrix_fixedD_3_12();
     vnl_matrix_fixedD_3_12(double value);
     vnl_matrix_fixedD_3_12(double const * datablck);
     vnl_matrix_fixedD_3_12(vnl_matrix_fixedD_3_12 const & rhs);
     vnl_matrix_fixedD_3_12(vnl_matrixD const & rhs);
     ~vnl_matrix_fixedD_3_12();
     vnl_matrix_fixedD_3_12 & operator=(double const & v);
     vnl_matrix_fixedD_3_12 & operator=(vnl_matrixD const & rhs);
     vnl_matrix_fixedD_3_12 & operator=(vnl_matrix_fixedD_3_12 const & rhs);
     unsigned int rows() const;
     unsigned int columns() const;
     unsigned int cols() const;
     unsigned int size() const;
     void put(unsigned int r, unsigned int c, double const & v);
     double get(unsigned int r, unsigned int c) const;
     double * operator[](unsigned int r);
     double const * operator[](unsigned int r) const;
     double & operator()(unsigned int r, unsigned int c);
     double const & operator()(unsigned int r, unsigned int c) const;
     void fill(double value);
     void fill_diagonal(double value);
     void copy_in(double const * p);
     void set(double const * d);
     void copy_out(double * p) const;
     void inplace_transpose();
     vnl_matrix_fixedD_3_12 & operator+=(double s);
     vnl_matrix_fixedD_3_12 & operator-=(double s);
     vnl_matrix_fixedD_3_12 & operator*=(double s);
     vnl_matrix_fixedD_3_12 & operator/=(double s);
     vnl_matrix_fixedD_3_12 & operator+=(vnl_matrix_fixedD_3_12 const & m);
     vnl_matrix_fixedD_3_12 & operator+=(vnl_matrixD const & m);
     vnl_matrix_fixedD_3_12 & operator-=(vnl_matrix_fixedD_3_12 const & m);
     vnl_matrix_fixedD_3_12 & operator-=(vnl_matrixD const & m);
     vnl_matrix_fixedD_3_12 operator-() const;
     vnl_matrix_fixedD_3_12 & operator*=(vnl_matrix_fixed< double, 12u, 12u > const & s);
     vnl_matrix_fixed< double, 12u, 3u > transpose() const;
     vnl_matrix_fixed< double, 12u, 3u > conjugate_transpose() const;
     vnl_matrix_fixedD_3_12 & update(vnl_matrixD const & m, unsigned int top = 0, unsigned int left = 0);
     void set_column(unsigned int column_index, double const * v);
     void set_column(unsigned int column_index, double v);
     void set_column(unsigned int column_index, vnl_vectorD const & v);
     void set_columns(unsigned int starting_column, vnl_matrixD const & m);
     void set_row(unsigned int row_index, double const * v);
     void set_row(unsigned int row_index, double v);
     void set_row(unsigned int row_index, vnl_vectorD const & v);
     vnl_matrixD extract(unsigned int rowz, unsigned int colz, unsigned int top = 0, unsigned int left = 0) const;
     vnl_vectorD get_row(unsigned int row_index) const;
     vnl_vectorD get_column(unsigned int column_index) const;
     vnl_matrixD get_n_rows(unsigned int row, unsigned int n) const;
     vnl_matrixD get_n_columns(unsigned int column, unsigned int n) const;
     void set_identity();
     void flipud();
     void fliplr();
     void normalize_rows();
     void normalize_columns();
     void scale_row(unsigned int row_index, double value);
     void scale_column(unsigned int column_index, double value);
     double array_one_norm() const;
     double array_two_norm() const;
     double array_inf_norm() const;
     double absolute_value_sum() const;
     double absolute_value_max() const;
     double operator_one_norm() const;
     double operator_inf_norm() const;
     double frobenius_norm() const;
     double fro_norm() const;
     double rms() const;
     double min_value() const;
     double max_value() const;
     double mean() const;
     bool empty() const;
     bool is_identity() const;
     bool is_identity(double tol) const;
     bool is_zero() const;
     bool is_zero(double tol) const;
     bool is_finite() const;
     bool has_nans() const;
     void assert_size(unsigned int nr_rows, unsigned int nr_cols) const;
     void assert_finite() const;
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     double const * data_block() const;
     double * data_block();
     vnl_matrixD const as_matrix() const;
     double * begin();
     double * end();
     double const * begin() const;
     double const * end() const;
     bool operator_eq(vnl_matrix_fixedD_3_12 const & rhs) const;
     bool operator==(vnl_matrixD const & that) const;
     bool operator!=(vnl_matrixD const & that) const;
     void print(std::basic_ostream< char, std::char_traits< char > > & os) const;
     static void add(double const * a, double const * b, double * r);
     static void add(double const * a, double b, double * r);
     static void sub(double const * a, double const * b, double * r);
     static void sub(double const * a, double b, double * r);
     static void sub(double a, double const * b, double * r);
     static void mul(double const * a, double const * b, double * r);
     static void mul(double const * a, double b, double * r);
     static void div(double const * a, double const * b, double * r);
     static void div(double const * a, double b, double * r);
     static bool equal(double const * a, double const * b);
   private:
     void assert_finite_internal() const;
     void assert_size_internal(unsigned int rs, unsigned int cs) const;
   protected:
 };


 class vnl_matrix_fixedD_3_3 {
   public:
     vnl_matrix_fixedD_3_3();
     vnl_matrix_fixedD_3_3(double value);
     vnl_matrix_fixedD_3_3(double const * datablck);
     vnl_matrix_fixedD_3_3(vnl_matrix_fixedD_3_3 const & rhs);
     vnl_matrix_fixedD_3_3(vnl_matrixD const & rhs);
     ~vnl_matrix_fixedD_3_3();
     vnl_matrix_fixedD_3_3 & operator=(double const & v);
     vnl_matrix_fixedD_3_3 & operator=(vnl_matrixD const & rhs);
     vnl_matrix_fixedD_3_3 & operator=(vnl_matrix_fixedD_3_3 const & rhs);
     unsigned int rows() const;
     unsigned int columns() const;
     unsigned int cols() const;
     unsigned int size() const;
     void put(unsigned int r, unsigned int c, double const & v);
     double get(unsigned int r, unsigned int c) const;
     double * operator[](unsigned int r);
     double const * operator[](unsigned int r) const;
     double & operator()(unsigned int r, unsigned int c);
     double const & operator()(unsigned int r, unsigned int c) const;
     void fill(double value);
     void fill_diagonal(double value);
     void copy_in(double const * p);
     void set(double const * d);
     void copy_out(double * p) const;
     void inplace_transpose();
     vnl_matrix_fixedD_3_3 & operator+=(double s);
     vnl_matrix_fixedD_3_3 & operator-=(double s);
     vnl_matrix_fixedD_3_3 & operator*=(double s);
     vnl_matrix_fixedD_3_3 & operator/=(double s);
     vnl_matrix_fixedD_3_3 & operator+=(vnl_matrix_fixedD_3_3 const & m);
     vnl_matrix_fixedD_3_3 & operator+=(vnl_matrixD const & m);
     vnl_matrix_fixedD_3_3 & operator-=(vnl_matrix_fixedD_3_3 const & m);
     vnl_matrix_fixedD_3_3 & operator-=(vnl_matrixD const & m);
     vnl_matrix_fixedD_3_3 operator-() const;
     vnl_matrix_fixedD_3_3 & operator*=(vnl_matrix_fixedD_3_3 const & s);
     vnl_matrix_fixedD_3_3 transpose() const;
     vnl_matrix_fixedD_3_3 conjugate_transpose() const;
     vnl_matrix_fixedD_3_3 & update(vnl_matrixD const & m, unsigned int top = 0, unsigned int left = 0);
     void set_column(unsigned int column_index, double const * v);
     void set_column(unsigned int column_index, double v);
     void set_column(unsigned int column_index, vnl_vectorD const & v);
     void set_columns(unsigned int starting_column, vnl_matrixD const & m);
     void set_row(unsigned int row_index, double const * v);
     void set_row(unsigned int row_index, double v);
     void set_row(unsigned int row_index, vnl_vectorD const & v);
     vnl_matrixD extract(unsigned int rowz, unsigned int colz, unsigned int top = 0, unsigned int left = 0) const;
     vnl_vectorD get_row(unsigned int row_index) const;
     vnl_vectorD get_column(unsigned int column_index) const;
     vnl_matrixD get_n_rows(unsigned int row, unsigned int n) const;
     vnl_matrixD get_n_columns(unsigned int column, unsigned int n) const;
     void set_identity();
     void flipud();
     void fliplr();
     void normalize_rows();
     void normalize_columns();
     void scale_row(unsigned int row_index, double value);
     void scale_column(unsigned int column_index, double value);
     double array_one_norm() const;
     double array_two_norm() const;
     double array_inf_norm() const;
     double absolute_value_sum() const;
     double absolute_value_max() const;
     double operator_one_norm() const;
     double operator_inf_norm() const;
     double frobenius_norm() const;
     double fro_norm() const;
     double rms() const;
     double min_value() const;
     double max_value() const;
     double mean() const;
     bool empty() const;
     bool is_identity() const;
     bool is_identity(double tol) const;
     bool is_zero() const;
     bool is_zero(double tol) const;
     bool is_finite() const;
     bool has_nans() const;
     void assert_size(unsigned int nr_rows, unsigned int nr_cols) const;
     void assert_finite() const;
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     double const * data_block() const;
     double * data_block();
     vnl_matrixD const as_matrix() const;
     double * begin();
     double * end();
     double const * begin() const;
     double const * end() const;
     bool operator_eq(vnl_matrix_fixedD_3_3 const & rhs) const;
     bool operator==(vnl_matrixD const & that) const;
     bool operator!=(vnl_matrixD const & that) const;
     void print(std::basic_ostream< char, std::char_traits< char > > & os) const;
     static void add(double const * a, double const * b, double * r);
     static void add(double const * a, double b, double * r);
     static void sub(double const * a, double const * b, double * r);
     static void sub(double const * a, double b, double * r);
     static void sub(double a, double const * b, double * r);
     static void mul(double const * a, double const * b, double * r);
     static void mul(double const * a, double b, double * r);
     static void div(double const * a, double const * b, double * r);
     static void div(double const * a, double b, double * r);
     static bool equal(double const * a, double const * b);
   private:
     void assert_finite_internal() const;
     void assert_size_internal(unsigned int rs, unsigned int cs) const;
   protected:
 };


 class vnl_matrix_fixedD_3_4 {
   public:
     vnl_matrix_fixedD_3_4();
     vnl_matrix_fixedD_3_4(double value);
     vnl_matrix_fixedD_3_4(double const * datablck);
     vnl_matrix_fixedD_3_4(vnl_matrix_fixedD_3_4 const & rhs);
     vnl_matrix_fixedD_3_4(vnl_matrixD const & rhs);
     ~vnl_matrix_fixedD_3_4();
     vnl_matrix_fixedD_3_4 & operator=(double const & v);
     vnl_matrix_fixedD_3_4 & operator=(vnl_matrixD const & rhs);
     vnl_matrix_fixedD_3_4 & operator=(vnl_matrix_fixedD_3_4 const & rhs);
     unsigned int rows() const;
     unsigned int columns() const;
     unsigned int cols() const;
     unsigned int size() const;
     void put(unsigned int r, unsigned int c, double const & v);
     double get(unsigned int r, unsigned int c) const;
     double * operator[](unsigned int r);
     double const * operator[](unsigned int r) const;
     double & operator()(unsigned int r, unsigned int c);
     double const & operator()(unsigned int r, unsigned int c) const;
     void fill(double value);
     void fill_diagonal(double value);
     void copy_in(double const * p);
     void set(double const * d);
     void copy_out(double * p) const;
     void inplace_transpose();
     vnl_matrix_fixedD_3_4 & operator+=(double s);
     vnl_matrix_fixedD_3_4 & operator-=(double s);
     vnl_matrix_fixedD_3_4 & operator*=(double s);
     vnl_matrix_fixedD_3_4 & operator/=(double s);
     vnl_matrix_fixedD_3_4 & operator+=(vnl_matrix_fixedD_3_4 const & m);
     vnl_matrix_fixedD_3_4 & operator+=(vnl_matrixD const & m);
     vnl_matrix_fixedD_3_4 & operator-=(vnl_matrix_fixedD_3_4 const & m);
     vnl_matrix_fixedD_3_4 & operator-=(vnl_matrixD const & m);
     vnl_matrix_fixedD_3_4 operator-() const;
     vnl_matrix_fixedD_3_4 & operator*=(vnl_matrix_fixedD_4_4 const & s);
     vnl_matrix_fixedD_4_3 transpose() const;
     vnl_matrix_fixedD_4_3 conjugate_transpose() const;
     vnl_matrix_fixedD_3_4 & update(vnl_matrixD const & m, unsigned int top = 0, unsigned int left = 0);
     void set_column(unsigned int column_index, double const * v);
     void set_column(unsigned int column_index, double v);
     void set_column(unsigned int column_index, vnl_vectorD const & v);
     void set_columns(unsigned int starting_column, vnl_matrixD const & m);
     void set_row(unsigned int row_index, double const * v);
     void set_row(unsigned int row_index, double v);
     void set_row(unsigned int row_index, vnl_vectorD const & v);
     vnl_matrixD extract(unsigned int rowz, unsigned int colz, unsigned int top = 0, unsigned int left = 0) const;
     vnl_vectorD get_row(unsigned int row_index) const;
     vnl_vectorD get_column(unsigned int column_index) const;
     vnl_matrixD get_n_rows(unsigned int row, unsigned int n) const;
     vnl_matrixD get_n_columns(unsigned int column, unsigned int n) const;
     void set_identity();
     void flipud();
     void fliplr();
     void normalize_rows();
     void normalize_columns();
     void scale_row(unsigned int row_index, double value);
     void scale_column(unsigned int column_index, double value);
     double array_one_norm() const;
     double array_two_norm() const;
     double array_inf_norm() const;
     double absolute_value_sum() const;
     double absolute_value_max() const;
     double operator_one_norm() const;
     double operator_inf_norm() const;
     double frobenius_norm() const;
     double fro_norm() const;
     double rms() const;
     double min_value() const;
     double max_value() const;
     double mean() const;
     bool empty() const;
     bool is_identity() const;
     bool is_identity(double tol) const;
     bool is_zero() const;
     bool is_zero(double tol) const;
     bool is_finite() const;
     bool has_nans() const;
     void assert_size(unsigned int nr_rows, unsigned int nr_cols) const;
     void assert_finite() const;
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     double const * data_block() const;
     double * data_block();
     vnl_matrixD const as_matrix() const;
     double * begin();
     double * end();
     double const * begin() const;
     double const * end() const;
     bool operator_eq(vnl_matrix_fixedD_3_4 const & rhs) const;
     bool operator==(vnl_matrixD const & that) const;
     bool operator!=(vnl_matrixD const & that) const;
     void print(std::basic_ostream< char, std::char_traits< char > > & os) const;
     static void add(double const * a, double const * b, double * r);
     static void add(double const * a, double b, double * r);
     static void sub(double const * a, double const * b, double * r);
     static void sub(double const * a, double b, double * r);
     static void sub(double a, double const * b, double * r);
     static void mul(double const * a, double const * b, double * r);
     static void mul(double const * a, double b, double * r);
     static void div(double const * a, double const * b, double * r);
     static void div(double const * a, double b, double * r);
     static bool equal(double const * a, double const * b);
   private:
     void assert_finite_internal() const;
     void assert_size_internal(unsigned int rs, unsigned int cs) const;
   protected:
 };


 class vnl_matrix_fixedD_4_3 {
   public:
     vnl_matrix_fixedD_4_3();
     vnl_matrix_fixedD_4_3(double value);
     vnl_matrix_fixedD_4_3(double const * datablck);
     vnl_matrix_fixedD_4_3(vnl_matrix_fixedD_4_3 const & rhs);
     vnl_matrix_fixedD_4_3(vnl_matrixD const & rhs);
     ~vnl_matrix_fixedD_4_3();
     vnl_matrix_fixedD_4_3 & operator=(double const & v);
     vnl_matrix_fixedD_4_3 & operator=(vnl_matrixD const & rhs);
     vnl_matrix_fixedD_4_3 & operator=(vnl_matrix_fixedD_4_3 const & rhs);
     unsigned int rows() const;
     unsigned int columns() const;
     unsigned int cols() const;
     unsigned int size() const;
     void put(unsigned int r, unsigned int c, double const & v);
     double get(unsigned int r, unsigned int c) const;
     double * operator[](unsigned int r);
     double const * operator[](unsigned int r) const;
     double & operator()(unsigned int r, unsigned int c);
     double const & operator()(unsigned int r, unsigned int c) const;
     void fill(double value);
     void fill_diagonal(double value);
     void copy_in(double const * p);
     void set(double const * d);
     void copy_out(double * p) const;
     void inplace_transpose();
     vnl_matrix_fixedD_4_3 & operator+=(double s);
     vnl_matrix_fixedD_4_3 & operator-=(double s);
     vnl_matrix_fixedD_4_3 & operator*=(double s);
     vnl_matrix_fixedD_4_3 & operator/=(double s);
     vnl_matrix_fixedD_4_3 & operator+=(vnl_matrix_fixedD_4_3 const & m);
     vnl_matrix_fixedD_4_3 & operator+=(vnl_matrixD const & m);
     vnl_matrix_fixedD_4_3 & operator-=(vnl_matrix_fixedD_4_3 const & m);
     vnl_matrix_fixedD_4_3 & operator-=(vnl_matrixD const & m);
     vnl_matrix_fixedD_4_3 operator-() const;
     vnl_matrix_fixedD_4_3 & operator*=(vnl_matrix_fixedD_3_3 const & s);
     vnl_matrix_fixedD_3_4 transpose() const;
     vnl_matrix_fixedD_3_4 conjugate_transpose() const;
     vnl_matrix_fixedD_4_3 & update(vnl_matrixD const & m, unsigned int top = 0, unsigned int left = 0);
     void set_column(unsigned int column_index, double const * v);
     void set_column(unsigned int column_index, double v);
     void set_column(unsigned int column_index, vnl_vectorD const & v);
     void set_columns(unsigned int starting_column, vnl_matrixD const & m);
     void set_row(unsigned int row_index, double const * v);
     void set_row(unsigned int row_index, double v);
     void set_row(unsigned int row_index, vnl_vectorD const & v);
     vnl_matrixD extract(unsigned int rowz, unsigned int colz, unsigned int top = 0, unsigned int left = 0) const;
     vnl_vectorD get_row(unsigned int row_index) const;
     vnl_vectorD get_column(unsigned int column_index) const;
     vnl_matrixD get_n_rows(unsigned int row, unsigned int n) const;
     vnl_matrixD get_n_columns(unsigned int column, unsigned int n) const;
     void set_identity();
     void flipud();
     void fliplr();
     void normalize_rows();
     void normalize_columns();
     void scale_row(unsigned int row_index, double value);
     void scale_column(unsigned int column_index, double value);
     double array_one_norm() const;
     double array_two_norm() const;
     double array_inf_norm() const;
     double absolute_value_sum() const;
     double absolute_value_max() const;
     double operator_one_norm() const;
     double operator_inf_norm() const;
     double frobenius_norm() const;
     double fro_norm() const;
     double rms() const;
     double min_value() const;
     double max_value() const;
     double mean() const;
     bool empty() const;
     bool is_identity() const;
     bool is_identity(double tol) const;
     bool is_zero() const;
     bool is_zero(double tol) const;
     bool is_finite() const;
     bool has_nans() const;
     void assert_size(unsigned int nr_rows, unsigned int nr_cols) const;
     void assert_finite() const;
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     double const * data_block() const;
     double * data_block();
     vnl_matrixD const as_matrix() const;
     double * begin();
     double * end();
     double const * begin() const;
     double const * end() const;
     bool operator_eq(vnl_matrix_fixedD_4_3 const & rhs) const;
     bool operator==(vnl_matrixD const & that) const;
     bool operator!=(vnl_matrixD const & that) const;
     void print(std::basic_ostream< char, std::char_traits< char > > & os) const;
     static void add(double const * a, double const * b, double * r);
     static void add(double const * a, double b, double * r);
     static void sub(double const * a, double const * b, double * r);
     static void sub(double const * a, double b, double * r);
     static void sub(double a, double const * b, double * r);
     static void mul(double const * a, double const * b, double * r);
     static void mul(double const * a, double b, double * r);
     static void div(double const * a, double const * b, double * r);
     static void div(double const * a, double b, double * r);
     static bool equal(double const * a, double const * b);
   private:
     void assert_finite_internal() const;
     void assert_size_internal(unsigned int rs, unsigned int cs) const;
   protected:
 };


 class vnl_matrix_fixedD_4_4 {
   public:
     vnl_matrix_fixedD_4_4();
     vnl_matrix_fixedD_4_4(double value);
     vnl_matrix_fixedD_4_4(double const * datablck);
     vnl_matrix_fixedD_4_4(vnl_matrix_fixedD_4_4 const & rhs);
     vnl_matrix_fixedD_4_4(vnl_matrixD const & rhs);
     ~vnl_matrix_fixedD_4_4();
     vnl_matrix_fixedD_4_4 & operator=(double const & v);
     vnl_matrix_fixedD_4_4 & operator=(vnl_matrixD const & rhs);
     vnl_matrix_fixedD_4_4 & operator=(vnl_matrix_fixedD_4_4 const & rhs);
     unsigned int rows() const;
     unsigned int columns() const;
     unsigned int cols() const;
     unsigned int size() const;
     void put(unsigned int r, unsigned int c, double const & v);
     double get(unsigned int r, unsigned int c) const;
     double * operator[](unsigned int r);
     double const * operator[](unsigned int r) const;
     double & operator()(unsigned int r, unsigned int c);
     double const & operator()(unsigned int r, unsigned int c) const;
     void fill(double value);
     void fill_diagonal(double value);
     void copy_in(double const * p);
     void set(double const * d);
     void copy_out(double * p) const;
     void inplace_transpose();
     vnl_matrix_fixedD_4_4 & operator+=(double s);
     vnl_matrix_fixedD_4_4 & operator-=(double s);
     vnl_matrix_fixedD_4_4 & operator*=(double s);
     vnl_matrix_fixedD_4_4 & operator/=(double s);
     vnl_matrix_fixedD_4_4 & operator+=(vnl_matrix_fixedD_4_4 const & m);
     vnl_matrix_fixedD_4_4 & operator+=(vnl_matrixD const & m);
     vnl_matrix_fixedD_4_4 & operator-=(vnl_matrix_fixedD_4_4 const & m);
     vnl_matrix_fixedD_4_4 & operator-=(vnl_matrixD const & m);
     vnl_matrix_fixedD_4_4 operator-() const;
     vnl_matrix_fixedD_4_4 & operator*=(vnl_matrix_fixedD_4_4 const & s);
     vnl_matrix_fixedD_4_4 transpose() const;
     vnl_matrix_fixedD_4_4 conjugate_transpose() const;
     vnl_matrix_fixedD_4_4 & update(vnl_matrixD const & m, unsigned int top = 0, unsigned int left = 0);
     void set_column(unsigned int column_index, double const * v);
     void set_column(unsigned int column_index, double v);
     void set_column(unsigned int column_index, vnl_vectorD const & v);
     void set_columns(unsigned int starting_column, vnl_matrixD const & m);
     void set_row(unsigned int row_index, double const * v);
     void set_row(unsigned int row_index, double v);
     void set_row(unsigned int row_index, vnl_vectorD const & v);
     vnl_matrixD extract(unsigned int rowz, unsigned int colz, unsigned int top = 0, unsigned int left = 0) const;
     vnl_vectorD get_row(unsigned int row_index) const;
     vnl_vectorD get_column(unsigned int column_index) const;
     vnl_matrixD get_n_rows(unsigned int row, unsigned int n) const;
     vnl_matrixD get_n_columns(unsigned int column, unsigned int n) const;
     void set_identity();
     void flipud();
     void fliplr();
     void normalize_rows();
     void normalize_columns();
     void scale_row(unsigned int row_index, double value);
     void scale_column(unsigned int column_index, double value);
     double array_one_norm() const;
     double array_two_norm() const;
     double array_inf_norm() const;
     double absolute_value_sum() const;
     double absolute_value_max() const;
     double operator_one_norm() const;
     double operator_inf_norm() const;
     double frobenius_norm() const;
     double fro_norm() const;
     double rms() const;
     double min_value() const;
     double max_value() const;
     double mean() const;
     bool empty() const;
     bool is_identity() const;
     bool is_identity(double tol) const;
     bool is_zero() const;
     bool is_zero(double tol) const;
     bool is_finite() const;
     bool has_nans() const;
     void assert_size(unsigned int nr_rows, unsigned int nr_cols) const;
     void assert_finite() const;
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     double const * data_block() const;
     double * data_block();
     vnl_matrixD const as_matrix() const;
     double * begin();
     double * end();
     double const * begin() const;
     double const * end() const;
     bool operator_eq(vnl_matrix_fixedD_4_4 const & rhs) const;
     bool operator==(vnl_matrixD const & that) const;
     bool operator!=(vnl_matrixD const & that) const;
     void print(std::basic_ostream< char, std::char_traits< char > > & os) const;
     static void add(double const * a, double const * b, double * r);
     static void add(double const * a, double b, double * r);
     static void sub(double const * a, double const * b, double * r);
     static void sub(double const * a, double b, double * r);
     static void sub(double a, double const * b, double * r);
     static void mul(double const * a, double const * b, double * r);
     static void mul(double const * a, double b, double * r);
     static void div(double const * a, double const * b, double * r);
     static void div(double const * a, double b, double * r);
     static bool equal(double const * a, double const * b);
   private:
     void assert_finite_internal() const;
     void assert_size_internal(unsigned int rs, unsigned int cs) const;
   protected:
 };


 class vnl_matrix_fixedF_3_3 {
   public:
     vnl_matrix_fixedF_3_3();
     vnl_matrix_fixedF_3_3(float value);
     vnl_matrix_fixedF_3_3(float const * datablck);
     vnl_matrix_fixedF_3_3(vnl_matrix_fixedF_3_3 const & rhs);
     vnl_matrix_fixedF_3_3(vnl_matrixF const & rhs);
     ~vnl_matrix_fixedF_3_3();
     vnl_matrix_fixedF_3_3 & operator=(float const & v);
     vnl_matrix_fixedF_3_3 & operator=(vnl_matrixF const & rhs);
     vnl_matrix_fixedF_3_3 & operator=(vnl_matrix_fixedF_3_3 const & rhs);
     unsigned int rows() const;
     unsigned int columns() const;
     unsigned int cols() const;
     unsigned int size() const;
     void put(unsigned int r, unsigned int c, float const & v);
     float get(unsigned int r, unsigned int c) const;
     float * operator[](unsigned int r);
     float const * operator[](unsigned int r) const;
     float & operator()(unsigned int r, unsigned int c);
     float const & operator()(unsigned int r, unsigned int c) const;
     void fill(float value);
     void fill_diagonal(float value);
     void copy_in(float const * p);
     void set(float const * d);
     void copy_out(float * p) const;
     void inplace_transpose();
     vnl_matrix_fixedF_3_3 & operator+=(float s);
     vnl_matrix_fixedF_3_3 & operator-=(float s);
     vnl_matrix_fixedF_3_3 & operator*=(float s);
     vnl_matrix_fixedF_3_3 & operator/=(float s);
     vnl_matrix_fixedF_3_3 & operator+=(vnl_matrix_fixedF_3_3 const & m);
     vnl_matrix_fixedF_3_3 & operator+=(vnl_matrixF const & m);
     vnl_matrix_fixedF_3_3 & operator-=(vnl_matrix_fixedF_3_3 const & m);
     vnl_matrix_fixedF_3_3 & operator-=(vnl_matrixF const & m);
     vnl_matrix_fixedF_3_3 operator-() const;
     vnl_matrix_fixedF_3_3 & operator*=(vnl_matrix_fixedF_3_3 const & s);
     vnl_matrix_fixedF_3_3 transpose() const;
     vnl_matrix_fixedF_3_3 conjugate_transpose() const;
     vnl_matrix_fixedF_3_3 & update(vnl_matrixF const & m, unsigned int top = 0, unsigned int left = 0);
     void set_column(unsigned int column_index, float const * v);
     void set_column(unsigned int column_index, float v);
     void set_column(unsigned int column_index, vnl_vectorF const & v);
     void set_columns(unsigned int starting_column, vnl_matrixF const & m);
     void set_row(unsigned int row_index, float const * v);
     void set_row(unsigned int row_index, float v);
     void set_row(unsigned int row_index, vnl_vectorF const & v);
     vnl_matrixF extract(unsigned int rowz, unsigned int colz, unsigned int top = 0, unsigned int left = 0) const;
     vnl_vectorF get_row(unsigned int row_index) const;
     vnl_vectorF get_column(unsigned int column_index) const;
     vnl_matrixF get_n_rows(unsigned int row, unsigned int n) const;
     vnl_matrixF get_n_columns(unsigned int column, unsigned int n) const;
     void set_identity();
     void flipud();
     void fliplr();
     void normalize_rows();
     void normalize_columns();
     void scale_row(unsigned int row_index, float value);
     void scale_column(unsigned int column_index, float value);
     float array_one_norm() const;
     float array_two_norm() const;
     float array_inf_norm() const;
     float absolute_value_sum() const;
     float absolute_value_max() const;
     float operator_one_norm() const;
     float operator_inf_norm() const;
     float frobenius_norm() const;
     float fro_norm() const;
     float rms() const;
     float min_value() const;
     float max_value() const;
     float mean() const;
     bool empty() const;
     bool is_identity() const;
     bool is_identity(double tol) const;
     bool is_zero() const;
     bool is_zero(double tol) const;
     bool is_finite() const;
     bool has_nans() const;
     void assert_size(unsigned int nr_rows, unsigned int nr_cols) const;
     void assert_finite() const;
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     float const * data_block() const;
     float * data_block();
     vnl_matrixF const as_matrix() const;
     float * begin();
     float * end();
     float const * begin() const;
     float const * end() const;
     bool operator_eq(vnl_matrix_fixedF_3_3 const & rhs) const;
     bool operator==(vnl_matrixF const & that) const;
     bool operator!=(vnl_matrixF const & that) const;
     void print(std::basic_ostream< char, std::char_traits< char > > & os) const;
     static void add(float const * a, float const * b, float * r);
     static void add(float const * a, float b, float * r);
     static void sub(float const * a, float const * b, float * r);
     static void sub(float const * a, float b, float * r);
     static void sub(float a, float const * b, float * r);
     static void mul(float const * a, float const * b, float * r);
     static void mul(float const * a, float b, float * r);
     static void div(float const * a, float const * b, float * r);
     static void div(float const * a, float b, float * r);
     static bool equal(float const * a, float const * b);
   private:
     void assert_finite_internal() const;
     void assert_size_internal(unsigned int rs, unsigned int cs) const;
   protected:
 };


