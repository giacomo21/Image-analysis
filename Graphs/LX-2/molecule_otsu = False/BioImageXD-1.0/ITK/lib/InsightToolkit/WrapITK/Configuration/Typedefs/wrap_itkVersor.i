// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkVersorChicken
#endif
#ifdef SWIGCSHARP
%module itkVersorCsharp
#endif
#ifdef SWIGGUILE
%module itkVersorGuile
#endif
#ifdef SWIGJAVA
%module itkVersorJava
#endif
#ifdef SWIGLUA
%module itkVersorLua
#endif
#ifdef SWIGMODULA3
%module itkVersorModula3
#endif
#ifdef SWIGMZSCHEME
%module itkVersorMzscheme
#endif
#ifdef SWIGOCAML
%module itkVersorOcaml
#endif
#ifdef SWIGPERL
%module itkVersorPerl
#endif
#ifdef SWIGPERL5
%module itkVersorPerl5
#endif
#ifdef SWIGPHP
%module itkVersorPhp
#endif
#ifdef SWIGPHP4
%module itkVersorPhp4
#endif
#ifdef SWIGPHP5
%module itkVersorPhp5
#endif
#ifdef SWIGPIKE
%module itkVersorPike
#endif
#ifdef SWIGPYTHON
%module itkVersorPython
#endif
#ifdef SWIGR
%module itkVersorR
#endif
#ifdef SWIGRUBY
%module itkVersorRuby
#endif
#ifdef SWIGSEXP
%module itkVersorSexp
#endif
#ifdef SWIGTCL
%module itkVersorTcl
#endif
#ifdef SWIGXML
%module itkVersorXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
%}


%{
%}




%import wrap_itkCovariantVector.i
%import wrap_itkVector.i
%import wrap_itkPoint.i
%import wrap_itkMatrix.i


%include itk.i
%include wrap_itkVersor_ext.i


 class itkVersorD {
   public:
     ~itkVersorD();
     vnl_quaternion< double > GetVnlQuaternion() const;
     void Set(vnl_quaternion< double > const & arg0);
     void Set(double x, double y, double z, double w);
     itkVersorD();
     itkVersorD(itkVersorD const & v);
     itkVersorD const & operator=(itkVersorD const & v);
     itkVersorD const & operator*=(itkVersorD const & v);
     itkVersorD const & operator/=(itkVersorD const & v);
     double GetTensor() const;
     void Normalize();
     itkVersorD GetConjugate() const;
     itkVersorD GetReciprocal() const;
     itkVersorD operator*(itkVersorD const & vec) const;
     itkVersorD operator/(itkVersorD const & vec) const;
     bool operator==(itkVersorD const & vec) const;
     bool operator!=(itkVersorD const & vec) const;
     double GetScalar() const;
     double GetX() const;
     double GetY() const;
     double GetZ() const;
     double GetW() const;
     double GetAngle() const;
     itkVectorD3 GetAxis() const;
     itkVectorD3 GetRight() const;
     void Set(itkVectorD3 const & axis, double angle);
     void Set(itkMatrixD33 const & m);
     void Set(itkVectorD3 const & axis);
     void SetRotationAroundX(double angle);
     void SetRotationAroundY(double angle);
     void SetRotationAroundZ(double angle);
     void SetIdentity();
     itkVectorD3 Transform(itkVectorD3 const & v) const;
     itkCovariantVectorD3 Transform(itkCovariantVectorD3 const & v) const;
     itkPointD3 Transform(itkPointD3 const & v) const;
     vnl_vector_fixed< double, 3u > Transform(vnl_vector_fixed< double, 3u > const & v) const;
     itkMatrixD33 GetMatrix() const;
     itkVersorD SquareRoot() const;
     itkVersorD Exponential(double exponent) const;
   private:
   protected:
 };


