# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkHistogramPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkHistogramPython', [dirname(__file__)])
        except ImportError:
            import _itkHistogramPython
            return _itkHistogramPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkHistogramPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkHistogramPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkHistogramPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import itkEventObjectsPython
import pyBasePython
import itkSamplePython
import itkFixedArrayPython
import itkVectorPython
import vnl_vectorPython
import vcl_complexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkArrayPython
def itkSimpleDataObjectDecoratorHD_New():
  return itkSimpleDataObjectDecoratorHD.New()

def itkSimpleDataObjectDecoratorHF_New():
  return itkSimpleDataObjectDecoratorHF.New()

def itkHistogramD_New():
  return itkHistogramD.New()

def itkHistogramF_New():
  return itkHistogramF.New()

class itkHistogramD(itkSamplePython.itkSampleAD):
    """Proxy of C++ itkHistogramD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkHistogramPython.itkHistogramD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Initialize(self, *args):
        """
        Initialize(self, itkArrayUL size)
        Initialize(self, itkArrayUL size, itkArrayD lowerBound, itkArrayD upperBound)
        """
        return _itkHistogramPython.itkHistogramD_Initialize(self, *args)

    def SetToZero(self):
        """SetToZero(self)"""
        return _itkHistogramPython.itkHistogramD_SetToZero(self)

    def GetIndex(self, *args):
        """
        GetIndex(self, itkArrayD measurement) -> itkArraySL
        GetIndex(self, itkArrayD measurement, itkArraySL index) -> bool
        GetIndex(self, size_t id) -> itkArraySL
        """
        return _itkHistogramPython.itkHistogramD_GetIndex(self, *args)

    def GetClipBinsAtEnds(self):
        """GetClipBinsAtEnds(self) -> bool"""
        return _itkHistogramPython.itkHistogramD_GetClipBinsAtEnds(self)

    def SetClipBinsAtEnds(self, *args):
        """SetClipBinsAtEnds(self, bool _arg)"""
        return _itkHistogramPython.itkHistogramD_SetClipBinsAtEnds(self, *args)

    def IsIndexOutOfBounds(self, *args):
        """IsIndexOutOfBounds(self, itkArraySL index) -> bool"""
        return _itkHistogramPython.itkHistogramD_IsIndexOutOfBounds(self, *args)

    def GetInstanceIdentifier(self, *args):
        """GetInstanceIdentifier(self, itkArraySL index) -> size_t"""
        return _itkHistogramPython.itkHistogramD_GetInstanceIdentifier(self, *args)

    def GetSize(self, *args):
        """
        GetSize(self) -> itkArrayUL
        GetSize(self, unsigned int dimension) -> unsigned long
        """
        return _itkHistogramPython.itkHistogramD_GetSize(self, *args)

    def GetBinMin(self, *args):
        """GetBinMin(self, unsigned int dimension, size_t nbin) -> double"""
        return _itkHistogramPython.itkHistogramD_GetBinMin(self, *args)

    def GetBinMax(self, *args):
        """GetBinMax(self, unsigned int dimension, size_t nbin) -> double"""
        return _itkHistogramPython.itkHistogramD_GetBinMax(self, *args)

    def SetBinMin(self, *args):
        """SetBinMin(self, unsigned int dimension, size_t nbin, double min)"""
        return _itkHistogramPython.itkHistogramD_SetBinMin(self, *args)

    def SetBinMax(self, *args):
        """SetBinMax(self, unsigned int dimension, size_t nbin, double max)"""
        return _itkHistogramPython.itkHistogramD_SetBinMax(self, *args)

    def GetBinMinFromValue(self, *args):
        """GetBinMinFromValue(self, unsigned int dimension, float value) -> double"""
        return _itkHistogramPython.itkHistogramD_GetBinMinFromValue(self, *args)

    def GetBinMaxFromValue(self, *args):
        """GetBinMaxFromValue(self, unsigned int dimension, float value) -> double"""
        return _itkHistogramPython.itkHistogramD_GetBinMaxFromValue(self, *args)

    def GetDimensionMins(self, *args):
        """GetDimensionMins(self, unsigned int dimension) -> vectorD"""
        return _itkHistogramPython.itkHistogramD_GetDimensionMins(self, *args)

    def GetDimensionMaxs(self, *args):
        """GetDimensionMaxs(self, unsigned int dimension) -> vectorD"""
        return _itkHistogramPython.itkHistogramD_GetDimensionMaxs(self, *args)

    def GetMins(self):
        """GetMins(self) -> vectorvectorD"""
        return _itkHistogramPython.itkHistogramD_GetMins(self)

    def GetMaxs(self):
        """GetMaxs(self) -> vectorvectorD"""
        return _itkHistogramPython.itkHistogramD_GetMaxs(self)

    def GetHistogramMinFromIndex(self, *args):
        """GetHistogramMinFromIndex(self, itkArraySL index) -> itkArrayD"""
        return _itkHistogramPython.itkHistogramD_GetHistogramMinFromIndex(self, *args)

    def GetHistogramMaxFromIndex(self, *args):
        """GetHistogramMaxFromIndex(self, itkArraySL index) -> itkArrayD"""
        return _itkHistogramPython.itkHistogramD_GetHistogramMaxFromIndex(self, *args)

    def SetFrequency(self, *args):
        """
        SetFrequency(self, size_t value)
        SetFrequency(self, size_t id, size_t value) -> bool
        SetFrequency(self, itkArraySL index, size_t value) -> bool
        SetFrequency(self, itkArrayD measurement, size_t value) -> bool
        """
        return _itkHistogramPython.itkHistogramD_SetFrequency(self, *args)

    def IncreaseFrequency(self, *args):
        """
        IncreaseFrequency(self, size_t id, size_t value) -> bool
        IncreaseFrequency(self, itkArraySL index, size_t value) -> bool
        IncreaseFrequency(self, itkArrayD measurement, size_t value) -> bool
        """
        return _itkHistogramPython.itkHistogramD_IncreaseFrequency(self, *args)

    def GetMeasurementVector(self, *args):
        """
        GetMeasurementVector(self, size_t id) -> itkArrayD
        GetMeasurementVector(self, itkArraySL index) -> itkArrayD
        """
        return _itkHistogramPython.itkHistogramD_GetMeasurementVector(self, *args)

    def GetMeasurement(self, *args):
        """GetMeasurement(self, size_t n, unsigned int dimension) -> double"""
        return _itkHistogramPython.itkHistogramD_GetMeasurement(self, *args)

    def GetFrequency(self, *args):
        """
        GetFrequency(self, size_t id) -> size_t
        GetFrequency(self, itkArraySL index) -> size_t
        GetFrequency(self, size_t n, unsigned int dimension) -> size_t
        """
        return _itkHistogramPython.itkHistogramD_GetFrequency(self, *args)

    def Quantile(self, *args):
        """Quantile(self, unsigned int dimension, double p) -> double"""
        return _itkHistogramPython.itkHistogramD_Quantile(self, *args)

    __swig_destroy__ = _itkHistogramPython.delete_itkHistogramD
    def cast(*args):
        """cast(itkLightObject obj) -> itkHistogramD"""
        return _itkHistogramPython.itkHistogramD_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkHistogramD"""
        return _itkHistogramPython.itkHistogramD_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkHistogramD
        
        Create a new object of the class itkHistogramD and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkHistogramD.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkHistogramD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramD.Initialize = new_instancemethod(_itkHistogramPython.itkHistogramD_Initialize,None,itkHistogramD)
itkHistogramD.SetToZero = new_instancemethod(_itkHistogramPython.itkHistogramD_SetToZero,None,itkHistogramD)
itkHistogramD.GetIndex = new_instancemethod(_itkHistogramPython.itkHistogramD_GetIndex,None,itkHistogramD)
itkHistogramD.GetClipBinsAtEnds = new_instancemethod(_itkHistogramPython.itkHistogramD_GetClipBinsAtEnds,None,itkHistogramD)
itkHistogramD.SetClipBinsAtEnds = new_instancemethod(_itkHistogramPython.itkHistogramD_SetClipBinsAtEnds,None,itkHistogramD)
itkHistogramD.IsIndexOutOfBounds = new_instancemethod(_itkHistogramPython.itkHistogramD_IsIndexOutOfBounds,None,itkHistogramD)
itkHistogramD.GetInstanceIdentifier = new_instancemethod(_itkHistogramPython.itkHistogramD_GetInstanceIdentifier,None,itkHistogramD)
itkHistogramD.GetSize = new_instancemethod(_itkHistogramPython.itkHistogramD_GetSize,None,itkHistogramD)
itkHistogramD.GetBinMin = new_instancemethod(_itkHistogramPython.itkHistogramD_GetBinMin,None,itkHistogramD)
itkHistogramD.GetBinMax = new_instancemethod(_itkHistogramPython.itkHistogramD_GetBinMax,None,itkHistogramD)
itkHistogramD.SetBinMin = new_instancemethod(_itkHistogramPython.itkHistogramD_SetBinMin,None,itkHistogramD)
itkHistogramD.SetBinMax = new_instancemethod(_itkHistogramPython.itkHistogramD_SetBinMax,None,itkHistogramD)
itkHistogramD.GetBinMinFromValue = new_instancemethod(_itkHistogramPython.itkHistogramD_GetBinMinFromValue,None,itkHistogramD)
itkHistogramD.GetBinMaxFromValue = new_instancemethod(_itkHistogramPython.itkHistogramD_GetBinMaxFromValue,None,itkHistogramD)
itkHistogramD.GetDimensionMins = new_instancemethod(_itkHistogramPython.itkHistogramD_GetDimensionMins,None,itkHistogramD)
itkHistogramD.GetDimensionMaxs = new_instancemethod(_itkHistogramPython.itkHistogramD_GetDimensionMaxs,None,itkHistogramD)
itkHistogramD.GetMins = new_instancemethod(_itkHistogramPython.itkHistogramD_GetMins,None,itkHistogramD)
itkHistogramD.GetMaxs = new_instancemethod(_itkHistogramPython.itkHistogramD_GetMaxs,None,itkHistogramD)
itkHistogramD.GetHistogramMinFromIndex = new_instancemethod(_itkHistogramPython.itkHistogramD_GetHistogramMinFromIndex,None,itkHistogramD)
itkHistogramD.GetHistogramMaxFromIndex = new_instancemethod(_itkHistogramPython.itkHistogramD_GetHistogramMaxFromIndex,None,itkHistogramD)
itkHistogramD.SetFrequency = new_instancemethod(_itkHistogramPython.itkHistogramD_SetFrequency,None,itkHistogramD)
itkHistogramD.IncreaseFrequency = new_instancemethod(_itkHistogramPython.itkHistogramD_IncreaseFrequency,None,itkHistogramD)
itkHistogramD.GetMeasurementVector = new_instancemethod(_itkHistogramPython.itkHistogramD_GetMeasurementVector,None,itkHistogramD)
itkHistogramD.GetMeasurement = new_instancemethod(_itkHistogramPython.itkHistogramD_GetMeasurement,None,itkHistogramD)
itkHistogramD.GetFrequency = new_instancemethod(_itkHistogramPython.itkHistogramD_GetFrequency,None,itkHistogramD)
itkHistogramD.Quantile = new_instancemethod(_itkHistogramPython.itkHistogramD_Quantile,None,itkHistogramD)
itkHistogramD.GetPointer = new_instancemethod(_itkHistogramPython.itkHistogramD_GetPointer,None,itkHistogramD)
itkHistogramD_swigregister = _itkHistogramPython.itkHistogramD_swigregister
itkHistogramD_swigregister(itkHistogramD)

def itkHistogramD___New_orig__():
  """itkHistogramD___New_orig__()"""
  return _itkHistogramPython.itkHistogramD___New_orig__()

def itkHistogramD_cast(*args):
  """itkHistogramD_cast(itkLightObject obj) -> itkHistogramD"""
  return _itkHistogramPython.itkHistogramD_cast(*args)

class itkHistogramF(itkSamplePython.itkSampleAF):
    """Proxy of C++ itkHistogramF class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkHistogramPython.itkHistogramF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Initialize(self, *args):
        """
        Initialize(self, itkArrayUL size)
        Initialize(self, itkArrayUL size, itkArrayF lowerBound, itkArrayF upperBound)
        """
        return _itkHistogramPython.itkHistogramF_Initialize(self, *args)

    def SetToZero(self):
        """SetToZero(self)"""
        return _itkHistogramPython.itkHistogramF_SetToZero(self)

    def GetIndex(self, *args):
        """
        GetIndex(self, itkArrayF measurement) -> itkArraySL
        GetIndex(self, itkArrayF measurement, itkArraySL index) -> bool
        GetIndex(self, size_t id) -> itkArraySL
        """
        return _itkHistogramPython.itkHistogramF_GetIndex(self, *args)

    def GetClipBinsAtEnds(self):
        """GetClipBinsAtEnds(self) -> bool"""
        return _itkHistogramPython.itkHistogramF_GetClipBinsAtEnds(self)

    def SetClipBinsAtEnds(self, *args):
        """SetClipBinsAtEnds(self, bool _arg)"""
        return _itkHistogramPython.itkHistogramF_SetClipBinsAtEnds(self, *args)

    def IsIndexOutOfBounds(self, *args):
        """IsIndexOutOfBounds(self, itkArraySL index) -> bool"""
        return _itkHistogramPython.itkHistogramF_IsIndexOutOfBounds(self, *args)

    def GetInstanceIdentifier(self, *args):
        """GetInstanceIdentifier(self, itkArraySL index) -> size_t"""
        return _itkHistogramPython.itkHistogramF_GetInstanceIdentifier(self, *args)

    def GetSize(self, *args):
        """
        GetSize(self) -> itkArrayUL
        GetSize(self, unsigned int dimension) -> unsigned long
        """
        return _itkHistogramPython.itkHistogramF_GetSize(self, *args)

    def GetBinMin(self, *args):
        """GetBinMin(self, unsigned int dimension, size_t nbin) -> float"""
        return _itkHistogramPython.itkHistogramF_GetBinMin(self, *args)

    def GetBinMax(self, *args):
        """GetBinMax(self, unsigned int dimension, size_t nbin) -> float"""
        return _itkHistogramPython.itkHistogramF_GetBinMax(self, *args)

    def SetBinMin(self, *args):
        """SetBinMin(self, unsigned int dimension, size_t nbin, float min)"""
        return _itkHistogramPython.itkHistogramF_SetBinMin(self, *args)

    def SetBinMax(self, *args):
        """SetBinMax(self, unsigned int dimension, size_t nbin, float max)"""
        return _itkHistogramPython.itkHistogramF_SetBinMax(self, *args)

    def GetBinMinFromValue(self, *args):
        """GetBinMinFromValue(self, unsigned int dimension, float value) -> float"""
        return _itkHistogramPython.itkHistogramF_GetBinMinFromValue(self, *args)

    def GetBinMaxFromValue(self, *args):
        """GetBinMaxFromValue(self, unsigned int dimension, float value) -> float"""
        return _itkHistogramPython.itkHistogramF_GetBinMaxFromValue(self, *args)

    def GetDimensionMins(self, *args):
        """GetDimensionMins(self, unsigned int dimension) -> vectorF"""
        return _itkHistogramPython.itkHistogramF_GetDimensionMins(self, *args)

    def GetDimensionMaxs(self, *args):
        """GetDimensionMaxs(self, unsigned int dimension) -> vectorF"""
        return _itkHistogramPython.itkHistogramF_GetDimensionMaxs(self, *args)

    def GetMins(self):
        """GetMins(self) -> vectorvectorF"""
        return _itkHistogramPython.itkHistogramF_GetMins(self)

    def GetMaxs(self):
        """GetMaxs(self) -> vectorvectorF"""
        return _itkHistogramPython.itkHistogramF_GetMaxs(self)

    def GetHistogramMinFromIndex(self, *args):
        """GetHistogramMinFromIndex(self, itkArraySL index) -> itkArrayF"""
        return _itkHistogramPython.itkHistogramF_GetHistogramMinFromIndex(self, *args)

    def GetHistogramMaxFromIndex(self, *args):
        """GetHistogramMaxFromIndex(self, itkArraySL index) -> itkArrayF"""
        return _itkHistogramPython.itkHistogramF_GetHistogramMaxFromIndex(self, *args)

    def SetFrequency(self, *args):
        """
        SetFrequency(self, size_t value)
        SetFrequency(self, size_t id, size_t value) -> bool
        SetFrequency(self, itkArraySL index, size_t value) -> bool
        SetFrequency(self, itkArrayF measurement, size_t value) -> bool
        """
        return _itkHistogramPython.itkHistogramF_SetFrequency(self, *args)

    def IncreaseFrequency(self, *args):
        """
        IncreaseFrequency(self, size_t id, size_t value) -> bool
        IncreaseFrequency(self, itkArraySL index, size_t value) -> bool
        IncreaseFrequency(self, itkArrayF measurement, size_t value) -> bool
        """
        return _itkHistogramPython.itkHistogramF_IncreaseFrequency(self, *args)

    def GetMeasurementVector(self, *args):
        """
        GetMeasurementVector(self, size_t id) -> itkArrayF
        GetMeasurementVector(self, itkArraySL index) -> itkArrayF
        """
        return _itkHistogramPython.itkHistogramF_GetMeasurementVector(self, *args)

    def GetMeasurement(self, *args):
        """GetMeasurement(self, size_t n, unsigned int dimension) -> float"""
        return _itkHistogramPython.itkHistogramF_GetMeasurement(self, *args)

    def GetFrequency(self, *args):
        """
        GetFrequency(self, size_t id) -> size_t
        GetFrequency(self, itkArraySL index) -> size_t
        GetFrequency(self, size_t n, unsigned int dimension) -> size_t
        """
        return _itkHistogramPython.itkHistogramF_GetFrequency(self, *args)

    def Quantile(self, *args):
        """Quantile(self, unsigned int dimension, double p) -> double"""
        return _itkHistogramPython.itkHistogramF_Quantile(self, *args)

    __swig_destroy__ = _itkHistogramPython.delete_itkHistogramF
    def cast(*args):
        """cast(itkLightObject obj) -> itkHistogramF"""
        return _itkHistogramPython.itkHistogramF_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkHistogramF"""
        return _itkHistogramPython.itkHistogramF_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkHistogramF
        
        Create a new object of the class itkHistogramF and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkHistogramF.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkHistogramF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkHistogramF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkHistogramF.Initialize = new_instancemethod(_itkHistogramPython.itkHistogramF_Initialize,None,itkHistogramF)
itkHistogramF.SetToZero = new_instancemethod(_itkHistogramPython.itkHistogramF_SetToZero,None,itkHistogramF)
itkHistogramF.GetIndex = new_instancemethod(_itkHistogramPython.itkHistogramF_GetIndex,None,itkHistogramF)
itkHistogramF.GetClipBinsAtEnds = new_instancemethod(_itkHistogramPython.itkHistogramF_GetClipBinsAtEnds,None,itkHistogramF)
itkHistogramF.SetClipBinsAtEnds = new_instancemethod(_itkHistogramPython.itkHistogramF_SetClipBinsAtEnds,None,itkHistogramF)
itkHistogramF.IsIndexOutOfBounds = new_instancemethod(_itkHistogramPython.itkHistogramF_IsIndexOutOfBounds,None,itkHistogramF)
itkHistogramF.GetInstanceIdentifier = new_instancemethod(_itkHistogramPython.itkHistogramF_GetInstanceIdentifier,None,itkHistogramF)
itkHistogramF.GetSize = new_instancemethod(_itkHistogramPython.itkHistogramF_GetSize,None,itkHistogramF)
itkHistogramF.GetBinMin = new_instancemethod(_itkHistogramPython.itkHistogramF_GetBinMin,None,itkHistogramF)
itkHistogramF.GetBinMax = new_instancemethod(_itkHistogramPython.itkHistogramF_GetBinMax,None,itkHistogramF)
itkHistogramF.SetBinMin = new_instancemethod(_itkHistogramPython.itkHistogramF_SetBinMin,None,itkHistogramF)
itkHistogramF.SetBinMax = new_instancemethod(_itkHistogramPython.itkHistogramF_SetBinMax,None,itkHistogramF)
itkHistogramF.GetBinMinFromValue = new_instancemethod(_itkHistogramPython.itkHistogramF_GetBinMinFromValue,None,itkHistogramF)
itkHistogramF.GetBinMaxFromValue = new_instancemethod(_itkHistogramPython.itkHistogramF_GetBinMaxFromValue,None,itkHistogramF)
itkHistogramF.GetDimensionMins = new_instancemethod(_itkHistogramPython.itkHistogramF_GetDimensionMins,None,itkHistogramF)
itkHistogramF.GetDimensionMaxs = new_instancemethod(_itkHistogramPython.itkHistogramF_GetDimensionMaxs,None,itkHistogramF)
itkHistogramF.GetMins = new_instancemethod(_itkHistogramPython.itkHistogramF_GetMins,None,itkHistogramF)
itkHistogramF.GetMaxs = new_instancemethod(_itkHistogramPython.itkHistogramF_GetMaxs,None,itkHistogramF)
itkHistogramF.GetHistogramMinFromIndex = new_instancemethod(_itkHistogramPython.itkHistogramF_GetHistogramMinFromIndex,None,itkHistogramF)
itkHistogramF.GetHistogramMaxFromIndex = new_instancemethod(_itkHistogramPython.itkHistogramF_GetHistogramMaxFromIndex,None,itkHistogramF)
itkHistogramF.SetFrequency = new_instancemethod(_itkHistogramPython.itkHistogramF_SetFrequency,None,itkHistogramF)
itkHistogramF.IncreaseFrequency = new_instancemethod(_itkHistogramPython.itkHistogramF_IncreaseFrequency,None,itkHistogramF)
itkHistogramF.GetMeasurementVector = new_instancemethod(_itkHistogramPython.itkHistogramF_GetMeasurementVector,None,itkHistogramF)
itkHistogramF.GetMeasurement = new_instancemethod(_itkHistogramPython.itkHistogramF_GetMeasurement,None,itkHistogramF)
itkHistogramF.GetFrequency = new_instancemethod(_itkHistogramPython.itkHistogramF_GetFrequency,None,itkHistogramF)
itkHistogramF.Quantile = new_instancemethod(_itkHistogramPython.itkHistogramF_Quantile,None,itkHistogramF)
itkHistogramF.GetPointer = new_instancemethod(_itkHistogramPython.itkHistogramF_GetPointer,None,itkHistogramF)
itkHistogramF_swigregister = _itkHistogramPython.itkHistogramF_swigregister
itkHistogramF_swigregister(itkHistogramF)

def itkHistogramF___New_orig__():
  """itkHistogramF___New_orig__()"""
  return _itkHistogramPython.itkHistogramF___New_orig__()

def itkHistogramF_cast(*args):
  """itkHistogramF_cast(itkLightObject obj) -> itkHistogramF"""
  return _itkHistogramPython.itkHistogramF_cast(*args)

class itkSimpleDataObjectDecoratorHD(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkSimpleDataObjectDecoratorHD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Set(self, *args):
        """Set(self, itkHistogramD val)"""
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHD_Set(self, *args)

    def Get(self, *args):
        """
        Get(self) -> itkHistogramD
        Get(self) -> itkHistogramD
        """
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHD_Get(self, *args)

    __swig_destroy__ = _itkHistogramPython.delete_itkSimpleDataObjectDecoratorHD
    def cast(*args):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorHD"""
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHD_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkSimpleDataObjectDecoratorHD"""
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHD_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorHD
        
        Create a new object of the class itkSimpleDataObjectDecoratorHD and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkSimpleDataObjectDecoratorHD.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkSimpleDataObjectDecoratorHD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorHD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorHD.Set = new_instancemethod(_itkHistogramPython.itkSimpleDataObjectDecoratorHD_Set,None,itkSimpleDataObjectDecoratorHD)
itkSimpleDataObjectDecoratorHD.Get = new_instancemethod(_itkHistogramPython.itkSimpleDataObjectDecoratorHD_Get,None,itkSimpleDataObjectDecoratorHD)
itkSimpleDataObjectDecoratorHD.GetPointer = new_instancemethod(_itkHistogramPython.itkSimpleDataObjectDecoratorHD_GetPointer,None,itkSimpleDataObjectDecoratorHD)
itkSimpleDataObjectDecoratorHD_swigregister = _itkHistogramPython.itkSimpleDataObjectDecoratorHD_swigregister
itkSimpleDataObjectDecoratorHD_swigregister(itkSimpleDataObjectDecoratorHD)

def itkSimpleDataObjectDecoratorHD___New_orig__():
  """itkSimpleDataObjectDecoratorHD___New_orig__()"""
  return _itkHistogramPython.itkSimpleDataObjectDecoratorHD___New_orig__()

def itkSimpleDataObjectDecoratorHD_cast(*args):
  """itkSimpleDataObjectDecoratorHD_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorHD"""
  return _itkHistogramPython.itkSimpleDataObjectDecoratorHD_cast(*args)

class itkSimpleDataObjectDecoratorHF(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkSimpleDataObjectDecoratorHF class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Set(self, *args):
        """Set(self, itkHistogramF val)"""
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHF_Set(self, *args)

    def Get(self, *args):
        """
        Get(self) -> itkHistogramF
        Get(self) -> itkHistogramF
        """
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHF_Get(self, *args)

    __swig_destroy__ = _itkHistogramPython.delete_itkSimpleDataObjectDecoratorHF
    def cast(*args):
        """cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorHF"""
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHF_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkSimpleDataObjectDecoratorHF"""
        return _itkHistogramPython.itkSimpleDataObjectDecoratorHF_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkSimpleDataObjectDecoratorHF
        
        Create a new object of the class itkSimpleDataObjectDecoratorHF and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkSimpleDataObjectDecoratorHF.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkSimpleDataObjectDecoratorHF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSimpleDataObjectDecoratorHF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSimpleDataObjectDecoratorHF.Set = new_instancemethod(_itkHistogramPython.itkSimpleDataObjectDecoratorHF_Set,None,itkSimpleDataObjectDecoratorHF)
itkSimpleDataObjectDecoratorHF.Get = new_instancemethod(_itkHistogramPython.itkSimpleDataObjectDecoratorHF_Get,None,itkSimpleDataObjectDecoratorHF)
itkSimpleDataObjectDecoratorHF.GetPointer = new_instancemethod(_itkHistogramPython.itkSimpleDataObjectDecoratorHF_GetPointer,None,itkSimpleDataObjectDecoratorHF)
itkSimpleDataObjectDecoratorHF_swigregister = _itkHistogramPython.itkSimpleDataObjectDecoratorHF_swigregister
itkSimpleDataObjectDecoratorHF_swigregister(itkSimpleDataObjectDecoratorHF)

def itkSimpleDataObjectDecoratorHF___New_orig__():
  """itkSimpleDataObjectDecoratorHF___New_orig__()"""
  return _itkHistogramPython.itkSimpleDataObjectDecoratorHF___New_orig__()

def itkSimpleDataObjectDecoratorHF_cast(*args):
  """itkSimpleDataObjectDecoratorHF_cast(itkLightObject obj) -> itkSimpleDataObjectDecoratorHF"""
  return _itkHistogramPython.itkSimpleDataObjectDecoratorHF_cast(*args)



