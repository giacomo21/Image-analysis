# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _ITKCostFunctionsPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ITKCostFunctionsPython', [dirname(__file__)])
        except ImportError:
            import _ITKCostFunctionsPython
            return _ITKCostFunctionsPython
        if fp is not None:
            try:
                _mod = imp.load_module('_ITKCostFunctionsPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ITKCostFunctionsPython = swig_import_helper()
    del swig_import_helper
else:
    import _ITKCostFunctionsPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkFixedArrayPython
import pyBasePython
import vnl_vectorPython
import vcl_complexPython
import vnl_matrixPython
import vnl_least_squares_functionPython
import itkArray2DPython
import itkImagePython
import itkCovariantVectorPython
import itkVectorPython
import vnl_vector_refPython
import ITKRegionsPython
import ITKCommonBasePython
import itkEventObjectsPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkPointPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkRGBPixelPython
import itkVectorContainerPython
import itkContinuousIndexPython
import itkLevelSetPython
import itkArrayPython
import vnl_cost_functionPython
import vnl_unary_functionPython
def itkShapePriorMAPCostFunctionID3D_New():
  return itkShapePriorMAPCostFunctionID3D.New()

def itkShapePriorMAPCostFunctionIF3F_New():
  return itkShapePriorMAPCostFunctionIF3F.New()

def itkShapePriorMAPCostFunctionID2D_New():
  return itkShapePriorMAPCostFunctionID2D.New()

def itkShapePriorMAPCostFunctionIF2F_New():
  return itkShapePriorMAPCostFunctionIF2F.New()

def itkShapePriorMAPCostFunctionBaseID3D_New():
  return itkShapePriorMAPCostFunctionBaseID3D.New()

def itkShapePriorMAPCostFunctionBaseIF3F_New():
  return itkShapePriorMAPCostFunctionBaseIF3F.New()

def itkShapePriorMAPCostFunctionBaseID2D_New():
  return itkShapePriorMAPCostFunctionBaseID2D.New()

def itkShapePriorMAPCostFunctionBaseIF2F_New():
  return itkShapePriorMAPCostFunctionBaseIF2F.New()

def itkCumulativeGaussianCostFunction_New():
  return itkCumulativeGaussianCostFunction.New()

def itkMultipleValuedCostFunction_New():
  return itkMultipleValuedCostFunction.New()

def itkRandomVariateGeneratorBase_New():
  return itkRandomVariateGeneratorBase.New()

def itkMultipleValuedCostFunction_New():
  return itkMultipleValuedCostFunction.New()

def itkSingleValuedCostFunction_New():
  return itkSingleValuedCostFunction.New()

def itkCostFunction_New():
  return itkCostFunction.New()

class itkCostFunction(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkCostFunction class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetNumberOfParameters(self):
        """GetNumberOfParameters(self) -> unsigned int"""
        return _ITKCostFunctionsPython.itkCostFunction_GetNumberOfParameters(self)

    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkCostFunction
    def cast(*args):
        """cast(itkLightObject obj) -> itkCostFunction"""
        return _ITKCostFunctionsPython.itkCostFunction_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkCostFunction"""
        return _ITKCostFunctionsPython.itkCostFunction_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkCostFunction
        
        Create a new object of the class itkCostFunction and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkCostFunction.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkCostFunction.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCostFunction.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCostFunction.GetNumberOfParameters = new_instancemethod(_ITKCostFunctionsPython.itkCostFunction_GetNumberOfParameters,None,itkCostFunction)
itkCostFunction.GetPointer = new_instancemethod(_ITKCostFunctionsPython.itkCostFunction_GetPointer,None,itkCostFunction)
itkCostFunction_swigregister = _ITKCostFunctionsPython.itkCostFunction_swigregister
itkCostFunction_swigregister(itkCostFunction)

def itkCostFunction_cast(*args):
  """itkCostFunction_cast(itkLightObject obj) -> itkCostFunction"""
  return _ITKCostFunctionsPython.itkCostFunction_cast(*args)

class itkMultipleValuedCostFunction(itkCostFunction):
    """Proxy of C++ itkMultipleValuedCostFunction class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetValue(self, *args):
        """GetValue(self, itkArrayD parameters) -> itkArrayD"""
        return _ITKCostFunctionsPython.itkMultipleValuedCostFunction_GetValue(self, *args)

    def GetNumberOfValues(self):
        """GetNumberOfValues(self) -> unsigned int"""
        return _ITKCostFunctionsPython.itkMultipleValuedCostFunction_GetNumberOfValues(self)

    def GetDerivative(self, *args):
        """GetDerivative(self, itkArrayD parameters, itkArray2DD derivative)"""
        return _ITKCostFunctionsPython.itkMultipleValuedCostFunction_GetDerivative(self, *args)

    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkMultipleValuedCostFunction
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultipleValuedCostFunction"""
        return _ITKCostFunctionsPython.itkMultipleValuedCostFunction_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultipleValuedCostFunction"""
        return _ITKCostFunctionsPython.itkMultipleValuedCostFunction_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultipleValuedCostFunction
        
        Create a new object of the class itkMultipleValuedCostFunction and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultipleValuedCostFunction.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultipleValuedCostFunction.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultipleValuedCostFunction.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

    def New(*args, **kargs):
        """New() -> itkMultipleValuedCostFunction
        
        Create a new object of the class itkMultipleValuedCostFunction and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultipleValuedCostFunction.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultipleValuedCostFunction.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultipleValuedCostFunction.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultipleValuedCostFunction.GetValue = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedCostFunction_GetValue,None,itkMultipleValuedCostFunction)
itkMultipleValuedCostFunction.GetNumberOfValues = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedCostFunction_GetNumberOfValues,None,itkMultipleValuedCostFunction)
itkMultipleValuedCostFunction.GetDerivative = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedCostFunction_GetDerivative,None,itkMultipleValuedCostFunction)
itkMultipleValuedCostFunction.GetPointer = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedCostFunction_GetPointer,None,itkMultipleValuedCostFunction)
itkMultipleValuedCostFunction_swigregister = _ITKCostFunctionsPython.itkMultipleValuedCostFunction_swigregister
itkMultipleValuedCostFunction_swigregister(itkMultipleValuedCostFunction)

def itkMultipleValuedCostFunction_cast(*args):
  """itkMultipleValuedCostFunction_cast(itkLightObject obj) -> itkMultipleValuedCostFunction"""
  return _ITKCostFunctionsPython.itkMultipleValuedCostFunction_cast(*args)

class itkMultipleValuedVnlCostFunctionAdaptor(vnl_least_squares_functionPython.vnl_least_squares_function):
    """Proxy of C++ itkMultipleValuedVnlCostFunctionAdaptor class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, itkMultipleValuedVnlCostFunctionAdaptor arg0) -> itkMultipleValuedVnlCostFunctionAdaptor
        __init__(self, unsigned int spaceDimension, unsigned int numberOfValues) -> itkMultipleValuedVnlCostFunctionAdaptor
        """
        _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_swiginit(self,_ITKCostFunctionsPython.new_itkMultipleValuedVnlCostFunctionAdaptor(*args))
    def SetCostFunction(self, *args):
        """SetCostFunction(self, itkMultipleValuedCostFunction costFunction)"""
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_SetCostFunction(self, *args)

    def GetCostFunction(self):
        """GetCostFunction(self) -> itkMultipleValuedCostFunction"""
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetCostFunction(self)

    def compute(self, *args):
        """compute(self, vnl_vectorD x, vnl_vectorD f, vnl_matrixD g)"""
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_compute(self, *args)

    def ConvertExternalToInternalGradient(self, *args):
        """ConvertExternalToInternalGradient(self, itkArray2DD input, vnl_matrixD output)"""
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_ConvertExternalToInternalGradient(self, *args)

    def ConvertExternalToInternalMeasures(self, *args):
        """ConvertExternalToInternalMeasures(self, itkArrayD input, vnl_vectorD output)"""
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_ConvertExternalToInternalMeasures(self, *args)

    def SetUseGradient(self, *args):
        """SetUseGradient(self, bool arg0)"""
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_SetUseGradient(self, *args)

    def UseGradientOn(self):
        """UseGradientOn(self)"""
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_UseGradientOn(self)

    def UseGradientOff(self):
        """UseGradientOff(self)"""
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_UseGradientOff(self)

    def GetUseGradient(self):
        """GetUseGradient(self) -> bool"""
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetUseGradient(self)

    def SetScales(self, *args):
        """SetScales(self, itkArrayD scales)"""
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_SetScales(self, *args)

    def AddObserver(self, *args):
        """AddObserver(self, itkEventObject event, itkCommand arg1) -> unsigned long"""
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_AddObserver(self, *args)

    def GetCachedValue(self):
        """GetCachedValue(self) -> itkArrayD"""
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetCachedValue(self)

    def GetCachedDerivative(self):
        """GetCachedDerivative(self) -> itkArray2DD"""
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetCachedDerivative(self)

    def GetCachedCurrentParameters(self):
        """GetCachedCurrentParameters(self) -> itkArrayD"""
        return _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetCachedCurrentParameters(self)

    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkMultipleValuedVnlCostFunctionAdaptor
itkMultipleValuedVnlCostFunctionAdaptor.SetCostFunction = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_SetCostFunction,None,itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.GetCostFunction = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetCostFunction,None,itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.compute = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_compute,None,itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.ConvertExternalToInternalGradient = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_ConvertExternalToInternalGradient,None,itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.ConvertExternalToInternalMeasures = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_ConvertExternalToInternalMeasures,None,itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.SetUseGradient = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_SetUseGradient,None,itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.UseGradientOn = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_UseGradientOn,None,itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.UseGradientOff = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_UseGradientOff,None,itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.GetUseGradient = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetUseGradient,None,itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.SetScales = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_SetScales,None,itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.AddObserver = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_AddObserver,None,itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.GetCachedValue = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetCachedValue,None,itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.GetCachedDerivative = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetCachedDerivative,None,itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor.GetCachedCurrentParameters = new_instancemethod(_ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_GetCachedCurrentParameters,None,itkMultipleValuedVnlCostFunctionAdaptor)
itkMultipleValuedVnlCostFunctionAdaptor_swigregister = _ITKCostFunctionsPython.itkMultipleValuedVnlCostFunctionAdaptor_swigregister
itkMultipleValuedVnlCostFunctionAdaptor_swigregister(itkMultipleValuedVnlCostFunctionAdaptor)

class itkRandomVariateGeneratorBase(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkRandomVariateGeneratorBase class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetVariate(self):
        """GetVariate(self) -> double"""
        return _ITKCostFunctionsPython.itkRandomVariateGeneratorBase_GetVariate(self)

    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkRandomVariateGeneratorBase
    def cast(*args):
        """cast(itkLightObject obj) -> itkRandomVariateGeneratorBase"""
        return _ITKCostFunctionsPython.itkRandomVariateGeneratorBase_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkRandomVariateGeneratorBase"""
        return _ITKCostFunctionsPython.itkRandomVariateGeneratorBase_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkRandomVariateGeneratorBase
        
        Create a new object of the class itkRandomVariateGeneratorBase and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkRandomVariateGeneratorBase.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkRandomVariateGeneratorBase.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRandomVariateGeneratorBase.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRandomVariateGeneratorBase.GetVariate = new_instancemethod(_ITKCostFunctionsPython.itkRandomVariateGeneratorBase_GetVariate,None,itkRandomVariateGeneratorBase)
itkRandomVariateGeneratorBase.GetPointer = new_instancemethod(_ITKCostFunctionsPython.itkRandomVariateGeneratorBase_GetPointer,None,itkRandomVariateGeneratorBase)
itkRandomVariateGeneratorBase_swigregister = _ITKCostFunctionsPython.itkRandomVariateGeneratorBase_swigregister
itkRandomVariateGeneratorBase_swigregister(itkRandomVariateGeneratorBase)

def itkRandomVariateGeneratorBase_cast(*args):
  """itkRandomVariateGeneratorBase_cast(itkLightObject obj) -> itkRandomVariateGeneratorBase"""
  return _ITKCostFunctionsPython.itkRandomVariateGeneratorBase_cast(*args)

class itkSingleValuedCostFunction(itkCostFunction):
    """Proxy of C++ itkSingleValuedCostFunction class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetValue(self, *args):
        """GetValue(self, itkArrayD parameters) -> double"""
        return _ITKCostFunctionsPython.itkSingleValuedCostFunction_GetValue(self, *args)

    def GetDerivative(self, *args):
        """GetDerivative(self, itkArrayD parameters, itkArrayD derivative)"""
        return _ITKCostFunctionsPython.itkSingleValuedCostFunction_GetDerivative(self, *args)

    def GetValueAndDerivative(self, *args):
        """GetValueAndDerivative(self, itkArrayD parameters, double value, itkArrayD derivative)"""
        return _ITKCostFunctionsPython.itkSingleValuedCostFunction_GetValueAndDerivative(self, *args)

    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkSingleValuedCostFunction
    def cast(*args):
        """cast(itkLightObject obj) -> itkSingleValuedCostFunction"""
        return _ITKCostFunctionsPython.itkSingleValuedCostFunction_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkSingleValuedCostFunction"""
        return _ITKCostFunctionsPython.itkSingleValuedCostFunction_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkSingleValuedCostFunction
        
        Create a new object of the class itkSingleValuedCostFunction and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkSingleValuedCostFunction.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkSingleValuedCostFunction.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkSingleValuedCostFunction.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkSingleValuedCostFunction.GetValue = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedCostFunction_GetValue,None,itkSingleValuedCostFunction)
itkSingleValuedCostFunction.GetDerivative = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedCostFunction_GetDerivative,None,itkSingleValuedCostFunction)
itkSingleValuedCostFunction.GetValueAndDerivative = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedCostFunction_GetValueAndDerivative,None,itkSingleValuedCostFunction)
itkSingleValuedCostFunction.GetPointer = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedCostFunction_GetPointer,None,itkSingleValuedCostFunction)
itkSingleValuedCostFunction_swigregister = _ITKCostFunctionsPython.itkSingleValuedCostFunction_swigregister
itkSingleValuedCostFunction_swigregister(itkSingleValuedCostFunction)

def itkSingleValuedCostFunction_cast(*args):
  """itkSingleValuedCostFunction_cast(itkLightObject obj) -> itkSingleValuedCostFunction"""
  return _ITKCostFunctionsPython.itkSingleValuedCostFunction_cast(*args)

class itkSingleValuedVnlCostFunctionAdaptor(vnl_cost_functionPython.vnl_cost_function):
    """Proxy of C++ itkSingleValuedVnlCostFunctionAdaptor class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, itkSingleValuedVnlCostFunctionAdaptor arg0) -> itkSingleValuedVnlCostFunctionAdaptor
        __init__(self, unsigned int spaceDimension) -> itkSingleValuedVnlCostFunctionAdaptor
        """
        _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_swiginit(self,_ITKCostFunctionsPython.new_itkSingleValuedVnlCostFunctionAdaptor(*args))
    def SetCostFunction(self, *args):
        """SetCostFunction(self, itkSingleValuedCostFunction costFunction)"""
        return _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_SetCostFunction(self, *args)

    def GetCostFunction(self):
        """GetCostFunction(self) -> itkSingleValuedCostFunction"""
        return _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetCostFunction(self)

    def ConvertExternalToInternalGradient(self, *args):
        """ConvertExternalToInternalGradient(self, itkArrayD input, vnl_vectorD output)"""
        return _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_ConvertExternalToInternalGradient(self, *args)

    def SetScales(self, *args):
        """SetScales(self, itkArrayD scales)"""
        return _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_SetScales(self, *args)

    def SetNegateCostFunction(self, *args):
        """SetNegateCostFunction(self, bool value)"""
        return _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_SetNegateCostFunction(self, *args)

    def GetNegateCostFunction(self):
        """GetNegateCostFunction(self) -> bool"""
        return _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetNegateCostFunction(self)

    def NegateCostFunctionOn(self):
        """NegateCostFunctionOn(self)"""
        return _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_NegateCostFunctionOn(self)

    def NegateCostFunctionOff(self):
        """NegateCostFunctionOff(self)"""
        return _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_NegateCostFunctionOff(self)

    def AddObserver(self, *args):
        """AddObserver(self, itkEventObject event, itkCommand arg1) -> unsigned long"""
        return _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_AddObserver(self, *args)

    def GetCachedValue(self):
        """GetCachedValue(self) -> double"""
        return _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetCachedValue(self)

    def GetCachedDerivative(self):
        """GetCachedDerivative(self) -> itkArrayD"""
        return _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetCachedDerivative(self)

    def GetCachedCurrentParameters(self):
        """GetCachedCurrentParameters(self) -> itkArrayD"""
        return _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetCachedCurrentParameters(self)

    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkSingleValuedVnlCostFunctionAdaptor
itkSingleValuedVnlCostFunctionAdaptor.SetCostFunction = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_SetCostFunction,None,itkSingleValuedVnlCostFunctionAdaptor)
itkSingleValuedVnlCostFunctionAdaptor.GetCostFunction = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetCostFunction,None,itkSingleValuedVnlCostFunctionAdaptor)
itkSingleValuedVnlCostFunctionAdaptor.ConvertExternalToInternalGradient = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_ConvertExternalToInternalGradient,None,itkSingleValuedVnlCostFunctionAdaptor)
itkSingleValuedVnlCostFunctionAdaptor.SetScales = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_SetScales,None,itkSingleValuedVnlCostFunctionAdaptor)
itkSingleValuedVnlCostFunctionAdaptor.SetNegateCostFunction = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_SetNegateCostFunction,None,itkSingleValuedVnlCostFunctionAdaptor)
itkSingleValuedVnlCostFunctionAdaptor.GetNegateCostFunction = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetNegateCostFunction,None,itkSingleValuedVnlCostFunctionAdaptor)
itkSingleValuedVnlCostFunctionAdaptor.NegateCostFunctionOn = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_NegateCostFunctionOn,None,itkSingleValuedVnlCostFunctionAdaptor)
itkSingleValuedVnlCostFunctionAdaptor.NegateCostFunctionOff = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_NegateCostFunctionOff,None,itkSingleValuedVnlCostFunctionAdaptor)
itkSingleValuedVnlCostFunctionAdaptor.AddObserver = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_AddObserver,None,itkSingleValuedVnlCostFunctionAdaptor)
itkSingleValuedVnlCostFunctionAdaptor.GetCachedValue = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetCachedValue,None,itkSingleValuedVnlCostFunctionAdaptor)
itkSingleValuedVnlCostFunctionAdaptor.GetCachedDerivative = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetCachedDerivative,None,itkSingleValuedVnlCostFunctionAdaptor)
itkSingleValuedVnlCostFunctionAdaptor.GetCachedCurrentParameters = new_instancemethod(_ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_GetCachedCurrentParameters,None,itkSingleValuedVnlCostFunctionAdaptor)
itkSingleValuedVnlCostFunctionAdaptor_swigregister = _ITKCostFunctionsPython.itkSingleValuedVnlCostFunctionAdaptor_swigregister
itkSingleValuedVnlCostFunctionAdaptor_swigregister(itkSingleValuedVnlCostFunctionAdaptor)

class itkCumulativeGaussianCostFunction(itkMultipleValuedCostFunction):
    """Proxy of C++ itkCumulativeGaussianCostFunction class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SpaceDimension = _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_SpaceDimension
    def __New_orig__():
        """__New_orig__()"""
        return _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetValue(self, *args):
        """
        GetValue(self, itkArrayD parameters) -> itkArrayD
        GetValue(self, itkArrayD parameters) -> itkArrayD
        """
        return _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_GetValue(self, *args)

    def CalculateFitError(self, *args):
        """CalculateFitError(self, itkArrayD setTestArray) -> double"""
        return _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_CalculateFitError(self, *args)

    def EvaluateCumulativeGaussian(self, *args):
        """EvaluateCumulativeGaussian(self, double argument) -> double"""
        return _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_EvaluateCumulativeGaussian(self, *args)

    def Initialize(self, *args):
        """Initialize(self, unsigned int rangeDimension)"""
        return _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_Initialize(self, *args)

    def SetOriginalDataArray(self, *args):
        """SetOriginalDataArray(self, itkArrayD setOriginalDataArray)"""
        return _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_SetOriginalDataArray(self, *args)

    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkCumulativeGaussianCostFunction
    def cast(*args):
        """cast(itkLightObject obj) -> itkCumulativeGaussianCostFunction"""
        return _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkCumulativeGaussianCostFunction"""
        return _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkCumulativeGaussianCostFunction
        
        Create a new object of the class itkCumulativeGaussianCostFunction and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkCumulativeGaussianCostFunction.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkCumulativeGaussianCostFunction.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCumulativeGaussianCostFunction.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCumulativeGaussianCostFunction.GetValue = new_instancemethod(_ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_GetValue,None,itkCumulativeGaussianCostFunction)
itkCumulativeGaussianCostFunction.CalculateFitError = new_instancemethod(_ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_CalculateFitError,None,itkCumulativeGaussianCostFunction)
itkCumulativeGaussianCostFunction.EvaluateCumulativeGaussian = new_instancemethod(_ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_EvaluateCumulativeGaussian,None,itkCumulativeGaussianCostFunction)
itkCumulativeGaussianCostFunction.Initialize = new_instancemethod(_ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_Initialize,None,itkCumulativeGaussianCostFunction)
itkCumulativeGaussianCostFunction.SetOriginalDataArray = new_instancemethod(_ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_SetOriginalDataArray,None,itkCumulativeGaussianCostFunction)
itkCumulativeGaussianCostFunction.GetPointer = new_instancemethod(_ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_GetPointer,None,itkCumulativeGaussianCostFunction)
itkCumulativeGaussianCostFunction_swigregister = _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_swigregister
itkCumulativeGaussianCostFunction_swigregister(itkCumulativeGaussianCostFunction)

def itkCumulativeGaussianCostFunction___New_orig__():
  """itkCumulativeGaussianCostFunction___New_orig__()"""
  return _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction___New_orig__()

def itkCumulativeGaussianCostFunction_cast(*args):
  """itkCumulativeGaussianCostFunction_cast(itkLightObject obj) -> itkCumulativeGaussianCostFunction"""
  return _ITKCostFunctionsPython.itkCumulativeGaussianCostFunction_cast(*args)

class itkShapePriorMAPCostFunctionBaseID2D(itkSingleValuedCostFunction):
    """Proxy of C++ itkShapePriorMAPCostFunctionBaseID2D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_ImageDimension
    def SetShapeFunction(self, *args):
        """SetShapeFunction(self, itk::ShapeSignedDistanceFunction<(double,2u)> _arg)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_SetShapeFunction(self, *args)

    def GetShapeFunction(self):
        """GetShapeFunction(self) -> itk::ShapeSignedDistanceFunction<(double,2u)>"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_GetShapeFunction(self)

    def SetActiveRegion(self, *args):
        """SetActiveRegion(self, itkVectorContainerUILSND2 _arg)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_SetActiveRegion(self, *args)

    def GetActiveRegion(self):
        """GetActiveRegion(self) -> itkVectorContainerUILSND2"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_GetActiveRegion(self)

    def SetFeatureImage(self, *args):
        """SetFeatureImage(self, itkImageD2 _arg)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_SetFeatureImage(self, *args)

    def GetFeatureImage(self):
        """GetFeatureImage(self) -> itkImageD2"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_GetFeatureImage(self)

    def ComputeLogInsideTerm(self, *args):
        """ComputeLogInsideTerm(self, itkArrayD arg0) -> double"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_ComputeLogInsideTerm(self, *args)

    def ComputeLogGradientTerm(self, *args):
        """ComputeLogGradientTerm(self, itkArrayD arg0) -> double"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_ComputeLogGradientTerm(self, *args)

    def ComputeLogShapePriorTerm(self, *args):
        """ComputeLogShapePriorTerm(self, itkArrayD arg0) -> double"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_ComputeLogShapePriorTerm(self, *args)

    def ComputeLogPosePriorTerm(self, *args):
        """ComputeLogPosePriorTerm(self, itkArrayD arg0) -> double"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_ComputeLogPosePriorTerm(self, *args)

    def Initialize(self):
        """Initialize(self)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_Initialize(self)

    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkShapePriorMAPCostFunctionBaseID2D
    def cast(*args):
        """cast(itkLightObject obj) -> itkShapePriorMAPCostFunctionBaseID2D"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkShapePriorMAPCostFunctionBaseID2D"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkShapePriorMAPCostFunctionBaseID2D
        
        Create a new object of the class itkShapePriorMAPCostFunctionBaseID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkShapePriorMAPCostFunctionBaseID2D.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkShapePriorMAPCostFunctionBaseID2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShapePriorMAPCostFunctionBaseID2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShapePriorMAPCostFunctionBaseID2D.SetShapeFunction = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_SetShapeFunction,None,itkShapePriorMAPCostFunctionBaseID2D)
itkShapePriorMAPCostFunctionBaseID2D.GetShapeFunction = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_GetShapeFunction,None,itkShapePriorMAPCostFunctionBaseID2D)
itkShapePriorMAPCostFunctionBaseID2D.SetActiveRegion = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_SetActiveRegion,None,itkShapePriorMAPCostFunctionBaseID2D)
itkShapePriorMAPCostFunctionBaseID2D.GetActiveRegion = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_GetActiveRegion,None,itkShapePriorMAPCostFunctionBaseID2D)
itkShapePriorMAPCostFunctionBaseID2D.SetFeatureImage = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_SetFeatureImage,None,itkShapePriorMAPCostFunctionBaseID2D)
itkShapePriorMAPCostFunctionBaseID2D.GetFeatureImage = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_GetFeatureImage,None,itkShapePriorMAPCostFunctionBaseID2D)
itkShapePriorMAPCostFunctionBaseID2D.ComputeLogInsideTerm = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_ComputeLogInsideTerm,None,itkShapePriorMAPCostFunctionBaseID2D)
itkShapePriorMAPCostFunctionBaseID2D.ComputeLogGradientTerm = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_ComputeLogGradientTerm,None,itkShapePriorMAPCostFunctionBaseID2D)
itkShapePriorMAPCostFunctionBaseID2D.ComputeLogShapePriorTerm = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_ComputeLogShapePriorTerm,None,itkShapePriorMAPCostFunctionBaseID2D)
itkShapePriorMAPCostFunctionBaseID2D.ComputeLogPosePriorTerm = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_ComputeLogPosePriorTerm,None,itkShapePriorMAPCostFunctionBaseID2D)
itkShapePriorMAPCostFunctionBaseID2D.Initialize = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_Initialize,None,itkShapePriorMAPCostFunctionBaseID2D)
itkShapePriorMAPCostFunctionBaseID2D.GetPointer = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_GetPointer,None,itkShapePriorMAPCostFunctionBaseID2D)
itkShapePriorMAPCostFunctionBaseID2D_swigregister = _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_swigregister
itkShapePriorMAPCostFunctionBaseID2D_swigregister(itkShapePriorMAPCostFunctionBaseID2D)

def itkShapePriorMAPCostFunctionBaseID2D_cast(*args):
  """itkShapePriorMAPCostFunctionBaseID2D_cast(itkLightObject obj) -> itkShapePriorMAPCostFunctionBaseID2D"""
  return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID2D_cast(*args)

class itkShapePriorMAPCostFunctionBaseID3D(itkSingleValuedCostFunction):
    """Proxy of C++ itkShapePriorMAPCostFunctionBaseID3D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_ImageDimension
    def SetShapeFunction(self, *args):
        """SetShapeFunction(self, itk::ShapeSignedDistanceFunction<(double,3u)> _arg)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_SetShapeFunction(self, *args)

    def GetShapeFunction(self):
        """GetShapeFunction(self) -> itk::ShapeSignedDistanceFunction<(double,3u)>"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_GetShapeFunction(self)

    def SetActiveRegion(self, *args):
        """SetActiveRegion(self, itkVectorContainerUILSND3 _arg)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_SetActiveRegion(self, *args)

    def GetActiveRegion(self):
        """GetActiveRegion(self) -> itkVectorContainerUILSND3"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_GetActiveRegion(self)

    def SetFeatureImage(self, *args):
        """SetFeatureImage(self, itkImageD3 _arg)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_SetFeatureImage(self, *args)

    def GetFeatureImage(self):
        """GetFeatureImage(self) -> itkImageD3"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_GetFeatureImage(self)

    def ComputeLogInsideTerm(self, *args):
        """ComputeLogInsideTerm(self, itkArrayD arg0) -> double"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_ComputeLogInsideTerm(self, *args)

    def ComputeLogGradientTerm(self, *args):
        """ComputeLogGradientTerm(self, itkArrayD arg0) -> double"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_ComputeLogGradientTerm(self, *args)

    def ComputeLogShapePriorTerm(self, *args):
        """ComputeLogShapePriorTerm(self, itkArrayD arg0) -> double"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_ComputeLogShapePriorTerm(self, *args)

    def ComputeLogPosePriorTerm(self, *args):
        """ComputeLogPosePriorTerm(self, itkArrayD arg0) -> double"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_ComputeLogPosePriorTerm(self, *args)

    def Initialize(self):
        """Initialize(self)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_Initialize(self)

    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkShapePriorMAPCostFunctionBaseID3D
    def cast(*args):
        """cast(itkLightObject obj) -> itkShapePriorMAPCostFunctionBaseID3D"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkShapePriorMAPCostFunctionBaseID3D"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkShapePriorMAPCostFunctionBaseID3D
        
        Create a new object of the class itkShapePriorMAPCostFunctionBaseID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkShapePriorMAPCostFunctionBaseID3D.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkShapePriorMAPCostFunctionBaseID3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShapePriorMAPCostFunctionBaseID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShapePriorMAPCostFunctionBaseID3D.SetShapeFunction = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_SetShapeFunction,None,itkShapePriorMAPCostFunctionBaseID3D)
itkShapePriorMAPCostFunctionBaseID3D.GetShapeFunction = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_GetShapeFunction,None,itkShapePriorMAPCostFunctionBaseID3D)
itkShapePriorMAPCostFunctionBaseID3D.SetActiveRegion = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_SetActiveRegion,None,itkShapePriorMAPCostFunctionBaseID3D)
itkShapePriorMAPCostFunctionBaseID3D.GetActiveRegion = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_GetActiveRegion,None,itkShapePriorMAPCostFunctionBaseID3D)
itkShapePriorMAPCostFunctionBaseID3D.SetFeatureImage = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_SetFeatureImage,None,itkShapePriorMAPCostFunctionBaseID3D)
itkShapePriorMAPCostFunctionBaseID3D.GetFeatureImage = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_GetFeatureImage,None,itkShapePriorMAPCostFunctionBaseID3D)
itkShapePriorMAPCostFunctionBaseID3D.ComputeLogInsideTerm = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_ComputeLogInsideTerm,None,itkShapePriorMAPCostFunctionBaseID3D)
itkShapePriorMAPCostFunctionBaseID3D.ComputeLogGradientTerm = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_ComputeLogGradientTerm,None,itkShapePriorMAPCostFunctionBaseID3D)
itkShapePriorMAPCostFunctionBaseID3D.ComputeLogShapePriorTerm = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_ComputeLogShapePriorTerm,None,itkShapePriorMAPCostFunctionBaseID3D)
itkShapePriorMAPCostFunctionBaseID3D.ComputeLogPosePriorTerm = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_ComputeLogPosePriorTerm,None,itkShapePriorMAPCostFunctionBaseID3D)
itkShapePriorMAPCostFunctionBaseID3D.Initialize = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_Initialize,None,itkShapePriorMAPCostFunctionBaseID3D)
itkShapePriorMAPCostFunctionBaseID3D.GetPointer = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_GetPointer,None,itkShapePriorMAPCostFunctionBaseID3D)
itkShapePriorMAPCostFunctionBaseID3D_swigregister = _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_swigregister
itkShapePriorMAPCostFunctionBaseID3D_swigregister(itkShapePriorMAPCostFunctionBaseID3D)

def itkShapePriorMAPCostFunctionBaseID3D_cast(*args):
  """itkShapePriorMAPCostFunctionBaseID3D_cast(itkLightObject obj) -> itkShapePriorMAPCostFunctionBaseID3D"""
  return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseID3D_cast(*args)

class itkShapePriorMAPCostFunctionBaseIF2F(itkSingleValuedCostFunction):
    """Proxy of C++ itkShapePriorMAPCostFunctionBaseIF2F class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_ImageDimension
    def SetShapeFunction(self, *args):
        """SetShapeFunction(self, itk::ShapeSignedDistanceFunction<(double,2u)> _arg)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_SetShapeFunction(self, *args)

    def GetShapeFunction(self):
        """GetShapeFunction(self) -> itk::ShapeSignedDistanceFunction<(double,2u)>"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_GetShapeFunction(self)

    def SetActiveRegion(self, *args):
        """SetActiveRegion(self, itkVectorContainerUILSNF2 _arg)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_SetActiveRegion(self, *args)

    def GetActiveRegion(self):
        """GetActiveRegion(self) -> itkVectorContainerUILSNF2"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_GetActiveRegion(self)

    def SetFeatureImage(self, *args):
        """SetFeatureImage(self, itkImageF2 _arg)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_SetFeatureImage(self, *args)

    def GetFeatureImage(self):
        """GetFeatureImage(self) -> itkImageF2"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_GetFeatureImage(self)

    def ComputeLogInsideTerm(self, *args):
        """ComputeLogInsideTerm(self, itkArrayD arg0) -> double"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_ComputeLogInsideTerm(self, *args)

    def ComputeLogGradientTerm(self, *args):
        """ComputeLogGradientTerm(self, itkArrayD arg0) -> double"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_ComputeLogGradientTerm(self, *args)

    def ComputeLogShapePriorTerm(self, *args):
        """ComputeLogShapePriorTerm(self, itkArrayD arg0) -> double"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_ComputeLogShapePriorTerm(self, *args)

    def ComputeLogPosePriorTerm(self, *args):
        """ComputeLogPosePriorTerm(self, itkArrayD arg0) -> double"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_ComputeLogPosePriorTerm(self, *args)

    def Initialize(self):
        """Initialize(self)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_Initialize(self)

    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkShapePriorMAPCostFunctionBaseIF2F
    def cast(*args):
        """cast(itkLightObject obj) -> itkShapePriorMAPCostFunctionBaseIF2F"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkShapePriorMAPCostFunctionBaseIF2F"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkShapePriorMAPCostFunctionBaseIF2F
        
        Create a new object of the class itkShapePriorMAPCostFunctionBaseIF2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkShapePriorMAPCostFunctionBaseIF2F.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkShapePriorMAPCostFunctionBaseIF2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShapePriorMAPCostFunctionBaseIF2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShapePriorMAPCostFunctionBaseIF2F.SetShapeFunction = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_SetShapeFunction,None,itkShapePriorMAPCostFunctionBaseIF2F)
itkShapePriorMAPCostFunctionBaseIF2F.GetShapeFunction = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_GetShapeFunction,None,itkShapePriorMAPCostFunctionBaseIF2F)
itkShapePriorMAPCostFunctionBaseIF2F.SetActiveRegion = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_SetActiveRegion,None,itkShapePriorMAPCostFunctionBaseIF2F)
itkShapePriorMAPCostFunctionBaseIF2F.GetActiveRegion = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_GetActiveRegion,None,itkShapePriorMAPCostFunctionBaseIF2F)
itkShapePriorMAPCostFunctionBaseIF2F.SetFeatureImage = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_SetFeatureImage,None,itkShapePriorMAPCostFunctionBaseIF2F)
itkShapePriorMAPCostFunctionBaseIF2F.GetFeatureImage = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_GetFeatureImage,None,itkShapePriorMAPCostFunctionBaseIF2F)
itkShapePriorMAPCostFunctionBaseIF2F.ComputeLogInsideTerm = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_ComputeLogInsideTerm,None,itkShapePriorMAPCostFunctionBaseIF2F)
itkShapePriorMAPCostFunctionBaseIF2F.ComputeLogGradientTerm = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_ComputeLogGradientTerm,None,itkShapePriorMAPCostFunctionBaseIF2F)
itkShapePriorMAPCostFunctionBaseIF2F.ComputeLogShapePriorTerm = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_ComputeLogShapePriorTerm,None,itkShapePriorMAPCostFunctionBaseIF2F)
itkShapePriorMAPCostFunctionBaseIF2F.ComputeLogPosePriorTerm = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_ComputeLogPosePriorTerm,None,itkShapePriorMAPCostFunctionBaseIF2F)
itkShapePriorMAPCostFunctionBaseIF2F.Initialize = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_Initialize,None,itkShapePriorMAPCostFunctionBaseIF2F)
itkShapePriorMAPCostFunctionBaseIF2F.GetPointer = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_GetPointer,None,itkShapePriorMAPCostFunctionBaseIF2F)
itkShapePriorMAPCostFunctionBaseIF2F_swigregister = _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_swigregister
itkShapePriorMAPCostFunctionBaseIF2F_swigregister(itkShapePriorMAPCostFunctionBaseIF2F)

def itkShapePriorMAPCostFunctionBaseIF2F_cast(*args):
  """itkShapePriorMAPCostFunctionBaseIF2F_cast(itkLightObject obj) -> itkShapePriorMAPCostFunctionBaseIF2F"""
  return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF2F_cast(*args)

class itkShapePriorMAPCostFunctionBaseIF3F(itkSingleValuedCostFunction):
    """Proxy of C++ itkShapePriorMAPCostFunctionBaseIF3F class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_ImageDimension
    def SetShapeFunction(self, *args):
        """SetShapeFunction(self, itk::ShapeSignedDistanceFunction<(double,3u)> _arg)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_SetShapeFunction(self, *args)

    def GetShapeFunction(self):
        """GetShapeFunction(self) -> itk::ShapeSignedDistanceFunction<(double,3u)>"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_GetShapeFunction(self)

    def SetActiveRegion(self, *args):
        """SetActiveRegion(self, itkVectorContainerUILSNF3 _arg)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_SetActiveRegion(self, *args)

    def GetActiveRegion(self):
        """GetActiveRegion(self) -> itkVectorContainerUILSNF3"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_GetActiveRegion(self)

    def SetFeatureImage(self, *args):
        """SetFeatureImage(self, itkImageF3 _arg)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_SetFeatureImage(self, *args)

    def GetFeatureImage(self):
        """GetFeatureImage(self) -> itkImageF3"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_GetFeatureImage(self)

    def ComputeLogInsideTerm(self, *args):
        """ComputeLogInsideTerm(self, itkArrayD arg0) -> double"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_ComputeLogInsideTerm(self, *args)

    def ComputeLogGradientTerm(self, *args):
        """ComputeLogGradientTerm(self, itkArrayD arg0) -> double"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_ComputeLogGradientTerm(self, *args)

    def ComputeLogShapePriorTerm(self, *args):
        """ComputeLogShapePriorTerm(self, itkArrayD arg0) -> double"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_ComputeLogShapePriorTerm(self, *args)

    def ComputeLogPosePriorTerm(self, *args):
        """ComputeLogPosePriorTerm(self, itkArrayD arg0) -> double"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_ComputeLogPosePriorTerm(self, *args)

    def Initialize(self):
        """Initialize(self)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_Initialize(self)

    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkShapePriorMAPCostFunctionBaseIF3F
    def cast(*args):
        """cast(itkLightObject obj) -> itkShapePriorMAPCostFunctionBaseIF3F"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkShapePriorMAPCostFunctionBaseIF3F"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkShapePriorMAPCostFunctionBaseIF3F
        
        Create a new object of the class itkShapePriorMAPCostFunctionBaseIF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkShapePriorMAPCostFunctionBaseIF3F.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkShapePriorMAPCostFunctionBaseIF3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShapePriorMAPCostFunctionBaseIF3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShapePriorMAPCostFunctionBaseIF3F.SetShapeFunction = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_SetShapeFunction,None,itkShapePriorMAPCostFunctionBaseIF3F)
itkShapePriorMAPCostFunctionBaseIF3F.GetShapeFunction = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_GetShapeFunction,None,itkShapePriorMAPCostFunctionBaseIF3F)
itkShapePriorMAPCostFunctionBaseIF3F.SetActiveRegion = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_SetActiveRegion,None,itkShapePriorMAPCostFunctionBaseIF3F)
itkShapePriorMAPCostFunctionBaseIF3F.GetActiveRegion = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_GetActiveRegion,None,itkShapePriorMAPCostFunctionBaseIF3F)
itkShapePriorMAPCostFunctionBaseIF3F.SetFeatureImage = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_SetFeatureImage,None,itkShapePriorMAPCostFunctionBaseIF3F)
itkShapePriorMAPCostFunctionBaseIF3F.GetFeatureImage = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_GetFeatureImage,None,itkShapePriorMAPCostFunctionBaseIF3F)
itkShapePriorMAPCostFunctionBaseIF3F.ComputeLogInsideTerm = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_ComputeLogInsideTerm,None,itkShapePriorMAPCostFunctionBaseIF3F)
itkShapePriorMAPCostFunctionBaseIF3F.ComputeLogGradientTerm = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_ComputeLogGradientTerm,None,itkShapePriorMAPCostFunctionBaseIF3F)
itkShapePriorMAPCostFunctionBaseIF3F.ComputeLogShapePriorTerm = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_ComputeLogShapePriorTerm,None,itkShapePriorMAPCostFunctionBaseIF3F)
itkShapePriorMAPCostFunctionBaseIF3F.ComputeLogPosePriorTerm = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_ComputeLogPosePriorTerm,None,itkShapePriorMAPCostFunctionBaseIF3F)
itkShapePriorMAPCostFunctionBaseIF3F.Initialize = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_Initialize,None,itkShapePriorMAPCostFunctionBaseIF3F)
itkShapePriorMAPCostFunctionBaseIF3F.GetPointer = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_GetPointer,None,itkShapePriorMAPCostFunctionBaseIF3F)
itkShapePriorMAPCostFunctionBaseIF3F_swigregister = _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_swigregister
itkShapePriorMAPCostFunctionBaseIF3F_swigregister(itkShapePriorMAPCostFunctionBaseIF3F)

def itkShapePriorMAPCostFunctionBaseIF3F_cast(*args):
  """itkShapePriorMAPCostFunctionBaseIF3F_cast(itkLightObject obj) -> itkShapePriorMAPCostFunctionBaseIF3F"""
  return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionBaseIF3F_cast(*args)

class itkShapePriorMAPCostFunctionID2D(itkShapePriorMAPCostFunctionBaseID2D):
    """Proxy of C++ itkShapePriorMAPCostFunctionID2D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID2D_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID2D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetShapeParameterMeans(self, *args):
        """SetShapeParameterMeans(self, itkArrayD _arg)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID2D_SetShapeParameterMeans(self, *args)

    def GetShapeParameterMeans(self):
        """GetShapeParameterMeans(self) -> itkArrayD"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID2D_GetShapeParameterMeans(self)

    def SetShapeParameterStandardDeviations(self, *args):
        """SetShapeParameterStandardDeviations(self, itkArrayD _arg)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID2D_SetShapeParameterStandardDeviations(self, *args)

    def GetShapeParameterStandardDeviations(self):
        """GetShapeParameterStandardDeviations(self) -> itkArrayD"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID2D_GetShapeParameterStandardDeviations(self)

    def SetWeights(self, *args):
        """SetWeights(self, itkFixedArrayD4 _arg)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID2D_SetWeights(self, *args)

    def GetWeights(self):
        """GetWeights(self) -> itkFixedArrayD4"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID2D_GetWeights(self)

    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkShapePriorMAPCostFunctionID2D
    def cast(*args):
        """cast(itkLightObject obj) -> itkShapePriorMAPCostFunctionID2D"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID2D_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkShapePriorMAPCostFunctionID2D"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID2D_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkShapePriorMAPCostFunctionID2D
        
        Create a new object of the class itkShapePriorMAPCostFunctionID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkShapePriorMAPCostFunctionID2D.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkShapePriorMAPCostFunctionID2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShapePriorMAPCostFunctionID2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShapePriorMAPCostFunctionID2D.SetShapeParameterMeans = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID2D_SetShapeParameterMeans,None,itkShapePriorMAPCostFunctionID2D)
itkShapePriorMAPCostFunctionID2D.GetShapeParameterMeans = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID2D_GetShapeParameterMeans,None,itkShapePriorMAPCostFunctionID2D)
itkShapePriorMAPCostFunctionID2D.SetShapeParameterStandardDeviations = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID2D_SetShapeParameterStandardDeviations,None,itkShapePriorMAPCostFunctionID2D)
itkShapePriorMAPCostFunctionID2D.GetShapeParameterStandardDeviations = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID2D_GetShapeParameterStandardDeviations,None,itkShapePriorMAPCostFunctionID2D)
itkShapePriorMAPCostFunctionID2D.SetWeights = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID2D_SetWeights,None,itkShapePriorMAPCostFunctionID2D)
itkShapePriorMAPCostFunctionID2D.GetWeights = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID2D_GetWeights,None,itkShapePriorMAPCostFunctionID2D)
itkShapePriorMAPCostFunctionID2D.GetPointer = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID2D_GetPointer,None,itkShapePriorMAPCostFunctionID2D)
itkShapePriorMAPCostFunctionID2D_swigregister = _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID2D_swigregister
itkShapePriorMAPCostFunctionID2D_swigregister(itkShapePriorMAPCostFunctionID2D)

def itkShapePriorMAPCostFunctionID2D___New_orig__():
  """itkShapePriorMAPCostFunctionID2D___New_orig__()"""
  return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID2D___New_orig__()

def itkShapePriorMAPCostFunctionID2D_cast(*args):
  """itkShapePriorMAPCostFunctionID2D_cast(itkLightObject obj) -> itkShapePriorMAPCostFunctionID2D"""
  return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID2D_cast(*args)

class itkShapePriorMAPCostFunctionID3D(itkShapePriorMAPCostFunctionBaseID3D):
    """Proxy of C++ itkShapePriorMAPCostFunctionID3D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID3D_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID3D___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetShapeParameterMeans(self, *args):
        """SetShapeParameterMeans(self, itkArrayD _arg)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID3D_SetShapeParameterMeans(self, *args)

    def GetShapeParameterMeans(self):
        """GetShapeParameterMeans(self) -> itkArrayD"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID3D_GetShapeParameterMeans(self)

    def SetShapeParameterStandardDeviations(self, *args):
        """SetShapeParameterStandardDeviations(self, itkArrayD _arg)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID3D_SetShapeParameterStandardDeviations(self, *args)

    def GetShapeParameterStandardDeviations(self):
        """GetShapeParameterStandardDeviations(self) -> itkArrayD"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID3D_GetShapeParameterStandardDeviations(self)

    def SetWeights(self, *args):
        """SetWeights(self, itkFixedArrayD4 _arg)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID3D_SetWeights(self, *args)

    def GetWeights(self):
        """GetWeights(self) -> itkFixedArrayD4"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID3D_GetWeights(self)

    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkShapePriorMAPCostFunctionID3D
    def cast(*args):
        """cast(itkLightObject obj) -> itkShapePriorMAPCostFunctionID3D"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID3D_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkShapePriorMAPCostFunctionID3D"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID3D_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkShapePriorMAPCostFunctionID3D
        
        Create a new object of the class itkShapePriorMAPCostFunctionID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkShapePriorMAPCostFunctionID3D.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkShapePriorMAPCostFunctionID3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShapePriorMAPCostFunctionID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShapePriorMAPCostFunctionID3D.SetShapeParameterMeans = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID3D_SetShapeParameterMeans,None,itkShapePriorMAPCostFunctionID3D)
itkShapePriorMAPCostFunctionID3D.GetShapeParameterMeans = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID3D_GetShapeParameterMeans,None,itkShapePriorMAPCostFunctionID3D)
itkShapePriorMAPCostFunctionID3D.SetShapeParameterStandardDeviations = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID3D_SetShapeParameterStandardDeviations,None,itkShapePriorMAPCostFunctionID3D)
itkShapePriorMAPCostFunctionID3D.GetShapeParameterStandardDeviations = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID3D_GetShapeParameterStandardDeviations,None,itkShapePriorMAPCostFunctionID3D)
itkShapePriorMAPCostFunctionID3D.SetWeights = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID3D_SetWeights,None,itkShapePriorMAPCostFunctionID3D)
itkShapePriorMAPCostFunctionID3D.GetWeights = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID3D_GetWeights,None,itkShapePriorMAPCostFunctionID3D)
itkShapePriorMAPCostFunctionID3D.GetPointer = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID3D_GetPointer,None,itkShapePriorMAPCostFunctionID3D)
itkShapePriorMAPCostFunctionID3D_swigregister = _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID3D_swigregister
itkShapePriorMAPCostFunctionID3D_swigregister(itkShapePriorMAPCostFunctionID3D)

def itkShapePriorMAPCostFunctionID3D___New_orig__():
  """itkShapePriorMAPCostFunctionID3D___New_orig__()"""
  return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID3D___New_orig__()

def itkShapePriorMAPCostFunctionID3D_cast(*args):
  """itkShapePriorMAPCostFunctionID3D_cast(itkLightObject obj) -> itkShapePriorMAPCostFunctionID3D"""
  return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionID3D_cast(*args)

class itkShapePriorMAPCostFunctionIF2F(itkShapePriorMAPCostFunctionBaseIF2F):
    """Proxy of C++ itkShapePriorMAPCostFunctionIF2F class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF2F_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF2F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetShapeParameterMeans(self, *args):
        """SetShapeParameterMeans(self, itkArrayD _arg)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF2F_SetShapeParameterMeans(self, *args)

    def GetShapeParameterMeans(self):
        """GetShapeParameterMeans(self) -> itkArrayD"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF2F_GetShapeParameterMeans(self)

    def SetShapeParameterStandardDeviations(self, *args):
        """SetShapeParameterStandardDeviations(self, itkArrayD _arg)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF2F_SetShapeParameterStandardDeviations(self, *args)

    def GetShapeParameterStandardDeviations(self):
        """GetShapeParameterStandardDeviations(self) -> itkArrayD"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF2F_GetShapeParameterStandardDeviations(self)

    def SetWeights(self, *args):
        """SetWeights(self, itkFixedArrayD4 _arg)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF2F_SetWeights(self, *args)

    def GetWeights(self):
        """GetWeights(self) -> itkFixedArrayD4"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF2F_GetWeights(self)

    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkShapePriorMAPCostFunctionIF2F
    def cast(*args):
        """cast(itkLightObject obj) -> itkShapePriorMAPCostFunctionIF2F"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF2F_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkShapePriorMAPCostFunctionIF2F"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF2F_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkShapePriorMAPCostFunctionIF2F
        
        Create a new object of the class itkShapePriorMAPCostFunctionIF2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkShapePriorMAPCostFunctionIF2F.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkShapePriorMAPCostFunctionIF2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShapePriorMAPCostFunctionIF2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShapePriorMAPCostFunctionIF2F.SetShapeParameterMeans = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF2F_SetShapeParameterMeans,None,itkShapePriorMAPCostFunctionIF2F)
itkShapePriorMAPCostFunctionIF2F.GetShapeParameterMeans = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF2F_GetShapeParameterMeans,None,itkShapePriorMAPCostFunctionIF2F)
itkShapePriorMAPCostFunctionIF2F.SetShapeParameterStandardDeviations = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF2F_SetShapeParameterStandardDeviations,None,itkShapePriorMAPCostFunctionIF2F)
itkShapePriorMAPCostFunctionIF2F.GetShapeParameterStandardDeviations = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF2F_GetShapeParameterStandardDeviations,None,itkShapePriorMAPCostFunctionIF2F)
itkShapePriorMAPCostFunctionIF2F.SetWeights = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF2F_SetWeights,None,itkShapePriorMAPCostFunctionIF2F)
itkShapePriorMAPCostFunctionIF2F.GetWeights = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF2F_GetWeights,None,itkShapePriorMAPCostFunctionIF2F)
itkShapePriorMAPCostFunctionIF2F.GetPointer = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF2F_GetPointer,None,itkShapePriorMAPCostFunctionIF2F)
itkShapePriorMAPCostFunctionIF2F_swigregister = _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF2F_swigregister
itkShapePriorMAPCostFunctionIF2F_swigregister(itkShapePriorMAPCostFunctionIF2F)

def itkShapePriorMAPCostFunctionIF2F___New_orig__():
  """itkShapePriorMAPCostFunctionIF2F___New_orig__()"""
  return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF2F___New_orig__()

def itkShapePriorMAPCostFunctionIF2F_cast(*args):
  """itkShapePriorMAPCostFunctionIF2F_cast(itkLightObject obj) -> itkShapePriorMAPCostFunctionIF2F"""
  return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF2F_cast(*args)

class itkShapePriorMAPCostFunctionIF3F(itkShapePriorMAPCostFunctionBaseIF3F):
    """Proxy of C++ itkShapePriorMAPCostFunctionIF3F class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF3F_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF3F___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetShapeParameterMeans(self, *args):
        """SetShapeParameterMeans(self, itkArrayD _arg)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF3F_SetShapeParameterMeans(self, *args)

    def GetShapeParameterMeans(self):
        """GetShapeParameterMeans(self) -> itkArrayD"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF3F_GetShapeParameterMeans(self)

    def SetShapeParameterStandardDeviations(self, *args):
        """SetShapeParameterStandardDeviations(self, itkArrayD _arg)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF3F_SetShapeParameterStandardDeviations(self, *args)

    def GetShapeParameterStandardDeviations(self):
        """GetShapeParameterStandardDeviations(self) -> itkArrayD"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF3F_GetShapeParameterStandardDeviations(self)

    def SetWeights(self, *args):
        """SetWeights(self, itkFixedArrayD4 _arg)"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF3F_SetWeights(self, *args)

    def GetWeights(self):
        """GetWeights(self) -> itkFixedArrayD4"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF3F_GetWeights(self)

    __swig_destroy__ = _ITKCostFunctionsPython.delete_itkShapePriorMAPCostFunctionIF3F
    def cast(*args):
        """cast(itkLightObject obj) -> itkShapePriorMAPCostFunctionIF3F"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF3F_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkShapePriorMAPCostFunctionIF3F"""
        return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF3F_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkShapePriorMAPCostFunctionIF3F
        
        Create a new object of the class itkShapePriorMAPCostFunctionIF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkShapePriorMAPCostFunctionIF3F.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkShapePriorMAPCostFunctionIF3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkShapePriorMAPCostFunctionIF3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkShapePriorMAPCostFunctionIF3F.SetShapeParameterMeans = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF3F_SetShapeParameterMeans,None,itkShapePriorMAPCostFunctionIF3F)
itkShapePriorMAPCostFunctionIF3F.GetShapeParameterMeans = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF3F_GetShapeParameterMeans,None,itkShapePriorMAPCostFunctionIF3F)
itkShapePriorMAPCostFunctionIF3F.SetShapeParameterStandardDeviations = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF3F_SetShapeParameterStandardDeviations,None,itkShapePriorMAPCostFunctionIF3F)
itkShapePriorMAPCostFunctionIF3F.GetShapeParameterStandardDeviations = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF3F_GetShapeParameterStandardDeviations,None,itkShapePriorMAPCostFunctionIF3F)
itkShapePriorMAPCostFunctionIF3F.SetWeights = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF3F_SetWeights,None,itkShapePriorMAPCostFunctionIF3F)
itkShapePriorMAPCostFunctionIF3F.GetWeights = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF3F_GetWeights,None,itkShapePriorMAPCostFunctionIF3F)
itkShapePriorMAPCostFunctionIF3F.GetPointer = new_instancemethod(_ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF3F_GetPointer,None,itkShapePriorMAPCostFunctionIF3F)
itkShapePriorMAPCostFunctionIF3F_swigregister = _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF3F_swigregister
itkShapePriorMAPCostFunctionIF3F_swigregister(itkShapePriorMAPCostFunctionIF3F)

def itkShapePriorMAPCostFunctionIF3F___New_orig__():
  """itkShapePriorMAPCostFunctionIF3F___New_orig__()"""
  return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF3F___New_orig__()

def itkShapePriorMAPCostFunctionIF3F_cast(*args):
  """itkShapePriorMAPCostFunctionIF3F_cast(itkLightObject obj) -> itkShapePriorMAPCostFunctionIF3F"""
  return _ITKCostFunctionsPython.itkShapePriorMAPCostFunctionIF3F_cast(*args)



