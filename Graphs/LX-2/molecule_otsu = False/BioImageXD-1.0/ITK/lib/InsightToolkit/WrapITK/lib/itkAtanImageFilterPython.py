# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkAtanImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkAtanImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkAtanImageFilterPython
            return _itkAtanImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkAtanImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkAtanImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkAtanImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import itkEventObjectsPython
import pyBasePython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import ITKRegionsPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkImagePython
import itkFixedArrayPython
import itkCovariantVectorPython
import vnl_vectorPython
import vcl_complexPython
import vnl_matrixPython
import itkVectorPython
import vnl_vector_refPython
import itkPointPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkRGBPixelPython
import itkImageSourcePython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterAPython
def itkAtanImageFilterID3ID3_New():
  return itkAtanImageFilterID3ID3.New()

def itkAtanImageFilterID3ID3_Superclass_New():
  return itkAtanImageFilterID3ID3_Superclass.New()

def itkAtanImageFilterID2ID2_New():
  return itkAtanImageFilterID2ID2.New()

def itkAtanImageFilterID2ID2_Superclass_New():
  return itkAtanImageFilterID2ID2_Superclass.New()

def itkAtanImageFilterIF3IF3_New():
  return itkAtanImageFilterIF3IF3.New()

def itkAtanImageFilterIF3IF3_Superclass_New():
  return itkAtanImageFilterIF3IF3_Superclass.New()

def itkAtanImageFilterIF2IF2_New():
  return itkAtanImageFilterIF2IF2.New()

def itkAtanImageFilterIF2IF2_Superclass_New():
  return itkAtanImageFilterIF2IF2_Superclass.New()

class itkAtanImageFilterID2ID2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    """Proxy of C++ itkAtanImageFilterID2ID2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkAtanImageFilterPython.itkAtanImageFilterID2ID2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::Atan<(double,double)>
        GetFunctor(self) -> itk::Functor::Atan<(double,double)>
        """
        return _itkAtanImageFilterPython.itkAtanImageFilterID2ID2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::Atan<(double,double)> functor)"""
        return _itkAtanImageFilterPython.itkAtanImageFilterID2ID2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkAtanImageFilterPython.delete_itkAtanImageFilterID2ID2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkAtanImageFilterID2ID2_Superclass"""
        return _itkAtanImageFilterPython.itkAtanImageFilterID2ID2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAtanImageFilterID2ID2_Superclass"""
        return _itkAtanImageFilterPython.itkAtanImageFilterID2ID2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAtanImageFilterID2ID2_Superclass
        
        Create a new object of the class itkAtanImageFilterID2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAtanImageFilterID2ID2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAtanImageFilterID2ID2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAtanImageFilterID2ID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAtanImageFilterID2ID2_Superclass.GetFunctor = new_instancemethod(_itkAtanImageFilterPython.itkAtanImageFilterID2ID2_Superclass_GetFunctor,None,itkAtanImageFilterID2ID2_Superclass)
itkAtanImageFilterID2ID2_Superclass.SetFunctor = new_instancemethod(_itkAtanImageFilterPython.itkAtanImageFilterID2ID2_Superclass_SetFunctor,None,itkAtanImageFilterID2ID2_Superclass)
itkAtanImageFilterID2ID2_Superclass.GetPointer = new_instancemethod(_itkAtanImageFilterPython.itkAtanImageFilterID2ID2_Superclass_GetPointer,None,itkAtanImageFilterID2ID2_Superclass)
itkAtanImageFilterID2ID2_Superclass_swigregister = _itkAtanImageFilterPython.itkAtanImageFilterID2ID2_Superclass_swigregister
itkAtanImageFilterID2ID2_Superclass_swigregister(itkAtanImageFilterID2ID2_Superclass)

def itkAtanImageFilterID2ID2_Superclass___New_orig__():
  """itkAtanImageFilterID2ID2_Superclass___New_orig__()"""
  return _itkAtanImageFilterPython.itkAtanImageFilterID2ID2_Superclass___New_orig__()

def itkAtanImageFilterID2ID2_Superclass_cast(*args):
  """itkAtanImageFilterID2ID2_Superclass_cast(itkLightObject obj) -> itkAtanImageFilterID2ID2_Superclass"""
  return _itkAtanImageFilterPython.itkAtanImageFilterID2ID2_Superclass_cast(*args)

class itkAtanImageFilterID3ID3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    """Proxy of C++ itkAtanImageFilterID3ID3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkAtanImageFilterPython.itkAtanImageFilterID3ID3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::Atan<(double,double)>
        GetFunctor(self) -> itk::Functor::Atan<(double,double)>
        """
        return _itkAtanImageFilterPython.itkAtanImageFilterID3ID3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::Atan<(double,double)> functor)"""
        return _itkAtanImageFilterPython.itkAtanImageFilterID3ID3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkAtanImageFilterPython.delete_itkAtanImageFilterID3ID3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkAtanImageFilterID3ID3_Superclass"""
        return _itkAtanImageFilterPython.itkAtanImageFilterID3ID3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAtanImageFilterID3ID3_Superclass"""
        return _itkAtanImageFilterPython.itkAtanImageFilterID3ID3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAtanImageFilterID3ID3_Superclass
        
        Create a new object of the class itkAtanImageFilterID3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAtanImageFilterID3ID3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAtanImageFilterID3ID3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAtanImageFilterID3ID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAtanImageFilterID3ID3_Superclass.GetFunctor = new_instancemethod(_itkAtanImageFilterPython.itkAtanImageFilterID3ID3_Superclass_GetFunctor,None,itkAtanImageFilterID3ID3_Superclass)
itkAtanImageFilterID3ID3_Superclass.SetFunctor = new_instancemethod(_itkAtanImageFilterPython.itkAtanImageFilterID3ID3_Superclass_SetFunctor,None,itkAtanImageFilterID3ID3_Superclass)
itkAtanImageFilterID3ID3_Superclass.GetPointer = new_instancemethod(_itkAtanImageFilterPython.itkAtanImageFilterID3ID3_Superclass_GetPointer,None,itkAtanImageFilterID3ID3_Superclass)
itkAtanImageFilterID3ID3_Superclass_swigregister = _itkAtanImageFilterPython.itkAtanImageFilterID3ID3_Superclass_swigregister
itkAtanImageFilterID3ID3_Superclass_swigregister(itkAtanImageFilterID3ID3_Superclass)

def itkAtanImageFilterID3ID3_Superclass___New_orig__():
  """itkAtanImageFilterID3ID3_Superclass___New_orig__()"""
  return _itkAtanImageFilterPython.itkAtanImageFilterID3ID3_Superclass___New_orig__()

def itkAtanImageFilterID3ID3_Superclass_cast(*args):
  """itkAtanImageFilterID3ID3_Superclass_cast(itkLightObject obj) -> itkAtanImageFilterID3ID3_Superclass"""
  return _itkAtanImageFilterPython.itkAtanImageFilterID3ID3_Superclass_cast(*args)

class itkAtanImageFilterIF2IF2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    """Proxy of C++ itkAtanImageFilterIF2IF2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkAtanImageFilterPython.itkAtanImageFilterIF2IF2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::Atan<(float,float)>
        GetFunctor(self) -> itk::Functor::Atan<(float,float)>
        """
        return _itkAtanImageFilterPython.itkAtanImageFilterIF2IF2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::Atan<(float,float)> functor)"""
        return _itkAtanImageFilterPython.itkAtanImageFilterIF2IF2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkAtanImageFilterPython.delete_itkAtanImageFilterIF2IF2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkAtanImageFilterIF2IF2_Superclass"""
        return _itkAtanImageFilterPython.itkAtanImageFilterIF2IF2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAtanImageFilterIF2IF2_Superclass"""
        return _itkAtanImageFilterPython.itkAtanImageFilterIF2IF2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAtanImageFilterIF2IF2_Superclass
        
        Create a new object of the class itkAtanImageFilterIF2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAtanImageFilterIF2IF2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAtanImageFilterIF2IF2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAtanImageFilterIF2IF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAtanImageFilterIF2IF2_Superclass.GetFunctor = new_instancemethod(_itkAtanImageFilterPython.itkAtanImageFilterIF2IF2_Superclass_GetFunctor,None,itkAtanImageFilterIF2IF2_Superclass)
itkAtanImageFilterIF2IF2_Superclass.SetFunctor = new_instancemethod(_itkAtanImageFilterPython.itkAtanImageFilterIF2IF2_Superclass_SetFunctor,None,itkAtanImageFilterIF2IF2_Superclass)
itkAtanImageFilterIF2IF2_Superclass.GetPointer = new_instancemethod(_itkAtanImageFilterPython.itkAtanImageFilterIF2IF2_Superclass_GetPointer,None,itkAtanImageFilterIF2IF2_Superclass)
itkAtanImageFilterIF2IF2_Superclass_swigregister = _itkAtanImageFilterPython.itkAtanImageFilterIF2IF2_Superclass_swigregister
itkAtanImageFilterIF2IF2_Superclass_swigregister(itkAtanImageFilterIF2IF2_Superclass)

def itkAtanImageFilterIF2IF2_Superclass___New_orig__():
  """itkAtanImageFilterIF2IF2_Superclass___New_orig__()"""
  return _itkAtanImageFilterPython.itkAtanImageFilterIF2IF2_Superclass___New_orig__()

def itkAtanImageFilterIF2IF2_Superclass_cast(*args):
  """itkAtanImageFilterIF2IF2_Superclass_cast(itkLightObject obj) -> itkAtanImageFilterIF2IF2_Superclass"""
  return _itkAtanImageFilterPython.itkAtanImageFilterIF2IF2_Superclass_cast(*args)

class itkAtanImageFilterIF3IF3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    """Proxy of C++ itkAtanImageFilterIF3IF3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkAtanImageFilterPython.itkAtanImageFilterIF3IF3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::Atan<(float,float)>
        GetFunctor(self) -> itk::Functor::Atan<(float,float)>
        """
        return _itkAtanImageFilterPython.itkAtanImageFilterIF3IF3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::Atan<(float,float)> functor)"""
        return _itkAtanImageFilterPython.itkAtanImageFilterIF3IF3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkAtanImageFilterPython.delete_itkAtanImageFilterIF3IF3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkAtanImageFilterIF3IF3_Superclass"""
        return _itkAtanImageFilterPython.itkAtanImageFilterIF3IF3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAtanImageFilterIF3IF3_Superclass"""
        return _itkAtanImageFilterPython.itkAtanImageFilterIF3IF3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAtanImageFilterIF3IF3_Superclass
        
        Create a new object of the class itkAtanImageFilterIF3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAtanImageFilterIF3IF3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAtanImageFilterIF3IF3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAtanImageFilterIF3IF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAtanImageFilterIF3IF3_Superclass.GetFunctor = new_instancemethod(_itkAtanImageFilterPython.itkAtanImageFilterIF3IF3_Superclass_GetFunctor,None,itkAtanImageFilterIF3IF3_Superclass)
itkAtanImageFilterIF3IF3_Superclass.SetFunctor = new_instancemethod(_itkAtanImageFilterPython.itkAtanImageFilterIF3IF3_Superclass_SetFunctor,None,itkAtanImageFilterIF3IF3_Superclass)
itkAtanImageFilterIF3IF3_Superclass.GetPointer = new_instancemethod(_itkAtanImageFilterPython.itkAtanImageFilterIF3IF3_Superclass_GetPointer,None,itkAtanImageFilterIF3IF3_Superclass)
itkAtanImageFilterIF3IF3_Superclass_swigregister = _itkAtanImageFilterPython.itkAtanImageFilterIF3IF3_Superclass_swigregister
itkAtanImageFilterIF3IF3_Superclass_swigregister(itkAtanImageFilterIF3IF3_Superclass)

def itkAtanImageFilterIF3IF3_Superclass___New_orig__():
  """itkAtanImageFilterIF3IF3_Superclass___New_orig__()"""
  return _itkAtanImageFilterPython.itkAtanImageFilterIF3IF3_Superclass___New_orig__()

def itkAtanImageFilterIF3IF3_Superclass_cast(*args):
  """itkAtanImageFilterIF3IF3_Superclass_cast(itkLightObject obj) -> itkAtanImageFilterIF3IF3_Superclass"""
  return _itkAtanImageFilterPython.itkAtanImageFilterIF3IF3_Superclass_cast(*args)

class itkAtanImageFilterID2ID2(itkAtanImageFilterID2ID2_Superclass):
    """Proxy of C++ itkAtanImageFilterID2ID2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToDoubleCheck = _itkAtanImageFilterPython.itkAtanImageFilterID2ID2_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAtanImageFilterPython.itkAtanImageFilterID2ID2_DoubleConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkAtanImageFilterPython.itkAtanImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkAtanImageFilterPython.delete_itkAtanImageFilterID2ID2
    def cast(*args):
        """cast(itkLightObject obj) -> itkAtanImageFilterID2ID2"""
        return _itkAtanImageFilterPython.itkAtanImageFilterID2ID2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAtanImageFilterID2ID2"""
        return _itkAtanImageFilterPython.itkAtanImageFilterID2ID2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAtanImageFilterID2ID2
        
        Create a new object of the class itkAtanImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAtanImageFilterID2ID2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAtanImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAtanImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAtanImageFilterID2ID2.GetPointer = new_instancemethod(_itkAtanImageFilterPython.itkAtanImageFilterID2ID2_GetPointer,None,itkAtanImageFilterID2ID2)
itkAtanImageFilterID2ID2_swigregister = _itkAtanImageFilterPython.itkAtanImageFilterID2ID2_swigregister
itkAtanImageFilterID2ID2_swigregister(itkAtanImageFilterID2ID2)

def itkAtanImageFilterID2ID2___New_orig__():
  """itkAtanImageFilterID2ID2___New_orig__()"""
  return _itkAtanImageFilterPython.itkAtanImageFilterID2ID2___New_orig__()

def itkAtanImageFilterID2ID2_cast(*args):
  """itkAtanImageFilterID2ID2_cast(itkLightObject obj) -> itkAtanImageFilterID2ID2"""
  return _itkAtanImageFilterPython.itkAtanImageFilterID2ID2_cast(*args)

class itkAtanImageFilterID3ID3(itkAtanImageFilterID3ID3_Superclass):
    """Proxy of C++ itkAtanImageFilterID3ID3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToDoubleCheck = _itkAtanImageFilterPython.itkAtanImageFilterID3ID3_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAtanImageFilterPython.itkAtanImageFilterID3ID3_DoubleConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkAtanImageFilterPython.itkAtanImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkAtanImageFilterPython.delete_itkAtanImageFilterID3ID3
    def cast(*args):
        """cast(itkLightObject obj) -> itkAtanImageFilterID3ID3"""
        return _itkAtanImageFilterPython.itkAtanImageFilterID3ID3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAtanImageFilterID3ID3"""
        return _itkAtanImageFilterPython.itkAtanImageFilterID3ID3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAtanImageFilterID3ID3
        
        Create a new object of the class itkAtanImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAtanImageFilterID3ID3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAtanImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAtanImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAtanImageFilterID3ID3.GetPointer = new_instancemethod(_itkAtanImageFilterPython.itkAtanImageFilterID3ID3_GetPointer,None,itkAtanImageFilterID3ID3)
itkAtanImageFilterID3ID3_swigregister = _itkAtanImageFilterPython.itkAtanImageFilterID3ID3_swigregister
itkAtanImageFilterID3ID3_swigregister(itkAtanImageFilterID3ID3)

def itkAtanImageFilterID3ID3___New_orig__():
  """itkAtanImageFilterID3ID3___New_orig__()"""
  return _itkAtanImageFilterPython.itkAtanImageFilterID3ID3___New_orig__()

def itkAtanImageFilterID3ID3_cast(*args):
  """itkAtanImageFilterID3ID3_cast(itkLightObject obj) -> itkAtanImageFilterID3ID3"""
  return _itkAtanImageFilterPython.itkAtanImageFilterID3ID3_cast(*args)

class itkAtanImageFilterIF2IF2(itkAtanImageFilterIF2IF2_Superclass):
    """Proxy of C++ itkAtanImageFilterIF2IF2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToDoubleCheck = _itkAtanImageFilterPython.itkAtanImageFilterIF2IF2_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAtanImageFilterPython.itkAtanImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkAtanImageFilterPython.itkAtanImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkAtanImageFilterPython.delete_itkAtanImageFilterIF2IF2
    def cast(*args):
        """cast(itkLightObject obj) -> itkAtanImageFilterIF2IF2"""
        return _itkAtanImageFilterPython.itkAtanImageFilterIF2IF2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAtanImageFilterIF2IF2"""
        return _itkAtanImageFilterPython.itkAtanImageFilterIF2IF2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAtanImageFilterIF2IF2
        
        Create a new object of the class itkAtanImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAtanImageFilterIF2IF2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAtanImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAtanImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAtanImageFilterIF2IF2.GetPointer = new_instancemethod(_itkAtanImageFilterPython.itkAtanImageFilterIF2IF2_GetPointer,None,itkAtanImageFilterIF2IF2)
itkAtanImageFilterIF2IF2_swigregister = _itkAtanImageFilterPython.itkAtanImageFilterIF2IF2_swigregister
itkAtanImageFilterIF2IF2_swigregister(itkAtanImageFilterIF2IF2)

def itkAtanImageFilterIF2IF2___New_orig__():
  """itkAtanImageFilterIF2IF2___New_orig__()"""
  return _itkAtanImageFilterPython.itkAtanImageFilterIF2IF2___New_orig__()

def itkAtanImageFilterIF2IF2_cast(*args):
  """itkAtanImageFilterIF2IF2_cast(itkLightObject obj) -> itkAtanImageFilterIF2IF2"""
  return _itkAtanImageFilterPython.itkAtanImageFilterIF2IF2_cast(*args)

class itkAtanImageFilterIF3IF3(itkAtanImageFilterIF3IF3_Superclass):
    """Proxy of C++ itkAtanImageFilterIF3IF3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToDoubleCheck = _itkAtanImageFilterPython.itkAtanImageFilterIF3IF3_InputConvertibleToDoubleCheck
    DoubleConvertibleToOutputCheck = _itkAtanImageFilterPython.itkAtanImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkAtanImageFilterPython.itkAtanImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkAtanImageFilterPython.delete_itkAtanImageFilterIF3IF3
    def cast(*args):
        """cast(itkLightObject obj) -> itkAtanImageFilterIF3IF3"""
        return _itkAtanImageFilterPython.itkAtanImageFilterIF3IF3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAtanImageFilterIF3IF3"""
        return _itkAtanImageFilterPython.itkAtanImageFilterIF3IF3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAtanImageFilterIF3IF3
        
        Create a new object of the class itkAtanImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAtanImageFilterIF3IF3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAtanImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAtanImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAtanImageFilterIF3IF3.GetPointer = new_instancemethod(_itkAtanImageFilterPython.itkAtanImageFilterIF3IF3_GetPointer,None,itkAtanImageFilterIF3IF3)
itkAtanImageFilterIF3IF3_swigregister = _itkAtanImageFilterPython.itkAtanImageFilterIF3IF3_swigregister
itkAtanImageFilterIF3IF3_swigregister(itkAtanImageFilterIF3IF3)

def itkAtanImageFilterIF3IF3___New_orig__():
  """itkAtanImageFilterIF3IF3___New_orig__()"""
  return _itkAtanImageFilterPython.itkAtanImageFilterIF3IF3___New_orig__()

def itkAtanImageFilterIF3IF3_cast(*args):
  """itkAtanImageFilterIF3IF3_cast(itkLightObject obj) -> itkAtanImageFilterIF3IF3"""
  return _itkAtanImageFilterPython.itkAtanImageFilterIF3IF3_cast(*args)



