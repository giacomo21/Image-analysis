// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module ITKLabelMapBaseChicken
#endif
#ifdef SWIGCSHARP
%module ITKLabelMapBaseCsharp
#endif
#ifdef SWIGGUILE
%module ITKLabelMapBaseGuile
#endif
#ifdef SWIGJAVA
%module ITKLabelMapBaseJava
#endif
#ifdef SWIGLUA
%module ITKLabelMapBaseLua
#endif
#ifdef SWIGMODULA3
%module ITKLabelMapBaseModula3
#endif
#ifdef SWIGMZSCHEME
%module ITKLabelMapBaseMzscheme
#endif
#ifdef SWIGOCAML
%module ITKLabelMapBaseOcaml
#endif
#ifdef SWIGPERL
%module ITKLabelMapBasePerl
#endif
#ifdef SWIGPERL5
%module ITKLabelMapBasePerl5
#endif
#ifdef SWIGPHP
%module ITKLabelMapBasePhp
#endif
#ifdef SWIGPHP4
%module ITKLabelMapBasePhp4
#endif
#ifdef SWIGPHP5
%module ITKLabelMapBasePhp5
#endif
#ifdef SWIGPIKE
%module ITKLabelMapBasePike
#endif
#ifdef SWIGPYTHON
%module ITKLabelMapBasePython
#endif
#ifdef SWIGR
%module ITKLabelMapBaseR
#endif
#ifdef SWIGRUBY
%module ITKLabelMapBaseRuby
#endif
#ifdef SWIGSEXP
%module ITKLabelMapBaseSexp
#endif
#ifdef SWIGTCL
%module ITKLabelMapBaseTcl
#endif
#ifdef SWIGXML
%module ITKLabelMapBaseXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
#include "Numerics.includes"
#include "BinaryMorphology.includes"
%}


%{
%}




%import wrap_itkLabelMap.i
%import wrap_ITKRegions.i
%import wrap_itkImage.i
%import wrap_ITKCommonBase.i
%import wrap_itkImageSource.i


%include itk.i
%include wrap_ITKLabelMapBase_ext.i


 class itkImageSourceLM2 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     itkLabelMap2 * GetOutput();
     itkLabelMap2 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceLM2(itkImageSourceLM2 const & arg0);
     void operator=(itkImageSourceLM2 const & arg0);
   protected:
     itkImageSourceLM2();
     ~itkImageSourceLM2();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion2 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceLM2_Pointer {
   public:
     itkImageSourceLM2_Pointer();
     itkImageSourceLM2_Pointer(itkImageSourceLM2_Pointer const & p);
     itkImageSourceLM2_Pointer(itkImageSourceLM2 * p);
     ~itkImageSourceLM2_Pointer();
     itkImageSourceLM2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceLM2 * GetPointer() const;
     bool operator<(itkImageSourceLM2_Pointer const & r) const;
     bool operator>(itkImageSourceLM2_Pointer const & r) const;
     bool operator<=(itkImageSourceLM2_Pointer const & r) const;
     bool operator>=(itkImageSourceLM2_Pointer const & r) const;
     itkImageSourceLM2_Pointer & operator=(itkImageSourceLM2_Pointer const & r);
     itkImageSourceLM2_Pointer & operator=(itkImageSourceLM2 * r);
     itkImageSourceLM2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceLM3 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     itkLabelMap3 * GetOutput();
     itkLabelMap3 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceLM3(itkImageSourceLM3 const & arg0);
     void operator=(itkImageSourceLM3 const & arg0);
   protected:
     itkImageSourceLM3();
     ~itkImageSourceLM3();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion3 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceLM3_Pointer {
   public:
     itkImageSourceLM3_Pointer();
     itkImageSourceLM3_Pointer(itkImageSourceLM3_Pointer const & p);
     itkImageSourceLM3_Pointer(itkImageSourceLM3 * p);
     ~itkImageSourceLM3_Pointer();
     itkImageSourceLM3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceLM3 * GetPointer() const;
     bool operator<(itkImageSourceLM3_Pointer const & r) const;
     bool operator>(itkImageSourceLM3_Pointer const & r) const;
     bool operator<=(itkImageSourceLM3_Pointer const & r) const;
     bool operator>=(itkImageSourceLM3_Pointer const & r) const;
     itkImageSourceLM3_Pointer & operator=(itkImageSourceLM3_Pointer const & r);
     itkImageSourceLM3_Pointer & operator=(itkImageSourceLM3 * r);
     itkImageSourceLM3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterID2LM2 : public itkImageSourceLM2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageD2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageD2 const * image);
     itkImageD2 const * GetInput();
     itkImageD2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageD2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageD2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterID2LM2(itkImageToImageFilterID2LM2 const & arg0);
     void operator=(itkImageToImageFilterID2LM2 const & arg0);
   protected:
     itkImageToImageFilterID2LM2();
     ~itkImageToImageFilterID2LM2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterID2LM2_Pointer {
   public:
     itkImageToImageFilterID2LM2_Pointer();
     itkImageToImageFilterID2LM2_Pointer(itkImageToImageFilterID2LM2_Pointer const & p);
     itkImageToImageFilterID2LM2_Pointer(itkImageToImageFilterID2LM2 * p);
     ~itkImageToImageFilterID2LM2_Pointer();
     itkImageToImageFilterID2LM2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterID2LM2 * GetPointer() const;
     bool operator<(itkImageToImageFilterID2LM2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterID2LM2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterID2LM2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterID2LM2_Pointer const & r) const;
     itkImageToImageFilterID2LM2_Pointer & operator=(itkImageToImageFilterID2LM2_Pointer const & r);
     itkImageToImageFilterID2LM2_Pointer & operator=(itkImageToImageFilterID2LM2 * r);
     itkImageToImageFilterID2LM2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterID3LM3 : public itkImageSourceLM3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageD3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageD3 const * image);
     itkImageD3 const * GetInput();
     itkImageD3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageD3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageD3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterID3LM3(itkImageToImageFilterID3LM3 const & arg0);
     void operator=(itkImageToImageFilterID3LM3 const & arg0);
   protected:
     itkImageToImageFilterID3LM3();
     ~itkImageToImageFilterID3LM3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterID3LM3_Pointer {
   public:
     itkImageToImageFilterID3LM3_Pointer();
     itkImageToImageFilterID3LM3_Pointer(itkImageToImageFilterID3LM3_Pointer const & p);
     itkImageToImageFilterID3LM3_Pointer(itkImageToImageFilterID3LM3 * p);
     ~itkImageToImageFilterID3LM3_Pointer();
     itkImageToImageFilterID3LM3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterID3LM3 * GetPointer() const;
     bool operator<(itkImageToImageFilterID3LM3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterID3LM3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterID3LM3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterID3LM3_Pointer const & r) const;
     itkImageToImageFilterID3LM3_Pointer & operator=(itkImageToImageFilterID3LM3_Pointer const & r);
     itkImageToImageFilterID3LM3_Pointer & operator=(itkImageToImageFilterID3LM3 * r);
     itkImageToImageFilterID3LM3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIF2LM2 : public itkImageSourceLM2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageF2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageF2 const * image);
     itkImageF2 const * GetInput();
     itkImageF2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageF2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageF2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIF2LM2(itkImageToImageFilterIF2LM2 const & arg0);
     void operator=(itkImageToImageFilterIF2LM2 const & arg0);
   protected:
     itkImageToImageFilterIF2LM2();
     ~itkImageToImageFilterIF2LM2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIF2LM2_Pointer {
   public:
     itkImageToImageFilterIF2LM2_Pointer();
     itkImageToImageFilterIF2LM2_Pointer(itkImageToImageFilterIF2LM2_Pointer const & p);
     itkImageToImageFilterIF2LM2_Pointer(itkImageToImageFilterIF2LM2 * p);
     ~itkImageToImageFilterIF2LM2_Pointer();
     itkImageToImageFilterIF2LM2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIF2LM2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIF2LM2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIF2LM2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIF2LM2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIF2LM2_Pointer const & r) const;
     itkImageToImageFilterIF2LM2_Pointer & operator=(itkImageToImageFilterIF2LM2_Pointer const & r);
     itkImageToImageFilterIF2LM2_Pointer & operator=(itkImageToImageFilterIF2LM2 * r);
     itkImageToImageFilterIF2LM2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIF3LM3 : public itkImageSourceLM3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageF3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageF3 const * image);
     itkImageF3 const * GetInput();
     itkImageF3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageF3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageF3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIF3LM3(itkImageToImageFilterIF3LM3 const & arg0);
     void operator=(itkImageToImageFilterIF3LM3 const & arg0);
   protected:
     itkImageToImageFilterIF3LM3();
     ~itkImageToImageFilterIF3LM3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIF3LM3_Pointer {
   public:
     itkImageToImageFilterIF3LM3_Pointer();
     itkImageToImageFilterIF3LM3_Pointer(itkImageToImageFilterIF3LM3_Pointer const & p);
     itkImageToImageFilterIF3LM3_Pointer(itkImageToImageFilterIF3LM3 * p);
     ~itkImageToImageFilterIF3LM3_Pointer();
     itkImageToImageFilterIF3LM3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIF3LM3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIF3LM3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIF3LM3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIF3LM3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIF3LM3_Pointer const & r) const;
     itkImageToImageFilterIF3LM3_Pointer & operator=(itkImageToImageFilterIF3LM3_Pointer const & r);
     itkImageToImageFilterIF3LM3_Pointer & operator=(itkImageToImageFilterIF3LM3 * r);
     itkImageToImageFilterIF3LM3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUC2LM2 : public itkImageSourceLM2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUC2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUC2 const * image);
     itkImageUC2 const * GetInput();
     itkImageUC2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUC2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUC2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUC2LM2(itkImageToImageFilterIUC2LM2 const & arg0);
     void operator=(itkImageToImageFilterIUC2LM2 const & arg0);
   protected:
     itkImageToImageFilterIUC2LM2();
     ~itkImageToImageFilterIUC2LM2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUC2LM2_Pointer {
   public:
     itkImageToImageFilterIUC2LM2_Pointer();
     itkImageToImageFilterIUC2LM2_Pointer(itkImageToImageFilterIUC2LM2_Pointer const & p);
     itkImageToImageFilterIUC2LM2_Pointer(itkImageToImageFilterIUC2LM2 * p);
     ~itkImageToImageFilterIUC2LM2_Pointer();
     itkImageToImageFilterIUC2LM2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUC2LM2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUC2LM2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUC2LM2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUC2LM2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUC2LM2_Pointer const & r) const;
     itkImageToImageFilterIUC2LM2_Pointer & operator=(itkImageToImageFilterIUC2LM2_Pointer const & r);
     itkImageToImageFilterIUC2LM2_Pointer & operator=(itkImageToImageFilterIUC2LM2 * r);
     itkImageToImageFilterIUC2LM2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUC3LM3 : public itkImageSourceLM3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUC3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUC3 const * image);
     itkImageUC3 const * GetInput();
     itkImageUC3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUC3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUC3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUC3LM3(itkImageToImageFilterIUC3LM3 const & arg0);
     void operator=(itkImageToImageFilterIUC3LM3 const & arg0);
   protected:
     itkImageToImageFilterIUC3LM3();
     ~itkImageToImageFilterIUC3LM3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUC3LM3_Pointer {
   public:
     itkImageToImageFilterIUC3LM3_Pointer();
     itkImageToImageFilterIUC3LM3_Pointer(itkImageToImageFilterIUC3LM3_Pointer const & p);
     itkImageToImageFilterIUC3LM3_Pointer(itkImageToImageFilterIUC3LM3 * p);
     ~itkImageToImageFilterIUC3LM3_Pointer();
     itkImageToImageFilterIUC3LM3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUC3LM3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUC3LM3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUC3LM3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUC3LM3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUC3LM3_Pointer const & r) const;
     itkImageToImageFilterIUC3LM3_Pointer & operator=(itkImageToImageFilterIUC3LM3_Pointer const & r);
     itkImageToImageFilterIUC3LM3_Pointer & operator=(itkImageToImageFilterIUC3LM3 * r);
     itkImageToImageFilterIUC3LM3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUL2LM2 : public itkImageSourceLM2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUL2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUL2 const * image);
     itkImageUL2 const * GetInput();
     itkImageUL2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUL2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUL2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUL2LM2(itkImageToImageFilterIUL2LM2 const & arg0);
     void operator=(itkImageToImageFilterIUL2LM2 const & arg0);
   protected:
     itkImageToImageFilterIUL2LM2();
     ~itkImageToImageFilterIUL2LM2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUL2LM2_Pointer {
   public:
     itkImageToImageFilterIUL2LM2_Pointer();
     itkImageToImageFilterIUL2LM2_Pointer(itkImageToImageFilterIUL2LM2_Pointer const & p);
     itkImageToImageFilterIUL2LM2_Pointer(itkImageToImageFilterIUL2LM2 * p);
     ~itkImageToImageFilterIUL2LM2_Pointer();
     itkImageToImageFilterIUL2LM2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUL2LM2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUL2LM2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUL2LM2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUL2LM2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUL2LM2_Pointer const & r) const;
     itkImageToImageFilterIUL2LM2_Pointer & operator=(itkImageToImageFilterIUL2LM2_Pointer const & r);
     itkImageToImageFilterIUL2LM2_Pointer & operator=(itkImageToImageFilterIUL2LM2 * r);
     itkImageToImageFilterIUL2LM2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUL3LM3 : public itkImageSourceLM3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUL3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUL3 const * image);
     itkImageUL3 const * GetInput();
     itkImageUL3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUL3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUL3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUL3LM3(itkImageToImageFilterIUL3LM3 const & arg0);
     void operator=(itkImageToImageFilterIUL3LM3 const & arg0);
   protected:
     itkImageToImageFilterIUL3LM3();
     ~itkImageToImageFilterIUL3LM3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUL3LM3_Pointer {
   public:
     itkImageToImageFilterIUL3LM3_Pointer();
     itkImageToImageFilterIUL3LM3_Pointer(itkImageToImageFilterIUL3LM3_Pointer const & p);
     itkImageToImageFilterIUL3LM3_Pointer(itkImageToImageFilterIUL3LM3 * p);
     ~itkImageToImageFilterIUL3LM3_Pointer();
     itkImageToImageFilterIUL3LM3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUL3LM3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUL3LM3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUL3LM3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUL3LM3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUL3LM3_Pointer const & r) const;
     itkImageToImageFilterIUL3LM3_Pointer & operator=(itkImageToImageFilterIUL3LM3_Pointer const & r);
     itkImageToImageFilterIUL3LM3_Pointer & operator=(itkImageToImageFilterIUL3LM3 * r);
     itkImageToImageFilterIUL3LM3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUS2LM2 : public itkImageSourceLM2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUS2 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUS2 const * image);
     itkImageUS2 const * GetInput();
     itkImageUS2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUS2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUS2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUS2LM2(itkImageToImageFilterIUS2LM2 const & arg0);
     void operator=(itkImageToImageFilterIUS2LM2 const & arg0);
   protected:
     itkImageToImageFilterIUS2LM2();
     ~itkImageToImageFilterIUS2LM2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUS2LM2_Pointer {
   public:
     itkImageToImageFilterIUS2LM2_Pointer();
     itkImageToImageFilterIUS2LM2_Pointer(itkImageToImageFilterIUS2LM2_Pointer const & p);
     itkImageToImageFilterIUS2LM2_Pointer(itkImageToImageFilterIUS2LM2 * p);
     ~itkImageToImageFilterIUS2LM2_Pointer();
     itkImageToImageFilterIUS2LM2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUS2LM2 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUS2LM2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUS2LM2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUS2LM2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUS2LM2_Pointer const & r) const;
     itkImageToImageFilterIUS2LM2_Pointer & operator=(itkImageToImageFilterIUS2LM2_Pointer const & r);
     itkImageToImageFilterIUS2LM2_Pointer & operator=(itkImageToImageFilterIUS2LM2 * r);
     itkImageToImageFilterIUS2LM2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterIUS3LM3 : public itkImageSourceLM3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkImageUS3 const * image);
     virtual void SetInput(unsigned int arg0, itkImageUS3 const * image);
     itkImageUS3 const * GetInput();
     itkImageUS3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkImageUS3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkImageUS3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterIUS3LM3(itkImageToImageFilterIUS3LM3 const & arg0);
     void operator=(itkImageToImageFilterIUS3LM3 const & arg0);
   protected:
     itkImageToImageFilterIUS3LM3();
     ~itkImageToImageFilterIUS3LM3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterIUS3LM3_Pointer {
   public:
     itkImageToImageFilterIUS3LM3_Pointer();
     itkImageToImageFilterIUS3LM3_Pointer(itkImageToImageFilterIUS3LM3_Pointer const & p);
     itkImageToImageFilterIUS3LM3_Pointer(itkImageToImageFilterIUS3LM3 * p);
     ~itkImageToImageFilterIUS3LM3_Pointer();
     itkImageToImageFilterIUS3LM3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterIUS3LM3 * GetPointer() const;
     bool operator<(itkImageToImageFilterIUS3LM3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterIUS3LM3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterIUS3LM3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterIUS3LM3_Pointer const & r) const;
     itkImageToImageFilterIUS3LM3_Pointer & operator=(itkImageToImageFilterIUS3LM3_Pointer const & r);
     itkImageToImageFilterIUS3LM3_Pointer & operator=(itkImageToImageFilterIUS3LM3 * r);
     itkImageToImageFilterIUS3LM3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterLM2ID2 : public itkImageSourceID2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkLabelMap2 const * image);
     virtual void SetInput(unsigned int arg0, itkLabelMap2 const * image);
     itkLabelMap2 const * GetInput();
     itkLabelMap2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkLabelMap2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkLabelMap2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterLM2ID2(itkImageToImageFilterLM2ID2 const & arg0);
     void operator=(itkImageToImageFilterLM2ID2 const & arg0);
   protected:
     itkImageToImageFilterLM2ID2();
     ~itkImageToImageFilterLM2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterLM2ID2_Pointer {
   public:
     itkImageToImageFilterLM2ID2_Pointer();
     itkImageToImageFilterLM2ID2_Pointer(itkImageToImageFilterLM2ID2_Pointer const & p);
     itkImageToImageFilterLM2ID2_Pointer(itkImageToImageFilterLM2ID2 * p);
     ~itkImageToImageFilterLM2ID2_Pointer();
     itkImageToImageFilterLM2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterLM2ID2 * GetPointer() const;
     bool operator<(itkImageToImageFilterLM2ID2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterLM2ID2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterLM2ID2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterLM2ID2_Pointer const & r) const;
     itkImageToImageFilterLM2ID2_Pointer & operator=(itkImageToImageFilterLM2ID2_Pointer const & r);
     itkImageToImageFilterLM2ID2_Pointer & operator=(itkImageToImageFilterLM2ID2 * r);
     itkImageToImageFilterLM2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterLM2IF2 : public itkImageSourceIF2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkLabelMap2 const * image);
     virtual void SetInput(unsigned int arg0, itkLabelMap2 const * image);
     itkLabelMap2 const * GetInput();
     itkLabelMap2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkLabelMap2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkLabelMap2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterLM2IF2(itkImageToImageFilterLM2IF2 const & arg0);
     void operator=(itkImageToImageFilterLM2IF2 const & arg0);
   protected:
     itkImageToImageFilterLM2IF2();
     ~itkImageToImageFilterLM2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterLM2IF2_Pointer {
   public:
     itkImageToImageFilterLM2IF2_Pointer();
     itkImageToImageFilterLM2IF2_Pointer(itkImageToImageFilterLM2IF2_Pointer const & p);
     itkImageToImageFilterLM2IF2_Pointer(itkImageToImageFilterLM2IF2 * p);
     ~itkImageToImageFilterLM2IF2_Pointer();
     itkImageToImageFilterLM2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterLM2IF2 * GetPointer() const;
     bool operator<(itkImageToImageFilterLM2IF2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterLM2IF2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterLM2IF2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterLM2IF2_Pointer const & r) const;
     itkImageToImageFilterLM2IF2_Pointer & operator=(itkImageToImageFilterLM2IF2_Pointer const & r);
     itkImageToImageFilterLM2IF2_Pointer & operator=(itkImageToImageFilterLM2IF2 * r);
     itkImageToImageFilterLM2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterLM2IRGBUS2 : public itkImageSourceIRGBUS2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkLabelMap2 const * image);
     virtual void SetInput(unsigned int arg0, itkLabelMap2 const * image);
     itkLabelMap2 const * GetInput();
     itkLabelMap2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkLabelMap2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkLabelMap2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterLM2IRGBUS2(itkImageToImageFilterLM2IRGBUS2 const & arg0);
     void operator=(itkImageToImageFilterLM2IRGBUS2 const & arg0);
   protected:
     itkImageToImageFilterLM2IRGBUS2();
     ~itkImageToImageFilterLM2IRGBUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterLM2IRGBUS2_Pointer {
   public:
     itkImageToImageFilterLM2IRGBUS2_Pointer();
     itkImageToImageFilterLM2IRGBUS2_Pointer(itkImageToImageFilterLM2IRGBUS2_Pointer const & p);
     itkImageToImageFilterLM2IRGBUS2_Pointer(itkImageToImageFilterLM2IRGBUS2 * p);
     ~itkImageToImageFilterLM2IRGBUS2_Pointer();
     itkImageToImageFilterLM2IRGBUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterLM2IRGBUS2 * GetPointer() const;
     bool operator<(itkImageToImageFilterLM2IRGBUS2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterLM2IRGBUS2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterLM2IRGBUS2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterLM2IRGBUS2_Pointer const & r) const;
     itkImageToImageFilterLM2IRGBUS2_Pointer & operator=(itkImageToImageFilterLM2IRGBUS2_Pointer const & r);
     itkImageToImageFilterLM2IRGBUS2_Pointer & operator=(itkImageToImageFilterLM2IRGBUS2 * r);
     itkImageToImageFilterLM2IRGBUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterLM2IUC2 : public itkImageSourceIUC2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkLabelMap2 const * image);
     virtual void SetInput(unsigned int arg0, itkLabelMap2 const * image);
     itkLabelMap2 const * GetInput();
     itkLabelMap2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkLabelMap2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkLabelMap2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterLM2IUC2(itkImageToImageFilterLM2IUC2 const & arg0);
     void operator=(itkImageToImageFilterLM2IUC2 const & arg0);
   protected:
     itkImageToImageFilterLM2IUC2();
     ~itkImageToImageFilterLM2IUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterLM2IUC2_Pointer {
   public:
     itkImageToImageFilterLM2IUC2_Pointer();
     itkImageToImageFilterLM2IUC2_Pointer(itkImageToImageFilterLM2IUC2_Pointer const & p);
     itkImageToImageFilterLM2IUC2_Pointer(itkImageToImageFilterLM2IUC2 * p);
     ~itkImageToImageFilterLM2IUC2_Pointer();
     itkImageToImageFilterLM2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterLM2IUC2 * GetPointer() const;
     bool operator<(itkImageToImageFilterLM2IUC2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterLM2IUC2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterLM2IUC2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterLM2IUC2_Pointer const & r) const;
     itkImageToImageFilterLM2IUC2_Pointer & operator=(itkImageToImageFilterLM2IUC2_Pointer const & r);
     itkImageToImageFilterLM2IUC2_Pointer & operator=(itkImageToImageFilterLM2IUC2 * r);
     itkImageToImageFilterLM2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterLM2IUL2 : public itkImageSourceIUL2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkLabelMap2 const * image);
     virtual void SetInput(unsigned int arg0, itkLabelMap2 const * image);
     itkLabelMap2 const * GetInput();
     itkLabelMap2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkLabelMap2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkLabelMap2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterLM2IUL2(itkImageToImageFilterLM2IUL2 const & arg0);
     void operator=(itkImageToImageFilterLM2IUL2 const & arg0);
   protected:
     itkImageToImageFilterLM2IUL2();
     ~itkImageToImageFilterLM2IUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterLM2IUL2_Pointer {
   public:
     itkImageToImageFilterLM2IUL2_Pointer();
     itkImageToImageFilterLM2IUL2_Pointer(itkImageToImageFilterLM2IUL2_Pointer const & p);
     itkImageToImageFilterLM2IUL2_Pointer(itkImageToImageFilterLM2IUL2 * p);
     ~itkImageToImageFilterLM2IUL2_Pointer();
     itkImageToImageFilterLM2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterLM2IUL2 * GetPointer() const;
     bool operator<(itkImageToImageFilterLM2IUL2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterLM2IUL2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterLM2IUL2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterLM2IUL2_Pointer const & r) const;
     itkImageToImageFilterLM2IUL2_Pointer & operator=(itkImageToImageFilterLM2IUL2_Pointer const & r);
     itkImageToImageFilterLM2IUL2_Pointer & operator=(itkImageToImageFilterLM2IUL2 * r);
     itkImageToImageFilterLM2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterLM2IUS2 : public itkImageSourceIUS2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkLabelMap2 const * image);
     virtual void SetInput(unsigned int arg0, itkLabelMap2 const * image);
     itkLabelMap2 const * GetInput();
     itkLabelMap2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkLabelMap2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkLabelMap2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterLM2IUS2(itkImageToImageFilterLM2IUS2 const & arg0);
     void operator=(itkImageToImageFilterLM2IUS2 const & arg0);
   protected:
     itkImageToImageFilterLM2IUS2();
     ~itkImageToImageFilterLM2IUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterLM2IUS2_Pointer {
   public:
     itkImageToImageFilterLM2IUS2_Pointer();
     itkImageToImageFilterLM2IUS2_Pointer(itkImageToImageFilterLM2IUS2_Pointer const & p);
     itkImageToImageFilterLM2IUS2_Pointer(itkImageToImageFilterLM2IUS2 * p);
     ~itkImageToImageFilterLM2IUS2_Pointer();
     itkImageToImageFilterLM2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterLM2IUS2 * GetPointer() const;
     bool operator<(itkImageToImageFilterLM2IUS2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterLM2IUS2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterLM2IUS2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterLM2IUS2_Pointer const & r) const;
     itkImageToImageFilterLM2IUS2_Pointer & operator=(itkImageToImageFilterLM2IUS2_Pointer const & r);
     itkImageToImageFilterLM2IUS2_Pointer & operator=(itkImageToImageFilterLM2IUS2 * r);
     itkImageToImageFilterLM2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterLM2LM2 : public itkImageSourceLM2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkLabelMap2 const * image);
     virtual void SetInput(unsigned int arg0, itkLabelMap2 const * image);
     itkLabelMap2 const * GetInput();
     itkLabelMap2 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkLabelMap2 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkLabelMap2 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterLM2LM2(itkImageToImageFilterLM2LM2 const & arg0);
     void operator=(itkImageToImageFilterLM2LM2 const & arg0);
   protected:
     itkImageToImageFilterLM2LM2();
     ~itkImageToImageFilterLM2LM2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion2 & destRegion, itkImageRegion2 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterLM2LM2_Pointer {
   public:
     itkImageToImageFilterLM2LM2_Pointer();
     itkImageToImageFilterLM2LM2_Pointer(itkImageToImageFilterLM2LM2_Pointer const & p);
     itkImageToImageFilterLM2LM2_Pointer(itkImageToImageFilterLM2LM2 * p);
     ~itkImageToImageFilterLM2LM2_Pointer();
     itkImageToImageFilterLM2LM2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterLM2LM2 * GetPointer() const;
     bool operator<(itkImageToImageFilterLM2LM2_Pointer const & r) const;
     bool operator>(itkImageToImageFilterLM2LM2_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterLM2LM2_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterLM2LM2_Pointer const & r) const;
     itkImageToImageFilterLM2LM2_Pointer & operator=(itkImageToImageFilterLM2LM2_Pointer const & r);
     itkImageToImageFilterLM2LM2_Pointer & operator=(itkImageToImageFilterLM2LM2 * r);
     itkImageToImageFilterLM2LM2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterLM3ID3 : public itkImageSourceID3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkLabelMap3 const * image);
     virtual void SetInput(unsigned int arg0, itkLabelMap3 const * image);
     itkLabelMap3 const * GetInput();
     itkLabelMap3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkLabelMap3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkLabelMap3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterLM3ID3(itkImageToImageFilterLM3ID3 const & arg0);
     void operator=(itkImageToImageFilterLM3ID3 const & arg0);
   protected:
     itkImageToImageFilterLM3ID3();
     ~itkImageToImageFilterLM3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterLM3ID3_Pointer {
   public:
     itkImageToImageFilterLM3ID3_Pointer();
     itkImageToImageFilterLM3ID3_Pointer(itkImageToImageFilterLM3ID3_Pointer const & p);
     itkImageToImageFilterLM3ID3_Pointer(itkImageToImageFilterLM3ID3 * p);
     ~itkImageToImageFilterLM3ID3_Pointer();
     itkImageToImageFilterLM3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterLM3ID3 * GetPointer() const;
     bool operator<(itkImageToImageFilterLM3ID3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterLM3ID3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterLM3ID3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterLM3ID3_Pointer const & r) const;
     itkImageToImageFilterLM3ID3_Pointer & operator=(itkImageToImageFilterLM3ID3_Pointer const & r);
     itkImageToImageFilterLM3ID3_Pointer & operator=(itkImageToImageFilterLM3ID3 * r);
     itkImageToImageFilterLM3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterLM3IF3 : public itkImageSourceIF3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkLabelMap3 const * image);
     virtual void SetInput(unsigned int arg0, itkLabelMap3 const * image);
     itkLabelMap3 const * GetInput();
     itkLabelMap3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkLabelMap3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkLabelMap3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterLM3IF3(itkImageToImageFilterLM3IF3 const & arg0);
     void operator=(itkImageToImageFilterLM3IF3 const & arg0);
   protected:
     itkImageToImageFilterLM3IF3();
     ~itkImageToImageFilterLM3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterLM3IF3_Pointer {
   public:
     itkImageToImageFilterLM3IF3_Pointer();
     itkImageToImageFilterLM3IF3_Pointer(itkImageToImageFilterLM3IF3_Pointer const & p);
     itkImageToImageFilterLM3IF3_Pointer(itkImageToImageFilterLM3IF3 * p);
     ~itkImageToImageFilterLM3IF3_Pointer();
     itkImageToImageFilterLM3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterLM3IF3 * GetPointer() const;
     bool operator<(itkImageToImageFilterLM3IF3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterLM3IF3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterLM3IF3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterLM3IF3_Pointer const & r) const;
     itkImageToImageFilterLM3IF3_Pointer & operator=(itkImageToImageFilterLM3IF3_Pointer const & r);
     itkImageToImageFilterLM3IF3_Pointer & operator=(itkImageToImageFilterLM3IF3 * r);
     itkImageToImageFilterLM3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterLM3IRGBUS3 : public itkImageSourceIRGBUS3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkLabelMap3 const * image);
     virtual void SetInput(unsigned int arg0, itkLabelMap3 const * image);
     itkLabelMap3 const * GetInput();
     itkLabelMap3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkLabelMap3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkLabelMap3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterLM3IRGBUS3(itkImageToImageFilterLM3IRGBUS3 const & arg0);
     void operator=(itkImageToImageFilterLM3IRGBUS3 const & arg0);
   protected:
     itkImageToImageFilterLM3IRGBUS3();
     ~itkImageToImageFilterLM3IRGBUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterLM3IRGBUS3_Pointer {
   public:
     itkImageToImageFilterLM3IRGBUS3_Pointer();
     itkImageToImageFilterLM3IRGBUS3_Pointer(itkImageToImageFilterLM3IRGBUS3_Pointer const & p);
     itkImageToImageFilterLM3IRGBUS3_Pointer(itkImageToImageFilterLM3IRGBUS3 * p);
     ~itkImageToImageFilterLM3IRGBUS3_Pointer();
     itkImageToImageFilterLM3IRGBUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterLM3IRGBUS3 * GetPointer() const;
     bool operator<(itkImageToImageFilterLM3IRGBUS3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterLM3IRGBUS3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterLM3IRGBUS3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterLM3IRGBUS3_Pointer const & r) const;
     itkImageToImageFilterLM3IRGBUS3_Pointer & operator=(itkImageToImageFilterLM3IRGBUS3_Pointer const & r);
     itkImageToImageFilterLM3IRGBUS3_Pointer & operator=(itkImageToImageFilterLM3IRGBUS3 * r);
     itkImageToImageFilterLM3IRGBUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterLM3IUC3 : public itkImageSourceIUC3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkLabelMap3 const * image);
     virtual void SetInput(unsigned int arg0, itkLabelMap3 const * image);
     itkLabelMap3 const * GetInput();
     itkLabelMap3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkLabelMap3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkLabelMap3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterLM3IUC3(itkImageToImageFilterLM3IUC3 const & arg0);
     void operator=(itkImageToImageFilterLM3IUC3 const & arg0);
   protected:
     itkImageToImageFilterLM3IUC3();
     ~itkImageToImageFilterLM3IUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterLM3IUC3_Pointer {
   public:
     itkImageToImageFilterLM3IUC3_Pointer();
     itkImageToImageFilterLM3IUC3_Pointer(itkImageToImageFilterLM3IUC3_Pointer const & p);
     itkImageToImageFilterLM3IUC3_Pointer(itkImageToImageFilterLM3IUC3 * p);
     ~itkImageToImageFilterLM3IUC3_Pointer();
     itkImageToImageFilterLM3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterLM3IUC3 * GetPointer() const;
     bool operator<(itkImageToImageFilterLM3IUC3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterLM3IUC3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterLM3IUC3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterLM3IUC3_Pointer const & r) const;
     itkImageToImageFilterLM3IUC3_Pointer & operator=(itkImageToImageFilterLM3IUC3_Pointer const & r);
     itkImageToImageFilterLM3IUC3_Pointer & operator=(itkImageToImageFilterLM3IUC3 * r);
     itkImageToImageFilterLM3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterLM3IUL3 : public itkImageSourceIUL3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkLabelMap3 const * image);
     virtual void SetInput(unsigned int arg0, itkLabelMap3 const * image);
     itkLabelMap3 const * GetInput();
     itkLabelMap3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkLabelMap3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkLabelMap3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterLM3IUL3(itkImageToImageFilterLM3IUL3 const & arg0);
     void operator=(itkImageToImageFilterLM3IUL3 const & arg0);
   protected:
     itkImageToImageFilterLM3IUL3();
     ~itkImageToImageFilterLM3IUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterLM3IUL3_Pointer {
   public:
     itkImageToImageFilterLM3IUL3_Pointer();
     itkImageToImageFilterLM3IUL3_Pointer(itkImageToImageFilterLM3IUL3_Pointer const & p);
     itkImageToImageFilterLM3IUL3_Pointer(itkImageToImageFilterLM3IUL3 * p);
     ~itkImageToImageFilterLM3IUL3_Pointer();
     itkImageToImageFilterLM3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterLM3IUL3 * GetPointer() const;
     bool operator<(itkImageToImageFilterLM3IUL3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterLM3IUL3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterLM3IUL3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterLM3IUL3_Pointer const & r) const;
     itkImageToImageFilterLM3IUL3_Pointer & operator=(itkImageToImageFilterLM3IUL3_Pointer const & r);
     itkImageToImageFilterLM3IUL3_Pointer & operator=(itkImageToImageFilterLM3IUL3 * r);
     itkImageToImageFilterLM3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterLM3IUS3 : public itkImageSourceIUS3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkLabelMap3 const * image);
     virtual void SetInput(unsigned int arg0, itkLabelMap3 const * image);
     itkLabelMap3 const * GetInput();
     itkLabelMap3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkLabelMap3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkLabelMap3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterLM3IUS3(itkImageToImageFilterLM3IUS3 const & arg0);
     void operator=(itkImageToImageFilterLM3IUS3 const & arg0);
   protected:
     itkImageToImageFilterLM3IUS3();
     ~itkImageToImageFilterLM3IUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterLM3IUS3_Pointer {
   public:
     itkImageToImageFilterLM3IUS3_Pointer();
     itkImageToImageFilterLM3IUS3_Pointer(itkImageToImageFilterLM3IUS3_Pointer const & p);
     itkImageToImageFilterLM3IUS3_Pointer(itkImageToImageFilterLM3IUS3 * p);
     ~itkImageToImageFilterLM3IUS3_Pointer();
     itkImageToImageFilterLM3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterLM3IUS3 * GetPointer() const;
     bool operator<(itkImageToImageFilterLM3IUS3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterLM3IUS3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterLM3IUS3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterLM3IUS3_Pointer const & r) const;
     itkImageToImageFilterLM3IUS3_Pointer & operator=(itkImageToImageFilterLM3IUS3_Pointer const & r);
     itkImageToImageFilterLM3IUS3_Pointer & operator=(itkImageToImageFilterLM3IUS3 * r);
     itkImageToImageFilterLM3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToImageFilterLM3LM3 : public itkImageSourceLM3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetInput(itkLabelMap3 const * image);
     virtual void SetInput(unsigned int arg0, itkLabelMap3 const * image);
     itkLabelMap3 const * GetInput();
     itkLabelMap3 const * GetInput(unsigned int idx);
     virtual void PushBackInput(itkLabelMap3 const * image);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkLabelMap3 const * image);
     virtual void PopFrontInput();
   private:
     itkImageToImageFilterLM3LM3(itkImageToImageFilterLM3LM3 const & arg0);
     void operator=(itkImageToImageFilterLM3LM3 const & arg0);
   protected:
     itkImageToImageFilterLM3LM3();
     ~itkImageToImageFilterLM3LM3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void CallCopyOutputRegionToInputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void CallCopyInputRegionToOutputRegion(itkImageRegion3 & destRegion, itkImageRegion3 const & srcRegion);
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PushFrontInput(itkDataObject const * input);
 };


 class itkImageToImageFilterLM3LM3_Pointer {
   public:
     itkImageToImageFilterLM3LM3_Pointer();
     itkImageToImageFilterLM3LM3_Pointer(itkImageToImageFilterLM3LM3_Pointer const & p);
     itkImageToImageFilterLM3LM3_Pointer(itkImageToImageFilterLM3LM3 * p);
     ~itkImageToImageFilterLM3LM3_Pointer();
     itkImageToImageFilterLM3LM3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToImageFilterLM3LM3 * GetPointer() const;
     bool operator<(itkImageToImageFilterLM3LM3_Pointer const & r) const;
     bool operator>(itkImageToImageFilterLM3LM3_Pointer const & r) const;
     bool operator<=(itkImageToImageFilterLM3LM3_Pointer const & r) const;
     bool operator>=(itkImageToImageFilterLM3LM3_Pointer const & r) const;
     itkImageToImageFilterLM3LM3_Pointer & operator=(itkImageToImageFilterLM3LM3_Pointer const & r);
     itkImageToImageFilterLM3LM3_Pointer & operator=(itkImageToImageFilterLM3LM3 * r);
     itkImageToImageFilterLM3LM3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


