# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkDifferenceImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkDifferenceImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkDifferenceImageFilterPython
            return _itkDifferenceImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkDifferenceImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkDifferenceImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkDifferenceImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import itkEventObjectsPython
import pyBasePython
import itkImagePython
import itkFixedArrayPython
import itkCovariantVectorPython
import vnl_vectorPython
import vcl_complexPython
import vnl_matrixPython
import itkVectorPython
import vnl_vector_refPython
import ITKRegionsPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkPointPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkRGBPixelPython
import itkImageToImageFilterAPython
import itkImageSourcePython
import itkVectorImagePython
import itkVariableLengthVectorPython
def itkDifferenceImageFilterID3ID3_New():
  return itkDifferenceImageFilterID3ID3.New()

def itkDifferenceImageFilterID2ID2_New():
  return itkDifferenceImageFilterID2ID2.New()

def itkDifferenceImageFilterIF3IF3_New():
  return itkDifferenceImageFilterIF3IF3.New()

def itkDifferenceImageFilterIF2IF2_New():
  return itkDifferenceImageFilterIF2IF2.New()

def itkDifferenceImageFilterIUS3IUS3_New():
  return itkDifferenceImageFilterIUS3IUS3.New()

def itkDifferenceImageFilterIUS2IUS2_New():
  return itkDifferenceImageFilterIUS2IUS2.New()

def itkDifferenceImageFilterIUL3IUL3_New():
  return itkDifferenceImageFilterIUL3IUL3.New()

def itkDifferenceImageFilterIUL2IUL2_New():
  return itkDifferenceImageFilterIUL2IUL2.New()

def itkDifferenceImageFilterIUC3IUC3_New():
  return itkDifferenceImageFilterIUC3IUC3.New()

def itkDifferenceImageFilterIUC2IUC2_New():
  return itkDifferenceImageFilterIUC2IUC2.New()

class itkDifferenceImageFilterID2ID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """Proxy of C++ itkDifferenceImageFilterID2ID2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetValidInput(self, *args):
        """SetValidInput(self, itkImageD2 validImage)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_SetValidInput(self, *args)

    def SetTestInput(self, *args):
        """SetTestInput(self, itkImageD2 testImage)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_SetTestInput(self, *args)

    def SetToleranceRadius(self, *args):
        """SetToleranceRadius(self, int _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_SetToleranceRadius(self, *args)

    def GetToleranceRadius(self):
        """GetToleranceRadius(self) -> int"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_GetToleranceRadius(self)

    def SetDifferenceThreshold(self, *args):
        """SetDifferenceThreshold(self, double _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_SetDifferenceThreshold(self, *args)

    def GetDifferenceThreshold(self):
        """GetDifferenceThreshold(self) -> double"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_GetDifferenceThreshold(self)

    def SetIgnoreBoundaryPixels(self, *args):
        """SetIgnoreBoundaryPixels(self, bool _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_SetIgnoreBoundaryPixels(self, *args)

    def GetIgnoreBoundaryPixels(self):
        """GetIgnoreBoundaryPixels(self) -> bool"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_GetIgnoreBoundaryPixels(self)

    def GetMeanDifference(self):
        """GetMeanDifference(self) -> double"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_GetMeanDifference(self)

    def GetTotalDifference(self):
        """GetTotalDifference(self) -> double"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_GetTotalDifference(self)

    def GetNumberOfPixelsWithDifferences(self):
        """GetNumberOfPixelsWithDifferences(self) -> unsigned long"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_GetNumberOfPixelsWithDifferences(self)

    __swig_destroy__ = _itkDifferenceImageFilterPython.delete_itkDifferenceImageFilterID2ID2
    def cast(*args):
        """cast(itkLightObject obj) -> itkDifferenceImageFilterID2ID2"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDifferenceImageFilterID2ID2"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDifferenceImageFilterID2ID2
        
        Create a new object of the class itkDifferenceImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDifferenceImageFilterID2ID2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDifferenceImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDifferenceImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDifferenceImageFilterID2ID2.SetValidInput = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_SetValidInput,None,itkDifferenceImageFilterID2ID2)
itkDifferenceImageFilterID2ID2.SetTestInput = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_SetTestInput,None,itkDifferenceImageFilterID2ID2)
itkDifferenceImageFilterID2ID2.SetToleranceRadius = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_SetToleranceRadius,None,itkDifferenceImageFilterID2ID2)
itkDifferenceImageFilterID2ID2.GetToleranceRadius = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_GetToleranceRadius,None,itkDifferenceImageFilterID2ID2)
itkDifferenceImageFilterID2ID2.SetDifferenceThreshold = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_SetDifferenceThreshold,None,itkDifferenceImageFilterID2ID2)
itkDifferenceImageFilterID2ID2.GetDifferenceThreshold = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_GetDifferenceThreshold,None,itkDifferenceImageFilterID2ID2)
itkDifferenceImageFilterID2ID2.SetIgnoreBoundaryPixels = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_SetIgnoreBoundaryPixels,None,itkDifferenceImageFilterID2ID2)
itkDifferenceImageFilterID2ID2.GetIgnoreBoundaryPixels = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_GetIgnoreBoundaryPixels,None,itkDifferenceImageFilterID2ID2)
itkDifferenceImageFilterID2ID2.GetMeanDifference = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_GetMeanDifference,None,itkDifferenceImageFilterID2ID2)
itkDifferenceImageFilterID2ID2.GetTotalDifference = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_GetTotalDifference,None,itkDifferenceImageFilterID2ID2)
itkDifferenceImageFilterID2ID2.GetNumberOfPixelsWithDifferences = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_GetNumberOfPixelsWithDifferences,None,itkDifferenceImageFilterID2ID2)
itkDifferenceImageFilterID2ID2.GetPointer = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_GetPointer,None,itkDifferenceImageFilterID2ID2)
itkDifferenceImageFilterID2ID2_swigregister = _itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_swigregister
itkDifferenceImageFilterID2ID2_swigregister(itkDifferenceImageFilterID2ID2)

def itkDifferenceImageFilterID2ID2___New_orig__():
  """itkDifferenceImageFilterID2ID2___New_orig__()"""
  return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2___New_orig__()

def itkDifferenceImageFilterID2ID2_cast(*args):
  """itkDifferenceImageFilterID2ID2_cast(itkLightObject obj) -> itkDifferenceImageFilterID2ID2"""
  return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID2ID2_cast(*args)

class itkDifferenceImageFilterID3ID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """Proxy of C++ itkDifferenceImageFilterID3ID3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetValidInput(self, *args):
        """SetValidInput(self, itkImageD3 validImage)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_SetValidInput(self, *args)

    def SetTestInput(self, *args):
        """SetTestInput(self, itkImageD3 testImage)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_SetTestInput(self, *args)

    def SetToleranceRadius(self, *args):
        """SetToleranceRadius(self, int _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_SetToleranceRadius(self, *args)

    def GetToleranceRadius(self):
        """GetToleranceRadius(self) -> int"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_GetToleranceRadius(self)

    def SetDifferenceThreshold(self, *args):
        """SetDifferenceThreshold(self, double _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_SetDifferenceThreshold(self, *args)

    def GetDifferenceThreshold(self):
        """GetDifferenceThreshold(self) -> double"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_GetDifferenceThreshold(self)

    def SetIgnoreBoundaryPixels(self, *args):
        """SetIgnoreBoundaryPixels(self, bool _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_SetIgnoreBoundaryPixels(self, *args)

    def GetIgnoreBoundaryPixels(self):
        """GetIgnoreBoundaryPixels(self) -> bool"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_GetIgnoreBoundaryPixels(self)

    def GetMeanDifference(self):
        """GetMeanDifference(self) -> double"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_GetMeanDifference(self)

    def GetTotalDifference(self):
        """GetTotalDifference(self) -> double"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_GetTotalDifference(self)

    def GetNumberOfPixelsWithDifferences(self):
        """GetNumberOfPixelsWithDifferences(self) -> unsigned long"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_GetNumberOfPixelsWithDifferences(self)

    __swig_destroy__ = _itkDifferenceImageFilterPython.delete_itkDifferenceImageFilterID3ID3
    def cast(*args):
        """cast(itkLightObject obj) -> itkDifferenceImageFilterID3ID3"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDifferenceImageFilterID3ID3"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDifferenceImageFilterID3ID3
        
        Create a new object of the class itkDifferenceImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDifferenceImageFilterID3ID3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDifferenceImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDifferenceImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDifferenceImageFilterID3ID3.SetValidInput = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_SetValidInput,None,itkDifferenceImageFilterID3ID3)
itkDifferenceImageFilterID3ID3.SetTestInput = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_SetTestInput,None,itkDifferenceImageFilterID3ID3)
itkDifferenceImageFilterID3ID3.SetToleranceRadius = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_SetToleranceRadius,None,itkDifferenceImageFilterID3ID3)
itkDifferenceImageFilterID3ID3.GetToleranceRadius = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_GetToleranceRadius,None,itkDifferenceImageFilterID3ID3)
itkDifferenceImageFilterID3ID3.SetDifferenceThreshold = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_SetDifferenceThreshold,None,itkDifferenceImageFilterID3ID3)
itkDifferenceImageFilterID3ID3.GetDifferenceThreshold = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_GetDifferenceThreshold,None,itkDifferenceImageFilterID3ID3)
itkDifferenceImageFilterID3ID3.SetIgnoreBoundaryPixels = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_SetIgnoreBoundaryPixels,None,itkDifferenceImageFilterID3ID3)
itkDifferenceImageFilterID3ID3.GetIgnoreBoundaryPixels = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_GetIgnoreBoundaryPixels,None,itkDifferenceImageFilterID3ID3)
itkDifferenceImageFilterID3ID3.GetMeanDifference = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_GetMeanDifference,None,itkDifferenceImageFilterID3ID3)
itkDifferenceImageFilterID3ID3.GetTotalDifference = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_GetTotalDifference,None,itkDifferenceImageFilterID3ID3)
itkDifferenceImageFilterID3ID3.GetNumberOfPixelsWithDifferences = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_GetNumberOfPixelsWithDifferences,None,itkDifferenceImageFilterID3ID3)
itkDifferenceImageFilterID3ID3.GetPointer = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_GetPointer,None,itkDifferenceImageFilterID3ID3)
itkDifferenceImageFilterID3ID3_swigregister = _itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_swigregister
itkDifferenceImageFilterID3ID3_swigregister(itkDifferenceImageFilterID3ID3)

def itkDifferenceImageFilterID3ID3___New_orig__():
  """itkDifferenceImageFilterID3ID3___New_orig__()"""
  return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3___New_orig__()

def itkDifferenceImageFilterID3ID3_cast(*args):
  """itkDifferenceImageFilterID3ID3_cast(itkLightObject obj) -> itkDifferenceImageFilterID3ID3"""
  return _itkDifferenceImageFilterPython.itkDifferenceImageFilterID3ID3_cast(*args)

class itkDifferenceImageFilterIF2IF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """Proxy of C++ itkDifferenceImageFilterIF2IF2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetValidInput(self, *args):
        """SetValidInput(self, itkImageF2 validImage)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_SetValidInput(self, *args)

    def SetTestInput(self, *args):
        """SetTestInput(self, itkImageF2 testImage)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_SetTestInput(self, *args)

    def SetToleranceRadius(self, *args):
        """SetToleranceRadius(self, int _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_SetToleranceRadius(self, *args)

    def GetToleranceRadius(self):
        """GetToleranceRadius(self) -> int"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_GetToleranceRadius(self)

    def SetDifferenceThreshold(self, *args):
        """SetDifferenceThreshold(self, float _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_SetDifferenceThreshold(self, *args)

    def GetDifferenceThreshold(self):
        """GetDifferenceThreshold(self) -> float"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_GetDifferenceThreshold(self)

    def SetIgnoreBoundaryPixels(self, *args):
        """SetIgnoreBoundaryPixels(self, bool _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_SetIgnoreBoundaryPixels(self, *args)

    def GetIgnoreBoundaryPixels(self):
        """GetIgnoreBoundaryPixels(self) -> bool"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_GetIgnoreBoundaryPixels(self)

    def GetMeanDifference(self):
        """GetMeanDifference(self) -> double"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_GetMeanDifference(self)

    def GetTotalDifference(self):
        """GetTotalDifference(self) -> double"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_GetTotalDifference(self)

    def GetNumberOfPixelsWithDifferences(self):
        """GetNumberOfPixelsWithDifferences(self) -> unsigned long"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_GetNumberOfPixelsWithDifferences(self)

    __swig_destroy__ = _itkDifferenceImageFilterPython.delete_itkDifferenceImageFilterIF2IF2
    def cast(*args):
        """cast(itkLightObject obj) -> itkDifferenceImageFilterIF2IF2"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDifferenceImageFilterIF2IF2"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDifferenceImageFilterIF2IF2
        
        Create a new object of the class itkDifferenceImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDifferenceImageFilterIF2IF2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDifferenceImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDifferenceImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDifferenceImageFilterIF2IF2.SetValidInput = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_SetValidInput,None,itkDifferenceImageFilterIF2IF2)
itkDifferenceImageFilterIF2IF2.SetTestInput = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_SetTestInput,None,itkDifferenceImageFilterIF2IF2)
itkDifferenceImageFilterIF2IF2.SetToleranceRadius = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_SetToleranceRadius,None,itkDifferenceImageFilterIF2IF2)
itkDifferenceImageFilterIF2IF2.GetToleranceRadius = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_GetToleranceRadius,None,itkDifferenceImageFilterIF2IF2)
itkDifferenceImageFilterIF2IF2.SetDifferenceThreshold = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_SetDifferenceThreshold,None,itkDifferenceImageFilterIF2IF2)
itkDifferenceImageFilterIF2IF2.GetDifferenceThreshold = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_GetDifferenceThreshold,None,itkDifferenceImageFilterIF2IF2)
itkDifferenceImageFilterIF2IF2.SetIgnoreBoundaryPixels = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_SetIgnoreBoundaryPixels,None,itkDifferenceImageFilterIF2IF2)
itkDifferenceImageFilterIF2IF2.GetIgnoreBoundaryPixels = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_GetIgnoreBoundaryPixels,None,itkDifferenceImageFilterIF2IF2)
itkDifferenceImageFilterIF2IF2.GetMeanDifference = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_GetMeanDifference,None,itkDifferenceImageFilterIF2IF2)
itkDifferenceImageFilterIF2IF2.GetTotalDifference = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_GetTotalDifference,None,itkDifferenceImageFilterIF2IF2)
itkDifferenceImageFilterIF2IF2.GetNumberOfPixelsWithDifferences = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_GetNumberOfPixelsWithDifferences,None,itkDifferenceImageFilterIF2IF2)
itkDifferenceImageFilterIF2IF2.GetPointer = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_GetPointer,None,itkDifferenceImageFilterIF2IF2)
itkDifferenceImageFilterIF2IF2_swigregister = _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_swigregister
itkDifferenceImageFilterIF2IF2_swigregister(itkDifferenceImageFilterIF2IF2)

def itkDifferenceImageFilterIF2IF2___New_orig__():
  """itkDifferenceImageFilterIF2IF2___New_orig__()"""
  return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2___New_orig__()

def itkDifferenceImageFilterIF2IF2_cast(*args):
  """itkDifferenceImageFilterIF2IF2_cast(itkLightObject obj) -> itkDifferenceImageFilterIF2IF2"""
  return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF2IF2_cast(*args)

class itkDifferenceImageFilterIF3IF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """Proxy of C++ itkDifferenceImageFilterIF3IF3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetValidInput(self, *args):
        """SetValidInput(self, itkImageF3 validImage)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_SetValidInput(self, *args)

    def SetTestInput(self, *args):
        """SetTestInput(self, itkImageF3 testImage)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_SetTestInput(self, *args)

    def SetToleranceRadius(self, *args):
        """SetToleranceRadius(self, int _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_SetToleranceRadius(self, *args)

    def GetToleranceRadius(self):
        """GetToleranceRadius(self) -> int"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_GetToleranceRadius(self)

    def SetDifferenceThreshold(self, *args):
        """SetDifferenceThreshold(self, float _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_SetDifferenceThreshold(self, *args)

    def GetDifferenceThreshold(self):
        """GetDifferenceThreshold(self) -> float"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_GetDifferenceThreshold(self)

    def SetIgnoreBoundaryPixels(self, *args):
        """SetIgnoreBoundaryPixels(self, bool _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_SetIgnoreBoundaryPixels(self, *args)

    def GetIgnoreBoundaryPixels(self):
        """GetIgnoreBoundaryPixels(self) -> bool"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_GetIgnoreBoundaryPixels(self)

    def GetMeanDifference(self):
        """GetMeanDifference(self) -> double"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_GetMeanDifference(self)

    def GetTotalDifference(self):
        """GetTotalDifference(self) -> double"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_GetTotalDifference(self)

    def GetNumberOfPixelsWithDifferences(self):
        """GetNumberOfPixelsWithDifferences(self) -> unsigned long"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_GetNumberOfPixelsWithDifferences(self)

    __swig_destroy__ = _itkDifferenceImageFilterPython.delete_itkDifferenceImageFilterIF3IF3
    def cast(*args):
        """cast(itkLightObject obj) -> itkDifferenceImageFilterIF3IF3"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDifferenceImageFilterIF3IF3"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDifferenceImageFilterIF3IF3
        
        Create a new object of the class itkDifferenceImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDifferenceImageFilterIF3IF3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDifferenceImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDifferenceImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDifferenceImageFilterIF3IF3.SetValidInput = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_SetValidInput,None,itkDifferenceImageFilterIF3IF3)
itkDifferenceImageFilterIF3IF3.SetTestInput = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_SetTestInput,None,itkDifferenceImageFilterIF3IF3)
itkDifferenceImageFilterIF3IF3.SetToleranceRadius = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_SetToleranceRadius,None,itkDifferenceImageFilterIF3IF3)
itkDifferenceImageFilterIF3IF3.GetToleranceRadius = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_GetToleranceRadius,None,itkDifferenceImageFilterIF3IF3)
itkDifferenceImageFilterIF3IF3.SetDifferenceThreshold = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_SetDifferenceThreshold,None,itkDifferenceImageFilterIF3IF3)
itkDifferenceImageFilterIF3IF3.GetDifferenceThreshold = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_GetDifferenceThreshold,None,itkDifferenceImageFilterIF3IF3)
itkDifferenceImageFilterIF3IF3.SetIgnoreBoundaryPixels = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_SetIgnoreBoundaryPixels,None,itkDifferenceImageFilterIF3IF3)
itkDifferenceImageFilterIF3IF3.GetIgnoreBoundaryPixels = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_GetIgnoreBoundaryPixels,None,itkDifferenceImageFilterIF3IF3)
itkDifferenceImageFilterIF3IF3.GetMeanDifference = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_GetMeanDifference,None,itkDifferenceImageFilterIF3IF3)
itkDifferenceImageFilterIF3IF3.GetTotalDifference = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_GetTotalDifference,None,itkDifferenceImageFilterIF3IF3)
itkDifferenceImageFilterIF3IF3.GetNumberOfPixelsWithDifferences = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_GetNumberOfPixelsWithDifferences,None,itkDifferenceImageFilterIF3IF3)
itkDifferenceImageFilterIF3IF3.GetPointer = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_GetPointer,None,itkDifferenceImageFilterIF3IF3)
itkDifferenceImageFilterIF3IF3_swigregister = _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_swigregister
itkDifferenceImageFilterIF3IF3_swigregister(itkDifferenceImageFilterIF3IF3)

def itkDifferenceImageFilterIF3IF3___New_orig__():
  """itkDifferenceImageFilterIF3IF3___New_orig__()"""
  return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3___New_orig__()

def itkDifferenceImageFilterIF3IF3_cast(*args):
  """itkDifferenceImageFilterIF3IF3_cast(itkLightObject obj) -> itkDifferenceImageFilterIF3IF3"""
  return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIF3IF3_cast(*args)

class itkDifferenceImageFilterIUC2IUC2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """Proxy of C++ itkDifferenceImageFilterIUC2IUC2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetValidInput(self, *args):
        """SetValidInput(self, itkImageUC2 validImage)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_SetValidInput(self, *args)

    def SetTestInput(self, *args):
        """SetTestInput(self, itkImageUC2 testImage)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_SetTestInput(self, *args)

    def SetToleranceRadius(self, *args):
        """SetToleranceRadius(self, int _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_SetToleranceRadius(self, *args)

    def GetToleranceRadius(self):
        """GetToleranceRadius(self) -> int"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_GetToleranceRadius(self)

    def SetDifferenceThreshold(self, *args):
        """SetDifferenceThreshold(self, unsigned char _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_SetDifferenceThreshold(self, *args)

    def GetDifferenceThreshold(self):
        """GetDifferenceThreshold(self) -> unsigned char"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_GetDifferenceThreshold(self)

    def SetIgnoreBoundaryPixels(self, *args):
        """SetIgnoreBoundaryPixels(self, bool _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_SetIgnoreBoundaryPixels(self, *args)

    def GetIgnoreBoundaryPixels(self):
        """GetIgnoreBoundaryPixels(self) -> bool"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_GetIgnoreBoundaryPixels(self)

    def GetMeanDifference(self):
        """GetMeanDifference(self) -> double"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_GetMeanDifference(self)

    def GetTotalDifference(self):
        """GetTotalDifference(self) -> double"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_GetTotalDifference(self)

    def GetNumberOfPixelsWithDifferences(self):
        """GetNumberOfPixelsWithDifferences(self) -> unsigned long"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_GetNumberOfPixelsWithDifferences(self)

    __swig_destroy__ = _itkDifferenceImageFilterPython.delete_itkDifferenceImageFilterIUC2IUC2
    def cast(*args):
        """cast(itkLightObject obj) -> itkDifferenceImageFilterIUC2IUC2"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDifferenceImageFilterIUC2IUC2"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDifferenceImageFilterIUC2IUC2
        
        Create a new object of the class itkDifferenceImageFilterIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDifferenceImageFilterIUC2IUC2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDifferenceImageFilterIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDifferenceImageFilterIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDifferenceImageFilterIUC2IUC2.SetValidInput = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_SetValidInput,None,itkDifferenceImageFilterIUC2IUC2)
itkDifferenceImageFilterIUC2IUC2.SetTestInput = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_SetTestInput,None,itkDifferenceImageFilterIUC2IUC2)
itkDifferenceImageFilterIUC2IUC2.SetToleranceRadius = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_SetToleranceRadius,None,itkDifferenceImageFilterIUC2IUC2)
itkDifferenceImageFilterIUC2IUC2.GetToleranceRadius = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_GetToleranceRadius,None,itkDifferenceImageFilterIUC2IUC2)
itkDifferenceImageFilterIUC2IUC2.SetDifferenceThreshold = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_SetDifferenceThreshold,None,itkDifferenceImageFilterIUC2IUC2)
itkDifferenceImageFilterIUC2IUC2.GetDifferenceThreshold = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_GetDifferenceThreshold,None,itkDifferenceImageFilterIUC2IUC2)
itkDifferenceImageFilterIUC2IUC2.SetIgnoreBoundaryPixels = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_SetIgnoreBoundaryPixels,None,itkDifferenceImageFilterIUC2IUC2)
itkDifferenceImageFilterIUC2IUC2.GetIgnoreBoundaryPixels = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_GetIgnoreBoundaryPixels,None,itkDifferenceImageFilterIUC2IUC2)
itkDifferenceImageFilterIUC2IUC2.GetMeanDifference = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_GetMeanDifference,None,itkDifferenceImageFilterIUC2IUC2)
itkDifferenceImageFilterIUC2IUC2.GetTotalDifference = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_GetTotalDifference,None,itkDifferenceImageFilterIUC2IUC2)
itkDifferenceImageFilterIUC2IUC2.GetNumberOfPixelsWithDifferences = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_GetNumberOfPixelsWithDifferences,None,itkDifferenceImageFilterIUC2IUC2)
itkDifferenceImageFilterIUC2IUC2.GetPointer = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_GetPointer,None,itkDifferenceImageFilterIUC2IUC2)
itkDifferenceImageFilterIUC2IUC2_swigregister = _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_swigregister
itkDifferenceImageFilterIUC2IUC2_swigregister(itkDifferenceImageFilterIUC2IUC2)

def itkDifferenceImageFilterIUC2IUC2___New_orig__():
  """itkDifferenceImageFilterIUC2IUC2___New_orig__()"""
  return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2___New_orig__()

def itkDifferenceImageFilterIUC2IUC2_cast(*args):
  """itkDifferenceImageFilterIUC2IUC2_cast(itkLightObject obj) -> itkDifferenceImageFilterIUC2IUC2"""
  return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC2IUC2_cast(*args)

class itkDifferenceImageFilterIUC3IUC3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """Proxy of C++ itkDifferenceImageFilterIUC3IUC3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetValidInput(self, *args):
        """SetValidInput(self, itkImageUC3 validImage)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_SetValidInput(self, *args)

    def SetTestInput(self, *args):
        """SetTestInput(self, itkImageUC3 testImage)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_SetTestInput(self, *args)

    def SetToleranceRadius(self, *args):
        """SetToleranceRadius(self, int _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_SetToleranceRadius(self, *args)

    def GetToleranceRadius(self):
        """GetToleranceRadius(self) -> int"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_GetToleranceRadius(self)

    def SetDifferenceThreshold(self, *args):
        """SetDifferenceThreshold(self, unsigned char _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_SetDifferenceThreshold(self, *args)

    def GetDifferenceThreshold(self):
        """GetDifferenceThreshold(self) -> unsigned char"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_GetDifferenceThreshold(self)

    def SetIgnoreBoundaryPixels(self, *args):
        """SetIgnoreBoundaryPixels(self, bool _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_SetIgnoreBoundaryPixels(self, *args)

    def GetIgnoreBoundaryPixels(self):
        """GetIgnoreBoundaryPixels(self) -> bool"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_GetIgnoreBoundaryPixels(self)

    def GetMeanDifference(self):
        """GetMeanDifference(self) -> double"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_GetMeanDifference(self)

    def GetTotalDifference(self):
        """GetTotalDifference(self) -> double"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_GetTotalDifference(self)

    def GetNumberOfPixelsWithDifferences(self):
        """GetNumberOfPixelsWithDifferences(self) -> unsigned long"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_GetNumberOfPixelsWithDifferences(self)

    __swig_destroy__ = _itkDifferenceImageFilterPython.delete_itkDifferenceImageFilterIUC3IUC3
    def cast(*args):
        """cast(itkLightObject obj) -> itkDifferenceImageFilterIUC3IUC3"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDifferenceImageFilterIUC3IUC3"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDifferenceImageFilterIUC3IUC3
        
        Create a new object of the class itkDifferenceImageFilterIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDifferenceImageFilterIUC3IUC3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDifferenceImageFilterIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDifferenceImageFilterIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDifferenceImageFilterIUC3IUC3.SetValidInput = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_SetValidInput,None,itkDifferenceImageFilterIUC3IUC3)
itkDifferenceImageFilterIUC3IUC3.SetTestInput = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_SetTestInput,None,itkDifferenceImageFilterIUC3IUC3)
itkDifferenceImageFilterIUC3IUC3.SetToleranceRadius = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_SetToleranceRadius,None,itkDifferenceImageFilterIUC3IUC3)
itkDifferenceImageFilterIUC3IUC3.GetToleranceRadius = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_GetToleranceRadius,None,itkDifferenceImageFilterIUC3IUC3)
itkDifferenceImageFilterIUC3IUC3.SetDifferenceThreshold = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_SetDifferenceThreshold,None,itkDifferenceImageFilterIUC3IUC3)
itkDifferenceImageFilterIUC3IUC3.GetDifferenceThreshold = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_GetDifferenceThreshold,None,itkDifferenceImageFilterIUC3IUC3)
itkDifferenceImageFilterIUC3IUC3.SetIgnoreBoundaryPixels = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_SetIgnoreBoundaryPixels,None,itkDifferenceImageFilterIUC3IUC3)
itkDifferenceImageFilterIUC3IUC3.GetIgnoreBoundaryPixels = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_GetIgnoreBoundaryPixels,None,itkDifferenceImageFilterIUC3IUC3)
itkDifferenceImageFilterIUC3IUC3.GetMeanDifference = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_GetMeanDifference,None,itkDifferenceImageFilterIUC3IUC3)
itkDifferenceImageFilterIUC3IUC3.GetTotalDifference = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_GetTotalDifference,None,itkDifferenceImageFilterIUC3IUC3)
itkDifferenceImageFilterIUC3IUC3.GetNumberOfPixelsWithDifferences = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_GetNumberOfPixelsWithDifferences,None,itkDifferenceImageFilterIUC3IUC3)
itkDifferenceImageFilterIUC3IUC3.GetPointer = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_GetPointer,None,itkDifferenceImageFilterIUC3IUC3)
itkDifferenceImageFilterIUC3IUC3_swigregister = _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_swigregister
itkDifferenceImageFilterIUC3IUC3_swigregister(itkDifferenceImageFilterIUC3IUC3)

def itkDifferenceImageFilterIUC3IUC3___New_orig__():
  """itkDifferenceImageFilterIUC3IUC3___New_orig__()"""
  return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3___New_orig__()

def itkDifferenceImageFilterIUC3IUC3_cast(*args):
  """itkDifferenceImageFilterIUC3IUC3_cast(itkLightObject obj) -> itkDifferenceImageFilterIUC3IUC3"""
  return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUC3IUC3_cast(*args)

class itkDifferenceImageFilterIUL2IUL2(itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUL2):
    """Proxy of C++ itkDifferenceImageFilterIUL2IUL2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetValidInput(self, *args):
        """SetValidInput(self, itkImageUL2 validImage)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_SetValidInput(self, *args)

    def SetTestInput(self, *args):
        """SetTestInput(self, itkImageUL2 testImage)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_SetTestInput(self, *args)

    def SetToleranceRadius(self, *args):
        """SetToleranceRadius(self, int _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_SetToleranceRadius(self, *args)

    def GetToleranceRadius(self):
        """GetToleranceRadius(self) -> int"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_GetToleranceRadius(self)

    def SetDifferenceThreshold(self, *args):
        """SetDifferenceThreshold(self, unsigned long _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_SetDifferenceThreshold(self, *args)

    def GetDifferenceThreshold(self):
        """GetDifferenceThreshold(self) -> unsigned long"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_GetDifferenceThreshold(self)

    def SetIgnoreBoundaryPixels(self, *args):
        """SetIgnoreBoundaryPixels(self, bool _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_SetIgnoreBoundaryPixels(self, *args)

    def GetIgnoreBoundaryPixels(self):
        """GetIgnoreBoundaryPixels(self) -> bool"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_GetIgnoreBoundaryPixels(self)

    def GetMeanDifference(self):
        """GetMeanDifference(self) -> double"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_GetMeanDifference(self)

    def GetTotalDifference(self):
        """GetTotalDifference(self) -> double"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_GetTotalDifference(self)

    def GetNumberOfPixelsWithDifferences(self):
        """GetNumberOfPixelsWithDifferences(self) -> unsigned long"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_GetNumberOfPixelsWithDifferences(self)

    __swig_destroy__ = _itkDifferenceImageFilterPython.delete_itkDifferenceImageFilterIUL2IUL2
    def cast(*args):
        """cast(itkLightObject obj) -> itkDifferenceImageFilterIUL2IUL2"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDifferenceImageFilterIUL2IUL2"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDifferenceImageFilterIUL2IUL2
        
        Create a new object of the class itkDifferenceImageFilterIUL2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDifferenceImageFilterIUL2IUL2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDifferenceImageFilterIUL2IUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDifferenceImageFilterIUL2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDifferenceImageFilterIUL2IUL2.SetValidInput = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_SetValidInput,None,itkDifferenceImageFilterIUL2IUL2)
itkDifferenceImageFilterIUL2IUL2.SetTestInput = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_SetTestInput,None,itkDifferenceImageFilterIUL2IUL2)
itkDifferenceImageFilterIUL2IUL2.SetToleranceRadius = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_SetToleranceRadius,None,itkDifferenceImageFilterIUL2IUL2)
itkDifferenceImageFilterIUL2IUL2.GetToleranceRadius = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_GetToleranceRadius,None,itkDifferenceImageFilterIUL2IUL2)
itkDifferenceImageFilterIUL2IUL2.SetDifferenceThreshold = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_SetDifferenceThreshold,None,itkDifferenceImageFilterIUL2IUL2)
itkDifferenceImageFilterIUL2IUL2.GetDifferenceThreshold = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_GetDifferenceThreshold,None,itkDifferenceImageFilterIUL2IUL2)
itkDifferenceImageFilterIUL2IUL2.SetIgnoreBoundaryPixels = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_SetIgnoreBoundaryPixels,None,itkDifferenceImageFilterIUL2IUL2)
itkDifferenceImageFilterIUL2IUL2.GetIgnoreBoundaryPixels = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_GetIgnoreBoundaryPixels,None,itkDifferenceImageFilterIUL2IUL2)
itkDifferenceImageFilterIUL2IUL2.GetMeanDifference = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_GetMeanDifference,None,itkDifferenceImageFilterIUL2IUL2)
itkDifferenceImageFilterIUL2IUL2.GetTotalDifference = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_GetTotalDifference,None,itkDifferenceImageFilterIUL2IUL2)
itkDifferenceImageFilterIUL2IUL2.GetNumberOfPixelsWithDifferences = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_GetNumberOfPixelsWithDifferences,None,itkDifferenceImageFilterIUL2IUL2)
itkDifferenceImageFilterIUL2IUL2.GetPointer = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_GetPointer,None,itkDifferenceImageFilterIUL2IUL2)
itkDifferenceImageFilterIUL2IUL2_swigregister = _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_swigregister
itkDifferenceImageFilterIUL2IUL2_swigregister(itkDifferenceImageFilterIUL2IUL2)

def itkDifferenceImageFilterIUL2IUL2___New_orig__():
  """itkDifferenceImageFilterIUL2IUL2___New_orig__()"""
  return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2___New_orig__()

def itkDifferenceImageFilterIUL2IUL2_cast(*args):
  """itkDifferenceImageFilterIUL2IUL2_cast(itkLightObject obj) -> itkDifferenceImageFilterIUL2IUL2"""
  return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL2IUL2_cast(*args)

class itkDifferenceImageFilterIUL3IUL3(itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUL3):
    """Proxy of C++ itkDifferenceImageFilterIUL3IUL3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetValidInput(self, *args):
        """SetValidInput(self, itkImageUL3 validImage)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_SetValidInput(self, *args)

    def SetTestInput(self, *args):
        """SetTestInput(self, itkImageUL3 testImage)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_SetTestInput(self, *args)

    def SetToleranceRadius(self, *args):
        """SetToleranceRadius(self, int _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_SetToleranceRadius(self, *args)

    def GetToleranceRadius(self):
        """GetToleranceRadius(self) -> int"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_GetToleranceRadius(self)

    def SetDifferenceThreshold(self, *args):
        """SetDifferenceThreshold(self, unsigned long _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_SetDifferenceThreshold(self, *args)

    def GetDifferenceThreshold(self):
        """GetDifferenceThreshold(self) -> unsigned long"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_GetDifferenceThreshold(self)

    def SetIgnoreBoundaryPixels(self, *args):
        """SetIgnoreBoundaryPixels(self, bool _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_SetIgnoreBoundaryPixels(self, *args)

    def GetIgnoreBoundaryPixels(self):
        """GetIgnoreBoundaryPixels(self) -> bool"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_GetIgnoreBoundaryPixels(self)

    def GetMeanDifference(self):
        """GetMeanDifference(self) -> double"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_GetMeanDifference(self)

    def GetTotalDifference(self):
        """GetTotalDifference(self) -> double"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_GetTotalDifference(self)

    def GetNumberOfPixelsWithDifferences(self):
        """GetNumberOfPixelsWithDifferences(self) -> unsigned long"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_GetNumberOfPixelsWithDifferences(self)

    __swig_destroy__ = _itkDifferenceImageFilterPython.delete_itkDifferenceImageFilterIUL3IUL3
    def cast(*args):
        """cast(itkLightObject obj) -> itkDifferenceImageFilterIUL3IUL3"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDifferenceImageFilterIUL3IUL3"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDifferenceImageFilterIUL3IUL3
        
        Create a new object of the class itkDifferenceImageFilterIUL3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDifferenceImageFilterIUL3IUL3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDifferenceImageFilterIUL3IUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDifferenceImageFilterIUL3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDifferenceImageFilterIUL3IUL3.SetValidInput = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_SetValidInput,None,itkDifferenceImageFilterIUL3IUL3)
itkDifferenceImageFilterIUL3IUL3.SetTestInput = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_SetTestInput,None,itkDifferenceImageFilterIUL3IUL3)
itkDifferenceImageFilterIUL3IUL3.SetToleranceRadius = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_SetToleranceRadius,None,itkDifferenceImageFilterIUL3IUL3)
itkDifferenceImageFilterIUL3IUL3.GetToleranceRadius = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_GetToleranceRadius,None,itkDifferenceImageFilterIUL3IUL3)
itkDifferenceImageFilterIUL3IUL3.SetDifferenceThreshold = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_SetDifferenceThreshold,None,itkDifferenceImageFilterIUL3IUL3)
itkDifferenceImageFilterIUL3IUL3.GetDifferenceThreshold = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_GetDifferenceThreshold,None,itkDifferenceImageFilterIUL3IUL3)
itkDifferenceImageFilterIUL3IUL3.SetIgnoreBoundaryPixels = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_SetIgnoreBoundaryPixels,None,itkDifferenceImageFilterIUL3IUL3)
itkDifferenceImageFilterIUL3IUL3.GetIgnoreBoundaryPixels = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_GetIgnoreBoundaryPixels,None,itkDifferenceImageFilterIUL3IUL3)
itkDifferenceImageFilterIUL3IUL3.GetMeanDifference = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_GetMeanDifference,None,itkDifferenceImageFilterIUL3IUL3)
itkDifferenceImageFilterIUL3IUL3.GetTotalDifference = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_GetTotalDifference,None,itkDifferenceImageFilterIUL3IUL3)
itkDifferenceImageFilterIUL3IUL3.GetNumberOfPixelsWithDifferences = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_GetNumberOfPixelsWithDifferences,None,itkDifferenceImageFilterIUL3IUL3)
itkDifferenceImageFilterIUL3IUL3.GetPointer = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_GetPointer,None,itkDifferenceImageFilterIUL3IUL3)
itkDifferenceImageFilterIUL3IUL3_swigregister = _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_swigregister
itkDifferenceImageFilterIUL3IUL3_swigregister(itkDifferenceImageFilterIUL3IUL3)

def itkDifferenceImageFilterIUL3IUL3___New_orig__():
  """itkDifferenceImageFilterIUL3IUL3___New_orig__()"""
  return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3___New_orig__()

def itkDifferenceImageFilterIUL3IUL3_cast(*args):
  """itkDifferenceImageFilterIUL3IUL3_cast(itkLightObject obj) -> itkDifferenceImageFilterIUL3IUL3"""
  return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUL3IUL3_cast(*args)

class itkDifferenceImageFilterIUS2IUS2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """Proxy of C++ itkDifferenceImageFilterIUS2IUS2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetValidInput(self, *args):
        """SetValidInput(self, itkImageUS2 validImage)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_SetValidInput(self, *args)

    def SetTestInput(self, *args):
        """SetTestInput(self, itkImageUS2 testImage)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_SetTestInput(self, *args)

    def SetToleranceRadius(self, *args):
        """SetToleranceRadius(self, int _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_SetToleranceRadius(self, *args)

    def GetToleranceRadius(self):
        """GetToleranceRadius(self) -> int"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_GetToleranceRadius(self)

    def SetDifferenceThreshold(self, *args):
        """SetDifferenceThreshold(self, unsigned short _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_SetDifferenceThreshold(self, *args)

    def GetDifferenceThreshold(self):
        """GetDifferenceThreshold(self) -> unsigned short"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_GetDifferenceThreshold(self)

    def SetIgnoreBoundaryPixels(self, *args):
        """SetIgnoreBoundaryPixels(self, bool _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_SetIgnoreBoundaryPixels(self, *args)

    def GetIgnoreBoundaryPixels(self):
        """GetIgnoreBoundaryPixels(self) -> bool"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_GetIgnoreBoundaryPixels(self)

    def GetMeanDifference(self):
        """GetMeanDifference(self) -> double"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_GetMeanDifference(self)

    def GetTotalDifference(self):
        """GetTotalDifference(self) -> double"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_GetTotalDifference(self)

    def GetNumberOfPixelsWithDifferences(self):
        """GetNumberOfPixelsWithDifferences(self) -> unsigned long"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_GetNumberOfPixelsWithDifferences(self)

    __swig_destroy__ = _itkDifferenceImageFilterPython.delete_itkDifferenceImageFilterIUS2IUS2
    def cast(*args):
        """cast(itkLightObject obj) -> itkDifferenceImageFilterIUS2IUS2"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDifferenceImageFilterIUS2IUS2"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDifferenceImageFilterIUS2IUS2
        
        Create a new object of the class itkDifferenceImageFilterIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDifferenceImageFilterIUS2IUS2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDifferenceImageFilterIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDifferenceImageFilterIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDifferenceImageFilterIUS2IUS2.SetValidInput = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_SetValidInput,None,itkDifferenceImageFilterIUS2IUS2)
itkDifferenceImageFilterIUS2IUS2.SetTestInput = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_SetTestInput,None,itkDifferenceImageFilterIUS2IUS2)
itkDifferenceImageFilterIUS2IUS2.SetToleranceRadius = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_SetToleranceRadius,None,itkDifferenceImageFilterIUS2IUS2)
itkDifferenceImageFilterIUS2IUS2.GetToleranceRadius = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_GetToleranceRadius,None,itkDifferenceImageFilterIUS2IUS2)
itkDifferenceImageFilterIUS2IUS2.SetDifferenceThreshold = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_SetDifferenceThreshold,None,itkDifferenceImageFilterIUS2IUS2)
itkDifferenceImageFilterIUS2IUS2.GetDifferenceThreshold = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_GetDifferenceThreshold,None,itkDifferenceImageFilterIUS2IUS2)
itkDifferenceImageFilterIUS2IUS2.SetIgnoreBoundaryPixels = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_SetIgnoreBoundaryPixels,None,itkDifferenceImageFilterIUS2IUS2)
itkDifferenceImageFilterIUS2IUS2.GetIgnoreBoundaryPixels = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_GetIgnoreBoundaryPixels,None,itkDifferenceImageFilterIUS2IUS2)
itkDifferenceImageFilterIUS2IUS2.GetMeanDifference = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_GetMeanDifference,None,itkDifferenceImageFilterIUS2IUS2)
itkDifferenceImageFilterIUS2IUS2.GetTotalDifference = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_GetTotalDifference,None,itkDifferenceImageFilterIUS2IUS2)
itkDifferenceImageFilterIUS2IUS2.GetNumberOfPixelsWithDifferences = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_GetNumberOfPixelsWithDifferences,None,itkDifferenceImageFilterIUS2IUS2)
itkDifferenceImageFilterIUS2IUS2.GetPointer = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_GetPointer,None,itkDifferenceImageFilterIUS2IUS2)
itkDifferenceImageFilterIUS2IUS2_swigregister = _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_swigregister
itkDifferenceImageFilterIUS2IUS2_swigregister(itkDifferenceImageFilterIUS2IUS2)

def itkDifferenceImageFilterIUS2IUS2___New_orig__():
  """itkDifferenceImageFilterIUS2IUS2___New_orig__()"""
  return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2___New_orig__()

def itkDifferenceImageFilterIUS2IUS2_cast(*args):
  """itkDifferenceImageFilterIUS2IUS2_cast(itkLightObject obj) -> itkDifferenceImageFilterIUS2IUS2"""
  return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS2IUS2_cast(*args)

class itkDifferenceImageFilterIUS3IUS3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """Proxy of C++ itkDifferenceImageFilterIUS3IUS3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetValidInput(self, *args):
        """SetValidInput(self, itkImageUS3 validImage)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_SetValidInput(self, *args)

    def SetTestInput(self, *args):
        """SetTestInput(self, itkImageUS3 testImage)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_SetTestInput(self, *args)

    def SetToleranceRadius(self, *args):
        """SetToleranceRadius(self, int _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_SetToleranceRadius(self, *args)

    def GetToleranceRadius(self):
        """GetToleranceRadius(self) -> int"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_GetToleranceRadius(self)

    def SetDifferenceThreshold(self, *args):
        """SetDifferenceThreshold(self, unsigned short _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_SetDifferenceThreshold(self, *args)

    def GetDifferenceThreshold(self):
        """GetDifferenceThreshold(self) -> unsigned short"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_GetDifferenceThreshold(self)

    def SetIgnoreBoundaryPixels(self, *args):
        """SetIgnoreBoundaryPixels(self, bool _arg)"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_SetIgnoreBoundaryPixels(self, *args)

    def GetIgnoreBoundaryPixels(self):
        """GetIgnoreBoundaryPixels(self) -> bool"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_GetIgnoreBoundaryPixels(self)

    def GetMeanDifference(self):
        """GetMeanDifference(self) -> double"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_GetMeanDifference(self)

    def GetTotalDifference(self):
        """GetTotalDifference(self) -> double"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_GetTotalDifference(self)

    def GetNumberOfPixelsWithDifferences(self):
        """GetNumberOfPixelsWithDifferences(self) -> unsigned long"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_GetNumberOfPixelsWithDifferences(self)

    __swig_destroy__ = _itkDifferenceImageFilterPython.delete_itkDifferenceImageFilterIUS3IUS3
    def cast(*args):
        """cast(itkLightObject obj) -> itkDifferenceImageFilterIUS3IUS3"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDifferenceImageFilterIUS3IUS3"""
        return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDifferenceImageFilterIUS3IUS3
        
        Create a new object of the class itkDifferenceImageFilterIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDifferenceImageFilterIUS3IUS3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDifferenceImageFilterIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDifferenceImageFilterIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDifferenceImageFilterIUS3IUS3.SetValidInput = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_SetValidInput,None,itkDifferenceImageFilterIUS3IUS3)
itkDifferenceImageFilterIUS3IUS3.SetTestInput = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_SetTestInput,None,itkDifferenceImageFilterIUS3IUS3)
itkDifferenceImageFilterIUS3IUS3.SetToleranceRadius = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_SetToleranceRadius,None,itkDifferenceImageFilterIUS3IUS3)
itkDifferenceImageFilterIUS3IUS3.GetToleranceRadius = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_GetToleranceRadius,None,itkDifferenceImageFilterIUS3IUS3)
itkDifferenceImageFilterIUS3IUS3.SetDifferenceThreshold = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_SetDifferenceThreshold,None,itkDifferenceImageFilterIUS3IUS3)
itkDifferenceImageFilterIUS3IUS3.GetDifferenceThreshold = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_GetDifferenceThreshold,None,itkDifferenceImageFilterIUS3IUS3)
itkDifferenceImageFilterIUS3IUS3.SetIgnoreBoundaryPixels = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_SetIgnoreBoundaryPixels,None,itkDifferenceImageFilterIUS3IUS3)
itkDifferenceImageFilterIUS3IUS3.GetIgnoreBoundaryPixels = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_GetIgnoreBoundaryPixels,None,itkDifferenceImageFilterIUS3IUS3)
itkDifferenceImageFilterIUS3IUS3.GetMeanDifference = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_GetMeanDifference,None,itkDifferenceImageFilterIUS3IUS3)
itkDifferenceImageFilterIUS3IUS3.GetTotalDifference = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_GetTotalDifference,None,itkDifferenceImageFilterIUS3IUS3)
itkDifferenceImageFilterIUS3IUS3.GetNumberOfPixelsWithDifferences = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_GetNumberOfPixelsWithDifferences,None,itkDifferenceImageFilterIUS3IUS3)
itkDifferenceImageFilterIUS3IUS3.GetPointer = new_instancemethod(_itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_GetPointer,None,itkDifferenceImageFilterIUS3IUS3)
itkDifferenceImageFilterIUS3IUS3_swigregister = _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_swigregister
itkDifferenceImageFilterIUS3IUS3_swigregister(itkDifferenceImageFilterIUS3IUS3)

def itkDifferenceImageFilterIUS3IUS3___New_orig__():
  """itkDifferenceImageFilterIUS3IUS3___New_orig__()"""
  return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3___New_orig__()

def itkDifferenceImageFilterIUS3IUS3_cast(*args):
  """itkDifferenceImageFilterIUS3IUS3_cast(itkLightObject obj) -> itkDifferenceImageFilterIUS3IUS3"""
  return _itkDifferenceImageFilterPython.itkDifferenceImageFilterIUS3IUS3_cast(*args)



