# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkTransformPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkTransformPython', [dirname(__file__)])
        except ImportError:
            import _itkTransformPython
            return _itkTransformPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkTransformPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkTransformPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkTransformPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkCovariantVectorPython
import vnl_vectorPython
import vcl_complexPython
import pyBasePython
import vnl_matrixPython
import itkFixedArrayPython
import itkVectorPython
import vnl_vector_refPython
import itkArray2DPython
import itkPointPython
import itkArrayPython
import ITKCommonBasePython
import itkEventObjectsPython
def itkDataObjectDecoratorTD33_New():
  return itkDataObjectDecoratorTD33.New()

def itkDataObjectDecoratorTD32_New():
  return itkDataObjectDecoratorTD32.New()

def itkDataObjectDecoratorTD23_New():
  return itkDataObjectDecoratorTD23.New()

def itkDataObjectDecoratorTD22_New():
  return itkDataObjectDecoratorTD22.New()

def itkTransformD33_New():
  return itkTransformD33.New()

def itkTransformD32_New():
  return itkTransformD32.New()

def itkTransformD23_New():
  return itkTransformD23.New()

def itkTransformD22_New():
  return itkTransformD22.New()

def itkTransformBase_New():
  return itkTransformBase.New()

class listitkTransformBase_Pointer(object):
    """Proxy of C++ std::list<(itkTransformBase_Pointer)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _itkTransformPython.listitkTransformBase_Pointer_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _itkTransformPython.listitkTransformBase_Pointer___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _itkTransformPython.listitkTransformBase_Pointer___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _itkTransformPython.listitkTransformBase_Pointer___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _itkTransformPython.listitkTransformBase_Pointer_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> listitkTransformBase_Pointer"""
        return _itkTransformPython.listitkTransformBase_Pointer___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, listitkTransformBase_Pointer v)"""
        return _itkTransformPython.listitkTransformBase_Pointer___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _itkTransformPython.listitkTransformBase_Pointer___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _itkTransformPython.listitkTransformBase_Pointer___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> listitkTransformBase_Pointer
        __getitem__(self, difference_type i) -> value_type
        """
        return _itkTransformPython.listitkTransformBase_Pointer___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, listitkTransformBase_Pointer v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _itkTransformPython.listitkTransformBase_Pointer___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _itkTransformPython.listitkTransformBase_Pointer_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _itkTransformPython.listitkTransformBase_Pointer_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _itkTransformPython.listitkTransformBase_Pointer_size(self)

    def clear(self):
        """clear(self)"""
        return _itkTransformPython.listitkTransformBase_Pointer_clear(self)

    def swap(self, *args):
        """swap(self, listitkTransformBase_Pointer v)"""
        return _itkTransformPython.listitkTransformBase_Pointer_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _itkTransformPython.listitkTransformBase_Pointer_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _itkTransformPython.listitkTransformBase_Pointer_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _itkTransformPython.listitkTransformBase_Pointer_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _itkTransformPython.listitkTransformBase_Pointer_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _itkTransformPython.listitkTransformBase_Pointer_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _itkTransformPython.listitkTransformBase_Pointer_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _itkTransformPython.listitkTransformBase_Pointer_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> listitkTransformBase_Pointer
        __init__(self, listitkTransformBase_Pointer arg0) -> listitkTransformBase_Pointer
        __init__(self, size_type size) -> listitkTransformBase_Pointer
        __init__(self, size_type size, value_type value) -> listitkTransformBase_Pointer
        """
        _itkTransformPython.listitkTransformBase_Pointer_swiginit(self,_itkTransformPython.new_listitkTransformBase_Pointer(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _itkTransformPython.listitkTransformBase_Pointer_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _itkTransformPython.listitkTransformBase_Pointer_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _itkTransformPython.listitkTransformBase_Pointer_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _itkTransformPython.listitkTransformBase_Pointer_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _itkTransformPython.listitkTransformBase_Pointer_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _itkTransformPython.listitkTransformBase_Pointer_insert(self, *args)

    def pop_front(self):
        """pop_front(self)"""
        return _itkTransformPython.listitkTransformBase_Pointer_pop_front(self)

    def push_front(self, *args):
        """push_front(self, value_type x)"""
        return _itkTransformPython.listitkTransformBase_Pointer_push_front(self, *args)

    def reverse(self):
        """reverse(self)"""
        return _itkTransformPython.listitkTransformBase_Pointer_reverse(self)

    __swig_destroy__ = _itkTransformPython.delete_listitkTransformBase_Pointer
listitkTransformBase_Pointer.iterator = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer_iterator,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.__nonzero__ = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer___nonzero__,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.__bool__ = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer___bool__,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.__len__ = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer___len__,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.pop = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer_pop,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.__getslice__ = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer___getslice__,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.__setslice__ = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer___setslice__,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.__delslice__ = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer___delslice__,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.__delitem__ = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer___delitem__,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.__getitem__ = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer___getitem__,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.__setitem__ = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer___setitem__,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.append = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer_append,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.empty = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer_empty,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.size = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer_size,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.clear = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer_clear,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.swap = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer_swap,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.get_allocator = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer_get_allocator,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.begin = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer_begin,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.end = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer_end,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.rbegin = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer_rbegin,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.rend = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer_rend,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.pop_back = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer_pop_back,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.erase = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer_erase,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.push_back = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer_push_back,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.front = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer_front,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.back = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer_back,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.assign = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer_assign,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.resize = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer_resize,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.insert = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer_insert,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.pop_front = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer_pop_front,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.push_front = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer_push_front,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer.reverse = new_instancemethod(_itkTransformPython.listitkTransformBase_Pointer_reverse,None,listitkTransformBase_Pointer)
listitkTransformBase_Pointer_swigregister = _itkTransformPython.listitkTransformBase_Pointer_swigregister
listitkTransformBase_Pointer_swigregister(listitkTransformBase_Pointer)

class itkDataObjectDecoratorTD22(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkDataObjectDecoratorTD22 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkTransformPython.itkDataObjectDecoratorTD22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Set(self, *args):
        """Set(self, itkTransformD22 val)"""
        return _itkTransformPython.itkDataObjectDecoratorTD22_Set(self, *args)

    def Get(self):
        """Get(self) -> itkTransformD22"""
        return _itkTransformPython.itkDataObjectDecoratorTD22_Get(self)

    __swig_destroy__ = _itkTransformPython.delete_itkDataObjectDecoratorTD22
    def cast(*args):
        """cast(itkLightObject obj) -> itkDataObjectDecoratorTD22"""
        return _itkTransformPython.itkDataObjectDecoratorTD22_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDataObjectDecoratorTD22"""
        return _itkTransformPython.itkDataObjectDecoratorTD22_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTD22
        
        Create a new object of the class itkDataObjectDecoratorTD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDataObjectDecoratorTD22.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDataObjectDecoratorTD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDataObjectDecoratorTD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDataObjectDecoratorTD22.Set = new_instancemethod(_itkTransformPython.itkDataObjectDecoratorTD22_Set,None,itkDataObjectDecoratorTD22)
itkDataObjectDecoratorTD22.Get = new_instancemethod(_itkTransformPython.itkDataObjectDecoratorTD22_Get,None,itkDataObjectDecoratorTD22)
itkDataObjectDecoratorTD22.GetPointer = new_instancemethod(_itkTransformPython.itkDataObjectDecoratorTD22_GetPointer,None,itkDataObjectDecoratorTD22)
itkDataObjectDecoratorTD22_swigregister = _itkTransformPython.itkDataObjectDecoratorTD22_swigregister
itkDataObjectDecoratorTD22_swigregister(itkDataObjectDecoratorTD22)

def itkDataObjectDecoratorTD22___New_orig__():
  """itkDataObjectDecoratorTD22___New_orig__()"""
  return _itkTransformPython.itkDataObjectDecoratorTD22___New_orig__()

def itkDataObjectDecoratorTD22_cast(*args):
  """itkDataObjectDecoratorTD22_cast(itkLightObject obj) -> itkDataObjectDecoratorTD22"""
  return _itkTransformPython.itkDataObjectDecoratorTD22_cast(*args)

class itkDataObjectDecoratorTD23(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkDataObjectDecoratorTD23 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkTransformPython.itkDataObjectDecoratorTD23___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Set(self, *args):
        """Set(self, itkTransformD23 val)"""
        return _itkTransformPython.itkDataObjectDecoratorTD23_Set(self, *args)

    def Get(self):
        """Get(self) -> itkTransformD23"""
        return _itkTransformPython.itkDataObjectDecoratorTD23_Get(self)

    __swig_destroy__ = _itkTransformPython.delete_itkDataObjectDecoratorTD23
    def cast(*args):
        """cast(itkLightObject obj) -> itkDataObjectDecoratorTD23"""
        return _itkTransformPython.itkDataObjectDecoratorTD23_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDataObjectDecoratorTD23"""
        return _itkTransformPython.itkDataObjectDecoratorTD23_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTD23
        
        Create a new object of the class itkDataObjectDecoratorTD23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDataObjectDecoratorTD23.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDataObjectDecoratorTD23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDataObjectDecoratorTD23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDataObjectDecoratorTD23.Set = new_instancemethod(_itkTransformPython.itkDataObjectDecoratorTD23_Set,None,itkDataObjectDecoratorTD23)
itkDataObjectDecoratorTD23.Get = new_instancemethod(_itkTransformPython.itkDataObjectDecoratorTD23_Get,None,itkDataObjectDecoratorTD23)
itkDataObjectDecoratorTD23.GetPointer = new_instancemethod(_itkTransformPython.itkDataObjectDecoratorTD23_GetPointer,None,itkDataObjectDecoratorTD23)
itkDataObjectDecoratorTD23_swigregister = _itkTransformPython.itkDataObjectDecoratorTD23_swigregister
itkDataObjectDecoratorTD23_swigregister(itkDataObjectDecoratorTD23)

def itkDataObjectDecoratorTD23___New_orig__():
  """itkDataObjectDecoratorTD23___New_orig__()"""
  return _itkTransformPython.itkDataObjectDecoratorTD23___New_orig__()

def itkDataObjectDecoratorTD23_cast(*args):
  """itkDataObjectDecoratorTD23_cast(itkLightObject obj) -> itkDataObjectDecoratorTD23"""
  return _itkTransformPython.itkDataObjectDecoratorTD23_cast(*args)

class itkDataObjectDecoratorTD32(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkDataObjectDecoratorTD32 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkTransformPython.itkDataObjectDecoratorTD32___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Set(self, *args):
        """Set(self, itkTransformD32 val)"""
        return _itkTransformPython.itkDataObjectDecoratorTD32_Set(self, *args)

    def Get(self):
        """Get(self) -> itkTransformD32"""
        return _itkTransformPython.itkDataObjectDecoratorTD32_Get(self)

    __swig_destroy__ = _itkTransformPython.delete_itkDataObjectDecoratorTD32
    def cast(*args):
        """cast(itkLightObject obj) -> itkDataObjectDecoratorTD32"""
        return _itkTransformPython.itkDataObjectDecoratorTD32_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDataObjectDecoratorTD32"""
        return _itkTransformPython.itkDataObjectDecoratorTD32_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTD32
        
        Create a new object of the class itkDataObjectDecoratorTD32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDataObjectDecoratorTD32.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDataObjectDecoratorTD32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDataObjectDecoratorTD32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDataObjectDecoratorTD32.Set = new_instancemethod(_itkTransformPython.itkDataObjectDecoratorTD32_Set,None,itkDataObjectDecoratorTD32)
itkDataObjectDecoratorTD32.Get = new_instancemethod(_itkTransformPython.itkDataObjectDecoratorTD32_Get,None,itkDataObjectDecoratorTD32)
itkDataObjectDecoratorTD32.GetPointer = new_instancemethod(_itkTransformPython.itkDataObjectDecoratorTD32_GetPointer,None,itkDataObjectDecoratorTD32)
itkDataObjectDecoratorTD32_swigregister = _itkTransformPython.itkDataObjectDecoratorTD32_swigregister
itkDataObjectDecoratorTD32_swigregister(itkDataObjectDecoratorTD32)

def itkDataObjectDecoratorTD32___New_orig__():
  """itkDataObjectDecoratorTD32___New_orig__()"""
  return _itkTransformPython.itkDataObjectDecoratorTD32___New_orig__()

def itkDataObjectDecoratorTD32_cast(*args):
  """itkDataObjectDecoratorTD32_cast(itkLightObject obj) -> itkDataObjectDecoratorTD32"""
  return _itkTransformPython.itkDataObjectDecoratorTD32_cast(*args)

class itkDataObjectDecoratorTD33(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkDataObjectDecoratorTD33 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkTransformPython.itkDataObjectDecoratorTD33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Set(self, *args):
        """Set(self, itkTransformD33 val)"""
        return _itkTransformPython.itkDataObjectDecoratorTD33_Set(self, *args)

    def Get(self):
        """Get(self) -> itkTransformD33"""
        return _itkTransformPython.itkDataObjectDecoratorTD33_Get(self)

    __swig_destroy__ = _itkTransformPython.delete_itkDataObjectDecoratorTD33
    def cast(*args):
        """cast(itkLightObject obj) -> itkDataObjectDecoratorTD33"""
        return _itkTransformPython.itkDataObjectDecoratorTD33_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDataObjectDecoratorTD33"""
        return _itkTransformPython.itkDataObjectDecoratorTD33_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorTD33
        
        Create a new object of the class itkDataObjectDecoratorTD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDataObjectDecoratorTD33.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDataObjectDecoratorTD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDataObjectDecoratorTD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDataObjectDecoratorTD33.Set = new_instancemethod(_itkTransformPython.itkDataObjectDecoratorTD33_Set,None,itkDataObjectDecoratorTD33)
itkDataObjectDecoratorTD33.Get = new_instancemethod(_itkTransformPython.itkDataObjectDecoratorTD33_Get,None,itkDataObjectDecoratorTD33)
itkDataObjectDecoratorTD33.GetPointer = new_instancemethod(_itkTransformPython.itkDataObjectDecoratorTD33_GetPointer,None,itkDataObjectDecoratorTD33)
itkDataObjectDecoratorTD33_swigregister = _itkTransformPython.itkDataObjectDecoratorTD33_swigregister
itkDataObjectDecoratorTD33_swigregister(itkDataObjectDecoratorTD33)

def itkDataObjectDecoratorTD33___New_orig__():
  """itkDataObjectDecoratorTD33___New_orig__()"""
  return _itkTransformPython.itkDataObjectDecoratorTD33___New_orig__()

def itkDataObjectDecoratorTD33_cast(*args):
  """itkDataObjectDecoratorTD33_cast(itkLightObject obj) -> itkDataObjectDecoratorTD33"""
  return _itkTransformPython.itkDataObjectDecoratorTD33_cast(*args)

class itkTransformBase(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkTransformBase class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetNumberOfParameters(self):
        """GetNumberOfParameters(self) -> unsigned int"""
        return _itkTransformPython.itkTransformBase_GetNumberOfParameters(self)

    def GetParameters(self):
        """GetParameters(self) -> itkArrayD"""
        return _itkTransformPython.itkTransformBase_GetParameters(self)

    def GetInputSpaceDimension(self):
        """GetInputSpaceDimension(self) -> unsigned int"""
        return _itkTransformPython.itkTransformBase_GetInputSpaceDimension(self)

    def GetOutputSpaceDimension(self):
        """GetOutputSpaceDimension(self) -> unsigned int"""
        return _itkTransformPython.itkTransformBase_GetOutputSpaceDimension(self)

    def SetParameters(self, *args):
        """SetParameters(self, itkArrayD arg0)"""
        return _itkTransformPython.itkTransformBase_SetParameters(self, *args)

    def SetParametersByValue(self, *args):
        """SetParametersByValue(self, itkArrayD p)"""
        return _itkTransformPython.itkTransformBase_SetParametersByValue(self, *args)

    def SetFixedParameters(self, *args):
        """SetFixedParameters(self, itkArrayD arg0)"""
        return _itkTransformPython.itkTransformBase_SetFixedParameters(self, *args)

    def GetFixedParameters(self):
        """GetFixedParameters(self) -> itkArrayD"""
        return _itkTransformPython.itkTransformBase_GetFixedParameters(self)

    def GetTransformTypeAsString(self):
        """GetTransformTypeAsString(self) -> string"""
        return _itkTransformPython.itkTransformBase_GetTransformTypeAsString(self)

    __swig_destroy__ = _itkTransformPython.delete_itkTransformBase
    def cast(*args):
        """cast(itkLightObject obj) -> itkTransformBase"""
        return _itkTransformPython.itkTransformBase_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkTransformBase"""
        return _itkTransformPython.itkTransformBase_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkTransformBase
        
        Create a new object of the class itkTransformBase and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkTransformBase.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkTransformBase.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTransformBase.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTransformBase.GetNumberOfParameters = new_instancemethod(_itkTransformPython.itkTransformBase_GetNumberOfParameters,None,itkTransformBase)
itkTransformBase.GetParameters = new_instancemethod(_itkTransformPython.itkTransformBase_GetParameters,None,itkTransformBase)
itkTransformBase.GetInputSpaceDimension = new_instancemethod(_itkTransformPython.itkTransformBase_GetInputSpaceDimension,None,itkTransformBase)
itkTransformBase.GetOutputSpaceDimension = new_instancemethod(_itkTransformPython.itkTransformBase_GetOutputSpaceDimension,None,itkTransformBase)
itkTransformBase.SetParameters = new_instancemethod(_itkTransformPython.itkTransformBase_SetParameters,None,itkTransformBase)
itkTransformBase.SetParametersByValue = new_instancemethod(_itkTransformPython.itkTransformBase_SetParametersByValue,None,itkTransformBase)
itkTransformBase.SetFixedParameters = new_instancemethod(_itkTransformPython.itkTransformBase_SetFixedParameters,None,itkTransformBase)
itkTransformBase.GetFixedParameters = new_instancemethod(_itkTransformPython.itkTransformBase_GetFixedParameters,None,itkTransformBase)
itkTransformBase.GetTransformTypeAsString = new_instancemethod(_itkTransformPython.itkTransformBase_GetTransformTypeAsString,None,itkTransformBase)
itkTransformBase.GetPointer = new_instancemethod(_itkTransformPython.itkTransformBase_GetPointer,None,itkTransformBase)
itkTransformBase_swigregister = _itkTransformPython.itkTransformBase_swigregister
itkTransformBase_swigregister(itkTransformBase)

def itkTransformBase_cast(*args):
  """itkTransformBase_cast(itkLightObject obj) -> itkTransformBase"""
  return _itkTransformPython.itkTransformBase_cast(*args)

class itkTransformD22(itkTransformBase):
    """Proxy of C++ itkTransformD22 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputSpaceDimension = _itkTransformPython.itkTransformD22_InputSpaceDimension
    OutputSpaceDimension = _itkTransformPython.itkTransformD22_OutputSpaceDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkTransformPython.itkTransformD22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def TransformPoint(self, *args):
        """TransformPoint(self, itkPointD2 arg0) -> itkPointD2"""
        return _itkTransformPython.itkTransformD22_TransformPoint(self, *args)

    def TransformVector(self, *args):
        """
        TransformVector(self, itkVectorD2 arg0) -> itkVectorD2
        TransformVector(self, vnl_vector_fixed<(double,2u)> arg0) -> vnl_vector_fixed<(double,2u)>
        """
        return _itkTransformPython.itkTransformD22_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        """TransformCovariantVector(self, itkCovariantVectorD2 arg0) -> itkCovariantVectorD2"""
        return _itkTransformPython.itkTransformD22_TransformCovariantVector(self, *args)

    def GetJacobian(self, *args):
        """GetJacobian(self, itkPointD2 arg0) -> itkArray2DD"""
        return _itkTransformPython.itkTransformD22_GetJacobian(self, *args)

    def GetInverse(self, *args):
        """GetInverse(self, itkTransformD22 arg0) -> bool"""
        return _itkTransformPython.itkTransformD22_GetInverse(self, *args)

    def GetInverseTransform(self):
        """GetInverseTransform(self)"""
        return _itkTransformPython.itkTransformD22_GetInverseTransform(self)

    def IsLinear(self):
        """IsLinear(self) -> bool"""
        return _itkTransformPython.itkTransformD22_IsLinear(self)

    __swig_destroy__ = _itkTransformPython.delete_itkTransformD22
    def cast(*args):
        """cast(itkLightObject obj) -> itkTransformD22"""
        return _itkTransformPython.itkTransformD22_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkTransformD22"""
        return _itkTransformPython.itkTransformD22_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkTransformD22
        
        Create a new object of the class itkTransformD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkTransformD22.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkTransformD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTransformD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTransformD22.TransformPoint = new_instancemethod(_itkTransformPython.itkTransformD22_TransformPoint,None,itkTransformD22)
itkTransformD22.TransformVector = new_instancemethod(_itkTransformPython.itkTransformD22_TransformVector,None,itkTransformD22)
itkTransformD22.TransformCovariantVector = new_instancemethod(_itkTransformPython.itkTransformD22_TransformCovariantVector,None,itkTransformD22)
itkTransformD22.GetJacobian = new_instancemethod(_itkTransformPython.itkTransformD22_GetJacobian,None,itkTransformD22)
itkTransformD22.GetInverse = new_instancemethod(_itkTransformPython.itkTransformD22_GetInverse,None,itkTransformD22)
itkTransformD22.GetInverseTransform = new_instancemethod(_itkTransformPython.itkTransformD22_GetInverseTransform,None,itkTransformD22)
itkTransformD22.IsLinear = new_instancemethod(_itkTransformPython.itkTransformD22_IsLinear,None,itkTransformD22)
itkTransformD22.GetPointer = new_instancemethod(_itkTransformPython.itkTransformD22_GetPointer,None,itkTransformD22)
itkTransformD22_swigregister = _itkTransformPython.itkTransformD22_swigregister
itkTransformD22_swigregister(itkTransformD22)

def itkTransformD22___New_orig__():
  """itkTransformD22___New_orig__()"""
  return _itkTransformPython.itkTransformD22___New_orig__()

def itkTransformD22_cast(*args):
  """itkTransformD22_cast(itkLightObject obj) -> itkTransformD22"""
  return _itkTransformPython.itkTransformD22_cast(*args)

class itkTransformD23(itkTransformBase):
    """Proxy of C++ itkTransformD23 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputSpaceDimension = _itkTransformPython.itkTransformD23_InputSpaceDimension
    OutputSpaceDimension = _itkTransformPython.itkTransformD23_OutputSpaceDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkTransformPython.itkTransformD23___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def TransformPoint(self, *args):
        """TransformPoint(self, itkPointD2 arg0) -> itkPointD3"""
        return _itkTransformPython.itkTransformD23_TransformPoint(self, *args)

    def TransformVector(self, *args):
        """
        TransformVector(self, itkVectorD2 arg0) -> itkVectorD3
        TransformVector(self, vnl_vector_fixed<(double,2u)> arg0) -> vnl_vector_fixed<(double,3u)>
        """
        return _itkTransformPython.itkTransformD23_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        """TransformCovariantVector(self, itkCovariantVectorD2 arg0) -> itkCovariantVectorD3"""
        return _itkTransformPython.itkTransformD23_TransformCovariantVector(self, *args)

    def GetJacobian(self, *args):
        """GetJacobian(self, itkPointD2 arg0) -> itkArray2DD"""
        return _itkTransformPython.itkTransformD23_GetJacobian(self, *args)

    def GetInverse(self, *args):
        """GetInverse(self, itkTransformD23 arg0) -> bool"""
        return _itkTransformPython.itkTransformD23_GetInverse(self, *args)

    def GetInverseTransform(self):
        """GetInverseTransform(self)"""
        return _itkTransformPython.itkTransformD23_GetInverseTransform(self)

    def IsLinear(self):
        """IsLinear(self) -> bool"""
        return _itkTransformPython.itkTransformD23_IsLinear(self)

    __swig_destroy__ = _itkTransformPython.delete_itkTransformD23
    def cast(*args):
        """cast(itkLightObject obj) -> itkTransformD23"""
        return _itkTransformPython.itkTransformD23_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkTransformD23"""
        return _itkTransformPython.itkTransformD23_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkTransformD23
        
        Create a new object of the class itkTransformD23 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkTransformD23.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkTransformD23.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTransformD23.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTransformD23.TransformPoint = new_instancemethod(_itkTransformPython.itkTransformD23_TransformPoint,None,itkTransformD23)
itkTransformD23.TransformVector = new_instancemethod(_itkTransformPython.itkTransformD23_TransformVector,None,itkTransformD23)
itkTransformD23.TransformCovariantVector = new_instancemethod(_itkTransformPython.itkTransformD23_TransformCovariantVector,None,itkTransformD23)
itkTransformD23.GetJacobian = new_instancemethod(_itkTransformPython.itkTransformD23_GetJacobian,None,itkTransformD23)
itkTransformD23.GetInverse = new_instancemethod(_itkTransformPython.itkTransformD23_GetInverse,None,itkTransformD23)
itkTransformD23.GetInverseTransform = new_instancemethod(_itkTransformPython.itkTransformD23_GetInverseTransform,None,itkTransformD23)
itkTransformD23.IsLinear = new_instancemethod(_itkTransformPython.itkTransformD23_IsLinear,None,itkTransformD23)
itkTransformD23.GetPointer = new_instancemethod(_itkTransformPython.itkTransformD23_GetPointer,None,itkTransformD23)
itkTransformD23_swigregister = _itkTransformPython.itkTransformD23_swigregister
itkTransformD23_swigregister(itkTransformD23)

def itkTransformD23___New_orig__():
  """itkTransformD23___New_orig__()"""
  return _itkTransformPython.itkTransformD23___New_orig__()

def itkTransformD23_cast(*args):
  """itkTransformD23_cast(itkLightObject obj) -> itkTransformD23"""
  return _itkTransformPython.itkTransformD23_cast(*args)

class itkTransformD32(itkTransformBase):
    """Proxy of C++ itkTransformD32 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputSpaceDimension = _itkTransformPython.itkTransformD32_InputSpaceDimension
    OutputSpaceDimension = _itkTransformPython.itkTransformD32_OutputSpaceDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkTransformPython.itkTransformD32___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def TransformPoint(self, *args):
        """TransformPoint(self, itkPointD3 arg0) -> itkPointD2"""
        return _itkTransformPython.itkTransformD32_TransformPoint(self, *args)

    def TransformVector(self, *args):
        """
        TransformVector(self, itkVectorD3 arg0) -> itkVectorD2
        TransformVector(self, vnl_vector_fixed<(double,3u)> arg0) -> vnl_vector_fixed<(double,2u)>
        """
        return _itkTransformPython.itkTransformD32_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        """TransformCovariantVector(self, itkCovariantVectorD3 arg0) -> itkCovariantVectorD2"""
        return _itkTransformPython.itkTransformD32_TransformCovariantVector(self, *args)

    def GetJacobian(self, *args):
        """GetJacobian(self, itkPointD3 arg0) -> itkArray2DD"""
        return _itkTransformPython.itkTransformD32_GetJacobian(self, *args)

    def GetInverse(self, *args):
        """GetInverse(self, itkTransformD32 arg0) -> bool"""
        return _itkTransformPython.itkTransformD32_GetInverse(self, *args)

    def GetInverseTransform(self):
        """GetInverseTransform(self)"""
        return _itkTransformPython.itkTransformD32_GetInverseTransform(self)

    def IsLinear(self):
        """IsLinear(self) -> bool"""
        return _itkTransformPython.itkTransformD32_IsLinear(self)

    __swig_destroy__ = _itkTransformPython.delete_itkTransformD32
    def cast(*args):
        """cast(itkLightObject obj) -> itkTransformD32"""
        return _itkTransformPython.itkTransformD32_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkTransformD32"""
        return _itkTransformPython.itkTransformD32_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkTransformD32
        
        Create a new object of the class itkTransformD32 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkTransformD32.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkTransformD32.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTransformD32.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTransformD32.TransformPoint = new_instancemethod(_itkTransformPython.itkTransformD32_TransformPoint,None,itkTransformD32)
itkTransformD32.TransformVector = new_instancemethod(_itkTransformPython.itkTransformD32_TransformVector,None,itkTransformD32)
itkTransformD32.TransformCovariantVector = new_instancemethod(_itkTransformPython.itkTransformD32_TransformCovariantVector,None,itkTransformD32)
itkTransformD32.GetJacobian = new_instancemethod(_itkTransformPython.itkTransformD32_GetJacobian,None,itkTransformD32)
itkTransformD32.GetInverse = new_instancemethod(_itkTransformPython.itkTransformD32_GetInverse,None,itkTransformD32)
itkTransformD32.GetInverseTransform = new_instancemethod(_itkTransformPython.itkTransformD32_GetInverseTransform,None,itkTransformD32)
itkTransformD32.IsLinear = new_instancemethod(_itkTransformPython.itkTransformD32_IsLinear,None,itkTransformD32)
itkTransformD32.GetPointer = new_instancemethod(_itkTransformPython.itkTransformD32_GetPointer,None,itkTransformD32)
itkTransformD32_swigregister = _itkTransformPython.itkTransformD32_swigregister
itkTransformD32_swigregister(itkTransformD32)

def itkTransformD32___New_orig__():
  """itkTransformD32___New_orig__()"""
  return _itkTransformPython.itkTransformD32___New_orig__()

def itkTransformD32_cast(*args):
  """itkTransformD32_cast(itkLightObject obj) -> itkTransformD32"""
  return _itkTransformPython.itkTransformD32_cast(*args)

class itkTransformD33(itkTransformBase):
    """Proxy of C++ itkTransformD33 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputSpaceDimension = _itkTransformPython.itkTransformD33_InputSpaceDimension
    OutputSpaceDimension = _itkTransformPython.itkTransformD33_OutputSpaceDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkTransformPython.itkTransformD33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def TransformPoint(self, *args):
        """TransformPoint(self, itkPointD3 arg0) -> itkPointD3"""
        return _itkTransformPython.itkTransformD33_TransformPoint(self, *args)

    def TransformVector(self, *args):
        """
        TransformVector(self, itkVectorD3 arg0) -> itkVectorD3
        TransformVector(self, vnl_vector_fixed<(double,3u)> arg0) -> vnl_vector_fixed<(double,3u)>
        """
        return _itkTransformPython.itkTransformD33_TransformVector(self, *args)

    def TransformCovariantVector(self, *args):
        """TransformCovariantVector(self, itkCovariantVectorD3 arg0) -> itkCovariantVectorD3"""
        return _itkTransformPython.itkTransformD33_TransformCovariantVector(self, *args)

    def GetJacobian(self, *args):
        """GetJacobian(self, itkPointD3 arg0) -> itkArray2DD"""
        return _itkTransformPython.itkTransformD33_GetJacobian(self, *args)

    def GetInverse(self, *args):
        """GetInverse(self, itkTransformD33 arg0) -> bool"""
        return _itkTransformPython.itkTransformD33_GetInverse(self, *args)

    def GetInverseTransform(self):
        """GetInverseTransform(self)"""
        return _itkTransformPython.itkTransformD33_GetInverseTransform(self)

    def IsLinear(self):
        """IsLinear(self) -> bool"""
        return _itkTransformPython.itkTransformD33_IsLinear(self)

    __swig_destroy__ = _itkTransformPython.delete_itkTransformD33
    def cast(*args):
        """cast(itkLightObject obj) -> itkTransformD33"""
        return _itkTransformPython.itkTransformD33_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkTransformD33"""
        return _itkTransformPython.itkTransformD33_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkTransformD33
        
        Create a new object of the class itkTransformD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkTransformD33.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkTransformD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkTransformD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkTransformD33.TransformPoint = new_instancemethod(_itkTransformPython.itkTransformD33_TransformPoint,None,itkTransformD33)
itkTransformD33.TransformVector = new_instancemethod(_itkTransformPython.itkTransformD33_TransformVector,None,itkTransformD33)
itkTransformD33.TransformCovariantVector = new_instancemethod(_itkTransformPython.itkTransformD33_TransformCovariantVector,None,itkTransformD33)
itkTransformD33.GetJacobian = new_instancemethod(_itkTransformPython.itkTransformD33_GetJacobian,None,itkTransformD33)
itkTransformD33.GetInverse = new_instancemethod(_itkTransformPython.itkTransformD33_GetInverse,None,itkTransformD33)
itkTransformD33.GetInverseTransform = new_instancemethod(_itkTransformPython.itkTransformD33_GetInverseTransform,None,itkTransformD33)
itkTransformD33.IsLinear = new_instancemethod(_itkTransformPython.itkTransformD33_IsLinear,None,itkTransformD33)
itkTransformD33.GetPointer = new_instancemethod(_itkTransformPython.itkTransformD33_GetPointer,None,itkTransformD33)
itkTransformD33_swigregister = _itkTransformPython.itkTransformD33_swigregister
itkTransformD33_swigregister(itkTransformD33)

def itkTransformD33___New_orig__():
  """itkTransformD33___New_orig__()"""
  return _itkTransformPython.itkTransformD33___New_orig__()

def itkTransformD33_cast(*args):
  """itkTransformD33_cast(itkLightObject obj) -> itkTransformD33"""
  return _itkTransformPython.itkTransformD33_cast(*args)



