// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkHessian3DToVesselnessMeasureImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkHessian3DToVesselnessMeasureImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkHessian3DToVesselnessMeasureImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkHessian3DToVesselnessMeasureImageFilterJava
#endif
#ifdef SWIGLUA
%module itkHessian3DToVesselnessMeasureImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkHessian3DToVesselnessMeasureImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkHessian3DToVesselnessMeasureImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkHessian3DToVesselnessMeasureImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkHessian3DToVesselnessMeasureImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkHessian3DToVesselnessMeasureImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkHessian3DToVesselnessMeasureImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkHessian3DToVesselnessMeasureImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkHessian3DToVesselnessMeasureImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkHessian3DToVesselnessMeasureImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkHessian3DToVesselnessMeasureImageFilterPython
#endif
#ifdef SWIGR
%module itkHessian3DToVesselnessMeasureImageFilterR
#endif
#ifdef SWIGRUBY
%module itkHessian3DToVesselnessMeasureImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkHessian3DToVesselnessMeasureImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkHessian3DToVesselnessMeasureImageFilterTcl
#endif
#ifdef SWIGXML
%module itkHessian3DToVesselnessMeasureImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Filtering.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkImageToImageFilterB.i


%include itk.i
%include wrap_itkHessian3DToVesselnessMeasureImageFilter_ext.i


 class itkHessian3DToVesselnessMeasureImageFilterD : public itkImageToImageFilterISSRTD33ID3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputPixelDimension = 3 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkHessian3DToVesselnessMeasureImageFilterD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void SetAlpha1(double const _arg);
     virtual double GetAlpha1() const;
     virtual void SetAlpha2(double const _arg);
     virtual double GetAlpha2() const;
   private:
     itkHessian3DToVesselnessMeasureImageFilterD(itkHessian3DToVesselnessMeasureImageFilterD const & arg0);
     void operator=(itkHessian3DToVesselnessMeasureImageFilterD const & arg0);
   protected:
     itkHessian3DToVesselnessMeasureImageFilterD();
     ~itkHessian3DToVesselnessMeasureImageFilterD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkHessian3DToVesselnessMeasureImageFilterD_Pointer {
   public:
     itkHessian3DToVesselnessMeasureImageFilterD_Pointer();
     itkHessian3DToVesselnessMeasureImageFilterD_Pointer(itkHessian3DToVesselnessMeasureImageFilterD_Pointer const & p);
     itkHessian3DToVesselnessMeasureImageFilterD_Pointer(itkHessian3DToVesselnessMeasureImageFilterD * p);
     ~itkHessian3DToVesselnessMeasureImageFilterD_Pointer();
     itkHessian3DToVesselnessMeasureImageFilterD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkHessian3DToVesselnessMeasureImageFilterD * GetPointer() const;
     bool operator<(itkHessian3DToVesselnessMeasureImageFilterD_Pointer const & r) const;
     bool operator>(itkHessian3DToVesselnessMeasureImageFilterD_Pointer const & r) const;
     bool operator<=(itkHessian3DToVesselnessMeasureImageFilterD_Pointer const & r) const;
     bool operator>=(itkHessian3DToVesselnessMeasureImageFilterD_Pointer const & r) const;
     itkHessian3DToVesselnessMeasureImageFilterD_Pointer & operator=(itkHessian3DToVesselnessMeasureImageFilterD_Pointer const & r);
     itkHessian3DToVesselnessMeasureImageFilterD_Pointer & operator=(itkHessian3DToVesselnessMeasureImageFilterD * r);
     itkHessian3DToVesselnessMeasureImageFilterD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkHessian3DToVesselnessMeasureImageFilterF : public itkImageToImageFilterISSRTD33IF3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputPixelDimension = 3 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkHessian3DToVesselnessMeasureImageFilterF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void SetAlpha1(double const _arg);
     virtual double GetAlpha1() const;
     virtual void SetAlpha2(double const _arg);
     virtual double GetAlpha2() const;
   private:
     itkHessian3DToVesselnessMeasureImageFilterF(itkHessian3DToVesselnessMeasureImageFilterF const & arg0);
     void operator=(itkHessian3DToVesselnessMeasureImageFilterF const & arg0);
   protected:
     itkHessian3DToVesselnessMeasureImageFilterF();
     ~itkHessian3DToVesselnessMeasureImageFilterF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkHessian3DToVesselnessMeasureImageFilterF_Pointer {
   public:
     itkHessian3DToVesselnessMeasureImageFilterF_Pointer();
     itkHessian3DToVesselnessMeasureImageFilterF_Pointer(itkHessian3DToVesselnessMeasureImageFilterF_Pointer const & p);
     itkHessian3DToVesselnessMeasureImageFilterF_Pointer(itkHessian3DToVesselnessMeasureImageFilterF * p);
     ~itkHessian3DToVesselnessMeasureImageFilterF_Pointer();
     itkHessian3DToVesselnessMeasureImageFilterF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkHessian3DToVesselnessMeasureImageFilterF * GetPointer() const;
     bool operator<(itkHessian3DToVesselnessMeasureImageFilterF_Pointer const & r) const;
     bool operator>(itkHessian3DToVesselnessMeasureImageFilterF_Pointer const & r) const;
     bool operator<=(itkHessian3DToVesselnessMeasureImageFilterF_Pointer const & r) const;
     bool operator>=(itkHessian3DToVesselnessMeasureImageFilterF_Pointer const & r) const;
     itkHessian3DToVesselnessMeasureImageFilterF_Pointer & operator=(itkHessian3DToVesselnessMeasureImageFilterF_Pointer const & r);
     itkHessian3DToVesselnessMeasureImageFilterF_Pointer & operator=(itkHessian3DToVesselnessMeasureImageFilterF * r);
     itkHessian3DToVesselnessMeasureImageFilterF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkHessian3DToVesselnessMeasureImageFilterUC : public itkImageToImageFilterISSRTD33IUC3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputPixelDimension = 3 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkHessian3DToVesselnessMeasureImageFilterUC_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void SetAlpha1(double const _arg);
     virtual double GetAlpha1() const;
     virtual void SetAlpha2(double const _arg);
     virtual double GetAlpha2() const;
   private:
     itkHessian3DToVesselnessMeasureImageFilterUC(itkHessian3DToVesselnessMeasureImageFilterUC const & arg0);
     void operator=(itkHessian3DToVesselnessMeasureImageFilterUC const & arg0);
   protected:
     itkHessian3DToVesselnessMeasureImageFilterUC();
     ~itkHessian3DToVesselnessMeasureImageFilterUC();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkHessian3DToVesselnessMeasureImageFilterUC_Pointer {
   public:
     itkHessian3DToVesselnessMeasureImageFilterUC_Pointer();
     itkHessian3DToVesselnessMeasureImageFilterUC_Pointer(itkHessian3DToVesselnessMeasureImageFilterUC_Pointer const & p);
     itkHessian3DToVesselnessMeasureImageFilterUC_Pointer(itkHessian3DToVesselnessMeasureImageFilterUC * p);
     ~itkHessian3DToVesselnessMeasureImageFilterUC_Pointer();
     itkHessian3DToVesselnessMeasureImageFilterUC * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkHessian3DToVesselnessMeasureImageFilterUC * GetPointer() const;
     bool operator<(itkHessian3DToVesselnessMeasureImageFilterUC_Pointer const & r) const;
     bool operator>(itkHessian3DToVesselnessMeasureImageFilterUC_Pointer const & r) const;
     bool operator<=(itkHessian3DToVesselnessMeasureImageFilterUC_Pointer const & r) const;
     bool operator>=(itkHessian3DToVesselnessMeasureImageFilterUC_Pointer const & r) const;
     itkHessian3DToVesselnessMeasureImageFilterUC_Pointer & operator=(itkHessian3DToVesselnessMeasureImageFilterUC_Pointer const & r);
     itkHessian3DToVesselnessMeasureImageFilterUC_Pointer & operator=(itkHessian3DToVesselnessMeasureImageFilterUC * r);
     itkHessian3DToVesselnessMeasureImageFilterUC * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkHessian3DToVesselnessMeasureImageFilterUL : public itkImageToImageFilterISSRTD33IUL3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputPixelDimension = 3 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkHessian3DToVesselnessMeasureImageFilterUL_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void SetAlpha1(double const _arg);
     virtual double GetAlpha1() const;
     virtual void SetAlpha2(double const _arg);
     virtual double GetAlpha2() const;
   private:
     itkHessian3DToVesselnessMeasureImageFilterUL(itkHessian3DToVesselnessMeasureImageFilterUL const & arg0);
     void operator=(itkHessian3DToVesselnessMeasureImageFilterUL const & arg0);
   protected:
     itkHessian3DToVesselnessMeasureImageFilterUL();
     ~itkHessian3DToVesselnessMeasureImageFilterUL();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkHessian3DToVesselnessMeasureImageFilterUL_Pointer {
   public:
     itkHessian3DToVesselnessMeasureImageFilterUL_Pointer();
     itkHessian3DToVesselnessMeasureImageFilterUL_Pointer(itkHessian3DToVesselnessMeasureImageFilterUL_Pointer const & p);
     itkHessian3DToVesselnessMeasureImageFilterUL_Pointer(itkHessian3DToVesselnessMeasureImageFilterUL * p);
     ~itkHessian3DToVesselnessMeasureImageFilterUL_Pointer();
     itkHessian3DToVesselnessMeasureImageFilterUL * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkHessian3DToVesselnessMeasureImageFilterUL * GetPointer() const;
     bool operator<(itkHessian3DToVesselnessMeasureImageFilterUL_Pointer const & r) const;
     bool operator>(itkHessian3DToVesselnessMeasureImageFilterUL_Pointer const & r) const;
     bool operator<=(itkHessian3DToVesselnessMeasureImageFilterUL_Pointer const & r) const;
     bool operator>=(itkHessian3DToVesselnessMeasureImageFilterUL_Pointer const & r) const;
     itkHessian3DToVesselnessMeasureImageFilterUL_Pointer & operator=(itkHessian3DToVesselnessMeasureImageFilterUL_Pointer const & r);
     itkHessian3DToVesselnessMeasureImageFilterUL_Pointer & operator=(itkHessian3DToVesselnessMeasureImageFilterUL * r);
     itkHessian3DToVesselnessMeasureImageFilterUL * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkHessian3DToVesselnessMeasureImageFilterUS : public itkImageToImageFilterISSRTD33IUS3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputPixelDimension = 3 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkHessian3DToVesselnessMeasureImageFilterUS_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void SetAlpha1(double const _arg);
     virtual double GetAlpha1() const;
     virtual void SetAlpha2(double const _arg);
     virtual double GetAlpha2() const;
   private:
     itkHessian3DToVesselnessMeasureImageFilterUS(itkHessian3DToVesselnessMeasureImageFilterUS const & arg0);
     void operator=(itkHessian3DToVesselnessMeasureImageFilterUS const & arg0);
   protected:
     itkHessian3DToVesselnessMeasureImageFilterUS();
     ~itkHessian3DToVesselnessMeasureImageFilterUS();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkHessian3DToVesselnessMeasureImageFilterUS_Pointer {
   public:
     itkHessian3DToVesselnessMeasureImageFilterUS_Pointer();
     itkHessian3DToVesselnessMeasureImageFilterUS_Pointer(itkHessian3DToVesselnessMeasureImageFilterUS_Pointer const & p);
     itkHessian3DToVesselnessMeasureImageFilterUS_Pointer(itkHessian3DToVesselnessMeasureImageFilterUS * p);
     ~itkHessian3DToVesselnessMeasureImageFilterUS_Pointer();
     itkHessian3DToVesselnessMeasureImageFilterUS * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkHessian3DToVesselnessMeasureImageFilterUS * GetPointer() const;
     bool operator<(itkHessian3DToVesselnessMeasureImageFilterUS_Pointer const & r) const;
     bool operator>(itkHessian3DToVesselnessMeasureImageFilterUS_Pointer const & r) const;
     bool operator<=(itkHessian3DToVesselnessMeasureImageFilterUS_Pointer const & r) const;
     bool operator>=(itkHessian3DToVesselnessMeasureImageFilterUS_Pointer const & r) const;
     itkHessian3DToVesselnessMeasureImageFilterUS_Pointer & operator=(itkHessian3DToVesselnessMeasureImageFilterUS_Pointer const & r);
     itkHessian3DToVesselnessMeasureImageFilterUS_Pointer & operator=(itkHessian3DToVesselnessMeasureImageFilterUS * r);
     itkHessian3DToVesselnessMeasureImageFilterUS * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


