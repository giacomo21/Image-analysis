# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkScaleTransformPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkScaleTransformPython', [dirname(__file__)])
        except ImportError:
            import _itkScaleTransformPython
            return _itkScaleTransformPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkScaleTransformPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkScaleTransformPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkScaleTransformPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkFixedArrayPython
import pyBasePython
import itkPointPython
import vnl_vectorPython
import vcl_complexPython
import vnl_matrixPython
import itkVectorPython
import vnl_vector_refPython
import itkTransformPython
import itkCovariantVectorPython
import itkArray2DPython
import itkArrayPython
import ITKCommonBasePython
import itkEventObjectsPython
def itkScaleTransformD3_New():
  return itkScaleTransformD3.New()

def itkScaleTransformD2_New():
  return itkScaleTransformD2.New()

class itkScaleTransformD2(itkTransformPython.itkTransformD22):
    """Proxy of C++ itkScaleTransformD2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SpaceDimension = _itkScaleTransformPython.itkScaleTransformD2_SpaceDimension
    ParametersDimension = _itkScaleTransformPython.itkScaleTransformD2_ParametersDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkScaleTransformPython.itkScaleTransformD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetScale(self, *args):
        """SetScale(self, itkFixedArrayD2 scale)"""
        return _itkScaleTransformPython.itkScaleTransformD2_SetScale(self, *args)

    def Compose(self, *args):
        """
        Compose(self, itkScaleTransformD2 other, bool pre = False)
        Compose(self, itkScaleTransformD2 other)
        """
        return _itkScaleTransformPython.itkScaleTransformD2_Compose(self, *args)

    def Scale(self, *args):
        """
        Scale(self, itkFixedArrayD2 scale, bool pre = False)
        Scale(self, itkFixedArrayD2 scale)
        """
        return _itkScaleTransformPython.itkScaleTransformD2_Scale(self, *args)

    def TransformVector(self, *args):
        """
        TransformVector(self, itkVectorD2 vector) -> itkVectorD2
        TransformVector(self, vnl_vector_fixed<(double,2u)> vector) -> vnl_vector_fixed<(double,2u)>
        """
        return _itkScaleTransformPython.itkScaleTransformD2_TransformVector(self, *args)

    def BackTransform(self, *args):
        """
        BackTransform(self, itkPointD2 point) -> itkPointD2
        BackTransform(self, itkVectorD2 vect) -> itkVectorD2
        BackTransform(self, vnl_vector_fixed<(double,2u)> vect) -> vnl_vector_fixed<(double,2u)>
        BackTransform(self, itkCovariantVectorD2 vect) -> itkCovariantVectorD2
        """
        return _itkScaleTransformPython.itkScaleTransformD2_BackTransform(self, *args)

    def GetInverse(self, *args):
        """GetInverse(self, itkScaleTransformD2 inverse) -> bool"""
        return _itkScaleTransformPython.itkScaleTransformD2_GetInverse(self, *args)

    def SetIdentity(self):
        """SetIdentity(self)"""
        return _itkScaleTransformPython.itkScaleTransformD2_SetIdentity(self)

    def SetCenter(self, *args):
        """SetCenter(self, itkPointD2 _arg)"""
        return _itkScaleTransformPython.itkScaleTransformD2_SetCenter(self, *args)

    def GetCenter(self):
        """GetCenter(self) -> itkPointD2"""
        return _itkScaleTransformPython.itkScaleTransformD2_GetCenter(self)

    def GetScale(self):
        """GetScale(self) -> itkFixedArrayD2"""
        return _itkScaleTransformPython.itkScaleTransformD2_GetScale(self)

    __swig_destroy__ = _itkScaleTransformPython.delete_itkScaleTransformD2
    def cast(*args):
        """cast(itkLightObject obj) -> itkScaleTransformD2"""
        return _itkScaleTransformPython.itkScaleTransformD2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkScaleTransformD2"""
        return _itkScaleTransformPython.itkScaleTransformD2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkScaleTransformD2
        
        Create a new object of the class itkScaleTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkScaleTransformD2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkScaleTransformD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScaleTransformD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScaleTransformD2.SetScale = new_instancemethod(_itkScaleTransformPython.itkScaleTransformD2_SetScale,None,itkScaleTransformD2)
itkScaleTransformD2.Compose = new_instancemethod(_itkScaleTransformPython.itkScaleTransformD2_Compose,None,itkScaleTransformD2)
itkScaleTransformD2.Scale = new_instancemethod(_itkScaleTransformPython.itkScaleTransformD2_Scale,None,itkScaleTransformD2)
itkScaleTransformD2.TransformVector = new_instancemethod(_itkScaleTransformPython.itkScaleTransformD2_TransformVector,None,itkScaleTransformD2)
itkScaleTransformD2.BackTransform = new_instancemethod(_itkScaleTransformPython.itkScaleTransformD2_BackTransform,None,itkScaleTransformD2)
itkScaleTransformD2.GetInverse = new_instancemethod(_itkScaleTransformPython.itkScaleTransformD2_GetInverse,None,itkScaleTransformD2)
itkScaleTransformD2.SetIdentity = new_instancemethod(_itkScaleTransformPython.itkScaleTransformD2_SetIdentity,None,itkScaleTransformD2)
itkScaleTransformD2.SetCenter = new_instancemethod(_itkScaleTransformPython.itkScaleTransformD2_SetCenter,None,itkScaleTransformD2)
itkScaleTransformD2.GetCenter = new_instancemethod(_itkScaleTransformPython.itkScaleTransformD2_GetCenter,None,itkScaleTransformD2)
itkScaleTransformD2.GetScale = new_instancemethod(_itkScaleTransformPython.itkScaleTransformD2_GetScale,None,itkScaleTransformD2)
itkScaleTransformD2.GetPointer = new_instancemethod(_itkScaleTransformPython.itkScaleTransformD2_GetPointer,None,itkScaleTransformD2)
itkScaleTransformD2_swigregister = _itkScaleTransformPython.itkScaleTransformD2_swigregister
itkScaleTransformD2_swigregister(itkScaleTransformD2)

def itkScaleTransformD2___New_orig__():
  """itkScaleTransformD2___New_orig__()"""
  return _itkScaleTransformPython.itkScaleTransformD2___New_orig__()

def itkScaleTransformD2_cast(*args):
  """itkScaleTransformD2_cast(itkLightObject obj) -> itkScaleTransformD2"""
  return _itkScaleTransformPython.itkScaleTransformD2_cast(*args)

class itkScaleTransformD3(itkTransformPython.itkTransformD33):
    """Proxy of C++ itkScaleTransformD3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SpaceDimension = _itkScaleTransformPython.itkScaleTransformD3_SpaceDimension
    ParametersDimension = _itkScaleTransformPython.itkScaleTransformD3_ParametersDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkScaleTransformPython.itkScaleTransformD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetScale(self, *args):
        """SetScale(self, itkFixedArrayD3 scale)"""
        return _itkScaleTransformPython.itkScaleTransformD3_SetScale(self, *args)

    def Compose(self, *args):
        """
        Compose(self, itkScaleTransformD3 other, bool pre = False)
        Compose(self, itkScaleTransformD3 other)
        """
        return _itkScaleTransformPython.itkScaleTransformD3_Compose(self, *args)

    def Scale(self, *args):
        """
        Scale(self, itkFixedArrayD3 scale, bool pre = False)
        Scale(self, itkFixedArrayD3 scale)
        """
        return _itkScaleTransformPython.itkScaleTransformD3_Scale(self, *args)

    def TransformVector(self, *args):
        """
        TransformVector(self, itkVectorD3 vector) -> itkVectorD3
        TransformVector(self, vnl_vector_fixed<(double,3u)> vector) -> vnl_vector_fixed<(double,3u)>
        """
        return _itkScaleTransformPython.itkScaleTransformD3_TransformVector(self, *args)

    def BackTransform(self, *args):
        """
        BackTransform(self, itkPointD3 point) -> itkPointD3
        BackTransform(self, itkVectorD3 vect) -> itkVectorD3
        BackTransform(self, vnl_vector_fixed<(double,3u)> vect) -> vnl_vector_fixed<(double,3u)>
        BackTransform(self, itkCovariantVectorD3 vect) -> itkCovariantVectorD3
        """
        return _itkScaleTransformPython.itkScaleTransformD3_BackTransform(self, *args)

    def GetInverse(self, *args):
        """GetInverse(self, itkScaleTransformD3 inverse) -> bool"""
        return _itkScaleTransformPython.itkScaleTransformD3_GetInverse(self, *args)

    def SetIdentity(self):
        """SetIdentity(self)"""
        return _itkScaleTransformPython.itkScaleTransformD3_SetIdentity(self)

    def SetCenter(self, *args):
        """SetCenter(self, itkPointD3 _arg)"""
        return _itkScaleTransformPython.itkScaleTransformD3_SetCenter(self, *args)

    def GetCenter(self):
        """GetCenter(self) -> itkPointD3"""
        return _itkScaleTransformPython.itkScaleTransformD3_GetCenter(self)

    def GetScale(self):
        """GetScale(self) -> itkFixedArrayD3"""
        return _itkScaleTransformPython.itkScaleTransformD3_GetScale(self)

    __swig_destroy__ = _itkScaleTransformPython.delete_itkScaleTransformD3
    def cast(*args):
        """cast(itkLightObject obj) -> itkScaleTransformD3"""
        return _itkScaleTransformPython.itkScaleTransformD3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkScaleTransformD3"""
        return _itkScaleTransformPython.itkScaleTransformD3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkScaleTransformD3
        
        Create a new object of the class itkScaleTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkScaleTransformD3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkScaleTransformD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkScaleTransformD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkScaleTransformD3.SetScale = new_instancemethod(_itkScaleTransformPython.itkScaleTransformD3_SetScale,None,itkScaleTransformD3)
itkScaleTransformD3.Compose = new_instancemethod(_itkScaleTransformPython.itkScaleTransformD3_Compose,None,itkScaleTransformD3)
itkScaleTransformD3.Scale = new_instancemethod(_itkScaleTransformPython.itkScaleTransformD3_Scale,None,itkScaleTransformD3)
itkScaleTransformD3.TransformVector = new_instancemethod(_itkScaleTransformPython.itkScaleTransformD3_TransformVector,None,itkScaleTransformD3)
itkScaleTransformD3.BackTransform = new_instancemethod(_itkScaleTransformPython.itkScaleTransformD3_BackTransform,None,itkScaleTransformD3)
itkScaleTransformD3.GetInverse = new_instancemethod(_itkScaleTransformPython.itkScaleTransformD3_GetInverse,None,itkScaleTransformD3)
itkScaleTransformD3.SetIdentity = new_instancemethod(_itkScaleTransformPython.itkScaleTransformD3_SetIdentity,None,itkScaleTransformD3)
itkScaleTransformD3.SetCenter = new_instancemethod(_itkScaleTransformPython.itkScaleTransformD3_SetCenter,None,itkScaleTransformD3)
itkScaleTransformD3.GetCenter = new_instancemethod(_itkScaleTransformPython.itkScaleTransformD3_GetCenter,None,itkScaleTransformD3)
itkScaleTransformD3.GetScale = new_instancemethod(_itkScaleTransformPython.itkScaleTransformD3_GetScale,None,itkScaleTransformD3)
itkScaleTransformD3.GetPointer = new_instancemethod(_itkScaleTransformPython.itkScaleTransformD3_GetPointer,None,itkScaleTransformD3)
itkScaleTransformD3_swigregister = _itkScaleTransformPython.itkScaleTransformD3_swigregister
itkScaleTransformD3_swigregister(itkScaleTransformD3)

def itkScaleTransformD3___New_orig__():
  """itkScaleTransformD3___New_orig__()"""
  return _itkScaleTransformPython.itkScaleTransformD3___New_orig__()

def itkScaleTransformD3_cast(*args):
  """itkScaleTransformD3_cast(itkLightObject obj) -> itkScaleTransformD3"""
  return _itkScaleTransformPython.itkScaleTransformD3_cast(*args)



