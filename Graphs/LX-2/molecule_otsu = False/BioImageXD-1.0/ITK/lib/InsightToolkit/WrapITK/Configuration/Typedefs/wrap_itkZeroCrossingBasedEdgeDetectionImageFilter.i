// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkZeroCrossingBasedEdgeDetectionImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkZeroCrossingBasedEdgeDetectionImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkZeroCrossingBasedEdgeDetectionImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkZeroCrossingBasedEdgeDetectionImageFilterJava
#endif
#ifdef SWIGLUA
%module itkZeroCrossingBasedEdgeDetectionImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkZeroCrossingBasedEdgeDetectionImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkZeroCrossingBasedEdgeDetectionImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkZeroCrossingBasedEdgeDetectionImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkZeroCrossingBasedEdgeDetectionImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkZeroCrossingBasedEdgeDetectionImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkZeroCrossingBasedEdgeDetectionImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkZeroCrossingBasedEdgeDetectionImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkZeroCrossingBasedEdgeDetectionImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkZeroCrossingBasedEdgeDetectionImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkZeroCrossingBasedEdgeDetectionImageFilterPython
#endif
#ifdef SWIGR
%module itkZeroCrossingBasedEdgeDetectionImageFilterR
#endif
#ifdef SWIGRUBY
%module itkZeroCrossingBasedEdgeDetectionImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkZeroCrossingBasedEdgeDetectionImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkZeroCrossingBasedEdgeDetectionImageFilterTcl
#endif
#ifdef SWIGXML
%module itkZeroCrossingBasedEdgeDetectionImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "EdgesAndContours.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkFixedArray.i
%import wrap_itkImageToImageFilterA.i


%include itk.i
%include wrap_itkZeroCrossingBasedEdgeDetectionImageFilter_ext.i


 class itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2 : public itkImageToImageFilterID2ID2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  OutputEqualityComparableCheck = 1 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  SameTypeCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     enum  {  PixelTypeIsFloatingPointCheck = 1 };
     static itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetVariance(itkFixedArrayD2 const _arg);
     virtual itkFixedArrayD2 const GetVariance() const;
     virtual void SetMaximumError(itkFixedArrayD2 const _arg);
     virtual itkFixedArrayD2 const GetMaximumError() const;
     virtual double GetBackgroundValue() const;
     virtual void SetBackgroundValue(double const _arg);
     virtual double GetForegroundValue() const;
     virtual void SetForegroundValue(double const _arg);
     void SetVariance(double const v);
     void SetMaximumError(double const v);
   private:
   protected:
     itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2();
     ~itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2();
     itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2(itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2 const & arg0);
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_Pointer {
   public:
     itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_Pointer();
     itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_Pointer(itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_Pointer const & p);
     itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_Pointer(itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2 * p);
     ~itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_Pointer();
     itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_Pointer const & r) const;
     itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_Pointer & operator=(itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_Pointer const & r);
     itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2_Pointer & operator=(itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2 * r);
     itkZeroCrossingBasedEdgeDetectionImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3 : public itkImageToImageFilterID3ID3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  OutputEqualityComparableCheck = 1 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  SameTypeCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     enum  {  PixelTypeIsFloatingPointCheck = 1 };
     static itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetVariance(itkFixedArrayD3 const _arg);
     virtual itkFixedArrayD3 const GetVariance() const;
     virtual void SetMaximumError(itkFixedArrayD3 const _arg);
     virtual itkFixedArrayD3 const GetMaximumError() const;
     virtual double GetBackgroundValue() const;
     virtual void SetBackgroundValue(double const _arg);
     virtual double GetForegroundValue() const;
     virtual void SetForegroundValue(double const _arg);
     void SetVariance(double const v);
     void SetMaximumError(double const v);
   private:
   protected:
     itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3();
     ~itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3();
     itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3(itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3 const & arg0);
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_Pointer {
   public:
     itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_Pointer();
     itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_Pointer(itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_Pointer const & p);
     itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_Pointer(itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3 * p);
     ~itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_Pointer();
     itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_Pointer const & r) const;
     itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_Pointer & operator=(itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_Pointer const & r);
     itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3_Pointer & operator=(itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3 * r);
     itkZeroCrossingBasedEdgeDetectionImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2 : public itkImageToImageFilterIF2IF2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  OutputEqualityComparableCheck = 1 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  SameTypeCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     enum  {  PixelTypeIsFloatingPointCheck = 1 };
     static itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetVariance(itkFixedArrayD2 const _arg);
     virtual itkFixedArrayD2 const GetVariance() const;
     virtual void SetMaximumError(itkFixedArrayD2 const _arg);
     virtual itkFixedArrayD2 const GetMaximumError() const;
     virtual float GetBackgroundValue() const;
     virtual void SetBackgroundValue(float const _arg);
     virtual float GetForegroundValue() const;
     virtual void SetForegroundValue(float const _arg);
     void SetVariance(double const v);
     void SetMaximumError(double const v);
   private:
   protected:
     itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2();
     ~itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2();
     itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2(itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2 const & arg0);
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_Pointer {
   public:
     itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_Pointer();
     itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_Pointer(itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_Pointer const & p);
     itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_Pointer(itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2 * p);
     ~itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_Pointer();
     itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_Pointer const & r) const;
     itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_Pointer & operator=(itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_Pointer const & r);
     itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2_Pointer & operator=(itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2 * r);
     itkZeroCrossingBasedEdgeDetectionImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3 : public itkImageToImageFilterIF3IF3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  OutputEqualityComparableCheck = 1 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  SameTypeCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     enum  {  PixelTypeIsFloatingPointCheck = 1 };
     static itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetVariance(itkFixedArrayD3 const _arg);
     virtual itkFixedArrayD3 const GetVariance() const;
     virtual void SetMaximumError(itkFixedArrayD3 const _arg);
     virtual itkFixedArrayD3 const GetMaximumError() const;
     virtual float GetBackgroundValue() const;
     virtual void SetBackgroundValue(float const _arg);
     virtual float GetForegroundValue() const;
     virtual void SetForegroundValue(float const _arg);
     void SetVariance(double const v);
     void SetMaximumError(double const v);
   private:
   protected:
     itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3();
     ~itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3();
     itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3(itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3 const & arg0);
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_Pointer {
   public:
     itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_Pointer();
     itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_Pointer(itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_Pointer const & p);
     itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_Pointer(itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3 * p);
     ~itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_Pointer();
     itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_Pointer const & r) const;
     itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_Pointer & operator=(itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_Pointer const & r);
     itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3_Pointer & operator=(itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3 * r);
     itkZeroCrossingBasedEdgeDetectionImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


