// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkChangeLabelLabelMapFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkChangeLabelLabelMapFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkChangeLabelLabelMapFilterGuile
#endif
#ifdef SWIGJAVA
%module itkChangeLabelLabelMapFilterJava
#endif
#ifdef SWIGLUA
%module itkChangeLabelLabelMapFilterLua
#endif
#ifdef SWIGMODULA3
%module itkChangeLabelLabelMapFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkChangeLabelLabelMapFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkChangeLabelLabelMapFilterOcaml
#endif
#ifdef SWIGPERL
%module itkChangeLabelLabelMapFilterPerl
#endif
#ifdef SWIGPERL5
%module itkChangeLabelLabelMapFilterPerl5
#endif
#ifdef SWIGPHP
%module itkChangeLabelLabelMapFilterPhp
#endif
#ifdef SWIGPHP4
%module itkChangeLabelLabelMapFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkChangeLabelLabelMapFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkChangeLabelLabelMapFilterPike
#endif
#ifdef SWIGPYTHON
%module itkChangeLabelLabelMapFilterPython
#endif
#ifdef SWIGR
%module itkChangeLabelLabelMapFilterR
#endif
#ifdef SWIGRUBY
%module itkChangeLabelLabelMapFilterRuby
#endif
#ifdef SWIGSEXP
%module itkChangeLabelLabelMapFilterSexp
#endif
#ifdef SWIGTCL
%module itkChangeLabelLabelMapFilterTcl
#endif
#ifdef SWIGXML
%module itkChangeLabelLabelMapFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
#include "Numerics.includes"
#include "BinaryMorphology.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkInPlaceLabelMapFilter.i


%include itk.i
%include wrap_itkChangeLabelLabelMapFilter_ext.i


 class itkChangeLabelLabelMapFilterLM2 : public itkInPlaceLabelMapFilterLM2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkChangeLabelLabelMapFilterLM2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetChangeMap(std::map< unsigned long, unsigned long, std::less< unsigned long > > const & changeMap);
     std::map< unsigned long, unsigned long, std::less< unsigned long > > const & GetChangeMap() const;
     void SetChange(unsigned long const & oldLabel, unsigned long const & newLabel);
     void ClearChangeMap();
   private:
     itkChangeLabelLabelMapFilterLM2(itkChangeLabelLabelMapFilterLM2 const & arg0);
     void operator=(itkChangeLabelLabelMapFilterLM2 const & arg0);
   protected:
     itkChangeLabelLabelMapFilterLM2();
     ~itkChangeLabelLabelMapFilterLM2();
     virtual void GenerateData();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkChangeLabelLabelMapFilterLM2_Pointer {
   public:
     itkChangeLabelLabelMapFilterLM2_Pointer();
     itkChangeLabelLabelMapFilterLM2_Pointer(itkChangeLabelLabelMapFilterLM2_Pointer const & p);
     itkChangeLabelLabelMapFilterLM2_Pointer(itkChangeLabelLabelMapFilterLM2 * p);
     ~itkChangeLabelLabelMapFilterLM2_Pointer();
     itkChangeLabelLabelMapFilterLM2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkChangeLabelLabelMapFilterLM2 * GetPointer() const;
     bool operator<(itkChangeLabelLabelMapFilterLM2_Pointer const & r) const;
     bool operator>(itkChangeLabelLabelMapFilterLM2_Pointer const & r) const;
     bool operator<=(itkChangeLabelLabelMapFilterLM2_Pointer const & r) const;
     bool operator>=(itkChangeLabelLabelMapFilterLM2_Pointer const & r) const;
     itkChangeLabelLabelMapFilterLM2_Pointer & operator=(itkChangeLabelLabelMapFilterLM2_Pointer const & r);
     itkChangeLabelLabelMapFilterLM2_Pointer & operator=(itkChangeLabelLabelMapFilterLM2 * r);
     itkChangeLabelLabelMapFilterLM2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkChangeLabelLabelMapFilterLM3 : public itkInPlaceLabelMapFilterLM3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkChangeLabelLabelMapFilterLM3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetChangeMap(std::map< unsigned long, unsigned long, std::less< unsigned long > > const & changeMap);
     std::map< unsigned long, unsigned long, std::less< unsigned long > > const & GetChangeMap() const;
     void SetChange(unsigned long const & oldLabel, unsigned long const & newLabel);
     void ClearChangeMap();
   private:
     itkChangeLabelLabelMapFilterLM3(itkChangeLabelLabelMapFilterLM3 const & arg0);
     void operator=(itkChangeLabelLabelMapFilterLM3 const & arg0);
   protected:
     itkChangeLabelLabelMapFilterLM3();
     ~itkChangeLabelLabelMapFilterLM3();
     virtual void GenerateData();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkChangeLabelLabelMapFilterLM3_Pointer {
   public:
     itkChangeLabelLabelMapFilterLM3_Pointer();
     itkChangeLabelLabelMapFilterLM3_Pointer(itkChangeLabelLabelMapFilterLM3_Pointer const & p);
     itkChangeLabelLabelMapFilterLM3_Pointer(itkChangeLabelLabelMapFilterLM3 * p);
     ~itkChangeLabelLabelMapFilterLM3_Pointer();
     itkChangeLabelLabelMapFilterLM3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkChangeLabelLabelMapFilterLM3 * GetPointer() const;
     bool operator<(itkChangeLabelLabelMapFilterLM3_Pointer const & r) const;
     bool operator>(itkChangeLabelLabelMapFilterLM3_Pointer const & r) const;
     bool operator<=(itkChangeLabelLabelMapFilterLM3_Pointer const & r) const;
     bool operator>=(itkChangeLabelLabelMapFilterLM3_Pointer const & r) const;
     itkChangeLabelLabelMapFilterLM3_Pointer & operator=(itkChangeLabelLabelMapFilterLM3_Pointer const & r);
     itkChangeLabelLabelMapFilterLM3_Pointer & operator=(itkChangeLabelLabelMapFilterLM3 * r);
     itkChangeLabelLabelMapFilterLM3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


