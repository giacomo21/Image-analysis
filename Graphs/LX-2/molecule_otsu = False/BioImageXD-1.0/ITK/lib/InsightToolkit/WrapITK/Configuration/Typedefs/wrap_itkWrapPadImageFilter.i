// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkWrapPadImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkWrapPadImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkWrapPadImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkWrapPadImageFilterJava
#endif
#ifdef SWIGLUA
%module itkWrapPadImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkWrapPadImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkWrapPadImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkWrapPadImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkWrapPadImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkWrapPadImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkWrapPadImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkWrapPadImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkWrapPadImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkWrapPadImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkWrapPadImageFilterPython
#endif
#ifdef SWIGR
%module itkWrapPadImageFilterR
#endif
#ifdef SWIGRUBY
%module itkWrapPadImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkWrapPadImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkWrapPadImageFilterTcl
#endif
#ifdef SWIGXML
%module itkWrapPadImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Resize.includes"
%}


%{
%}




%import wrap_ITKRegions.i
%import wrap_itkConstantPadImageFilter.i
%import wrap_ITKCommonBase.i


%include itk.i
%include wrap_itkWrapPadImageFilter_ext.i


 class itkWrapPadImageFilterICF2ICF2 : public itkConstantPadImageFilterICF2ICF2_Superclass {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkWrapPadImageFilterICF2ICF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkWrapPadImageFilterICF2ICF2(itkWrapPadImageFilterICF2ICF2 const & arg0);
     void operator=(itkWrapPadImageFilterICF2ICF2 const & arg0);
   protected:
     itkWrapPadImageFilterICF2ICF2();
     ~itkWrapPadImageFilterICF2ICF2();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkWrapPadImageFilterICF2ICF2_Pointer {
   public:
     itkWrapPadImageFilterICF2ICF2_Pointer();
     itkWrapPadImageFilterICF2ICF2_Pointer(itkWrapPadImageFilterICF2ICF2_Pointer const & p);
     itkWrapPadImageFilterICF2ICF2_Pointer(itkWrapPadImageFilterICF2ICF2 * p);
     ~itkWrapPadImageFilterICF2ICF2_Pointer();
     itkWrapPadImageFilterICF2ICF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWrapPadImageFilterICF2ICF2 * GetPointer() const;
     bool operator<(itkWrapPadImageFilterICF2ICF2_Pointer const & r) const;
     bool operator>(itkWrapPadImageFilterICF2ICF2_Pointer const & r) const;
     bool operator<=(itkWrapPadImageFilterICF2ICF2_Pointer const & r) const;
     bool operator>=(itkWrapPadImageFilterICF2ICF2_Pointer const & r) const;
     itkWrapPadImageFilterICF2ICF2_Pointer & operator=(itkWrapPadImageFilterICF2ICF2_Pointer const & r);
     itkWrapPadImageFilterICF2ICF2_Pointer & operator=(itkWrapPadImageFilterICF2ICF2 * r);
     itkWrapPadImageFilterICF2ICF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWrapPadImageFilterICF3ICF3 : public itkConstantPadImageFilterICF3ICF3_Superclass {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkWrapPadImageFilterICF3ICF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkWrapPadImageFilterICF3ICF3(itkWrapPadImageFilterICF3ICF3 const & arg0);
     void operator=(itkWrapPadImageFilterICF3ICF3 const & arg0);
   protected:
     itkWrapPadImageFilterICF3ICF3();
     ~itkWrapPadImageFilterICF3ICF3();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkWrapPadImageFilterICF3ICF3_Pointer {
   public:
     itkWrapPadImageFilterICF3ICF3_Pointer();
     itkWrapPadImageFilterICF3ICF3_Pointer(itkWrapPadImageFilterICF3ICF3_Pointer const & p);
     itkWrapPadImageFilterICF3ICF3_Pointer(itkWrapPadImageFilterICF3ICF3 * p);
     ~itkWrapPadImageFilterICF3ICF3_Pointer();
     itkWrapPadImageFilterICF3ICF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWrapPadImageFilterICF3ICF3 * GetPointer() const;
     bool operator<(itkWrapPadImageFilterICF3ICF3_Pointer const & r) const;
     bool operator>(itkWrapPadImageFilterICF3ICF3_Pointer const & r) const;
     bool operator<=(itkWrapPadImageFilterICF3ICF3_Pointer const & r) const;
     bool operator>=(itkWrapPadImageFilterICF3ICF3_Pointer const & r) const;
     itkWrapPadImageFilterICF3ICF3_Pointer & operator=(itkWrapPadImageFilterICF3ICF3_Pointer const & r);
     itkWrapPadImageFilterICF3ICF3_Pointer & operator=(itkWrapPadImageFilterICF3ICF3 * r);
     itkWrapPadImageFilterICF3ICF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWrapPadImageFilterICVF22ICVF22 : public itkConstantPadImageFilterICVF22ICVF22_Superclass {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkWrapPadImageFilterICVF22ICVF22_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkWrapPadImageFilterICVF22ICVF22(itkWrapPadImageFilterICVF22ICVF22 const & arg0);
     void operator=(itkWrapPadImageFilterICVF22ICVF22 const & arg0);
   protected:
     itkWrapPadImageFilterICVF22ICVF22();
     ~itkWrapPadImageFilterICVF22ICVF22();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkWrapPadImageFilterICVF22ICVF22_Pointer {
   public:
     itkWrapPadImageFilterICVF22ICVF22_Pointer();
     itkWrapPadImageFilterICVF22ICVF22_Pointer(itkWrapPadImageFilterICVF22ICVF22_Pointer const & p);
     itkWrapPadImageFilterICVF22ICVF22_Pointer(itkWrapPadImageFilterICVF22ICVF22 * p);
     ~itkWrapPadImageFilterICVF22ICVF22_Pointer();
     itkWrapPadImageFilterICVF22ICVF22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWrapPadImageFilterICVF22ICVF22 * GetPointer() const;
     bool operator<(itkWrapPadImageFilterICVF22ICVF22_Pointer const & r) const;
     bool operator>(itkWrapPadImageFilterICVF22ICVF22_Pointer const & r) const;
     bool operator<=(itkWrapPadImageFilterICVF22ICVF22_Pointer const & r) const;
     bool operator>=(itkWrapPadImageFilterICVF22ICVF22_Pointer const & r) const;
     itkWrapPadImageFilterICVF22ICVF22_Pointer & operator=(itkWrapPadImageFilterICVF22ICVF22_Pointer const & r);
     itkWrapPadImageFilterICVF22ICVF22_Pointer & operator=(itkWrapPadImageFilterICVF22ICVF22 * r);
     itkWrapPadImageFilterICVF22ICVF22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWrapPadImageFilterICVF33ICVF33 : public itkConstantPadImageFilterICVF33ICVF33_Superclass {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkWrapPadImageFilterICVF33ICVF33_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkWrapPadImageFilterICVF33ICVF33(itkWrapPadImageFilterICVF33ICVF33 const & arg0);
     void operator=(itkWrapPadImageFilterICVF33ICVF33 const & arg0);
   protected:
     itkWrapPadImageFilterICVF33ICVF33();
     ~itkWrapPadImageFilterICVF33ICVF33();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkWrapPadImageFilterICVF33ICVF33_Pointer {
   public:
     itkWrapPadImageFilterICVF33ICVF33_Pointer();
     itkWrapPadImageFilterICVF33ICVF33_Pointer(itkWrapPadImageFilterICVF33ICVF33_Pointer const & p);
     itkWrapPadImageFilterICVF33ICVF33_Pointer(itkWrapPadImageFilterICVF33ICVF33 * p);
     ~itkWrapPadImageFilterICVF33ICVF33_Pointer();
     itkWrapPadImageFilterICVF33ICVF33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWrapPadImageFilterICVF33ICVF33 * GetPointer() const;
     bool operator<(itkWrapPadImageFilterICVF33ICVF33_Pointer const & r) const;
     bool operator>(itkWrapPadImageFilterICVF33ICVF33_Pointer const & r) const;
     bool operator<=(itkWrapPadImageFilterICVF33ICVF33_Pointer const & r) const;
     bool operator>=(itkWrapPadImageFilterICVF33ICVF33_Pointer const & r) const;
     itkWrapPadImageFilterICVF33ICVF33_Pointer & operator=(itkWrapPadImageFilterICVF33ICVF33_Pointer const & r);
     itkWrapPadImageFilterICVF33ICVF33_Pointer & operator=(itkWrapPadImageFilterICVF33ICVF33 * r);
     itkWrapPadImageFilterICVF33ICVF33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWrapPadImageFilterID2ID2 : public itkConstantPadImageFilterID2ID2_Superclass {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkWrapPadImageFilterID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkWrapPadImageFilterID2ID2(itkWrapPadImageFilterID2ID2 const & arg0);
     void operator=(itkWrapPadImageFilterID2ID2 const & arg0);
   protected:
     itkWrapPadImageFilterID2ID2();
     ~itkWrapPadImageFilterID2ID2();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkWrapPadImageFilterID2ID2_Pointer {
   public:
     itkWrapPadImageFilterID2ID2_Pointer();
     itkWrapPadImageFilterID2ID2_Pointer(itkWrapPadImageFilterID2ID2_Pointer const & p);
     itkWrapPadImageFilterID2ID2_Pointer(itkWrapPadImageFilterID2ID2 * p);
     ~itkWrapPadImageFilterID2ID2_Pointer();
     itkWrapPadImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWrapPadImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkWrapPadImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkWrapPadImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkWrapPadImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkWrapPadImageFilterID2ID2_Pointer const & r) const;
     itkWrapPadImageFilterID2ID2_Pointer & operator=(itkWrapPadImageFilterID2ID2_Pointer const & r);
     itkWrapPadImageFilterID2ID2_Pointer & operator=(itkWrapPadImageFilterID2ID2 * r);
     itkWrapPadImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWrapPadImageFilterID3ID3 : public itkConstantPadImageFilterID3ID3_Superclass {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkWrapPadImageFilterID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkWrapPadImageFilterID3ID3(itkWrapPadImageFilterID3ID3 const & arg0);
     void operator=(itkWrapPadImageFilterID3ID3 const & arg0);
   protected:
     itkWrapPadImageFilterID3ID3();
     ~itkWrapPadImageFilterID3ID3();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkWrapPadImageFilterID3ID3_Pointer {
   public:
     itkWrapPadImageFilterID3ID3_Pointer();
     itkWrapPadImageFilterID3ID3_Pointer(itkWrapPadImageFilterID3ID3_Pointer const & p);
     itkWrapPadImageFilterID3ID3_Pointer(itkWrapPadImageFilterID3ID3 * p);
     ~itkWrapPadImageFilterID3ID3_Pointer();
     itkWrapPadImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWrapPadImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkWrapPadImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkWrapPadImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkWrapPadImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkWrapPadImageFilterID3ID3_Pointer const & r) const;
     itkWrapPadImageFilterID3ID3_Pointer & operator=(itkWrapPadImageFilterID3ID3_Pointer const & r);
     itkWrapPadImageFilterID3ID3_Pointer & operator=(itkWrapPadImageFilterID3ID3 * r);
     itkWrapPadImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWrapPadImageFilterIF2IF2 : public itkConstantPadImageFilterIF2IF2_Superclass {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkWrapPadImageFilterIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkWrapPadImageFilterIF2IF2(itkWrapPadImageFilterIF2IF2 const & arg0);
     void operator=(itkWrapPadImageFilterIF2IF2 const & arg0);
   protected:
     itkWrapPadImageFilterIF2IF2();
     ~itkWrapPadImageFilterIF2IF2();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkWrapPadImageFilterIF2IF2_Pointer {
   public:
     itkWrapPadImageFilterIF2IF2_Pointer();
     itkWrapPadImageFilterIF2IF2_Pointer(itkWrapPadImageFilterIF2IF2_Pointer const & p);
     itkWrapPadImageFilterIF2IF2_Pointer(itkWrapPadImageFilterIF2IF2 * p);
     ~itkWrapPadImageFilterIF2IF2_Pointer();
     itkWrapPadImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWrapPadImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkWrapPadImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkWrapPadImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkWrapPadImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkWrapPadImageFilterIF2IF2_Pointer const & r) const;
     itkWrapPadImageFilterIF2IF2_Pointer & operator=(itkWrapPadImageFilterIF2IF2_Pointer const & r);
     itkWrapPadImageFilterIF2IF2_Pointer & operator=(itkWrapPadImageFilterIF2IF2 * r);
     itkWrapPadImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWrapPadImageFilterIF3IF3 : public itkConstantPadImageFilterIF3IF3_Superclass {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkWrapPadImageFilterIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkWrapPadImageFilterIF3IF3(itkWrapPadImageFilterIF3IF3 const & arg0);
     void operator=(itkWrapPadImageFilterIF3IF3 const & arg0);
   protected:
     itkWrapPadImageFilterIF3IF3();
     ~itkWrapPadImageFilterIF3IF3();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkWrapPadImageFilterIF3IF3_Pointer {
   public:
     itkWrapPadImageFilterIF3IF3_Pointer();
     itkWrapPadImageFilterIF3IF3_Pointer(itkWrapPadImageFilterIF3IF3_Pointer const & p);
     itkWrapPadImageFilterIF3IF3_Pointer(itkWrapPadImageFilterIF3IF3 * p);
     ~itkWrapPadImageFilterIF3IF3_Pointer();
     itkWrapPadImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWrapPadImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkWrapPadImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkWrapPadImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkWrapPadImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkWrapPadImageFilterIF3IF3_Pointer const & r) const;
     itkWrapPadImageFilterIF3IF3_Pointer & operator=(itkWrapPadImageFilterIF3IF3_Pointer const & r);
     itkWrapPadImageFilterIF3IF3_Pointer & operator=(itkWrapPadImageFilterIF3IF3 * r);
     itkWrapPadImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWrapPadImageFilterIRGBAUS2IRGBAUS2 : public itkConstantPadImageFilterIRGBAUS2IRGBAUS2_Superclass {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkWrapPadImageFilterIRGBAUS2IRGBAUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkWrapPadImageFilterIRGBAUS2IRGBAUS2(itkWrapPadImageFilterIRGBAUS2IRGBAUS2 const & arg0);
     void operator=(itkWrapPadImageFilterIRGBAUS2IRGBAUS2 const & arg0);
   protected:
     itkWrapPadImageFilterIRGBAUS2IRGBAUS2();
     ~itkWrapPadImageFilterIRGBAUS2IRGBAUS2();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkWrapPadImageFilterIRGBAUS2IRGBAUS2_Pointer {
   public:
     itkWrapPadImageFilterIRGBAUS2IRGBAUS2_Pointer();
     itkWrapPadImageFilterIRGBAUS2IRGBAUS2_Pointer(itkWrapPadImageFilterIRGBAUS2IRGBAUS2_Pointer const & p);
     itkWrapPadImageFilterIRGBAUS2IRGBAUS2_Pointer(itkWrapPadImageFilterIRGBAUS2IRGBAUS2 * p);
     ~itkWrapPadImageFilterIRGBAUS2IRGBAUS2_Pointer();
     itkWrapPadImageFilterIRGBAUS2IRGBAUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWrapPadImageFilterIRGBAUS2IRGBAUS2 * GetPointer() const;
     bool operator<(itkWrapPadImageFilterIRGBAUS2IRGBAUS2_Pointer const & r) const;
     bool operator>(itkWrapPadImageFilterIRGBAUS2IRGBAUS2_Pointer const & r) const;
     bool operator<=(itkWrapPadImageFilterIRGBAUS2IRGBAUS2_Pointer const & r) const;
     bool operator>=(itkWrapPadImageFilterIRGBAUS2IRGBAUS2_Pointer const & r) const;
     itkWrapPadImageFilterIRGBAUS2IRGBAUS2_Pointer & operator=(itkWrapPadImageFilterIRGBAUS2IRGBAUS2_Pointer const & r);
     itkWrapPadImageFilterIRGBAUS2IRGBAUS2_Pointer & operator=(itkWrapPadImageFilterIRGBAUS2IRGBAUS2 * r);
     itkWrapPadImageFilterIRGBAUS2IRGBAUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWrapPadImageFilterIRGBAUS3IRGBAUS3 : public itkConstantPadImageFilterIRGBAUS3IRGBAUS3_Superclass {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkWrapPadImageFilterIRGBAUS3IRGBAUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkWrapPadImageFilterIRGBAUS3IRGBAUS3(itkWrapPadImageFilterIRGBAUS3IRGBAUS3 const & arg0);
     void operator=(itkWrapPadImageFilterIRGBAUS3IRGBAUS3 const & arg0);
   protected:
     itkWrapPadImageFilterIRGBAUS3IRGBAUS3();
     ~itkWrapPadImageFilterIRGBAUS3IRGBAUS3();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkWrapPadImageFilterIRGBAUS3IRGBAUS3_Pointer {
   public:
     itkWrapPadImageFilterIRGBAUS3IRGBAUS3_Pointer();
     itkWrapPadImageFilterIRGBAUS3IRGBAUS3_Pointer(itkWrapPadImageFilterIRGBAUS3IRGBAUS3_Pointer const & p);
     itkWrapPadImageFilterIRGBAUS3IRGBAUS3_Pointer(itkWrapPadImageFilterIRGBAUS3IRGBAUS3 * p);
     ~itkWrapPadImageFilterIRGBAUS3IRGBAUS3_Pointer();
     itkWrapPadImageFilterIRGBAUS3IRGBAUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWrapPadImageFilterIRGBAUS3IRGBAUS3 * GetPointer() const;
     bool operator<(itkWrapPadImageFilterIRGBAUS3IRGBAUS3_Pointer const & r) const;
     bool operator>(itkWrapPadImageFilterIRGBAUS3IRGBAUS3_Pointer const & r) const;
     bool operator<=(itkWrapPadImageFilterIRGBAUS3IRGBAUS3_Pointer const & r) const;
     bool operator>=(itkWrapPadImageFilterIRGBAUS3IRGBAUS3_Pointer const & r) const;
     itkWrapPadImageFilterIRGBAUS3IRGBAUS3_Pointer & operator=(itkWrapPadImageFilterIRGBAUS3IRGBAUS3_Pointer const & r);
     itkWrapPadImageFilterIRGBAUS3IRGBAUS3_Pointer & operator=(itkWrapPadImageFilterIRGBAUS3IRGBAUS3 * r);
     itkWrapPadImageFilterIRGBAUS3IRGBAUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWrapPadImageFilterIRGBUS2IRGBUS2 : public itkConstantPadImageFilterIRGBUS2IRGBUS2_Superclass {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkWrapPadImageFilterIRGBUS2IRGBUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkWrapPadImageFilterIRGBUS2IRGBUS2(itkWrapPadImageFilterIRGBUS2IRGBUS2 const & arg0);
     void operator=(itkWrapPadImageFilterIRGBUS2IRGBUS2 const & arg0);
   protected:
     itkWrapPadImageFilterIRGBUS2IRGBUS2();
     ~itkWrapPadImageFilterIRGBUS2IRGBUS2();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkWrapPadImageFilterIRGBUS2IRGBUS2_Pointer {
   public:
     itkWrapPadImageFilterIRGBUS2IRGBUS2_Pointer();
     itkWrapPadImageFilterIRGBUS2IRGBUS2_Pointer(itkWrapPadImageFilterIRGBUS2IRGBUS2_Pointer const & p);
     itkWrapPadImageFilterIRGBUS2IRGBUS2_Pointer(itkWrapPadImageFilterIRGBUS2IRGBUS2 * p);
     ~itkWrapPadImageFilterIRGBUS2IRGBUS2_Pointer();
     itkWrapPadImageFilterIRGBUS2IRGBUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWrapPadImageFilterIRGBUS2IRGBUS2 * GetPointer() const;
     bool operator<(itkWrapPadImageFilterIRGBUS2IRGBUS2_Pointer const & r) const;
     bool operator>(itkWrapPadImageFilterIRGBUS2IRGBUS2_Pointer const & r) const;
     bool operator<=(itkWrapPadImageFilterIRGBUS2IRGBUS2_Pointer const & r) const;
     bool operator>=(itkWrapPadImageFilterIRGBUS2IRGBUS2_Pointer const & r) const;
     itkWrapPadImageFilterIRGBUS2IRGBUS2_Pointer & operator=(itkWrapPadImageFilterIRGBUS2IRGBUS2_Pointer const & r);
     itkWrapPadImageFilterIRGBUS2IRGBUS2_Pointer & operator=(itkWrapPadImageFilterIRGBUS2IRGBUS2 * r);
     itkWrapPadImageFilterIRGBUS2IRGBUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWrapPadImageFilterIRGBUS3IRGBUS3 : public itkConstantPadImageFilterIRGBUS3IRGBUS3_Superclass {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkWrapPadImageFilterIRGBUS3IRGBUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkWrapPadImageFilterIRGBUS3IRGBUS3(itkWrapPadImageFilterIRGBUS3IRGBUS3 const & arg0);
     void operator=(itkWrapPadImageFilterIRGBUS3IRGBUS3 const & arg0);
   protected:
     itkWrapPadImageFilterIRGBUS3IRGBUS3();
     ~itkWrapPadImageFilterIRGBUS3IRGBUS3();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkWrapPadImageFilterIRGBUS3IRGBUS3_Pointer {
   public:
     itkWrapPadImageFilterIRGBUS3IRGBUS3_Pointer();
     itkWrapPadImageFilterIRGBUS3IRGBUS3_Pointer(itkWrapPadImageFilterIRGBUS3IRGBUS3_Pointer const & p);
     itkWrapPadImageFilterIRGBUS3IRGBUS3_Pointer(itkWrapPadImageFilterIRGBUS3IRGBUS3 * p);
     ~itkWrapPadImageFilterIRGBUS3IRGBUS3_Pointer();
     itkWrapPadImageFilterIRGBUS3IRGBUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWrapPadImageFilterIRGBUS3IRGBUS3 * GetPointer() const;
     bool operator<(itkWrapPadImageFilterIRGBUS3IRGBUS3_Pointer const & r) const;
     bool operator>(itkWrapPadImageFilterIRGBUS3IRGBUS3_Pointer const & r) const;
     bool operator<=(itkWrapPadImageFilterIRGBUS3IRGBUS3_Pointer const & r) const;
     bool operator>=(itkWrapPadImageFilterIRGBUS3IRGBUS3_Pointer const & r) const;
     itkWrapPadImageFilterIRGBUS3IRGBUS3_Pointer & operator=(itkWrapPadImageFilterIRGBUS3IRGBUS3_Pointer const & r);
     itkWrapPadImageFilterIRGBUS3IRGBUS3_Pointer & operator=(itkWrapPadImageFilterIRGBUS3IRGBUS3 * r);
     itkWrapPadImageFilterIRGBUS3IRGBUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWrapPadImageFilterIUC2IUC2 : public itkConstantPadImageFilterIUC2IUC2_Superclass {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkWrapPadImageFilterIUC2IUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkWrapPadImageFilterIUC2IUC2(itkWrapPadImageFilterIUC2IUC2 const & arg0);
     void operator=(itkWrapPadImageFilterIUC2IUC2 const & arg0);
   protected:
     itkWrapPadImageFilterIUC2IUC2();
     ~itkWrapPadImageFilterIUC2IUC2();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkWrapPadImageFilterIUC2IUC2_Pointer {
   public:
     itkWrapPadImageFilterIUC2IUC2_Pointer();
     itkWrapPadImageFilterIUC2IUC2_Pointer(itkWrapPadImageFilterIUC2IUC2_Pointer const & p);
     itkWrapPadImageFilterIUC2IUC2_Pointer(itkWrapPadImageFilterIUC2IUC2 * p);
     ~itkWrapPadImageFilterIUC2IUC2_Pointer();
     itkWrapPadImageFilterIUC2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWrapPadImageFilterIUC2IUC2 * GetPointer() const;
     bool operator<(itkWrapPadImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>(itkWrapPadImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator<=(itkWrapPadImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>=(itkWrapPadImageFilterIUC2IUC2_Pointer const & r) const;
     itkWrapPadImageFilterIUC2IUC2_Pointer & operator=(itkWrapPadImageFilterIUC2IUC2_Pointer const & r);
     itkWrapPadImageFilterIUC2IUC2_Pointer & operator=(itkWrapPadImageFilterIUC2IUC2 * r);
     itkWrapPadImageFilterIUC2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWrapPadImageFilterIUC3IUC3 : public itkConstantPadImageFilterIUC3IUC3_Superclass {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkWrapPadImageFilterIUC3IUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkWrapPadImageFilterIUC3IUC3(itkWrapPadImageFilterIUC3IUC3 const & arg0);
     void operator=(itkWrapPadImageFilterIUC3IUC3 const & arg0);
   protected:
     itkWrapPadImageFilterIUC3IUC3();
     ~itkWrapPadImageFilterIUC3IUC3();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkWrapPadImageFilterIUC3IUC3_Pointer {
   public:
     itkWrapPadImageFilterIUC3IUC3_Pointer();
     itkWrapPadImageFilterIUC3IUC3_Pointer(itkWrapPadImageFilterIUC3IUC3_Pointer const & p);
     itkWrapPadImageFilterIUC3IUC3_Pointer(itkWrapPadImageFilterIUC3IUC3 * p);
     ~itkWrapPadImageFilterIUC3IUC3_Pointer();
     itkWrapPadImageFilterIUC3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWrapPadImageFilterIUC3IUC3 * GetPointer() const;
     bool operator<(itkWrapPadImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>(itkWrapPadImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator<=(itkWrapPadImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>=(itkWrapPadImageFilterIUC3IUC3_Pointer const & r) const;
     itkWrapPadImageFilterIUC3IUC3_Pointer & operator=(itkWrapPadImageFilterIUC3IUC3_Pointer const & r);
     itkWrapPadImageFilterIUC3IUC3_Pointer & operator=(itkWrapPadImageFilterIUC3IUC3 * r);
     itkWrapPadImageFilterIUC3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWrapPadImageFilterIUL2IUL2 : public itkConstantPadImageFilterIUL2IUL2_Superclass {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkWrapPadImageFilterIUL2IUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkWrapPadImageFilterIUL2IUL2(itkWrapPadImageFilterIUL2IUL2 const & arg0);
     void operator=(itkWrapPadImageFilterIUL2IUL2 const & arg0);
   protected:
     itkWrapPadImageFilterIUL2IUL2();
     ~itkWrapPadImageFilterIUL2IUL2();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkWrapPadImageFilterIUL2IUL2_Pointer {
   public:
     itkWrapPadImageFilterIUL2IUL2_Pointer();
     itkWrapPadImageFilterIUL2IUL2_Pointer(itkWrapPadImageFilterIUL2IUL2_Pointer const & p);
     itkWrapPadImageFilterIUL2IUL2_Pointer(itkWrapPadImageFilterIUL2IUL2 * p);
     ~itkWrapPadImageFilterIUL2IUL2_Pointer();
     itkWrapPadImageFilterIUL2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWrapPadImageFilterIUL2IUL2 * GetPointer() const;
     bool operator<(itkWrapPadImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>(itkWrapPadImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator<=(itkWrapPadImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>=(itkWrapPadImageFilterIUL2IUL2_Pointer const & r) const;
     itkWrapPadImageFilterIUL2IUL2_Pointer & operator=(itkWrapPadImageFilterIUL2IUL2_Pointer const & r);
     itkWrapPadImageFilterIUL2IUL2_Pointer & operator=(itkWrapPadImageFilterIUL2IUL2 * r);
     itkWrapPadImageFilterIUL2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWrapPadImageFilterIUL3IUL3 : public itkConstantPadImageFilterIUL3IUL3_Superclass {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkWrapPadImageFilterIUL3IUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkWrapPadImageFilterIUL3IUL3(itkWrapPadImageFilterIUL3IUL3 const & arg0);
     void operator=(itkWrapPadImageFilterIUL3IUL3 const & arg0);
   protected:
     itkWrapPadImageFilterIUL3IUL3();
     ~itkWrapPadImageFilterIUL3IUL3();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkWrapPadImageFilterIUL3IUL3_Pointer {
   public:
     itkWrapPadImageFilterIUL3IUL3_Pointer();
     itkWrapPadImageFilterIUL3IUL3_Pointer(itkWrapPadImageFilterIUL3IUL3_Pointer const & p);
     itkWrapPadImageFilterIUL3IUL3_Pointer(itkWrapPadImageFilterIUL3IUL3 * p);
     ~itkWrapPadImageFilterIUL3IUL3_Pointer();
     itkWrapPadImageFilterIUL3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWrapPadImageFilterIUL3IUL3 * GetPointer() const;
     bool operator<(itkWrapPadImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>(itkWrapPadImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator<=(itkWrapPadImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>=(itkWrapPadImageFilterIUL3IUL3_Pointer const & r) const;
     itkWrapPadImageFilterIUL3IUL3_Pointer & operator=(itkWrapPadImageFilterIUL3IUL3_Pointer const & r);
     itkWrapPadImageFilterIUL3IUL3_Pointer & operator=(itkWrapPadImageFilterIUL3IUL3 * r);
     itkWrapPadImageFilterIUL3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWrapPadImageFilterIUS2IUS2 : public itkConstantPadImageFilterIUS2IUS2_Superclass {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkWrapPadImageFilterIUS2IUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkWrapPadImageFilterIUS2IUS2(itkWrapPadImageFilterIUS2IUS2 const & arg0);
     void operator=(itkWrapPadImageFilterIUS2IUS2 const & arg0);
   protected:
     itkWrapPadImageFilterIUS2IUS2();
     ~itkWrapPadImageFilterIUS2IUS2();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkWrapPadImageFilterIUS2IUS2_Pointer {
   public:
     itkWrapPadImageFilterIUS2IUS2_Pointer();
     itkWrapPadImageFilterIUS2IUS2_Pointer(itkWrapPadImageFilterIUS2IUS2_Pointer const & p);
     itkWrapPadImageFilterIUS2IUS2_Pointer(itkWrapPadImageFilterIUS2IUS2 * p);
     ~itkWrapPadImageFilterIUS2IUS2_Pointer();
     itkWrapPadImageFilterIUS2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWrapPadImageFilterIUS2IUS2 * GetPointer() const;
     bool operator<(itkWrapPadImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>(itkWrapPadImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator<=(itkWrapPadImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>=(itkWrapPadImageFilterIUS2IUS2_Pointer const & r) const;
     itkWrapPadImageFilterIUS2IUS2_Pointer & operator=(itkWrapPadImageFilterIUS2IUS2_Pointer const & r);
     itkWrapPadImageFilterIUS2IUS2_Pointer & operator=(itkWrapPadImageFilterIUS2IUS2 * r);
     itkWrapPadImageFilterIUS2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWrapPadImageFilterIUS3IUS3 : public itkConstantPadImageFilterIUS3IUS3_Superclass {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkWrapPadImageFilterIUS3IUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkWrapPadImageFilterIUS3IUS3(itkWrapPadImageFilterIUS3IUS3 const & arg0);
     void operator=(itkWrapPadImageFilterIUS3IUS3 const & arg0);
   protected:
     itkWrapPadImageFilterIUS3IUS3();
     ~itkWrapPadImageFilterIUS3IUS3();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkWrapPadImageFilterIUS3IUS3_Pointer {
   public:
     itkWrapPadImageFilterIUS3IUS3_Pointer();
     itkWrapPadImageFilterIUS3IUS3_Pointer(itkWrapPadImageFilterIUS3IUS3_Pointer const & p);
     itkWrapPadImageFilterIUS3IUS3_Pointer(itkWrapPadImageFilterIUS3IUS3 * p);
     ~itkWrapPadImageFilterIUS3IUS3_Pointer();
     itkWrapPadImageFilterIUS3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWrapPadImageFilterIUS3IUS3 * GetPointer() const;
     bool operator<(itkWrapPadImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>(itkWrapPadImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator<=(itkWrapPadImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>=(itkWrapPadImageFilterIUS3IUS3_Pointer const & r) const;
     itkWrapPadImageFilterIUS3IUS3_Pointer & operator=(itkWrapPadImageFilterIUS3IUS3_Pointer const & r);
     itkWrapPadImageFilterIUS3IUS3_Pointer & operator=(itkWrapPadImageFilterIUS3IUS3 * r);
     itkWrapPadImageFilterIUS3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWrapPadImageFilterIVF22IVF22 : public itkConstantPadImageFilterIVF22IVF22_Superclass {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkWrapPadImageFilterIVF22IVF22_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkWrapPadImageFilterIVF22IVF22(itkWrapPadImageFilterIVF22IVF22 const & arg0);
     void operator=(itkWrapPadImageFilterIVF22IVF22 const & arg0);
   protected:
     itkWrapPadImageFilterIVF22IVF22();
     ~itkWrapPadImageFilterIVF22IVF22();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkWrapPadImageFilterIVF22IVF22_Pointer {
   public:
     itkWrapPadImageFilterIVF22IVF22_Pointer();
     itkWrapPadImageFilterIVF22IVF22_Pointer(itkWrapPadImageFilterIVF22IVF22_Pointer const & p);
     itkWrapPadImageFilterIVF22IVF22_Pointer(itkWrapPadImageFilterIVF22IVF22 * p);
     ~itkWrapPadImageFilterIVF22IVF22_Pointer();
     itkWrapPadImageFilterIVF22IVF22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWrapPadImageFilterIVF22IVF22 * GetPointer() const;
     bool operator<(itkWrapPadImageFilterIVF22IVF22_Pointer const & r) const;
     bool operator>(itkWrapPadImageFilterIVF22IVF22_Pointer const & r) const;
     bool operator<=(itkWrapPadImageFilterIVF22IVF22_Pointer const & r) const;
     bool operator>=(itkWrapPadImageFilterIVF22IVF22_Pointer const & r) const;
     itkWrapPadImageFilterIVF22IVF22_Pointer & operator=(itkWrapPadImageFilterIVF22IVF22_Pointer const & r);
     itkWrapPadImageFilterIVF22IVF22_Pointer & operator=(itkWrapPadImageFilterIVF22IVF22 * r);
     itkWrapPadImageFilterIVF22IVF22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWrapPadImageFilterIVF33IVF33 : public itkConstantPadImageFilterIVF33IVF33_Superclass {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkWrapPadImageFilterIVF33IVF33_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkWrapPadImageFilterIVF33IVF33(itkWrapPadImageFilterIVF33IVF33 const & arg0);
     void operator=(itkWrapPadImageFilterIVF33IVF33 const & arg0);
   protected:
     itkWrapPadImageFilterIVF33IVF33();
     ~itkWrapPadImageFilterIVF33IVF33();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkWrapPadImageFilterIVF33IVF33_Pointer {
   public:
     itkWrapPadImageFilterIVF33IVF33_Pointer();
     itkWrapPadImageFilterIVF33IVF33_Pointer(itkWrapPadImageFilterIVF33IVF33_Pointer const & p);
     itkWrapPadImageFilterIVF33IVF33_Pointer(itkWrapPadImageFilterIVF33IVF33 * p);
     ~itkWrapPadImageFilterIVF33IVF33_Pointer();
     itkWrapPadImageFilterIVF33IVF33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWrapPadImageFilterIVF33IVF33 * GetPointer() const;
     bool operator<(itkWrapPadImageFilterIVF33IVF33_Pointer const & r) const;
     bool operator>(itkWrapPadImageFilterIVF33IVF33_Pointer const & r) const;
     bool operator<=(itkWrapPadImageFilterIVF33IVF33_Pointer const & r) const;
     bool operator>=(itkWrapPadImageFilterIVF33IVF33_Pointer const & r) const;
     itkWrapPadImageFilterIVF33IVF33_Pointer & operator=(itkWrapPadImageFilterIVF33IVF33_Pointer const & r);
     itkWrapPadImageFilterIVF33IVF33_Pointer & operator=(itkWrapPadImageFilterIVF33IVF33 * r);
     itkWrapPadImageFilterIVF33IVF33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


