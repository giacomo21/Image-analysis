// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkAdaptiveHistogramEqualizationImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkAdaptiveHistogramEqualizationImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkAdaptiveHistogramEqualizationImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkAdaptiveHistogramEqualizationImageFilterJava
#endif
#ifdef SWIGLUA
%module itkAdaptiveHistogramEqualizationImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkAdaptiveHistogramEqualizationImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkAdaptiveHistogramEqualizationImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkAdaptiveHistogramEqualizationImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkAdaptiveHistogramEqualizationImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkAdaptiveHistogramEqualizationImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkAdaptiveHistogramEqualizationImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkAdaptiveHistogramEqualizationImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkAdaptiveHistogramEqualizationImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkAdaptiveHistogramEqualizationImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkAdaptiveHistogramEqualizationImageFilterPython
#endif
#ifdef SWIGR
%module itkAdaptiveHistogramEqualizationImageFilterR
#endif
#ifdef SWIGRUBY
%module itkAdaptiveHistogramEqualizationImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkAdaptiveHistogramEqualizationImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkAdaptiveHistogramEqualizationImageFilterTcl
#endif
#ifdef SWIGXML
%module itkAdaptiveHistogramEqualizationImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Numerics.includes"
#include "IntensityFilters.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkSize.i
%import wrap_itkImageToImageFilterA.i


%include itk.i
%include wrap_itkAdaptiveHistogramEqualizationImageFilter_ext.i


 class itkAdaptiveHistogramEqualizationImageFilterID2 : public itkImageToImageFilterID2ID2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkAdaptiveHistogramEqualizationImageFilterID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetAlpha(float const _arg);
     virtual float GetAlpha() const;
     virtual void SetBeta(float const _arg);
     virtual float GetBeta() const;
     virtual void SetRadius(itkSize2 const _arg);
     virtual itkSize2 const & GetRadius() const;
     virtual void SetUseLookupTable(bool const _arg);
     virtual bool GetUseLookupTable() const;
     virtual void UseLookupTableOn();
     virtual void UseLookupTableOff();
   private:
     itkAdaptiveHistogramEqualizationImageFilterID2(itkAdaptiveHistogramEqualizationImageFilterID2 const & arg0);
     void operator=(itkAdaptiveHistogramEqualizationImageFilterID2 const & arg0);
     float CumulativeFunction(float u, float v);
   protected:
     itkAdaptiveHistogramEqualizationImageFilterID2();
     ~itkAdaptiveHistogramEqualizationImageFilterID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateInputRequestedRegion();
 };


 class itkAdaptiveHistogramEqualizationImageFilterID2_Pointer {
   public:
     itkAdaptiveHistogramEqualizationImageFilterID2_Pointer();
     itkAdaptiveHistogramEqualizationImageFilterID2_Pointer(itkAdaptiveHistogramEqualizationImageFilterID2_Pointer const & p);
     itkAdaptiveHistogramEqualizationImageFilterID2_Pointer(itkAdaptiveHistogramEqualizationImageFilterID2 * p);
     ~itkAdaptiveHistogramEqualizationImageFilterID2_Pointer();
     itkAdaptiveHistogramEqualizationImageFilterID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkAdaptiveHistogramEqualizationImageFilterID2 * GetPointer() const;
     bool operator<(itkAdaptiveHistogramEqualizationImageFilterID2_Pointer const & r) const;
     bool operator>(itkAdaptiveHistogramEqualizationImageFilterID2_Pointer const & r) const;
     bool operator<=(itkAdaptiveHistogramEqualizationImageFilterID2_Pointer const & r) const;
     bool operator>=(itkAdaptiveHistogramEqualizationImageFilterID2_Pointer const & r) const;
     itkAdaptiveHistogramEqualizationImageFilterID2_Pointer & operator=(itkAdaptiveHistogramEqualizationImageFilterID2_Pointer const & r);
     itkAdaptiveHistogramEqualizationImageFilterID2_Pointer & operator=(itkAdaptiveHistogramEqualizationImageFilterID2 * r);
     itkAdaptiveHistogramEqualizationImageFilterID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkAdaptiveHistogramEqualizationImageFilterID3 : public itkImageToImageFilterID3ID3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkAdaptiveHistogramEqualizationImageFilterID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetAlpha(float const _arg);
     virtual float GetAlpha() const;
     virtual void SetBeta(float const _arg);
     virtual float GetBeta() const;
     virtual void SetRadius(itkSize3 const _arg);
     virtual itkSize3 const & GetRadius() const;
     virtual void SetUseLookupTable(bool const _arg);
     virtual bool GetUseLookupTable() const;
     virtual void UseLookupTableOn();
     virtual void UseLookupTableOff();
   private:
     itkAdaptiveHistogramEqualizationImageFilterID3(itkAdaptiveHistogramEqualizationImageFilterID3 const & arg0);
     void operator=(itkAdaptiveHistogramEqualizationImageFilterID3 const & arg0);
     float CumulativeFunction(float u, float v);
   protected:
     itkAdaptiveHistogramEqualizationImageFilterID3();
     ~itkAdaptiveHistogramEqualizationImageFilterID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateInputRequestedRegion();
 };


 class itkAdaptiveHistogramEqualizationImageFilterID3_Pointer {
   public:
     itkAdaptiveHistogramEqualizationImageFilterID3_Pointer();
     itkAdaptiveHistogramEqualizationImageFilterID3_Pointer(itkAdaptiveHistogramEqualizationImageFilterID3_Pointer const & p);
     itkAdaptiveHistogramEqualizationImageFilterID3_Pointer(itkAdaptiveHistogramEqualizationImageFilterID3 * p);
     ~itkAdaptiveHistogramEqualizationImageFilterID3_Pointer();
     itkAdaptiveHistogramEqualizationImageFilterID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkAdaptiveHistogramEqualizationImageFilterID3 * GetPointer() const;
     bool operator<(itkAdaptiveHistogramEqualizationImageFilterID3_Pointer const & r) const;
     bool operator>(itkAdaptiveHistogramEqualizationImageFilterID3_Pointer const & r) const;
     bool operator<=(itkAdaptiveHistogramEqualizationImageFilterID3_Pointer const & r) const;
     bool operator>=(itkAdaptiveHistogramEqualizationImageFilterID3_Pointer const & r) const;
     itkAdaptiveHistogramEqualizationImageFilterID3_Pointer & operator=(itkAdaptiveHistogramEqualizationImageFilterID3_Pointer const & r);
     itkAdaptiveHistogramEqualizationImageFilterID3_Pointer & operator=(itkAdaptiveHistogramEqualizationImageFilterID3 * r);
     itkAdaptiveHistogramEqualizationImageFilterID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkAdaptiveHistogramEqualizationImageFilterIF2 : public itkImageToImageFilterIF2IF2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkAdaptiveHistogramEqualizationImageFilterIF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetAlpha(float const _arg);
     virtual float GetAlpha() const;
     virtual void SetBeta(float const _arg);
     virtual float GetBeta() const;
     virtual void SetRadius(itkSize2 const _arg);
     virtual itkSize2 const & GetRadius() const;
     virtual void SetUseLookupTable(bool const _arg);
     virtual bool GetUseLookupTable() const;
     virtual void UseLookupTableOn();
     virtual void UseLookupTableOff();
   private:
     itkAdaptiveHistogramEqualizationImageFilterIF2(itkAdaptiveHistogramEqualizationImageFilterIF2 const & arg0);
     void operator=(itkAdaptiveHistogramEqualizationImageFilterIF2 const & arg0);
     float CumulativeFunction(float u, float v);
   protected:
     itkAdaptiveHistogramEqualizationImageFilterIF2();
     ~itkAdaptiveHistogramEqualizationImageFilterIF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateInputRequestedRegion();
 };


 class itkAdaptiveHistogramEqualizationImageFilterIF2_Pointer {
   public:
     itkAdaptiveHistogramEqualizationImageFilterIF2_Pointer();
     itkAdaptiveHistogramEqualizationImageFilterIF2_Pointer(itkAdaptiveHistogramEqualizationImageFilterIF2_Pointer const & p);
     itkAdaptiveHistogramEqualizationImageFilterIF2_Pointer(itkAdaptiveHistogramEqualizationImageFilterIF2 * p);
     ~itkAdaptiveHistogramEqualizationImageFilterIF2_Pointer();
     itkAdaptiveHistogramEqualizationImageFilterIF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkAdaptiveHistogramEqualizationImageFilterIF2 * GetPointer() const;
     bool operator<(itkAdaptiveHistogramEqualizationImageFilterIF2_Pointer const & r) const;
     bool operator>(itkAdaptiveHistogramEqualizationImageFilterIF2_Pointer const & r) const;
     bool operator<=(itkAdaptiveHistogramEqualizationImageFilterIF2_Pointer const & r) const;
     bool operator>=(itkAdaptiveHistogramEqualizationImageFilterIF2_Pointer const & r) const;
     itkAdaptiveHistogramEqualizationImageFilterIF2_Pointer & operator=(itkAdaptiveHistogramEqualizationImageFilterIF2_Pointer const & r);
     itkAdaptiveHistogramEqualizationImageFilterIF2_Pointer & operator=(itkAdaptiveHistogramEqualizationImageFilterIF2 * r);
     itkAdaptiveHistogramEqualizationImageFilterIF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkAdaptiveHistogramEqualizationImageFilterIF3 : public itkImageToImageFilterIF3IF3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkAdaptiveHistogramEqualizationImageFilterIF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetAlpha(float const _arg);
     virtual float GetAlpha() const;
     virtual void SetBeta(float const _arg);
     virtual float GetBeta() const;
     virtual void SetRadius(itkSize3 const _arg);
     virtual itkSize3 const & GetRadius() const;
     virtual void SetUseLookupTable(bool const _arg);
     virtual bool GetUseLookupTable() const;
     virtual void UseLookupTableOn();
     virtual void UseLookupTableOff();
   private:
     itkAdaptiveHistogramEqualizationImageFilterIF3(itkAdaptiveHistogramEqualizationImageFilterIF3 const & arg0);
     void operator=(itkAdaptiveHistogramEqualizationImageFilterIF3 const & arg0);
     float CumulativeFunction(float u, float v);
   protected:
     itkAdaptiveHistogramEqualizationImageFilterIF3();
     ~itkAdaptiveHistogramEqualizationImageFilterIF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateInputRequestedRegion();
 };


 class itkAdaptiveHistogramEqualizationImageFilterIF3_Pointer {
   public:
     itkAdaptiveHistogramEqualizationImageFilterIF3_Pointer();
     itkAdaptiveHistogramEqualizationImageFilterIF3_Pointer(itkAdaptiveHistogramEqualizationImageFilterIF3_Pointer const & p);
     itkAdaptiveHistogramEqualizationImageFilterIF3_Pointer(itkAdaptiveHistogramEqualizationImageFilterIF3 * p);
     ~itkAdaptiveHistogramEqualizationImageFilterIF3_Pointer();
     itkAdaptiveHistogramEqualizationImageFilterIF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkAdaptiveHistogramEqualizationImageFilterIF3 * GetPointer() const;
     bool operator<(itkAdaptiveHistogramEqualizationImageFilterIF3_Pointer const & r) const;
     bool operator>(itkAdaptiveHistogramEqualizationImageFilterIF3_Pointer const & r) const;
     bool operator<=(itkAdaptiveHistogramEqualizationImageFilterIF3_Pointer const & r) const;
     bool operator>=(itkAdaptiveHistogramEqualizationImageFilterIF3_Pointer const & r) const;
     itkAdaptiveHistogramEqualizationImageFilterIF3_Pointer & operator=(itkAdaptiveHistogramEqualizationImageFilterIF3_Pointer const & r);
     itkAdaptiveHistogramEqualizationImageFilterIF3_Pointer & operator=(itkAdaptiveHistogramEqualizationImageFilterIF3 * r);
     itkAdaptiveHistogramEqualizationImageFilterIF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkAdaptiveHistogramEqualizationImageFilterIUC2 : public itkImageToImageFilterIUC2IUC2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkAdaptiveHistogramEqualizationImageFilterIUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetAlpha(float const _arg);
     virtual float GetAlpha() const;
     virtual void SetBeta(float const _arg);
     virtual float GetBeta() const;
     virtual void SetRadius(itkSize2 const _arg);
     virtual itkSize2 const & GetRadius() const;
     virtual void SetUseLookupTable(bool const _arg);
     virtual bool GetUseLookupTable() const;
     virtual void UseLookupTableOn();
     virtual void UseLookupTableOff();
   private:
     itkAdaptiveHistogramEqualizationImageFilterIUC2(itkAdaptiveHistogramEqualizationImageFilterIUC2 const & arg0);
     void operator=(itkAdaptiveHistogramEqualizationImageFilterIUC2 const & arg0);
     float CumulativeFunction(float u, float v);
   protected:
     itkAdaptiveHistogramEqualizationImageFilterIUC2();
     ~itkAdaptiveHistogramEqualizationImageFilterIUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateInputRequestedRegion();
 };


 class itkAdaptiveHistogramEqualizationImageFilterIUC2_Pointer {
   public:
     itkAdaptiveHistogramEqualizationImageFilterIUC2_Pointer();
     itkAdaptiveHistogramEqualizationImageFilterIUC2_Pointer(itkAdaptiveHistogramEqualizationImageFilterIUC2_Pointer const & p);
     itkAdaptiveHistogramEqualizationImageFilterIUC2_Pointer(itkAdaptiveHistogramEqualizationImageFilterIUC2 * p);
     ~itkAdaptiveHistogramEqualizationImageFilterIUC2_Pointer();
     itkAdaptiveHistogramEqualizationImageFilterIUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkAdaptiveHistogramEqualizationImageFilterIUC2 * GetPointer() const;
     bool operator<(itkAdaptiveHistogramEqualizationImageFilterIUC2_Pointer const & r) const;
     bool operator>(itkAdaptiveHistogramEqualizationImageFilterIUC2_Pointer const & r) const;
     bool operator<=(itkAdaptiveHistogramEqualizationImageFilterIUC2_Pointer const & r) const;
     bool operator>=(itkAdaptiveHistogramEqualizationImageFilterIUC2_Pointer const & r) const;
     itkAdaptiveHistogramEqualizationImageFilterIUC2_Pointer & operator=(itkAdaptiveHistogramEqualizationImageFilterIUC2_Pointer const & r);
     itkAdaptiveHistogramEqualizationImageFilterIUC2_Pointer & operator=(itkAdaptiveHistogramEqualizationImageFilterIUC2 * r);
     itkAdaptiveHistogramEqualizationImageFilterIUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkAdaptiveHistogramEqualizationImageFilterIUC3 : public itkImageToImageFilterIUC3IUC3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkAdaptiveHistogramEqualizationImageFilterIUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetAlpha(float const _arg);
     virtual float GetAlpha() const;
     virtual void SetBeta(float const _arg);
     virtual float GetBeta() const;
     virtual void SetRadius(itkSize3 const _arg);
     virtual itkSize3 const & GetRadius() const;
     virtual void SetUseLookupTable(bool const _arg);
     virtual bool GetUseLookupTable() const;
     virtual void UseLookupTableOn();
     virtual void UseLookupTableOff();
   private:
     itkAdaptiveHistogramEqualizationImageFilterIUC3(itkAdaptiveHistogramEqualizationImageFilterIUC3 const & arg0);
     void operator=(itkAdaptiveHistogramEqualizationImageFilterIUC3 const & arg0);
     float CumulativeFunction(float u, float v);
   protected:
     itkAdaptiveHistogramEqualizationImageFilterIUC3();
     ~itkAdaptiveHistogramEqualizationImageFilterIUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateInputRequestedRegion();
 };


 class itkAdaptiveHistogramEqualizationImageFilterIUC3_Pointer {
   public:
     itkAdaptiveHistogramEqualizationImageFilterIUC3_Pointer();
     itkAdaptiveHistogramEqualizationImageFilterIUC3_Pointer(itkAdaptiveHistogramEqualizationImageFilterIUC3_Pointer const & p);
     itkAdaptiveHistogramEqualizationImageFilterIUC3_Pointer(itkAdaptiveHistogramEqualizationImageFilterIUC3 * p);
     ~itkAdaptiveHistogramEqualizationImageFilterIUC3_Pointer();
     itkAdaptiveHistogramEqualizationImageFilterIUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkAdaptiveHistogramEqualizationImageFilterIUC3 * GetPointer() const;
     bool operator<(itkAdaptiveHistogramEqualizationImageFilterIUC3_Pointer const & r) const;
     bool operator>(itkAdaptiveHistogramEqualizationImageFilterIUC3_Pointer const & r) const;
     bool operator<=(itkAdaptiveHistogramEqualizationImageFilterIUC3_Pointer const & r) const;
     bool operator>=(itkAdaptiveHistogramEqualizationImageFilterIUC3_Pointer const & r) const;
     itkAdaptiveHistogramEqualizationImageFilterIUC3_Pointer & operator=(itkAdaptiveHistogramEqualizationImageFilterIUC3_Pointer const & r);
     itkAdaptiveHistogramEqualizationImageFilterIUC3_Pointer & operator=(itkAdaptiveHistogramEqualizationImageFilterIUC3 * r);
     itkAdaptiveHistogramEqualizationImageFilterIUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkAdaptiveHistogramEqualizationImageFilterIUL2 : public itkImageToImageFilterIUL2IUL2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkAdaptiveHistogramEqualizationImageFilterIUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetAlpha(float const _arg);
     virtual float GetAlpha() const;
     virtual void SetBeta(float const _arg);
     virtual float GetBeta() const;
     virtual void SetRadius(itkSize2 const _arg);
     virtual itkSize2 const & GetRadius() const;
     virtual void SetUseLookupTable(bool const _arg);
     virtual bool GetUseLookupTable() const;
     virtual void UseLookupTableOn();
     virtual void UseLookupTableOff();
   private:
     itkAdaptiveHistogramEqualizationImageFilterIUL2(itkAdaptiveHistogramEqualizationImageFilterIUL2 const & arg0);
     void operator=(itkAdaptiveHistogramEqualizationImageFilterIUL2 const & arg0);
     float CumulativeFunction(float u, float v);
   protected:
     itkAdaptiveHistogramEqualizationImageFilterIUL2();
     ~itkAdaptiveHistogramEqualizationImageFilterIUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateInputRequestedRegion();
 };


 class itkAdaptiveHistogramEqualizationImageFilterIUL2_Pointer {
   public:
     itkAdaptiveHistogramEqualizationImageFilterIUL2_Pointer();
     itkAdaptiveHistogramEqualizationImageFilterIUL2_Pointer(itkAdaptiveHistogramEqualizationImageFilterIUL2_Pointer const & p);
     itkAdaptiveHistogramEqualizationImageFilterIUL2_Pointer(itkAdaptiveHistogramEqualizationImageFilterIUL2 * p);
     ~itkAdaptiveHistogramEqualizationImageFilterIUL2_Pointer();
     itkAdaptiveHistogramEqualizationImageFilterIUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkAdaptiveHistogramEqualizationImageFilterIUL2 * GetPointer() const;
     bool operator<(itkAdaptiveHistogramEqualizationImageFilterIUL2_Pointer const & r) const;
     bool operator>(itkAdaptiveHistogramEqualizationImageFilterIUL2_Pointer const & r) const;
     bool operator<=(itkAdaptiveHistogramEqualizationImageFilterIUL2_Pointer const & r) const;
     bool operator>=(itkAdaptiveHistogramEqualizationImageFilterIUL2_Pointer const & r) const;
     itkAdaptiveHistogramEqualizationImageFilterIUL2_Pointer & operator=(itkAdaptiveHistogramEqualizationImageFilterIUL2_Pointer const & r);
     itkAdaptiveHistogramEqualizationImageFilterIUL2_Pointer & operator=(itkAdaptiveHistogramEqualizationImageFilterIUL2 * r);
     itkAdaptiveHistogramEqualizationImageFilterIUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkAdaptiveHistogramEqualizationImageFilterIUL3 : public itkImageToImageFilterIUL3IUL3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkAdaptiveHistogramEqualizationImageFilterIUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetAlpha(float const _arg);
     virtual float GetAlpha() const;
     virtual void SetBeta(float const _arg);
     virtual float GetBeta() const;
     virtual void SetRadius(itkSize3 const _arg);
     virtual itkSize3 const & GetRadius() const;
     virtual void SetUseLookupTable(bool const _arg);
     virtual bool GetUseLookupTable() const;
     virtual void UseLookupTableOn();
     virtual void UseLookupTableOff();
   private:
     itkAdaptiveHistogramEqualizationImageFilterIUL3(itkAdaptiveHistogramEqualizationImageFilterIUL3 const & arg0);
     void operator=(itkAdaptiveHistogramEqualizationImageFilterIUL3 const & arg0);
     float CumulativeFunction(float u, float v);
   protected:
     itkAdaptiveHistogramEqualizationImageFilterIUL3();
     ~itkAdaptiveHistogramEqualizationImageFilterIUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateInputRequestedRegion();
 };


 class itkAdaptiveHistogramEqualizationImageFilterIUL3_Pointer {
   public:
     itkAdaptiveHistogramEqualizationImageFilterIUL3_Pointer();
     itkAdaptiveHistogramEqualizationImageFilterIUL3_Pointer(itkAdaptiveHistogramEqualizationImageFilterIUL3_Pointer const & p);
     itkAdaptiveHistogramEqualizationImageFilterIUL3_Pointer(itkAdaptiveHistogramEqualizationImageFilterIUL3 * p);
     ~itkAdaptiveHistogramEqualizationImageFilterIUL3_Pointer();
     itkAdaptiveHistogramEqualizationImageFilterIUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkAdaptiveHistogramEqualizationImageFilterIUL3 * GetPointer() const;
     bool operator<(itkAdaptiveHistogramEqualizationImageFilterIUL3_Pointer const & r) const;
     bool operator>(itkAdaptiveHistogramEqualizationImageFilterIUL3_Pointer const & r) const;
     bool operator<=(itkAdaptiveHistogramEqualizationImageFilterIUL3_Pointer const & r) const;
     bool operator>=(itkAdaptiveHistogramEqualizationImageFilterIUL3_Pointer const & r) const;
     itkAdaptiveHistogramEqualizationImageFilterIUL3_Pointer & operator=(itkAdaptiveHistogramEqualizationImageFilterIUL3_Pointer const & r);
     itkAdaptiveHistogramEqualizationImageFilterIUL3_Pointer & operator=(itkAdaptiveHistogramEqualizationImageFilterIUL3 * r);
     itkAdaptiveHistogramEqualizationImageFilterIUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkAdaptiveHistogramEqualizationImageFilterIUS2 : public itkImageToImageFilterIUS2IUS2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkAdaptiveHistogramEqualizationImageFilterIUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetAlpha(float const _arg);
     virtual float GetAlpha() const;
     virtual void SetBeta(float const _arg);
     virtual float GetBeta() const;
     virtual void SetRadius(itkSize2 const _arg);
     virtual itkSize2 const & GetRadius() const;
     virtual void SetUseLookupTable(bool const _arg);
     virtual bool GetUseLookupTable() const;
     virtual void UseLookupTableOn();
     virtual void UseLookupTableOff();
   private:
     itkAdaptiveHistogramEqualizationImageFilterIUS2(itkAdaptiveHistogramEqualizationImageFilterIUS2 const & arg0);
     void operator=(itkAdaptiveHistogramEqualizationImageFilterIUS2 const & arg0);
     float CumulativeFunction(float u, float v);
   protected:
     itkAdaptiveHistogramEqualizationImageFilterIUS2();
     ~itkAdaptiveHistogramEqualizationImageFilterIUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateInputRequestedRegion();
 };


 class itkAdaptiveHistogramEqualizationImageFilterIUS2_Pointer {
   public:
     itkAdaptiveHistogramEqualizationImageFilterIUS2_Pointer();
     itkAdaptiveHistogramEqualizationImageFilterIUS2_Pointer(itkAdaptiveHistogramEqualizationImageFilterIUS2_Pointer const & p);
     itkAdaptiveHistogramEqualizationImageFilterIUS2_Pointer(itkAdaptiveHistogramEqualizationImageFilterIUS2 * p);
     ~itkAdaptiveHistogramEqualizationImageFilterIUS2_Pointer();
     itkAdaptiveHistogramEqualizationImageFilterIUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkAdaptiveHistogramEqualizationImageFilterIUS2 * GetPointer() const;
     bool operator<(itkAdaptiveHistogramEqualizationImageFilterIUS2_Pointer const & r) const;
     bool operator>(itkAdaptiveHistogramEqualizationImageFilterIUS2_Pointer const & r) const;
     bool operator<=(itkAdaptiveHistogramEqualizationImageFilterIUS2_Pointer const & r) const;
     bool operator>=(itkAdaptiveHistogramEqualizationImageFilterIUS2_Pointer const & r) const;
     itkAdaptiveHistogramEqualizationImageFilterIUS2_Pointer & operator=(itkAdaptiveHistogramEqualizationImageFilterIUS2_Pointer const & r);
     itkAdaptiveHistogramEqualizationImageFilterIUS2_Pointer & operator=(itkAdaptiveHistogramEqualizationImageFilterIUS2 * r);
     itkAdaptiveHistogramEqualizationImageFilterIUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkAdaptiveHistogramEqualizationImageFilterIUS3 : public itkImageToImageFilterIUS3IUS3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkAdaptiveHistogramEqualizationImageFilterIUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetAlpha(float const _arg);
     virtual float GetAlpha() const;
     virtual void SetBeta(float const _arg);
     virtual float GetBeta() const;
     virtual void SetRadius(itkSize3 const _arg);
     virtual itkSize3 const & GetRadius() const;
     virtual void SetUseLookupTable(bool const _arg);
     virtual bool GetUseLookupTable() const;
     virtual void UseLookupTableOn();
     virtual void UseLookupTableOff();
   private:
     itkAdaptiveHistogramEqualizationImageFilterIUS3(itkAdaptiveHistogramEqualizationImageFilterIUS3 const & arg0);
     void operator=(itkAdaptiveHistogramEqualizationImageFilterIUS3 const & arg0);
     float CumulativeFunction(float u, float v);
   protected:
     itkAdaptiveHistogramEqualizationImageFilterIUS3();
     ~itkAdaptiveHistogramEqualizationImageFilterIUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateInputRequestedRegion();
 };


 class itkAdaptiveHistogramEqualizationImageFilterIUS3_Pointer {
   public:
     itkAdaptiveHistogramEqualizationImageFilterIUS3_Pointer();
     itkAdaptiveHistogramEqualizationImageFilterIUS3_Pointer(itkAdaptiveHistogramEqualizationImageFilterIUS3_Pointer const & p);
     itkAdaptiveHistogramEqualizationImageFilterIUS3_Pointer(itkAdaptiveHistogramEqualizationImageFilterIUS3 * p);
     ~itkAdaptiveHistogramEqualizationImageFilterIUS3_Pointer();
     itkAdaptiveHistogramEqualizationImageFilterIUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkAdaptiveHistogramEqualizationImageFilterIUS3 * GetPointer() const;
     bool operator<(itkAdaptiveHistogramEqualizationImageFilterIUS3_Pointer const & r) const;
     bool operator>(itkAdaptiveHistogramEqualizationImageFilterIUS3_Pointer const & r) const;
     bool operator<=(itkAdaptiveHistogramEqualizationImageFilterIUS3_Pointer const & r) const;
     bool operator>=(itkAdaptiveHistogramEqualizationImageFilterIUS3_Pointer const & r) const;
     itkAdaptiveHistogramEqualizationImageFilterIUS3_Pointer & operator=(itkAdaptiveHistogramEqualizationImageFilterIUS3_Pointer const & r);
     itkAdaptiveHistogramEqualizationImageFilterIUS3_Pointer & operator=(itkAdaptiveHistogramEqualizationImageFilterIUS3 * r);
     itkAdaptiveHistogramEqualizationImageFilterIUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


