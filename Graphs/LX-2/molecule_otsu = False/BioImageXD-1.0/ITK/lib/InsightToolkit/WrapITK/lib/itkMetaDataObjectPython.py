# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkMetaDataObjectPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkMetaDataObjectPython', [dirname(__file__)])
        except ImportError:
            import _itkMetaDataObjectPython
            return _itkMetaDataObjectPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkMetaDataObjectPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkMetaDataObjectPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkMetaDataObjectPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import itkEventObjectsPython
import pyBasePython
def itkMetaDataObjectUL_New():
  return itkMetaDataObjectUL.New()

def itkMetaDataObjectUI_New():
  return itkMetaDataObjectUI.New()

def itkMetaDataObjectF_New():
  return itkMetaDataObjectF.New()

def itkMetaDataObjectD_New():
  return itkMetaDataObjectD.New()

class itkMetaDataObjectD(ITKCommonBasePython.itkMetaDataObjectBase):
    """Proxy of C++ itkMetaDataObjectD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMetaDataObjectPython.itkMetaDataObjectD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def __init__(self, *args): 
        """
        __init__(self) -> itkMetaDataObjectD
        __init__(self, double InitializerValue) -> itkMetaDataObjectD
        __init__(self, itkMetaDataObjectD TemplateObject) -> itkMetaDataObjectD
        """
        _itkMetaDataObjectPython.itkMetaDataObjectD_swiginit(self,_itkMetaDataObjectPython.new_itkMetaDataObjectD(*args))
    def GetMetaDataObjectValue(self):
        """GetMetaDataObjectValue(self) -> double"""
        return _itkMetaDataObjectPython.itkMetaDataObjectD_GetMetaDataObjectValue(self)

    def SetMetaDataObjectValue(self, *args):
        """SetMetaDataObjectValue(self, double NewValue)"""
        return _itkMetaDataObjectPython.itkMetaDataObjectD_SetMetaDataObjectValue(self, *args)

    __swig_destroy__ = _itkMetaDataObjectPython.delete_itkMetaDataObjectD
    def cast(*args):
        """cast(itkLightObject obj) -> itkMetaDataObjectD"""
        return _itkMetaDataObjectPython.itkMetaDataObjectD_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMetaDataObjectD"""
        return _itkMetaDataObjectPython.itkMetaDataObjectD_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMetaDataObjectD
        
        Create a new object of the class itkMetaDataObjectD and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMetaDataObjectD.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMetaDataObjectD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMetaDataObjectD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMetaDataObjectD.GetMetaDataObjectValue = new_instancemethod(_itkMetaDataObjectPython.itkMetaDataObjectD_GetMetaDataObjectValue,None,itkMetaDataObjectD)
itkMetaDataObjectD.SetMetaDataObjectValue = new_instancemethod(_itkMetaDataObjectPython.itkMetaDataObjectD_SetMetaDataObjectValue,None,itkMetaDataObjectD)
itkMetaDataObjectD.GetPointer = new_instancemethod(_itkMetaDataObjectPython.itkMetaDataObjectD_GetPointer,None,itkMetaDataObjectD)
itkMetaDataObjectD_swigregister = _itkMetaDataObjectPython.itkMetaDataObjectD_swigregister
itkMetaDataObjectD_swigregister(itkMetaDataObjectD)

def itkMetaDataObjectD___New_orig__():
  """itkMetaDataObjectD___New_orig__()"""
  return _itkMetaDataObjectPython.itkMetaDataObjectD___New_orig__()

def itkMetaDataObjectD_cast(*args):
  """itkMetaDataObjectD_cast(itkLightObject obj) -> itkMetaDataObjectD"""
  return _itkMetaDataObjectPython.itkMetaDataObjectD_cast(*args)

class itkMetaDataObjectF(ITKCommonBasePython.itkMetaDataObjectBase):
    """Proxy of C++ itkMetaDataObjectF class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMetaDataObjectPython.itkMetaDataObjectF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def __init__(self, *args): 
        """
        __init__(self) -> itkMetaDataObjectF
        __init__(self, float InitializerValue) -> itkMetaDataObjectF
        __init__(self, itkMetaDataObjectF TemplateObject) -> itkMetaDataObjectF
        """
        _itkMetaDataObjectPython.itkMetaDataObjectF_swiginit(self,_itkMetaDataObjectPython.new_itkMetaDataObjectF(*args))
    def GetMetaDataObjectValue(self):
        """GetMetaDataObjectValue(self) -> float"""
        return _itkMetaDataObjectPython.itkMetaDataObjectF_GetMetaDataObjectValue(self)

    def SetMetaDataObjectValue(self, *args):
        """SetMetaDataObjectValue(self, float NewValue)"""
        return _itkMetaDataObjectPython.itkMetaDataObjectF_SetMetaDataObjectValue(self, *args)

    __swig_destroy__ = _itkMetaDataObjectPython.delete_itkMetaDataObjectF
    def cast(*args):
        """cast(itkLightObject obj) -> itkMetaDataObjectF"""
        return _itkMetaDataObjectPython.itkMetaDataObjectF_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMetaDataObjectF"""
        return _itkMetaDataObjectPython.itkMetaDataObjectF_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMetaDataObjectF
        
        Create a new object of the class itkMetaDataObjectF and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMetaDataObjectF.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMetaDataObjectF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMetaDataObjectF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMetaDataObjectF.GetMetaDataObjectValue = new_instancemethod(_itkMetaDataObjectPython.itkMetaDataObjectF_GetMetaDataObjectValue,None,itkMetaDataObjectF)
itkMetaDataObjectF.SetMetaDataObjectValue = new_instancemethod(_itkMetaDataObjectPython.itkMetaDataObjectF_SetMetaDataObjectValue,None,itkMetaDataObjectF)
itkMetaDataObjectF.GetPointer = new_instancemethod(_itkMetaDataObjectPython.itkMetaDataObjectF_GetPointer,None,itkMetaDataObjectF)
itkMetaDataObjectF_swigregister = _itkMetaDataObjectPython.itkMetaDataObjectF_swigregister
itkMetaDataObjectF_swigregister(itkMetaDataObjectF)

def itkMetaDataObjectF___New_orig__():
  """itkMetaDataObjectF___New_orig__()"""
  return _itkMetaDataObjectPython.itkMetaDataObjectF___New_orig__()

def itkMetaDataObjectF_cast(*args):
  """itkMetaDataObjectF_cast(itkLightObject obj) -> itkMetaDataObjectF"""
  return _itkMetaDataObjectPython.itkMetaDataObjectF_cast(*args)

class itkMetaDataObjectUI(ITKCommonBasePython.itkMetaDataObjectBase):
    """Proxy of C++ itkMetaDataObjectUI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMetaDataObjectPython.itkMetaDataObjectUI___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def __init__(self, *args): 
        """
        __init__(self) -> itkMetaDataObjectUI
        __init__(self, unsigned int InitializerValue) -> itkMetaDataObjectUI
        __init__(self, itkMetaDataObjectUI TemplateObject) -> itkMetaDataObjectUI
        """
        _itkMetaDataObjectPython.itkMetaDataObjectUI_swiginit(self,_itkMetaDataObjectPython.new_itkMetaDataObjectUI(*args))
    def GetMetaDataObjectValue(self):
        """GetMetaDataObjectValue(self) -> unsigned int"""
        return _itkMetaDataObjectPython.itkMetaDataObjectUI_GetMetaDataObjectValue(self)

    def SetMetaDataObjectValue(self, *args):
        """SetMetaDataObjectValue(self, unsigned int NewValue)"""
        return _itkMetaDataObjectPython.itkMetaDataObjectUI_SetMetaDataObjectValue(self, *args)

    __swig_destroy__ = _itkMetaDataObjectPython.delete_itkMetaDataObjectUI
    def cast(*args):
        """cast(itkLightObject obj) -> itkMetaDataObjectUI"""
        return _itkMetaDataObjectPython.itkMetaDataObjectUI_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMetaDataObjectUI"""
        return _itkMetaDataObjectPython.itkMetaDataObjectUI_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMetaDataObjectUI
        
        Create a new object of the class itkMetaDataObjectUI and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMetaDataObjectUI.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMetaDataObjectUI.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMetaDataObjectUI.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMetaDataObjectUI.GetMetaDataObjectValue = new_instancemethod(_itkMetaDataObjectPython.itkMetaDataObjectUI_GetMetaDataObjectValue,None,itkMetaDataObjectUI)
itkMetaDataObjectUI.SetMetaDataObjectValue = new_instancemethod(_itkMetaDataObjectPython.itkMetaDataObjectUI_SetMetaDataObjectValue,None,itkMetaDataObjectUI)
itkMetaDataObjectUI.GetPointer = new_instancemethod(_itkMetaDataObjectPython.itkMetaDataObjectUI_GetPointer,None,itkMetaDataObjectUI)
itkMetaDataObjectUI_swigregister = _itkMetaDataObjectPython.itkMetaDataObjectUI_swigregister
itkMetaDataObjectUI_swigregister(itkMetaDataObjectUI)

def itkMetaDataObjectUI___New_orig__():
  """itkMetaDataObjectUI___New_orig__()"""
  return _itkMetaDataObjectPython.itkMetaDataObjectUI___New_orig__()

def itkMetaDataObjectUI_cast(*args):
  """itkMetaDataObjectUI_cast(itkLightObject obj) -> itkMetaDataObjectUI"""
  return _itkMetaDataObjectPython.itkMetaDataObjectUI_cast(*args)

class itkMetaDataObjectUL(ITKCommonBasePython.itkMetaDataObjectBase):
    """Proxy of C++ itkMetaDataObjectUL class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMetaDataObjectPython.itkMetaDataObjectUL___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def __init__(self, *args): 
        """
        __init__(self) -> itkMetaDataObjectUL
        __init__(self, unsigned long InitializerValue) -> itkMetaDataObjectUL
        __init__(self, itkMetaDataObjectUL TemplateObject) -> itkMetaDataObjectUL
        """
        _itkMetaDataObjectPython.itkMetaDataObjectUL_swiginit(self,_itkMetaDataObjectPython.new_itkMetaDataObjectUL(*args))
    def GetMetaDataObjectValue(self):
        """GetMetaDataObjectValue(self) -> unsigned long"""
        return _itkMetaDataObjectPython.itkMetaDataObjectUL_GetMetaDataObjectValue(self)

    def SetMetaDataObjectValue(self, *args):
        """SetMetaDataObjectValue(self, unsigned long NewValue)"""
        return _itkMetaDataObjectPython.itkMetaDataObjectUL_SetMetaDataObjectValue(self, *args)

    __swig_destroy__ = _itkMetaDataObjectPython.delete_itkMetaDataObjectUL
    def cast(*args):
        """cast(itkLightObject obj) -> itkMetaDataObjectUL"""
        return _itkMetaDataObjectPython.itkMetaDataObjectUL_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMetaDataObjectUL"""
        return _itkMetaDataObjectPython.itkMetaDataObjectUL_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMetaDataObjectUL
        
        Create a new object of the class itkMetaDataObjectUL and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMetaDataObjectUL.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMetaDataObjectUL.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMetaDataObjectUL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMetaDataObjectUL.GetMetaDataObjectValue = new_instancemethod(_itkMetaDataObjectPython.itkMetaDataObjectUL_GetMetaDataObjectValue,None,itkMetaDataObjectUL)
itkMetaDataObjectUL.SetMetaDataObjectValue = new_instancemethod(_itkMetaDataObjectPython.itkMetaDataObjectUL_SetMetaDataObjectValue,None,itkMetaDataObjectUL)
itkMetaDataObjectUL.GetPointer = new_instancemethod(_itkMetaDataObjectPython.itkMetaDataObjectUL_GetPointer,None,itkMetaDataObjectUL)
itkMetaDataObjectUL_swigregister = _itkMetaDataObjectPython.itkMetaDataObjectUL_swigregister
itkMetaDataObjectUL_swigregister(itkMetaDataObjectUL)

def itkMetaDataObjectUL___New_orig__():
  """itkMetaDataObjectUL___New_orig__()"""
  return _itkMetaDataObjectPython.itkMetaDataObjectUL___New_orig__()

def itkMetaDataObjectUL_cast(*args):
  """itkMetaDataObjectUL_cast(itkLightObject obj) -> itkMetaDataObjectUL"""
  return _itkMetaDataObjectPython.itkMetaDataObjectUL_cast(*args)



