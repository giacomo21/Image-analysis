// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkVectorContainerChicken
#endif
#ifdef SWIGCSHARP
%module itkVectorContainerCsharp
#endif
#ifdef SWIGGUILE
%module itkVectorContainerGuile
#endif
#ifdef SWIGJAVA
%module itkVectorContainerJava
#endif
#ifdef SWIGLUA
%module itkVectorContainerLua
#endif
#ifdef SWIGMODULA3
%module itkVectorContainerModula3
#endif
#ifdef SWIGMZSCHEME
%module itkVectorContainerMzscheme
#endif
#ifdef SWIGOCAML
%module itkVectorContainerOcaml
#endif
#ifdef SWIGPERL
%module itkVectorContainerPerl
#endif
#ifdef SWIGPERL5
%module itkVectorContainerPerl5
#endif
#ifdef SWIGPHP
%module itkVectorContainerPhp
#endif
#ifdef SWIGPHP4
%module itkVectorContainerPhp4
#endif
#ifdef SWIGPHP5
%module itkVectorContainerPhp5
#endif
#ifdef SWIGPIKE
%module itkVectorContainerPike
#endif
#ifdef SWIGPYTHON
%module itkVectorContainerPython
#endif
#ifdef SWIGR
%module itkVectorContainerR
#endif
#ifdef SWIGRUBY
%module itkVectorContainerRuby
#endif
#ifdef SWIGSEXP
%module itkVectorContainerSexp
#endif
#ifdef SWIGTCL
%module itkVectorContainerTcl
#endif
#ifdef SWIGXML
%module itkVectorContainerXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
%}


%{
%}




%import wrap_itkPoint.i
%import wrap_itkOffset.i
%import wrap_itkContinuousIndex.i
%import wrap_itkVector.i
%import wrap_ITKCommonBase.i
%import wrap_itkLevelSet.i


%include itk.i
%include wrap_itkVectorContainer_ext.i


 class itkDataObjectDecoratorVCUCD : public itkDataObject {
   public:
     static itkDataObjectDecoratorVCUCD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Set(itkVectorContainerUCD const * val);
     virtual itkVectorContainerUCD const * Get() const;
   private:
     itkDataObjectDecoratorVCUCD(itkDataObjectDecoratorVCUCD const & arg0);
     void operator=(itkDataObjectDecoratorVCUCD const & arg0);
   protected:
     itkDataObjectDecoratorVCUCD();
     ~itkDataObjectDecoratorVCUCD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkDataObjectDecoratorVCUCD_Pointer {
   public:
     itkDataObjectDecoratorVCUCD_Pointer();
     itkDataObjectDecoratorVCUCD_Pointer(itkDataObjectDecoratorVCUCD_Pointer const & p);
     itkDataObjectDecoratorVCUCD_Pointer(itkDataObjectDecoratorVCUCD * p);
     ~itkDataObjectDecoratorVCUCD_Pointer();
     itkDataObjectDecoratorVCUCD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDataObjectDecoratorVCUCD * GetPointer() const;
     bool operator<(itkDataObjectDecoratorVCUCD_Pointer const & r) const;
     bool operator>(itkDataObjectDecoratorVCUCD_Pointer const & r) const;
     bool operator<=(itkDataObjectDecoratorVCUCD_Pointer const & r) const;
     bool operator>=(itkDataObjectDecoratorVCUCD_Pointer const & r) const;
     itkDataObjectDecoratorVCUCD_Pointer & operator=(itkDataObjectDecoratorVCUCD_Pointer const & r);
     itkDataObjectDecoratorVCUCD_Pointer & operator=(itkDataObjectDecoratorVCUCD * r);
     itkDataObjectDecoratorVCUCD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorContainerUCD : public itkObject, public std::vector< double > {
   public:
     static itkVectorContainerUCD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     std::vector< double > & CastToSTLContainer();
     std::vector< double > const & CastToSTLConstContainer() const;
     double & ElementAt(unsigned char arg0);
     double const & ElementAt(unsigned char arg0) const;
     double & CreateElementAt(unsigned char arg0);
     double GetElement(unsigned char arg0) const;
     void SetElement(unsigned char arg0, double arg1);
     void InsertElement(unsigned char arg0, double arg1);
     bool IndexExists(unsigned char arg0) const;
     bool GetElementIfIndexExists(unsigned char arg0, double * arg1) const;
     void CreateIndex(unsigned char arg0);
     void DeleteIndex(unsigned char arg0);
     unsigned long Size() const;
     void Reserve(unsigned char arg0);
     void Squeeze();
     void Initialize();
     ~itkVectorContainerUCD();
   private:
   protected:
     itkVectorContainerUCD();
     itkVectorContainerUCD(size_t n);
     itkVectorContainerUCD(size_t n, double const & x);
     itkVectorContainerUCD(itkVectorContainerUCD const & r);
 };


 class itkVectorContainerUCD_Pointer {
   public:
     itkVectorContainerUCD_Pointer();
     itkVectorContainerUCD_Pointer(itkVectorContainerUCD_Pointer const & p);
     itkVectorContainerUCD_Pointer(itkVectorContainerUCD * p);
     ~itkVectorContainerUCD_Pointer();
     itkVectorContainerUCD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorContainerUCD * GetPointer() const;
     bool operator<(itkVectorContainerUCD_Pointer const & r) const;
     bool operator>(itkVectorContainerUCD_Pointer const & r) const;
     bool operator<=(itkVectorContainerUCD_Pointer const & r) const;
     bool operator>=(itkVectorContainerUCD_Pointer const & r) const;
     itkVectorContainerUCD_Pointer & operator=(itkVectorContainerUCD_Pointer const & r);
     itkVectorContainerUCD_Pointer & operator=(itkVectorContainerUCD * r);
     itkVectorContainerUCD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorContainerUCO2 : public itkObject, public std::vector< itkOffset2 > {
   public:
     static itkVectorContainerUCO2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     std::vector< itkOffset2 > & CastToSTLContainer();
     std::vector< itkOffset2 > const & CastToSTLConstContainer() const;
     itkOffset2 & ElementAt(unsigned char arg0);
     itkOffset2 const & ElementAt(unsigned char arg0) const;
     itkOffset2 & CreateElementAt(unsigned char arg0);
     itkOffset2 GetElement(unsigned char arg0) const;
     void SetElement(unsigned char arg0, itkOffset2 arg1);
     void InsertElement(unsigned char arg0, itkOffset2 arg1);
     bool IndexExists(unsigned char arg0) const;
     bool GetElementIfIndexExists(unsigned char arg0, itkOffset2 * arg1) const;
     void CreateIndex(unsigned char arg0);
     void DeleteIndex(unsigned char arg0);
     unsigned long Size() const;
     void Reserve(unsigned char arg0);
     void Squeeze();
     void Initialize();
     ~itkVectorContainerUCO2();
   private:
   protected:
     itkVectorContainerUCO2();
     itkVectorContainerUCO2(size_t n);
     itkVectorContainerUCO2(size_t n, itkOffset2 const & x);
     itkVectorContainerUCO2(itkVectorContainerUCO2 const & r);
 };


 class itkVectorContainerUCO2_Pointer {
   public:
     itkVectorContainerUCO2_Pointer();
     itkVectorContainerUCO2_Pointer(itkVectorContainerUCO2_Pointer const & p);
     itkVectorContainerUCO2_Pointer(itkVectorContainerUCO2 * p);
     ~itkVectorContainerUCO2_Pointer();
     itkVectorContainerUCO2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorContainerUCO2 * GetPointer() const;
     bool operator<(itkVectorContainerUCO2_Pointer const & r) const;
     bool operator>(itkVectorContainerUCO2_Pointer const & r) const;
     bool operator<=(itkVectorContainerUCO2_Pointer const & r) const;
     bool operator>=(itkVectorContainerUCO2_Pointer const & r) const;
     itkVectorContainerUCO2_Pointer & operator=(itkVectorContainerUCO2_Pointer const & r);
     itkVectorContainerUCO2_Pointer & operator=(itkVectorContainerUCO2 * r);
     itkVectorContainerUCO2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorContainerUCO3 : public itkObject, public std::vector< itkOffset3 > {
   public:
     static itkVectorContainerUCO3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     std::vector< itkOffset3 > & CastToSTLContainer();
     std::vector< itkOffset3 > const & CastToSTLConstContainer() const;
     itkOffset3 & ElementAt(unsigned char arg0);
     itkOffset3 const & ElementAt(unsigned char arg0) const;
     itkOffset3 & CreateElementAt(unsigned char arg0);
     itkOffset3 GetElement(unsigned char arg0) const;
     void SetElement(unsigned char arg0, itkOffset3 arg1);
     void InsertElement(unsigned char arg0, itkOffset3 arg1);
     bool IndexExists(unsigned char arg0) const;
     bool GetElementIfIndexExists(unsigned char arg0, itkOffset3 * arg1) const;
     void CreateIndex(unsigned char arg0);
     void DeleteIndex(unsigned char arg0);
     unsigned long Size() const;
     void Reserve(unsigned char arg0);
     void Squeeze();
     void Initialize();
     ~itkVectorContainerUCO3();
   private:
   protected:
     itkVectorContainerUCO3();
     itkVectorContainerUCO3(size_t n);
     itkVectorContainerUCO3(size_t n, itkOffset3 const & x);
     itkVectorContainerUCO3(itkVectorContainerUCO3 const & r);
 };


 class itkVectorContainerUCO3_Pointer {
   public:
     itkVectorContainerUCO3_Pointer();
     itkVectorContainerUCO3_Pointer(itkVectorContainerUCO3_Pointer const & p);
     itkVectorContainerUCO3_Pointer(itkVectorContainerUCO3 * p);
     ~itkVectorContainerUCO3_Pointer();
     itkVectorContainerUCO3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorContainerUCO3 * GetPointer() const;
     bool operator<(itkVectorContainerUCO3_Pointer const & r) const;
     bool operator>(itkVectorContainerUCO3_Pointer const & r) const;
     bool operator<=(itkVectorContainerUCO3_Pointer const & r) const;
     bool operator>=(itkVectorContainerUCO3_Pointer const & r) const;
     itkVectorContainerUCO3_Pointer & operator=(itkVectorContainerUCO3_Pointer const & r);
     itkVectorContainerUCO3_Pointer & operator=(itkVectorContainerUCO3 * r);
     itkVectorContainerUCO3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorContainerUICID2 : public itkObject, public std::vector< itkContinuousIndexD2 > {
   public:
     static itkVectorContainerUICID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     std::vector< itkContinuousIndexD2 > & CastToSTLContainer();
     std::vector< itkContinuousIndexD2 > const & CastToSTLConstContainer() const;
     itkContinuousIndexD2 & ElementAt(unsigned int arg0);
     itkContinuousIndexD2 const & ElementAt(unsigned int arg0) const;
     itkContinuousIndexD2 & CreateElementAt(unsigned int arg0);
     itkContinuousIndexD2 GetElement(unsigned int arg0) const;
     void SetElement(unsigned int arg0, itkContinuousIndexD2 arg1);
     void InsertElement(unsigned int arg0, itkContinuousIndexD2 arg1);
     bool IndexExists(unsigned int arg0) const;
     bool GetElementIfIndexExists(unsigned int arg0, itkContinuousIndexD2 * arg1) const;
     void CreateIndex(unsigned int arg0);
     void DeleteIndex(unsigned int arg0);
     unsigned long Size() const;
     void Reserve(unsigned int arg0);
     void Squeeze();
     void Initialize();
     ~itkVectorContainerUICID2();
   private:
   protected:
     itkVectorContainerUICID2();
     itkVectorContainerUICID2(size_t n);
     itkVectorContainerUICID2(size_t n, itkContinuousIndexD2 const & x);
     itkVectorContainerUICID2(itkVectorContainerUICID2 const & r);
 };


 class itkVectorContainerUICID2_Pointer {
   public:
     itkVectorContainerUICID2_Pointer();
     itkVectorContainerUICID2_Pointer(itkVectorContainerUICID2_Pointer const & p);
     itkVectorContainerUICID2_Pointer(itkVectorContainerUICID2 * p);
     ~itkVectorContainerUICID2_Pointer();
     itkVectorContainerUICID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorContainerUICID2 * GetPointer() const;
     bool operator<(itkVectorContainerUICID2_Pointer const & r) const;
     bool operator>(itkVectorContainerUICID2_Pointer const & r) const;
     bool operator<=(itkVectorContainerUICID2_Pointer const & r) const;
     bool operator>=(itkVectorContainerUICID2_Pointer const & r) const;
     itkVectorContainerUICID2_Pointer & operator=(itkVectorContainerUICID2_Pointer const & r);
     itkVectorContainerUICID2_Pointer & operator=(itkVectorContainerUICID2 * r);
     itkVectorContainerUICID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorContainerUICID3 : public itkObject, public std::vector< itkContinuousIndexD3 > {
   public:
     static itkVectorContainerUICID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     std::vector< itkContinuousIndexD3 > & CastToSTLContainer();
     std::vector< itkContinuousIndexD3 > const & CastToSTLConstContainer() const;
     itkContinuousIndexD3 & ElementAt(unsigned int arg0);
     itkContinuousIndexD3 const & ElementAt(unsigned int arg0) const;
     itkContinuousIndexD3 & CreateElementAt(unsigned int arg0);
     itkContinuousIndexD3 GetElement(unsigned int arg0) const;
     void SetElement(unsigned int arg0, itkContinuousIndexD3 arg1);
     void InsertElement(unsigned int arg0, itkContinuousIndexD3 arg1);
     bool IndexExists(unsigned int arg0) const;
     bool GetElementIfIndexExists(unsigned int arg0, itkContinuousIndexD3 * arg1) const;
     void CreateIndex(unsigned int arg0);
     void DeleteIndex(unsigned int arg0);
     unsigned long Size() const;
     void Reserve(unsigned int arg0);
     void Squeeze();
     void Initialize();
     ~itkVectorContainerUICID3();
   private:
   protected:
     itkVectorContainerUICID3();
     itkVectorContainerUICID3(size_t n);
     itkVectorContainerUICID3(size_t n, itkContinuousIndexD3 const & x);
     itkVectorContainerUICID3(itkVectorContainerUICID3 const & r);
 };


 class itkVectorContainerUICID3_Pointer {
   public:
     itkVectorContainerUICID3_Pointer();
     itkVectorContainerUICID3_Pointer(itkVectorContainerUICID3_Pointer const & p);
     itkVectorContainerUICID3_Pointer(itkVectorContainerUICID3 * p);
     ~itkVectorContainerUICID3_Pointer();
     itkVectorContainerUICID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorContainerUICID3 * GetPointer() const;
     bool operator<(itkVectorContainerUICID3_Pointer const & r) const;
     bool operator>(itkVectorContainerUICID3_Pointer const & r) const;
     bool operator<=(itkVectorContainerUICID3_Pointer const & r) const;
     bool operator>=(itkVectorContainerUICID3_Pointer const & r) const;
     itkVectorContainerUICID3_Pointer & operator=(itkVectorContainerUICID3_Pointer const & r);
     itkVectorContainerUICID3_Pointer & operator=(itkVectorContainerUICID3 * r);
     itkVectorContainerUICID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorContainerUILSND2 : public itkObject, public std::vector< itkLevelSetNodeD2 > {
   public:
     static itkVectorContainerUILSND2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     std::vector< itkLevelSetNodeD2 > & CastToSTLContainer();
     std::vector< itkLevelSetNodeD2 > const & CastToSTLConstContainer() const;
     itkLevelSetNodeD2 & ElementAt(unsigned int arg0);
     itkLevelSetNodeD2 const & ElementAt(unsigned int arg0) const;
     itkLevelSetNodeD2 & CreateElementAt(unsigned int arg0);
     itkLevelSetNodeD2 GetElement(unsigned int arg0) const;
     void SetElement(unsigned int arg0, itkLevelSetNodeD2 arg1);
     void InsertElement(unsigned int arg0, itkLevelSetNodeD2 arg1);
     bool IndexExists(unsigned int arg0) const;
     bool GetElementIfIndexExists(unsigned int arg0, itkLevelSetNodeD2 * arg1) const;
     void CreateIndex(unsigned int arg0);
     void DeleteIndex(unsigned int arg0);
     unsigned long Size() const;
     void Reserve(unsigned int arg0);
     void Squeeze();
     void Initialize();
     ~itkVectorContainerUILSND2();
   private:
   protected:
     itkVectorContainerUILSND2();
     itkVectorContainerUILSND2(size_t n);
     itkVectorContainerUILSND2(size_t n, itkLevelSetNodeD2 const & x);
     itkVectorContainerUILSND2(itkVectorContainerUILSND2 const & r);
 };


 class itkVectorContainerUILSND2_Pointer {
   public:
     itkVectorContainerUILSND2_Pointer();
     itkVectorContainerUILSND2_Pointer(itkVectorContainerUILSND2_Pointer const & p);
     itkVectorContainerUILSND2_Pointer(itkVectorContainerUILSND2 * p);
     ~itkVectorContainerUILSND2_Pointer();
     itkVectorContainerUILSND2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorContainerUILSND2 * GetPointer() const;
     bool operator<(itkVectorContainerUILSND2_Pointer const & r) const;
     bool operator>(itkVectorContainerUILSND2_Pointer const & r) const;
     bool operator<=(itkVectorContainerUILSND2_Pointer const & r) const;
     bool operator>=(itkVectorContainerUILSND2_Pointer const & r) const;
     itkVectorContainerUILSND2_Pointer & operator=(itkVectorContainerUILSND2_Pointer const & r);
     itkVectorContainerUILSND2_Pointer & operator=(itkVectorContainerUILSND2 * r);
     itkVectorContainerUILSND2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorContainerUILSND3 : public itkObject, public std::vector< itkLevelSetNodeD3 > {
   public:
     static itkVectorContainerUILSND3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     std::vector< itkLevelSetNodeD3 > & CastToSTLContainer();
     std::vector< itkLevelSetNodeD3 > const & CastToSTLConstContainer() const;
     itkLevelSetNodeD3 & ElementAt(unsigned int arg0);
     itkLevelSetNodeD3 const & ElementAt(unsigned int arg0) const;
     itkLevelSetNodeD3 & CreateElementAt(unsigned int arg0);
     itkLevelSetNodeD3 GetElement(unsigned int arg0) const;
     void SetElement(unsigned int arg0, itkLevelSetNodeD3 arg1);
     void InsertElement(unsigned int arg0, itkLevelSetNodeD3 arg1);
     bool IndexExists(unsigned int arg0) const;
     bool GetElementIfIndexExists(unsigned int arg0, itkLevelSetNodeD3 * arg1) const;
     void CreateIndex(unsigned int arg0);
     void DeleteIndex(unsigned int arg0);
     unsigned long Size() const;
     void Reserve(unsigned int arg0);
     void Squeeze();
     void Initialize();
     ~itkVectorContainerUILSND3();
   private:
   protected:
     itkVectorContainerUILSND3();
     itkVectorContainerUILSND3(size_t n);
     itkVectorContainerUILSND3(size_t n, itkLevelSetNodeD3 const & x);
     itkVectorContainerUILSND3(itkVectorContainerUILSND3 const & r);
 };


 class itkVectorContainerUILSND3_Pointer {
   public:
     itkVectorContainerUILSND3_Pointer();
     itkVectorContainerUILSND3_Pointer(itkVectorContainerUILSND3_Pointer const & p);
     itkVectorContainerUILSND3_Pointer(itkVectorContainerUILSND3 * p);
     ~itkVectorContainerUILSND3_Pointer();
     itkVectorContainerUILSND3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorContainerUILSND3 * GetPointer() const;
     bool operator<(itkVectorContainerUILSND3_Pointer const & r) const;
     bool operator>(itkVectorContainerUILSND3_Pointer const & r) const;
     bool operator<=(itkVectorContainerUILSND3_Pointer const & r) const;
     bool operator>=(itkVectorContainerUILSND3_Pointer const & r) const;
     itkVectorContainerUILSND3_Pointer & operator=(itkVectorContainerUILSND3_Pointer const & r);
     itkVectorContainerUILSND3_Pointer & operator=(itkVectorContainerUILSND3 * r);
     itkVectorContainerUILSND3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorContainerUILSNF2 : public itkObject, public std::vector< itkLevelSetNodeF2 > {
   public:
     static itkVectorContainerUILSNF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     std::vector< itkLevelSetNodeF2 > & CastToSTLContainer();
     std::vector< itkLevelSetNodeF2 > const & CastToSTLConstContainer() const;
     itkLevelSetNodeF2 & ElementAt(unsigned int arg0);
     itkLevelSetNodeF2 const & ElementAt(unsigned int arg0) const;
     itkLevelSetNodeF2 & CreateElementAt(unsigned int arg0);
     itkLevelSetNodeF2 GetElement(unsigned int arg0) const;
     void SetElement(unsigned int arg0, itkLevelSetNodeF2 arg1);
     void InsertElement(unsigned int arg0, itkLevelSetNodeF2 arg1);
     bool IndexExists(unsigned int arg0) const;
     bool GetElementIfIndexExists(unsigned int arg0, itkLevelSetNodeF2 * arg1) const;
     void CreateIndex(unsigned int arg0);
     void DeleteIndex(unsigned int arg0);
     unsigned long Size() const;
     void Reserve(unsigned int arg0);
     void Squeeze();
     void Initialize();
     ~itkVectorContainerUILSNF2();
   private:
   protected:
     itkVectorContainerUILSNF2();
     itkVectorContainerUILSNF2(size_t n);
     itkVectorContainerUILSNF2(size_t n, itkLevelSetNodeF2 const & x);
     itkVectorContainerUILSNF2(itkVectorContainerUILSNF2 const & r);
 };


 class itkVectorContainerUILSNF2_Pointer {
   public:
     itkVectorContainerUILSNF2_Pointer();
     itkVectorContainerUILSNF2_Pointer(itkVectorContainerUILSNF2_Pointer const & p);
     itkVectorContainerUILSNF2_Pointer(itkVectorContainerUILSNF2 * p);
     ~itkVectorContainerUILSNF2_Pointer();
     itkVectorContainerUILSNF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorContainerUILSNF2 * GetPointer() const;
     bool operator<(itkVectorContainerUILSNF2_Pointer const & r) const;
     bool operator>(itkVectorContainerUILSNF2_Pointer const & r) const;
     bool operator<=(itkVectorContainerUILSNF2_Pointer const & r) const;
     bool operator>=(itkVectorContainerUILSNF2_Pointer const & r) const;
     itkVectorContainerUILSNF2_Pointer & operator=(itkVectorContainerUILSNF2_Pointer const & r);
     itkVectorContainerUILSNF2_Pointer & operator=(itkVectorContainerUILSNF2 * r);
     itkVectorContainerUILSNF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorContainerUILSNF3 : public itkObject, public std::vector< itkLevelSetNodeF3 > {
   public:
     static itkVectorContainerUILSNF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     std::vector< itkLevelSetNodeF3 > & CastToSTLContainer();
     std::vector< itkLevelSetNodeF3 > const & CastToSTLConstContainer() const;
     itkLevelSetNodeF3 & ElementAt(unsigned int arg0);
     itkLevelSetNodeF3 const & ElementAt(unsigned int arg0) const;
     itkLevelSetNodeF3 & CreateElementAt(unsigned int arg0);
     itkLevelSetNodeF3 GetElement(unsigned int arg0) const;
     void SetElement(unsigned int arg0, itkLevelSetNodeF3 arg1);
     void InsertElement(unsigned int arg0, itkLevelSetNodeF3 arg1);
     bool IndexExists(unsigned int arg0) const;
     bool GetElementIfIndexExists(unsigned int arg0, itkLevelSetNodeF3 * arg1) const;
     void CreateIndex(unsigned int arg0);
     void DeleteIndex(unsigned int arg0);
     unsigned long Size() const;
     void Reserve(unsigned int arg0);
     void Squeeze();
     void Initialize();
     ~itkVectorContainerUILSNF3();
   private:
   protected:
     itkVectorContainerUILSNF3();
     itkVectorContainerUILSNF3(size_t n);
     itkVectorContainerUILSNF3(size_t n, itkLevelSetNodeF3 const & x);
     itkVectorContainerUILSNF3(itkVectorContainerUILSNF3 const & r);
 };


 class itkVectorContainerUILSNF3_Pointer {
   public:
     itkVectorContainerUILSNF3_Pointer();
     itkVectorContainerUILSNF3_Pointer(itkVectorContainerUILSNF3_Pointer const & p);
     itkVectorContainerUILSNF3_Pointer(itkVectorContainerUILSNF3 * p);
     ~itkVectorContainerUILSNF3_Pointer();
     itkVectorContainerUILSNF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorContainerUILSNF3 * GetPointer() const;
     bool operator<(itkVectorContainerUILSNF3_Pointer const & r) const;
     bool operator>(itkVectorContainerUILSNF3_Pointer const & r) const;
     bool operator<=(itkVectorContainerUILSNF3_Pointer const & r) const;
     bool operator>=(itkVectorContainerUILSNF3_Pointer const & r) const;
     itkVectorContainerUILSNF3_Pointer & operator=(itkVectorContainerUILSNF3_Pointer const & r);
     itkVectorContainerUILSNF3_Pointer & operator=(itkVectorContainerUILSNF3 * r);
     itkVectorContainerUILSNF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorContainerUILSNUC2 : public itkObject, public std::vector< itkLevelSetNodeUC2 > {
   public:
     static itkVectorContainerUILSNUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     std::vector< itkLevelSetNodeUC2 > & CastToSTLContainer();
     std::vector< itkLevelSetNodeUC2 > const & CastToSTLConstContainer() const;
     itkLevelSetNodeUC2 & ElementAt(unsigned int arg0);
     itkLevelSetNodeUC2 const & ElementAt(unsigned int arg0) const;
     itkLevelSetNodeUC2 & CreateElementAt(unsigned int arg0);
     itkLevelSetNodeUC2 GetElement(unsigned int arg0) const;
     void SetElement(unsigned int arg0, itkLevelSetNodeUC2 arg1);
     void InsertElement(unsigned int arg0, itkLevelSetNodeUC2 arg1);
     bool IndexExists(unsigned int arg0) const;
     bool GetElementIfIndexExists(unsigned int arg0, itkLevelSetNodeUC2 * arg1) const;
     void CreateIndex(unsigned int arg0);
     void DeleteIndex(unsigned int arg0);
     unsigned long Size() const;
     void Reserve(unsigned int arg0);
     void Squeeze();
     void Initialize();
     ~itkVectorContainerUILSNUC2();
   private:
   protected:
     itkVectorContainerUILSNUC2();
     itkVectorContainerUILSNUC2(size_t n);
     itkVectorContainerUILSNUC2(size_t n, itkLevelSetNodeUC2 const & x);
     itkVectorContainerUILSNUC2(itkVectorContainerUILSNUC2 const & r);
 };


 class itkVectorContainerUILSNUC2_Pointer {
   public:
     itkVectorContainerUILSNUC2_Pointer();
     itkVectorContainerUILSNUC2_Pointer(itkVectorContainerUILSNUC2_Pointer const & p);
     itkVectorContainerUILSNUC2_Pointer(itkVectorContainerUILSNUC2 * p);
     ~itkVectorContainerUILSNUC2_Pointer();
     itkVectorContainerUILSNUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorContainerUILSNUC2 * GetPointer() const;
     bool operator<(itkVectorContainerUILSNUC2_Pointer const & r) const;
     bool operator>(itkVectorContainerUILSNUC2_Pointer const & r) const;
     bool operator<=(itkVectorContainerUILSNUC2_Pointer const & r) const;
     bool operator>=(itkVectorContainerUILSNUC2_Pointer const & r) const;
     itkVectorContainerUILSNUC2_Pointer & operator=(itkVectorContainerUILSNUC2_Pointer const & r);
     itkVectorContainerUILSNUC2_Pointer & operator=(itkVectorContainerUILSNUC2 * r);
     itkVectorContainerUILSNUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorContainerUILSNUC3 : public itkObject, public std::vector< itkLevelSetNodeUC3 > {
   public:
     static itkVectorContainerUILSNUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     std::vector< itkLevelSetNodeUC3 > & CastToSTLContainer();
     std::vector< itkLevelSetNodeUC3 > const & CastToSTLConstContainer() const;
     itkLevelSetNodeUC3 & ElementAt(unsigned int arg0);
     itkLevelSetNodeUC3 const & ElementAt(unsigned int arg0) const;
     itkLevelSetNodeUC3 & CreateElementAt(unsigned int arg0);
     itkLevelSetNodeUC3 GetElement(unsigned int arg0) const;
     void SetElement(unsigned int arg0, itkLevelSetNodeUC3 arg1);
     void InsertElement(unsigned int arg0, itkLevelSetNodeUC3 arg1);
     bool IndexExists(unsigned int arg0) const;
     bool GetElementIfIndexExists(unsigned int arg0, itkLevelSetNodeUC3 * arg1) const;
     void CreateIndex(unsigned int arg0);
     void DeleteIndex(unsigned int arg0);
     unsigned long Size() const;
     void Reserve(unsigned int arg0);
     void Squeeze();
     void Initialize();
     ~itkVectorContainerUILSNUC3();
   private:
   protected:
     itkVectorContainerUILSNUC3();
     itkVectorContainerUILSNUC3(size_t n);
     itkVectorContainerUILSNUC3(size_t n, itkLevelSetNodeUC3 const & x);
     itkVectorContainerUILSNUC3(itkVectorContainerUILSNUC3 const & r);
 };


 class itkVectorContainerUILSNUC3_Pointer {
   public:
     itkVectorContainerUILSNUC3_Pointer();
     itkVectorContainerUILSNUC3_Pointer(itkVectorContainerUILSNUC3_Pointer const & p);
     itkVectorContainerUILSNUC3_Pointer(itkVectorContainerUILSNUC3 * p);
     ~itkVectorContainerUILSNUC3_Pointer();
     itkVectorContainerUILSNUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorContainerUILSNUC3 * GetPointer() const;
     bool operator<(itkVectorContainerUILSNUC3_Pointer const & r) const;
     bool operator>(itkVectorContainerUILSNUC3_Pointer const & r) const;
     bool operator<=(itkVectorContainerUILSNUC3_Pointer const & r) const;
     bool operator>=(itkVectorContainerUILSNUC3_Pointer const & r) const;
     itkVectorContainerUILSNUC3_Pointer & operator=(itkVectorContainerUILSNUC3_Pointer const & r);
     itkVectorContainerUILSNUC3_Pointer & operator=(itkVectorContainerUILSNUC3 * r);
     itkVectorContainerUILSNUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorContainerUILSNUL2 : public itkObject, public std::vector< itkLevelSetNodeUL2 > {
   public:
     static itkVectorContainerUILSNUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     std::vector< itkLevelSetNodeUL2 > & CastToSTLContainer();
     std::vector< itkLevelSetNodeUL2 > const & CastToSTLConstContainer() const;
     itkLevelSetNodeUL2 & ElementAt(unsigned int arg0);
     itkLevelSetNodeUL2 const & ElementAt(unsigned int arg0) const;
     itkLevelSetNodeUL2 & CreateElementAt(unsigned int arg0);
     itkLevelSetNodeUL2 GetElement(unsigned int arg0) const;
     void SetElement(unsigned int arg0, itkLevelSetNodeUL2 arg1);
     void InsertElement(unsigned int arg0, itkLevelSetNodeUL2 arg1);
     bool IndexExists(unsigned int arg0) const;
     bool GetElementIfIndexExists(unsigned int arg0, itkLevelSetNodeUL2 * arg1) const;
     void CreateIndex(unsigned int arg0);
     void DeleteIndex(unsigned int arg0);
     unsigned long Size() const;
     void Reserve(unsigned int arg0);
     void Squeeze();
     void Initialize();
     ~itkVectorContainerUILSNUL2();
   private:
   protected:
     itkVectorContainerUILSNUL2();
     itkVectorContainerUILSNUL2(size_t n);
     itkVectorContainerUILSNUL2(size_t n, itkLevelSetNodeUL2 const & x);
     itkVectorContainerUILSNUL2(itkVectorContainerUILSNUL2 const & r);
 };


 class itkVectorContainerUILSNUL2_Pointer {
   public:
     itkVectorContainerUILSNUL2_Pointer();
     itkVectorContainerUILSNUL2_Pointer(itkVectorContainerUILSNUL2_Pointer const & p);
     itkVectorContainerUILSNUL2_Pointer(itkVectorContainerUILSNUL2 * p);
     ~itkVectorContainerUILSNUL2_Pointer();
     itkVectorContainerUILSNUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorContainerUILSNUL2 * GetPointer() const;
     bool operator<(itkVectorContainerUILSNUL2_Pointer const & r) const;
     bool operator>(itkVectorContainerUILSNUL2_Pointer const & r) const;
     bool operator<=(itkVectorContainerUILSNUL2_Pointer const & r) const;
     bool operator>=(itkVectorContainerUILSNUL2_Pointer const & r) const;
     itkVectorContainerUILSNUL2_Pointer & operator=(itkVectorContainerUILSNUL2_Pointer const & r);
     itkVectorContainerUILSNUL2_Pointer & operator=(itkVectorContainerUILSNUL2 * r);
     itkVectorContainerUILSNUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorContainerUILSNUL3 : public itkObject, public std::vector< itkLevelSetNodeUL3 > {
   public:
     static itkVectorContainerUILSNUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     std::vector< itkLevelSetNodeUL3 > & CastToSTLContainer();
     std::vector< itkLevelSetNodeUL3 > const & CastToSTLConstContainer() const;
     itkLevelSetNodeUL3 & ElementAt(unsigned int arg0);
     itkLevelSetNodeUL3 const & ElementAt(unsigned int arg0) const;
     itkLevelSetNodeUL3 & CreateElementAt(unsigned int arg0);
     itkLevelSetNodeUL3 GetElement(unsigned int arg0) const;
     void SetElement(unsigned int arg0, itkLevelSetNodeUL3 arg1);
     void InsertElement(unsigned int arg0, itkLevelSetNodeUL3 arg1);
     bool IndexExists(unsigned int arg0) const;
     bool GetElementIfIndexExists(unsigned int arg0, itkLevelSetNodeUL3 * arg1) const;
     void CreateIndex(unsigned int arg0);
     void DeleteIndex(unsigned int arg0);
     unsigned long Size() const;
     void Reserve(unsigned int arg0);
     void Squeeze();
     void Initialize();
     ~itkVectorContainerUILSNUL3();
   private:
   protected:
     itkVectorContainerUILSNUL3();
     itkVectorContainerUILSNUL3(size_t n);
     itkVectorContainerUILSNUL3(size_t n, itkLevelSetNodeUL3 const & x);
     itkVectorContainerUILSNUL3(itkVectorContainerUILSNUL3 const & r);
 };


 class itkVectorContainerUILSNUL3_Pointer {
   public:
     itkVectorContainerUILSNUL3_Pointer();
     itkVectorContainerUILSNUL3_Pointer(itkVectorContainerUILSNUL3_Pointer const & p);
     itkVectorContainerUILSNUL3_Pointer(itkVectorContainerUILSNUL3 * p);
     ~itkVectorContainerUILSNUL3_Pointer();
     itkVectorContainerUILSNUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorContainerUILSNUL3 * GetPointer() const;
     bool operator<(itkVectorContainerUILSNUL3_Pointer const & r) const;
     bool operator>(itkVectorContainerUILSNUL3_Pointer const & r) const;
     bool operator<=(itkVectorContainerUILSNUL3_Pointer const & r) const;
     bool operator>=(itkVectorContainerUILSNUL3_Pointer const & r) const;
     itkVectorContainerUILSNUL3_Pointer & operator=(itkVectorContainerUILSNUL3_Pointer const & r);
     itkVectorContainerUILSNUL3_Pointer & operator=(itkVectorContainerUILSNUL3 * r);
     itkVectorContainerUILSNUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorContainerUILSNUS2 : public itkObject, public std::vector< itkLevelSetNodeUS2 > {
   public:
     static itkVectorContainerUILSNUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     std::vector< itkLevelSetNodeUS2 > & CastToSTLContainer();
     std::vector< itkLevelSetNodeUS2 > const & CastToSTLConstContainer() const;
     itkLevelSetNodeUS2 & ElementAt(unsigned int arg0);
     itkLevelSetNodeUS2 const & ElementAt(unsigned int arg0) const;
     itkLevelSetNodeUS2 & CreateElementAt(unsigned int arg0);
     itkLevelSetNodeUS2 GetElement(unsigned int arg0) const;
     void SetElement(unsigned int arg0, itkLevelSetNodeUS2 arg1);
     void InsertElement(unsigned int arg0, itkLevelSetNodeUS2 arg1);
     bool IndexExists(unsigned int arg0) const;
     bool GetElementIfIndexExists(unsigned int arg0, itkLevelSetNodeUS2 * arg1) const;
     void CreateIndex(unsigned int arg0);
     void DeleteIndex(unsigned int arg0);
     unsigned long Size() const;
     void Reserve(unsigned int arg0);
     void Squeeze();
     void Initialize();
     ~itkVectorContainerUILSNUS2();
   private:
   protected:
     itkVectorContainerUILSNUS2();
     itkVectorContainerUILSNUS2(size_t n);
     itkVectorContainerUILSNUS2(size_t n, itkLevelSetNodeUS2 const & x);
     itkVectorContainerUILSNUS2(itkVectorContainerUILSNUS2 const & r);
 };


 class itkVectorContainerUILSNUS2_Pointer {
   public:
     itkVectorContainerUILSNUS2_Pointer();
     itkVectorContainerUILSNUS2_Pointer(itkVectorContainerUILSNUS2_Pointer const & p);
     itkVectorContainerUILSNUS2_Pointer(itkVectorContainerUILSNUS2 * p);
     ~itkVectorContainerUILSNUS2_Pointer();
     itkVectorContainerUILSNUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorContainerUILSNUS2 * GetPointer() const;
     bool operator<(itkVectorContainerUILSNUS2_Pointer const & r) const;
     bool operator>(itkVectorContainerUILSNUS2_Pointer const & r) const;
     bool operator<=(itkVectorContainerUILSNUS2_Pointer const & r) const;
     bool operator>=(itkVectorContainerUILSNUS2_Pointer const & r) const;
     itkVectorContainerUILSNUS2_Pointer & operator=(itkVectorContainerUILSNUS2_Pointer const & r);
     itkVectorContainerUILSNUS2_Pointer & operator=(itkVectorContainerUILSNUS2 * r);
     itkVectorContainerUILSNUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorContainerUILSNUS3 : public itkObject, public std::vector< itkLevelSetNodeUS3 > {
   public:
     static itkVectorContainerUILSNUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     std::vector< itkLevelSetNodeUS3 > & CastToSTLContainer();
     std::vector< itkLevelSetNodeUS3 > const & CastToSTLConstContainer() const;
     itkLevelSetNodeUS3 & ElementAt(unsigned int arg0);
     itkLevelSetNodeUS3 const & ElementAt(unsigned int arg0) const;
     itkLevelSetNodeUS3 & CreateElementAt(unsigned int arg0);
     itkLevelSetNodeUS3 GetElement(unsigned int arg0) const;
     void SetElement(unsigned int arg0, itkLevelSetNodeUS3 arg1);
     void InsertElement(unsigned int arg0, itkLevelSetNodeUS3 arg1);
     bool IndexExists(unsigned int arg0) const;
     bool GetElementIfIndexExists(unsigned int arg0, itkLevelSetNodeUS3 * arg1) const;
     void CreateIndex(unsigned int arg0);
     void DeleteIndex(unsigned int arg0);
     unsigned long Size() const;
     void Reserve(unsigned int arg0);
     void Squeeze();
     void Initialize();
     ~itkVectorContainerUILSNUS3();
   private:
   protected:
     itkVectorContainerUILSNUS3();
     itkVectorContainerUILSNUS3(size_t n);
     itkVectorContainerUILSNUS3(size_t n, itkLevelSetNodeUS3 const & x);
     itkVectorContainerUILSNUS3(itkVectorContainerUILSNUS3 const & r);
 };


 class itkVectorContainerUILSNUS3_Pointer {
   public:
     itkVectorContainerUILSNUS3_Pointer();
     itkVectorContainerUILSNUS3_Pointer(itkVectorContainerUILSNUS3_Pointer const & p);
     itkVectorContainerUILSNUS3_Pointer(itkVectorContainerUILSNUS3 * p);
     ~itkVectorContainerUILSNUS3_Pointer();
     itkVectorContainerUILSNUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorContainerUILSNUS3 * GetPointer() const;
     bool operator<(itkVectorContainerUILSNUS3_Pointer const & r) const;
     bool operator>(itkVectorContainerUILSNUS3_Pointer const & r) const;
     bool operator<=(itkVectorContainerUILSNUS3_Pointer const & r) const;
     bool operator>=(itkVectorContainerUILSNUS3_Pointer const & r) const;
     itkVectorContainerUILSNUS3_Pointer & operator=(itkVectorContainerUILSNUS3_Pointer const & r);
     itkVectorContainerUILSNUS3_Pointer & operator=(itkVectorContainerUILSNUS3 * r);
     itkVectorContainerUILSNUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorContainerUIVUC1 : public itkObject, public std::vector< itkVectorUC1 > {
   public:
     static itkVectorContainerUIVUC1_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     std::vector< itkVectorUC1 > & CastToSTLContainer();
     std::vector< itkVectorUC1 > const & CastToSTLConstContainer() const;
     itkVectorUC1 & ElementAt(unsigned int arg0);
     itkVectorUC1 const & ElementAt(unsigned int arg0) const;
     itkVectorUC1 & CreateElementAt(unsigned int arg0);
     itkVectorUC1 GetElement(unsigned int arg0) const;
     void SetElement(unsigned int arg0, itkVectorUC1 arg1);
     void InsertElement(unsigned int arg0, itkVectorUC1 arg1);
     bool IndexExists(unsigned int arg0) const;
     bool GetElementIfIndexExists(unsigned int arg0, itkVectorUC1 * arg1) const;
     void CreateIndex(unsigned int arg0);
     void DeleteIndex(unsigned int arg0);
     unsigned long Size() const;
     void Reserve(unsigned int arg0);
     void Squeeze();
     void Initialize();
     ~itkVectorContainerUIVUC1();
   private:
   protected:
     itkVectorContainerUIVUC1();
     itkVectorContainerUIVUC1(size_t n);
     itkVectorContainerUIVUC1(size_t n, itkVectorUC1 const & x);
     itkVectorContainerUIVUC1(itkVectorContainerUIVUC1 const & r);
 };


 class itkVectorContainerUIVUC1_Pointer {
   public:
     itkVectorContainerUIVUC1_Pointer();
     itkVectorContainerUIVUC1_Pointer(itkVectorContainerUIVUC1_Pointer const & p);
     itkVectorContainerUIVUC1_Pointer(itkVectorContainerUIVUC1 * p);
     ~itkVectorContainerUIVUC1_Pointer();
     itkVectorContainerUIVUC1 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorContainerUIVUC1 * GetPointer() const;
     bool operator<(itkVectorContainerUIVUC1_Pointer const & r) const;
     bool operator>(itkVectorContainerUIVUC1_Pointer const & r) const;
     bool operator<=(itkVectorContainerUIVUC1_Pointer const & r) const;
     bool operator>=(itkVectorContainerUIVUC1_Pointer const & r) const;
     itkVectorContainerUIVUC1_Pointer & operator=(itkVectorContainerUIVUC1_Pointer const & r);
     itkVectorContainerUIVUC1_Pointer & operator=(itkVectorContainerUIVUC1 * r);
     itkVectorContainerUIVUC1 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorContainerULD : public itkObject, public std::vector< double > {
   public:
     static itkVectorContainerULD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     std::vector< double > & CastToSTLContainer();
     std::vector< double > const & CastToSTLConstContainer() const;
     double & ElementAt(unsigned long arg0);
     double const & ElementAt(unsigned long arg0) const;
     double & CreateElementAt(unsigned long arg0);
     double GetElement(unsigned long arg0) const;
     void SetElement(unsigned long arg0, double arg1);
     void InsertElement(unsigned long arg0, double arg1);
     bool IndexExists(unsigned long arg0) const;
     bool GetElementIfIndexExists(unsigned long arg0, double * arg1) const;
     void CreateIndex(unsigned long arg0);
     void DeleteIndex(unsigned long arg0);
     unsigned long Size() const;
     void Reserve(unsigned long arg0);
     void Squeeze();
     void Initialize();
     ~itkVectorContainerULD();
   private:
   protected:
     itkVectorContainerULD();
     itkVectorContainerULD(size_t n);
     itkVectorContainerULD(size_t n, double const & x);
     itkVectorContainerULD(itkVectorContainerULD const & r);
 };


 class itkVectorContainerULD_Pointer {
   public:
     itkVectorContainerULD_Pointer();
     itkVectorContainerULD_Pointer(itkVectorContainerULD_Pointer const & p);
     itkVectorContainerULD_Pointer(itkVectorContainerULD * p);
     ~itkVectorContainerULD_Pointer();
     itkVectorContainerULD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorContainerULD * GetPointer() const;
     bool operator<(itkVectorContainerULD_Pointer const & r) const;
     bool operator>(itkVectorContainerULD_Pointer const & r) const;
     bool operator<=(itkVectorContainerULD_Pointer const & r) const;
     bool operator>=(itkVectorContainerULD_Pointer const & r) const;
     itkVectorContainerULD_Pointer & operator=(itkVectorContainerULD_Pointer const & r);
     itkVectorContainerULD_Pointer & operator=(itkVectorContainerULD * r);
     itkVectorContainerULD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorContainerULPD2 : public itkObject, public std::vector< itkPointD2 > {
   public:
     static itkVectorContainerULPD2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     std::vector< itkPointD2 > & CastToSTLContainer();
     std::vector< itkPointD2 > const & CastToSTLConstContainer() const;
     itkPointD2 & ElementAt(unsigned long arg0);
     itkPointD2 const & ElementAt(unsigned long arg0) const;
     itkPointD2 & CreateElementAt(unsigned long arg0);
     itkPointD2 GetElement(unsigned long arg0) const;
     void SetElement(unsigned long arg0, itkPointD2 arg1);
     void InsertElement(unsigned long arg0, itkPointD2 arg1);
     bool IndexExists(unsigned long arg0) const;
     bool GetElementIfIndexExists(unsigned long arg0, itkPointD2 * arg1) const;
     void CreateIndex(unsigned long arg0);
     void DeleteIndex(unsigned long arg0);
     unsigned long Size() const;
     void Reserve(unsigned long arg0);
     void Squeeze();
     void Initialize();
     ~itkVectorContainerULPD2();
   private:
   protected:
     itkVectorContainerULPD2();
     itkVectorContainerULPD2(size_t n);
     itkVectorContainerULPD2(size_t n, itkPointD2 const & x);
     itkVectorContainerULPD2(itkVectorContainerULPD2 const & r);
 };


 class itkVectorContainerULPD2_Pointer {
   public:
     itkVectorContainerULPD2_Pointer();
     itkVectorContainerULPD2_Pointer(itkVectorContainerULPD2_Pointer const & p);
     itkVectorContainerULPD2_Pointer(itkVectorContainerULPD2 * p);
     ~itkVectorContainerULPD2_Pointer();
     itkVectorContainerULPD2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorContainerULPD2 * GetPointer() const;
     bool operator<(itkVectorContainerULPD2_Pointer const & r) const;
     bool operator>(itkVectorContainerULPD2_Pointer const & r) const;
     bool operator<=(itkVectorContainerULPD2_Pointer const & r) const;
     bool operator>=(itkVectorContainerULPD2_Pointer const & r) const;
     itkVectorContainerULPD2_Pointer & operator=(itkVectorContainerULPD2_Pointer const & r);
     itkVectorContainerULPD2_Pointer & operator=(itkVectorContainerULPD2 * r);
     itkVectorContainerULPD2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorContainerULPD3 : public itkObject, public std::vector< itkPointD3 > {
   public:
     static itkVectorContainerULPD3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     std::vector< itkPointD3 > & CastToSTLContainer();
     std::vector< itkPointD3 > const & CastToSTLConstContainer() const;
     itkPointD3 & ElementAt(unsigned long arg0);
     itkPointD3 const & ElementAt(unsigned long arg0) const;
     itkPointD3 & CreateElementAt(unsigned long arg0);
     itkPointD3 GetElement(unsigned long arg0) const;
     void SetElement(unsigned long arg0, itkPointD3 arg1);
     void InsertElement(unsigned long arg0, itkPointD3 arg1);
     bool IndexExists(unsigned long arg0) const;
     bool GetElementIfIndexExists(unsigned long arg0, itkPointD3 * arg1) const;
     void CreateIndex(unsigned long arg0);
     void DeleteIndex(unsigned long arg0);
     unsigned long Size() const;
     void Reserve(unsigned long arg0);
     void Squeeze();
     void Initialize();
     ~itkVectorContainerULPD3();
   private:
   protected:
     itkVectorContainerULPD3();
     itkVectorContainerULPD3(size_t n);
     itkVectorContainerULPD3(size_t n, itkPointD3 const & x);
     itkVectorContainerULPD3(itkVectorContainerULPD3 const & r);
 };


 class itkVectorContainerULPD3_Pointer {
   public:
     itkVectorContainerULPD3_Pointer();
     itkVectorContainerULPD3_Pointer(itkVectorContainerULPD3_Pointer const & p);
     itkVectorContainerULPD3_Pointer(itkVectorContainerULPD3 * p);
     ~itkVectorContainerULPD3_Pointer();
     itkVectorContainerULPD3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorContainerULPD3 * GetPointer() const;
     bool operator<(itkVectorContainerULPD3_Pointer const & r) const;
     bool operator>(itkVectorContainerULPD3_Pointer const & r) const;
     bool operator<=(itkVectorContainerULPD3_Pointer const & r) const;
     bool operator>=(itkVectorContainerULPD3_Pointer const & r) const;
     itkVectorContainerULPD3_Pointer & operator=(itkVectorContainerULPD3_Pointer const & r);
     itkVectorContainerULPD3_Pointer & operator=(itkVectorContainerULPD3 * r);
     itkVectorContainerULPD3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorContainerULSUL : public itkObject, public std::vector< std::set< unsigned long, std::less< unsigned long > > > {
   public:
     static itkVectorContainerULSUL_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     std::vector< std::set< unsigned long, std::less< unsigned long > > > & CastToSTLContainer();
     std::vector< std::set< unsigned long, std::less< unsigned long > > > const & CastToSTLConstContainer() const;
     std::set< unsigned long, std::less< unsigned long > > & ElementAt(unsigned long arg0);
     std::set< unsigned long, std::less< unsigned long > > const & ElementAt(unsigned long arg0) const;
     std::set< unsigned long, std::less< unsigned long > > & CreateElementAt(unsigned long arg0);
     std::set< unsigned long, std::less< unsigned long > > GetElement(unsigned long arg0) const;
     void SetElement(unsigned long arg0, std::set< unsigned long, std::less< unsigned long > > arg1);
     void InsertElement(unsigned long arg0, std::set< unsigned long, std::less< unsigned long > > arg1);
     bool IndexExists(unsigned long arg0) const;
     bool GetElementIfIndexExists(unsigned long arg0, std::set< unsigned long, std::less< unsigned long > > * arg1) const;
     void CreateIndex(unsigned long arg0);
     void DeleteIndex(unsigned long arg0);
     unsigned long Size() const;
     void Reserve(unsigned long arg0);
     void Squeeze();
     void Initialize();
     ~itkVectorContainerULSUL();
   private:
   protected:
     itkVectorContainerULSUL();
     itkVectorContainerULSUL(size_t n);
     itkVectorContainerULSUL(size_t n, std::set< unsigned long, std::less< unsigned long > > const & x);
     itkVectorContainerULSUL(itkVectorContainerULSUL const & r);
 };


 class itkVectorContainerULSUL_Pointer {
   public:
     itkVectorContainerULSUL_Pointer();
     itkVectorContainerULSUL_Pointer(itkVectorContainerULSUL_Pointer const & p);
     itkVectorContainerULSUL_Pointer(itkVectorContainerULSUL * p);
     ~itkVectorContainerULSUL_Pointer();
     itkVectorContainerULSUL * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorContainerULSUL * GetPointer() const;
     bool operator<(itkVectorContainerULSUL_Pointer const & r) const;
     bool operator>(itkVectorContainerULSUL_Pointer const & r) const;
     bool operator<=(itkVectorContainerULSUL_Pointer const & r) const;
     bool operator>=(itkVectorContainerULSUL_Pointer const & r) const;
     itkVectorContainerULSUL_Pointer & operator=(itkVectorContainerULSUL_Pointer const & r);
     itkVectorContainerULSUL_Pointer & operator=(itkVectorContainerULSUL * r);
     itkVectorContainerULSUL * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorContainerULVD2 : public itkObject, public std::vector< itkVectorD2 > {
   public:
     static itkVectorContainerULVD2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     std::vector< itkVectorD2 > & CastToSTLContainer();
     std::vector< itkVectorD2 > const & CastToSTLConstContainer() const;
     itkVectorD2 & ElementAt(unsigned long arg0);
     itkVectorD2 const & ElementAt(unsigned long arg0) const;
     itkVectorD2 & CreateElementAt(unsigned long arg0);
     itkVectorD2 GetElement(unsigned long arg0) const;
     void SetElement(unsigned long arg0, itkVectorD2 arg1);
     void InsertElement(unsigned long arg0, itkVectorD2 arg1);
     bool IndexExists(unsigned long arg0) const;
     bool GetElementIfIndexExists(unsigned long arg0, itkVectorD2 * arg1) const;
     void CreateIndex(unsigned long arg0);
     void DeleteIndex(unsigned long arg0);
     unsigned long Size() const;
     void Reserve(unsigned long arg0);
     void Squeeze();
     void Initialize();
     ~itkVectorContainerULVD2();
   private:
   protected:
     itkVectorContainerULVD2();
     itkVectorContainerULVD2(size_t n);
     itkVectorContainerULVD2(size_t n, itkVectorD2 const & x);
     itkVectorContainerULVD2(itkVectorContainerULVD2 const & r);
 };


 class itkVectorContainerULVD2_Pointer {
   public:
     itkVectorContainerULVD2_Pointer();
     itkVectorContainerULVD2_Pointer(itkVectorContainerULVD2_Pointer const & p);
     itkVectorContainerULVD2_Pointer(itkVectorContainerULVD2 * p);
     ~itkVectorContainerULVD2_Pointer();
     itkVectorContainerULVD2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorContainerULVD2 * GetPointer() const;
     bool operator<(itkVectorContainerULVD2_Pointer const & r) const;
     bool operator>(itkVectorContainerULVD2_Pointer const & r) const;
     bool operator<=(itkVectorContainerULVD2_Pointer const & r) const;
     bool operator>=(itkVectorContainerULVD2_Pointer const & r) const;
     itkVectorContainerULVD2_Pointer & operator=(itkVectorContainerULVD2_Pointer const & r);
     itkVectorContainerULVD2_Pointer & operator=(itkVectorContainerULVD2 * r);
     itkVectorContainerULVD2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorContainerULVD3 : public itkObject, public std::vector< itkVectorD3 > {
   public:
     static itkVectorContainerULVD3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     std::vector< itkVectorD3 > & CastToSTLContainer();
     std::vector< itkVectorD3 > const & CastToSTLConstContainer() const;
     itkVectorD3 & ElementAt(unsigned long arg0);
     itkVectorD3 const & ElementAt(unsigned long arg0) const;
     itkVectorD3 & CreateElementAt(unsigned long arg0);
     itkVectorD3 GetElement(unsigned long arg0) const;
     void SetElement(unsigned long arg0, itkVectorD3 arg1);
     void InsertElement(unsigned long arg0, itkVectorD3 arg1);
     bool IndexExists(unsigned long arg0) const;
     bool GetElementIfIndexExists(unsigned long arg0, itkVectorD3 * arg1) const;
     void CreateIndex(unsigned long arg0);
     void DeleteIndex(unsigned long arg0);
     unsigned long Size() const;
     void Reserve(unsigned long arg0);
     void Squeeze();
     void Initialize();
     ~itkVectorContainerULVD3();
   private:
   protected:
     itkVectorContainerULVD3();
     itkVectorContainerULVD3(size_t n);
     itkVectorContainerULVD3(size_t n, itkVectorD3 const & x);
     itkVectorContainerULVD3(itkVectorContainerULVD3 const & r);
 };


 class itkVectorContainerULVD3_Pointer {
   public:
     itkVectorContainerULVD3_Pointer();
     itkVectorContainerULVD3_Pointer(itkVectorContainerULVD3_Pointer const & p);
     itkVectorContainerULVD3_Pointer(itkVectorContainerULVD3 * p);
     ~itkVectorContainerULVD3_Pointer();
     itkVectorContainerULVD3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorContainerULVD3 * GetPointer() const;
     bool operator<(itkVectorContainerULVD3_Pointer const & r) const;
     bool operator>(itkVectorContainerULVD3_Pointer const & r) const;
     bool operator<=(itkVectorContainerULVD3_Pointer const & r) const;
     bool operator>=(itkVectorContainerULVD3_Pointer const & r) const;
     itkVectorContainerULVD3_Pointer & operator=(itkVectorContainerULVD3_Pointer const & r);
     itkVectorContainerULVD3_Pointer & operator=(itkVectorContainerULVD3 * r);
     itkVectorContainerULVD3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


