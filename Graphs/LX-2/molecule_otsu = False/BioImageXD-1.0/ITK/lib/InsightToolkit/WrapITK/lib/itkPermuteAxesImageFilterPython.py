# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkPermuteAxesImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkPermuteAxesImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkPermuteAxesImageFilterPython
            return _itkPermuteAxesImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkPermuteAxesImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkPermuteAxesImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkPermuteAxesImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import itkEventObjectsPython
import pyBasePython
import itkFixedArrayPython
import ITKRegionsPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkImageToImageFilterAPython
import itkImagePython
import itkCovariantVectorPython
import vnl_vectorPython
import vcl_complexPython
import vnl_matrixPython
import itkVectorPython
import vnl_vector_refPython
import itkPointPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkRGBPixelPython
import itkImageSourcePython
import itkVectorImagePython
import itkVariableLengthVectorPython
def itkPermuteAxesImageFilterID3_New():
  return itkPermuteAxesImageFilterID3.New()

def itkPermuteAxesImageFilterID2_New():
  return itkPermuteAxesImageFilterID2.New()

def itkPermuteAxesImageFilterIF3_New():
  return itkPermuteAxesImageFilterIF3.New()

def itkPermuteAxesImageFilterIF2_New():
  return itkPermuteAxesImageFilterIF2.New()

def itkPermuteAxesImageFilterIUS3_New():
  return itkPermuteAxesImageFilterIUS3.New()

def itkPermuteAxesImageFilterIUS2_New():
  return itkPermuteAxesImageFilterIUS2.New()

def itkPermuteAxesImageFilterIUL3_New():
  return itkPermuteAxesImageFilterIUL3.New()

def itkPermuteAxesImageFilterIUL2_New():
  return itkPermuteAxesImageFilterIUL2.New()

def itkPermuteAxesImageFilterIUC3_New():
  return itkPermuteAxesImageFilterIUC3.New()

def itkPermuteAxesImageFilterIUC2_New():
  return itkPermuteAxesImageFilterIUC2.New()

class itkPermuteAxesImageFilterID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """Proxy of C++ itkPermuteAxesImageFilterID2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetOrder(self, *args):
        """SetOrder(self, itkFixedArrayUI2 order)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_SetOrder(self, *args)

    def GetOrder(self):
        """GetOrder(self) -> itkFixedArrayUI2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_GetOrder(self)

    def GetInverseOrder(self):
        """GetInverseOrder(self) -> itkFixedArrayUI2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_GetInverseOrder(self)

    def GenerateOutputInformation(self):
        """GenerateOutputInformation(self)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        """GenerateInputRequestedRegion(self)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterID2
    def cast(*args):
        """cast(itkLightObject obj) -> itkPermuteAxesImageFilterID2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkPermuteAxesImageFilterID2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterID2
        
        Create a new object of the class itkPermuteAxesImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkPermuteAxesImageFilterID2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkPermuteAxesImageFilterID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPermuteAxesImageFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPermuteAxesImageFilterID2.SetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_SetOrder,None,itkPermuteAxesImageFilterID2)
itkPermuteAxesImageFilterID2.GetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_GetOrder,None,itkPermuteAxesImageFilterID2)
itkPermuteAxesImageFilterID2.GetInverseOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_GetInverseOrder,None,itkPermuteAxesImageFilterID2)
itkPermuteAxesImageFilterID2.GenerateOutputInformation = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_GenerateOutputInformation,None,itkPermuteAxesImageFilterID2)
itkPermuteAxesImageFilterID2.GenerateInputRequestedRegion = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_GenerateInputRequestedRegion,None,itkPermuteAxesImageFilterID2)
itkPermuteAxesImageFilterID2.GetPointer = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_GetPointer,None,itkPermuteAxesImageFilterID2)
itkPermuteAxesImageFilterID2_swigregister = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_swigregister
itkPermuteAxesImageFilterID2_swigregister(itkPermuteAxesImageFilterID2)

def itkPermuteAxesImageFilterID2___New_orig__():
  """itkPermuteAxesImageFilterID2___New_orig__()"""
  return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2___New_orig__()

def itkPermuteAxesImageFilterID2_cast(*args):
  """itkPermuteAxesImageFilterID2_cast(itkLightObject obj) -> itkPermuteAxesImageFilterID2"""
  return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID2_cast(*args)

class itkPermuteAxesImageFilterID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """Proxy of C++ itkPermuteAxesImageFilterID3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetOrder(self, *args):
        """SetOrder(self, itkFixedArrayUI3 order)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_SetOrder(self, *args)

    def GetOrder(self):
        """GetOrder(self) -> itkFixedArrayUI3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_GetOrder(self)

    def GetInverseOrder(self):
        """GetInverseOrder(self) -> itkFixedArrayUI3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_GetInverseOrder(self)

    def GenerateOutputInformation(self):
        """GenerateOutputInformation(self)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        """GenerateInputRequestedRegion(self)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterID3
    def cast(*args):
        """cast(itkLightObject obj) -> itkPermuteAxesImageFilterID3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkPermuteAxesImageFilterID3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterID3
        
        Create a new object of the class itkPermuteAxesImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkPermuteAxesImageFilterID3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkPermuteAxesImageFilterID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPermuteAxesImageFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPermuteAxesImageFilterID3.SetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_SetOrder,None,itkPermuteAxesImageFilterID3)
itkPermuteAxesImageFilterID3.GetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_GetOrder,None,itkPermuteAxesImageFilterID3)
itkPermuteAxesImageFilterID3.GetInverseOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_GetInverseOrder,None,itkPermuteAxesImageFilterID3)
itkPermuteAxesImageFilterID3.GenerateOutputInformation = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_GenerateOutputInformation,None,itkPermuteAxesImageFilterID3)
itkPermuteAxesImageFilterID3.GenerateInputRequestedRegion = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_GenerateInputRequestedRegion,None,itkPermuteAxesImageFilterID3)
itkPermuteAxesImageFilterID3.GetPointer = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_GetPointer,None,itkPermuteAxesImageFilterID3)
itkPermuteAxesImageFilterID3_swigregister = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_swigregister
itkPermuteAxesImageFilterID3_swigregister(itkPermuteAxesImageFilterID3)

def itkPermuteAxesImageFilterID3___New_orig__():
  """itkPermuteAxesImageFilterID3___New_orig__()"""
  return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3___New_orig__()

def itkPermuteAxesImageFilterID3_cast(*args):
  """itkPermuteAxesImageFilterID3_cast(itkLightObject obj) -> itkPermuteAxesImageFilterID3"""
  return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterID3_cast(*args)

class itkPermuteAxesImageFilterIF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """Proxy of C++ itkPermuteAxesImageFilterIF2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetOrder(self, *args):
        """SetOrder(self, itkFixedArrayUI2 order)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_SetOrder(self, *args)

    def GetOrder(self):
        """GetOrder(self) -> itkFixedArrayUI2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_GetOrder(self)

    def GetInverseOrder(self):
        """GetInverseOrder(self) -> itkFixedArrayUI2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_GetInverseOrder(self)

    def GenerateOutputInformation(self):
        """GenerateOutputInformation(self)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        """GenerateInputRequestedRegion(self)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterIF2
    def cast(*args):
        """cast(itkLightObject obj) -> itkPermuteAxesImageFilterIF2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkPermuteAxesImageFilterIF2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterIF2
        
        Create a new object of the class itkPermuteAxesImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkPermuteAxesImageFilterIF2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkPermuteAxesImageFilterIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPermuteAxesImageFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPermuteAxesImageFilterIF2.SetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_SetOrder,None,itkPermuteAxesImageFilterIF2)
itkPermuteAxesImageFilterIF2.GetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_GetOrder,None,itkPermuteAxesImageFilterIF2)
itkPermuteAxesImageFilterIF2.GetInverseOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_GetInverseOrder,None,itkPermuteAxesImageFilterIF2)
itkPermuteAxesImageFilterIF2.GenerateOutputInformation = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_GenerateOutputInformation,None,itkPermuteAxesImageFilterIF2)
itkPermuteAxesImageFilterIF2.GenerateInputRequestedRegion = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_GenerateInputRequestedRegion,None,itkPermuteAxesImageFilterIF2)
itkPermuteAxesImageFilterIF2.GetPointer = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_GetPointer,None,itkPermuteAxesImageFilterIF2)
itkPermuteAxesImageFilterIF2_swigregister = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_swigregister
itkPermuteAxesImageFilterIF2_swigregister(itkPermuteAxesImageFilterIF2)

def itkPermuteAxesImageFilterIF2___New_orig__():
  """itkPermuteAxesImageFilterIF2___New_orig__()"""
  return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2___New_orig__()

def itkPermuteAxesImageFilterIF2_cast(*args):
  """itkPermuteAxesImageFilterIF2_cast(itkLightObject obj) -> itkPermuteAxesImageFilterIF2"""
  return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF2_cast(*args)

class itkPermuteAxesImageFilterIF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """Proxy of C++ itkPermuteAxesImageFilterIF3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetOrder(self, *args):
        """SetOrder(self, itkFixedArrayUI3 order)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_SetOrder(self, *args)

    def GetOrder(self):
        """GetOrder(self) -> itkFixedArrayUI3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_GetOrder(self)

    def GetInverseOrder(self):
        """GetInverseOrder(self) -> itkFixedArrayUI3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_GetInverseOrder(self)

    def GenerateOutputInformation(self):
        """GenerateOutputInformation(self)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        """GenerateInputRequestedRegion(self)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterIF3
    def cast(*args):
        """cast(itkLightObject obj) -> itkPermuteAxesImageFilterIF3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkPermuteAxesImageFilterIF3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterIF3
        
        Create a new object of the class itkPermuteAxesImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkPermuteAxesImageFilterIF3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkPermuteAxesImageFilterIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPermuteAxesImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPermuteAxesImageFilterIF3.SetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_SetOrder,None,itkPermuteAxesImageFilterIF3)
itkPermuteAxesImageFilterIF3.GetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_GetOrder,None,itkPermuteAxesImageFilterIF3)
itkPermuteAxesImageFilterIF3.GetInverseOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_GetInverseOrder,None,itkPermuteAxesImageFilterIF3)
itkPermuteAxesImageFilterIF3.GenerateOutputInformation = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_GenerateOutputInformation,None,itkPermuteAxesImageFilterIF3)
itkPermuteAxesImageFilterIF3.GenerateInputRequestedRegion = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_GenerateInputRequestedRegion,None,itkPermuteAxesImageFilterIF3)
itkPermuteAxesImageFilterIF3.GetPointer = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_GetPointer,None,itkPermuteAxesImageFilterIF3)
itkPermuteAxesImageFilterIF3_swigregister = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_swigregister
itkPermuteAxesImageFilterIF3_swigregister(itkPermuteAxesImageFilterIF3)

def itkPermuteAxesImageFilterIF3___New_orig__():
  """itkPermuteAxesImageFilterIF3___New_orig__()"""
  return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3___New_orig__()

def itkPermuteAxesImageFilterIF3_cast(*args):
  """itkPermuteAxesImageFilterIF3_cast(itkLightObject obj) -> itkPermuteAxesImageFilterIF3"""
  return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIF3_cast(*args)

class itkPermuteAxesImageFilterIUC2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """Proxy of C++ itkPermuteAxesImageFilterIUC2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetOrder(self, *args):
        """SetOrder(self, itkFixedArrayUI2 order)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_SetOrder(self, *args)

    def GetOrder(self):
        """GetOrder(self) -> itkFixedArrayUI2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_GetOrder(self)

    def GetInverseOrder(self):
        """GetInverseOrder(self) -> itkFixedArrayUI2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_GetInverseOrder(self)

    def GenerateOutputInformation(self):
        """GenerateOutputInformation(self)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        """GenerateInputRequestedRegion(self)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterIUC2
    def cast(*args):
        """cast(itkLightObject obj) -> itkPermuteAxesImageFilterIUC2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkPermuteAxesImageFilterIUC2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterIUC2
        
        Create a new object of the class itkPermuteAxesImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkPermuteAxesImageFilterIUC2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkPermuteAxesImageFilterIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPermuteAxesImageFilterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPermuteAxesImageFilterIUC2.SetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_SetOrder,None,itkPermuteAxesImageFilterIUC2)
itkPermuteAxesImageFilterIUC2.GetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_GetOrder,None,itkPermuteAxesImageFilterIUC2)
itkPermuteAxesImageFilterIUC2.GetInverseOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_GetInverseOrder,None,itkPermuteAxesImageFilterIUC2)
itkPermuteAxesImageFilterIUC2.GenerateOutputInformation = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_GenerateOutputInformation,None,itkPermuteAxesImageFilterIUC2)
itkPermuteAxesImageFilterIUC2.GenerateInputRequestedRegion = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_GenerateInputRequestedRegion,None,itkPermuteAxesImageFilterIUC2)
itkPermuteAxesImageFilterIUC2.GetPointer = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_GetPointer,None,itkPermuteAxesImageFilterIUC2)
itkPermuteAxesImageFilterIUC2_swigregister = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_swigregister
itkPermuteAxesImageFilterIUC2_swigregister(itkPermuteAxesImageFilterIUC2)

def itkPermuteAxesImageFilterIUC2___New_orig__():
  """itkPermuteAxesImageFilterIUC2___New_orig__()"""
  return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2___New_orig__()

def itkPermuteAxesImageFilterIUC2_cast(*args):
  """itkPermuteAxesImageFilterIUC2_cast(itkLightObject obj) -> itkPermuteAxesImageFilterIUC2"""
  return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC2_cast(*args)

class itkPermuteAxesImageFilterIUC3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """Proxy of C++ itkPermuteAxesImageFilterIUC3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetOrder(self, *args):
        """SetOrder(self, itkFixedArrayUI3 order)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_SetOrder(self, *args)

    def GetOrder(self):
        """GetOrder(self) -> itkFixedArrayUI3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_GetOrder(self)

    def GetInverseOrder(self):
        """GetInverseOrder(self) -> itkFixedArrayUI3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_GetInverseOrder(self)

    def GenerateOutputInformation(self):
        """GenerateOutputInformation(self)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        """GenerateInputRequestedRegion(self)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterIUC3
    def cast(*args):
        """cast(itkLightObject obj) -> itkPermuteAxesImageFilterIUC3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkPermuteAxesImageFilterIUC3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterIUC3
        
        Create a new object of the class itkPermuteAxesImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkPermuteAxesImageFilterIUC3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkPermuteAxesImageFilterIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPermuteAxesImageFilterIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPermuteAxesImageFilterIUC3.SetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_SetOrder,None,itkPermuteAxesImageFilterIUC3)
itkPermuteAxesImageFilterIUC3.GetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_GetOrder,None,itkPermuteAxesImageFilterIUC3)
itkPermuteAxesImageFilterIUC3.GetInverseOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_GetInverseOrder,None,itkPermuteAxesImageFilterIUC3)
itkPermuteAxesImageFilterIUC3.GenerateOutputInformation = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_GenerateOutputInformation,None,itkPermuteAxesImageFilterIUC3)
itkPermuteAxesImageFilterIUC3.GenerateInputRequestedRegion = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_GenerateInputRequestedRegion,None,itkPermuteAxesImageFilterIUC3)
itkPermuteAxesImageFilterIUC3.GetPointer = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_GetPointer,None,itkPermuteAxesImageFilterIUC3)
itkPermuteAxesImageFilterIUC3_swigregister = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_swigregister
itkPermuteAxesImageFilterIUC3_swigregister(itkPermuteAxesImageFilterIUC3)

def itkPermuteAxesImageFilterIUC3___New_orig__():
  """itkPermuteAxesImageFilterIUC3___New_orig__()"""
  return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3___New_orig__()

def itkPermuteAxesImageFilterIUC3_cast(*args):
  """itkPermuteAxesImageFilterIUC3_cast(itkLightObject obj) -> itkPermuteAxesImageFilterIUC3"""
  return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUC3_cast(*args)

class itkPermuteAxesImageFilterIUL2(itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUL2):
    """Proxy of C++ itkPermuteAxesImageFilterIUL2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL2_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetOrder(self, *args):
        """SetOrder(self, itkFixedArrayUI2 order)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL2_SetOrder(self, *args)

    def GetOrder(self):
        """GetOrder(self) -> itkFixedArrayUI2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL2_GetOrder(self)

    def GetInverseOrder(self):
        """GetInverseOrder(self) -> itkFixedArrayUI2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL2_GetInverseOrder(self)

    def GenerateOutputInformation(self):
        """GenerateOutputInformation(self)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL2_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        """GenerateInputRequestedRegion(self)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL2_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterIUL2
    def cast(*args):
        """cast(itkLightObject obj) -> itkPermuteAxesImageFilterIUL2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkPermuteAxesImageFilterIUL2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterIUL2
        
        Create a new object of the class itkPermuteAxesImageFilterIUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkPermuteAxesImageFilterIUL2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkPermuteAxesImageFilterIUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPermuteAxesImageFilterIUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPermuteAxesImageFilterIUL2.SetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL2_SetOrder,None,itkPermuteAxesImageFilterIUL2)
itkPermuteAxesImageFilterIUL2.GetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL2_GetOrder,None,itkPermuteAxesImageFilterIUL2)
itkPermuteAxesImageFilterIUL2.GetInverseOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL2_GetInverseOrder,None,itkPermuteAxesImageFilterIUL2)
itkPermuteAxesImageFilterIUL2.GenerateOutputInformation = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL2_GenerateOutputInformation,None,itkPermuteAxesImageFilterIUL2)
itkPermuteAxesImageFilterIUL2.GenerateInputRequestedRegion = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL2_GenerateInputRequestedRegion,None,itkPermuteAxesImageFilterIUL2)
itkPermuteAxesImageFilterIUL2.GetPointer = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL2_GetPointer,None,itkPermuteAxesImageFilterIUL2)
itkPermuteAxesImageFilterIUL2_swigregister = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL2_swigregister
itkPermuteAxesImageFilterIUL2_swigregister(itkPermuteAxesImageFilterIUL2)

def itkPermuteAxesImageFilterIUL2___New_orig__():
  """itkPermuteAxesImageFilterIUL2___New_orig__()"""
  return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL2___New_orig__()

def itkPermuteAxesImageFilterIUL2_cast(*args):
  """itkPermuteAxesImageFilterIUL2_cast(itkLightObject obj) -> itkPermuteAxesImageFilterIUL2"""
  return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL2_cast(*args)

class itkPermuteAxesImageFilterIUL3(itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUL3):
    """Proxy of C++ itkPermuteAxesImageFilterIUL3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL3_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetOrder(self, *args):
        """SetOrder(self, itkFixedArrayUI3 order)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL3_SetOrder(self, *args)

    def GetOrder(self):
        """GetOrder(self) -> itkFixedArrayUI3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL3_GetOrder(self)

    def GetInverseOrder(self):
        """GetInverseOrder(self) -> itkFixedArrayUI3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL3_GetInverseOrder(self)

    def GenerateOutputInformation(self):
        """GenerateOutputInformation(self)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL3_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        """GenerateInputRequestedRegion(self)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL3_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterIUL3
    def cast(*args):
        """cast(itkLightObject obj) -> itkPermuteAxesImageFilterIUL3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkPermuteAxesImageFilterIUL3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterIUL3
        
        Create a new object of the class itkPermuteAxesImageFilterIUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkPermuteAxesImageFilterIUL3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkPermuteAxesImageFilterIUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPermuteAxesImageFilterIUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPermuteAxesImageFilterIUL3.SetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL3_SetOrder,None,itkPermuteAxesImageFilterIUL3)
itkPermuteAxesImageFilterIUL3.GetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL3_GetOrder,None,itkPermuteAxesImageFilterIUL3)
itkPermuteAxesImageFilterIUL3.GetInverseOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL3_GetInverseOrder,None,itkPermuteAxesImageFilterIUL3)
itkPermuteAxesImageFilterIUL3.GenerateOutputInformation = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL3_GenerateOutputInformation,None,itkPermuteAxesImageFilterIUL3)
itkPermuteAxesImageFilterIUL3.GenerateInputRequestedRegion = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL3_GenerateInputRequestedRegion,None,itkPermuteAxesImageFilterIUL3)
itkPermuteAxesImageFilterIUL3.GetPointer = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL3_GetPointer,None,itkPermuteAxesImageFilterIUL3)
itkPermuteAxesImageFilterIUL3_swigregister = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL3_swigregister
itkPermuteAxesImageFilterIUL3_swigregister(itkPermuteAxesImageFilterIUL3)

def itkPermuteAxesImageFilterIUL3___New_orig__():
  """itkPermuteAxesImageFilterIUL3___New_orig__()"""
  return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL3___New_orig__()

def itkPermuteAxesImageFilterIUL3_cast(*args):
  """itkPermuteAxesImageFilterIUL3_cast(itkLightObject obj) -> itkPermuteAxesImageFilterIUL3"""
  return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUL3_cast(*args)

class itkPermuteAxesImageFilterIUS2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """Proxy of C++ itkPermuteAxesImageFilterIUS2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetOrder(self, *args):
        """SetOrder(self, itkFixedArrayUI2 order)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_SetOrder(self, *args)

    def GetOrder(self):
        """GetOrder(self) -> itkFixedArrayUI2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_GetOrder(self)

    def GetInverseOrder(self):
        """GetInverseOrder(self) -> itkFixedArrayUI2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_GetInverseOrder(self)

    def GenerateOutputInformation(self):
        """GenerateOutputInformation(self)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        """GenerateInputRequestedRegion(self)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterIUS2
    def cast(*args):
        """cast(itkLightObject obj) -> itkPermuteAxesImageFilterIUS2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkPermuteAxesImageFilterIUS2"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterIUS2
        
        Create a new object of the class itkPermuteAxesImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkPermuteAxesImageFilterIUS2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkPermuteAxesImageFilterIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPermuteAxesImageFilterIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPermuteAxesImageFilterIUS2.SetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_SetOrder,None,itkPermuteAxesImageFilterIUS2)
itkPermuteAxesImageFilterIUS2.GetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_GetOrder,None,itkPermuteAxesImageFilterIUS2)
itkPermuteAxesImageFilterIUS2.GetInverseOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_GetInverseOrder,None,itkPermuteAxesImageFilterIUS2)
itkPermuteAxesImageFilterIUS2.GenerateOutputInformation = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_GenerateOutputInformation,None,itkPermuteAxesImageFilterIUS2)
itkPermuteAxesImageFilterIUS2.GenerateInputRequestedRegion = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_GenerateInputRequestedRegion,None,itkPermuteAxesImageFilterIUS2)
itkPermuteAxesImageFilterIUS2.GetPointer = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_GetPointer,None,itkPermuteAxesImageFilterIUS2)
itkPermuteAxesImageFilterIUS2_swigregister = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_swigregister
itkPermuteAxesImageFilterIUS2_swigregister(itkPermuteAxesImageFilterIUS2)

def itkPermuteAxesImageFilterIUS2___New_orig__():
  """itkPermuteAxesImageFilterIUS2___New_orig__()"""
  return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2___New_orig__()

def itkPermuteAxesImageFilterIUS2_cast(*args):
  """itkPermuteAxesImageFilterIUS2_cast(itkLightObject obj) -> itkPermuteAxesImageFilterIUS2"""
  return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS2_cast(*args)

class itkPermuteAxesImageFilterIUS3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """Proxy of C++ itkPermuteAxesImageFilterIUS3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetOrder(self, *args):
        """SetOrder(self, itkFixedArrayUI3 order)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_SetOrder(self, *args)

    def GetOrder(self):
        """GetOrder(self) -> itkFixedArrayUI3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_GetOrder(self)

    def GetInverseOrder(self):
        """GetInverseOrder(self) -> itkFixedArrayUI3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_GetInverseOrder(self)

    def GenerateOutputInformation(self):
        """GenerateOutputInformation(self)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_GenerateOutputInformation(self)

    def GenerateInputRequestedRegion(self):
        """GenerateInputRequestedRegion(self)"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_GenerateInputRequestedRegion(self)

    __swig_destroy__ = _itkPermuteAxesImageFilterPython.delete_itkPermuteAxesImageFilterIUS3
    def cast(*args):
        """cast(itkLightObject obj) -> itkPermuteAxesImageFilterIUS3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkPermuteAxesImageFilterIUS3"""
        return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkPermuteAxesImageFilterIUS3
        
        Create a new object of the class itkPermuteAxesImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkPermuteAxesImageFilterIUS3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkPermuteAxesImageFilterIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPermuteAxesImageFilterIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPermuteAxesImageFilterIUS3.SetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_SetOrder,None,itkPermuteAxesImageFilterIUS3)
itkPermuteAxesImageFilterIUS3.GetOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_GetOrder,None,itkPermuteAxesImageFilterIUS3)
itkPermuteAxesImageFilterIUS3.GetInverseOrder = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_GetInverseOrder,None,itkPermuteAxesImageFilterIUS3)
itkPermuteAxesImageFilterIUS3.GenerateOutputInformation = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_GenerateOutputInformation,None,itkPermuteAxesImageFilterIUS3)
itkPermuteAxesImageFilterIUS3.GenerateInputRequestedRegion = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_GenerateInputRequestedRegion,None,itkPermuteAxesImageFilterIUS3)
itkPermuteAxesImageFilterIUS3.GetPointer = new_instancemethod(_itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_GetPointer,None,itkPermuteAxesImageFilterIUS3)
itkPermuteAxesImageFilterIUS3_swigregister = _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_swigregister
itkPermuteAxesImageFilterIUS3_swigregister(itkPermuteAxesImageFilterIUS3)

def itkPermuteAxesImageFilterIUS3___New_orig__():
  """itkPermuteAxesImageFilterIUS3___New_orig__()"""
  return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3___New_orig__()

def itkPermuteAxesImageFilterIUS3_cast(*args):
  """itkPermuteAxesImageFilterIUS3_cast(itkLightObject obj) -> itkPermuteAxesImageFilterIUS3"""
  return _itkPermuteAxesImageFilterPython.itkPermuteAxesImageFilterIUS3_cast(*args)



