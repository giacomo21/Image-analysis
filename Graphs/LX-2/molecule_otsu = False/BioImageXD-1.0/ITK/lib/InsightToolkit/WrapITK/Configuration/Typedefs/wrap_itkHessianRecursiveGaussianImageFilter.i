// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkHessianRecursiveGaussianImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkHessianRecursiveGaussianImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkHessianRecursiveGaussianImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkHessianRecursiveGaussianImageFilterJava
#endif
#ifdef SWIGLUA
%module itkHessianRecursiveGaussianImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkHessianRecursiveGaussianImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkHessianRecursiveGaussianImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkHessianRecursiveGaussianImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkHessianRecursiveGaussianImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkHessianRecursiveGaussianImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkHessianRecursiveGaussianImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkHessianRecursiveGaussianImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkHessianRecursiveGaussianImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkHessianRecursiveGaussianImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkHessianRecursiveGaussianImageFilterPython
#endif
#ifdef SWIGR
%module itkHessianRecursiveGaussianImageFilterR
#endif
#ifdef SWIGRUBY
%module itkHessianRecursiveGaussianImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkHessianRecursiveGaussianImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkHessianRecursiveGaussianImageFilterTcl
#endif
#ifdef SWIGXML
%module itkHessianRecursiveGaussianImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Filtering.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkImageToImageFilterB.i


%include itk.i
%include wrap_itkHessianRecursiveGaussianImageFilter_ext.i


 class itkHessianRecursiveGaussianImageFilterID2 : public itkImageToImageFilterID2ISSRTD22 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  NumberOfSmoothingFilters = 0 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  OutputHasPixelTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkHessianRecursiveGaussianImageFilterID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void SetSigma(double sigma);
     void SetNormalizeAcrossScale(bool normalizeInScaleSpace);
     virtual bool GetNormalizeAcrossScale() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkHessianRecursiveGaussianImageFilterID2(itkHessianRecursiveGaussianImageFilterID2 const & arg0);
     void operator=(itkHessianRecursiveGaussianImageFilterID2 const & arg0);
   protected:
     itkHessianRecursiveGaussianImageFilterID2();
     ~itkHessianRecursiveGaussianImageFilterID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
 };


 class itkHessianRecursiveGaussianImageFilterID2_Pointer {
   public:
     itkHessianRecursiveGaussianImageFilterID2_Pointer();
     itkHessianRecursiveGaussianImageFilterID2_Pointer(itkHessianRecursiveGaussianImageFilterID2_Pointer const & p);
     itkHessianRecursiveGaussianImageFilterID2_Pointer(itkHessianRecursiveGaussianImageFilterID2 * p);
     ~itkHessianRecursiveGaussianImageFilterID2_Pointer();
     itkHessianRecursiveGaussianImageFilterID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkHessianRecursiveGaussianImageFilterID2 * GetPointer() const;
     bool operator<(itkHessianRecursiveGaussianImageFilterID2_Pointer const & r) const;
     bool operator>(itkHessianRecursiveGaussianImageFilterID2_Pointer const & r) const;
     bool operator<=(itkHessianRecursiveGaussianImageFilterID2_Pointer const & r) const;
     bool operator>=(itkHessianRecursiveGaussianImageFilterID2_Pointer const & r) const;
     itkHessianRecursiveGaussianImageFilterID2_Pointer & operator=(itkHessianRecursiveGaussianImageFilterID2_Pointer const & r);
     itkHessianRecursiveGaussianImageFilterID2_Pointer & operator=(itkHessianRecursiveGaussianImageFilterID2 * r);
     itkHessianRecursiveGaussianImageFilterID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkHessianRecursiveGaussianImageFilterID3 : public itkImageToImageFilterID3ISSRTD33 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  NumberOfSmoothingFilters = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  OutputHasPixelTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkHessianRecursiveGaussianImageFilterID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void SetSigma(double sigma);
     void SetNormalizeAcrossScale(bool normalizeInScaleSpace);
     virtual bool GetNormalizeAcrossScale() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkHessianRecursiveGaussianImageFilterID3(itkHessianRecursiveGaussianImageFilterID3 const & arg0);
     void operator=(itkHessianRecursiveGaussianImageFilterID3 const & arg0);
   protected:
     itkHessianRecursiveGaussianImageFilterID3();
     ~itkHessianRecursiveGaussianImageFilterID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
 };


 class itkHessianRecursiveGaussianImageFilterID3_Pointer {
   public:
     itkHessianRecursiveGaussianImageFilterID3_Pointer();
     itkHessianRecursiveGaussianImageFilterID3_Pointer(itkHessianRecursiveGaussianImageFilterID3_Pointer const & p);
     itkHessianRecursiveGaussianImageFilterID3_Pointer(itkHessianRecursiveGaussianImageFilterID3 * p);
     ~itkHessianRecursiveGaussianImageFilterID3_Pointer();
     itkHessianRecursiveGaussianImageFilterID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkHessianRecursiveGaussianImageFilterID3 * GetPointer() const;
     bool operator<(itkHessianRecursiveGaussianImageFilterID3_Pointer const & r) const;
     bool operator>(itkHessianRecursiveGaussianImageFilterID3_Pointer const & r) const;
     bool operator<=(itkHessianRecursiveGaussianImageFilterID3_Pointer const & r) const;
     bool operator>=(itkHessianRecursiveGaussianImageFilterID3_Pointer const & r) const;
     itkHessianRecursiveGaussianImageFilterID3_Pointer & operator=(itkHessianRecursiveGaussianImageFilterID3_Pointer const & r);
     itkHessianRecursiveGaussianImageFilterID3_Pointer & operator=(itkHessianRecursiveGaussianImageFilterID3 * r);
     itkHessianRecursiveGaussianImageFilterID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkHessianRecursiveGaussianImageFilterIF2 : public itkImageToImageFilterIF2ISSRTD22 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  NumberOfSmoothingFilters = 0 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  OutputHasPixelTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkHessianRecursiveGaussianImageFilterIF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void SetSigma(double sigma);
     void SetNormalizeAcrossScale(bool normalizeInScaleSpace);
     virtual bool GetNormalizeAcrossScale() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkHessianRecursiveGaussianImageFilterIF2(itkHessianRecursiveGaussianImageFilterIF2 const & arg0);
     void operator=(itkHessianRecursiveGaussianImageFilterIF2 const & arg0);
   protected:
     itkHessianRecursiveGaussianImageFilterIF2();
     ~itkHessianRecursiveGaussianImageFilterIF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
 };


 class itkHessianRecursiveGaussianImageFilterIF2_Pointer {
   public:
     itkHessianRecursiveGaussianImageFilterIF2_Pointer();
     itkHessianRecursiveGaussianImageFilterIF2_Pointer(itkHessianRecursiveGaussianImageFilterIF2_Pointer const & p);
     itkHessianRecursiveGaussianImageFilterIF2_Pointer(itkHessianRecursiveGaussianImageFilterIF2 * p);
     ~itkHessianRecursiveGaussianImageFilterIF2_Pointer();
     itkHessianRecursiveGaussianImageFilterIF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkHessianRecursiveGaussianImageFilterIF2 * GetPointer() const;
     bool operator<(itkHessianRecursiveGaussianImageFilterIF2_Pointer const & r) const;
     bool operator>(itkHessianRecursiveGaussianImageFilterIF2_Pointer const & r) const;
     bool operator<=(itkHessianRecursiveGaussianImageFilterIF2_Pointer const & r) const;
     bool operator>=(itkHessianRecursiveGaussianImageFilterIF2_Pointer const & r) const;
     itkHessianRecursiveGaussianImageFilterIF2_Pointer & operator=(itkHessianRecursiveGaussianImageFilterIF2_Pointer const & r);
     itkHessianRecursiveGaussianImageFilterIF2_Pointer & operator=(itkHessianRecursiveGaussianImageFilterIF2 * r);
     itkHessianRecursiveGaussianImageFilterIF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkHessianRecursiveGaussianImageFilterIF3 : public itkImageToImageFilterIF3ISSRTD33 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  NumberOfSmoothingFilters = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  OutputHasPixelTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkHessianRecursiveGaussianImageFilterIF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void SetSigma(double sigma);
     void SetNormalizeAcrossScale(bool normalizeInScaleSpace);
     virtual bool GetNormalizeAcrossScale() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkHessianRecursiveGaussianImageFilterIF3(itkHessianRecursiveGaussianImageFilterIF3 const & arg0);
     void operator=(itkHessianRecursiveGaussianImageFilterIF3 const & arg0);
   protected:
     itkHessianRecursiveGaussianImageFilterIF3();
     ~itkHessianRecursiveGaussianImageFilterIF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
 };


 class itkHessianRecursiveGaussianImageFilterIF3_Pointer {
   public:
     itkHessianRecursiveGaussianImageFilterIF3_Pointer();
     itkHessianRecursiveGaussianImageFilterIF3_Pointer(itkHessianRecursiveGaussianImageFilterIF3_Pointer const & p);
     itkHessianRecursiveGaussianImageFilterIF3_Pointer(itkHessianRecursiveGaussianImageFilterIF3 * p);
     ~itkHessianRecursiveGaussianImageFilterIF3_Pointer();
     itkHessianRecursiveGaussianImageFilterIF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkHessianRecursiveGaussianImageFilterIF3 * GetPointer() const;
     bool operator<(itkHessianRecursiveGaussianImageFilterIF3_Pointer const & r) const;
     bool operator>(itkHessianRecursiveGaussianImageFilterIF3_Pointer const & r) const;
     bool operator<=(itkHessianRecursiveGaussianImageFilterIF3_Pointer const & r) const;
     bool operator>=(itkHessianRecursiveGaussianImageFilterIF3_Pointer const & r) const;
     itkHessianRecursiveGaussianImageFilterIF3_Pointer & operator=(itkHessianRecursiveGaussianImageFilterIF3_Pointer const & r);
     itkHessianRecursiveGaussianImageFilterIF3_Pointer & operator=(itkHessianRecursiveGaussianImageFilterIF3 * r);
     itkHessianRecursiveGaussianImageFilterIF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkHessianRecursiveGaussianImageFilterIUC2 : public itkImageToImageFilterIUC2ISSRTD22 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  NumberOfSmoothingFilters = 0 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  OutputHasPixelTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkHessianRecursiveGaussianImageFilterIUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void SetSigma(double sigma);
     void SetNormalizeAcrossScale(bool normalizeInScaleSpace);
     virtual bool GetNormalizeAcrossScale() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkHessianRecursiveGaussianImageFilterIUC2(itkHessianRecursiveGaussianImageFilterIUC2 const & arg0);
     void operator=(itkHessianRecursiveGaussianImageFilterIUC2 const & arg0);
   protected:
     itkHessianRecursiveGaussianImageFilterIUC2();
     ~itkHessianRecursiveGaussianImageFilterIUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
 };


 class itkHessianRecursiveGaussianImageFilterIUC2_Pointer {
   public:
     itkHessianRecursiveGaussianImageFilterIUC2_Pointer();
     itkHessianRecursiveGaussianImageFilterIUC2_Pointer(itkHessianRecursiveGaussianImageFilterIUC2_Pointer const & p);
     itkHessianRecursiveGaussianImageFilterIUC2_Pointer(itkHessianRecursiveGaussianImageFilterIUC2 * p);
     ~itkHessianRecursiveGaussianImageFilterIUC2_Pointer();
     itkHessianRecursiveGaussianImageFilterIUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkHessianRecursiveGaussianImageFilterIUC2 * GetPointer() const;
     bool operator<(itkHessianRecursiveGaussianImageFilterIUC2_Pointer const & r) const;
     bool operator>(itkHessianRecursiveGaussianImageFilterIUC2_Pointer const & r) const;
     bool operator<=(itkHessianRecursiveGaussianImageFilterIUC2_Pointer const & r) const;
     bool operator>=(itkHessianRecursiveGaussianImageFilterIUC2_Pointer const & r) const;
     itkHessianRecursiveGaussianImageFilterIUC2_Pointer & operator=(itkHessianRecursiveGaussianImageFilterIUC2_Pointer const & r);
     itkHessianRecursiveGaussianImageFilterIUC2_Pointer & operator=(itkHessianRecursiveGaussianImageFilterIUC2 * r);
     itkHessianRecursiveGaussianImageFilterIUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkHessianRecursiveGaussianImageFilterIUC3 : public itkImageToImageFilterIUC3ISSRTD33 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  NumberOfSmoothingFilters = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  OutputHasPixelTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkHessianRecursiveGaussianImageFilterIUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void SetSigma(double sigma);
     void SetNormalizeAcrossScale(bool normalizeInScaleSpace);
     virtual bool GetNormalizeAcrossScale() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkHessianRecursiveGaussianImageFilterIUC3(itkHessianRecursiveGaussianImageFilterIUC3 const & arg0);
     void operator=(itkHessianRecursiveGaussianImageFilterIUC3 const & arg0);
   protected:
     itkHessianRecursiveGaussianImageFilterIUC3();
     ~itkHessianRecursiveGaussianImageFilterIUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
 };


 class itkHessianRecursiveGaussianImageFilterIUC3_Pointer {
   public:
     itkHessianRecursiveGaussianImageFilterIUC3_Pointer();
     itkHessianRecursiveGaussianImageFilterIUC3_Pointer(itkHessianRecursiveGaussianImageFilterIUC3_Pointer const & p);
     itkHessianRecursiveGaussianImageFilterIUC3_Pointer(itkHessianRecursiveGaussianImageFilterIUC3 * p);
     ~itkHessianRecursiveGaussianImageFilterIUC3_Pointer();
     itkHessianRecursiveGaussianImageFilterIUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkHessianRecursiveGaussianImageFilterIUC3 * GetPointer() const;
     bool operator<(itkHessianRecursiveGaussianImageFilterIUC3_Pointer const & r) const;
     bool operator>(itkHessianRecursiveGaussianImageFilterIUC3_Pointer const & r) const;
     bool operator<=(itkHessianRecursiveGaussianImageFilterIUC3_Pointer const & r) const;
     bool operator>=(itkHessianRecursiveGaussianImageFilterIUC3_Pointer const & r) const;
     itkHessianRecursiveGaussianImageFilterIUC3_Pointer & operator=(itkHessianRecursiveGaussianImageFilterIUC3_Pointer const & r);
     itkHessianRecursiveGaussianImageFilterIUC3_Pointer & operator=(itkHessianRecursiveGaussianImageFilterIUC3 * r);
     itkHessianRecursiveGaussianImageFilterIUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkHessianRecursiveGaussianImageFilterIUL2 : public itkImageToImageFilterIUL2ISSRTD22 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  NumberOfSmoothingFilters = 0 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  OutputHasPixelTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkHessianRecursiveGaussianImageFilterIUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void SetSigma(double sigma);
     void SetNormalizeAcrossScale(bool normalizeInScaleSpace);
     virtual bool GetNormalizeAcrossScale() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkHessianRecursiveGaussianImageFilterIUL2(itkHessianRecursiveGaussianImageFilterIUL2 const & arg0);
     void operator=(itkHessianRecursiveGaussianImageFilterIUL2 const & arg0);
   protected:
     itkHessianRecursiveGaussianImageFilterIUL2();
     ~itkHessianRecursiveGaussianImageFilterIUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
 };


 class itkHessianRecursiveGaussianImageFilterIUL2_Pointer {
   public:
     itkHessianRecursiveGaussianImageFilterIUL2_Pointer();
     itkHessianRecursiveGaussianImageFilterIUL2_Pointer(itkHessianRecursiveGaussianImageFilterIUL2_Pointer const & p);
     itkHessianRecursiveGaussianImageFilterIUL2_Pointer(itkHessianRecursiveGaussianImageFilterIUL2 * p);
     ~itkHessianRecursiveGaussianImageFilterIUL2_Pointer();
     itkHessianRecursiveGaussianImageFilterIUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkHessianRecursiveGaussianImageFilterIUL2 * GetPointer() const;
     bool operator<(itkHessianRecursiveGaussianImageFilterIUL2_Pointer const & r) const;
     bool operator>(itkHessianRecursiveGaussianImageFilterIUL2_Pointer const & r) const;
     bool operator<=(itkHessianRecursiveGaussianImageFilterIUL2_Pointer const & r) const;
     bool operator>=(itkHessianRecursiveGaussianImageFilterIUL2_Pointer const & r) const;
     itkHessianRecursiveGaussianImageFilterIUL2_Pointer & operator=(itkHessianRecursiveGaussianImageFilterIUL2_Pointer const & r);
     itkHessianRecursiveGaussianImageFilterIUL2_Pointer & operator=(itkHessianRecursiveGaussianImageFilterIUL2 * r);
     itkHessianRecursiveGaussianImageFilterIUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkHessianRecursiveGaussianImageFilterIUL3 : public itkImageToImageFilterIUL3ISSRTD33 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  NumberOfSmoothingFilters = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  OutputHasPixelTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkHessianRecursiveGaussianImageFilterIUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void SetSigma(double sigma);
     void SetNormalizeAcrossScale(bool normalizeInScaleSpace);
     virtual bool GetNormalizeAcrossScale() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkHessianRecursiveGaussianImageFilterIUL3(itkHessianRecursiveGaussianImageFilterIUL3 const & arg0);
     void operator=(itkHessianRecursiveGaussianImageFilterIUL3 const & arg0);
   protected:
     itkHessianRecursiveGaussianImageFilterIUL3();
     ~itkHessianRecursiveGaussianImageFilterIUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
 };


 class itkHessianRecursiveGaussianImageFilterIUL3_Pointer {
   public:
     itkHessianRecursiveGaussianImageFilterIUL3_Pointer();
     itkHessianRecursiveGaussianImageFilterIUL3_Pointer(itkHessianRecursiveGaussianImageFilterIUL3_Pointer const & p);
     itkHessianRecursiveGaussianImageFilterIUL3_Pointer(itkHessianRecursiveGaussianImageFilterIUL3 * p);
     ~itkHessianRecursiveGaussianImageFilterIUL3_Pointer();
     itkHessianRecursiveGaussianImageFilterIUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkHessianRecursiveGaussianImageFilterIUL3 * GetPointer() const;
     bool operator<(itkHessianRecursiveGaussianImageFilterIUL3_Pointer const & r) const;
     bool operator>(itkHessianRecursiveGaussianImageFilterIUL3_Pointer const & r) const;
     bool operator<=(itkHessianRecursiveGaussianImageFilterIUL3_Pointer const & r) const;
     bool operator>=(itkHessianRecursiveGaussianImageFilterIUL3_Pointer const & r) const;
     itkHessianRecursiveGaussianImageFilterIUL3_Pointer & operator=(itkHessianRecursiveGaussianImageFilterIUL3_Pointer const & r);
     itkHessianRecursiveGaussianImageFilterIUL3_Pointer & operator=(itkHessianRecursiveGaussianImageFilterIUL3 * r);
     itkHessianRecursiveGaussianImageFilterIUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkHessianRecursiveGaussianImageFilterIUS2 : public itkImageToImageFilterIUS2ISSRTD22 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  NumberOfSmoothingFilters = 0 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  OutputHasPixelTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkHessianRecursiveGaussianImageFilterIUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void SetSigma(double sigma);
     void SetNormalizeAcrossScale(bool normalizeInScaleSpace);
     virtual bool GetNormalizeAcrossScale() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkHessianRecursiveGaussianImageFilterIUS2(itkHessianRecursiveGaussianImageFilterIUS2 const & arg0);
     void operator=(itkHessianRecursiveGaussianImageFilterIUS2 const & arg0);
   protected:
     itkHessianRecursiveGaussianImageFilterIUS2();
     ~itkHessianRecursiveGaussianImageFilterIUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
 };


 class itkHessianRecursiveGaussianImageFilterIUS2_Pointer {
   public:
     itkHessianRecursiveGaussianImageFilterIUS2_Pointer();
     itkHessianRecursiveGaussianImageFilterIUS2_Pointer(itkHessianRecursiveGaussianImageFilterIUS2_Pointer const & p);
     itkHessianRecursiveGaussianImageFilterIUS2_Pointer(itkHessianRecursiveGaussianImageFilterIUS2 * p);
     ~itkHessianRecursiveGaussianImageFilterIUS2_Pointer();
     itkHessianRecursiveGaussianImageFilterIUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkHessianRecursiveGaussianImageFilterIUS2 * GetPointer() const;
     bool operator<(itkHessianRecursiveGaussianImageFilterIUS2_Pointer const & r) const;
     bool operator>(itkHessianRecursiveGaussianImageFilterIUS2_Pointer const & r) const;
     bool operator<=(itkHessianRecursiveGaussianImageFilterIUS2_Pointer const & r) const;
     bool operator>=(itkHessianRecursiveGaussianImageFilterIUS2_Pointer const & r) const;
     itkHessianRecursiveGaussianImageFilterIUS2_Pointer & operator=(itkHessianRecursiveGaussianImageFilterIUS2_Pointer const & r);
     itkHessianRecursiveGaussianImageFilterIUS2_Pointer & operator=(itkHessianRecursiveGaussianImageFilterIUS2 * r);
     itkHessianRecursiveGaussianImageFilterIUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkHessianRecursiveGaussianImageFilterIUS3 : public itkImageToImageFilterIUS3ISSRTD33 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  NumberOfSmoothingFilters = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  OutputHasPixelTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkHessianRecursiveGaussianImageFilterIUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void SetSigma(double sigma);
     void SetNormalizeAcrossScale(bool normalizeInScaleSpace);
     virtual bool GetNormalizeAcrossScale() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkHessianRecursiveGaussianImageFilterIUS3(itkHessianRecursiveGaussianImageFilterIUS3 const & arg0);
     void operator=(itkHessianRecursiveGaussianImageFilterIUS3 const & arg0);
   protected:
     itkHessianRecursiveGaussianImageFilterIUS3();
     ~itkHessianRecursiveGaussianImageFilterIUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
 };


 class itkHessianRecursiveGaussianImageFilterIUS3_Pointer {
   public:
     itkHessianRecursiveGaussianImageFilterIUS3_Pointer();
     itkHessianRecursiveGaussianImageFilterIUS3_Pointer(itkHessianRecursiveGaussianImageFilterIUS3_Pointer const & p);
     itkHessianRecursiveGaussianImageFilterIUS3_Pointer(itkHessianRecursiveGaussianImageFilterIUS3 * p);
     ~itkHessianRecursiveGaussianImageFilterIUS3_Pointer();
     itkHessianRecursiveGaussianImageFilterIUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkHessianRecursiveGaussianImageFilterIUS3 * GetPointer() const;
     bool operator<(itkHessianRecursiveGaussianImageFilterIUS3_Pointer const & r) const;
     bool operator>(itkHessianRecursiveGaussianImageFilterIUS3_Pointer const & r) const;
     bool operator<=(itkHessianRecursiveGaussianImageFilterIUS3_Pointer const & r) const;
     bool operator>=(itkHessianRecursiveGaussianImageFilterIUS3_Pointer const & r) const;
     itkHessianRecursiveGaussianImageFilterIUS3_Pointer & operator=(itkHessianRecursiveGaussianImageFilterIUS3_Pointer const & r);
     itkHessianRecursiveGaussianImageFilterIUS3_Pointer & operator=(itkHessianRecursiveGaussianImageFilterIUS3 * r);
     itkHessianRecursiveGaussianImageFilterIUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


