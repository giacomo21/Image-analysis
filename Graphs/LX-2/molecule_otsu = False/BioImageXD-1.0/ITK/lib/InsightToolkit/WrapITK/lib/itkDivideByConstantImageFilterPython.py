# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkDivideByConstantImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkDivideByConstantImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkDivideByConstantImageFilterPython
            return _itkDivideByConstantImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkDivideByConstantImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkDivideByConstantImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkDivideByConstantImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import vcl_complexPython
import pyBasePython
import ITKRegionsPython
import ITKCommonBasePython
import itkEventObjectsPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkInPlaceImageFilterBPython
import itkImageToImageFilterBPython
import itkImagePython
import itkFixedArrayPython
import itkCovariantVectorPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import vnl_vector_refPython
import itkPointPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkRGBPixelPython
import itkImageSourcePython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython
def itkDivideByConstantImageFilterICF3CFICF3_New():
  return itkDivideByConstantImageFilterICF3CFICF3.New()

def itkDivideByConstantImageFilterICF3CFICF3_Superclass_New():
  return itkDivideByConstantImageFilterICF3CFICF3_Superclass.New()

def itkDivideByConstantImageFilterID3DID3_New():
  return itkDivideByConstantImageFilterID3DID3.New()

def itkDivideByConstantImageFilterID3DID3_Superclass_New():
  return itkDivideByConstantImageFilterID3DID3_Superclass.New()

def itkDivideByConstantImageFilterIF3DIF3_New():
  return itkDivideByConstantImageFilterIF3DIF3.New()

def itkDivideByConstantImageFilterIF3DIF3_Superclass_New():
  return itkDivideByConstantImageFilterIF3DIF3_Superclass.New()

def itkDivideByConstantImageFilterIUS3DIUS3_New():
  return itkDivideByConstantImageFilterIUS3DIUS3.New()

def itkDivideByConstantImageFilterIUS3DIUS3_Superclass_New():
  return itkDivideByConstantImageFilterIUS3DIUS3_Superclass.New()

def itkDivideByConstantImageFilterIUL3DIUL3_New():
  return itkDivideByConstantImageFilterIUL3DIUL3.New()

def itkDivideByConstantImageFilterIUL3DIUL3_Superclass_New():
  return itkDivideByConstantImageFilterIUL3DIUL3_Superclass.New()

def itkDivideByConstantImageFilterIUC3DIUC3_New():
  return itkDivideByConstantImageFilterIUC3DIUC3.New()

def itkDivideByConstantImageFilterIUC3DIUC3_Superclass_New():
  return itkDivideByConstantImageFilterIUC3DIUC3_Superclass.New()

def itkDivideByConstantImageFilterICF2CFICF2_New():
  return itkDivideByConstantImageFilterICF2CFICF2.New()

def itkDivideByConstantImageFilterICF2CFICF2_Superclass_New():
  return itkDivideByConstantImageFilterICF2CFICF2_Superclass.New()

def itkDivideByConstantImageFilterID2DID2_New():
  return itkDivideByConstantImageFilterID2DID2.New()

def itkDivideByConstantImageFilterID2DID2_Superclass_New():
  return itkDivideByConstantImageFilterID2DID2_Superclass.New()

def itkDivideByConstantImageFilterIF2DIF2_New():
  return itkDivideByConstantImageFilterIF2DIF2.New()

def itkDivideByConstantImageFilterIF2DIF2_Superclass_New():
  return itkDivideByConstantImageFilterIF2DIF2_Superclass.New()

def itkDivideByConstantImageFilterIUS2DIUS2_New():
  return itkDivideByConstantImageFilterIUS2DIUS2.New()

def itkDivideByConstantImageFilterIUS2DIUS2_Superclass_New():
  return itkDivideByConstantImageFilterIUS2DIUS2_Superclass.New()

def itkDivideByConstantImageFilterIUL2DIUL2_New():
  return itkDivideByConstantImageFilterIUL2DIUL2.New()

def itkDivideByConstantImageFilterIUL2DIUL2_Superclass_New():
  return itkDivideByConstantImageFilterIUL2DIUL2_Superclass.New()

def itkDivideByConstantImageFilterIUC2DIUC2_New():
  return itkDivideByConstantImageFilterIUC2DIUC2.New()

def itkDivideByConstantImageFilterIUC2DIUC2_Superclass_New():
  return itkDivideByConstantImageFilterIUC2DIUC2_Superclass.New()

class itkDivideByConstantImageFilterICF2CFICF2_Superclass(itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ICF2):
    """Proxy of C++ itkDivideByConstantImageFilterICF2CFICF2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF2CFICF2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::DivideByConstant<(std::complex<(float)>,std::complex<(float)>,std::complex<(float)>)>
        GetFunctor(self) -> itk::Functor::DivideByConstant<(std::complex<(float)>,std::complex<(float)>,std::complex<(float)>)>
        """
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF2CFICF2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::DivideByConstant<(std::complex<(float)>,std::complex<(float)>,std::complex<(float)>)> functor)"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF2CFICF2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideByConstantImageFilterPython.delete_itkDivideByConstantImageFilterICF2CFICF2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideByConstantImageFilterICF2CFICF2_Superclass"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF2CFICF2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideByConstantImageFilterICF2CFICF2_Superclass"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF2CFICF2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideByConstantImageFilterICF2CFICF2_Superclass
        
        Create a new object of the class itkDivideByConstantImageFilterICF2CFICF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideByConstantImageFilterICF2CFICF2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideByConstantImageFilterICF2CFICF2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideByConstantImageFilterICF2CFICF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideByConstantImageFilterICF2CFICF2_Superclass.GetFunctor = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF2CFICF2_Superclass_GetFunctor,None,itkDivideByConstantImageFilterICF2CFICF2_Superclass)
itkDivideByConstantImageFilterICF2CFICF2_Superclass.SetFunctor = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF2CFICF2_Superclass_SetFunctor,None,itkDivideByConstantImageFilterICF2CFICF2_Superclass)
itkDivideByConstantImageFilterICF2CFICF2_Superclass.GetPointer = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF2CFICF2_Superclass_GetPointer,None,itkDivideByConstantImageFilterICF2CFICF2_Superclass)
itkDivideByConstantImageFilterICF2CFICF2_Superclass_swigregister = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF2CFICF2_Superclass_swigregister
itkDivideByConstantImageFilterICF2CFICF2_Superclass_swigregister(itkDivideByConstantImageFilterICF2CFICF2_Superclass)

def itkDivideByConstantImageFilterICF2CFICF2_Superclass___New_orig__():
  """itkDivideByConstantImageFilterICF2CFICF2_Superclass___New_orig__()"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF2CFICF2_Superclass___New_orig__()

def itkDivideByConstantImageFilterICF2CFICF2_Superclass_cast(*args):
  """itkDivideByConstantImageFilterICF2CFICF2_Superclass_cast(itkLightObject obj) -> itkDivideByConstantImageFilterICF2CFICF2_Superclass"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF2CFICF2_Superclass_cast(*args)

class itkDivideByConstantImageFilterICF3CFICF3_Superclass(itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF3):
    """Proxy of C++ itkDivideByConstantImageFilterICF3CFICF3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF3CFICF3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::DivideByConstant<(std::complex<(float)>,std::complex<(float)>,std::complex<(float)>)>
        GetFunctor(self) -> itk::Functor::DivideByConstant<(std::complex<(float)>,std::complex<(float)>,std::complex<(float)>)>
        """
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF3CFICF3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::DivideByConstant<(std::complex<(float)>,std::complex<(float)>,std::complex<(float)>)> functor)"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF3CFICF3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideByConstantImageFilterPython.delete_itkDivideByConstantImageFilterICF3CFICF3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideByConstantImageFilterICF3CFICF3_Superclass"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF3CFICF3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideByConstantImageFilterICF3CFICF3_Superclass"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF3CFICF3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideByConstantImageFilterICF3CFICF3_Superclass
        
        Create a new object of the class itkDivideByConstantImageFilterICF3CFICF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideByConstantImageFilterICF3CFICF3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideByConstantImageFilterICF3CFICF3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideByConstantImageFilterICF3CFICF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideByConstantImageFilterICF3CFICF3_Superclass.GetFunctor = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF3CFICF3_Superclass_GetFunctor,None,itkDivideByConstantImageFilterICF3CFICF3_Superclass)
itkDivideByConstantImageFilterICF3CFICF3_Superclass.SetFunctor = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF3CFICF3_Superclass_SetFunctor,None,itkDivideByConstantImageFilterICF3CFICF3_Superclass)
itkDivideByConstantImageFilterICF3CFICF3_Superclass.GetPointer = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF3CFICF3_Superclass_GetPointer,None,itkDivideByConstantImageFilterICF3CFICF3_Superclass)
itkDivideByConstantImageFilterICF3CFICF3_Superclass_swigregister = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF3CFICF3_Superclass_swigregister
itkDivideByConstantImageFilterICF3CFICF3_Superclass_swigregister(itkDivideByConstantImageFilterICF3CFICF3_Superclass)

def itkDivideByConstantImageFilterICF3CFICF3_Superclass___New_orig__():
  """itkDivideByConstantImageFilterICF3CFICF3_Superclass___New_orig__()"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF3CFICF3_Superclass___New_orig__()

def itkDivideByConstantImageFilterICF3CFICF3_Superclass_cast(*args):
  """itkDivideByConstantImageFilterICF3CFICF3_Superclass_cast(itkLightObject obj) -> itkDivideByConstantImageFilterICF3CFICF3_Superclass"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF3CFICF3_Superclass_cast(*args)

class itkDivideByConstantImageFilterID2DID2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    """Proxy of C++ itkDivideByConstantImageFilterID2DID2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID2DID2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::DivideByConstant<(double,double,double)>
        GetFunctor(self) -> itk::Functor::DivideByConstant<(double,double,double)>
        """
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID2DID2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::DivideByConstant<(double,double,double)> functor)"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID2DID2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideByConstantImageFilterPython.delete_itkDivideByConstantImageFilterID2DID2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideByConstantImageFilterID2DID2_Superclass"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID2DID2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideByConstantImageFilterID2DID2_Superclass"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID2DID2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideByConstantImageFilterID2DID2_Superclass
        
        Create a new object of the class itkDivideByConstantImageFilterID2DID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideByConstantImageFilterID2DID2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideByConstantImageFilterID2DID2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideByConstantImageFilterID2DID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideByConstantImageFilterID2DID2_Superclass.GetFunctor = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID2DID2_Superclass_GetFunctor,None,itkDivideByConstantImageFilterID2DID2_Superclass)
itkDivideByConstantImageFilterID2DID2_Superclass.SetFunctor = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID2DID2_Superclass_SetFunctor,None,itkDivideByConstantImageFilterID2DID2_Superclass)
itkDivideByConstantImageFilterID2DID2_Superclass.GetPointer = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID2DID2_Superclass_GetPointer,None,itkDivideByConstantImageFilterID2DID2_Superclass)
itkDivideByConstantImageFilterID2DID2_Superclass_swigregister = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID2DID2_Superclass_swigregister
itkDivideByConstantImageFilterID2DID2_Superclass_swigregister(itkDivideByConstantImageFilterID2DID2_Superclass)

def itkDivideByConstantImageFilterID2DID2_Superclass___New_orig__():
  """itkDivideByConstantImageFilterID2DID2_Superclass___New_orig__()"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID2DID2_Superclass___New_orig__()

def itkDivideByConstantImageFilterID2DID2_Superclass_cast(*args):
  """itkDivideByConstantImageFilterID2DID2_Superclass_cast(itkLightObject obj) -> itkDivideByConstantImageFilterID2DID2_Superclass"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID2DID2_Superclass_cast(*args)

class itkDivideByConstantImageFilterID3DID3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    """Proxy of C++ itkDivideByConstantImageFilterID3DID3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID3DID3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::DivideByConstant<(double,double,double)>
        GetFunctor(self) -> itk::Functor::DivideByConstant<(double,double,double)>
        """
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID3DID3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::DivideByConstant<(double,double,double)> functor)"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID3DID3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideByConstantImageFilterPython.delete_itkDivideByConstantImageFilterID3DID3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideByConstantImageFilterID3DID3_Superclass"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID3DID3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideByConstantImageFilterID3DID3_Superclass"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID3DID3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideByConstantImageFilterID3DID3_Superclass
        
        Create a new object of the class itkDivideByConstantImageFilterID3DID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideByConstantImageFilterID3DID3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideByConstantImageFilterID3DID3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideByConstantImageFilterID3DID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideByConstantImageFilterID3DID3_Superclass.GetFunctor = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID3DID3_Superclass_GetFunctor,None,itkDivideByConstantImageFilterID3DID3_Superclass)
itkDivideByConstantImageFilterID3DID3_Superclass.SetFunctor = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID3DID3_Superclass_SetFunctor,None,itkDivideByConstantImageFilterID3DID3_Superclass)
itkDivideByConstantImageFilterID3DID3_Superclass.GetPointer = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID3DID3_Superclass_GetPointer,None,itkDivideByConstantImageFilterID3DID3_Superclass)
itkDivideByConstantImageFilterID3DID3_Superclass_swigregister = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID3DID3_Superclass_swigregister
itkDivideByConstantImageFilterID3DID3_Superclass_swigregister(itkDivideByConstantImageFilterID3DID3_Superclass)

def itkDivideByConstantImageFilterID3DID3_Superclass___New_orig__():
  """itkDivideByConstantImageFilterID3DID3_Superclass___New_orig__()"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID3DID3_Superclass___New_orig__()

def itkDivideByConstantImageFilterID3DID3_Superclass_cast(*args):
  """itkDivideByConstantImageFilterID3DID3_Superclass_cast(itkLightObject obj) -> itkDivideByConstantImageFilterID3DID3_Superclass"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID3DID3_Superclass_cast(*args)

class itkDivideByConstantImageFilterIF2DIF2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    """Proxy of C++ itkDivideByConstantImageFilterIF2DIF2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF2DIF2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::DivideByConstant<(float,double,float)>
        GetFunctor(self) -> itk::Functor::DivideByConstant<(float,double,float)>
        """
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF2DIF2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::DivideByConstant<(float,double,float)> functor)"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF2DIF2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideByConstantImageFilterPython.delete_itkDivideByConstantImageFilterIF2DIF2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideByConstantImageFilterIF2DIF2_Superclass"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF2DIF2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideByConstantImageFilterIF2DIF2_Superclass"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF2DIF2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideByConstantImageFilterIF2DIF2_Superclass
        
        Create a new object of the class itkDivideByConstantImageFilterIF2DIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideByConstantImageFilterIF2DIF2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideByConstantImageFilterIF2DIF2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideByConstantImageFilterIF2DIF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideByConstantImageFilterIF2DIF2_Superclass.GetFunctor = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF2DIF2_Superclass_GetFunctor,None,itkDivideByConstantImageFilterIF2DIF2_Superclass)
itkDivideByConstantImageFilterIF2DIF2_Superclass.SetFunctor = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF2DIF2_Superclass_SetFunctor,None,itkDivideByConstantImageFilterIF2DIF2_Superclass)
itkDivideByConstantImageFilterIF2DIF2_Superclass.GetPointer = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF2DIF2_Superclass_GetPointer,None,itkDivideByConstantImageFilterIF2DIF2_Superclass)
itkDivideByConstantImageFilterIF2DIF2_Superclass_swigregister = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF2DIF2_Superclass_swigregister
itkDivideByConstantImageFilterIF2DIF2_Superclass_swigregister(itkDivideByConstantImageFilterIF2DIF2_Superclass)

def itkDivideByConstantImageFilterIF2DIF2_Superclass___New_orig__():
  """itkDivideByConstantImageFilterIF2DIF2_Superclass___New_orig__()"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF2DIF2_Superclass___New_orig__()

def itkDivideByConstantImageFilterIF2DIF2_Superclass_cast(*args):
  """itkDivideByConstantImageFilterIF2DIF2_Superclass_cast(itkLightObject obj) -> itkDivideByConstantImageFilterIF2DIF2_Superclass"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF2DIF2_Superclass_cast(*args)

class itkDivideByConstantImageFilterIF3DIF3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    """Proxy of C++ itkDivideByConstantImageFilterIF3DIF3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF3DIF3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::DivideByConstant<(float,double,float)>
        GetFunctor(self) -> itk::Functor::DivideByConstant<(float,double,float)>
        """
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF3DIF3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::DivideByConstant<(float,double,float)> functor)"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF3DIF3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideByConstantImageFilterPython.delete_itkDivideByConstantImageFilterIF3DIF3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideByConstantImageFilterIF3DIF3_Superclass"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF3DIF3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideByConstantImageFilterIF3DIF3_Superclass"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF3DIF3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideByConstantImageFilterIF3DIF3_Superclass
        
        Create a new object of the class itkDivideByConstantImageFilterIF3DIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideByConstantImageFilterIF3DIF3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideByConstantImageFilterIF3DIF3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideByConstantImageFilterIF3DIF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideByConstantImageFilterIF3DIF3_Superclass.GetFunctor = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF3DIF3_Superclass_GetFunctor,None,itkDivideByConstantImageFilterIF3DIF3_Superclass)
itkDivideByConstantImageFilterIF3DIF3_Superclass.SetFunctor = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF3DIF3_Superclass_SetFunctor,None,itkDivideByConstantImageFilterIF3DIF3_Superclass)
itkDivideByConstantImageFilterIF3DIF3_Superclass.GetPointer = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF3DIF3_Superclass_GetPointer,None,itkDivideByConstantImageFilterIF3DIF3_Superclass)
itkDivideByConstantImageFilterIF3DIF3_Superclass_swigregister = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF3DIF3_Superclass_swigregister
itkDivideByConstantImageFilterIF3DIF3_Superclass_swigregister(itkDivideByConstantImageFilterIF3DIF3_Superclass)

def itkDivideByConstantImageFilterIF3DIF3_Superclass___New_orig__():
  """itkDivideByConstantImageFilterIF3DIF3_Superclass___New_orig__()"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF3DIF3_Superclass___New_orig__()

def itkDivideByConstantImageFilterIF3DIF3_Superclass_cast(*args):
  """itkDivideByConstantImageFilterIF3DIF3_Superclass_cast(itkLightObject obj) -> itkDivideByConstantImageFilterIF3DIF3_Superclass"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF3DIF3_Superclass_cast(*args)

class itkDivideByConstantImageFilterIUC2DIUC2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    """Proxy of C++ itkDivideByConstantImageFilterIUC2DIUC2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC2DIUC2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::DivideByConstant<(unsigned char,double,unsigned char)>
        GetFunctor(self) -> itk::Functor::DivideByConstant<(unsigned char,double,unsigned char)>
        """
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC2DIUC2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::DivideByConstant<(unsigned char,double,unsigned char)> functor)"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC2DIUC2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideByConstantImageFilterPython.delete_itkDivideByConstantImageFilterIUC2DIUC2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideByConstantImageFilterIUC2DIUC2_Superclass"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC2DIUC2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideByConstantImageFilterIUC2DIUC2_Superclass"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC2DIUC2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideByConstantImageFilterIUC2DIUC2_Superclass
        
        Create a new object of the class itkDivideByConstantImageFilterIUC2DIUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideByConstantImageFilterIUC2DIUC2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideByConstantImageFilterIUC2DIUC2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideByConstantImageFilterIUC2DIUC2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideByConstantImageFilterIUC2DIUC2_Superclass.GetFunctor = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC2DIUC2_Superclass_GetFunctor,None,itkDivideByConstantImageFilterIUC2DIUC2_Superclass)
itkDivideByConstantImageFilterIUC2DIUC2_Superclass.SetFunctor = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC2DIUC2_Superclass_SetFunctor,None,itkDivideByConstantImageFilterIUC2DIUC2_Superclass)
itkDivideByConstantImageFilterIUC2DIUC2_Superclass.GetPointer = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC2DIUC2_Superclass_GetPointer,None,itkDivideByConstantImageFilterIUC2DIUC2_Superclass)
itkDivideByConstantImageFilterIUC2DIUC2_Superclass_swigregister = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC2DIUC2_Superclass_swigregister
itkDivideByConstantImageFilterIUC2DIUC2_Superclass_swigregister(itkDivideByConstantImageFilterIUC2DIUC2_Superclass)

def itkDivideByConstantImageFilterIUC2DIUC2_Superclass___New_orig__():
  """itkDivideByConstantImageFilterIUC2DIUC2_Superclass___New_orig__()"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC2DIUC2_Superclass___New_orig__()

def itkDivideByConstantImageFilterIUC2DIUC2_Superclass_cast(*args):
  """itkDivideByConstantImageFilterIUC2DIUC2_Superclass_cast(itkLightObject obj) -> itkDivideByConstantImageFilterIUC2DIUC2_Superclass"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC2DIUC2_Superclass_cast(*args)

class itkDivideByConstantImageFilterIUC3DIUC3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    """Proxy of C++ itkDivideByConstantImageFilterIUC3DIUC3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC3DIUC3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::DivideByConstant<(unsigned char,double,unsigned char)>
        GetFunctor(self) -> itk::Functor::DivideByConstant<(unsigned char,double,unsigned char)>
        """
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC3DIUC3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::DivideByConstant<(unsigned char,double,unsigned char)> functor)"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC3DIUC3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideByConstantImageFilterPython.delete_itkDivideByConstantImageFilterIUC3DIUC3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideByConstantImageFilterIUC3DIUC3_Superclass"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC3DIUC3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideByConstantImageFilterIUC3DIUC3_Superclass"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC3DIUC3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideByConstantImageFilterIUC3DIUC3_Superclass
        
        Create a new object of the class itkDivideByConstantImageFilterIUC3DIUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideByConstantImageFilterIUC3DIUC3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideByConstantImageFilterIUC3DIUC3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideByConstantImageFilterIUC3DIUC3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideByConstantImageFilterIUC3DIUC3_Superclass.GetFunctor = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC3DIUC3_Superclass_GetFunctor,None,itkDivideByConstantImageFilterIUC3DIUC3_Superclass)
itkDivideByConstantImageFilterIUC3DIUC3_Superclass.SetFunctor = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC3DIUC3_Superclass_SetFunctor,None,itkDivideByConstantImageFilterIUC3DIUC3_Superclass)
itkDivideByConstantImageFilterIUC3DIUC3_Superclass.GetPointer = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC3DIUC3_Superclass_GetPointer,None,itkDivideByConstantImageFilterIUC3DIUC3_Superclass)
itkDivideByConstantImageFilterIUC3DIUC3_Superclass_swigregister = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC3DIUC3_Superclass_swigregister
itkDivideByConstantImageFilterIUC3DIUC3_Superclass_swigregister(itkDivideByConstantImageFilterIUC3DIUC3_Superclass)

def itkDivideByConstantImageFilterIUC3DIUC3_Superclass___New_orig__():
  """itkDivideByConstantImageFilterIUC3DIUC3_Superclass___New_orig__()"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC3DIUC3_Superclass___New_orig__()

def itkDivideByConstantImageFilterIUC3DIUC3_Superclass_cast(*args):
  """itkDivideByConstantImageFilterIUC3DIUC3_Superclass_cast(itkLightObject obj) -> itkDivideByConstantImageFilterIUC3DIUC3_Superclass"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC3DIUC3_Superclass_cast(*args)

class itkDivideByConstantImageFilterIUL2DIUL2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUL2):
    """Proxy of C++ itkDivideByConstantImageFilterIUL2DIUL2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL2DIUL2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::DivideByConstant<(unsigned long,double,unsigned long)>
        GetFunctor(self) -> itk::Functor::DivideByConstant<(unsigned long,double,unsigned long)>
        """
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL2DIUL2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::DivideByConstant<(unsigned long,double,unsigned long)> functor)"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL2DIUL2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideByConstantImageFilterPython.delete_itkDivideByConstantImageFilterIUL2DIUL2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideByConstantImageFilterIUL2DIUL2_Superclass"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL2DIUL2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideByConstantImageFilterIUL2DIUL2_Superclass"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL2DIUL2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideByConstantImageFilterIUL2DIUL2_Superclass
        
        Create a new object of the class itkDivideByConstantImageFilterIUL2DIUL2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideByConstantImageFilterIUL2DIUL2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideByConstantImageFilterIUL2DIUL2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideByConstantImageFilterIUL2DIUL2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideByConstantImageFilterIUL2DIUL2_Superclass.GetFunctor = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL2DIUL2_Superclass_GetFunctor,None,itkDivideByConstantImageFilterIUL2DIUL2_Superclass)
itkDivideByConstantImageFilterIUL2DIUL2_Superclass.SetFunctor = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL2DIUL2_Superclass_SetFunctor,None,itkDivideByConstantImageFilterIUL2DIUL2_Superclass)
itkDivideByConstantImageFilterIUL2DIUL2_Superclass.GetPointer = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL2DIUL2_Superclass_GetPointer,None,itkDivideByConstantImageFilterIUL2DIUL2_Superclass)
itkDivideByConstantImageFilterIUL2DIUL2_Superclass_swigregister = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL2DIUL2_Superclass_swigregister
itkDivideByConstantImageFilterIUL2DIUL2_Superclass_swigregister(itkDivideByConstantImageFilterIUL2DIUL2_Superclass)

def itkDivideByConstantImageFilterIUL2DIUL2_Superclass___New_orig__():
  """itkDivideByConstantImageFilterIUL2DIUL2_Superclass___New_orig__()"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL2DIUL2_Superclass___New_orig__()

def itkDivideByConstantImageFilterIUL2DIUL2_Superclass_cast(*args):
  """itkDivideByConstantImageFilterIUL2DIUL2_Superclass_cast(itkLightObject obj) -> itkDivideByConstantImageFilterIUL2DIUL2_Superclass"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL2DIUL2_Superclass_cast(*args)

class itkDivideByConstantImageFilterIUL3DIUL3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUL3):
    """Proxy of C++ itkDivideByConstantImageFilterIUL3DIUL3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL3DIUL3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::DivideByConstant<(unsigned long,double,unsigned long)>
        GetFunctor(self) -> itk::Functor::DivideByConstant<(unsigned long,double,unsigned long)>
        """
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL3DIUL3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::DivideByConstant<(unsigned long,double,unsigned long)> functor)"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL3DIUL3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideByConstantImageFilterPython.delete_itkDivideByConstantImageFilterIUL3DIUL3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideByConstantImageFilterIUL3DIUL3_Superclass"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL3DIUL3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideByConstantImageFilterIUL3DIUL3_Superclass"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL3DIUL3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideByConstantImageFilterIUL3DIUL3_Superclass
        
        Create a new object of the class itkDivideByConstantImageFilterIUL3DIUL3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideByConstantImageFilterIUL3DIUL3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideByConstantImageFilterIUL3DIUL3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideByConstantImageFilterIUL3DIUL3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideByConstantImageFilterIUL3DIUL3_Superclass.GetFunctor = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL3DIUL3_Superclass_GetFunctor,None,itkDivideByConstantImageFilterIUL3DIUL3_Superclass)
itkDivideByConstantImageFilterIUL3DIUL3_Superclass.SetFunctor = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL3DIUL3_Superclass_SetFunctor,None,itkDivideByConstantImageFilterIUL3DIUL3_Superclass)
itkDivideByConstantImageFilterIUL3DIUL3_Superclass.GetPointer = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL3DIUL3_Superclass_GetPointer,None,itkDivideByConstantImageFilterIUL3DIUL3_Superclass)
itkDivideByConstantImageFilterIUL3DIUL3_Superclass_swigregister = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL3DIUL3_Superclass_swigregister
itkDivideByConstantImageFilterIUL3DIUL3_Superclass_swigregister(itkDivideByConstantImageFilterIUL3DIUL3_Superclass)

def itkDivideByConstantImageFilterIUL3DIUL3_Superclass___New_orig__():
  """itkDivideByConstantImageFilterIUL3DIUL3_Superclass___New_orig__()"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL3DIUL3_Superclass___New_orig__()

def itkDivideByConstantImageFilterIUL3DIUL3_Superclass_cast(*args):
  """itkDivideByConstantImageFilterIUL3DIUL3_Superclass_cast(itkLightObject obj) -> itkDivideByConstantImageFilterIUL3DIUL3_Superclass"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL3DIUL3_Superclass_cast(*args)

class itkDivideByConstantImageFilterIUS2DIUS2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    """Proxy of C++ itkDivideByConstantImageFilterIUS2DIUS2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS2DIUS2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::DivideByConstant<(unsigned short,double,unsigned short)>
        GetFunctor(self) -> itk::Functor::DivideByConstant<(unsigned short,double,unsigned short)>
        """
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS2DIUS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::DivideByConstant<(unsigned short,double,unsigned short)> functor)"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS2DIUS2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideByConstantImageFilterPython.delete_itkDivideByConstantImageFilterIUS2DIUS2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideByConstantImageFilterIUS2DIUS2_Superclass"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS2DIUS2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideByConstantImageFilterIUS2DIUS2_Superclass"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS2DIUS2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideByConstantImageFilterIUS2DIUS2_Superclass
        
        Create a new object of the class itkDivideByConstantImageFilterIUS2DIUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideByConstantImageFilterIUS2DIUS2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideByConstantImageFilterIUS2DIUS2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideByConstantImageFilterIUS2DIUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideByConstantImageFilterIUS2DIUS2_Superclass.GetFunctor = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS2DIUS2_Superclass_GetFunctor,None,itkDivideByConstantImageFilterIUS2DIUS2_Superclass)
itkDivideByConstantImageFilterIUS2DIUS2_Superclass.SetFunctor = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS2DIUS2_Superclass_SetFunctor,None,itkDivideByConstantImageFilterIUS2DIUS2_Superclass)
itkDivideByConstantImageFilterIUS2DIUS2_Superclass.GetPointer = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS2DIUS2_Superclass_GetPointer,None,itkDivideByConstantImageFilterIUS2DIUS2_Superclass)
itkDivideByConstantImageFilterIUS2DIUS2_Superclass_swigregister = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS2DIUS2_Superclass_swigregister
itkDivideByConstantImageFilterIUS2DIUS2_Superclass_swigregister(itkDivideByConstantImageFilterIUS2DIUS2_Superclass)

def itkDivideByConstantImageFilterIUS2DIUS2_Superclass___New_orig__():
  """itkDivideByConstantImageFilterIUS2DIUS2_Superclass___New_orig__()"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS2DIUS2_Superclass___New_orig__()

def itkDivideByConstantImageFilterIUS2DIUS2_Superclass_cast(*args):
  """itkDivideByConstantImageFilterIUS2DIUS2_Superclass_cast(itkLightObject obj) -> itkDivideByConstantImageFilterIUS2DIUS2_Superclass"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS2DIUS2_Superclass_cast(*args)

class itkDivideByConstantImageFilterIUS3DIUS3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    """Proxy of C++ itkDivideByConstantImageFilterIUS3DIUS3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS3DIUS3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::DivideByConstant<(unsigned short,double,unsigned short)>
        GetFunctor(self) -> itk::Functor::DivideByConstant<(unsigned short,double,unsigned short)>
        """
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS3DIUS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::DivideByConstant<(unsigned short,double,unsigned short)> functor)"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS3DIUS3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideByConstantImageFilterPython.delete_itkDivideByConstantImageFilterIUS3DIUS3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideByConstantImageFilterIUS3DIUS3_Superclass"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS3DIUS3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideByConstantImageFilterIUS3DIUS3_Superclass"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS3DIUS3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideByConstantImageFilterIUS3DIUS3_Superclass
        
        Create a new object of the class itkDivideByConstantImageFilterIUS3DIUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideByConstantImageFilterIUS3DIUS3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideByConstantImageFilterIUS3DIUS3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideByConstantImageFilterIUS3DIUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideByConstantImageFilterIUS3DIUS3_Superclass.GetFunctor = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS3DIUS3_Superclass_GetFunctor,None,itkDivideByConstantImageFilterIUS3DIUS3_Superclass)
itkDivideByConstantImageFilterIUS3DIUS3_Superclass.SetFunctor = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS3DIUS3_Superclass_SetFunctor,None,itkDivideByConstantImageFilterIUS3DIUS3_Superclass)
itkDivideByConstantImageFilterIUS3DIUS3_Superclass.GetPointer = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS3DIUS3_Superclass_GetPointer,None,itkDivideByConstantImageFilterIUS3DIUS3_Superclass)
itkDivideByConstantImageFilterIUS3DIUS3_Superclass_swigregister = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS3DIUS3_Superclass_swigregister
itkDivideByConstantImageFilterIUS3DIUS3_Superclass_swigregister(itkDivideByConstantImageFilterIUS3DIUS3_Superclass)

def itkDivideByConstantImageFilterIUS3DIUS3_Superclass___New_orig__():
  """itkDivideByConstantImageFilterIUS3DIUS3_Superclass___New_orig__()"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS3DIUS3_Superclass___New_orig__()

def itkDivideByConstantImageFilterIUS3DIUS3_Superclass_cast(*args):
  """itkDivideByConstantImageFilterIUS3DIUS3_Superclass_cast(itkLightObject obj) -> itkDivideByConstantImageFilterIUS3DIUS3_Superclass"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS3DIUS3_Superclass_cast(*args)

class itkDivideByConstantImageFilterICF2CFICF2(itkDivideByConstantImageFilterICF2CFICF2_Superclass):
    """Proxy of C++ itkDivideByConstantImageFilterICF2CFICF2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToOutputCheck = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF2CFICF2_InputConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF2CFICF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetConstant(self, *args):
        """SetConstant(self, vcl_complexF ct)"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF2CFICF2_SetConstant(self, *args)

    def GetConstant(self):
        """GetConstant(self) -> vcl_complexF"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF2CFICF2_GetConstant(self)

    __swig_destroy__ = _itkDivideByConstantImageFilterPython.delete_itkDivideByConstantImageFilterICF2CFICF2
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideByConstantImageFilterICF2CFICF2"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF2CFICF2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideByConstantImageFilterICF2CFICF2"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF2CFICF2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideByConstantImageFilterICF2CFICF2
        
        Create a new object of the class itkDivideByConstantImageFilterICF2CFICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideByConstantImageFilterICF2CFICF2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideByConstantImageFilterICF2CFICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideByConstantImageFilterICF2CFICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideByConstantImageFilterICF2CFICF2.SetConstant = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF2CFICF2_SetConstant,None,itkDivideByConstantImageFilterICF2CFICF2)
itkDivideByConstantImageFilterICF2CFICF2.GetConstant = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF2CFICF2_GetConstant,None,itkDivideByConstantImageFilterICF2CFICF2)
itkDivideByConstantImageFilterICF2CFICF2.GetPointer = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF2CFICF2_GetPointer,None,itkDivideByConstantImageFilterICF2CFICF2)
itkDivideByConstantImageFilterICF2CFICF2_swigregister = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF2CFICF2_swigregister
itkDivideByConstantImageFilterICF2CFICF2_swigregister(itkDivideByConstantImageFilterICF2CFICF2)

def itkDivideByConstantImageFilterICF2CFICF2___New_orig__():
  """itkDivideByConstantImageFilterICF2CFICF2___New_orig__()"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF2CFICF2___New_orig__()

def itkDivideByConstantImageFilterICF2CFICF2_cast(*args):
  """itkDivideByConstantImageFilterICF2CFICF2_cast(itkLightObject obj) -> itkDivideByConstantImageFilterICF2CFICF2"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF2CFICF2_cast(*args)

class itkDivideByConstantImageFilterICF3CFICF3(itkDivideByConstantImageFilterICF3CFICF3_Superclass):
    """Proxy of C++ itkDivideByConstantImageFilterICF3CFICF3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToOutputCheck = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF3CFICF3_InputConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF3CFICF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetConstant(self, *args):
        """SetConstant(self, vcl_complexF ct)"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF3CFICF3_SetConstant(self, *args)

    def GetConstant(self):
        """GetConstant(self) -> vcl_complexF"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF3CFICF3_GetConstant(self)

    __swig_destroy__ = _itkDivideByConstantImageFilterPython.delete_itkDivideByConstantImageFilterICF3CFICF3
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideByConstantImageFilterICF3CFICF3"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF3CFICF3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideByConstantImageFilterICF3CFICF3"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF3CFICF3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideByConstantImageFilterICF3CFICF3
        
        Create a new object of the class itkDivideByConstantImageFilterICF3CFICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideByConstantImageFilterICF3CFICF3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideByConstantImageFilterICF3CFICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideByConstantImageFilterICF3CFICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideByConstantImageFilterICF3CFICF3.SetConstant = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF3CFICF3_SetConstant,None,itkDivideByConstantImageFilterICF3CFICF3)
itkDivideByConstantImageFilterICF3CFICF3.GetConstant = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF3CFICF3_GetConstant,None,itkDivideByConstantImageFilterICF3CFICF3)
itkDivideByConstantImageFilterICF3CFICF3.GetPointer = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF3CFICF3_GetPointer,None,itkDivideByConstantImageFilterICF3CFICF3)
itkDivideByConstantImageFilterICF3CFICF3_swigregister = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF3CFICF3_swigregister
itkDivideByConstantImageFilterICF3CFICF3_swigregister(itkDivideByConstantImageFilterICF3CFICF3)

def itkDivideByConstantImageFilterICF3CFICF3___New_orig__():
  """itkDivideByConstantImageFilterICF3CFICF3___New_orig__()"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF3CFICF3___New_orig__()

def itkDivideByConstantImageFilterICF3CFICF3_cast(*args):
  """itkDivideByConstantImageFilterICF3CFICF3_cast(itkLightObject obj) -> itkDivideByConstantImageFilterICF3CFICF3"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterICF3CFICF3_cast(*args)

class itkDivideByConstantImageFilterID2DID2(itkDivideByConstantImageFilterID2DID2_Superclass):
    """Proxy of C++ itkDivideByConstantImageFilterID2DID2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToOutputCheck = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID2DID2_InputConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID2DID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetConstant(self, *args):
        """SetConstant(self, double ct)"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID2DID2_SetConstant(self, *args)

    def GetConstant(self):
        """GetConstant(self) -> double"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID2DID2_GetConstant(self)

    __swig_destroy__ = _itkDivideByConstantImageFilterPython.delete_itkDivideByConstantImageFilterID2DID2
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideByConstantImageFilterID2DID2"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID2DID2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideByConstantImageFilterID2DID2"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID2DID2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideByConstantImageFilterID2DID2
        
        Create a new object of the class itkDivideByConstantImageFilterID2DID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideByConstantImageFilterID2DID2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideByConstantImageFilterID2DID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideByConstantImageFilterID2DID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideByConstantImageFilterID2DID2.SetConstant = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID2DID2_SetConstant,None,itkDivideByConstantImageFilterID2DID2)
itkDivideByConstantImageFilterID2DID2.GetConstant = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID2DID2_GetConstant,None,itkDivideByConstantImageFilterID2DID2)
itkDivideByConstantImageFilterID2DID2.GetPointer = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID2DID2_GetPointer,None,itkDivideByConstantImageFilterID2DID2)
itkDivideByConstantImageFilterID2DID2_swigregister = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID2DID2_swigregister
itkDivideByConstantImageFilterID2DID2_swigregister(itkDivideByConstantImageFilterID2DID2)

def itkDivideByConstantImageFilterID2DID2___New_orig__():
  """itkDivideByConstantImageFilterID2DID2___New_orig__()"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID2DID2___New_orig__()

def itkDivideByConstantImageFilterID2DID2_cast(*args):
  """itkDivideByConstantImageFilterID2DID2_cast(itkLightObject obj) -> itkDivideByConstantImageFilterID2DID2"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID2DID2_cast(*args)

class itkDivideByConstantImageFilterID3DID3(itkDivideByConstantImageFilterID3DID3_Superclass):
    """Proxy of C++ itkDivideByConstantImageFilterID3DID3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToOutputCheck = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID3DID3_InputConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID3DID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetConstant(self, *args):
        """SetConstant(self, double ct)"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID3DID3_SetConstant(self, *args)

    def GetConstant(self):
        """GetConstant(self) -> double"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID3DID3_GetConstant(self)

    __swig_destroy__ = _itkDivideByConstantImageFilterPython.delete_itkDivideByConstantImageFilterID3DID3
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideByConstantImageFilterID3DID3"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID3DID3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideByConstantImageFilterID3DID3"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID3DID3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideByConstantImageFilterID3DID3
        
        Create a new object of the class itkDivideByConstantImageFilterID3DID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideByConstantImageFilterID3DID3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideByConstantImageFilterID3DID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideByConstantImageFilterID3DID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideByConstantImageFilterID3DID3.SetConstant = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID3DID3_SetConstant,None,itkDivideByConstantImageFilterID3DID3)
itkDivideByConstantImageFilterID3DID3.GetConstant = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID3DID3_GetConstant,None,itkDivideByConstantImageFilterID3DID3)
itkDivideByConstantImageFilterID3DID3.GetPointer = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID3DID3_GetPointer,None,itkDivideByConstantImageFilterID3DID3)
itkDivideByConstantImageFilterID3DID3_swigregister = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID3DID3_swigregister
itkDivideByConstantImageFilterID3DID3_swigregister(itkDivideByConstantImageFilterID3DID3)

def itkDivideByConstantImageFilterID3DID3___New_orig__():
  """itkDivideByConstantImageFilterID3DID3___New_orig__()"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID3DID3___New_orig__()

def itkDivideByConstantImageFilterID3DID3_cast(*args):
  """itkDivideByConstantImageFilterID3DID3_cast(itkLightObject obj) -> itkDivideByConstantImageFilterID3DID3"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterID3DID3_cast(*args)

class itkDivideByConstantImageFilterIF2DIF2(itkDivideByConstantImageFilterIF2DIF2_Superclass):
    """Proxy of C++ itkDivideByConstantImageFilterIF2DIF2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToOutputCheck = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF2DIF2_InputConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF2DIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetConstant(self, *args):
        """SetConstant(self, double ct)"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF2DIF2_SetConstant(self, *args)

    def GetConstant(self):
        """GetConstant(self) -> double"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF2DIF2_GetConstant(self)

    __swig_destroy__ = _itkDivideByConstantImageFilterPython.delete_itkDivideByConstantImageFilterIF2DIF2
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideByConstantImageFilterIF2DIF2"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF2DIF2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideByConstantImageFilterIF2DIF2"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF2DIF2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideByConstantImageFilterIF2DIF2
        
        Create a new object of the class itkDivideByConstantImageFilterIF2DIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideByConstantImageFilterIF2DIF2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideByConstantImageFilterIF2DIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideByConstantImageFilterIF2DIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideByConstantImageFilterIF2DIF2.SetConstant = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF2DIF2_SetConstant,None,itkDivideByConstantImageFilterIF2DIF2)
itkDivideByConstantImageFilterIF2DIF2.GetConstant = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF2DIF2_GetConstant,None,itkDivideByConstantImageFilterIF2DIF2)
itkDivideByConstantImageFilterIF2DIF2.GetPointer = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF2DIF2_GetPointer,None,itkDivideByConstantImageFilterIF2DIF2)
itkDivideByConstantImageFilterIF2DIF2_swigregister = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF2DIF2_swigregister
itkDivideByConstantImageFilterIF2DIF2_swigregister(itkDivideByConstantImageFilterIF2DIF2)

def itkDivideByConstantImageFilterIF2DIF2___New_orig__():
  """itkDivideByConstantImageFilterIF2DIF2___New_orig__()"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF2DIF2___New_orig__()

def itkDivideByConstantImageFilterIF2DIF2_cast(*args):
  """itkDivideByConstantImageFilterIF2DIF2_cast(itkLightObject obj) -> itkDivideByConstantImageFilterIF2DIF2"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF2DIF2_cast(*args)

class itkDivideByConstantImageFilterIF3DIF3(itkDivideByConstantImageFilterIF3DIF3_Superclass):
    """Proxy of C++ itkDivideByConstantImageFilterIF3DIF3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToOutputCheck = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF3DIF3_InputConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF3DIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetConstant(self, *args):
        """SetConstant(self, double ct)"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF3DIF3_SetConstant(self, *args)

    def GetConstant(self):
        """GetConstant(self) -> double"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF3DIF3_GetConstant(self)

    __swig_destroy__ = _itkDivideByConstantImageFilterPython.delete_itkDivideByConstantImageFilterIF3DIF3
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideByConstantImageFilterIF3DIF3"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF3DIF3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideByConstantImageFilterIF3DIF3"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF3DIF3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideByConstantImageFilterIF3DIF3
        
        Create a new object of the class itkDivideByConstantImageFilterIF3DIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideByConstantImageFilterIF3DIF3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideByConstantImageFilterIF3DIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideByConstantImageFilterIF3DIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideByConstantImageFilterIF3DIF3.SetConstant = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF3DIF3_SetConstant,None,itkDivideByConstantImageFilterIF3DIF3)
itkDivideByConstantImageFilterIF3DIF3.GetConstant = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF3DIF3_GetConstant,None,itkDivideByConstantImageFilterIF3DIF3)
itkDivideByConstantImageFilterIF3DIF3.GetPointer = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF3DIF3_GetPointer,None,itkDivideByConstantImageFilterIF3DIF3)
itkDivideByConstantImageFilterIF3DIF3_swigregister = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF3DIF3_swigregister
itkDivideByConstantImageFilterIF3DIF3_swigregister(itkDivideByConstantImageFilterIF3DIF3)

def itkDivideByConstantImageFilterIF3DIF3___New_orig__():
  """itkDivideByConstantImageFilterIF3DIF3___New_orig__()"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF3DIF3___New_orig__()

def itkDivideByConstantImageFilterIF3DIF3_cast(*args):
  """itkDivideByConstantImageFilterIF3DIF3_cast(itkLightObject obj) -> itkDivideByConstantImageFilterIF3DIF3"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIF3DIF3_cast(*args)

class itkDivideByConstantImageFilterIUC2DIUC2(itkDivideByConstantImageFilterIUC2DIUC2_Superclass):
    """Proxy of C++ itkDivideByConstantImageFilterIUC2DIUC2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToOutputCheck = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC2DIUC2_InputConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC2DIUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetConstant(self, *args):
        """SetConstant(self, double ct)"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC2DIUC2_SetConstant(self, *args)

    def GetConstant(self):
        """GetConstant(self) -> double"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC2DIUC2_GetConstant(self)

    __swig_destroy__ = _itkDivideByConstantImageFilterPython.delete_itkDivideByConstantImageFilterIUC2DIUC2
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideByConstantImageFilterIUC2DIUC2"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC2DIUC2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideByConstantImageFilterIUC2DIUC2"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC2DIUC2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideByConstantImageFilterIUC2DIUC2
        
        Create a new object of the class itkDivideByConstantImageFilterIUC2DIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideByConstantImageFilterIUC2DIUC2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideByConstantImageFilterIUC2DIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideByConstantImageFilterIUC2DIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideByConstantImageFilterIUC2DIUC2.SetConstant = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC2DIUC2_SetConstant,None,itkDivideByConstantImageFilterIUC2DIUC2)
itkDivideByConstantImageFilterIUC2DIUC2.GetConstant = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC2DIUC2_GetConstant,None,itkDivideByConstantImageFilterIUC2DIUC2)
itkDivideByConstantImageFilterIUC2DIUC2.GetPointer = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC2DIUC2_GetPointer,None,itkDivideByConstantImageFilterIUC2DIUC2)
itkDivideByConstantImageFilterIUC2DIUC2_swigregister = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC2DIUC2_swigregister
itkDivideByConstantImageFilterIUC2DIUC2_swigregister(itkDivideByConstantImageFilterIUC2DIUC2)

def itkDivideByConstantImageFilterIUC2DIUC2___New_orig__():
  """itkDivideByConstantImageFilterIUC2DIUC2___New_orig__()"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC2DIUC2___New_orig__()

def itkDivideByConstantImageFilterIUC2DIUC2_cast(*args):
  """itkDivideByConstantImageFilterIUC2DIUC2_cast(itkLightObject obj) -> itkDivideByConstantImageFilterIUC2DIUC2"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC2DIUC2_cast(*args)

class itkDivideByConstantImageFilterIUC3DIUC3(itkDivideByConstantImageFilterIUC3DIUC3_Superclass):
    """Proxy of C++ itkDivideByConstantImageFilterIUC3DIUC3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToOutputCheck = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC3DIUC3_InputConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC3DIUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetConstant(self, *args):
        """SetConstant(self, double ct)"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC3DIUC3_SetConstant(self, *args)

    def GetConstant(self):
        """GetConstant(self) -> double"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC3DIUC3_GetConstant(self)

    __swig_destroy__ = _itkDivideByConstantImageFilterPython.delete_itkDivideByConstantImageFilterIUC3DIUC3
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideByConstantImageFilterIUC3DIUC3"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC3DIUC3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideByConstantImageFilterIUC3DIUC3"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC3DIUC3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideByConstantImageFilterIUC3DIUC3
        
        Create a new object of the class itkDivideByConstantImageFilterIUC3DIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideByConstantImageFilterIUC3DIUC3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideByConstantImageFilterIUC3DIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideByConstantImageFilterIUC3DIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideByConstantImageFilterIUC3DIUC3.SetConstant = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC3DIUC3_SetConstant,None,itkDivideByConstantImageFilterIUC3DIUC3)
itkDivideByConstantImageFilterIUC3DIUC3.GetConstant = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC3DIUC3_GetConstant,None,itkDivideByConstantImageFilterIUC3DIUC3)
itkDivideByConstantImageFilterIUC3DIUC3.GetPointer = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC3DIUC3_GetPointer,None,itkDivideByConstantImageFilterIUC3DIUC3)
itkDivideByConstantImageFilterIUC3DIUC3_swigregister = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC3DIUC3_swigregister
itkDivideByConstantImageFilterIUC3DIUC3_swigregister(itkDivideByConstantImageFilterIUC3DIUC3)

def itkDivideByConstantImageFilterIUC3DIUC3___New_orig__():
  """itkDivideByConstantImageFilterIUC3DIUC3___New_orig__()"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC3DIUC3___New_orig__()

def itkDivideByConstantImageFilterIUC3DIUC3_cast(*args):
  """itkDivideByConstantImageFilterIUC3DIUC3_cast(itkLightObject obj) -> itkDivideByConstantImageFilterIUC3DIUC3"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUC3DIUC3_cast(*args)

class itkDivideByConstantImageFilterIUL2DIUL2(itkDivideByConstantImageFilterIUL2DIUL2_Superclass):
    """Proxy of C++ itkDivideByConstantImageFilterIUL2DIUL2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToOutputCheck = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL2DIUL2_InputConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL2DIUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetConstant(self, *args):
        """SetConstant(self, double ct)"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL2DIUL2_SetConstant(self, *args)

    def GetConstant(self):
        """GetConstant(self) -> double"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL2DIUL2_GetConstant(self)

    __swig_destroy__ = _itkDivideByConstantImageFilterPython.delete_itkDivideByConstantImageFilterIUL2DIUL2
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideByConstantImageFilterIUL2DIUL2"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL2DIUL2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideByConstantImageFilterIUL2DIUL2"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL2DIUL2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideByConstantImageFilterIUL2DIUL2
        
        Create a new object of the class itkDivideByConstantImageFilterIUL2DIUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideByConstantImageFilterIUL2DIUL2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideByConstantImageFilterIUL2DIUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideByConstantImageFilterIUL2DIUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideByConstantImageFilterIUL2DIUL2.SetConstant = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL2DIUL2_SetConstant,None,itkDivideByConstantImageFilterIUL2DIUL2)
itkDivideByConstantImageFilterIUL2DIUL2.GetConstant = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL2DIUL2_GetConstant,None,itkDivideByConstantImageFilterIUL2DIUL2)
itkDivideByConstantImageFilterIUL2DIUL2.GetPointer = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL2DIUL2_GetPointer,None,itkDivideByConstantImageFilterIUL2DIUL2)
itkDivideByConstantImageFilterIUL2DIUL2_swigregister = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL2DIUL2_swigregister
itkDivideByConstantImageFilterIUL2DIUL2_swigregister(itkDivideByConstantImageFilterIUL2DIUL2)

def itkDivideByConstantImageFilterIUL2DIUL2___New_orig__():
  """itkDivideByConstantImageFilterIUL2DIUL2___New_orig__()"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL2DIUL2___New_orig__()

def itkDivideByConstantImageFilterIUL2DIUL2_cast(*args):
  """itkDivideByConstantImageFilterIUL2DIUL2_cast(itkLightObject obj) -> itkDivideByConstantImageFilterIUL2DIUL2"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL2DIUL2_cast(*args)

class itkDivideByConstantImageFilterIUL3DIUL3(itkDivideByConstantImageFilterIUL3DIUL3_Superclass):
    """Proxy of C++ itkDivideByConstantImageFilterIUL3DIUL3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToOutputCheck = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL3DIUL3_InputConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL3DIUL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetConstant(self, *args):
        """SetConstant(self, double ct)"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL3DIUL3_SetConstant(self, *args)

    def GetConstant(self):
        """GetConstant(self) -> double"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL3DIUL3_GetConstant(self)

    __swig_destroy__ = _itkDivideByConstantImageFilterPython.delete_itkDivideByConstantImageFilterIUL3DIUL3
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideByConstantImageFilterIUL3DIUL3"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL3DIUL3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideByConstantImageFilterIUL3DIUL3"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL3DIUL3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideByConstantImageFilterIUL3DIUL3
        
        Create a new object of the class itkDivideByConstantImageFilterIUL3DIUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideByConstantImageFilterIUL3DIUL3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideByConstantImageFilterIUL3DIUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideByConstantImageFilterIUL3DIUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideByConstantImageFilterIUL3DIUL3.SetConstant = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL3DIUL3_SetConstant,None,itkDivideByConstantImageFilterIUL3DIUL3)
itkDivideByConstantImageFilterIUL3DIUL3.GetConstant = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL3DIUL3_GetConstant,None,itkDivideByConstantImageFilterIUL3DIUL3)
itkDivideByConstantImageFilterIUL3DIUL3.GetPointer = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL3DIUL3_GetPointer,None,itkDivideByConstantImageFilterIUL3DIUL3)
itkDivideByConstantImageFilterIUL3DIUL3_swigregister = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL3DIUL3_swigregister
itkDivideByConstantImageFilterIUL3DIUL3_swigregister(itkDivideByConstantImageFilterIUL3DIUL3)

def itkDivideByConstantImageFilterIUL3DIUL3___New_orig__():
  """itkDivideByConstantImageFilterIUL3DIUL3___New_orig__()"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL3DIUL3___New_orig__()

def itkDivideByConstantImageFilterIUL3DIUL3_cast(*args):
  """itkDivideByConstantImageFilterIUL3DIUL3_cast(itkLightObject obj) -> itkDivideByConstantImageFilterIUL3DIUL3"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUL3DIUL3_cast(*args)

class itkDivideByConstantImageFilterIUS2DIUS2(itkDivideByConstantImageFilterIUS2DIUS2_Superclass):
    """Proxy of C++ itkDivideByConstantImageFilterIUS2DIUS2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToOutputCheck = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS2DIUS2_InputConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS2DIUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetConstant(self, *args):
        """SetConstant(self, double ct)"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS2DIUS2_SetConstant(self, *args)

    def GetConstant(self):
        """GetConstant(self) -> double"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS2DIUS2_GetConstant(self)

    __swig_destroy__ = _itkDivideByConstantImageFilterPython.delete_itkDivideByConstantImageFilterIUS2DIUS2
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideByConstantImageFilterIUS2DIUS2"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS2DIUS2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideByConstantImageFilterIUS2DIUS2"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS2DIUS2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideByConstantImageFilterIUS2DIUS2
        
        Create a new object of the class itkDivideByConstantImageFilterIUS2DIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideByConstantImageFilterIUS2DIUS2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideByConstantImageFilterIUS2DIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideByConstantImageFilterIUS2DIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideByConstantImageFilterIUS2DIUS2.SetConstant = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS2DIUS2_SetConstant,None,itkDivideByConstantImageFilterIUS2DIUS2)
itkDivideByConstantImageFilterIUS2DIUS2.GetConstant = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS2DIUS2_GetConstant,None,itkDivideByConstantImageFilterIUS2DIUS2)
itkDivideByConstantImageFilterIUS2DIUS2.GetPointer = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS2DIUS2_GetPointer,None,itkDivideByConstantImageFilterIUS2DIUS2)
itkDivideByConstantImageFilterIUS2DIUS2_swigregister = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS2DIUS2_swigregister
itkDivideByConstantImageFilterIUS2DIUS2_swigregister(itkDivideByConstantImageFilterIUS2DIUS2)

def itkDivideByConstantImageFilterIUS2DIUS2___New_orig__():
  """itkDivideByConstantImageFilterIUS2DIUS2___New_orig__()"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS2DIUS2___New_orig__()

def itkDivideByConstantImageFilterIUS2DIUS2_cast(*args):
  """itkDivideByConstantImageFilterIUS2DIUS2_cast(itkLightObject obj) -> itkDivideByConstantImageFilterIUS2DIUS2"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS2DIUS2_cast(*args)

class itkDivideByConstantImageFilterIUS3DIUS3(itkDivideByConstantImageFilterIUS3DIUS3_Superclass):
    """Proxy of C++ itkDivideByConstantImageFilterIUS3DIUS3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToOutputCheck = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS3DIUS3_InputConvertibleToOutputCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS3DIUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetConstant(self, *args):
        """SetConstant(self, double ct)"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS3DIUS3_SetConstant(self, *args)

    def GetConstant(self):
        """GetConstant(self) -> double"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS3DIUS3_GetConstant(self)

    __swig_destroy__ = _itkDivideByConstantImageFilterPython.delete_itkDivideByConstantImageFilterIUS3DIUS3
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideByConstantImageFilterIUS3DIUS3"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS3DIUS3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideByConstantImageFilterIUS3DIUS3"""
        return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS3DIUS3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideByConstantImageFilterIUS3DIUS3
        
        Create a new object of the class itkDivideByConstantImageFilterIUS3DIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideByConstantImageFilterIUS3DIUS3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideByConstantImageFilterIUS3DIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideByConstantImageFilterIUS3DIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideByConstantImageFilterIUS3DIUS3.SetConstant = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS3DIUS3_SetConstant,None,itkDivideByConstantImageFilterIUS3DIUS3)
itkDivideByConstantImageFilterIUS3DIUS3.GetConstant = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS3DIUS3_GetConstant,None,itkDivideByConstantImageFilterIUS3DIUS3)
itkDivideByConstantImageFilterIUS3DIUS3.GetPointer = new_instancemethod(_itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS3DIUS3_GetPointer,None,itkDivideByConstantImageFilterIUS3DIUS3)
itkDivideByConstantImageFilterIUS3DIUS3_swigregister = _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS3DIUS3_swigregister
itkDivideByConstantImageFilterIUS3DIUS3_swigregister(itkDivideByConstantImageFilterIUS3DIUS3)

def itkDivideByConstantImageFilterIUS3DIUS3___New_orig__():
  """itkDivideByConstantImageFilterIUS3DIUS3___New_orig__()"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS3DIUS3___New_orig__()

def itkDivideByConstantImageFilterIUS3DIUS3_cast(*args):
  """itkDivideByConstantImageFilterIUS3DIUS3_cast(itkLightObject obj) -> itkDivideByConstantImageFilterIUS3DIUS3"""
  return _itkDivideByConstantImageFilterPython.itkDivideByConstantImageFilterIUS3DIUS3_cast(*args)



