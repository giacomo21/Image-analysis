// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkMapContainerChicken
#endif
#ifdef SWIGCSHARP
%module itkMapContainerCsharp
#endif
#ifdef SWIGGUILE
%module itkMapContainerGuile
#endif
#ifdef SWIGJAVA
%module itkMapContainerJava
#endif
#ifdef SWIGLUA
%module itkMapContainerLua
#endif
#ifdef SWIGMODULA3
%module itkMapContainerModula3
#endif
#ifdef SWIGMZSCHEME
%module itkMapContainerMzscheme
#endif
#ifdef SWIGOCAML
%module itkMapContainerOcaml
#endif
#ifdef SWIGPERL
%module itkMapContainerPerl
#endif
#ifdef SWIGPERL5
%module itkMapContainerPerl5
#endif
#ifdef SWIGPHP
%module itkMapContainerPhp
#endif
#ifdef SWIGPHP4
%module itkMapContainerPhp4
#endif
#ifdef SWIGPHP5
%module itkMapContainerPhp5
#endif
#ifdef SWIGPIKE
%module itkMapContainerPike
#endif
#ifdef SWIGPYTHON
%module itkMapContainerPython
#endif
#ifdef SWIGR
%module itkMapContainerR
#endif
#ifdef SWIGRUBY
%module itkMapContainerRuby
#endif
#ifdef SWIGSEXP
%module itkMapContainerSexp
#endif
#ifdef SWIGTCL
%module itkMapContainerTcl
#endif
#ifdef SWIGXML
%module itkMapContainerXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkPoint.i
%import wrap_itkVector.i


%include itk.i
%include wrap_itkMapContainer_ext.i


 class itkMapContainerULD : public itkObject, public std::map< unsigned long, double, std::less< unsigned long > > {
   public:
     virtual char const * GetNameOfClass() const;
     itkMapContainerULD();
     itkMapContainerULD(std::less< unsigned long > const & comp);
     static itkMapContainerULD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     std::map< unsigned long, double, std::less< unsigned long > > & CastToSTLContainer();
     std::map< unsigned long, double, std::less< unsigned long > > const & CastToSTLConstContainer() const;
     double & ElementAt(unsigned long arg0);
     double const & ElementAt(unsigned long arg0) const;
     double & CreateElementAt(unsigned long arg0);
     double GetElement(unsigned long arg0) const;
     void SetElement(unsigned long arg0, double arg1);
     void InsertElement(unsigned long arg0, double arg1);
     bool IndexExists(unsigned long arg0) const;
     bool GetElementIfIndexExists(unsigned long arg0, double * arg1) const;
     void CreateIndex(unsigned long arg0);
     void DeleteIndex(unsigned long arg0);
     unsigned long Size() const;
     void Reserve(unsigned long arg0);
     void Squeeze();
     void Initialize();
     ~itkMapContainerULD();
   private:
     itkMapContainerULD(itkMapContainerULD const & arg0);
     void operator=(itkMapContainerULD const & arg0);
   protected:
 };


 class itkMapContainerULD_Pointer {
   public:
     itkMapContainerULD_Pointer();
     itkMapContainerULD_Pointer(itkMapContainerULD_Pointer const & p);
     itkMapContainerULD_Pointer(itkMapContainerULD * p);
     ~itkMapContainerULD_Pointer();
     itkMapContainerULD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMapContainerULD * GetPointer() const;
     bool operator<(itkMapContainerULD_Pointer const & r) const;
     bool operator>(itkMapContainerULD_Pointer const & r) const;
     bool operator<=(itkMapContainerULD_Pointer const & r) const;
     bool operator>=(itkMapContainerULD_Pointer const & r) const;
     itkMapContainerULD_Pointer & operator=(itkMapContainerULD_Pointer const & r);
     itkMapContainerULD_Pointer & operator=(itkMapContainerULD * r);
     itkMapContainerULD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMapContainerULPD2 : public itkObject, public std::map< unsigned long, itkPointD2, std::less< unsigned long > > {
   public:
     virtual char const * GetNameOfClass() const;
     itkMapContainerULPD2();
     itkMapContainerULPD2(std::less< unsigned long > const & comp);
     static itkMapContainerULPD2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     std::map< unsigned long, itkPointD2, std::less< unsigned long > > & CastToSTLContainer();
     std::map< unsigned long, itkPointD2, std::less< unsigned long > > const & CastToSTLConstContainer() const;
     itkPointD2 & ElementAt(unsigned long arg0);
     itkPointD2 const & ElementAt(unsigned long arg0) const;
     itkPointD2 & CreateElementAt(unsigned long arg0);
     itkPointD2 GetElement(unsigned long arg0) const;
     void SetElement(unsigned long arg0, itkPointD2 arg1);
     void InsertElement(unsigned long arg0, itkPointD2 arg1);
     bool IndexExists(unsigned long arg0) const;
     bool GetElementIfIndexExists(unsigned long arg0, itkPointD2 * arg1) const;
     void CreateIndex(unsigned long arg0);
     void DeleteIndex(unsigned long arg0);
     unsigned long Size() const;
     void Reserve(unsigned long arg0);
     void Squeeze();
     void Initialize();
     ~itkMapContainerULPD2();
   private:
     itkMapContainerULPD2(itkMapContainerULPD2 const & arg0);
     void operator=(itkMapContainerULPD2 const & arg0);
   protected:
 };


 class itkMapContainerULPD2_Pointer {
   public:
     itkMapContainerULPD2_Pointer();
     itkMapContainerULPD2_Pointer(itkMapContainerULPD2_Pointer const & p);
     itkMapContainerULPD2_Pointer(itkMapContainerULPD2 * p);
     ~itkMapContainerULPD2_Pointer();
     itkMapContainerULPD2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMapContainerULPD2 * GetPointer() const;
     bool operator<(itkMapContainerULPD2_Pointer const & r) const;
     bool operator>(itkMapContainerULPD2_Pointer const & r) const;
     bool operator<=(itkMapContainerULPD2_Pointer const & r) const;
     bool operator>=(itkMapContainerULPD2_Pointer const & r) const;
     itkMapContainerULPD2_Pointer & operator=(itkMapContainerULPD2_Pointer const & r);
     itkMapContainerULPD2_Pointer & operator=(itkMapContainerULPD2 * r);
     itkMapContainerULPD2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMapContainerULPD3 : public itkObject, public std::map< unsigned long, itkPointD3, std::less< unsigned long > > {
   public:
     virtual char const * GetNameOfClass() const;
     itkMapContainerULPD3();
     itkMapContainerULPD3(std::less< unsigned long > const & comp);
     static itkMapContainerULPD3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     std::map< unsigned long, itkPointD3, std::less< unsigned long > > & CastToSTLContainer();
     std::map< unsigned long, itkPointD3, std::less< unsigned long > > const & CastToSTLConstContainer() const;
     itkPointD3 & ElementAt(unsigned long arg0);
     itkPointD3 const & ElementAt(unsigned long arg0) const;
     itkPointD3 & CreateElementAt(unsigned long arg0);
     itkPointD3 GetElement(unsigned long arg0) const;
     void SetElement(unsigned long arg0, itkPointD3 arg1);
     void InsertElement(unsigned long arg0, itkPointD3 arg1);
     bool IndexExists(unsigned long arg0) const;
     bool GetElementIfIndexExists(unsigned long arg0, itkPointD3 * arg1) const;
     void CreateIndex(unsigned long arg0);
     void DeleteIndex(unsigned long arg0);
     unsigned long Size() const;
     void Reserve(unsigned long arg0);
     void Squeeze();
     void Initialize();
     ~itkMapContainerULPD3();
   private:
     itkMapContainerULPD3(itkMapContainerULPD3 const & arg0);
     void operator=(itkMapContainerULPD3 const & arg0);
   protected:
 };


 class itkMapContainerULPD3_Pointer {
   public:
     itkMapContainerULPD3_Pointer();
     itkMapContainerULPD3_Pointer(itkMapContainerULPD3_Pointer const & p);
     itkMapContainerULPD3_Pointer(itkMapContainerULPD3 * p);
     ~itkMapContainerULPD3_Pointer();
     itkMapContainerULPD3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMapContainerULPD3 * GetPointer() const;
     bool operator<(itkMapContainerULPD3_Pointer const & r) const;
     bool operator>(itkMapContainerULPD3_Pointer const & r) const;
     bool operator<=(itkMapContainerULPD3_Pointer const & r) const;
     bool operator>=(itkMapContainerULPD3_Pointer const & r) const;
     itkMapContainerULPD3_Pointer & operator=(itkMapContainerULPD3_Pointer const & r);
     itkMapContainerULPD3_Pointer & operator=(itkMapContainerULPD3 * r);
     itkMapContainerULPD3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMapContainerULSUL : public itkObject, public std::map< unsigned long, std::set< unsigned long, std::less< unsigned long > >, std::less< unsigned long > > {
   public:
     virtual char const * GetNameOfClass() const;
     itkMapContainerULSUL();
     itkMapContainerULSUL(std::less< unsigned long > const & comp);
     static itkMapContainerULSUL_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     std::map< unsigned long, std::set< unsigned long, std::less< unsigned long > >, std::less< unsigned long > > & CastToSTLContainer();
     std::map< unsigned long, std::set< unsigned long, std::less< unsigned long > >, std::less< unsigned long > > const & CastToSTLConstContainer() const;
     std::set< unsigned long, std::less< unsigned long > > & ElementAt(unsigned long arg0);
     std::set< unsigned long, std::less< unsigned long > > const & ElementAt(unsigned long arg0) const;
     std::set< unsigned long, std::less< unsigned long > > & CreateElementAt(unsigned long arg0);
     std::set< unsigned long, std::less< unsigned long > > GetElement(unsigned long arg0) const;
     void SetElement(unsigned long arg0, std::set< unsigned long, std::less< unsigned long > > arg1);
     void InsertElement(unsigned long arg0, std::set< unsigned long, std::less< unsigned long > > arg1);
     bool IndexExists(unsigned long arg0) const;
     bool GetElementIfIndexExists(unsigned long arg0, std::set< unsigned long, std::less< unsigned long > > * arg1) const;
     void CreateIndex(unsigned long arg0);
     void DeleteIndex(unsigned long arg0);
     unsigned long Size() const;
     void Reserve(unsigned long arg0);
     void Squeeze();
     void Initialize();
     ~itkMapContainerULSUL();
   private:
     itkMapContainerULSUL(itkMapContainerULSUL const & arg0);
     void operator=(itkMapContainerULSUL const & arg0);
   protected:
 };


 class itkMapContainerULSUL_Pointer {
   public:
     itkMapContainerULSUL_Pointer();
     itkMapContainerULSUL_Pointer(itkMapContainerULSUL_Pointer const & p);
     itkMapContainerULSUL_Pointer(itkMapContainerULSUL * p);
     ~itkMapContainerULSUL_Pointer();
     itkMapContainerULSUL * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMapContainerULSUL * GetPointer() const;
     bool operator<(itkMapContainerULSUL_Pointer const & r) const;
     bool operator>(itkMapContainerULSUL_Pointer const & r) const;
     bool operator<=(itkMapContainerULSUL_Pointer const & r) const;
     bool operator>=(itkMapContainerULSUL_Pointer const & r) const;
     itkMapContainerULSUL_Pointer & operator=(itkMapContainerULSUL_Pointer const & r);
     itkMapContainerULSUL_Pointer & operator=(itkMapContainerULSUL * r);
     itkMapContainerULSUL * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMapContainerULVD2 : public itkObject, public std::map< unsigned long, itkVectorD2, std::less< unsigned long > > {
   public:
     virtual char const * GetNameOfClass() const;
     itkMapContainerULVD2();
     itkMapContainerULVD2(std::less< unsigned long > const & comp);
     static itkMapContainerULVD2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     std::map< unsigned long, itkVectorD2, std::less< unsigned long > > & CastToSTLContainer();
     std::map< unsigned long, itkVectorD2, std::less< unsigned long > > const & CastToSTLConstContainer() const;
     itkVectorD2 & ElementAt(unsigned long arg0);
     itkVectorD2 const & ElementAt(unsigned long arg0) const;
     itkVectorD2 & CreateElementAt(unsigned long arg0);
     itkVectorD2 GetElement(unsigned long arg0) const;
     void SetElement(unsigned long arg0, itkVectorD2 arg1);
     void InsertElement(unsigned long arg0, itkVectorD2 arg1);
     bool IndexExists(unsigned long arg0) const;
     bool GetElementIfIndexExists(unsigned long arg0, itkVectorD2 * arg1) const;
     void CreateIndex(unsigned long arg0);
     void DeleteIndex(unsigned long arg0);
     unsigned long Size() const;
     void Reserve(unsigned long arg0);
     void Squeeze();
     void Initialize();
     ~itkMapContainerULVD2();
   private:
     itkMapContainerULVD2(itkMapContainerULVD2 const & arg0);
     void operator=(itkMapContainerULVD2 const & arg0);
   protected:
 };


 class itkMapContainerULVD2_Pointer {
   public:
     itkMapContainerULVD2_Pointer();
     itkMapContainerULVD2_Pointer(itkMapContainerULVD2_Pointer const & p);
     itkMapContainerULVD2_Pointer(itkMapContainerULVD2 * p);
     ~itkMapContainerULVD2_Pointer();
     itkMapContainerULVD2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMapContainerULVD2 * GetPointer() const;
     bool operator<(itkMapContainerULVD2_Pointer const & r) const;
     bool operator>(itkMapContainerULVD2_Pointer const & r) const;
     bool operator<=(itkMapContainerULVD2_Pointer const & r) const;
     bool operator>=(itkMapContainerULVD2_Pointer const & r) const;
     itkMapContainerULVD2_Pointer & operator=(itkMapContainerULVD2_Pointer const & r);
     itkMapContainerULVD2_Pointer & operator=(itkMapContainerULVD2 * r);
     itkMapContainerULVD2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMapContainerULVD3 : public itkObject, public std::map< unsigned long, itkVectorD3, std::less< unsigned long > > {
   public:
     virtual char const * GetNameOfClass() const;
     itkMapContainerULVD3();
     itkMapContainerULVD3(std::less< unsigned long > const & comp);
     static itkMapContainerULVD3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     std::map< unsigned long, itkVectorD3, std::less< unsigned long > > & CastToSTLContainer();
     std::map< unsigned long, itkVectorD3, std::less< unsigned long > > const & CastToSTLConstContainer() const;
     itkVectorD3 & ElementAt(unsigned long arg0);
     itkVectorD3 const & ElementAt(unsigned long arg0) const;
     itkVectorD3 & CreateElementAt(unsigned long arg0);
     itkVectorD3 GetElement(unsigned long arg0) const;
     void SetElement(unsigned long arg0, itkVectorD3 arg1);
     void InsertElement(unsigned long arg0, itkVectorD3 arg1);
     bool IndexExists(unsigned long arg0) const;
     bool GetElementIfIndexExists(unsigned long arg0, itkVectorD3 * arg1) const;
     void CreateIndex(unsigned long arg0);
     void DeleteIndex(unsigned long arg0);
     unsigned long Size() const;
     void Reserve(unsigned long arg0);
     void Squeeze();
     void Initialize();
     ~itkMapContainerULVD3();
   private:
     itkMapContainerULVD3(itkMapContainerULVD3 const & arg0);
     void operator=(itkMapContainerULVD3 const & arg0);
   protected:
 };


 class itkMapContainerULVD3_Pointer {
   public:
     itkMapContainerULVD3_Pointer();
     itkMapContainerULVD3_Pointer(itkMapContainerULVD3_Pointer const & p);
     itkMapContainerULVD3_Pointer(itkMapContainerULVD3 * p);
     ~itkMapContainerULVD3_Pointer();
     itkMapContainerULVD3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMapContainerULVD3 * GetPointer() const;
     bool operator<(itkMapContainerULVD3_Pointer const & r) const;
     bool operator>(itkMapContainerULVD3_Pointer const & r) const;
     bool operator<=(itkMapContainerULVD3_Pointer const & r) const;
     bool operator>=(itkMapContainerULVD3_Pointer const & r) const;
     itkMapContainerULVD3_Pointer & operator=(itkMapContainerULVD3_Pointer const & r);
     itkMapContainerULVD3_Pointer & operator=(itkMapContainerULVD3 * r);
     itkMapContainerULVD3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


