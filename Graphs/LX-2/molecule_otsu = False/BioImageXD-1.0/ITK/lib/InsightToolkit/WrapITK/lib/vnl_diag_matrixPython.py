# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _vnl_diag_matrixPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vnl_diag_matrixPython', [dirname(__file__)])
        except ImportError:
            import _vnl_diag_matrixPython
            return _vnl_diag_matrixPython
        if fp is not None:
            try:
                _mod = imp.load_module('_vnl_diag_matrixPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _vnl_diag_matrixPython = swig_import_helper()
    del swig_import_helper
else:
    import _vnl_diag_matrixPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import vnl_vectorPython
import vcl_complexPython
import pyBasePython
import vnl_matrixPython
class vnl_diag_matrixD(object):
    """Proxy of C++ vnl_diag_matrixD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, vnl_diag_matrixD arg0) -> vnl_diag_matrixD
        __init__(self) -> vnl_diag_matrixD
        __init__(self, unsigned int nn) -> vnl_diag_matrixD
        __init__(self, unsigned int nn, double value) -> vnl_diag_matrixD
        __init__(self, vnl_vectorD that) -> vnl_diag_matrixD
        """
        _vnl_diag_matrixPython.vnl_diag_matrixD_swiginit(self,_vnl_diag_matrixPython.new_vnl_diag_matrixD(*args))
    __swig_destroy__ = _vnl_diag_matrixPython.delete_vnl_diag_matrixD
    def __imul__(self, *args):
        """__imul__(self, double v) -> vnl_diag_matrixD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD___imul__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, double v) -> vnl_diag_matrixD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD___idiv__(self, *args)

    def invert_in_place(self):
        """invert_in_place(self)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_invert_in_place(self)

    def determinant(self):
        """determinant(self) -> double"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_determinant(self)

    def solve(self, *args):
        """
        solve(self, vnl_vectorD b) -> vnl_vectorD
        solve(self, vnl_vectorD b, vnl_vectorD out)
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixD_solve(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int i, unsigned int j) -> double
        __call__(self, unsigned int i, unsigned int j) -> double
        __call__(self, unsigned int i) -> double
        __call__(self, unsigned int i) -> double
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixD___call__(self, *args)

    def put(self, *args):
        """put(self, unsigned int r, unsigned int c, double v)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int r, unsigned int c) -> double"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_get(self, *args)

    def fill_diagonal(self, *args):
        """fill_diagonal(self, double v)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_fill_diagonal(self, *args)

    def begin(self, *args):
        """
        begin(self) -> double
        begin(self) -> double
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixD_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> double
        end(self) -> double
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixD_end(self, *args)

    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_size(self)

    def rows(self):
        """rows(self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_rows(self)

    def cols(self):
        """cols(self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_cols(self)

    def columns(self):
        """columns(self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_columns(self)

    def asMatrix(self):
        """asMatrix(self) -> vnl_matrixD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_asMatrix(self)

    def set_size(self, *args):
        """set_size(self, int n)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_set_size(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_clear(self)

    def fill(self, *args):
        """fill(self, double x)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_fill(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> double
        data_block(self) -> double
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixD_data_block(self, *args)

    def diagonal(self):
        """diagonal(self) -> vnl_vectorD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_diagonal(self)

    def set(self, *args):
        """set(self, vnl_vectorD v)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixD_set(self, *args)

vnl_diag_matrixD.__imul__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD___imul__,None,vnl_diag_matrixD)
vnl_diag_matrixD.__idiv__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD___idiv__,None,vnl_diag_matrixD)
vnl_diag_matrixD.invert_in_place = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_invert_in_place,None,vnl_diag_matrixD)
vnl_diag_matrixD.determinant = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_determinant,None,vnl_diag_matrixD)
vnl_diag_matrixD.solve = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_solve,None,vnl_diag_matrixD)
vnl_diag_matrixD.__call__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD___call__,None,vnl_diag_matrixD)
vnl_diag_matrixD.put = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_put,None,vnl_diag_matrixD)
vnl_diag_matrixD.get = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_get,None,vnl_diag_matrixD)
vnl_diag_matrixD.fill_diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_fill_diagonal,None,vnl_diag_matrixD)
vnl_diag_matrixD.begin = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_begin,None,vnl_diag_matrixD)
vnl_diag_matrixD.end = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_end,None,vnl_diag_matrixD)
vnl_diag_matrixD.size = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_size,None,vnl_diag_matrixD)
vnl_diag_matrixD.rows = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_rows,None,vnl_diag_matrixD)
vnl_diag_matrixD.cols = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_cols,None,vnl_diag_matrixD)
vnl_diag_matrixD.columns = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_columns,None,vnl_diag_matrixD)
vnl_diag_matrixD.asMatrix = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_asMatrix,None,vnl_diag_matrixD)
vnl_diag_matrixD.set_size = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_set_size,None,vnl_diag_matrixD)
vnl_diag_matrixD.clear = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_clear,None,vnl_diag_matrixD)
vnl_diag_matrixD.fill = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_fill,None,vnl_diag_matrixD)
vnl_diag_matrixD.data_block = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_data_block,None,vnl_diag_matrixD)
vnl_diag_matrixD.diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_diagonal,None,vnl_diag_matrixD)
vnl_diag_matrixD.set = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixD_set,None,vnl_diag_matrixD)
vnl_diag_matrixD_swigregister = _vnl_diag_matrixPython.vnl_diag_matrixD_swigregister
vnl_diag_matrixD_swigregister(vnl_diag_matrixD)

class vnl_diag_matrixF(object):
    """Proxy of C++ vnl_diag_matrixF class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, vnl_diag_matrixF arg0) -> vnl_diag_matrixF
        __init__(self) -> vnl_diag_matrixF
        __init__(self, unsigned int nn) -> vnl_diag_matrixF
        __init__(self, unsigned int nn, float value) -> vnl_diag_matrixF
        __init__(self, vnl_vectorF that) -> vnl_diag_matrixF
        """
        _vnl_diag_matrixPython.vnl_diag_matrixF_swiginit(self,_vnl_diag_matrixPython.new_vnl_diag_matrixF(*args))
    __swig_destroy__ = _vnl_diag_matrixPython.delete_vnl_diag_matrixF
    def __imul__(self, *args):
        """__imul__(self, float v) -> vnl_diag_matrixF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF___imul__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, float v) -> vnl_diag_matrixF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF___idiv__(self, *args)

    def invert_in_place(self):
        """invert_in_place(self)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_invert_in_place(self)

    def determinant(self):
        """determinant(self) -> float"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_determinant(self)

    def solve(self, *args):
        """
        solve(self, vnl_vectorF b) -> vnl_vectorF
        solve(self, vnl_vectorF b, vnl_vectorF out)
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixF_solve(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int i, unsigned int j) -> float
        __call__(self, unsigned int i, unsigned int j) -> float
        __call__(self, unsigned int i) -> float
        __call__(self, unsigned int i) -> float
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixF___call__(self, *args)

    def put(self, *args):
        """put(self, unsigned int r, unsigned int c, float v)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int r, unsigned int c) -> float"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_get(self, *args)

    def fill_diagonal(self, *args):
        """fill_diagonal(self, float v)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_fill_diagonal(self, *args)

    def begin(self, *args):
        """
        begin(self) -> float
        begin(self) -> float
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixF_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> float
        end(self) -> float
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixF_end(self, *args)

    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_size(self)

    def rows(self):
        """rows(self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_rows(self)

    def cols(self):
        """cols(self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_cols(self)

    def columns(self):
        """columns(self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_columns(self)

    def asMatrix(self):
        """asMatrix(self) -> vnl_matrixF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_asMatrix(self)

    def set_size(self, *args):
        """set_size(self, int n)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_set_size(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_clear(self)

    def fill(self, *args):
        """fill(self, float x)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_fill(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> float
        data_block(self) -> float
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixF_data_block(self, *args)

    def diagonal(self):
        """diagonal(self) -> vnl_vectorF"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_diagonal(self)

    def set(self, *args):
        """set(self, vnl_vectorF v)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixF_set(self, *args)

vnl_diag_matrixF.__imul__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF___imul__,None,vnl_diag_matrixF)
vnl_diag_matrixF.__idiv__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF___idiv__,None,vnl_diag_matrixF)
vnl_diag_matrixF.invert_in_place = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_invert_in_place,None,vnl_diag_matrixF)
vnl_diag_matrixF.determinant = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_determinant,None,vnl_diag_matrixF)
vnl_diag_matrixF.solve = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_solve,None,vnl_diag_matrixF)
vnl_diag_matrixF.__call__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF___call__,None,vnl_diag_matrixF)
vnl_diag_matrixF.put = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_put,None,vnl_diag_matrixF)
vnl_diag_matrixF.get = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_get,None,vnl_diag_matrixF)
vnl_diag_matrixF.fill_diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_fill_diagonal,None,vnl_diag_matrixF)
vnl_diag_matrixF.begin = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_begin,None,vnl_diag_matrixF)
vnl_diag_matrixF.end = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_end,None,vnl_diag_matrixF)
vnl_diag_matrixF.size = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_size,None,vnl_diag_matrixF)
vnl_diag_matrixF.rows = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_rows,None,vnl_diag_matrixF)
vnl_diag_matrixF.cols = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_cols,None,vnl_diag_matrixF)
vnl_diag_matrixF.columns = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_columns,None,vnl_diag_matrixF)
vnl_diag_matrixF.asMatrix = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_asMatrix,None,vnl_diag_matrixF)
vnl_diag_matrixF.set_size = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_set_size,None,vnl_diag_matrixF)
vnl_diag_matrixF.clear = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_clear,None,vnl_diag_matrixF)
vnl_diag_matrixF.fill = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_fill,None,vnl_diag_matrixF)
vnl_diag_matrixF.data_block = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_data_block,None,vnl_diag_matrixF)
vnl_diag_matrixF.diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_diagonal,None,vnl_diag_matrixF)
vnl_diag_matrixF.set = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixF_set,None,vnl_diag_matrixF)
vnl_diag_matrixF_swigregister = _vnl_diag_matrixPython.vnl_diag_matrixF_swigregister
vnl_diag_matrixF_swigregister(vnl_diag_matrixF)

class vnl_diag_matrixLD(object):
    """Proxy of C++ vnl_diag_matrixLD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, vnl_diag_matrixLD arg0) -> vnl_diag_matrixLD
        __init__(self) -> vnl_diag_matrixLD
        __init__(self, unsigned int nn) -> vnl_diag_matrixLD
        __init__(self, unsigned int nn, long double value) -> vnl_diag_matrixLD
        __init__(self, vnl_vectorLD that) -> vnl_diag_matrixLD
        """
        _vnl_diag_matrixPython.vnl_diag_matrixLD_swiginit(self,_vnl_diag_matrixPython.new_vnl_diag_matrixLD(*args))
    __swig_destroy__ = _vnl_diag_matrixPython.delete_vnl_diag_matrixLD
    def __imul__(self, *args):
        """__imul__(self, long double v) -> vnl_diag_matrixLD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD___imul__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, long double v) -> vnl_diag_matrixLD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD___idiv__(self, *args)

    def invert_in_place(self):
        """invert_in_place(self)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_invert_in_place(self)

    def determinant(self):
        """determinant(self) -> long double"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_determinant(self)

    def solve(self, *args):
        """
        solve(self, vnl_vectorLD b) -> vnl_vectorLD
        solve(self, vnl_vectorLD b, vnl_vectorLD out)
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_solve(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int i, unsigned int j) -> long double
        __call__(self, unsigned int i, unsigned int j) -> long double
        __call__(self, unsigned int i) -> long double
        __call__(self, unsigned int i) -> long double
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixLD___call__(self, *args)

    def put(self, *args):
        """put(self, unsigned int r, unsigned int c, long double v)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int r, unsigned int c) -> long double"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_get(self, *args)

    def fill_diagonal(self, *args):
        """fill_diagonal(self, long double v)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_fill_diagonal(self, *args)

    def begin(self, *args):
        """
        begin(self) -> long double
        begin(self) -> long double
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> long double
        end(self) -> long double
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_end(self, *args)

    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_size(self)

    def rows(self):
        """rows(self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_rows(self)

    def cols(self):
        """cols(self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_cols(self)

    def columns(self):
        """columns(self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_columns(self)

    def asMatrix(self):
        """asMatrix(self) -> vnl_matrixLD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_asMatrix(self)

    def set_size(self, *args):
        """set_size(self, int n)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_set_size(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_clear(self)

    def fill(self, *args):
        """fill(self, long double x)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_fill(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> long double
        data_block(self) -> long double
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_data_block(self, *args)

    def diagonal(self):
        """diagonal(self) -> vnl_vectorLD"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_diagonal(self)

    def set(self, *args):
        """set(self, vnl_vectorLD v)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixLD_set(self, *args)

vnl_diag_matrixLD.__imul__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD___imul__,None,vnl_diag_matrixLD)
vnl_diag_matrixLD.__idiv__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD___idiv__,None,vnl_diag_matrixLD)
vnl_diag_matrixLD.invert_in_place = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_invert_in_place,None,vnl_diag_matrixLD)
vnl_diag_matrixLD.determinant = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_determinant,None,vnl_diag_matrixLD)
vnl_diag_matrixLD.solve = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_solve,None,vnl_diag_matrixLD)
vnl_diag_matrixLD.__call__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD___call__,None,vnl_diag_matrixLD)
vnl_diag_matrixLD.put = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_put,None,vnl_diag_matrixLD)
vnl_diag_matrixLD.get = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_get,None,vnl_diag_matrixLD)
vnl_diag_matrixLD.fill_diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_fill_diagonal,None,vnl_diag_matrixLD)
vnl_diag_matrixLD.begin = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_begin,None,vnl_diag_matrixLD)
vnl_diag_matrixLD.end = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_end,None,vnl_diag_matrixLD)
vnl_diag_matrixLD.size = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_size,None,vnl_diag_matrixLD)
vnl_diag_matrixLD.rows = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_rows,None,vnl_diag_matrixLD)
vnl_diag_matrixLD.cols = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_cols,None,vnl_diag_matrixLD)
vnl_diag_matrixLD.columns = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_columns,None,vnl_diag_matrixLD)
vnl_diag_matrixLD.asMatrix = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_asMatrix,None,vnl_diag_matrixLD)
vnl_diag_matrixLD.set_size = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_set_size,None,vnl_diag_matrixLD)
vnl_diag_matrixLD.clear = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_clear,None,vnl_diag_matrixLD)
vnl_diag_matrixLD.fill = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_fill,None,vnl_diag_matrixLD)
vnl_diag_matrixLD.data_block = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_data_block,None,vnl_diag_matrixLD)
vnl_diag_matrixLD.diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_diagonal,None,vnl_diag_matrixLD)
vnl_diag_matrixLD.set = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixLD_set,None,vnl_diag_matrixLD)
vnl_diag_matrixLD_swigregister = _vnl_diag_matrixPython.vnl_diag_matrixLD_swigregister
vnl_diag_matrixLD_swigregister(vnl_diag_matrixLD)

class vnl_diag_matrixSI(object):
    """Proxy of C++ vnl_diag_matrixSI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, vnl_diag_matrixSI arg0) -> vnl_diag_matrixSI
        __init__(self) -> vnl_diag_matrixSI
        __init__(self, unsigned int nn) -> vnl_diag_matrixSI
        __init__(self, unsigned int nn, int value) -> vnl_diag_matrixSI
        __init__(self, vnl_vectorSI that) -> vnl_diag_matrixSI
        """
        _vnl_diag_matrixPython.vnl_diag_matrixSI_swiginit(self,_vnl_diag_matrixPython.new_vnl_diag_matrixSI(*args))
    __swig_destroy__ = _vnl_diag_matrixPython.delete_vnl_diag_matrixSI
    def __imul__(self, *args):
        """__imul__(self, int v) -> vnl_diag_matrixSI"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI___imul__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, int v) -> vnl_diag_matrixSI"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI___idiv__(self, *args)

    def invert_in_place(self):
        """invert_in_place(self)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_invert_in_place(self)

    def determinant(self):
        """determinant(self) -> int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_determinant(self)

    def solve(self, *args):
        """
        solve(self, vnl_vectorSI b) -> vnl_vectorSI
        solve(self, vnl_vectorSI b, vnl_vectorSI out)
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_solve(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int i, unsigned int j) -> int
        __call__(self, unsigned int i, unsigned int j) -> int
        __call__(self, unsigned int i) -> int
        __call__(self, unsigned int i) -> int
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixSI___call__(self, *args)

    def put(self, *args):
        """put(self, unsigned int r, unsigned int c, int v)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int r, unsigned int c) -> int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_get(self, *args)

    def fill_diagonal(self, *args):
        """fill_diagonal(self, int v)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_fill_diagonal(self, *args)

    def begin(self, *args):
        """
        begin(self) -> int
        begin(self) -> int
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> int
        end(self) -> int
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_end(self, *args)

    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_size(self)

    def rows(self):
        """rows(self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_rows(self)

    def cols(self):
        """cols(self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_cols(self)

    def columns(self):
        """columns(self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_columns(self)

    def asMatrix(self):
        """asMatrix(self) -> vnl_matrixSI"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_asMatrix(self)

    def set_size(self, *args):
        """set_size(self, int n)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_set_size(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_clear(self)

    def fill(self, *args):
        """fill(self, int x)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_fill(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> int
        data_block(self) -> int
        """
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_data_block(self, *args)

    def diagonal(self):
        """diagonal(self) -> vnl_vectorSI"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_diagonal(self)

    def set(self, *args):
        """set(self, vnl_vectorSI v)"""
        return _vnl_diag_matrixPython.vnl_diag_matrixSI_set(self, *args)

vnl_diag_matrixSI.__imul__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI___imul__,None,vnl_diag_matrixSI)
vnl_diag_matrixSI.__idiv__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI___idiv__,None,vnl_diag_matrixSI)
vnl_diag_matrixSI.invert_in_place = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_invert_in_place,None,vnl_diag_matrixSI)
vnl_diag_matrixSI.determinant = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_determinant,None,vnl_diag_matrixSI)
vnl_diag_matrixSI.solve = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_solve,None,vnl_diag_matrixSI)
vnl_diag_matrixSI.__call__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI___call__,None,vnl_diag_matrixSI)
vnl_diag_matrixSI.put = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_put,None,vnl_diag_matrixSI)
vnl_diag_matrixSI.get = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_get,None,vnl_diag_matrixSI)
vnl_diag_matrixSI.fill_diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_fill_diagonal,None,vnl_diag_matrixSI)
vnl_diag_matrixSI.begin = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_begin,None,vnl_diag_matrixSI)
vnl_diag_matrixSI.end = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_end,None,vnl_diag_matrixSI)
vnl_diag_matrixSI.size = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_size,None,vnl_diag_matrixSI)
vnl_diag_matrixSI.rows = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_rows,None,vnl_diag_matrixSI)
vnl_diag_matrixSI.cols = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_cols,None,vnl_diag_matrixSI)
vnl_diag_matrixSI.columns = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_columns,None,vnl_diag_matrixSI)
vnl_diag_matrixSI.asMatrix = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_asMatrix,None,vnl_diag_matrixSI)
vnl_diag_matrixSI.set_size = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_set_size,None,vnl_diag_matrixSI)
vnl_diag_matrixSI.clear = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_clear,None,vnl_diag_matrixSI)
vnl_diag_matrixSI.fill = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_fill,None,vnl_diag_matrixSI)
vnl_diag_matrixSI.data_block = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_data_block,None,vnl_diag_matrixSI)
vnl_diag_matrixSI.diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_diagonal,None,vnl_diag_matrixSI)
vnl_diag_matrixSI.set = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrixSI_set,None,vnl_diag_matrixSI)
vnl_diag_matrixSI_swigregister = _vnl_diag_matrixPython.vnl_diag_matrixSI_swigregister
vnl_diag_matrixSI_swigregister(vnl_diag_matrixSI)

class vnl_diag_matrix_vcl_complexD(object):
    """Proxy of C++ vnl_diag_matrix_vcl_complexD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, vnl_diag_matrix_vcl_complexD arg0) -> vnl_diag_matrix_vcl_complexD
        __init__(self) -> vnl_diag_matrix_vcl_complexD
        __init__(self, unsigned int nn) -> vnl_diag_matrix_vcl_complexD
        __init__(self, unsigned int nn, vcl_complexD value) -> vnl_diag_matrix_vcl_complexD
        __init__(self, vnl_vector_vcl_complexD that) -> vnl_diag_matrix_vcl_complexD
        """
        _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_swiginit(self,_vnl_diag_matrixPython.new_vnl_diag_matrix_vcl_complexD(*args))
    __swig_destroy__ = _vnl_diag_matrixPython.delete_vnl_diag_matrix_vcl_complexD
    def __imul__(self, *args):
        """__imul__(self, vcl_complexD v) -> vnl_diag_matrix_vcl_complexD"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD___imul__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, vcl_complexD v) -> vnl_diag_matrix_vcl_complexD"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD___idiv__(self, *args)

    def invert_in_place(self):
        """invert_in_place(self)"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_invert_in_place(self)

    def determinant(self):
        """determinant(self) -> vcl_complexD"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_determinant(self)

    def solve(self, *args):
        """
        solve(self, vnl_vector_vcl_complexD b) -> vnl_vector_vcl_complexD
        solve(self, vnl_vector_vcl_complexD b, vnl_vector_vcl_complexD out)
        """
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_solve(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int i, unsigned int j) -> vcl_complexD
        __call__(self, unsigned int i, unsigned int j) -> vcl_complexD
        __call__(self, unsigned int i) -> vcl_complexD
        __call__(self, unsigned int i) -> vcl_complexD
        """
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD___call__(self, *args)

    def put(self, *args):
        """put(self, unsigned int r, unsigned int c, vcl_complexD v)"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int r, unsigned int c) -> vcl_complexD"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_get(self, *args)

    def fill_diagonal(self, *args):
        """fill_diagonal(self, vcl_complexD v)"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_fill_diagonal(self, *args)

    def begin(self, *args):
        """
        begin(self) -> vcl_complexD
        begin(self) -> vcl_complexD
        """
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> vcl_complexD
        end(self) -> vcl_complexD
        """
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_end(self, *args)

    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_size(self)

    def rows(self):
        """rows(self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_rows(self)

    def cols(self):
        """cols(self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_cols(self)

    def columns(self):
        """columns(self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_columns(self)

    def asMatrix(self):
        """asMatrix(self) -> vnl_matrix_vcl_complexD"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_asMatrix(self)

    def set_size(self, *args):
        """set_size(self, int n)"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_set_size(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_clear(self)

    def fill(self, *args):
        """fill(self, vcl_complexD x)"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_fill(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> vcl_complexD
        data_block(self) -> vcl_complexD
        """
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_data_block(self, *args)

    def diagonal(self):
        """diagonal(self) -> vnl_vector_vcl_complexD"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_diagonal(self)

    def set(self, *args):
        """set(self, vnl_vector_vcl_complexD v)"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_set(self, *args)

vnl_diag_matrix_vcl_complexD.__imul__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD___imul__,None,vnl_diag_matrix_vcl_complexD)
vnl_diag_matrix_vcl_complexD.__idiv__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD___idiv__,None,vnl_diag_matrix_vcl_complexD)
vnl_diag_matrix_vcl_complexD.invert_in_place = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_invert_in_place,None,vnl_diag_matrix_vcl_complexD)
vnl_diag_matrix_vcl_complexD.determinant = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_determinant,None,vnl_diag_matrix_vcl_complexD)
vnl_diag_matrix_vcl_complexD.solve = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_solve,None,vnl_diag_matrix_vcl_complexD)
vnl_diag_matrix_vcl_complexD.__call__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD___call__,None,vnl_diag_matrix_vcl_complexD)
vnl_diag_matrix_vcl_complexD.put = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_put,None,vnl_diag_matrix_vcl_complexD)
vnl_diag_matrix_vcl_complexD.get = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_get,None,vnl_diag_matrix_vcl_complexD)
vnl_diag_matrix_vcl_complexD.fill_diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_fill_diagonal,None,vnl_diag_matrix_vcl_complexD)
vnl_diag_matrix_vcl_complexD.begin = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_begin,None,vnl_diag_matrix_vcl_complexD)
vnl_diag_matrix_vcl_complexD.end = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_end,None,vnl_diag_matrix_vcl_complexD)
vnl_diag_matrix_vcl_complexD.size = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_size,None,vnl_diag_matrix_vcl_complexD)
vnl_diag_matrix_vcl_complexD.rows = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_rows,None,vnl_diag_matrix_vcl_complexD)
vnl_diag_matrix_vcl_complexD.cols = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_cols,None,vnl_diag_matrix_vcl_complexD)
vnl_diag_matrix_vcl_complexD.columns = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_columns,None,vnl_diag_matrix_vcl_complexD)
vnl_diag_matrix_vcl_complexD.asMatrix = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_asMatrix,None,vnl_diag_matrix_vcl_complexD)
vnl_diag_matrix_vcl_complexD.set_size = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_set_size,None,vnl_diag_matrix_vcl_complexD)
vnl_diag_matrix_vcl_complexD.clear = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_clear,None,vnl_diag_matrix_vcl_complexD)
vnl_diag_matrix_vcl_complexD.fill = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_fill,None,vnl_diag_matrix_vcl_complexD)
vnl_diag_matrix_vcl_complexD.data_block = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_data_block,None,vnl_diag_matrix_vcl_complexD)
vnl_diag_matrix_vcl_complexD.diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_diagonal,None,vnl_diag_matrix_vcl_complexD)
vnl_diag_matrix_vcl_complexD.set = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_set,None,vnl_diag_matrix_vcl_complexD)
vnl_diag_matrix_vcl_complexD_swigregister = _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexD_swigregister
vnl_diag_matrix_vcl_complexD_swigregister(vnl_diag_matrix_vcl_complexD)

class vnl_diag_matrix_vcl_complexF(object):
    """Proxy of C++ vnl_diag_matrix_vcl_complexF class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self, vnl_diag_matrix_vcl_complexF arg0) -> vnl_diag_matrix_vcl_complexF
        __init__(self) -> vnl_diag_matrix_vcl_complexF
        __init__(self, unsigned int nn) -> vnl_diag_matrix_vcl_complexF
        __init__(self, unsigned int nn, vcl_complexF value) -> vnl_diag_matrix_vcl_complexF
        __init__(self, vnl_vector_vcl_complexF that) -> vnl_diag_matrix_vcl_complexF
        """
        _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_swiginit(self,_vnl_diag_matrixPython.new_vnl_diag_matrix_vcl_complexF(*args))
    __swig_destroy__ = _vnl_diag_matrixPython.delete_vnl_diag_matrix_vcl_complexF
    def __imul__(self, *args):
        """__imul__(self, vcl_complexF v) -> vnl_diag_matrix_vcl_complexF"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF___imul__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, vcl_complexF v) -> vnl_diag_matrix_vcl_complexF"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF___idiv__(self, *args)

    def invert_in_place(self):
        """invert_in_place(self)"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_invert_in_place(self)

    def determinant(self):
        """determinant(self) -> vcl_complexF"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_determinant(self)

    def solve(self, *args):
        """
        solve(self, vnl_vector_vcl_complexF b) -> vnl_vector_vcl_complexF
        solve(self, vnl_vector_vcl_complexF b, vnl_vector_vcl_complexF out)
        """
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_solve(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int i, unsigned int j) -> vcl_complexF
        __call__(self, unsigned int i, unsigned int j) -> vcl_complexF
        __call__(self, unsigned int i) -> vcl_complexF
        __call__(self, unsigned int i) -> vcl_complexF
        """
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF___call__(self, *args)

    def put(self, *args):
        """put(self, unsigned int r, unsigned int c, vcl_complexF v)"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int r, unsigned int c) -> vcl_complexF"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_get(self, *args)

    def fill_diagonal(self, *args):
        """fill_diagonal(self, vcl_complexF v)"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_fill_diagonal(self, *args)

    def begin(self, *args):
        """
        begin(self) -> vcl_complexF
        begin(self) -> vcl_complexF
        """
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> vcl_complexF
        end(self) -> vcl_complexF
        """
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_end(self, *args)

    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_size(self)

    def rows(self):
        """rows(self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_rows(self)

    def cols(self):
        """cols(self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_cols(self)

    def columns(self):
        """columns(self) -> unsigned int"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_columns(self)

    def asMatrix(self):
        """asMatrix(self) -> vnl_matrix_vcl_complexF"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_asMatrix(self)

    def set_size(self, *args):
        """set_size(self, int n)"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_set_size(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_clear(self)

    def fill(self, *args):
        """fill(self, vcl_complexF x)"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_fill(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> vcl_complexF
        data_block(self) -> vcl_complexF
        """
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_data_block(self, *args)

    def diagonal(self):
        """diagonal(self) -> vnl_vector_vcl_complexF"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_diagonal(self)

    def set(self, *args):
        """set(self, vnl_vector_vcl_complexF v)"""
        return _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_set(self, *args)

vnl_diag_matrix_vcl_complexF.__imul__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF___imul__,None,vnl_diag_matrix_vcl_complexF)
vnl_diag_matrix_vcl_complexF.__idiv__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF___idiv__,None,vnl_diag_matrix_vcl_complexF)
vnl_diag_matrix_vcl_complexF.invert_in_place = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_invert_in_place,None,vnl_diag_matrix_vcl_complexF)
vnl_diag_matrix_vcl_complexF.determinant = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_determinant,None,vnl_diag_matrix_vcl_complexF)
vnl_diag_matrix_vcl_complexF.solve = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_solve,None,vnl_diag_matrix_vcl_complexF)
vnl_diag_matrix_vcl_complexF.__call__ = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF___call__,None,vnl_diag_matrix_vcl_complexF)
vnl_diag_matrix_vcl_complexF.put = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_put,None,vnl_diag_matrix_vcl_complexF)
vnl_diag_matrix_vcl_complexF.get = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_get,None,vnl_diag_matrix_vcl_complexF)
vnl_diag_matrix_vcl_complexF.fill_diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_fill_diagonal,None,vnl_diag_matrix_vcl_complexF)
vnl_diag_matrix_vcl_complexF.begin = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_begin,None,vnl_diag_matrix_vcl_complexF)
vnl_diag_matrix_vcl_complexF.end = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_end,None,vnl_diag_matrix_vcl_complexF)
vnl_diag_matrix_vcl_complexF.size = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_size,None,vnl_diag_matrix_vcl_complexF)
vnl_diag_matrix_vcl_complexF.rows = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_rows,None,vnl_diag_matrix_vcl_complexF)
vnl_diag_matrix_vcl_complexF.cols = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_cols,None,vnl_diag_matrix_vcl_complexF)
vnl_diag_matrix_vcl_complexF.columns = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_columns,None,vnl_diag_matrix_vcl_complexF)
vnl_diag_matrix_vcl_complexF.asMatrix = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_asMatrix,None,vnl_diag_matrix_vcl_complexF)
vnl_diag_matrix_vcl_complexF.set_size = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_set_size,None,vnl_diag_matrix_vcl_complexF)
vnl_diag_matrix_vcl_complexF.clear = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_clear,None,vnl_diag_matrix_vcl_complexF)
vnl_diag_matrix_vcl_complexF.fill = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_fill,None,vnl_diag_matrix_vcl_complexF)
vnl_diag_matrix_vcl_complexF.data_block = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_data_block,None,vnl_diag_matrix_vcl_complexF)
vnl_diag_matrix_vcl_complexF.diagonal = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_diagonal,None,vnl_diag_matrix_vcl_complexF)
vnl_diag_matrix_vcl_complexF.set = new_instancemethod(_vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_set,None,vnl_diag_matrix_vcl_complexF)
vnl_diag_matrix_vcl_complexF_swigregister = _vnl_diag_matrixPython.vnl_diag_matrix_vcl_complexF_swigregister
vnl_diag_matrix_vcl_complexF_swigregister(vnl_diag_matrix_vcl_complexF)



