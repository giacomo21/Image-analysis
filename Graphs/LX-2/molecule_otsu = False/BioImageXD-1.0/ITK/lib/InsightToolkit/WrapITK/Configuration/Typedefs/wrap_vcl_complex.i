// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module vcl_complexChicken
#endif
#ifdef SWIGCSHARP
%module vcl_complexCsharp
#endif
#ifdef SWIGGUILE
%module vcl_complexGuile
#endif
#ifdef SWIGJAVA
%module vcl_complexJava
#endif
#ifdef SWIGLUA
%module vcl_complexLua
#endif
#ifdef SWIGMODULA3
%module vcl_complexModula3
#endif
#ifdef SWIGMZSCHEME
%module vcl_complexMzscheme
#endif
#ifdef SWIGOCAML
%module vcl_complexOcaml
#endif
#ifdef SWIGPERL
%module vcl_complexPerl
#endif
#ifdef SWIGPERL5
%module vcl_complexPerl5
#endif
#ifdef SWIGPHP
%module vcl_complexPhp
#endif
#ifdef SWIGPHP4
%module vcl_complexPhp4
#endif
#ifdef SWIGPHP5
%module vcl_complexPhp5
#endif
#ifdef SWIGPIKE
%module vcl_complexPike
#endif
#ifdef SWIGPYTHON
%module vcl_complexPython
#endif
#ifdef SWIGR
%module vcl_complexR
#endif
#ifdef SWIGRUBY
%module vcl_complexRuby
#endif
#ifdef SWIGSEXP
%module vcl_complexSexp
#endif
#ifdef SWIGTCL
%module vcl_complexTcl
#endif
#ifdef SWIGXML
%module vcl_complexXml
#endif

%{
#include "VXLNumerics.includes"
%}


%{
%}






%include itk.i
%include wrap_vcl_complex_ext.i


 class vcl_complexD {
   public:
     ~vcl_complexD();
     vcl_complexD & operator=(vcl_complexD const & arg0);
     vcl_complexD(vcl_complexD const & arg0);
     vcl_complexD(vcl_complexD __z);
     vcl_complexD(double __r = 0.0, double __i = 0.0);
     vcl_complexD(vcl_complexF const & __z);
     vcl_complexD(vcl_complexLD const & __z);
     double real();
     double const real() const;
     double imag();
     double const imag() const;
     vcl_complexD & operator=(double __d);
     vcl_complexD & operator+=(double __d);
     vcl_complexD & operator-=(double __d);
     vcl_complexD & operator*=(double __d);
     vcl_complexD & operator/=(double __d);
     // vcl_complexD const & __rep() const;
   private:
   protected:
 };

class vcl_complexF {
   public:
     ~vcl_complexF();
     vcl_complexF & operator=(vcl_complexF const & arg0);
     vcl_complexF(vcl_complexF const & arg0);
     vcl_complexF(vcl_complexF __z);
     vcl_complexF(float r = 0.0f, float i = 0.0f);
     vcl_complexF(vcl_complexD const & __z);
     vcl_complexF(vcl_complexLD const & __z);
     float real();
     float const real() const;
     float imag();
     float const imag() const;
     vcl_complexF & operator=(float __f);
     vcl_complexF & operator+=(float __f);
     vcl_complexF & operator-=(float __f);
     vcl_complexF & operator*=(float __f);
     vcl_complexF & operator/=(float __f);
     // vcl_complexF const & __rep() const;
   private:
   protected:
 };

 class vcl_complexLD {
   public:
     ~vcl_complexLD();
     vcl_complexLD & operator=(vcl_complexLD const & arg0);
     vcl_complexLD(vcl_complexLD const & arg0);
     vcl_complexLD(vcl_complexLD __z);
     vcl_complexLD(long double __r = 0.0l, long double __i = 0.0l);
     vcl_complexLD(vcl_complexF const & __z);
     vcl_complexLD(vcl_complexD const & __z);
     long double real();
     long double const real() const;
     long double imag();
     long double const imag() const;
     vcl_complexLD & operator=(long double __r);
     vcl_complexLD & operator+=(long double __r);
     vcl_complexLD & operator-=(long double __r);
     vcl_complexLD & operator*=(long double __r);
     vcl_complexLD & operator/=(long double __r);
     // vcl_complexLD const & __rep() const;
   private:
   protected:
 };

