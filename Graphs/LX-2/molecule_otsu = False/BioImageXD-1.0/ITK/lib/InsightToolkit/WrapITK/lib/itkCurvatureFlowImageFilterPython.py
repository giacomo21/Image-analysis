# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkCurvatureFlowImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkCurvatureFlowImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkCurvatureFlowImageFilterPython
            return _itkCurvatureFlowImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkCurvatureFlowImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkCurvatureFlowImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkCurvatureFlowImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkDenseFiniteDifferenceImageFilterPython
import ITKCommonBasePython
import itkEventObjectsPython
import pyBasePython
import itkFiniteDifferenceImageFilterPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterBPython
import ITKRegionsPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkImagePython
import itkFixedArrayPython
import itkCovariantVectorPython
import vnl_vectorPython
import vcl_complexPython
import vnl_matrixPython
import itkVectorPython
import vnl_vector_refPython
import itkPointPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkRGBPixelPython
import itkImageSourcePython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkImageToImageFilterAPython
import itkFiniteDifferenceFunctionPython
def itkCurvatureFlowImageFilterID3ID3_New():
  return itkCurvatureFlowImageFilterID3ID3.New()

def itkCurvatureFlowImageFilterID2ID2_New():
  return itkCurvatureFlowImageFilterID2ID2.New()

def itkCurvatureFlowImageFilterIF3IF3_New():
  return itkCurvatureFlowImageFilterIF3IF3.New()

def itkCurvatureFlowImageFilterIF2IF2_New():
  return itkCurvatureFlowImageFilterIF2IF2.New()

class itkCurvatureFlowImageFilterID2ID2(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID2ID2):
    """Proxy of C++ itkCurvatureFlowImageFilterID2ID2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_ImageDimension
    DoubleConvertibleToOutputCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_DoubleConvertibleToOutputCheck
    OutputConvertibleToDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_OutputConvertibleToDoubleCheck
    OutputDivisionOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_OutputDivisionOperatorsCheck
    DoubleOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_DoubleOutputMultiplyOperatorCheck
    IntOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_IntOutputMultiplyOperatorCheck
    OutputLessThanDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_OutputLessThanDoubleCheck
    OutputDoubleAdditiveOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_OutputDoubleAdditiveOperatorsCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetTimeStep(self, *args):
        """SetTimeStep(self, double _arg)"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_SetTimeStep(self, *args)

    def GetTimeStep(self):
        """GetTimeStep(self) -> double"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_GetTimeStep(self)

    __swig_destroy__ = _itkCurvatureFlowImageFilterPython.delete_itkCurvatureFlowImageFilterID2ID2
    def cast(*args):
        """cast(itkLightObject obj) -> itkCurvatureFlowImageFilterID2ID2"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkCurvatureFlowImageFilterID2ID2"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkCurvatureFlowImageFilterID2ID2
        
        Create a new object of the class itkCurvatureFlowImageFilterID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkCurvatureFlowImageFilterID2ID2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkCurvatureFlowImageFilterID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCurvatureFlowImageFilterID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCurvatureFlowImageFilterID2ID2.SetTimeStep = new_instancemethod(_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_SetTimeStep,None,itkCurvatureFlowImageFilterID2ID2)
itkCurvatureFlowImageFilterID2ID2.GetTimeStep = new_instancemethod(_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_GetTimeStep,None,itkCurvatureFlowImageFilterID2ID2)
itkCurvatureFlowImageFilterID2ID2.GetPointer = new_instancemethod(_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_GetPointer,None,itkCurvatureFlowImageFilterID2ID2)
itkCurvatureFlowImageFilterID2ID2_swigregister = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_swigregister
itkCurvatureFlowImageFilterID2ID2_swigregister(itkCurvatureFlowImageFilterID2ID2)

def itkCurvatureFlowImageFilterID2ID2___New_orig__():
  """itkCurvatureFlowImageFilterID2ID2___New_orig__()"""
  return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2___New_orig__()

def itkCurvatureFlowImageFilterID2ID2_cast(*args):
  """itkCurvatureFlowImageFilterID2ID2_cast(itkLightObject obj) -> itkCurvatureFlowImageFilterID2ID2"""
  return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID2ID2_cast(*args)

class itkCurvatureFlowImageFilterID3ID3(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterID3ID3):
    """Proxy of C++ itkCurvatureFlowImageFilterID3ID3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_ImageDimension
    DoubleConvertibleToOutputCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_DoubleConvertibleToOutputCheck
    OutputConvertibleToDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_OutputConvertibleToDoubleCheck
    OutputDivisionOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_OutputDivisionOperatorsCheck
    DoubleOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_DoubleOutputMultiplyOperatorCheck
    IntOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_IntOutputMultiplyOperatorCheck
    OutputLessThanDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_OutputLessThanDoubleCheck
    OutputDoubleAdditiveOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_OutputDoubleAdditiveOperatorsCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetTimeStep(self, *args):
        """SetTimeStep(self, double _arg)"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_SetTimeStep(self, *args)

    def GetTimeStep(self):
        """GetTimeStep(self) -> double"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_GetTimeStep(self)

    __swig_destroy__ = _itkCurvatureFlowImageFilterPython.delete_itkCurvatureFlowImageFilterID3ID3
    def cast(*args):
        """cast(itkLightObject obj) -> itkCurvatureFlowImageFilterID3ID3"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkCurvatureFlowImageFilterID3ID3"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkCurvatureFlowImageFilterID3ID3
        
        Create a new object of the class itkCurvatureFlowImageFilterID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkCurvatureFlowImageFilterID3ID3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkCurvatureFlowImageFilterID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCurvatureFlowImageFilterID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCurvatureFlowImageFilterID3ID3.SetTimeStep = new_instancemethod(_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_SetTimeStep,None,itkCurvatureFlowImageFilterID3ID3)
itkCurvatureFlowImageFilterID3ID3.GetTimeStep = new_instancemethod(_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_GetTimeStep,None,itkCurvatureFlowImageFilterID3ID3)
itkCurvatureFlowImageFilterID3ID3.GetPointer = new_instancemethod(_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_GetPointer,None,itkCurvatureFlowImageFilterID3ID3)
itkCurvatureFlowImageFilterID3ID3_swigregister = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_swigregister
itkCurvatureFlowImageFilterID3ID3_swigregister(itkCurvatureFlowImageFilterID3ID3)

def itkCurvatureFlowImageFilterID3ID3___New_orig__():
  """itkCurvatureFlowImageFilterID3ID3___New_orig__()"""
  return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3___New_orig__()

def itkCurvatureFlowImageFilterID3ID3_cast(*args):
  """itkCurvatureFlowImageFilterID3ID3_cast(itkLightObject obj) -> itkCurvatureFlowImageFilterID3ID3"""
  return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterID3ID3_cast(*args)

class itkCurvatureFlowImageFilterIF2IF2(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF2IF2):
    """Proxy of C++ itkCurvatureFlowImageFilterIF2IF2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_ImageDimension
    DoubleConvertibleToOutputCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_DoubleConvertibleToOutputCheck
    OutputConvertibleToDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_OutputConvertibleToDoubleCheck
    OutputDivisionOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_OutputDivisionOperatorsCheck
    DoubleOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_DoubleOutputMultiplyOperatorCheck
    IntOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_IntOutputMultiplyOperatorCheck
    OutputLessThanDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_OutputLessThanDoubleCheck
    OutputDoubleAdditiveOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_OutputDoubleAdditiveOperatorsCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetTimeStep(self, *args):
        """SetTimeStep(self, double _arg)"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_SetTimeStep(self, *args)

    def GetTimeStep(self):
        """GetTimeStep(self) -> double"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_GetTimeStep(self)

    __swig_destroy__ = _itkCurvatureFlowImageFilterPython.delete_itkCurvatureFlowImageFilterIF2IF2
    def cast(*args):
        """cast(itkLightObject obj) -> itkCurvatureFlowImageFilterIF2IF2"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkCurvatureFlowImageFilterIF2IF2"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkCurvatureFlowImageFilterIF2IF2
        
        Create a new object of the class itkCurvatureFlowImageFilterIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkCurvatureFlowImageFilterIF2IF2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkCurvatureFlowImageFilterIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCurvatureFlowImageFilterIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCurvatureFlowImageFilterIF2IF2.SetTimeStep = new_instancemethod(_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_SetTimeStep,None,itkCurvatureFlowImageFilterIF2IF2)
itkCurvatureFlowImageFilterIF2IF2.GetTimeStep = new_instancemethod(_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_GetTimeStep,None,itkCurvatureFlowImageFilterIF2IF2)
itkCurvatureFlowImageFilterIF2IF2.GetPointer = new_instancemethod(_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_GetPointer,None,itkCurvatureFlowImageFilterIF2IF2)
itkCurvatureFlowImageFilterIF2IF2_swigregister = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_swigregister
itkCurvatureFlowImageFilterIF2IF2_swigregister(itkCurvatureFlowImageFilterIF2IF2)

def itkCurvatureFlowImageFilterIF2IF2___New_orig__():
  """itkCurvatureFlowImageFilterIF2IF2___New_orig__()"""
  return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2___New_orig__()

def itkCurvatureFlowImageFilterIF2IF2_cast(*args):
  """itkCurvatureFlowImageFilterIF2IF2_cast(itkLightObject obj) -> itkCurvatureFlowImageFilterIF2IF2"""
  return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF2IF2_cast(*args)

class itkCurvatureFlowImageFilterIF3IF3(itkDenseFiniteDifferenceImageFilterPython.itkDenseFiniteDifferenceImageFilterIF3IF3):
    """Proxy of C++ itkCurvatureFlowImageFilterIF3IF3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_ImageDimension
    DoubleConvertibleToOutputCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_DoubleConvertibleToOutputCheck
    OutputConvertibleToDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_OutputConvertibleToDoubleCheck
    OutputDivisionOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_OutputDivisionOperatorsCheck
    DoubleOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_DoubleOutputMultiplyOperatorCheck
    IntOutputMultiplyOperatorCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_IntOutputMultiplyOperatorCheck
    OutputLessThanDoubleCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_OutputLessThanDoubleCheck
    OutputDoubleAdditiveOperatorsCheck = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_OutputDoubleAdditiveOperatorsCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetTimeStep(self, *args):
        """SetTimeStep(self, double _arg)"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_SetTimeStep(self, *args)

    def GetTimeStep(self):
        """GetTimeStep(self) -> double"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_GetTimeStep(self)

    __swig_destroy__ = _itkCurvatureFlowImageFilterPython.delete_itkCurvatureFlowImageFilterIF3IF3
    def cast(*args):
        """cast(itkLightObject obj) -> itkCurvatureFlowImageFilterIF3IF3"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkCurvatureFlowImageFilterIF3IF3"""
        return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkCurvatureFlowImageFilterIF3IF3
        
        Create a new object of the class itkCurvatureFlowImageFilterIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkCurvatureFlowImageFilterIF3IF3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkCurvatureFlowImageFilterIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkCurvatureFlowImageFilterIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkCurvatureFlowImageFilterIF3IF3.SetTimeStep = new_instancemethod(_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_SetTimeStep,None,itkCurvatureFlowImageFilterIF3IF3)
itkCurvatureFlowImageFilterIF3IF3.GetTimeStep = new_instancemethod(_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_GetTimeStep,None,itkCurvatureFlowImageFilterIF3IF3)
itkCurvatureFlowImageFilterIF3IF3.GetPointer = new_instancemethod(_itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_GetPointer,None,itkCurvatureFlowImageFilterIF3IF3)
itkCurvatureFlowImageFilterIF3IF3_swigregister = _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_swigregister
itkCurvatureFlowImageFilterIF3IF3_swigregister(itkCurvatureFlowImageFilterIF3IF3)

def itkCurvatureFlowImageFilterIF3IF3___New_orig__():
  """itkCurvatureFlowImageFilterIF3IF3___New_orig__()"""
  return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3___New_orig__()

def itkCurvatureFlowImageFilterIF3IF3_cast(*args):
  """itkCurvatureFlowImageFilterIF3IF3_cast(itkLightObject obj) -> itkCurvatureFlowImageFilterIF3IF3"""
  return _itkCurvatureFlowImageFilterPython.itkCurvatureFlowImageFilterIF3IF3_cast(*args)



