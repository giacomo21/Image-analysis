// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkMultiResolutionPyramidImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkMultiResolutionPyramidImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkMultiResolutionPyramidImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkMultiResolutionPyramidImageFilterJava
#endif
#ifdef SWIGLUA
%module itkMultiResolutionPyramidImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkMultiResolutionPyramidImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkMultiResolutionPyramidImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkMultiResolutionPyramidImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkMultiResolutionPyramidImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkMultiResolutionPyramidImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkMultiResolutionPyramidImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkMultiResolutionPyramidImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkMultiResolutionPyramidImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkMultiResolutionPyramidImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkMultiResolutionPyramidImageFilterPython
#endif
#ifdef SWIGR
%module itkMultiResolutionPyramidImageFilterR
#endif
#ifdef SWIGRUBY
%module itkMultiResolutionPyramidImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkMultiResolutionPyramidImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkMultiResolutionPyramidImageFilterTcl
#endif
#ifdef SWIGXML
%module itkMultiResolutionPyramidImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Resize.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkArray2D.i
%import wrap_itkImageToImageFilterA.i


%include itk.i
%include wrap_itkMultiResolutionPyramidImageFilter_ext.i


 class itkMultiResolutionPyramidImageFilterID2ID2 : public itkImageToImageFilterID2ID2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  OutputHasNumericTraitsCheck = 1 };
     static itkMultiResolutionPyramidImageFilterID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetNumberOfLevels(unsigned int num);
     virtual unsigned int GetNumberOfLevels() const;
     virtual void SetSchedule(itkArray2DUI const & schedule);
     virtual itkArray2DUI const & GetSchedule() const;
     virtual void SetStartingShrinkFactors(unsigned int factor);
     virtual void SetStartingShrinkFactors(unsigned int * factors);
     unsigned int const * GetStartingShrinkFactors() const;
     static bool IsScheduleDownwardDivisible(itkArray2DUI const & schedule);
     virtual void GenerateOutputInformation();
     virtual void GenerateOutputRequestedRegion(itkDataObject * output);
     virtual void GenerateInputRequestedRegion();
     virtual void SetMaximumError(double const _arg);
     virtual double const & GetMaximumError() const;
     virtual void SetUseShrinkImageFilter(bool const _arg);
     virtual bool GetUseShrinkImageFilter() const;
     virtual void UseShrinkImageFilterOn();
     virtual void UseShrinkImageFilterOff();
   private:
     itkMultiResolutionPyramidImageFilterID2ID2(itkMultiResolutionPyramidImageFilterID2ID2 const & arg0);
     void operator=(itkMultiResolutionPyramidImageFilterID2ID2 const & arg0);
   protected:
     itkMultiResolutionPyramidImageFilterID2ID2();
     ~itkMultiResolutionPyramidImageFilterID2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkMultiResolutionPyramidImageFilterID2ID2_Pointer {
   public:
     itkMultiResolutionPyramidImageFilterID2ID2_Pointer();
     itkMultiResolutionPyramidImageFilterID2ID2_Pointer(itkMultiResolutionPyramidImageFilterID2ID2_Pointer const & p);
     itkMultiResolutionPyramidImageFilterID2ID2_Pointer(itkMultiResolutionPyramidImageFilterID2ID2 * p);
     ~itkMultiResolutionPyramidImageFilterID2ID2_Pointer();
     itkMultiResolutionPyramidImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMultiResolutionPyramidImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkMultiResolutionPyramidImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkMultiResolutionPyramidImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkMultiResolutionPyramidImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkMultiResolutionPyramidImageFilterID2ID2_Pointer const & r) const;
     itkMultiResolutionPyramidImageFilterID2ID2_Pointer & operator=(itkMultiResolutionPyramidImageFilterID2ID2_Pointer const & r);
     itkMultiResolutionPyramidImageFilterID2ID2_Pointer & operator=(itkMultiResolutionPyramidImageFilterID2ID2 * r);
     itkMultiResolutionPyramidImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMultiResolutionPyramidImageFilterID3ID3 : public itkImageToImageFilterID3ID3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  OutputHasNumericTraitsCheck = 1 };
     static itkMultiResolutionPyramidImageFilterID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetNumberOfLevels(unsigned int num);
     virtual unsigned int GetNumberOfLevels() const;
     virtual void SetSchedule(itkArray2DUI const & schedule);
     virtual itkArray2DUI const & GetSchedule() const;
     virtual void SetStartingShrinkFactors(unsigned int factor);
     virtual void SetStartingShrinkFactors(unsigned int * factors);
     unsigned int const * GetStartingShrinkFactors() const;
     static bool IsScheduleDownwardDivisible(itkArray2DUI const & schedule);
     virtual void GenerateOutputInformation();
     virtual void GenerateOutputRequestedRegion(itkDataObject * output);
     virtual void GenerateInputRequestedRegion();
     virtual void SetMaximumError(double const _arg);
     virtual double const & GetMaximumError() const;
     virtual void SetUseShrinkImageFilter(bool const _arg);
     virtual bool GetUseShrinkImageFilter() const;
     virtual void UseShrinkImageFilterOn();
     virtual void UseShrinkImageFilterOff();
   private:
     itkMultiResolutionPyramidImageFilterID3ID3(itkMultiResolutionPyramidImageFilterID3ID3 const & arg0);
     void operator=(itkMultiResolutionPyramidImageFilterID3ID3 const & arg0);
   protected:
     itkMultiResolutionPyramidImageFilterID3ID3();
     ~itkMultiResolutionPyramidImageFilterID3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkMultiResolutionPyramidImageFilterID3ID3_Pointer {
   public:
     itkMultiResolutionPyramidImageFilterID3ID3_Pointer();
     itkMultiResolutionPyramidImageFilterID3ID3_Pointer(itkMultiResolutionPyramidImageFilterID3ID3_Pointer const & p);
     itkMultiResolutionPyramidImageFilterID3ID3_Pointer(itkMultiResolutionPyramidImageFilterID3ID3 * p);
     ~itkMultiResolutionPyramidImageFilterID3ID3_Pointer();
     itkMultiResolutionPyramidImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMultiResolutionPyramidImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkMultiResolutionPyramidImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkMultiResolutionPyramidImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkMultiResolutionPyramidImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkMultiResolutionPyramidImageFilterID3ID3_Pointer const & r) const;
     itkMultiResolutionPyramidImageFilterID3ID3_Pointer & operator=(itkMultiResolutionPyramidImageFilterID3ID3_Pointer const & r);
     itkMultiResolutionPyramidImageFilterID3ID3_Pointer & operator=(itkMultiResolutionPyramidImageFilterID3ID3 * r);
     itkMultiResolutionPyramidImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMultiResolutionPyramidImageFilterIF2IF2 : public itkImageToImageFilterIF2IF2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  OutputHasNumericTraitsCheck = 1 };
     static itkMultiResolutionPyramidImageFilterIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetNumberOfLevels(unsigned int num);
     virtual unsigned int GetNumberOfLevels() const;
     virtual void SetSchedule(itkArray2DUI const & schedule);
     virtual itkArray2DUI const & GetSchedule() const;
     virtual void SetStartingShrinkFactors(unsigned int factor);
     virtual void SetStartingShrinkFactors(unsigned int * factors);
     unsigned int const * GetStartingShrinkFactors() const;
     static bool IsScheduleDownwardDivisible(itkArray2DUI const & schedule);
     virtual void GenerateOutputInformation();
     virtual void GenerateOutputRequestedRegion(itkDataObject * output);
     virtual void GenerateInputRequestedRegion();
     virtual void SetMaximumError(double const _arg);
     virtual double const & GetMaximumError() const;
     virtual void SetUseShrinkImageFilter(bool const _arg);
     virtual bool GetUseShrinkImageFilter() const;
     virtual void UseShrinkImageFilterOn();
     virtual void UseShrinkImageFilterOff();
   private:
     itkMultiResolutionPyramidImageFilterIF2IF2(itkMultiResolutionPyramidImageFilterIF2IF2 const & arg0);
     void operator=(itkMultiResolutionPyramidImageFilterIF2IF2 const & arg0);
   protected:
     itkMultiResolutionPyramidImageFilterIF2IF2();
     ~itkMultiResolutionPyramidImageFilterIF2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkMultiResolutionPyramidImageFilterIF2IF2_Pointer {
   public:
     itkMultiResolutionPyramidImageFilterIF2IF2_Pointer();
     itkMultiResolutionPyramidImageFilterIF2IF2_Pointer(itkMultiResolutionPyramidImageFilterIF2IF2_Pointer const & p);
     itkMultiResolutionPyramidImageFilterIF2IF2_Pointer(itkMultiResolutionPyramidImageFilterIF2IF2 * p);
     ~itkMultiResolutionPyramidImageFilterIF2IF2_Pointer();
     itkMultiResolutionPyramidImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMultiResolutionPyramidImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkMultiResolutionPyramidImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkMultiResolutionPyramidImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkMultiResolutionPyramidImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkMultiResolutionPyramidImageFilterIF2IF2_Pointer const & r) const;
     itkMultiResolutionPyramidImageFilterIF2IF2_Pointer & operator=(itkMultiResolutionPyramidImageFilterIF2IF2_Pointer const & r);
     itkMultiResolutionPyramidImageFilterIF2IF2_Pointer & operator=(itkMultiResolutionPyramidImageFilterIF2IF2 * r);
     itkMultiResolutionPyramidImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMultiResolutionPyramidImageFilterIF3IF3 : public itkImageToImageFilterIF3IF3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  OutputHasNumericTraitsCheck = 1 };
     static itkMultiResolutionPyramidImageFilterIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetNumberOfLevels(unsigned int num);
     virtual unsigned int GetNumberOfLevels() const;
     virtual void SetSchedule(itkArray2DUI const & schedule);
     virtual itkArray2DUI const & GetSchedule() const;
     virtual void SetStartingShrinkFactors(unsigned int factor);
     virtual void SetStartingShrinkFactors(unsigned int * factors);
     unsigned int const * GetStartingShrinkFactors() const;
     static bool IsScheduleDownwardDivisible(itkArray2DUI const & schedule);
     virtual void GenerateOutputInformation();
     virtual void GenerateOutputRequestedRegion(itkDataObject * output);
     virtual void GenerateInputRequestedRegion();
     virtual void SetMaximumError(double const _arg);
     virtual double const & GetMaximumError() const;
     virtual void SetUseShrinkImageFilter(bool const _arg);
     virtual bool GetUseShrinkImageFilter() const;
     virtual void UseShrinkImageFilterOn();
     virtual void UseShrinkImageFilterOff();
   private:
     itkMultiResolutionPyramidImageFilterIF3IF3(itkMultiResolutionPyramidImageFilterIF3IF3 const & arg0);
     void operator=(itkMultiResolutionPyramidImageFilterIF3IF3 const & arg0);
   protected:
     itkMultiResolutionPyramidImageFilterIF3IF3();
     ~itkMultiResolutionPyramidImageFilterIF3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkMultiResolutionPyramidImageFilterIF3IF3_Pointer {
   public:
     itkMultiResolutionPyramidImageFilterIF3IF3_Pointer();
     itkMultiResolutionPyramidImageFilterIF3IF3_Pointer(itkMultiResolutionPyramidImageFilterIF3IF3_Pointer const & p);
     itkMultiResolutionPyramidImageFilterIF3IF3_Pointer(itkMultiResolutionPyramidImageFilterIF3IF3 * p);
     ~itkMultiResolutionPyramidImageFilterIF3IF3_Pointer();
     itkMultiResolutionPyramidImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMultiResolutionPyramidImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkMultiResolutionPyramidImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkMultiResolutionPyramidImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkMultiResolutionPyramidImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkMultiResolutionPyramidImageFilterIF3IF3_Pointer const & r) const;
     itkMultiResolutionPyramidImageFilterIF3IF3_Pointer & operator=(itkMultiResolutionPyramidImageFilterIF3IF3_Pointer const & r);
     itkMultiResolutionPyramidImageFilterIF3IF3_Pointer & operator=(itkMultiResolutionPyramidImageFilterIF3IF3 * r);
     itkMultiResolutionPyramidImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMultiResolutionPyramidImageFilterIUC2IUC2 : public itkImageToImageFilterIUC2IUC2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  OutputHasNumericTraitsCheck = 1 };
     static itkMultiResolutionPyramidImageFilterIUC2IUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetNumberOfLevels(unsigned int num);
     virtual unsigned int GetNumberOfLevels() const;
     virtual void SetSchedule(itkArray2DUI const & schedule);
     virtual itkArray2DUI const & GetSchedule() const;
     virtual void SetStartingShrinkFactors(unsigned int factor);
     virtual void SetStartingShrinkFactors(unsigned int * factors);
     unsigned int const * GetStartingShrinkFactors() const;
     static bool IsScheduleDownwardDivisible(itkArray2DUI const & schedule);
     virtual void GenerateOutputInformation();
     virtual void GenerateOutputRequestedRegion(itkDataObject * output);
     virtual void GenerateInputRequestedRegion();
     virtual void SetMaximumError(double const _arg);
     virtual double const & GetMaximumError() const;
     virtual void SetUseShrinkImageFilter(bool const _arg);
     virtual bool GetUseShrinkImageFilter() const;
     virtual void UseShrinkImageFilterOn();
     virtual void UseShrinkImageFilterOff();
   private:
     itkMultiResolutionPyramidImageFilterIUC2IUC2(itkMultiResolutionPyramidImageFilterIUC2IUC2 const & arg0);
     void operator=(itkMultiResolutionPyramidImageFilterIUC2IUC2 const & arg0);
   protected:
     itkMultiResolutionPyramidImageFilterIUC2IUC2();
     ~itkMultiResolutionPyramidImageFilterIUC2IUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkMultiResolutionPyramidImageFilterIUC2IUC2_Pointer {
   public:
     itkMultiResolutionPyramidImageFilterIUC2IUC2_Pointer();
     itkMultiResolutionPyramidImageFilterIUC2IUC2_Pointer(itkMultiResolutionPyramidImageFilterIUC2IUC2_Pointer const & p);
     itkMultiResolutionPyramidImageFilterIUC2IUC2_Pointer(itkMultiResolutionPyramidImageFilterIUC2IUC2 * p);
     ~itkMultiResolutionPyramidImageFilterIUC2IUC2_Pointer();
     itkMultiResolutionPyramidImageFilterIUC2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMultiResolutionPyramidImageFilterIUC2IUC2 * GetPointer() const;
     bool operator<(itkMultiResolutionPyramidImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>(itkMultiResolutionPyramidImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator<=(itkMultiResolutionPyramidImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>=(itkMultiResolutionPyramidImageFilterIUC2IUC2_Pointer const & r) const;
     itkMultiResolutionPyramidImageFilterIUC2IUC2_Pointer & operator=(itkMultiResolutionPyramidImageFilterIUC2IUC2_Pointer const & r);
     itkMultiResolutionPyramidImageFilterIUC2IUC2_Pointer & operator=(itkMultiResolutionPyramidImageFilterIUC2IUC2 * r);
     itkMultiResolutionPyramidImageFilterIUC2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMultiResolutionPyramidImageFilterIUC3IUC3 : public itkImageToImageFilterIUC3IUC3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  OutputHasNumericTraitsCheck = 1 };
     static itkMultiResolutionPyramidImageFilterIUC3IUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetNumberOfLevels(unsigned int num);
     virtual unsigned int GetNumberOfLevels() const;
     virtual void SetSchedule(itkArray2DUI const & schedule);
     virtual itkArray2DUI const & GetSchedule() const;
     virtual void SetStartingShrinkFactors(unsigned int factor);
     virtual void SetStartingShrinkFactors(unsigned int * factors);
     unsigned int const * GetStartingShrinkFactors() const;
     static bool IsScheduleDownwardDivisible(itkArray2DUI const & schedule);
     virtual void GenerateOutputInformation();
     virtual void GenerateOutputRequestedRegion(itkDataObject * output);
     virtual void GenerateInputRequestedRegion();
     virtual void SetMaximumError(double const _arg);
     virtual double const & GetMaximumError() const;
     virtual void SetUseShrinkImageFilter(bool const _arg);
     virtual bool GetUseShrinkImageFilter() const;
     virtual void UseShrinkImageFilterOn();
     virtual void UseShrinkImageFilterOff();
   private:
     itkMultiResolutionPyramidImageFilterIUC3IUC3(itkMultiResolutionPyramidImageFilterIUC3IUC3 const & arg0);
     void operator=(itkMultiResolutionPyramidImageFilterIUC3IUC3 const & arg0);
   protected:
     itkMultiResolutionPyramidImageFilterIUC3IUC3();
     ~itkMultiResolutionPyramidImageFilterIUC3IUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkMultiResolutionPyramidImageFilterIUC3IUC3_Pointer {
   public:
     itkMultiResolutionPyramidImageFilterIUC3IUC3_Pointer();
     itkMultiResolutionPyramidImageFilterIUC3IUC3_Pointer(itkMultiResolutionPyramidImageFilterIUC3IUC3_Pointer const & p);
     itkMultiResolutionPyramidImageFilterIUC3IUC3_Pointer(itkMultiResolutionPyramidImageFilterIUC3IUC3 * p);
     ~itkMultiResolutionPyramidImageFilterIUC3IUC3_Pointer();
     itkMultiResolutionPyramidImageFilterIUC3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMultiResolutionPyramidImageFilterIUC3IUC3 * GetPointer() const;
     bool operator<(itkMultiResolutionPyramidImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>(itkMultiResolutionPyramidImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator<=(itkMultiResolutionPyramidImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>=(itkMultiResolutionPyramidImageFilterIUC3IUC3_Pointer const & r) const;
     itkMultiResolutionPyramidImageFilterIUC3IUC3_Pointer & operator=(itkMultiResolutionPyramidImageFilterIUC3IUC3_Pointer const & r);
     itkMultiResolutionPyramidImageFilterIUC3IUC3_Pointer & operator=(itkMultiResolutionPyramidImageFilterIUC3IUC3 * r);
     itkMultiResolutionPyramidImageFilterIUC3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMultiResolutionPyramidImageFilterIUL2IUL2 : public itkImageToImageFilterIUL2IUL2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  OutputHasNumericTraitsCheck = 1 };
     static itkMultiResolutionPyramidImageFilterIUL2IUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetNumberOfLevels(unsigned int num);
     virtual unsigned int GetNumberOfLevels() const;
     virtual void SetSchedule(itkArray2DUI const & schedule);
     virtual itkArray2DUI const & GetSchedule() const;
     virtual void SetStartingShrinkFactors(unsigned int factor);
     virtual void SetStartingShrinkFactors(unsigned int * factors);
     unsigned int const * GetStartingShrinkFactors() const;
     static bool IsScheduleDownwardDivisible(itkArray2DUI const & schedule);
     virtual void GenerateOutputInformation();
     virtual void GenerateOutputRequestedRegion(itkDataObject * output);
     virtual void GenerateInputRequestedRegion();
     virtual void SetMaximumError(double const _arg);
     virtual double const & GetMaximumError() const;
     virtual void SetUseShrinkImageFilter(bool const _arg);
     virtual bool GetUseShrinkImageFilter() const;
     virtual void UseShrinkImageFilterOn();
     virtual void UseShrinkImageFilterOff();
   private:
     itkMultiResolutionPyramidImageFilterIUL2IUL2(itkMultiResolutionPyramidImageFilterIUL2IUL2 const & arg0);
     void operator=(itkMultiResolutionPyramidImageFilterIUL2IUL2 const & arg0);
   protected:
     itkMultiResolutionPyramidImageFilterIUL2IUL2();
     ~itkMultiResolutionPyramidImageFilterIUL2IUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkMultiResolutionPyramidImageFilterIUL2IUL2_Pointer {
   public:
     itkMultiResolutionPyramidImageFilterIUL2IUL2_Pointer();
     itkMultiResolutionPyramidImageFilterIUL2IUL2_Pointer(itkMultiResolutionPyramidImageFilterIUL2IUL2_Pointer const & p);
     itkMultiResolutionPyramidImageFilterIUL2IUL2_Pointer(itkMultiResolutionPyramidImageFilterIUL2IUL2 * p);
     ~itkMultiResolutionPyramidImageFilterIUL2IUL2_Pointer();
     itkMultiResolutionPyramidImageFilterIUL2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMultiResolutionPyramidImageFilterIUL2IUL2 * GetPointer() const;
     bool operator<(itkMultiResolutionPyramidImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>(itkMultiResolutionPyramidImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator<=(itkMultiResolutionPyramidImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>=(itkMultiResolutionPyramidImageFilterIUL2IUL2_Pointer const & r) const;
     itkMultiResolutionPyramidImageFilterIUL2IUL2_Pointer & operator=(itkMultiResolutionPyramidImageFilterIUL2IUL2_Pointer const & r);
     itkMultiResolutionPyramidImageFilterIUL2IUL2_Pointer & operator=(itkMultiResolutionPyramidImageFilterIUL2IUL2 * r);
     itkMultiResolutionPyramidImageFilterIUL2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMultiResolutionPyramidImageFilterIUL3IUL3 : public itkImageToImageFilterIUL3IUL3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  OutputHasNumericTraitsCheck = 1 };
     static itkMultiResolutionPyramidImageFilterIUL3IUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetNumberOfLevels(unsigned int num);
     virtual unsigned int GetNumberOfLevels() const;
     virtual void SetSchedule(itkArray2DUI const & schedule);
     virtual itkArray2DUI const & GetSchedule() const;
     virtual void SetStartingShrinkFactors(unsigned int factor);
     virtual void SetStartingShrinkFactors(unsigned int * factors);
     unsigned int const * GetStartingShrinkFactors() const;
     static bool IsScheduleDownwardDivisible(itkArray2DUI const & schedule);
     virtual void GenerateOutputInformation();
     virtual void GenerateOutputRequestedRegion(itkDataObject * output);
     virtual void GenerateInputRequestedRegion();
     virtual void SetMaximumError(double const _arg);
     virtual double const & GetMaximumError() const;
     virtual void SetUseShrinkImageFilter(bool const _arg);
     virtual bool GetUseShrinkImageFilter() const;
     virtual void UseShrinkImageFilterOn();
     virtual void UseShrinkImageFilterOff();
   private:
     itkMultiResolutionPyramidImageFilterIUL3IUL3(itkMultiResolutionPyramidImageFilterIUL3IUL3 const & arg0);
     void operator=(itkMultiResolutionPyramidImageFilterIUL3IUL3 const & arg0);
   protected:
     itkMultiResolutionPyramidImageFilterIUL3IUL3();
     ~itkMultiResolutionPyramidImageFilterIUL3IUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkMultiResolutionPyramidImageFilterIUL3IUL3_Pointer {
   public:
     itkMultiResolutionPyramidImageFilterIUL3IUL3_Pointer();
     itkMultiResolutionPyramidImageFilterIUL3IUL3_Pointer(itkMultiResolutionPyramidImageFilterIUL3IUL3_Pointer const & p);
     itkMultiResolutionPyramidImageFilterIUL3IUL3_Pointer(itkMultiResolutionPyramidImageFilterIUL3IUL3 * p);
     ~itkMultiResolutionPyramidImageFilterIUL3IUL3_Pointer();
     itkMultiResolutionPyramidImageFilterIUL3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMultiResolutionPyramidImageFilterIUL3IUL3 * GetPointer() const;
     bool operator<(itkMultiResolutionPyramidImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>(itkMultiResolutionPyramidImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator<=(itkMultiResolutionPyramidImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>=(itkMultiResolutionPyramidImageFilterIUL3IUL3_Pointer const & r) const;
     itkMultiResolutionPyramidImageFilterIUL3IUL3_Pointer & operator=(itkMultiResolutionPyramidImageFilterIUL3IUL3_Pointer const & r);
     itkMultiResolutionPyramidImageFilterIUL3IUL3_Pointer & operator=(itkMultiResolutionPyramidImageFilterIUL3IUL3 * r);
     itkMultiResolutionPyramidImageFilterIUL3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMultiResolutionPyramidImageFilterIUS2IUS2 : public itkImageToImageFilterIUS2IUS2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  OutputHasNumericTraitsCheck = 1 };
     static itkMultiResolutionPyramidImageFilterIUS2IUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetNumberOfLevels(unsigned int num);
     virtual unsigned int GetNumberOfLevels() const;
     virtual void SetSchedule(itkArray2DUI const & schedule);
     virtual itkArray2DUI const & GetSchedule() const;
     virtual void SetStartingShrinkFactors(unsigned int factor);
     virtual void SetStartingShrinkFactors(unsigned int * factors);
     unsigned int const * GetStartingShrinkFactors() const;
     static bool IsScheduleDownwardDivisible(itkArray2DUI const & schedule);
     virtual void GenerateOutputInformation();
     virtual void GenerateOutputRequestedRegion(itkDataObject * output);
     virtual void GenerateInputRequestedRegion();
     virtual void SetMaximumError(double const _arg);
     virtual double const & GetMaximumError() const;
     virtual void SetUseShrinkImageFilter(bool const _arg);
     virtual bool GetUseShrinkImageFilter() const;
     virtual void UseShrinkImageFilterOn();
     virtual void UseShrinkImageFilterOff();
   private:
     itkMultiResolutionPyramidImageFilterIUS2IUS2(itkMultiResolutionPyramidImageFilterIUS2IUS2 const & arg0);
     void operator=(itkMultiResolutionPyramidImageFilterIUS2IUS2 const & arg0);
   protected:
     itkMultiResolutionPyramidImageFilterIUS2IUS2();
     ~itkMultiResolutionPyramidImageFilterIUS2IUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkMultiResolutionPyramidImageFilterIUS2IUS2_Pointer {
   public:
     itkMultiResolutionPyramidImageFilterIUS2IUS2_Pointer();
     itkMultiResolutionPyramidImageFilterIUS2IUS2_Pointer(itkMultiResolutionPyramidImageFilterIUS2IUS2_Pointer const & p);
     itkMultiResolutionPyramidImageFilterIUS2IUS2_Pointer(itkMultiResolutionPyramidImageFilterIUS2IUS2 * p);
     ~itkMultiResolutionPyramidImageFilterIUS2IUS2_Pointer();
     itkMultiResolutionPyramidImageFilterIUS2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMultiResolutionPyramidImageFilterIUS2IUS2 * GetPointer() const;
     bool operator<(itkMultiResolutionPyramidImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>(itkMultiResolutionPyramidImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator<=(itkMultiResolutionPyramidImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>=(itkMultiResolutionPyramidImageFilterIUS2IUS2_Pointer const & r) const;
     itkMultiResolutionPyramidImageFilterIUS2IUS2_Pointer & operator=(itkMultiResolutionPyramidImageFilterIUS2IUS2_Pointer const & r);
     itkMultiResolutionPyramidImageFilterIUS2IUS2_Pointer & operator=(itkMultiResolutionPyramidImageFilterIUS2IUS2 * r);
     itkMultiResolutionPyramidImageFilterIUS2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMultiResolutionPyramidImageFilterIUS3IUS3 : public itkImageToImageFilterIUS3IUS3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  OutputHasNumericTraitsCheck = 1 };
     static itkMultiResolutionPyramidImageFilterIUS3IUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetNumberOfLevels(unsigned int num);
     virtual unsigned int GetNumberOfLevels() const;
     virtual void SetSchedule(itkArray2DUI const & schedule);
     virtual itkArray2DUI const & GetSchedule() const;
     virtual void SetStartingShrinkFactors(unsigned int factor);
     virtual void SetStartingShrinkFactors(unsigned int * factors);
     unsigned int const * GetStartingShrinkFactors() const;
     static bool IsScheduleDownwardDivisible(itkArray2DUI const & schedule);
     virtual void GenerateOutputInformation();
     virtual void GenerateOutputRequestedRegion(itkDataObject * output);
     virtual void GenerateInputRequestedRegion();
     virtual void SetMaximumError(double const _arg);
     virtual double const & GetMaximumError() const;
     virtual void SetUseShrinkImageFilter(bool const _arg);
     virtual bool GetUseShrinkImageFilter() const;
     virtual void UseShrinkImageFilterOn();
     virtual void UseShrinkImageFilterOff();
   private:
     itkMultiResolutionPyramidImageFilterIUS3IUS3(itkMultiResolutionPyramidImageFilterIUS3IUS3 const & arg0);
     void operator=(itkMultiResolutionPyramidImageFilterIUS3IUS3 const & arg0);
   protected:
     itkMultiResolutionPyramidImageFilterIUS3IUS3();
     ~itkMultiResolutionPyramidImageFilterIUS3IUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkMultiResolutionPyramidImageFilterIUS3IUS3_Pointer {
   public:
     itkMultiResolutionPyramidImageFilterIUS3IUS3_Pointer();
     itkMultiResolutionPyramidImageFilterIUS3IUS3_Pointer(itkMultiResolutionPyramidImageFilterIUS3IUS3_Pointer const & p);
     itkMultiResolutionPyramidImageFilterIUS3IUS3_Pointer(itkMultiResolutionPyramidImageFilterIUS3IUS3 * p);
     ~itkMultiResolutionPyramidImageFilterIUS3IUS3_Pointer();
     itkMultiResolutionPyramidImageFilterIUS3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMultiResolutionPyramidImageFilterIUS3IUS3 * GetPointer() const;
     bool operator<(itkMultiResolutionPyramidImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>(itkMultiResolutionPyramidImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator<=(itkMultiResolutionPyramidImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>=(itkMultiResolutionPyramidImageFilterIUS3IUS3_Pointer const & r) const;
     itkMultiResolutionPyramidImageFilterIUS3IUS3_Pointer & operator=(itkMultiResolutionPyramidImageFilterIUS3IUS3_Pointer const & r);
     itkMultiResolutionPyramidImageFilterIUS3IUS3_Pointer & operator=(itkMultiResolutionPyramidImageFilterIUS3IUS3 * r);
     itkMultiResolutionPyramidImageFilterIUS3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


