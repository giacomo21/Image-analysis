// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkDistanceMetricChicken
#endif
#ifdef SWIGCSHARP
%module itkDistanceMetricCsharp
#endif
#ifdef SWIGGUILE
%module itkDistanceMetricGuile
#endif
#ifdef SWIGJAVA
%module itkDistanceMetricJava
#endif
#ifdef SWIGLUA
%module itkDistanceMetricLua
#endif
#ifdef SWIGMODULA3
%module itkDistanceMetricModula3
#endif
#ifdef SWIGMZSCHEME
%module itkDistanceMetricMzscheme
#endif
#ifdef SWIGOCAML
%module itkDistanceMetricOcaml
#endif
#ifdef SWIGPERL
%module itkDistanceMetricPerl
#endif
#ifdef SWIGPERL5
%module itkDistanceMetricPerl5
#endif
#ifdef SWIGPHP
%module itkDistanceMetricPhp
#endif
#ifdef SWIGPHP4
%module itkDistanceMetricPhp4
#endif
#ifdef SWIGPHP5
%module itkDistanceMetricPhp5
#endif
#ifdef SWIGPIKE
%module itkDistanceMetricPike
#endif
#ifdef SWIGPYTHON
%module itkDistanceMetricPython
#endif
#ifdef SWIGR
%module itkDistanceMetricR
#endif
#ifdef SWIGRUBY
%module itkDistanceMetricRuby
#endif
#ifdef SWIGSEXP
%module itkDistanceMetricSexp
#endif
#ifdef SWIGTCL
%module itkDistanceMetricTcl
#endif
#ifdef SWIGXML
%module itkDistanceMetricXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Numerics.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkVector.i
%import wrap_itkArray.i
%import wrap_itkFunctionBase.i


%include itk.i
%include wrap_itkDistanceMetric_ext.i


 class itkDistanceMetricVF2 : public itkFunctionBaseVF2D {
   public:
     virtual char const * GetNameOfClass() const;
     void SetOrigin(itkArrayD const & x);
     virtual itkArrayD const & GetOrigin() const;
     virtual double Evaluate(itkVectorF2 const & x) const = 0;
     virtual double Evaluate(itkVectorF2 const & x1, itkVectorF2 const & x2) const = 0;
     virtual void SetMeasurementVectorSize(unsigned int s);
     virtual unsigned int GetMeasurementVectorSize() const;
   private:
   protected:
     itkDistanceMetricVF2();
     ~itkDistanceMetricVF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkDistanceMetricVF2_Pointer {
   public:
     itkDistanceMetricVF2_Pointer();
     itkDistanceMetricVF2_Pointer(itkDistanceMetricVF2_Pointer const & p);
     itkDistanceMetricVF2_Pointer(itkDistanceMetricVF2 * p);
     ~itkDistanceMetricVF2_Pointer();
     itkDistanceMetricVF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDistanceMetricVF2 * GetPointer() const;
     bool operator<(itkDistanceMetricVF2_Pointer const & r) const;
     bool operator>(itkDistanceMetricVF2_Pointer const & r) const;
     bool operator<=(itkDistanceMetricVF2_Pointer const & r) const;
     bool operator>=(itkDistanceMetricVF2_Pointer const & r) const;
     itkDistanceMetricVF2_Pointer & operator=(itkDistanceMetricVF2_Pointer const & r);
     itkDistanceMetricVF2_Pointer & operator=(itkDistanceMetricVF2 * r);
     itkDistanceMetricVF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDistanceMetricVF3 : public itkFunctionBaseVF3D {
   public:
     virtual char const * GetNameOfClass() const;
     void SetOrigin(itkArrayD const & x);
     virtual itkArrayD const & GetOrigin() const;
     virtual double Evaluate(itkVectorF3 const & x) const = 0;
     virtual double Evaluate(itkVectorF3 const & x1, itkVectorF3 const & x2) const = 0;
     virtual void SetMeasurementVectorSize(unsigned int s);
     virtual unsigned int GetMeasurementVectorSize() const;
   private:
   protected:
     itkDistanceMetricVF3();
     ~itkDistanceMetricVF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkDistanceMetricVF3_Pointer {
   public:
     itkDistanceMetricVF3_Pointer();
     itkDistanceMetricVF3_Pointer(itkDistanceMetricVF3_Pointer const & p);
     itkDistanceMetricVF3_Pointer(itkDistanceMetricVF3 * p);
     ~itkDistanceMetricVF3_Pointer();
     itkDistanceMetricVF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDistanceMetricVF3 * GetPointer() const;
     bool operator<(itkDistanceMetricVF3_Pointer const & r) const;
     bool operator>(itkDistanceMetricVF3_Pointer const & r) const;
     bool operator<=(itkDistanceMetricVF3_Pointer const & r) const;
     bool operator>=(itkDistanceMetricVF3_Pointer const & r) const;
     itkDistanceMetricVF3_Pointer & operator=(itkDistanceMetricVF3_Pointer const & r);
     itkDistanceMetricVF3_Pointer & operator=(itkDistanceMetricVF3 * r);
     itkDistanceMetricVF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


