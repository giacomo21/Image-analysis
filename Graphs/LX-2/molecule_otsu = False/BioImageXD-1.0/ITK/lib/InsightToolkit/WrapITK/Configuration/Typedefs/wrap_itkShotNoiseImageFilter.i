// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkShotNoiseImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkShotNoiseImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkShotNoiseImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkShotNoiseImageFilterJava
#endif
#ifdef SWIGLUA
%module itkShotNoiseImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkShotNoiseImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkShotNoiseImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkShotNoiseImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkShotNoiseImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkShotNoiseImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkShotNoiseImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkShotNoiseImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkShotNoiseImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkShotNoiseImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkShotNoiseImageFilterPython
#endif
#ifdef SWIGR
%module itkShotNoiseImageFilterR
#endif
#ifdef SWIGRUBY
%module itkShotNoiseImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkShotNoiseImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkShotNoiseImageFilterTcl
#endif
#ifdef SWIGXML
%module itkShotNoiseImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "itkBXD.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkInPlaceImageFilterA.i
%import wrap_ITKRegions.i


%include itk.i
%include wrap_itkShotNoiseImageFilter_ext.i


 class itkShotNoiseImageFilterID2ID2 : public itkInPlaceImageFilterID2ID2 {
   public:
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkShotNoiseImageFilterID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual double GetScale() const;
     virtual void SetScale(double const _arg);
   private:
     itkShotNoiseImageFilterID2ID2(itkShotNoiseImageFilterID2ID2 const & arg0);
     void operator=(itkShotNoiseImageFilterID2ID2 const & arg0);
   protected:
     itkShotNoiseImageFilterID2ID2();
     ~itkShotNoiseImageFilterID2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkShotNoiseImageFilterID2ID2_Pointer {
   public:
     itkShotNoiseImageFilterID2ID2_Pointer();
     itkShotNoiseImageFilterID2ID2_Pointer(itkShotNoiseImageFilterID2ID2_Pointer const & p);
     itkShotNoiseImageFilterID2ID2_Pointer(itkShotNoiseImageFilterID2ID2 * p);
     ~itkShotNoiseImageFilterID2ID2_Pointer();
     itkShotNoiseImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkShotNoiseImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkShotNoiseImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkShotNoiseImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkShotNoiseImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkShotNoiseImageFilterID2ID2_Pointer const & r) const;
     itkShotNoiseImageFilterID2ID2_Pointer & operator=(itkShotNoiseImageFilterID2ID2_Pointer const & r);
     itkShotNoiseImageFilterID2ID2_Pointer & operator=(itkShotNoiseImageFilterID2ID2 * r);
     itkShotNoiseImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkShotNoiseImageFilterID3ID3 : public itkInPlaceImageFilterID3ID3 {
   public:
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkShotNoiseImageFilterID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual double GetScale() const;
     virtual void SetScale(double const _arg);
   private:
     itkShotNoiseImageFilterID3ID3(itkShotNoiseImageFilterID3ID3 const & arg0);
     void operator=(itkShotNoiseImageFilterID3ID3 const & arg0);
   protected:
     itkShotNoiseImageFilterID3ID3();
     ~itkShotNoiseImageFilterID3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkShotNoiseImageFilterID3ID3_Pointer {
   public:
     itkShotNoiseImageFilterID3ID3_Pointer();
     itkShotNoiseImageFilterID3ID3_Pointer(itkShotNoiseImageFilterID3ID3_Pointer const & p);
     itkShotNoiseImageFilterID3ID3_Pointer(itkShotNoiseImageFilterID3ID3 * p);
     ~itkShotNoiseImageFilterID3ID3_Pointer();
     itkShotNoiseImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkShotNoiseImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkShotNoiseImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkShotNoiseImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkShotNoiseImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkShotNoiseImageFilterID3ID3_Pointer const & r) const;
     itkShotNoiseImageFilterID3ID3_Pointer & operator=(itkShotNoiseImageFilterID3ID3_Pointer const & r);
     itkShotNoiseImageFilterID3ID3_Pointer & operator=(itkShotNoiseImageFilterID3ID3 * r);
     itkShotNoiseImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkShotNoiseImageFilterIF2IF2 : public itkInPlaceImageFilterIF2IF2 {
   public:
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkShotNoiseImageFilterIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual double GetScale() const;
     virtual void SetScale(double const _arg);
   private:
     itkShotNoiseImageFilterIF2IF2(itkShotNoiseImageFilterIF2IF2 const & arg0);
     void operator=(itkShotNoiseImageFilterIF2IF2 const & arg0);
   protected:
     itkShotNoiseImageFilterIF2IF2();
     ~itkShotNoiseImageFilterIF2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkShotNoiseImageFilterIF2IF2_Pointer {
   public:
     itkShotNoiseImageFilterIF2IF2_Pointer();
     itkShotNoiseImageFilterIF2IF2_Pointer(itkShotNoiseImageFilterIF2IF2_Pointer const & p);
     itkShotNoiseImageFilterIF2IF2_Pointer(itkShotNoiseImageFilterIF2IF2 * p);
     ~itkShotNoiseImageFilterIF2IF2_Pointer();
     itkShotNoiseImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkShotNoiseImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkShotNoiseImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkShotNoiseImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkShotNoiseImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkShotNoiseImageFilterIF2IF2_Pointer const & r) const;
     itkShotNoiseImageFilterIF2IF2_Pointer & operator=(itkShotNoiseImageFilterIF2IF2_Pointer const & r);
     itkShotNoiseImageFilterIF2IF2_Pointer & operator=(itkShotNoiseImageFilterIF2IF2 * r);
     itkShotNoiseImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkShotNoiseImageFilterIF3IF3 : public itkInPlaceImageFilterIF3IF3 {
   public:
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkShotNoiseImageFilterIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual double GetScale() const;
     virtual void SetScale(double const _arg);
   private:
     itkShotNoiseImageFilterIF3IF3(itkShotNoiseImageFilterIF3IF3 const & arg0);
     void operator=(itkShotNoiseImageFilterIF3IF3 const & arg0);
   protected:
     itkShotNoiseImageFilterIF3IF3();
     ~itkShotNoiseImageFilterIF3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkShotNoiseImageFilterIF3IF3_Pointer {
   public:
     itkShotNoiseImageFilterIF3IF3_Pointer();
     itkShotNoiseImageFilterIF3IF3_Pointer(itkShotNoiseImageFilterIF3IF3_Pointer const & p);
     itkShotNoiseImageFilterIF3IF3_Pointer(itkShotNoiseImageFilterIF3IF3 * p);
     ~itkShotNoiseImageFilterIF3IF3_Pointer();
     itkShotNoiseImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkShotNoiseImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkShotNoiseImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkShotNoiseImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkShotNoiseImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkShotNoiseImageFilterIF3IF3_Pointer const & r) const;
     itkShotNoiseImageFilterIF3IF3_Pointer & operator=(itkShotNoiseImageFilterIF3IF3_Pointer const & r);
     itkShotNoiseImageFilterIF3IF3_Pointer & operator=(itkShotNoiseImageFilterIF3IF3 * r);
     itkShotNoiseImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkShotNoiseImageFilterIUC2IUC2 : public itkInPlaceImageFilterIUC2IUC2 {
   public:
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkShotNoiseImageFilterIUC2IUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual double GetScale() const;
     virtual void SetScale(double const _arg);
   private:
     itkShotNoiseImageFilterIUC2IUC2(itkShotNoiseImageFilterIUC2IUC2 const & arg0);
     void operator=(itkShotNoiseImageFilterIUC2IUC2 const & arg0);
   protected:
     itkShotNoiseImageFilterIUC2IUC2();
     ~itkShotNoiseImageFilterIUC2IUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkShotNoiseImageFilterIUC2IUC2_Pointer {
   public:
     itkShotNoiseImageFilterIUC2IUC2_Pointer();
     itkShotNoiseImageFilterIUC2IUC2_Pointer(itkShotNoiseImageFilterIUC2IUC2_Pointer const & p);
     itkShotNoiseImageFilterIUC2IUC2_Pointer(itkShotNoiseImageFilterIUC2IUC2 * p);
     ~itkShotNoiseImageFilterIUC2IUC2_Pointer();
     itkShotNoiseImageFilterIUC2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkShotNoiseImageFilterIUC2IUC2 * GetPointer() const;
     bool operator<(itkShotNoiseImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>(itkShotNoiseImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator<=(itkShotNoiseImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>=(itkShotNoiseImageFilterIUC2IUC2_Pointer const & r) const;
     itkShotNoiseImageFilterIUC2IUC2_Pointer & operator=(itkShotNoiseImageFilterIUC2IUC2_Pointer const & r);
     itkShotNoiseImageFilterIUC2IUC2_Pointer & operator=(itkShotNoiseImageFilterIUC2IUC2 * r);
     itkShotNoiseImageFilterIUC2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkShotNoiseImageFilterIUC3IUC3 : public itkInPlaceImageFilterIUC3IUC3 {
   public:
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkShotNoiseImageFilterIUC3IUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual double GetScale() const;
     virtual void SetScale(double const _arg);
   private:
     itkShotNoiseImageFilterIUC3IUC3(itkShotNoiseImageFilterIUC3IUC3 const & arg0);
     void operator=(itkShotNoiseImageFilterIUC3IUC3 const & arg0);
   protected:
     itkShotNoiseImageFilterIUC3IUC3();
     ~itkShotNoiseImageFilterIUC3IUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkShotNoiseImageFilterIUC3IUC3_Pointer {
   public:
     itkShotNoiseImageFilterIUC3IUC3_Pointer();
     itkShotNoiseImageFilterIUC3IUC3_Pointer(itkShotNoiseImageFilterIUC3IUC3_Pointer const & p);
     itkShotNoiseImageFilterIUC3IUC3_Pointer(itkShotNoiseImageFilterIUC3IUC3 * p);
     ~itkShotNoiseImageFilterIUC3IUC3_Pointer();
     itkShotNoiseImageFilterIUC3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkShotNoiseImageFilterIUC3IUC3 * GetPointer() const;
     bool operator<(itkShotNoiseImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>(itkShotNoiseImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator<=(itkShotNoiseImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>=(itkShotNoiseImageFilterIUC3IUC3_Pointer const & r) const;
     itkShotNoiseImageFilterIUC3IUC3_Pointer & operator=(itkShotNoiseImageFilterIUC3IUC3_Pointer const & r);
     itkShotNoiseImageFilterIUC3IUC3_Pointer & operator=(itkShotNoiseImageFilterIUC3IUC3 * r);
     itkShotNoiseImageFilterIUC3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkShotNoiseImageFilterIUL2IUL2 : public itkInPlaceImageFilterIUL2IUL2 {
   public:
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkShotNoiseImageFilterIUL2IUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual double GetScale() const;
     virtual void SetScale(double const _arg);
   private:
     itkShotNoiseImageFilterIUL2IUL2(itkShotNoiseImageFilterIUL2IUL2 const & arg0);
     void operator=(itkShotNoiseImageFilterIUL2IUL2 const & arg0);
   protected:
     itkShotNoiseImageFilterIUL2IUL2();
     ~itkShotNoiseImageFilterIUL2IUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkShotNoiseImageFilterIUL2IUL2_Pointer {
   public:
     itkShotNoiseImageFilterIUL2IUL2_Pointer();
     itkShotNoiseImageFilterIUL2IUL2_Pointer(itkShotNoiseImageFilterIUL2IUL2_Pointer const & p);
     itkShotNoiseImageFilterIUL2IUL2_Pointer(itkShotNoiseImageFilterIUL2IUL2 * p);
     ~itkShotNoiseImageFilterIUL2IUL2_Pointer();
     itkShotNoiseImageFilterIUL2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkShotNoiseImageFilterIUL2IUL2 * GetPointer() const;
     bool operator<(itkShotNoiseImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>(itkShotNoiseImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator<=(itkShotNoiseImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>=(itkShotNoiseImageFilterIUL2IUL2_Pointer const & r) const;
     itkShotNoiseImageFilterIUL2IUL2_Pointer & operator=(itkShotNoiseImageFilterIUL2IUL2_Pointer const & r);
     itkShotNoiseImageFilterIUL2IUL2_Pointer & operator=(itkShotNoiseImageFilterIUL2IUL2 * r);
     itkShotNoiseImageFilterIUL2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkShotNoiseImageFilterIUL3IUL3 : public itkInPlaceImageFilterIUL3IUL3 {
   public:
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkShotNoiseImageFilterIUL3IUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual double GetScale() const;
     virtual void SetScale(double const _arg);
   private:
     itkShotNoiseImageFilterIUL3IUL3(itkShotNoiseImageFilterIUL3IUL3 const & arg0);
     void operator=(itkShotNoiseImageFilterIUL3IUL3 const & arg0);
   protected:
     itkShotNoiseImageFilterIUL3IUL3();
     ~itkShotNoiseImageFilterIUL3IUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkShotNoiseImageFilterIUL3IUL3_Pointer {
   public:
     itkShotNoiseImageFilterIUL3IUL3_Pointer();
     itkShotNoiseImageFilterIUL3IUL3_Pointer(itkShotNoiseImageFilterIUL3IUL3_Pointer const & p);
     itkShotNoiseImageFilterIUL3IUL3_Pointer(itkShotNoiseImageFilterIUL3IUL3 * p);
     ~itkShotNoiseImageFilterIUL3IUL3_Pointer();
     itkShotNoiseImageFilterIUL3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkShotNoiseImageFilterIUL3IUL3 * GetPointer() const;
     bool operator<(itkShotNoiseImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>(itkShotNoiseImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator<=(itkShotNoiseImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>=(itkShotNoiseImageFilterIUL3IUL3_Pointer const & r) const;
     itkShotNoiseImageFilterIUL3IUL3_Pointer & operator=(itkShotNoiseImageFilterIUL3IUL3_Pointer const & r);
     itkShotNoiseImageFilterIUL3IUL3_Pointer & operator=(itkShotNoiseImageFilterIUL3IUL3 * r);
     itkShotNoiseImageFilterIUL3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkShotNoiseImageFilterIUS2IUS2 : public itkInPlaceImageFilterIUS2IUS2 {
   public:
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkShotNoiseImageFilterIUS2IUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual double GetScale() const;
     virtual void SetScale(double const _arg);
   private:
     itkShotNoiseImageFilterIUS2IUS2(itkShotNoiseImageFilterIUS2IUS2 const & arg0);
     void operator=(itkShotNoiseImageFilterIUS2IUS2 const & arg0);
   protected:
     itkShotNoiseImageFilterIUS2IUS2();
     ~itkShotNoiseImageFilterIUS2IUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkShotNoiseImageFilterIUS2IUS2_Pointer {
   public:
     itkShotNoiseImageFilterIUS2IUS2_Pointer();
     itkShotNoiseImageFilterIUS2IUS2_Pointer(itkShotNoiseImageFilterIUS2IUS2_Pointer const & p);
     itkShotNoiseImageFilterIUS2IUS2_Pointer(itkShotNoiseImageFilterIUS2IUS2 * p);
     ~itkShotNoiseImageFilterIUS2IUS2_Pointer();
     itkShotNoiseImageFilterIUS2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkShotNoiseImageFilterIUS2IUS2 * GetPointer() const;
     bool operator<(itkShotNoiseImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>(itkShotNoiseImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator<=(itkShotNoiseImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>=(itkShotNoiseImageFilterIUS2IUS2_Pointer const & r) const;
     itkShotNoiseImageFilterIUS2IUS2_Pointer & operator=(itkShotNoiseImageFilterIUS2IUS2_Pointer const & r);
     itkShotNoiseImageFilterIUS2IUS2_Pointer & operator=(itkShotNoiseImageFilterIUS2IUS2 * r);
     itkShotNoiseImageFilterIUS2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkShotNoiseImageFilterIUS3IUS3 : public itkInPlaceImageFilterIUS3IUS3 {
   public:
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkShotNoiseImageFilterIUS3IUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual double GetScale() const;
     virtual void SetScale(double const _arg);
   private:
     itkShotNoiseImageFilterIUS3IUS3(itkShotNoiseImageFilterIUS3IUS3 const & arg0);
     void operator=(itkShotNoiseImageFilterIUS3IUS3 const & arg0);
   protected:
     itkShotNoiseImageFilterIUS3IUS3();
     ~itkShotNoiseImageFilterIUS3IUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkShotNoiseImageFilterIUS3IUS3_Pointer {
   public:
     itkShotNoiseImageFilterIUS3IUS3_Pointer();
     itkShotNoiseImageFilterIUS3IUS3_Pointer(itkShotNoiseImageFilterIUS3IUS3_Pointer const & p);
     itkShotNoiseImageFilterIUS3IUS3_Pointer(itkShotNoiseImageFilterIUS3IUS3 * p);
     ~itkShotNoiseImageFilterIUS3IUS3_Pointer();
     itkShotNoiseImageFilterIUS3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkShotNoiseImageFilterIUS3IUS3 * GetPointer() const;
     bool operator<(itkShotNoiseImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>(itkShotNoiseImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator<=(itkShotNoiseImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>=(itkShotNoiseImageFilterIUS3IUS3_Pointer const & r) const;
     itkShotNoiseImageFilterIUS3IUS3_Pointer & operator=(itkShotNoiseImageFilterIUS3IUS3_Pointer const & r);
     itkShotNoiseImageFilterIUS3IUS3_Pointer & operator=(itkShotNoiseImageFilterIUS3IUS3 * r);
     itkShotNoiseImageFilterIUS3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


