# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkVersorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkVersorPython', [dirname(__file__)])
        except ImportError:
            import _itkVersorPython
            return _itkVersorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkVersorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkVersorPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkVersorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkCovariantVectorPython
import vnl_vectorPython
import vcl_complexPython
import pyBasePython
import vnl_matrixPython
import itkFixedArrayPython
import itkVectorPython
import vnl_vector_refPython
import itkPointPython
import itkMatrixPython
import vnl_matrix_fixedPython
class itkVersorD(object):
    """Proxy of C++ itkVersorD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _itkVersorPython.delete_itkVersorD
    def GetVnlQuaternion(self):
        """GetVnlQuaternion(self) -> vnl_quaternion<(double)>"""
        return _itkVersorPython.itkVersorD_GetVnlQuaternion(self)

    def __init__(self, *args): 
        """
        __init__(self) -> itkVersorD
        __init__(self, itkVersorD v) -> itkVersorD
        """
        _itkVersorPython.itkVersorD_swiginit(self,_itkVersorPython.new_itkVersorD(*args))
    def __imul__(self, *args):
        """__imul__(self, itkVersorD v) -> itkVersorD"""
        return _itkVersorPython.itkVersorD___imul__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, itkVersorD v) -> itkVersorD"""
        return _itkVersorPython.itkVersorD___idiv__(self, *args)

    def GetTensor(self):
        """GetTensor(self) -> double"""
        return _itkVersorPython.itkVersorD_GetTensor(self)

    def Normalize(self):
        """Normalize(self)"""
        return _itkVersorPython.itkVersorD_Normalize(self)

    def GetConjugate(self):
        """GetConjugate(self) -> itkVersorD"""
        return _itkVersorPython.itkVersorD_GetConjugate(self)

    def GetReciprocal(self):
        """GetReciprocal(self) -> itkVersorD"""
        return _itkVersorPython.itkVersorD_GetReciprocal(self)

    def __mul__(self, *args):
        """__mul__(self, itkVersorD vec) -> itkVersorD"""
        return _itkVersorPython.itkVersorD___mul__(self, *args)

    def __div__(self, *args):
        """__div__(self, itkVersorD vec) -> itkVersorD"""
        return _itkVersorPython.itkVersorD___div__(self, *args)

    def __eq__(self, *args):
        """__eq__(self, itkVersorD vec) -> bool"""
        return _itkVersorPython.itkVersorD___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, itkVersorD vec) -> bool"""
        return _itkVersorPython.itkVersorD___ne__(self, *args)

    def GetScalar(self):
        """GetScalar(self) -> double"""
        return _itkVersorPython.itkVersorD_GetScalar(self)

    def GetX(self):
        """GetX(self) -> double"""
        return _itkVersorPython.itkVersorD_GetX(self)

    def GetY(self):
        """GetY(self) -> double"""
        return _itkVersorPython.itkVersorD_GetY(self)

    def GetZ(self):
        """GetZ(self) -> double"""
        return _itkVersorPython.itkVersorD_GetZ(self)

    def GetW(self):
        """GetW(self) -> double"""
        return _itkVersorPython.itkVersorD_GetW(self)

    def GetAngle(self):
        """GetAngle(self) -> double"""
        return _itkVersorPython.itkVersorD_GetAngle(self)

    def GetAxis(self):
        """GetAxis(self) -> itkVectorD3"""
        return _itkVersorPython.itkVersorD_GetAxis(self)

    def GetRight(self):
        """GetRight(self) -> itkVectorD3"""
        return _itkVersorPython.itkVersorD_GetRight(self)

    def Set(self, *args):
        """
        Set(self, vnl_quaternion<(double)> arg0)
        Set(self, double x, double y, double z, double w)
        Set(self, itkVectorD3 axis, double angle)
        Set(self, itkMatrixD33 m)
        Set(self, itkVectorD3 axis)
        """
        return _itkVersorPython.itkVersorD_Set(self, *args)

    def SetRotationAroundX(self, *args):
        """SetRotationAroundX(self, double angle)"""
        return _itkVersorPython.itkVersorD_SetRotationAroundX(self, *args)

    def SetRotationAroundY(self, *args):
        """SetRotationAroundY(self, double angle)"""
        return _itkVersorPython.itkVersorD_SetRotationAroundY(self, *args)

    def SetRotationAroundZ(self, *args):
        """SetRotationAroundZ(self, double angle)"""
        return _itkVersorPython.itkVersorD_SetRotationAroundZ(self, *args)

    def SetIdentity(self):
        """SetIdentity(self)"""
        return _itkVersorPython.itkVersorD_SetIdentity(self)

    def Transform(self, *args):
        """
        Transform(self, itkVectorD3 v) -> itkVectorD3
        Transform(self, itkCovariantVectorD3 v) -> itkCovariantVectorD3
        Transform(self, itkPointD3 v) -> itkPointD3
        Transform(self, vnl_vector_fixed<(double,3u)> v) -> vnl_vector_fixed<(double,3u)>
        """
        return _itkVersorPython.itkVersorD_Transform(self, *args)

    def GetMatrix(self):
        """GetMatrix(self) -> itkMatrixD33"""
        return _itkVersorPython.itkVersorD_GetMatrix(self)

    def SquareRoot(self):
        """SquareRoot(self) -> itkVersorD"""
        return _itkVersorPython.itkVersorD_SquareRoot(self)

    def Exponential(self, *args):
        """Exponential(self, double exponent) -> itkVersorD"""
        return _itkVersorPython.itkVersorD_Exponential(self, *args)

itkVersorD.GetVnlQuaternion = new_instancemethod(_itkVersorPython.itkVersorD_GetVnlQuaternion,None,itkVersorD)
itkVersorD.__imul__ = new_instancemethod(_itkVersorPython.itkVersorD___imul__,None,itkVersorD)
itkVersorD.__idiv__ = new_instancemethod(_itkVersorPython.itkVersorD___idiv__,None,itkVersorD)
itkVersorD.GetTensor = new_instancemethod(_itkVersorPython.itkVersorD_GetTensor,None,itkVersorD)
itkVersorD.Normalize = new_instancemethod(_itkVersorPython.itkVersorD_Normalize,None,itkVersorD)
itkVersorD.GetConjugate = new_instancemethod(_itkVersorPython.itkVersorD_GetConjugate,None,itkVersorD)
itkVersorD.GetReciprocal = new_instancemethod(_itkVersorPython.itkVersorD_GetReciprocal,None,itkVersorD)
itkVersorD.__mul__ = new_instancemethod(_itkVersorPython.itkVersorD___mul__,None,itkVersorD)
itkVersorD.__div__ = new_instancemethod(_itkVersorPython.itkVersorD___div__,None,itkVersorD)
itkVersorD.__eq__ = new_instancemethod(_itkVersorPython.itkVersorD___eq__,None,itkVersorD)
itkVersorD.__ne__ = new_instancemethod(_itkVersorPython.itkVersorD___ne__,None,itkVersorD)
itkVersorD.GetScalar = new_instancemethod(_itkVersorPython.itkVersorD_GetScalar,None,itkVersorD)
itkVersorD.GetX = new_instancemethod(_itkVersorPython.itkVersorD_GetX,None,itkVersorD)
itkVersorD.GetY = new_instancemethod(_itkVersorPython.itkVersorD_GetY,None,itkVersorD)
itkVersorD.GetZ = new_instancemethod(_itkVersorPython.itkVersorD_GetZ,None,itkVersorD)
itkVersorD.GetW = new_instancemethod(_itkVersorPython.itkVersorD_GetW,None,itkVersorD)
itkVersorD.GetAngle = new_instancemethod(_itkVersorPython.itkVersorD_GetAngle,None,itkVersorD)
itkVersorD.GetAxis = new_instancemethod(_itkVersorPython.itkVersorD_GetAxis,None,itkVersorD)
itkVersorD.GetRight = new_instancemethod(_itkVersorPython.itkVersorD_GetRight,None,itkVersorD)
itkVersorD.Set = new_instancemethod(_itkVersorPython.itkVersorD_Set,None,itkVersorD)
itkVersorD.SetRotationAroundX = new_instancemethod(_itkVersorPython.itkVersorD_SetRotationAroundX,None,itkVersorD)
itkVersorD.SetRotationAroundY = new_instancemethod(_itkVersorPython.itkVersorD_SetRotationAroundY,None,itkVersorD)
itkVersorD.SetRotationAroundZ = new_instancemethod(_itkVersorPython.itkVersorD_SetRotationAroundZ,None,itkVersorD)
itkVersorD.SetIdentity = new_instancemethod(_itkVersorPython.itkVersorD_SetIdentity,None,itkVersorD)
itkVersorD.Transform = new_instancemethod(_itkVersorPython.itkVersorD_Transform,None,itkVersorD)
itkVersorD.GetMatrix = new_instancemethod(_itkVersorPython.itkVersorD_GetMatrix,None,itkVersorD)
itkVersorD.SquareRoot = new_instancemethod(_itkVersorPython.itkVersorD_SquareRoot,None,itkVersorD)
itkVersorD.Exponential = new_instancemethod(_itkVersorPython.itkVersorD_Exponential,None,itkVersorD)
itkVersorD_swigregister = _itkVersorPython.itkVersorD_swigregister
itkVersorD_swigregister(itkVersorD)



