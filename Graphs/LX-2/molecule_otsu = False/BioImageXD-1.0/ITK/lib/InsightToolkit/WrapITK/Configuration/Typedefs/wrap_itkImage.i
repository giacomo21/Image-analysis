// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkImageChicken
#endif
#ifdef SWIGCSHARP
%module itkImageCsharp
#endif
#ifdef SWIGGUILE
%module itkImageGuile
#endif
#ifdef SWIGJAVA
%module itkImageJava
#endif
#ifdef SWIGLUA
%module itkImageLua
#endif
#ifdef SWIGMODULA3
%module itkImageModula3
#endif
#ifdef SWIGMZSCHEME
%module itkImageMzscheme
#endif
#ifdef SWIGOCAML
%module itkImageOcaml
#endif
#ifdef SWIGPERL
%module itkImagePerl
#endif
#ifdef SWIGPERL5
%module itkImagePerl5
#endif
#ifdef SWIGPHP
%module itkImagePhp
#endif
#ifdef SWIGPHP4
%module itkImagePhp4
#endif
#ifdef SWIGPHP5
%module itkImagePhp5
#endif
#ifdef SWIGPIKE
%module itkImagePike
#endif
#ifdef SWIGPYTHON
%module itkImagePython
#endif
#ifdef SWIGR
%module itkImageR
#endif
#ifdef SWIGRUBY
%module itkImageRuby
#endif
#ifdef SWIGSEXP
%module itkImageSexp
#endif
#ifdef SWIGTCL
%module itkImageTcl
#endif
#ifdef SWIGXML
%module itkImageXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
%}


%{
%}




%import wrap_itkFixedArray.i
%import wrap_itkCovariantVector.i
%import wrap_vcl_complex.i
%import wrap_ITKRegions.i
%import wrap_itkOffset.i
%import wrap_itkIndex.i
%import wrap_itkPoint.i
%import wrap_itkVector.i
%import wrap_itkMatrix.i
%import wrap_ITKCommonBase.i
%import wrap_itkSize.i
%import wrap_itkRGBAPixel.i
%import wrap_itkSymmetricSecondRankTensor.i
%import wrap_itkRGBPixel.i


%include itk.i
%include wrap_itkImage_ext.i


 class itkImageBase2 : public itkDataObject {
   public:
     enum  {  ImageDimension = 2 };
     static itkImageBase2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Initialize();
     static unsigned int GetImageDimension();
     virtual void SetOrigin(itkPointD2 const _arg);
     virtual void SetOrigin(double const * origin);
     virtual void SetOrigin(float const * origin);
     virtual void SetDirection(itkMatrixD22 const direction);
     virtual itkMatrixD22 const & GetDirection() const;
     virtual itkVectorD2 const & GetSpacing() const;
     virtual itkPointD2 const & GetOrigin() const;
     virtual void Allocate();
     virtual void SetLargestPossibleRegion(itkImageRegion2 const & region);
     virtual itkImageRegion2 const & GetLargestPossibleRegion() const;
     virtual void SetBufferedRegion(itkImageRegion2 const & region);
     virtual itkImageRegion2 const & GetBufferedRegion() const;
     virtual void SetRequestedRegion(itkImageRegion2 const & region);
     virtual void SetRequestedRegion(itkDataObject * data);
     virtual itkImageRegion2 const & GetRequestedRegion() const;
     long const * GetOffsetTable() const;
     long ComputeOffset(itkIndex2 const & ind) const;
     itkIndex2 ComputeIndex(long offset) const;
     virtual void SetSpacing(itkVectorD2 const & spacing);
     virtual void SetSpacing(double const * spacing);
     virtual void SetSpacing(float const * spacing);
     virtual void CopyInformation(itkDataObject const * data);
     virtual void Graft(itkDataObject const * data);
     virtual void UpdateOutputInformation();
     virtual void UpdateOutputData();
     virtual void SetRequestedRegionToLargestPossibleRegion();
     virtual bool RequestedRegionIsOutsideOfTheBufferedRegion();
     virtual bool VerifyRequestedRegion();
     virtual unsigned int GetNumberOfComponentsPerPixel() const;
     virtual void SetNumberOfComponentsPerPixel(unsigned int arg0);
   private:
     itkImageBase2(itkImageBase2 const & arg0);
     void operator=(itkImageBase2 const & arg0);
   protected:
     itkImageBase2();
     ~itkImageBase2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     void ComputeOffsetTable();
     virtual void ComputeIndexToPhysicalPointMatrices();
     virtual void InitializeBufferedRegion();
 };


 class itkImageBase2_Pointer {
   public:
     itkImageBase2_Pointer();
     itkImageBase2_Pointer(itkImageBase2_Pointer const & p);
     itkImageBase2_Pointer(itkImageBase2 * p);
     ~itkImageBase2_Pointer();
     itkImageBase2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageBase2 * GetPointer() const;
     bool operator<(itkImageBase2_Pointer const & r) const;
     bool operator>(itkImageBase2_Pointer const & r) const;
     bool operator<=(itkImageBase2_Pointer const & r) const;
     bool operator>=(itkImageBase2_Pointer const & r) const;
     itkImageBase2_Pointer & operator=(itkImageBase2_Pointer const & r);
     itkImageBase2_Pointer & operator=(itkImageBase2 * r);
     itkImageBase2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageBase3 : public itkDataObject {
   public:
     enum  {  ImageDimension = 3 };
     static itkImageBase3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Initialize();
     static unsigned int GetImageDimension();
     virtual void SetOrigin(itkPointD3 const _arg);
     virtual void SetOrigin(double const * origin);
     virtual void SetOrigin(float const * origin);
     virtual void SetDirection(itkMatrixD33 const direction);
     virtual itkMatrixD33 const & GetDirection() const;
     virtual itkVectorD3 const & GetSpacing() const;
     virtual itkPointD3 const & GetOrigin() const;
     virtual void Allocate();
     virtual void SetLargestPossibleRegion(itkImageRegion3 const & region);
     virtual itkImageRegion3 const & GetLargestPossibleRegion() const;
     virtual void SetBufferedRegion(itkImageRegion3 const & region);
     virtual itkImageRegion3 const & GetBufferedRegion() const;
     virtual void SetRequestedRegion(itkImageRegion3 const & region);
     virtual void SetRequestedRegion(itkDataObject * data);
     virtual itkImageRegion3 const & GetRequestedRegion() const;
     long const * GetOffsetTable() const;
     long ComputeOffset(itkIndex3 const & ind) const;
     itkIndex3 ComputeIndex(long offset) const;
     virtual void SetSpacing(itkVectorD3 const & spacing);
     virtual void SetSpacing(double const * spacing);
     virtual void SetSpacing(float const * spacing);
     virtual void CopyInformation(itkDataObject const * data);
     virtual void Graft(itkDataObject const * data);
     virtual void UpdateOutputInformation();
     virtual void UpdateOutputData();
     virtual void SetRequestedRegionToLargestPossibleRegion();
     virtual bool RequestedRegionIsOutsideOfTheBufferedRegion();
     virtual bool VerifyRequestedRegion();
     virtual unsigned int GetNumberOfComponentsPerPixel() const;
     virtual void SetNumberOfComponentsPerPixel(unsigned int arg0);
   private:
     itkImageBase3(itkImageBase3 const & arg0);
     void operator=(itkImageBase3 const & arg0);
   protected:
     itkImageBase3();
     ~itkImageBase3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     void ComputeOffsetTable();
     virtual void ComputeIndexToPhysicalPointMatrices();
     virtual void InitializeBufferedRegion();
 };


 class itkImageBase3_Pointer {
   public:
     itkImageBase3_Pointer();
     itkImageBase3_Pointer(itkImageBase3_Pointer const & p);
     itkImageBase3_Pointer(itkImageBase3 * p);
     ~itkImageBase3_Pointer();
     itkImageBase3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageBase3 * GetPointer() const;
     bool operator<(itkImageBase3_Pointer const & r) const;
     bool operator>(itkImageBase3_Pointer const & r) const;
     bool operator<=(itkImageBase3_Pointer const & r) const;
     bool operator>=(itkImageBase3_Pointer const & r) const;
     itkImageBase3_Pointer & operator=(itkImageBase3_Pointer const & r);
     itkImageBase3_Pointer & operator=(itkImageBase3 * r);
     itkImageBase3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageCF2 : public itkImageBase2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkImageCF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion2 region);
     void SetRegions(itkSize2 size);
     virtual void Initialize();
     void FillBuffer(vcl_complexF const & value);
     void SetPixel(itkIndex2 const & index, vcl_complexF const & value);
     vcl_complexF const & GetPixel(itkIndex2 const & index) const;
     vcl_complexF & GetPixel(itkIndex2 const & index);
     vcl_complexF & operator[](itkIndex2 const & index);
     vcl_complexF const & operator[](itkIndex2 const & index) const;
     vcl_complexF * GetBufferPointer();
     vcl_complexF const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, std::complex< float > > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, std::complex< float > > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, std::complex< float > > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< std::complex< float > > GetPixelAccessor();
     itk::DefaultPixelAccessor< std::complex< float > > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float >, 2u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float >, 2u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageCF2(itkImageCF2 const & arg0);
     void operator=(itkImageCF2 const & arg0);
   protected:
     itkImageCF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageCF2();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageCF2_Pointer {
   public:
     itkImageCF2_Pointer();
     itkImageCF2_Pointer(itkImageCF2_Pointer const & p);
     itkImageCF2_Pointer(itkImageCF2 * p);
     ~itkImageCF2_Pointer();
     itkImageCF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageCF2 * GetPointer() const;
     bool operator<(itkImageCF2_Pointer const & r) const;
     bool operator>(itkImageCF2_Pointer const & r) const;
     bool operator<=(itkImageCF2_Pointer const & r) const;
     bool operator>=(itkImageCF2_Pointer const & r) const;
     itkImageCF2_Pointer & operator=(itkImageCF2_Pointer const & r);
     itkImageCF2_Pointer & operator=(itkImageCF2 * r);
     itkImageCF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageCF3 : public itkImageBase3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkImageCF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion3 region);
     void SetRegions(itkSize3 size);
     virtual void Initialize();
     void FillBuffer(vcl_complexF const & value);
     void SetPixel(itkIndex3 const & index, vcl_complexF const & value);
     vcl_complexF const & GetPixel(itkIndex3 const & index) const;
     vcl_complexF & GetPixel(itkIndex3 const & index);
     vcl_complexF & operator[](itkIndex3 const & index);
     vcl_complexF const & operator[](itkIndex3 const & index) const;
     vcl_complexF * GetBufferPointer();
     vcl_complexF const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, std::complex< float > > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, std::complex< float > > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, std::complex< float > > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< std::complex< float > > GetPixelAccessor();
     itk::DefaultPixelAccessor< std::complex< float > > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float >, 3u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< std::complex< float >, 3u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageCF3(itkImageCF3 const & arg0);
     void operator=(itkImageCF3 const & arg0);
   protected:
     itkImageCF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageCF3();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageCF3_Pointer {
   public:
     itkImageCF3_Pointer();
     itkImageCF3_Pointer(itkImageCF3_Pointer const & p);
     itkImageCF3_Pointer(itkImageCF3 * p);
     ~itkImageCF3_Pointer();
     itkImageCF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageCF3 * GetPointer() const;
     bool operator<(itkImageCF3_Pointer const & r) const;
     bool operator>(itkImageCF3_Pointer const & r) const;
     bool operator<=(itkImageCF3_Pointer const & r) const;
     bool operator>=(itkImageCF3_Pointer const & r) const;
     itkImageCF3_Pointer & operator=(itkImageCF3_Pointer const & r);
     itkImageCF3_Pointer & operator=(itkImageCF3 * r);
     itkImageCF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageCVF22 : public itkImageBase2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkImageCVF22_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion2 region);
     void SetRegions(itkSize2 size);
     virtual void Initialize();
     void FillBuffer(itkCovariantVectorF2 const & value);
     void SetPixel(itkIndex2 const & index, itkCovariantVectorF2 const & value);
     itkCovariantVectorF2 const & GetPixel(itkIndex2 const & index) const;
     itkCovariantVectorF2 & GetPixel(itkIndex2 const & index);
     itkCovariantVectorF2 & operator[](itkIndex2 const & index);
     itkCovariantVectorF2 const & operator[](itkIndex2 const & index) const;
     itkCovariantVectorF2 * GetBufferPointer();
     itkCovariantVectorF2 const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, itk::CovariantVector< float, 2u > > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, itk::CovariantVector< float, 2u > > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, itk::CovariantVector< float, 2u > > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< itk::CovariantVector< float, 2u > > GetPixelAccessor();
     itk::DefaultPixelAccessor< itk::CovariantVector< float, 2u > > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float, 2u >, 2u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float, 2u >, 2u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageCVF22(itkImageCVF22 const & arg0);
     void operator=(itkImageCVF22 const & arg0);
   protected:
     itkImageCVF22();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageCVF22();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageCVF22_Pointer {
   public:
     itkImageCVF22_Pointer();
     itkImageCVF22_Pointer(itkImageCVF22_Pointer const & p);
     itkImageCVF22_Pointer(itkImageCVF22 * p);
     ~itkImageCVF22_Pointer();
     itkImageCVF22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageCVF22 * GetPointer() const;
     bool operator<(itkImageCVF22_Pointer const & r) const;
     bool operator>(itkImageCVF22_Pointer const & r) const;
     bool operator<=(itkImageCVF22_Pointer const & r) const;
     bool operator>=(itkImageCVF22_Pointer const & r) const;
     itkImageCVF22_Pointer & operator=(itkImageCVF22_Pointer const & r);
     itkImageCVF22_Pointer & operator=(itkImageCVF22 * r);
     itkImageCVF22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageCVF33 : public itkImageBase3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkImageCVF33_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion3 region);
     void SetRegions(itkSize3 size);
     virtual void Initialize();
     void FillBuffer(itkCovariantVectorF3 const & value);
     void SetPixel(itkIndex3 const & index, itkCovariantVectorF3 const & value);
     itkCovariantVectorF3 const & GetPixel(itkIndex3 const & index) const;
     itkCovariantVectorF3 & GetPixel(itkIndex3 const & index);
     itkCovariantVectorF3 & operator[](itkIndex3 const & index);
     itkCovariantVectorF3 const & operator[](itkIndex3 const & index) const;
     itkCovariantVectorF3 * GetBufferPointer();
     itkCovariantVectorF3 const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, itk::CovariantVector< float, 3u > > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, itk::CovariantVector< float, 3u > > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, itk::CovariantVector< float, 3u > > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< itk::CovariantVector< float, 3u > > GetPixelAccessor();
     itk::DefaultPixelAccessor< itk::CovariantVector< float, 3u > > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float, 3u >, 3u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::CovariantVector< float, 3u >, 3u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageCVF33(itkImageCVF33 const & arg0);
     void operator=(itkImageCVF33 const & arg0);
   protected:
     itkImageCVF33();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageCVF33();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageCVF33_Pointer {
   public:
     itkImageCVF33_Pointer();
     itkImageCVF33_Pointer(itkImageCVF33_Pointer const & p);
     itkImageCVF33_Pointer(itkImageCVF33 * p);
     ~itkImageCVF33_Pointer();
     itkImageCVF33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageCVF33 * GetPointer() const;
     bool operator<(itkImageCVF33_Pointer const & r) const;
     bool operator>(itkImageCVF33_Pointer const & r) const;
     bool operator<=(itkImageCVF33_Pointer const & r) const;
     bool operator>=(itkImageCVF33_Pointer const & r) const;
     itkImageCVF33_Pointer & operator=(itkImageCVF33_Pointer const & r);
     itkImageCVF33_Pointer & operator=(itkImageCVF33 * r);
     itkImageCVF33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageD2 : public itkImageBase2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkImageD2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion2 region);
     void SetRegions(itkSize2 size);
     virtual void Initialize();
     void FillBuffer(double const & value);
     void SetPixel(itkIndex2 const & index, double const & value);
     double const & GetPixel(itkIndex2 const & index) const;
     double & GetPixel(itkIndex2 const & index);
     double & operator[](itkIndex2 const & index);
     double const & operator[](itkIndex2 const & index) const;
     double * GetBufferPointer();
     double const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, double > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, double > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, double > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< double > GetPixelAccessor();
     itk::DefaultPixelAccessor< double > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< double, 2u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< double, 2u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageD2(itkImageD2 const & arg0);
     void operator=(itkImageD2 const & arg0);
   protected:
     itkImageD2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageD2();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageD2_Pointer {
   public:
     itkImageD2_Pointer();
     itkImageD2_Pointer(itkImageD2_Pointer const & p);
     itkImageD2_Pointer(itkImageD2 * p);
     ~itkImageD2_Pointer();
     itkImageD2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageD2 * GetPointer() const;
     bool operator<(itkImageD2_Pointer const & r) const;
     bool operator>(itkImageD2_Pointer const & r) const;
     bool operator<=(itkImageD2_Pointer const & r) const;
     bool operator>=(itkImageD2_Pointer const & r) const;
     itkImageD2_Pointer & operator=(itkImageD2_Pointer const & r);
     itkImageD2_Pointer & operator=(itkImageD2 * r);
     itkImageD2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageD3 : public itkImageBase3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkImageD3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion3 region);
     void SetRegions(itkSize3 size);
     virtual void Initialize();
     void FillBuffer(double const & value);
     void SetPixel(itkIndex3 const & index, double const & value);
     double const & GetPixel(itkIndex3 const & index) const;
     double & GetPixel(itkIndex3 const & index);
     double & operator[](itkIndex3 const & index);
     double const & operator[](itkIndex3 const & index) const;
     double * GetBufferPointer();
     double const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, double > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, double > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, double > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< double > GetPixelAccessor();
     itk::DefaultPixelAccessor< double > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< double, 3u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< double, 3u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageD3(itkImageD3 const & arg0);
     void operator=(itkImageD3 const & arg0);
   protected:
     itkImageD3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageD3();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageD3_Pointer {
   public:
     itkImageD3_Pointer();
     itkImageD3_Pointer(itkImageD3_Pointer const & p);
     itkImageD3_Pointer(itkImageD3 * p);
     ~itkImageD3_Pointer();
     itkImageD3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageD3 * GetPointer() const;
     bool operator<(itkImageD3_Pointer const & r) const;
     bool operator>(itkImageD3_Pointer const & r) const;
     bool operator<=(itkImageD3_Pointer const & r) const;
     bool operator>=(itkImageD3_Pointer const & r) const;
     itkImageD3_Pointer & operator=(itkImageD3_Pointer const & r);
     itkImageD3_Pointer & operator=(itkImageD3 * r);
     itkImageD3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageF2 : public itkImageBase2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkImageF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion2 region);
     void SetRegions(itkSize2 size);
     virtual void Initialize();
     void FillBuffer(float const & value);
     void SetPixel(itkIndex2 const & index, float const & value);
     float const & GetPixel(itkIndex2 const & index) const;
     float & GetPixel(itkIndex2 const & index);
     float & operator[](itkIndex2 const & index);
     float const & operator[](itkIndex2 const & index) const;
     float * GetBufferPointer();
     float const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, float > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, float > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, float > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< float > GetPixelAccessor();
     itk::DefaultPixelAccessor< float > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< float, 2u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< float, 2u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageF2(itkImageF2 const & arg0);
     void operator=(itkImageF2 const & arg0);
   protected:
     itkImageF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageF2();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageF2_Pointer {
   public:
     itkImageF2_Pointer();
     itkImageF2_Pointer(itkImageF2_Pointer const & p);
     itkImageF2_Pointer(itkImageF2 * p);
     ~itkImageF2_Pointer();
     itkImageF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageF2 * GetPointer() const;
     bool operator<(itkImageF2_Pointer const & r) const;
     bool operator>(itkImageF2_Pointer const & r) const;
     bool operator<=(itkImageF2_Pointer const & r) const;
     bool operator>=(itkImageF2_Pointer const & r) const;
     itkImageF2_Pointer & operator=(itkImageF2_Pointer const & r);
     itkImageF2_Pointer & operator=(itkImageF2 * r);
     itkImageF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageF3 : public itkImageBase3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkImageF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion3 region);
     void SetRegions(itkSize3 size);
     virtual void Initialize();
     void FillBuffer(float const & value);
     void SetPixel(itkIndex3 const & index, float const & value);
     float const & GetPixel(itkIndex3 const & index) const;
     float & GetPixel(itkIndex3 const & index);
     float & operator[](itkIndex3 const & index);
     float const & operator[](itkIndex3 const & index) const;
     float * GetBufferPointer();
     float const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, float > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, float > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, float > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< float > GetPixelAccessor();
     itk::DefaultPixelAccessor< float > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< float, 3u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< float, 3u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageF3(itkImageF3 const & arg0);
     void operator=(itkImageF3 const & arg0);
   protected:
     itkImageF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageF3();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageF3_Pointer {
   public:
     itkImageF3_Pointer();
     itkImageF3_Pointer(itkImageF3_Pointer const & p);
     itkImageF3_Pointer(itkImageF3 * p);
     ~itkImageF3_Pointer();
     itkImageF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageF3 * GetPointer() const;
     bool operator<(itkImageF3_Pointer const & r) const;
     bool operator>(itkImageF3_Pointer const & r) const;
     bool operator<=(itkImageF3_Pointer const & r) const;
     bool operator>=(itkImageF3_Pointer const & r) const;
     itkImageF3_Pointer & operator=(itkImageF3_Pointer const & r);
     itkImageF3_Pointer & operator=(itkImageF3 * r);
     itkImageF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageFAF22 : public itkImageBase2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkImageFAF22_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion2 region);
     void SetRegions(itkSize2 size);
     virtual void Initialize();
     void FillBuffer(itkFixedArrayF2 const & value);
     void SetPixel(itkIndex2 const & index, itkFixedArrayF2 const & value);
     itkFixedArrayF2 const & GetPixel(itkIndex2 const & index) const;
     itkFixedArrayF2 & GetPixel(itkIndex2 const & index);
     itkFixedArrayF2 & operator[](itkIndex2 const & index);
     itkFixedArrayF2 const & operator[](itkIndex2 const & index) const;
     itkFixedArrayF2 * GetBufferPointer();
     itkFixedArrayF2 const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, itk::FixedArray< float, 2u > > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, itk::FixedArray< float, 2u > > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, itk::FixedArray< float, 2u > > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< itk::FixedArray< float, 2u > > GetPixelAccessor();
     itk::DefaultPixelAccessor< itk::FixedArray< float, 2u > > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float, 2u >, 2u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float, 2u >, 2u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageFAF22(itkImageFAF22 const & arg0);
     void operator=(itkImageFAF22 const & arg0);
   protected:
     itkImageFAF22();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageFAF22();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageFAF22_Pointer {
   public:
     itkImageFAF22_Pointer();
     itkImageFAF22_Pointer(itkImageFAF22_Pointer const & p);
     itkImageFAF22_Pointer(itkImageFAF22 * p);
     ~itkImageFAF22_Pointer();
     itkImageFAF22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageFAF22 * GetPointer() const;
     bool operator<(itkImageFAF22_Pointer const & r) const;
     bool operator>(itkImageFAF22_Pointer const & r) const;
     bool operator<=(itkImageFAF22_Pointer const & r) const;
     bool operator>=(itkImageFAF22_Pointer const & r) const;
     itkImageFAF22_Pointer & operator=(itkImageFAF22_Pointer const & r);
     itkImageFAF22_Pointer & operator=(itkImageFAF22 * r);
     itkImageFAF22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageFAF33 : public itkImageBase3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkImageFAF33_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion3 region);
     void SetRegions(itkSize3 size);
     virtual void Initialize();
     void FillBuffer(itkFixedArrayF3 const & value);
     void SetPixel(itkIndex3 const & index, itkFixedArrayF3 const & value);
     itkFixedArrayF3 const & GetPixel(itkIndex3 const & index) const;
     itkFixedArrayF3 & GetPixel(itkIndex3 const & index);
     itkFixedArrayF3 & operator[](itkIndex3 const & index);
     itkFixedArrayF3 const & operator[](itkIndex3 const & index) const;
     itkFixedArrayF3 * GetBufferPointer();
     itkFixedArrayF3 const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, itk::FixedArray< float, 3u > > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, itk::FixedArray< float, 3u > > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, itk::FixedArray< float, 3u > > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< itk::FixedArray< float, 3u > > GetPixelAccessor();
     itk::DefaultPixelAccessor< itk::FixedArray< float, 3u > > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float, 3u >, 3u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::FixedArray< float, 3u >, 3u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageFAF33(itkImageFAF33 const & arg0);
     void operator=(itkImageFAF33 const & arg0);
   protected:
     itkImageFAF33();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageFAF33();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageFAF33_Pointer {
   public:
     itkImageFAF33_Pointer();
     itkImageFAF33_Pointer(itkImageFAF33_Pointer const & p);
     itkImageFAF33_Pointer(itkImageFAF33 * p);
     ~itkImageFAF33_Pointer();
     itkImageFAF33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageFAF33 * GetPointer() const;
     bool operator<(itkImageFAF33_Pointer const & r) const;
     bool operator>(itkImageFAF33_Pointer const & r) const;
     bool operator<=(itkImageFAF33_Pointer const & r) const;
     bool operator>=(itkImageFAF33_Pointer const & r) const;
     itkImageFAF33_Pointer & operator=(itkImageFAF33_Pointer const & r);
     itkImageFAF33_Pointer & operator=(itkImageFAF33 * r);
     itkImageFAF33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageO22 : public itkImageBase2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkImageO22_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion2 region);
     void SetRegions(itkSize2 size);
     virtual void Initialize();
     void FillBuffer(itkOffset2 const & value);
     void SetPixel(itkIndex2 const & index, itkOffset2 const & value);
     itkOffset2 const & GetPixel(itkIndex2 const & index) const;
     itkOffset2 & GetPixel(itkIndex2 const & index);
     itkOffset2 & operator[](itkIndex2 const & index);
     itkOffset2 const & operator[](itkIndex2 const & index) const;
     itkOffset2 * GetBufferPointer();
     itkOffset2 const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, itk::Offset< 2u > > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, itk::Offset< 2u > > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, itk::Offset< 2u > > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< itk::Offset< 2u > > GetPixelAccessor();
     itk::DefaultPixelAccessor< itk::Offset< 2u > > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< 2u >, 2u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< 2u >, 2u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageO22(itkImageO22 const & arg0);
     void operator=(itkImageO22 const & arg0);
   protected:
     itkImageO22();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageO22();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageO22_Pointer {
   public:
     itkImageO22_Pointer();
     itkImageO22_Pointer(itkImageO22_Pointer const & p);
     itkImageO22_Pointer(itkImageO22 * p);
     ~itkImageO22_Pointer();
     itkImageO22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageO22 * GetPointer() const;
     bool operator<(itkImageO22_Pointer const & r) const;
     bool operator>(itkImageO22_Pointer const & r) const;
     bool operator<=(itkImageO22_Pointer const & r) const;
     bool operator>=(itkImageO22_Pointer const & r) const;
     itkImageO22_Pointer & operator=(itkImageO22_Pointer const & r);
     itkImageO22_Pointer & operator=(itkImageO22 * r);
     itkImageO22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageO33 : public itkImageBase3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkImageO33_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion3 region);
     void SetRegions(itkSize3 size);
     virtual void Initialize();
     void FillBuffer(itkOffset3 const & value);
     void SetPixel(itkIndex3 const & index, itkOffset3 const & value);
     itkOffset3 const & GetPixel(itkIndex3 const & index) const;
     itkOffset3 & GetPixel(itkIndex3 const & index);
     itkOffset3 & operator[](itkIndex3 const & index);
     itkOffset3 const & operator[](itkIndex3 const & index) const;
     itkOffset3 * GetBufferPointer();
     itkOffset3 const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, itk::Offset< 3u > > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, itk::Offset< 3u > > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, itk::Offset< 3u > > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< itk::Offset< 3u > > GetPixelAccessor();
     itk::DefaultPixelAccessor< itk::Offset< 3u > > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< 3u >, 3u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::Offset< 3u >, 3u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageO33(itkImageO33 const & arg0);
     void operator=(itkImageO33 const & arg0);
   protected:
     itkImageO33();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageO33();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageO33_Pointer {
   public:
     itkImageO33_Pointer();
     itkImageO33_Pointer(itkImageO33_Pointer const & p);
     itkImageO33_Pointer(itkImageO33 * p);
     ~itkImageO33_Pointer();
     itkImageO33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageO33 * GetPointer() const;
     bool operator<(itkImageO33_Pointer const & r) const;
     bool operator>(itkImageO33_Pointer const & r) const;
     bool operator<=(itkImageO33_Pointer const & r) const;
     bool operator>=(itkImageO33_Pointer const & r) const;
     itkImageO33_Pointer & operator=(itkImageO33_Pointer const & r);
     itkImageO33_Pointer & operator=(itkImageO33 * r);
     itkImageO33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageRGBAUC2 : public itkImageBase2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkImageRGBAUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion2 region);
     void SetRegions(itkSize2 size);
     virtual void Initialize();
     void FillBuffer(itkRGBAPixelUC const & value);
     void SetPixel(itkIndex2 const & index, itkRGBAPixelUC const & value);
     itkRGBAPixelUC const & GetPixel(itkIndex2 const & index) const;
     itkRGBAPixelUC & GetPixel(itkIndex2 const & index);
     itkRGBAPixelUC & operator[](itkIndex2 const & index);
     itkRGBAPixelUC const & operator[](itkIndex2 const & index) const;
     itkRGBAPixelUC * GetBufferPointer();
     itkRGBAPixelUC const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, itk::RGBAPixel< unsigned char > > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, itk::RGBAPixel< unsigned char > > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, itk::RGBAPixel< unsigned char > > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > > GetPixelAccessor();
     itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char >, 2u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char >, 2u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageRGBAUC2(itkImageRGBAUC2 const & arg0);
     void operator=(itkImageRGBAUC2 const & arg0);
   protected:
     itkImageRGBAUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageRGBAUC2();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageRGBAUC2_Pointer {
   public:
     itkImageRGBAUC2_Pointer();
     itkImageRGBAUC2_Pointer(itkImageRGBAUC2_Pointer const & p);
     itkImageRGBAUC2_Pointer(itkImageRGBAUC2 * p);
     ~itkImageRGBAUC2_Pointer();
     itkImageRGBAUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageRGBAUC2 * GetPointer() const;
     bool operator<(itkImageRGBAUC2_Pointer const & r) const;
     bool operator>(itkImageRGBAUC2_Pointer const & r) const;
     bool operator<=(itkImageRGBAUC2_Pointer const & r) const;
     bool operator>=(itkImageRGBAUC2_Pointer const & r) const;
     itkImageRGBAUC2_Pointer & operator=(itkImageRGBAUC2_Pointer const & r);
     itkImageRGBAUC2_Pointer & operator=(itkImageRGBAUC2 * r);
     itkImageRGBAUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageRGBAUC3 : public itkImageBase3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkImageRGBAUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion3 region);
     void SetRegions(itkSize3 size);
     virtual void Initialize();
     void FillBuffer(itkRGBAPixelUC const & value);
     void SetPixel(itkIndex3 const & index, itkRGBAPixelUC const & value);
     itkRGBAPixelUC const & GetPixel(itkIndex3 const & index) const;
     itkRGBAPixelUC & GetPixel(itkIndex3 const & index);
     itkRGBAPixelUC & operator[](itkIndex3 const & index);
     itkRGBAPixelUC const & operator[](itkIndex3 const & index) const;
     itkRGBAPixelUC * GetBufferPointer();
     itkRGBAPixelUC const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, itk::RGBAPixel< unsigned char > > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, itk::RGBAPixel< unsigned char > > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, itk::RGBAPixel< unsigned char > > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > > GetPixelAccessor();
     itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned char > > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char >, 3u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned char >, 3u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageRGBAUC3(itkImageRGBAUC3 const & arg0);
     void operator=(itkImageRGBAUC3 const & arg0);
   protected:
     itkImageRGBAUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageRGBAUC3();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageRGBAUC3_Pointer {
   public:
     itkImageRGBAUC3_Pointer();
     itkImageRGBAUC3_Pointer(itkImageRGBAUC3_Pointer const & p);
     itkImageRGBAUC3_Pointer(itkImageRGBAUC3 * p);
     ~itkImageRGBAUC3_Pointer();
     itkImageRGBAUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageRGBAUC3 * GetPointer() const;
     bool operator<(itkImageRGBAUC3_Pointer const & r) const;
     bool operator>(itkImageRGBAUC3_Pointer const & r) const;
     bool operator<=(itkImageRGBAUC3_Pointer const & r) const;
     bool operator>=(itkImageRGBAUC3_Pointer const & r) const;
     itkImageRGBAUC3_Pointer & operator=(itkImageRGBAUC3_Pointer const & r);
     itkImageRGBAUC3_Pointer & operator=(itkImageRGBAUC3 * r);
     itkImageRGBAUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageRGBAUS2 : public itkImageBase2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkImageRGBAUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion2 region);
     void SetRegions(itkSize2 size);
     virtual void Initialize();
     void FillBuffer(itkRGBAPixelUS const & value);
     void SetPixel(itkIndex2 const & index, itkRGBAPixelUS const & value);
     itkRGBAPixelUS const & GetPixel(itkIndex2 const & index) const;
     itkRGBAPixelUS & GetPixel(itkIndex2 const & index);
     itkRGBAPixelUS & operator[](itkIndex2 const & index);
     itkRGBAPixelUS const & operator[](itkIndex2 const & index) const;
     itkRGBAPixelUS * GetBufferPointer();
     itkRGBAPixelUS const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, itk::RGBAPixel< unsigned short > > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, itk::RGBAPixel< unsigned short > > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, itk::RGBAPixel< unsigned short > > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned short > > GetPixelAccessor();
     itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned short > > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned short >, 2u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned short >, 2u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageRGBAUS2(itkImageRGBAUS2 const & arg0);
     void operator=(itkImageRGBAUS2 const & arg0);
   protected:
     itkImageRGBAUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageRGBAUS2();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageRGBAUS2_Pointer {
   public:
     itkImageRGBAUS2_Pointer();
     itkImageRGBAUS2_Pointer(itkImageRGBAUS2_Pointer const & p);
     itkImageRGBAUS2_Pointer(itkImageRGBAUS2 * p);
     ~itkImageRGBAUS2_Pointer();
     itkImageRGBAUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageRGBAUS2 * GetPointer() const;
     bool operator<(itkImageRGBAUS2_Pointer const & r) const;
     bool operator>(itkImageRGBAUS2_Pointer const & r) const;
     bool operator<=(itkImageRGBAUS2_Pointer const & r) const;
     bool operator>=(itkImageRGBAUS2_Pointer const & r) const;
     itkImageRGBAUS2_Pointer & operator=(itkImageRGBAUS2_Pointer const & r);
     itkImageRGBAUS2_Pointer & operator=(itkImageRGBAUS2 * r);
     itkImageRGBAUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageRGBAUS3 : public itkImageBase3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkImageRGBAUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion3 region);
     void SetRegions(itkSize3 size);
     virtual void Initialize();
     void FillBuffer(itkRGBAPixelUS const & value);
     void SetPixel(itkIndex3 const & index, itkRGBAPixelUS const & value);
     itkRGBAPixelUS const & GetPixel(itkIndex3 const & index) const;
     itkRGBAPixelUS & GetPixel(itkIndex3 const & index);
     itkRGBAPixelUS & operator[](itkIndex3 const & index);
     itkRGBAPixelUS const & operator[](itkIndex3 const & index) const;
     itkRGBAPixelUS * GetBufferPointer();
     itkRGBAPixelUS const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, itk::RGBAPixel< unsigned short > > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, itk::RGBAPixel< unsigned short > > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, itk::RGBAPixel< unsigned short > > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned short > > GetPixelAccessor();
     itk::DefaultPixelAccessor< itk::RGBAPixel< unsigned short > > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned short >, 3u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBAPixel< unsigned short >, 3u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageRGBAUS3(itkImageRGBAUS3 const & arg0);
     void operator=(itkImageRGBAUS3 const & arg0);
   protected:
     itkImageRGBAUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageRGBAUS3();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageRGBAUS3_Pointer {
   public:
     itkImageRGBAUS3_Pointer();
     itkImageRGBAUS3_Pointer(itkImageRGBAUS3_Pointer const & p);
     itkImageRGBAUS3_Pointer(itkImageRGBAUS3 * p);
     ~itkImageRGBAUS3_Pointer();
     itkImageRGBAUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageRGBAUS3 * GetPointer() const;
     bool operator<(itkImageRGBAUS3_Pointer const & r) const;
     bool operator>(itkImageRGBAUS3_Pointer const & r) const;
     bool operator<=(itkImageRGBAUS3_Pointer const & r) const;
     bool operator>=(itkImageRGBAUS3_Pointer const & r) const;
     itkImageRGBAUS3_Pointer & operator=(itkImageRGBAUS3_Pointer const & r);
     itkImageRGBAUS3_Pointer & operator=(itkImageRGBAUS3 * r);
     itkImageRGBAUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageRGBUC2 : public itkImageBase2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkImageRGBUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion2 region);
     void SetRegions(itkSize2 size);
     virtual void Initialize();
     void FillBuffer(itkRGBPixelUC const & value);
     void SetPixel(itkIndex2 const & index, itkRGBPixelUC const & value);
     itkRGBPixelUC const & GetPixel(itkIndex2 const & index) const;
     itkRGBPixelUC & GetPixel(itkIndex2 const & index);
     itkRGBPixelUC & operator[](itkIndex2 const & index);
     itkRGBPixelUC const & operator[](itkIndex2 const & index) const;
     itkRGBPixelUC * GetBufferPointer();
     itkRGBPixelUC const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, itk::RGBPixel< unsigned char > > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, itk::RGBPixel< unsigned char > > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, itk::RGBPixel< unsigned char > > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > > GetPixelAccessor();
     itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char >, 2u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char >, 2u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageRGBUC2(itkImageRGBUC2 const & arg0);
     void operator=(itkImageRGBUC2 const & arg0);
   protected:
     itkImageRGBUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageRGBUC2();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageRGBUC2_Pointer {
   public:
     itkImageRGBUC2_Pointer();
     itkImageRGBUC2_Pointer(itkImageRGBUC2_Pointer const & p);
     itkImageRGBUC2_Pointer(itkImageRGBUC2 * p);
     ~itkImageRGBUC2_Pointer();
     itkImageRGBUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageRGBUC2 * GetPointer() const;
     bool operator<(itkImageRGBUC2_Pointer const & r) const;
     bool operator>(itkImageRGBUC2_Pointer const & r) const;
     bool operator<=(itkImageRGBUC2_Pointer const & r) const;
     bool operator>=(itkImageRGBUC2_Pointer const & r) const;
     itkImageRGBUC2_Pointer & operator=(itkImageRGBUC2_Pointer const & r);
     itkImageRGBUC2_Pointer & operator=(itkImageRGBUC2 * r);
     itkImageRGBUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageRGBUC3 : public itkImageBase3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkImageRGBUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion3 region);
     void SetRegions(itkSize3 size);
     virtual void Initialize();
     void FillBuffer(itkRGBPixelUC const & value);
     void SetPixel(itkIndex3 const & index, itkRGBPixelUC const & value);
     itkRGBPixelUC const & GetPixel(itkIndex3 const & index) const;
     itkRGBPixelUC & GetPixel(itkIndex3 const & index);
     itkRGBPixelUC & operator[](itkIndex3 const & index);
     itkRGBPixelUC const & operator[](itkIndex3 const & index) const;
     itkRGBPixelUC * GetBufferPointer();
     itkRGBPixelUC const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, itk::RGBPixel< unsigned char > > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, itk::RGBPixel< unsigned char > > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, itk::RGBPixel< unsigned char > > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > > GetPixelAccessor();
     itk::DefaultPixelAccessor< itk::RGBPixel< unsigned char > > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char >, 3u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned char >, 3u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageRGBUC3(itkImageRGBUC3 const & arg0);
     void operator=(itkImageRGBUC3 const & arg0);
   protected:
     itkImageRGBUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageRGBUC3();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageRGBUC3_Pointer {
   public:
     itkImageRGBUC3_Pointer();
     itkImageRGBUC3_Pointer(itkImageRGBUC3_Pointer const & p);
     itkImageRGBUC3_Pointer(itkImageRGBUC3 * p);
     ~itkImageRGBUC3_Pointer();
     itkImageRGBUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageRGBUC3 * GetPointer() const;
     bool operator<(itkImageRGBUC3_Pointer const & r) const;
     bool operator>(itkImageRGBUC3_Pointer const & r) const;
     bool operator<=(itkImageRGBUC3_Pointer const & r) const;
     bool operator>=(itkImageRGBUC3_Pointer const & r) const;
     itkImageRGBUC3_Pointer & operator=(itkImageRGBUC3_Pointer const & r);
     itkImageRGBUC3_Pointer & operator=(itkImageRGBUC3 * r);
     itkImageRGBUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageRGBUS2 : public itkImageBase2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkImageRGBUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion2 region);
     void SetRegions(itkSize2 size);
     virtual void Initialize();
     void FillBuffer(itkRGBPixelUS const & value);
     void SetPixel(itkIndex2 const & index, itkRGBPixelUS const & value);
     itkRGBPixelUS const & GetPixel(itkIndex2 const & index) const;
     itkRGBPixelUS & GetPixel(itkIndex2 const & index);
     itkRGBPixelUS & operator[](itkIndex2 const & index);
     itkRGBPixelUS const & operator[](itkIndex2 const & index) const;
     itkRGBPixelUS * GetBufferPointer();
     itkRGBPixelUS const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, itk::RGBPixel< unsigned short > > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, itk::RGBPixel< unsigned short > > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, itk::RGBPixel< unsigned short > > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< itk::RGBPixel< unsigned short > > GetPixelAccessor();
     itk::DefaultPixelAccessor< itk::RGBPixel< unsigned short > > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned short >, 2u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned short >, 2u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageRGBUS2(itkImageRGBUS2 const & arg0);
     void operator=(itkImageRGBUS2 const & arg0);
   protected:
     itkImageRGBUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageRGBUS2();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageRGBUS2_Pointer {
   public:
     itkImageRGBUS2_Pointer();
     itkImageRGBUS2_Pointer(itkImageRGBUS2_Pointer const & p);
     itkImageRGBUS2_Pointer(itkImageRGBUS2 * p);
     ~itkImageRGBUS2_Pointer();
     itkImageRGBUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageRGBUS2 * GetPointer() const;
     bool operator<(itkImageRGBUS2_Pointer const & r) const;
     bool operator>(itkImageRGBUS2_Pointer const & r) const;
     bool operator<=(itkImageRGBUS2_Pointer const & r) const;
     bool operator>=(itkImageRGBUS2_Pointer const & r) const;
     itkImageRGBUS2_Pointer & operator=(itkImageRGBUS2_Pointer const & r);
     itkImageRGBUS2_Pointer & operator=(itkImageRGBUS2 * r);
     itkImageRGBUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageRGBUS3 : public itkImageBase3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkImageRGBUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion3 region);
     void SetRegions(itkSize3 size);
     virtual void Initialize();
     void FillBuffer(itkRGBPixelUS const & value);
     void SetPixel(itkIndex3 const & index, itkRGBPixelUS const & value);
     itkRGBPixelUS const & GetPixel(itkIndex3 const & index) const;
     itkRGBPixelUS & GetPixel(itkIndex3 const & index);
     itkRGBPixelUS & operator[](itkIndex3 const & index);
     itkRGBPixelUS const & operator[](itkIndex3 const & index) const;
     itkRGBPixelUS * GetBufferPointer();
     itkRGBPixelUS const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, itk::RGBPixel< unsigned short > > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, itk::RGBPixel< unsigned short > > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, itk::RGBPixel< unsigned short > > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< itk::RGBPixel< unsigned short > > GetPixelAccessor();
     itk::DefaultPixelAccessor< itk::RGBPixel< unsigned short > > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned short >, 3u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::RGBPixel< unsigned short >, 3u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageRGBUS3(itkImageRGBUS3 const & arg0);
     void operator=(itkImageRGBUS3 const & arg0);
   protected:
     itkImageRGBUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageRGBUS3();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageRGBUS3_Pointer {
   public:
     itkImageRGBUS3_Pointer();
     itkImageRGBUS3_Pointer(itkImageRGBUS3_Pointer const & p);
     itkImageRGBUS3_Pointer(itkImageRGBUS3 * p);
     ~itkImageRGBUS3_Pointer();
     itkImageRGBUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageRGBUS3 * GetPointer() const;
     bool operator<(itkImageRGBUS3_Pointer const & r) const;
     bool operator>(itkImageRGBUS3_Pointer const & r) const;
     bool operator<=(itkImageRGBUS3_Pointer const & r) const;
     bool operator>=(itkImageRGBUS3_Pointer const & r) const;
     itkImageRGBUS3_Pointer & operator=(itkImageRGBUS3_Pointer const & r);
     itkImageRGBUS3_Pointer & operator=(itkImageRGBUS3 * r);
     itkImageRGBUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSSRTD22 : public itkImageBase2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkImageSSRTD22_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion2 region);
     void SetRegions(itkSize2 size);
     virtual void Initialize();
     void FillBuffer(itkSymmetricSecondRankTensorD2 const & value);
     void SetPixel(itkIndex2 const & index, itkSymmetricSecondRankTensorD2 const & value);
     itkSymmetricSecondRankTensorD2 const & GetPixel(itkIndex2 const & index) const;
     itkSymmetricSecondRankTensorD2 & GetPixel(itkIndex2 const & index);
     itkSymmetricSecondRankTensorD2 & operator[](itkIndex2 const & index);
     itkSymmetricSecondRankTensorD2 const & operator[](itkIndex2 const & index) const;
     itkSymmetricSecondRankTensorD2 * GetBufferPointer();
     itkSymmetricSecondRankTensorD2 const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, itk::SymmetricSecondRankTensor< double, 2u > > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, itk::SymmetricSecondRankTensor< double, 2u > > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, itk::SymmetricSecondRankTensor< double, 2u > > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double, 2u > > GetPixelAccessor();
     itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double, 2u > > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double, 2u >, 2u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double, 2u >, 2u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageSSRTD22(itkImageSSRTD22 const & arg0);
     void operator=(itkImageSSRTD22 const & arg0);
   protected:
     itkImageSSRTD22();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageSSRTD22();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageSSRTD22_Pointer {
   public:
     itkImageSSRTD22_Pointer();
     itkImageSSRTD22_Pointer(itkImageSSRTD22_Pointer const & p);
     itkImageSSRTD22_Pointer(itkImageSSRTD22 * p);
     ~itkImageSSRTD22_Pointer();
     itkImageSSRTD22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSSRTD22 * GetPointer() const;
     bool operator<(itkImageSSRTD22_Pointer const & r) const;
     bool operator>(itkImageSSRTD22_Pointer const & r) const;
     bool operator<=(itkImageSSRTD22_Pointer const & r) const;
     bool operator>=(itkImageSSRTD22_Pointer const & r) const;
     itkImageSSRTD22_Pointer & operator=(itkImageSSRTD22_Pointer const & r);
     itkImageSSRTD22_Pointer & operator=(itkImageSSRTD22 * r);
     itkImageSSRTD22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSSRTD33 : public itkImageBase3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkImageSSRTD33_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion3 region);
     void SetRegions(itkSize3 size);
     virtual void Initialize();
     void FillBuffer(itkSymmetricSecondRankTensorD3 const & value);
     void SetPixel(itkIndex3 const & index, itkSymmetricSecondRankTensorD3 const & value);
     itkSymmetricSecondRankTensorD3 const & GetPixel(itkIndex3 const & index) const;
     itkSymmetricSecondRankTensorD3 & GetPixel(itkIndex3 const & index);
     itkSymmetricSecondRankTensorD3 & operator[](itkIndex3 const & index);
     itkSymmetricSecondRankTensorD3 const & operator[](itkIndex3 const & index) const;
     itkSymmetricSecondRankTensorD3 * GetBufferPointer();
     itkSymmetricSecondRankTensorD3 const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, itk::SymmetricSecondRankTensor< double, 3u > > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, itk::SymmetricSecondRankTensor< double, 3u > > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, itk::SymmetricSecondRankTensor< double, 3u > > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double, 3u > > GetPixelAccessor();
     itk::DefaultPixelAccessor< itk::SymmetricSecondRankTensor< double, 3u > > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double, 3u >, 3u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::SymmetricSecondRankTensor< double, 3u >, 3u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageSSRTD33(itkImageSSRTD33 const & arg0);
     void operator=(itkImageSSRTD33 const & arg0);
   protected:
     itkImageSSRTD33();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageSSRTD33();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageSSRTD33_Pointer {
   public:
     itkImageSSRTD33_Pointer();
     itkImageSSRTD33_Pointer(itkImageSSRTD33_Pointer const & p);
     itkImageSSRTD33_Pointer(itkImageSSRTD33 * p);
     ~itkImageSSRTD33_Pointer();
     itkImageSSRTD33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSSRTD33 * GetPointer() const;
     bool operator<(itkImageSSRTD33_Pointer const & r) const;
     bool operator>(itkImageSSRTD33_Pointer const & r) const;
     bool operator<=(itkImageSSRTD33_Pointer const & r) const;
     bool operator>=(itkImageSSRTD33_Pointer const & r) const;
     itkImageSSRTD33_Pointer & operator=(itkImageSSRTD33_Pointer const & r);
     itkImageSSRTD33_Pointer & operator=(itkImageSSRTD33 * r);
     itkImageSSRTD33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageUC2 : public itkImageBase2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkImageUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion2 region);
     void SetRegions(itkSize2 size);
     virtual void Initialize();
     void FillBuffer(unsigned char const & value);
     void SetPixel(itkIndex2 const & index, unsigned char const & value);
     unsigned char const & GetPixel(itkIndex2 const & index) const;
     unsigned char & GetPixel(itkIndex2 const & index);
     unsigned char & operator[](itkIndex2 const & index);
     unsigned char const & operator[](itkIndex2 const & index) const;
     unsigned char * GetBufferPointer();
     unsigned char const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, unsigned char > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, unsigned char > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, unsigned char > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< unsigned char > GetPixelAccessor();
     itk::DefaultPixelAccessor< unsigned char > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char, 2u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char, 2u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageUC2(itkImageUC2 const & arg0);
     void operator=(itkImageUC2 const & arg0);
   protected:
     itkImageUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageUC2();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageUC2_Pointer {
   public:
     itkImageUC2_Pointer();
     itkImageUC2_Pointer(itkImageUC2_Pointer const & p);
     itkImageUC2_Pointer(itkImageUC2 * p);
     ~itkImageUC2_Pointer();
     itkImageUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageUC2 * GetPointer() const;
     bool operator<(itkImageUC2_Pointer const & r) const;
     bool operator>(itkImageUC2_Pointer const & r) const;
     bool operator<=(itkImageUC2_Pointer const & r) const;
     bool operator>=(itkImageUC2_Pointer const & r) const;
     itkImageUC2_Pointer & operator=(itkImageUC2_Pointer const & r);
     itkImageUC2_Pointer & operator=(itkImageUC2 * r);
     itkImageUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageUC3 : public itkImageBase3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkImageUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion3 region);
     void SetRegions(itkSize3 size);
     virtual void Initialize();
     void FillBuffer(unsigned char const & value);
     void SetPixel(itkIndex3 const & index, unsigned char const & value);
     unsigned char const & GetPixel(itkIndex3 const & index) const;
     unsigned char & GetPixel(itkIndex3 const & index);
     unsigned char & operator[](itkIndex3 const & index);
     unsigned char const & operator[](itkIndex3 const & index) const;
     unsigned char * GetBufferPointer();
     unsigned char const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, unsigned char > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, unsigned char > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, unsigned char > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< unsigned char > GetPixelAccessor();
     itk::DefaultPixelAccessor< unsigned char > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char, 3u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< unsigned char, 3u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageUC3(itkImageUC3 const & arg0);
     void operator=(itkImageUC3 const & arg0);
   protected:
     itkImageUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageUC3();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageUC3_Pointer {
   public:
     itkImageUC3_Pointer();
     itkImageUC3_Pointer(itkImageUC3_Pointer const & p);
     itkImageUC3_Pointer(itkImageUC3 * p);
     ~itkImageUC3_Pointer();
     itkImageUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageUC3 * GetPointer() const;
     bool operator<(itkImageUC3_Pointer const & r) const;
     bool operator>(itkImageUC3_Pointer const & r) const;
     bool operator<=(itkImageUC3_Pointer const & r) const;
     bool operator>=(itkImageUC3_Pointer const & r) const;
     itkImageUC3_Pointer & operator=(itkImageUC3_Pointer const & r);
     itkImageUC3_Pointer & operator=(itkImageUC3 * r);
     itkImageUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageUL2 : public itkImageBase2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkImageUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion2 region);
     void SetRegions(itkSize2 size);
     virtual void Initialize();
     void FillBuffer(unsigned long const & value);
     void SetPixel(itkIndex2 const & index, unsigned long const & value);
     unsigned long const & GetPixel(itkIndex2 const & index) const;
     unsigned long & GetPixel(itkIndex2 const & index);
     unsigned long & operator[](itkIndex2 const & index);
     unsigned long const & operator[](itkIndex2 const & index) const;
     unsigned long * GetBufferPointer();
     unsigned long const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, unsigned long > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, unsigned long > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, unsigned long > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< unsigned long > GetPixelAccessor();
     itk::DefaultPixelAccessor< unsigned long > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long, 2u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long, 2u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageUL2(itkImageUL2 const & arg0);
     void operator=(itkImageUL2 const & arg0);
   protected:
     itkImageUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageUL2();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageUL2_Pointer {
   public:
     itkImageUL2_Pointer();
     itkImageUL2_Pointer(itkImageUL2_Pointer const & p);
     itkImageUL2_Pointer(itkImageUL2 * p);
     ~itkImageUL2_Pointer();
     itkImageUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageUL2 * GetPointer() const;
     bool operator<(itkImageUL2_Pointer const & r) const;
     bool operator>(itkImageUL2_Pointer const & r) const;
     bool operator<=(itkImageUL2_Pointer const & r) const;
     bool operator>=(itkImageUL2_Pointer const & r) const;
     itkImageUL2_Pointer & operator=(itkImageUL2_Pointer const & r);
     itkImageUL2_Pointer & operator=(itkImageUL2 * r);
     itkImageUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageUL3 : public itkImageBase3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkImageUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion3 region);
     void SetRegions(itkSize3 size);
     virtual void Initialize();
     void FillBuffer(unsigned long const & value);
     void SetPixel(itkIndex3 const & index, unsigned long const & value);
     unsigned long const & GetPixel(itkIndex3 const & index) const;
     unsigned long & GetPixel(itkIndex3 const & index);
     unsigned long & operator[](itkIndex3 const & index);
     unsigned long const & operator[](itkIndex3 const & index) const;
     unsigned long * GetBufferPointer();
     unsigned long const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, unsigned long > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, unsigned long > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, unsigned long > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< unsigned long > GetPixelAccessor();
     itk::DefaultPixelAccessor< unsigned long > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long, 3u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< unsigned long, 3u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageUL3(itkImageUL3 const & arg0);
     void operator=(itkImageUL3 const & arg0);
   protected:
     itkImageUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageUL3();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageUL3_Pointer {
   public:
     itkImageUL3_Pointer();
     itkImageUL3_Pointer(itkImageUL3_Pointer const & p);
     itkImageUL3_Pointer(itkImageUL3 * p);
     ~itkImageUL3_Pointer();
     itkImageUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageUL3 * GetPointer() const;
     bool operator<(itkImageUL3_Pointer const & r) const;
     bool operator>(itkImageUL3_Pointer const & r) const;
     bool operator<=(itkImageUL3_Pointer const & r) const;
     bool operator>=(itkImageUL3_Pointer const & r) const;
     itkImageUL3_Pointer & operator=(itkImageUL3_Pointer const & r);
     itkImageUL3_Pointer & operator=(itkImageUL3 * r);
     itkImageUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageUS2 : public itkImageBase2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkImageUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion2 region);
     void SetRegions(itkSize2 size);
     virtual void Initialize();
     void FillBuffer(unsigned short const & value);
     void SetPixel(itkIndex2 const & index, unsigned short const & value);
     unsigned short const & GetPixel(itkIndex2 const & index) const;
     unsigned short & GetPixel(itkIndex2 const & index);
     unsigned short & operator[](itkIndex2 const & index);
     unsigned short const & operator[](itkIndex2 const & index) const;
     unsigned short * GetBufferPointer();
     unsigned short const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, unsigned short > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, unsigned short > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, unsigned short > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< unsigned short > GetPixelAccessor();
     itk::DefaultPixelAccessor< unsigned short > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short, 2u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short, 2u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageUS2(itkImageUS2 const & arg0);
     void operator=(itkImageUS2 const & arg0);
   protected:
     itkImageUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageUS2();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageUS2_Pointer {
   public:
     itkImageUS2_Pointer();
     itkImageUS2_Pointer(itkImageUS2_Pointer const & p);
     itkImageUS2_Pointer(itkImageUS2 * p);
     ~itkImageUS2_Pointer();
     itkImageUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageUS2 * GetPointer() const;
     bool operator<(itkImageUS2_Pointer const & r) const;
     bool operator>(itkImageUS2_Pointer const & r) const;
     bool operator<=(itkImageUS2_Pointer const & r) const;
     bool operator>=(itkImageUS2_Pointer const & r) const;
     itkImageUS2_Pointer & operator=(itkImageUS2_Pointer const & r);
     itkImageUS2_Pointer & operator=(itkImageUS2 * r);
     itkImageUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageUS3 : public itkImageBase3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkImageUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion3 region);
     void SetRegions(itkSize3 size);
     virtual void Initialize();
     void FillBuffer(unsigned short const & value);
     void SetPixel(itkIndex3 const & index, unsigned short const & value);
     unsigned short const & GetPixel(itkIndex3 const & index) const;
     unsigned short & GetPixel(itkIndex3 const & index);
     unsigned short & operator[](itkIndex3 const & index);
     unsigned short const & operator[](itkIndex3 const & index) const;
     unsigned short * GetBufferPointer();
     unsigned short const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, unsigned short > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, unsigned short > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, unsigned short > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< unsigned short > GetPixelAccessor();
     itk::DefaultPixelAccessor< unsigned short > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short, 3u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< unsigned short, 3u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageUS3(itkImageUS3 const & arg0);
     void operator=(itkImageUS3 const & arg0);
   protected:
     itkImageUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageUS3();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageUS3_Pointer {
   public:
     itkImageUS3_Pointer();
     itkImageUS3_Pointer(itkImageUS3_Pointer const & p);
     itkImageUS3_Pointer(itkImageUS3 * p);
     ~itkImageUS3_Pointer();
     itkImageUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageUS3 * GetPointer() const;
     bool operator<(itkImageUS3_Pointer const & r) const;
     bool operator>(itkImageUS3_Pointer const & r) const;
     bool operator<=(itkImageUS3_Pointer const & r) const;
     bool operator>=(itkImageUS3_Pointer const & r) const;
     itkImageUS3_Pointer & operator=(itkImageUS3_Pointer const & r);
     itkImageUS3_Pointer & operator=(itkImageUS3 * r);
     itkImageUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageVF22 : public itkImageBase2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkImageVF22_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion2 region);
     void SetRegions(itkSize2 size);
     virtual void Initialize();
     void FillBuffer(itkVectorF2 const & value);
     void SetPixel(itkIndex2 const & index, itkVectorF2 const & value);
     itkVectorF2 const & GetPixel(itkIndex2 const & index) const;
     itkVectorF2 & GetPixel(itkIndex2 const & index);
     itkVectorF2 & operator[](itkIndex2 const & index);
     itkVectorF2 const & operator[](itkIndex2 const & index) const;
     itkVectorF2 * GetBufferPointer();
     itkVectorF2 const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, itk::Vector< float, 2u > > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, itk::Vector< float, 2u > > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, itk::Vector< float, 2u > > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< itk::Vector< float, 2u > > GetPixelAccessor();
     itk::DefaultPixelAccessor< itk::Vector< float, 2u > > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float, 2u >, 2u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float, 2u >, 2u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageVF22(itkImageVF22 const & arg0);
     void operator=(itkImageVF22 const & arg0);
   protected:
     itkImageVF22();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageVF22();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageVF22_Pointer {
   public:
     itkImageVF22_Pointer();
     itkImageVF22_Pointer(itkImageVF22_Pointer const & p);
     itkImageVF22_Pointer(itkImageVF22 * p);
     ~itkImageVF22_Pointer();
     itkImageVF22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageVF22 * GetPointer() const;
     bool operator<(itkImageVF22_Pointer const & r) const;
     bool operator>(itkImageVF22_Pointer const & r) const;
     bool operator<=(itkImageVF22_Pointer const & r) const;
     bool operator>=(itkImageVF22_Pointer const & r) const;
     itkImageVF22_Pointer & operator=(itkImageVF22_Pointer const & r);
     itkImageVF22_Pointer & operator=(itkImageVF22 * r);
     itkImageVF22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageVF33 : public itkImageBase3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkImageVF33_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Allocate();
     void SetRegions(itkImageRegion3 region);
     void SetRegions(itkSize3 size);
     virtual void Initialize();
     void FillBuffer(itkVectorF3 const & value);
     void SetPixel(itkIndex3 const & index, itkVectorF3 const & value);
     itkVectorF3 const & GetPixel(itkIndex3 const & index) const;
     itkVectorF3 & GetPixel(itkIndex3 const & index);
     itkVectorF3 & operator[](itkIndex3 const & index);
     itkVectorF3 const & operator[](itkIndex3 const & index) const;
     itkVectorF3 * GetBufferPointer();
     itkVectorF3 const * GetBufferPointer() const;
     itk::ImportImageContainer< unsigned long, itk::Vector< float, 3u > > * GetPixelContainer();
     itk::ImportImageContainer< unsigned long, itk::Vector< float, 3u > > const * GetPixelContainer() const;
     void SetPixelContainer(itk::ImportImageContainer< unsigned long, itk::Vector< float, 3u > > * container);
     virtual void Graft(itkDataObject const * data);
     itk::DefaultPixelAccessor< itk::Vector< float, 3u > > GetPixelAccessor();
     itk::DefaultPixelAccessor< itk::Vector< float, 3u > > const GetPixelAccessor() const;
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float, 3u >, 3u > > GetNeighborhoodAccessor();
     itk::NeighborhoodAccessorFunctor< itk::Image< itk::Vector< float, 3u >, 3u > > const GetNeighborhoodAccessor() const;
   private:
     itkImageVF33(itkImageVF33 const & arg0);
     void operator=(itkImageVF33 const & arg0);
   protected:
     itkImageVF33();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     ~itkImageVF33();
     virtual void ComputeIndexToPhysicalPointMatrices();
 };


 class itkImageVF33_Pointer {
   public:
     itkImageVF33_Pointer();
     itkImageVF33_Pointer(itkImageVF33_Pointer const & p);
     itkImageVF33_Pointer(itkImageVF33 * p);
     ~itkImageVF33_Pointer();
     itkImageVF33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageVF33 * GetPointer() const;
     bool operator<(itkImageVF33_Pointer const & r) const;
     bool operator>(itkImageVF33_Pointer const & r) const;
     bool operator<=(itkImageVF33_Pointer const & r) const;
     bool operator>=(itkImageVF33_Pointer const & r) const;
     itkImageVF33_Pointer & operator=(itkImageVF33_Pointer const & r);
     itkImageVF33_Pointer & operator=(itkImageVF33 * r);
     itkImageVF33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


