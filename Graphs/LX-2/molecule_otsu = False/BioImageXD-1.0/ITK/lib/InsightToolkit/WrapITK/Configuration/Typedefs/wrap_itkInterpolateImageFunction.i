// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkInterpolateImageFunctionChicken
#endif
#ifdef SWIGCSHARP
%module itkInterpolateImageFunctionCsharp
#endif
#ifdef SWIGGUILE
%module itkInterpolateImageFunctionGuile
#endif
#ifdef SWIGJAVA
%module itkInterpolateImageFunctionJava
#endif
#ifdef SWIGLUA
%module itkInterpolateImageFunctionLua
#endif
#ifdef SWIGMODULA3
%module itkInterpolateImageFunctionModula3
#endif
#ifdef SWIGMZSCHEME
%module itkInterpolateImageFunctionMzscheme
#endif
#ifdef SWIGOCAML
%module itkInterpolateImageFunctionOcaml
#endif
#ifdef SWIGPERL
%module itkInterpolateImageFunctionPerl
#endif
#ifdef SWIGPERL5
%module itkInterpolateImageFunctionPerl5
#endif
#ifdef SWIGPHP
%module itkInterpolateImageFunctionPhp
#endif
#ifdef SWIGPHP4
%module itkInterpolateImageFunctionPhp4
#endif
#ifdef SWIGPHP5
%module itkInterpolateImageFunctionPhp5
#endif
#ifdef SWIGPIKE
%module itkInterpolateImageFunctionPike
#endif
#ifdef SWIGPYTHON
%module itkInterpolateImageFunctionPython
#endif
#ifdef SWIGR
%module itkInterpolateImageFunctionR
#endif
#ifdef SWIGRUBY
%module itkInterpolateImageFunctionRuby
#endif
#ifdef SWIGSEXP
%module itkInterpolateImageFunctionSexp
#endif
#ifdef SWIGTCL
%module itkInterpolateImageFunctionTcl
#endif
#ifdef SWIGXML
%module itkInterpolateImageFunctionXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
%}


%{
%}




%import wrap_itkPoint.i
%import wrap_itkContinuousIndex.i
%import wrap_itkIndex.i
%import wrap_itkImageFunction.i
%import wrap_ITKCommonBase.i


%include itk.i
%include wrap_itkInterpolateImageFunction_ext.i


 class itkInterpolateImageFunctionID2D : public itkImageFunctionID2DD {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual double Evaluate(itkPointD2 const & point) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD2 const & index) const = 0;
     virtual double EvaluateAtIndex(itkIndex2 const & index) const;
   private:
     itkInterpolateImageFunctionID2D(itkInterpolateImageFunctionID2D const & arg0);
     void operator=(itkInterpolateImageFunctionID2D const & arg0);
   protected:
     itkInterpolateImageFunctionID2D();
     ~itkInterpolateImageFunctionID2D();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkInterpolateImageFunctionID2D_Pointer {
   public:
     itkInterpolateImageFunctionID2D_Pointer();
     itkInterpolateImageFunctionID2D_Pointer(itkInterpolateImageFunctionID2D_Pointer const & p);
     itkInterpolateImageFunctionID2D_Pointer(itkInterpolateImageFunctionID2D * p);
     ~itkInterpolateImageFunctionID2D_Pointer();
     itkInterpolateImageFunctionID2D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkInterpolateImageFunctionID2D * GetPointer() const;
     bool operator<(itkInterpolateImageFunctionID2D_Pointer const & r) const;
     bool operator>(itkInterpolateImageFunctionID2D_Pointer const & r) const;
     bool operator<=(itkInterpolateImageFunctionID2D_Pointer const & r) const;
     bool operator>=(itkInterpolateImageFunctionID2D_Pointer const & r) const;
     itkInterpolateImageFunctionID2D_Pointer & operator=(itkInterpolateImageFunctionID2D_Pointer const & r);
     itkInterpolateImageFunctionID2D_Pointer & operator=(itkInterpolateImageFunctionID2D * r);
     itkInterpolateImageFunctionID2D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkInterpolateImageFunctionID2F : public itkImageFunctionID2DF {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual double Evaluate(itkPointF2 const & point) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexF2 const & index) const = 0;
     virtual double EvaluateAtIndex(itkIndex2 const & index) const;
   private:
     itkInterpolateImageFunctionID2F(itkInterpolateImageFunctionID2F const & arg0);
     void operator=(itkInterpolateImageFunctionID2F const & arg0);
   protected:
     itkInterpolateImageFunctionID2F();
     ~itkInterpolateImageFunctionID2F();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkInterpolateImageFunctionID2F_Pointer {
   public:
     itkInterpolateImageFunctionID2F_Pointer();
     itkInterpolateImageFunctionID2F_Pointer(itkInterpolateImageFunctionID2F_Pointer const & p);
     itkInterpolateImageFunctionID2F_Pointer(itkInterpolateImageFunctionID2F * p);
     ~itkInterpolateImageFunctionID2F_Pointer();
     itkInterpolateImageFunctionID2F * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkInterpolateImageFunctionID2F * GetPointer() const;
     bool operator<(itkInterpolateImageFunctionID2F_Pointer const & r) const;
     bool operator>(itkInterpolateImageFunctionID2F_Pointer const & r) const;
     bool operator<=(itkInterpolateImageFunctionID2F_Pointer const & r) const;
     bool operator>=(itkInterpolateImageFunctionID2F_Pointer const & r) const;
     itkInterpolateImageFunctionID2F_Pointer & operator=(itkInterpolateImageFunctionID2F_Pointer const & r);
     itkInterpolateImageFunctionID2F_Pointer & operator=(itkInterpolateImageFunctionID2F * r);
     itkInterpolateImageFunctionID2F * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkInterpolateImageFunctionID3D : public itkImageFunctionID3DD {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual double Evaluate(itkPointD3 const & point) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD3 const & index) const = 0;
     virtual double EvaluateAtIndex(itkIndex3 const & index) const;
   private:
     itkInterpolateImageFunctionID3D(itkInterpolateImageFunctionID3D const & arg0);
     void operator=(itkInterpolateImageFunctionID3D const & arg0);
   protected:
     itkInterpolateImageFunctionID3D();
     ~itkInterpolateImageFunctionID3D();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkInterpolateImageFunctionID3D_Pointer {
   public:
     itkInterpolateImageFunctionID3D_Pointer();
     itkInterpolateImageFunctionID3D_Pointer(itkInterpolateImageFunctionID3D_Pointer const & p);
     itkInterpolateImageFunctionID3D_Pointer(itkInterpolateImageFunctionID3D * p);
     ~itkInterpolateImageFunctionID3D_Pointer();
     itkInterpolateImageFunctionID3D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkInterpolateImageFunctionID3D * GetPointer() const;
     bool operator<(itkInterpolateImageFunctionID3D_Pointer const & r) const;
     bool operator>(itkInterpolateImageFunctionID3D_Pointer const & r) const;
     bool operator<=(itkInterpolateImageFunctionID3D_Pointer const & r) const;
     bool operator>=(itkInterpolateImageFunctionID3D_Pointer const & r) const;
     itkInterpolateImageFunctionID3D_Pointer & operator=(itkInterpolateImageFunctionID3D_Pointer const & r);
     itkInterpolateImageFunctionID3D_Pointer & operator=(itkInterpolateImageFunctionID3D * r);
     itkInterpolateImageFunctionID3D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkInterpolateImageFunctionID3F : public itkImageFunctionID3DF {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual double Evaluate(itkPointF3 const & point) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexF3 const & index) const = 0;
     virtual double EvaluateAtIndex(itkIndex3 const & index) const;
   private:
     itkInterpolateImageFunctionID3F(itkInterpolateImageFunctionID3F const & arg0);
     void operator=(itkInterpolateImageFunctionID3F const & arg0);
   protected:
     itkInterpolateImageFunctionID3F();
     ~itkInterpolateImageFunctionID3F();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkInterpolateImageFunctionID3F_Pointer {
   public:
     itkInterpolateImageFunctionID3F_Pointer();
     itkInterpolateImageFunctionID3F_Pointer(itkInterpolateImageFunctionID3F_Pointer const & p);
     itkInterpolateImageFunctionID3F_Pointer(itkInterpolateImageFunctionID3F * p);
     ~itkInterpolateImageFunctionID3F_Pointer();
     itkInterpolateImageFunctionID3F * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkInterpolateImageFunctionID3F * GetPointer() const;
     bool operator<(itkInterpolateImageFunctionID3F_Pointer const & r) const;
     bool operator>(itkInterpolateImageFunctionID3F_Pointer const & r) const;
     bool operator<=(itkInterpolateImageFunctionID3F_Pointer const & r) const;
     bool operator>=(itkInterpolateImageFunctionID3F_Pointer const & r) const;
     itkInterpolateImageFunctionID3F_Pointer & operator=(itkInterpolateImageFunctionID3F_Pointer const & r);
     itkInterpolateImageFunctionID3F_Pointer & operator=(itkInterpolateImageFunctionID3F * r);
     itkInterpolateImageFunctionID3F * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkInterpolateImageFunctionIF2D : public itkImageFunctionIF2DD {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual double Evaluate(itkPointD2 const & point) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD2 const & index) const = 0;
     virtual double EvaluateAtIndex(itkIndex2 const & index) const;
   private:
     itkInterpolateImageFunctionIF2D(itkInterpolateImageFunctionIF2D const & arg0);
     void operator=(itkInterpolateImageFunctionIF2D const & arg0);
   protected:
     itkInterpolateImageFunctionIF2D();
     ~itkInterpolateImageFunctionIF2D();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkInterpolateImageFunctionIF2D_Pointer {
   public:
     itkInterpolateImageFunctionIF2D_Pointer();
     itkInterpolateImageFunctionIF2D_Pointer(itkInterpolateImageFunctionIF2D_Pointer const & p);
     itkInterpolateImageFunctionIF2D_Pointer(itkInterpolateImageFunctionIF2D * p);
     ~itkInterpolateImageFunctionIF2D_Pointer();
     itkInterpolateImageFunctionIF2D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkInterpolateImageFunctionIF2D * GetPointer() const;
     bool operator<(itkInterpolateImageFunctionIF2D_Pointer const & r) const;
     bool operator>(itkInterpolateImageFunctionIF2D_Pointer const & r) const;
     bool operator<=(itkInterpolateImageFunctionIF2D_Pointer const & r) const;
     bool operator>=(itkInterpolateImageFunctionIF2D_Pointer const & r) const;
     itkInterpolateImageFunctionIF2D_Pointer & operator=(itkInterpolateImageFunctionIF2D_Pointer const & r);
     itkInterpolateImageFunctionIF2D_Pointer & operator=(itkInterpolateImageFunctionIF2D * r);
     itkInterpolateImageFunctionIF2D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkInterpolateImageFunctionIF2F : public itkImageFunctionIF2DF {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual double Evaluate(itkPointF2 const & point) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexF2 const & index) const = 0;
     virtual double EvaluateAtIndex(itkIndex2 const & index) const;
   private:
     itkInterpolateImageFunctionIF2F(itkInterpolateImageFunctionIF2F const & arg0);
     void operator=(itkInterpolateImageFunctionIF2F const & arg0);
   protected:
     itkInterpolateImageFunctionIF2F();
     ~itkInterpolateImageFunctionIF2F();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkInterpolateImageFunctionIF2F_Pointer {
   public:
     itkInterpolateImageFunctionIF2F_Pointer();
     itkInterpolateImageFunctionIF2F_Pointer(itkInterpolateImageFunctionIF2F_Pointer const & p);
     itkInterpolateImageFunctionIF2F_Pointer(itkInterpolateImageFunctionIF2F * p);
     ~itkInterpolateImageFunctionIF2F_Pointer();
     itkInterpolateImageFunctionIF2F * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkInterpolateImageFunctionIF2F * GetPointer() const;
     bool operator<(itkInterpolateImageFunctionIF2F_Pointer const & r) const;
     bool operator>(itkInterpolateImageFunctionIF2F_Pointer const & r) const;
     bool operator<=(itkInterpolateImageFunctionIF2F_Pointer const & r) const;
     bool operator>=(itkInterpolateImageFunctionIF2F_Pointer const & r) const;
     itkInterpolateImageFunctionIF2F_Pointer & operator=(itkInterpolateImageFunctionIF2F_Pointer const & r);
     itkInterpolateImageFunctionIF2F_Pointer & operator=(itkInterpolateImageFunctionIF2F * r);
     itkInterpolateImageFunctionIF2F * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkInterpolateImageFunctionIF3D : public itkImageFunctionIF3DD {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual double Evaluate(itkPointD3 const & point) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD3 const & index) const = 0;
     virtual double EvaluateAtIndex(itkIndex3 const & index) const;
   private:
     itkInterpolateImageFunctionIF3D(itkInterpolateImageFunctionIF3D const & arg0);
     void operator=(itkInterpolateImageFunctionIF3D const & arg0);
   protected:
     itkInterpolateImageFunctionIF3D();
     ~itkInterpolateImageFunctionIF3D();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkInterpolateImageFunctionIF3D_Pointer {
   public:
     itkInterpolateImageFunctionIF3D_Pointer();
     itkInterpolateImageFunctionIF3D_Pointer(itkInterpolateImageFunctionIF3D_Pointer const & p);
     itkInterpolateImageFunctionIF3D_Pointer(itkInterpolateImageFunctionIF3D * p);
     ~itkInterpolateImageFunctionIF3D_Pointer();
     itkInterpolateImageFunctionIF3D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkInterpolateImageFunctionIF3D * GetPointer() const;
     bool operator<(itkInterpolateImageFunctionIF3D_Pointer const & r) const;
     bool operator>(itkInterpolateImageFunctionIF3D_Pointer const & r) const;
     bool operator<=(itkInterpolateImageFunctionIF3D_Pointer const & r) const;
     bool operator>=(itkInterpolateImageFunctionIF3D_Pointer const & r) const;
     itkInterpolateImageFunctionIF3D_Pointer & operator=(itkInterpolateImageFunctionIF3D_Pointer const & r);
     itkInterpolateImageFunctionIF3D_Pointer & operator=(itkInterpolateImageFunctionIF3D * r);
     itkInterpolateImageFunctionIF3D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkInterpolateImageFunctionIF3F : public itkImageFunctionIF3DF {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual double Evaluate(itkPointF3 const & point) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexF3 const & index) const = 0;
     virtual double EvaluateAtIndex(itkIndex3 const & index) const;
   private:
     itkInterpolateImageFunctionIF3F(itkInterpolateImageFunctionIF3F const & arg0);
     void operator=(itkInterpolateImageFunctionIF3F const & arg0);
   protected:
     itkInterpolateImageFunctionIF3F();
     ~itkInterpolateImageFunctionIF3F();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkInterpolateImageFunctionIF3F_Pointer {
   public:
     itkInterpolateImageFunctionIF3F_Pointer();
     itkInterpolateImageFunctionIF3F_Pointer(itkInterpolateImageFunctionIF3F_Pointer const & p);
     itkInterpolateImageFunctionIF3F_Pointer(itkInterpolateImageFunctionIF3F * p);
     ~itkInterpolateImageFunctionIF3F_Pointer();
     itkInterpolateImageFunctionIF3F * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkInterpolateImageFunctionIF3F * GetPointer() const;
     bool operator<(itkInterpolateImageFunctionIF3F_Pointer const & r) const;
     bool operator>(itkInterpolateImageFunctionIF3F_Pointer const & r) const;
     bool operator<=(itkInterpolateImageFunctionIF3F_Pointer const & r) const;
     bool operator>=(itkInterpolateImageFunctionIF3F_Pointer const & r) const;
     itkInterpolateImageFunctionIF3F_Pointer & operator=(itkInterpolateImageFunctionIF3F_Pointer const & r);
     itkInterpolateImageFunctionIF3F_Pointer & operator=(itkInterpolateImageFunctionIF3F * r);
     itkInterpolateImageFunctionIF3F * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkInterpolateImageFunctionIUC2D : public itkImageFunctionIUC2DD {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual double Evaluate(itkPointD2 const & point) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD2 const & index) const = 0;
     virtual double EvaluateAtIndex(itkIndex2 const & index) const;
   private:
     itkInterpolateImageFunctionIUC2D(itkInterpolateImageFunctionIUC2D const & arg0);
     void operator=(itkInterpolateImageFunctionIUC2D const & arg0);
   protected:
     itkInterpolateImageFunctionIUC2D();
     ~itkInterpolateImageFunctionIUC2D();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkInterpolateImageFunctionIUC2D_Pointer {
   public:
     itkInterpolateImageFunctionIUC2D_Pointer();
     itkInterpolateImageFunctionIUC2D_Pointer(itkInterpolateImageFunctionIUC2D_Pointer const & p);
     itkInterpolateImageFunctionIUC2D_Pointer(itkInterpolateImageFunctionIUC2D * p);
     ~itkInterpolateImageFunctionIUC2D_Pointer();
     itkInterpolateImageFunctionIUC2D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkInterpolateImageFunctionIUC2D * GetPointer() const;
     bool operator<(itkInterpolateImageFunctionIUC2D_Pointer const & r) const;
     bool operator>(itkInterpolateImageFunctionIUC2D_Pointer const & r) const;
     bool operator<=(itkInterpolateImageFunctionIUC2D_Pointer const & r) const;
     bool operator>=(itkInterpolateImageFunctionIUC2D_Pointer const & r) const;
     itkInterpolateImageFunctionIUC2D_Pointer & operator=(itkInterpolateImageFunctionIUC2D_Pointer const & r);
     itkInterpolateImageFunctionIUC2D_Pointer & operator=(itkInterpolateImageFunctionIUC2D * r);
     itkInterpolateImageFunctionIUC2D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkInterpolateImageFunctionIUC2F : public itkImageFunctionIUC2DF {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual double Evaluate(itkPointF2 const & point) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexF2 const & index) const = 0;
     virtual double EvaluateAtIndex(itkIndex2 const & index) const;
   private:
     itkInterpolateImageFunctionIUC2F(itkInterpolateImageFunctionIUC2F const & arg0);
     void operator=(itkInterpolateImageFunctionIUC2F const & arg0);
   protected:
     itkInterpolateImageFunctionIUC2F();
     ~itkInterpolateImageFunctionIUC2F();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkInterpolateImageFunctionIUC2F_Pointer {
   public:
     itkInterpolateImageFunctionIUC2F_Pointer();
     itkInterpolateImageFunctionIUC2F_Pointer(itkInterpolateImageFunctionIUC2F_Pointer const & p);
     itkInterpolateImageFunctionIUC2F_Pointer(itkInterpolateImageFunctionIUC2F * p);
     ~itkInterpolateImageFunctionIUC2F_Pointer();
     itkInterpolateImageFunctionIUC2F * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkInterpolateImageFunctionIUC2F * GetPointer() const;
     bool operator<(itkInterpolateImageFunctionIUC2F_Pointer const & r) const;
     bool operator>(itkInterpolateImageFunctionIUC2F_Pointer const & r) const;
     bool operator<=(itkInterpolateImageFunctionIUC2F_Pointer const & r) const;
     bool operator>=(itkInterpolateImageFunctionIUC2F_Pointer const & r) const;
     itkInterpolateImageFunctionIUC2F_Pointer & operator=(itkInterpolateImageFunctionIUC2F_Pointer const & r);
     itkInterpolateImageFunctionIUC2F_Pointer & operator=(itkInterpolateImageFunctionIUC2F * r);
     itkInterpolateImageFunctionIUC2F * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkInterpolateImageFunctionIUC3D : public itkImageFunctionIUC3DD {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual double Evaluate(itkPointD3 const & point) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD3 const & index) const = 0;
     virtual double EvaluateAtIndex(itkIndex3 const & index) const;
   private:
     itkInterpolateImageFunctionIUC3D(itkInterpolateImageFunctionIUC3D const & arg0);
     void operator=(itkInterpolateImageFunctionIUC3D const & arg0);
   protected:
     itkInterpolateImageFunctionIUC3D();
     ~itkInterpolateImageFunctionIUC3D();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkInterpolateImageFunctionIUC3D_Pointer {
   public:
     itkInterpolateImageFunctionIUC3D_Pointer();
     itkInterpolateImageFunctionIUC3D_Pointer(itkInterpolateImageFunctionIUC3D_Pointer const & p);
     itkInterpolateImageFunctionIUC3D_Pointer(itkInterpolateImageFunctionIUC3D * p);
     ~itkInterpolateImageFunctionIUC3D_Pointer();
     itkInterpolateImageFunctionIUC3D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkInterpolateImageFunctionIUC3D * GetPointer() const;
     bool operator<(itkInterpolateImageFunctionIUC3D_Pointer const & r) const;
     bool operator>(itkInterpolateImageFunctionIUC3D_Pointer const & r) const;
     bool operator<=(itkInterpolateImageFunctionIUC3D_Pointer const & r) const;
     bool operator>=(itkInterpolateImageFunctionIUC3D_Pointer const & r) const;
     itkInterpolateImageFunctionIUC3D_Pointer & operator=(itkInterpolateImageFunctionIUC3D_Pointer const & r);
     itkInterpolateImageFunctionIUC3D_Pointer & operator=(itkInterpolateImageFunctionIUC3D * r);
     itkInterpolateImageFunctionIUC3D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkInterpolateImageFunctionIUC3F : public itkImageFunctionIUC3DF {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual double Evaluate(itkPointF3 const & point) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexF3 const & index) const = 0;
     virtual double EvaluateAtIndex(itkIndex3 const & index) const;
   private:
     itkInterpolateImageFunctionIUC3F(itkInterpolateImageFunctionIUC3F const & arg0);
     void operator=(itkInterpolateImageFunctionIUC3F const & arg0);
   protected:
     itkInterpolateImageFunctionIUC3F();
     ~itkInterpolateImageFunctionIUC3F();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkInterpolateImageFunctionIUC3F_Pointer {
   public:
     itkInterpolateImageFunctionIUC3F_Pointer();
     itkInterpolateImageFunctionIUC3F_Pointer(itkInterpolateImageFunctionIUC3F_Pointer const & p);
     itkInterpolateImageFunctionIUC3F_Pointer(itkInterpolateImageFunctionIUC3F * p);
     ~itkInterpolateImageFunctionIUC3F_Pointer();
     itkInterpolateImageFunctionIUC3F * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkInterpolateImageFunctionIUC3F * GetPointer() const;
     bool operator<(itkInterpolateImageFunctionIUC3F_Pointer const & r) const;
     bool operator>(itkInterpolateImageFunctionIUC3F_Pointer const & r) const;
     bool operator<=(itkInterpolateImageFunctionIUC3F_Pointer const & r) const;
     bool operator>=(itkInterpolateImageFunctionIUC3F_Pointer const & r) const;
     itkInterpolateImageFunctionIUC3F_Pointer & operator=(itkInterpolateImageFunctionIUC3F_Pointer const & r);
     itkInterpolateImageFunctionIUC3F_Pointer & operator=(itkInterpolateImageFunctionIUC3F * r);
     itkInterpolateImageFunctionIUC3F * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkInterpolateImageFunctionIUL2D : public itkImageFunctionIUL2DD {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual double Evaluate(itkPointD2 const & point) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD2 const & index) const = 0;
     virtual double EvaluateAtIndex(itkIndex2 const & index) const;
   private:
     itkInterpolateImageFunctionIUL2D(itkInterpolateImageFunctionIUL2D const & arg0);
     void operator=(itkInterpolateImageFunctionIUL2D const & arg0);
   protected:
     itkInterpolateImageFunctionIUL2D();
     ~itkInterpolateImageFunctionIUL2D();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkInterpolateImageFunctionIUL2D_Pointer {
   public:
     itkInterpolateImageFunctionIUL2D_Pointer();
     itkInterpolateImageFunctionIUL2D_Pointer(itkInterpolateImageFunctionIUL2D_Pointer const & p);
     itkInterpolateImageFunctionIUL2D_Pointer(itkInterpolateImageFunctionIUL2D * p);
     ~itkInterpolateImageFunctionIUL2D_Pointer();
     itkInterpolateImageFunctionIUL2D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkInterpolateImageFunctionIUL2D * GetPointer() const;
     bool operator<(itkInterpolateImageFunctionIUL2D_Pointer const & r) const;
     bool operator>(itkInterpolateImageFunctionIUL2D_Pointer const & r) const;
     bool operator<=(itkInterpolateImageFunctionIUL2D_Pointer const & r) const;
     bool operator>=(itkInterpolateImageFunctionIUL2D_Pointer const & r) const;
     itkInterpolateImageFunctionIUL2D_Pointer & operator=(itkInterpolateImageFunctionIUL2D_Pointer const & r);
     itkInterpolateImageFunctionIUL2D_Pointer & operator=(itkInterpolateImageFunctionIUL2D * r);
     itkInterpolateImageFunctionIUL2D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkInterpolateImageFunctionIUL2F : public itkImageFunctionIUL2DF {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual double Evaluate(itkPointF2 const & point) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexF2 const & index) const = 0;
     virtual double EvaluateAtIndex(itkIndex2 const & index) const;
   private:
     itkInterpolateImageFunctionIUL2F(itkInterpolateImageFunctionIUL2F const & arg0);
     void operator=(itkInterpolateImageFunctionIUL2F const & arg0);
   protected:
     itkInterpolateImageFunctionIUL2F();
     ~itkInterpolateImageFunctionIUL2F();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkInterpolateImageFunctionIUL2F_Pointer {
   public:
     itkInterpolateImageFunctionIUL2F_Pointer();
     itkInterpolateImageFunctionIUL2F_Pointer(itkInterpolateImageFunctionIUL2F_Pointer const & p);
     itkInterpolateImageFunctionIUL2F_Pointer(itkInterpolateImageFunctionIUL2F * p);
     ~itkInterpolateImageFunctionIUL2F_Pointer();
     itkInterpolateImageFunctionIUL2F * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkInterpolateImageFunctionIUL2F * GetPointer() const;
     bool operator<(itkInterpolateImageFunctionIUL2F_Pointer const & r) const;
     bool operator>(itkInterpolateImageFunctionIUL2F_Pointer const & r) const;
     bool operator<=(itkInterpolateImageFunctionIUL2F_Pointer const & r) const;
     bool operator>=(itkInterpolateImageFunctionIUL2F_Pointer const & r) const;
     itkInterpolateImageFunctionIUL2F_Pointer & operator=(itkInterpolateImageFunctionIUL2F_Pointer const & r);
     itkInterpolateImageFunctionIUL2F_Pointer & operator=(itkInterpolateImageFunctionIUL2F * r);
     itkInterpolateImageFunctionIUL2F * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkInterpolateImageFunctionIUL3D : public itkImageFunctionIUL3DD {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual double Evaluate(itkPointD3 const & point) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD3 const & index) const = 0;
     virtual double EvaluateAtIndex(itkIndex3 const & index) const;
   private:
     itkInterpolateImageFunctionIUL3D(itkInterpolateImageFunctionIUL3D const & arg0);
     void operator=(itkInterpolateImageFunctionIUL3D const & arg0);
   protected:
     itkInterpolateImageFunctionIUL3D();
     ~itkInterpolateImageFunctionIUL3D();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkInterpolateImageFunctionIUL3D_Pointer {
   public:
     itkInterpolateImageFunctionIUL3D_Pointer();
     itkInterpolateImageFunctionIUL3D_Pointer(itkInterpolateImageFunctionIUL3D_Pointer const & p);
     itkInterpolateImageFunctionIUL3D_Pointer(itkInterpolateImageFunctionIUL3D * p);
     ~itkInterpolateImageFunctionIUL3D_Pointer();
     itkInterpolateImageFunctionIUL3D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkInterpolateImageFunctionIUL3D * GetPointer() const;
     bool operator<(itkInterpolateImageFunctionIUL3D_Pointer const & r) const;
     bool operator>(itkInterpolateImageFunctionIUL3D_Pointer const & r) const;
     bool operator<=(itkInterpolateImageFunctionIUL3D_Pointer const & r) const;
     bool operator>=(itkInterpolateImageFunctionIUL3D_Pointer const & r) const;
     itkInterpolateImageFunctionIUL3D_Pointer & operator=(itkInterpolateImageFunctionIUL3D_Pointer const & r);
     itkInterpolateImageFunctionIUL3D_Pointer & operator=(itkInterpolateImageFunctionIUL3D * r);
     itkInterpolateImageFunctionIUL3D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkInterpolateImageFunctionIUL3F : public itkImageFunctionIUL3DF {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual double Evaluate(itkPointF3 const & point) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexF3 const & index) const = 0;
     virtual double EvaluateAtIndex(itkIndex3 const & index) const;
   private:
     itkInterpolateImageFunctionIUL3F(itkInterpolateImageFunctionIUL3F const & arg0);
     void operator=(itkInterpolateImageFunctionIUL3F const & arg0);
   protected:
     itkInterpolateImageFunctionIUL3F();
     ~itkInterpolateImageFunctionIUL3F();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkInterpolateImageFunctionIUL3F_Pointer {
   public:
     itkInterpolateImageFunctionIUL3F_Pointer();
     itkInterpolateImageFunctionIUL3F_Pointer(itkInterpolateImageFunctionIUL3F_Pointer const & p);
     itkInterpolateImageFunctionIUL3F_Pointer(itkInterpolateImageFunctionIUL3F * p);
     ~itkInterpolateImageFunctionIUL3F_Pointer();
     itkInterpolateImageFunctionIUL3F * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkInterpolateImageFunctionIUL3F * GetPointer() const;
     bool operator<(itkInterpolateImageFunctionIUL3F_Pointer const & r) const;
     bool operator>(itkInterpolateImageFunctionIUL3F_Pointer const & r) const;
     bool operator<=(itkInterpolateImageFunctionIUL3F_Pointer const & r) const;
     bool operator>=(itkInterpolateImageFunctionIUL3F_Pointer const & r) const;
     itkInterpolateImageFunctionIUL3F_Pointer & operator=(itkInterpolateImageFunctionIUL3F_Pointer const & r);
     itkInterpolateImageFunctionIUL3F_Pointer & operator=(itkInterpolateImageFunctionIUL3F * r);
     itkInterpolateImageFunctionIUL3F * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkInterpolateImageFunctionIUS2D : public itkImageFunctionIUS2DD {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual double Evaluate(itkPointD2 const & point) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD2 const & index) const = 0;
     virtual double EvaluateAtIndex(itkIndex2 const & index) const;
   private:
     itkInterpolateImageFunctionIUS2D(itkInterpolateImageFunctionIUS2D const & arg0);
     void operator=(itkInterpolateImageFunctionIUS2D const & arg0);
   protected:
     itkInterpolateImageFunctionIUS2D();
     ~itkInterpolateImageFunctionIUS2D();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkInterpolateImageFunctionIUS2D_Pointer {
   public:
     itkInterpolateImageFunctionIUS2D_Pointer();
     itkInterpolateImageFunctionIUS2D_Pointer(itkInterpolateImageFunctionIUS2D_Pointer const & p);
     itkInterpolateImageFunctionIUS2D_Pointer(itkInterpolateImageFunctionIUS2D * p);
     ~itkInterpolateImageFunctionIUS2D_Pointer();
     itkInterpolateImageFunctionIUS2D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkInterpolateImageFunctionIUS2D * GetPointer() const;
     bool operator<(itkInterpolateImageFunctionIUS2D_Pointer const & r) const;
     bool operator>(itkInterpolateImageFunctionIUS2D_Pointer const & r) const;
     bool operator<=(itkInterpolateImageFunctionIUS2D_Pointer const & r) const;
     bool operator>=(itkInterpolateImageFunctionIUS2D_Pointer const & r) const;
     itkInterpolateImageFunctionIUS2D_Pointer & operator=(itkInterpolateImageFunctionIUS2D_Pointer const & r);
     itkInterpolateImageFunctionIUS2D_Pointer & operator=(itkInterpolateImageFunctionIUS2D * r);
     itkInterpolateImageFunctionIUS2D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkInterpolateImageFunctionIUS2F : public itkImageFunctionIUS2DF {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual double Evaluate(itkPointF2 const & point) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexF2 const & index) const = 0;
     virtual double EvaluateAtIndex(itkIndex2 const & index) const;
   private:
     itkInterpolateImageFunctionIUS2F(itkInterpolateImageFunctionIUS2F const & arg0);
     void operator=(itkInterpolateImageFunctionIUS2F const & arg0);
   protected:
     itkInterpolateImageFunctionIUS2F();
     ~itkInterpolateImageFunctionIUS2F();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkInterpolateImageFunctionIUS2F_Pointer {
   public:
     itkInterpolateImageFunctionIUS2F_Pointer();
     itkInterpolateImageFunctionIUS2F_Pointer(itkInterpolateImageFunctionIUS2F_Pointer const & p);
     itkInterpolateImageFunctionIUS2F_Pointer(itkInterpolateImageFunctionIUS2F * p);
     ~itkInterpolateImageFunctionIUS2F_Pointer();
     itkInterpolateImageFunctionIUS2F * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkInterpolateImageFunctionIUS2F * GetPointer() const;
     bool operator<(itkInterpolateImageFunctionIUS2F_Pointer const & r) const;
     bool operator>(itkInterpolateImageFunctionIUS2F_Pointer const & r) const;
     bool operator<=(itkInterpolateImageFunctionIUS2F_Pointer const & r) const;
     bool operator>=(itkInterpolateImageFunctionIUS2F_Pointer const & r) const;
     itkInterpolateImageFunctionIUS2F_Pointer & operator=(itkInterpolateImageFunctionIUS2F_Pointer const & r);
     itkInterpolateImageFunctionIUS2F_Pointer & operator=(itkInterpolateImageFunctionIUS2F * r);
     itkInterpolateImageFunctionIUS2F * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkInterpolateImageFunctionIUS3D : public itkImageFunctionIUS3DD {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual double Evaluate(itkPointD3 const & point) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexD3 const & index) const = 0;
     virtual double EvaluateAtIndex(itkIndex3 const & index) const;
   private:
     itkInterpolateImageFunctionIUS3D(itkInterpolateImageFunctionIUS3D const & arg0);
     void operator=(itkInterpolateImageFunctionIUS3D const & arg0);
   protected:
     itkInterpolateImageFunctionIUS3D();
     ~itkInterpolateImageFunctionIUS3D();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkInterpolateImageFunctionIUS3D_Pointer {
   public:
     itkInterpolateImageFunctionIUS3D_Pointer();
     itkInterpolateImageFunctionIUS3D_Pointer(itkInterpolateImageFunctionIUS3D_Pointer const & p);
     itkInterpolateImageFunctionIUS3D_Pointer(itkInterpolateImageFunctionIUS3D * p);
     ~itkInterpolateImageFunctionIUS3D_Pointer();
     itkInterpolateImageFunctionIUS3D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkInterpolateImageFunctionIUS3D * GetPointer() const;
     bool operator<(itkInterpolateImageFunctionIUS3D_Pointer const & r) const;
     bool operator>(itkInterpolateImageFunctionIUS3D_Pointer const & r) const;
     bool operator<=(itkInterpolateImageFunctionIUS3D_Pointer const & r) const;
     bool operator>=(itkInterpolateImageFunctionIUS3D_Pointer const & r) const;
     itkInterpolateImageFunctionIUS3D_Pointer & operator=(itkInterpolateImageFunctionIUS3D_Pointer const & r);
     itkInterpolateImageFunctionIUS3D_Pointer & operator=(itkInterpolateImageFunctionIUS3D * r);
     itkInterpolateImageFunctionIUS3D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkInterpolateImageFunctionIUS3F : public itkImageFunctionIUS3DF {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual double Evaluate(itkPointF3 const & point) const;
     virtual double EvaluateAtContinuousIndex(itkContinuousIndexF3 const & index) const = 0;
     virtual double EvaluateAtIndex(itkIndex3 const & index) const;
   private:
     itkInterpolateImageFunctionIUS3F(itkInterpolateImageFunctionIUS3F const & arg0);
     void operator=(itkInterpolateImageFunctionIUS3F const & arg0);
   protected:
     itkInterpolateImageFunctionIUS3F();
     ~itkInterpolateImageFunctionIUS3F();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkInterpolateImageFunctionIUS3F_Pointer {
   public:
     itkInterpolateImageFunctionIUS3F_Pointer();
     itkInterpolateImageFunctionIUS3F_Pointer(itkInterpolateImageFunctionIUS3F_Pointer const & p);
     itkInterpolateImageFunctionIUS3F_Pointer(itkInterpolateImageFunctionIUS3F * p);
     ~itkInterpolateImageFunctionIUS3F_Pointer();
     itkInterpolateImageFunctionIUS3F * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkInterpolateImageFunctionIUS3F * GetPointer() const;
     bool operator<(itkInterpolateImageFunctionIUS3F_Pointer const & r) const;
     bool operator>(itkInterpolateImageFunctionIUS3F_Pointer const & r) const;
     bool operator<=(itkInterpolateImageFunctionIUS3F_Pointer const & r) const;
     bool operator>=(itkInterpolateImageFunctionIUS3F_Pointer const & r) const;
     itkInterpolateImageFunctionIUS3F_Pointer & operator=(itkInterpolateImageFunctionIUS3F_Pointer const & r);
     itkInterpolateImageFunctionIUS3F_Pointer & operator=(itkInterpolateImageFunctionIUS3F * r);
     itkInterpolateImageFunctionIUS3F * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


