// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkKernelTransformChicken
#endif
#ifdef SWIGCSHARP
%module itkKernelTransformCsharp
#endif
#ifdef SWIGGUILE
%module itkKernelTransformGuile
#endif
#ifdef SWIGJAVA
%module itkKernelTransformJava
#endif
#ifdef SWIGLUA
%module itkKernelTransformLua
#endif
#ifdef SWIGMODULA3
%module itkKernelTransformModula3
#endif
#ifdef SWIGMZSCHEME
%module itkKernelTransformMzscheme
#endif
#ifdef SWIGOCAML
%module itkKernelTransformOcaml
#endif
#ifdef SWIGPERL
%module itkKernelTransformPerl
#endif
#ifdef SWIGPERL5
%module itkKernelTransformPerl5
#endif
#ifdef SWIGPHP
%module itkKernelTransformPhp
#endif
#ifdef SWIGPHP4
%module itkKernelTransformPhp4
#endif
#ifdef SWIGPHP5
%module itkKernelTransformPhp5
#endif
#ifdef SWIGPIKE
%module itkKernelTransformPike
#endif
#ifdef SWIGPYTHON
%module itkKernelTransformPython
#endif
#ifdef SWIGR
%module itkKernelTransformR
#endif
#ifdef SWIGRUBY
%module itkKernelTransformRuby
#endif
#ifdef SWIGSEXP
%module itkKernelTransformSexp
#endif
#ifdef SWIGTCL
%module itkKernelTransformTcl
#endif
#ifdef SWIGXML
%module itkKernelTransformXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
#include "Interpolators.includes"
#include "Mesh.includes"
#include "DeformableTransforms.includes"
%}


%{
%}




%import wrap_itkPoint.i
%import wrap_itkArray.i
%import wrap_itkTransform.i
%import wrap_vnl_matrix_fixed.i
%import wrap_ITKCommonBase.i
%import wrap_itkArray2D.i
%import wrap_itkVectorContainer.i
%import wrap_itkPointSet.i
%import wrap_itkVector.i


%include itk.i
%include wrap_itkKernelTransform_ext.i


 class itkKernelTransformD2 : public itkTransformD22 {
   public:
     enum  {  SpaceDimension = 2 };
     virtual char const * GetNameOfClass() const;
     static itkKernelTransformD2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual itkPointSetPD22S * GetSourceLandmarks();
     virtual void SetSourceLandmarks(itkPointSetPD22S * arg0);
     virtual itkPointSetPD22S * GetTargetLandmarks();
     virtual void SetTargetLandmarks(itkPointSetPD22S * arg0);
     virtual itkVectorContainerULVD2 * GetDisplacements();
     void ComputeWMatrix();
     virtual itkPointD2 TransformPoint(itkPointD2 const & thisPoint) const;
     virtual itkArray2DD const & GetJacobian(itkPointD2 const & point) const;
     virtual void SetParameters(itkArrayD const & arg0);
     virtual void SetFixedParameters(itkArrayD const & arg0);
     virtual void UpdateParameters() const;
     virtual itkArrayD const & GetParameters() const;
     virtual itkArrayD const & GetFixedParameters() const;
     virtual bool IsLinear() const;
     virtual void SetStiffness(double _arg);
     virtual double GetStiffness() const;
   private:
     itkKernelTransformD2(itkKernelTransformD2 const & arg0);
     void operator=(itkKernelTransformD2 const & arg0);
   protected:
     itkKernelTransformD2();
     ~itkKernelTransformD2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ComputeG(itkVectorD2 const & landmarkVector, vnl_matrix_fixedD_2_2 & gmatrix) const;
     virtual vnl_matrix_fixedD_2_2 const & ComputeG(itkVectorD2 const & landmarkVector) const;
     virtual vnl_matrix_fixedD_2_2 const & ComputeReflexiveG(itkVectorContainerULPD2::Iterator arg0) const;
     virtual void ComputeDeformationContribution(itkPointD2 const & inputPoint, itkPointD2 & result) const;
     void ComputeK();
     void ComputeL();
     void ComputeP();
     void ComputeY();
     void ComputeD();
     void ReorganizeW();
 };


 class itkKernelTransformD2_Pointer {
   public:
     itkKernelTransformD2_Pointer();
     itkKernelTransformD2_Pointer(itkKernelTransformD2_Pointer const & p);
     itkKernelTransformD2_Pointer(itkKernelTransformD2 * p);
     ~itkKernelTransformD2_Pointer();
     itkKernelTransformD2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkKernelTransformD2 * GetPointer() const;
     bool operator<(itkKernelTransformD2_Pointer const & r) const;
     bool operator>(itkKernelTransformD2_Pointer const & r) const;
     bool operator<=(itkKernelTransformD2_Pointer const & r) const;
     bool operator>=(itkKernelTransformD2_Pointer const & r) const;
     itkKernelTransformD2_Pointer & operator=(itkKernelTransformD2_Pointer const & r);
     itkKernelTransformD2_Pointer & operator=(itkKernelTransformD2 * r);
     itkKernelTransformD2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkKernelTransformD3 : public itkTransformD33 {
   public:
     enum  {  SpaceDimension = 3 };
     virtual char const * GetNameOfClass() const;
     static itkKernelTransformD3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual itkPointSetPD33S * GetSourceLandmarks();
     virtual void SetSourceLandmarks(itkPointSetPD33S * arg0);
     virtual itkPointSetPD33S * GetTargetLandmarks();
     virtual void SetTargetLandmarks(itkPointSetPD33S * arg0);
     virtual itkVectorContainerULVD3 * GetDisplacements();
     void ComputeWMatrix();
     virtual itkPointD3 TransformPoint(itkPointD3 const & thisPoint) const;
     virtual itkArray2DD const & GetJacobian(itkPointD3 const & point) const;
     virtual void SetParameters(itkArrayD const & arg0);
     virtual void SetFixedParameters(itkArrayD const & arg0);
     virtual void UpdateParameters() const;
     virtual itkArrayD const & GetParameters() const;
     virtual itkArrayD const & GetFixedParameters() const;
     virtual bool IsLinear() const;
     virtual void SetStiffness(double _arg);
     virtual double GetStiffness() const;
   private:
     itkKernelTransformD3(itkKernelTransformD3 const & arg0);
     void operator=(itkKernelTransformD3 const & arg0);
   protected:
     itkKernelTransformD3();
     ~itkKernelTransformD3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ComputeG(itkVectorD3 const & landmarkVector, vnl_matrix_fixedD_3_3 & gmatrix) const;
     virtual vnl_matrix_fixedD_3_3 const & ComputeG(itkVectorD3 const & landmarkVector) const;
     virtual vnl_matrix_fixedD_3_3 const & ComputeReflexiveG(itkVectorContainerULPD3::Iterator arg0) const;
     virtual void ComputeDeformationContribution(itkPointD3 const & inputPoint, itkPointD3 & result) const;
     void ComputeK();
     void ComputeL();
     void ComputeP();
     void ComputeY();
     void ComputeD();
     void ReorganizeW();
 };


 class itkKernelTransformD3_Pointer {
   public:
     itkKernelTransformD3_Pointer();
     itkKernelTransformD3_Pointer(itkKernelTransformD3_Pointer const & p);
     itkKernelTransformD3_Pointer(itkKernelTransformD3 * p);
     ~itkKernelTransformD3_Pointer();
     itkKernelTransformD3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkKernelTransformD3 * GetPointer() const;
     bool operator<(itkKernelTransformD3_Pointer const & r) const;
     bool operator>(itkKernelTransformD3_Pointer const & r) const;
     bool operator<=(itkKernelTransformD3_Pointer const & r) const;
     bool operator>=(itkKernelTransformD3_Pointer const & r) const;
     itkKernelTransformD3_Pointer & operator=(itkKernelTransformD3_Pointer const & r);
     itkKernelTransformD3_Pointer & operator=(itkKernelTransformD3 * r);
     itkKernelTransformD3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


