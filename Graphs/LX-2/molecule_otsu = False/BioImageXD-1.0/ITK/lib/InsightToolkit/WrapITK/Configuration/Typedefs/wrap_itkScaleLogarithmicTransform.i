// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkScaleLogarithmicTransformChicken
#endif
#ifdef SWIGCSHARP
%module itkScaleLogarithmicTransformCsharp
#endif
#ifdef SWIGGUILE
%module itkScaleLogarithmicTransformGuile
#endif
#ifdef SWIGJAVA
%module itkScaleLogarithmicTransformJava
#endif
#ifdef SWIGLUA
%module itkScaleLogarithmicTransformLua
#endif
#ifdef SWIGMODULA3
%module itkScaleLogarithmicTransformModula3
#endif
#ifdef SWIGMZSCHEME
%module itkScaleLogarithmicTransformMzscheme
#endif
#ifdef SWIGOCAML
%module itkScaleLogarithmicTransformOcaml
#endif
#ifdef SWIGPERL
%module itkScaleLogarithmicTransformPerl
#endif
#ifdef SWIGPERL5
%module itkScaleLogarithmicTransformPerl5
#endif
#ifdef SWIGPHP
%module itkScaleLogarithmicTransformPhp
#endif
#ifdef SWIGPHP4
%module itkScaleLogarithmicTransformPhp4
#endif
#ifdef SWIGPHP5
%module itkScaleLogarithmicTransformPhp5
#endif
#ifdef SWIGPIKE
%module itkScaleLogarithmicTransformPike
#endif
#ifdef SWIGPYTHON
%module itkScaleLogarithmicTransformPython
#endif
#ifdef SWIGR
%module itkScaleLogarithmicTransformR
#endif
#ifdef SWIGRUBY
%module itkScaleLogarithmicTransformRuby
#endif
#ifdef SWIGSEXP
%module itkScaleLogarithmicTransformSexp
#endif
#ifdef SWIGTCL
%module itkScaleLogarithmicTransformTcl
#endif
#ifdef SWIGXML
%module itkScaleLogarithmicTransformXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
%}


%{
%}




%import wrap_itkPoint.i
%import wrap_itkArray2D.i
%import wrap_itkScaleTransform.i
%import wrap_itkArray.i
%import wrap_ITKCommonBase.i


%include itk.i
%include wrap_itkScaleLogarithmicTransform_ext.i


 class itkScaleLogarithmicTransformD2 : public itkScaleTransformD2 {
   public:
     enum  {  SpaceDimension = 2 };
     enum  {  ParametersDimension = 2 };
     static itkScaleLogarithmicTransformD2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetParameters(itkArrayD const & parameters);
     virtual itkArrayD const & GetParameters() const;
     virtual itkArray2DD const & GetJacobian(itkPointD2 const & point) const;
   private:
     itkScaleLogarithmicTransformD2(itkScaleLogarithmicTransformD2 const & other);
     itkScaleLogarithmicTransformD2 const & operator=(itkScaleLogarithmicTransformD2 const & arg0);
   protected:
     itkScaleLogarithmicTransformD2();
     ~itkScaleLogarithmicTransformD2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkScaleLogarithmicTransformD2_Pointer {
   public:
     itkScaleLogarithmicTransformD2_Pointer();
     itkScaleLogarithmicTransformD2_Pointer(itkScaleLogarithmicTransformD2_Pointer const & p);
     itkScaleLogarithmicTransformD2_Pointer(itkScaleLogarithmicTransformD2 * p);
     ~itkScaleLogarithmicTransformD2_Pointer();
     itkScaleLogarithmicTransformD2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkScaleLogarithmicTransformD2 * GetPointer() const;
     bool operator<(itkScaleLogarithmicTransformD2_Pointer const & r) const;
     bool operator>(itkScaleLogarithmicTransformD2_Pointer const & r) const;
     bool operator<=(itkScaleLogarithmicTransformD2_Pointer const & r) const;
     bool operator>=(itkScaleLogarithmicTransformD2_Pointer const & r) const;
     itkScaleLogarithmicTransformD2_Pointer & operator=(itkScaleLogarithmicTransformD2_Pointer const & r);
     itkScaleLogarithmicTransformD2_Pointer & operator=(itkScaleLogarithmicTransformD2 * r);
     itkScaleLogarithmicTransformD2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkScaleLogarithmicTransformD3 : public itkScaleTransformD3 {
   public:
     enum  {  SpaceDimension = 3 };
     enum  {  ParametersDimension = 3 };
     static itkScaleLogarithmicTransformD3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetParameters(itkArrayD const & parameters);
     virtual itkArrayD const & GetParameters() const;
     virtual itkArray2DD const & GetJacobian(itkPointD3 const & point) const;
   private:
     itkScaleLogarithmicTransformD3(itkScaleLogarithmicTransformD3 const & other);
     itkScaleLogarithmicTransformD3 const & operator=(itkScaleLogarithmicTransformD3 const & arg0);
   protected:
     itkScaleLogarithmicTransformD3();
     ~itkScaleLogarithmicTransformD3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkScaleLogarithmicTransformD3_Pointer {
   public:
     itkScaleLogarithmicTransformD3_Pointer();
     itkScaleLogarithmicTransformD3_Pointer(itkScaleLogarithmicTransformD3_Pointer const & p);
     itkScaleLogarithmicTransformD3_Pointer(itkScaleLogarithmicTransformD3 * p);
     ~itkScaleLogarithmicTransformD3_Pointer();
     itkScaleLogarithmicTransformD3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkScaleLogarithmicTransformD3 * GetPointer() const;
     bool operator<(itkScaleLogarithmicTransformD3_Pointer const & r) const;
     bool operator>(itkScaleLogarithmicTransformD3_Pointer const & r) const;
     bool operator<=(itkScaleLogarithmicTransformD3_Pointer const & r) const;
     bool operator>=(itkScaleLogarithmicTransformD3_Pointer const & r) const;
     itkScaleLogarithmicTransformD3_Pointer & operator=(itkScaleLogarithmicTransformD3_Pointer const & r);
     itkScaleLogarithmicTransformD3_Pointer & operator=(itkScaleLogarithmicTransformD3 * r);
     itkScaleLogarithmicTransformD3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


