// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module vnl_fortran_copyChicken
#endif
#ifdef SWIGCSHARP
%module vnl_fortran_copyCsharp
#endif
#ifdef SWIGGUILE
%module vnl_fortran_copyGuile
#endif
#ifdef SWIGJAVA
%module vnl_fortran_copyJava
#endif
#ifdef SWIGLUA
%module vnl_fortran_copyLua
#endif
#ifdef SWIGMODULA3
%module vnl_fortran_copyModula3
#endif
#ifdef SWIGMZSCHEME
%module vnl_fortran_copyMzscheme
#endif
#ifdef SWIGOCAML
%module vnl_fortran_copyOcaml
#endif
#ifdef SWIGPERL
%module vnl_fortran_copyPerl
#endif
#ifdef SWIGPERL5
%module vnl_fortran_copyPerl5
#endif
#ifdef SWIGPHP
%module vnl_fortran_copyPhp
#endif
#ifdef SWIGPHP4
%module vnl_fortran_copyPhp4
#endif
#ifdef SWIGPHP5
%module vnl_fortran_copyPhp5
#endif
#ifdef SWIGPIKE
%module vnl_fortran_copyPike
#endif
#ifdef SWIGPYTHON
%module vnl_fortran_copyPython
#endif
#ifdef SWIGR
%module vnl_fortran_copyR
#endif
#ifdef SWIGRUBY
%module vnl_fortran_copyRuby
#endif
#ifdef SWIGSEXP
%module vnl_fortran_copySexp
#endif
#ifdef SWIGTCL
%module vnl_fortran_copyTcl
#endif
#ifdef SWIGXML
%module vnl_fortran_copyXml
#endif

%{
#include "VXLNumerics.includes"
%}


%{
%}




%import wrap_vnl_matrix.i


%include itk.i
%include wrap_vnl_fortran_copy_ext.i


 class vnl_fortran_copyD {
   public:
     vnl_fortran_copyD & operator=(vnl_fortran_copyD const & arg0);
     vnl_fortran_copyD(vnl_fortran_copyD const & arg0);
     vnl_fortran_copyD(vnl_matrixD const & M);
     ~vnl_fortran_copyD();
   private:
   protected:
 };


 class vnl_fortran_copyF {
   public:
     vnl_fortran_copyF & operator=(vnl_fortran_copyF const & arg0);
     vnl_fortran_copyF(vnl_fortran_copyF const & arg0);
     vnl_fortran_copyF(vnl_matrixF const & M);
     ~vnl_fortran_copyF();
   private:
   protected:
 };


 class vnl_fortran_copy_vcl_complexD {
   public:
     vnl_fortran_copy_vcl_complexD & operator=(vnl_fortran_copy_vcl_complexD const & arg0);
     vnl_fortran_copy_vcl_complexD(vnl_fortran_copy_vcl_complexD const & arg0);
     vnl_fortran_copy_vcl_complexD(vnl_matrix_vcl_complexD const & M);
     ~vnl_fortran_copy_vcl_complexD();
   private:
   protected:
 };


 class vnl_fortran_copy_vcl_complexF {
   public:
     vnl_fortran_copy_vcl_complexF & operator=(vnl_fortran_copy_vcl_complexF const & arg0);
     vnl_fortran_copy_vcl_complexF(vnl_fortran_copy_vcl_complexF const & arg0);
     vnl_fortran_copy_vcl_complexF(vnl_matrix_vcl_complexF const & M);
     ~vnl_fortran_copy_vcl_complexF();
   private:
   protected:
 };


