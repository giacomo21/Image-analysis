// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module ITKCommonBaseChicken
#endif
#ifdef SWIGCSHARP
%module ITKCommonBaseCsharp
#endif
#ifdef SWIGGUILE
%module ITKCommonBaseGuile
#endif
#ifdef SWIGJAVA
%module ITKCommonBaseJava
#endif
#ifdef SWIGLUA
%module ITKCommonBaseLua
#endif
#ifdef SWIGMODULA3
%module ITKCommonBaseModula3
#endif
#ifdef SWIGMZSCHEME
%module ITKCommonBaseMzscheme
#endif
#ifdef SWIGOCAML
%module ITKCommonBaseOcaml
#endif
#ifdef SWIGPERL
%module ITKCommonBasePerl
#endif
#ifdef SWIGPERL5
%module ITKCommonBasePerl5
#endif
#ifdef SWIGPHP
%module ITKCommonBasePhp
#endif
#ifdef SWIGPHP4
%module ITKCommonBasePhp4
#endif
#ifdef SWIGPHP5
%module ITKCommonBasePhp5
#endif
#ifdef SWIGPIKE
%module ITKCommonBasePike
#endif
#ifdef SWIGPYTHON
%module ITKCommonBasePython
#endif
#ifdef SWIGR
%module ITKCommonBaseR
#endif
#ifdef SWIGRUBY
%module ITKCommonBaseRuby
#endif
#ifdef SWIGSEXP
%module ITKCommonBaseSexp
#endif
#ifdef SWIGTCL
%module ITKCommonBaseTcl
#endif
#ifdef SWIGXML
%module ITKCommonBaseXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
%}


%{
%}




%import wrap_itkEventObjects.i


%include itk.i
%include wrap_ITKCommonBase_ext.i


 class itkCommand_Pointer {
   public:
     itkCommand_Pointer();
     itkCommand_Pointer(itkCommand_Pointer const & p);
     itkCommand_Pointer(itkCommand * p);
     ~itkCommand_Pointer();
     itkCommand * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkCommand * GetPointer() const;
     bool operator<(itkCommand_Pointer const & r) const;
     bool operator>(itkCommand_Pointer const & r) const;
     bool operator<=(itkCommand_Pointer const & r) const;
     bool operator>=(itkCommand_Pointer const & r) const;
     itkCommand_Pointer & operator=(itkCommand_Pointer const & r);
     itkCommand_Pointer & operator=(itkCommand * r);
     itkCommand * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDataObject_Pointer {
   public:
     itkDataObject_Pointer();
     itkDataObject_Pointer(itkDataObject_Pointer const & p);
     itkDataObject_Pointer(itkDataObject * p);
     ~itkDataObject_Pointer();
     itkDataObject * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDataObject * GetPointer() const;
     bool operator<(itkDataObject_Pointer const & r) const;
     bool operator>(itkDataObject_Pointer const & r) const;
     bool operator<=(itkDataObject_Pointer const & r) const;
     bool operator>=(itkDataObject_Pointer const & r) const;
     itkDataObject_Pointer & operator=(itkDataObject_Pointer const & r);
     itkDataObject_Pointer & operator=(itkDataObject * r);
     itkDataObject * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDirectory_Pointer {
   public:
     itkDirectory_Pointer();
     itkDirectory_Pointer(itkDirectory_Pointer const & p);
     itkDirectory_Pointer(itkDirectory * p);
     ~itkDirectory_Pointer();
     itkDirectory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDirectory * GetPointer() const;
     bool operator<(itkDirectory_Pointer const & r) const;
     bool operator>(itkDirectory_Pointer const & r) const;
     bool operator<=(itkDirectory_Pointer const & r) const;
     bool operator>=(itkDirectory_Pointer const & r) const;
     itkDirectory_Pointer & operator=(itkDirectory_Pointer const & r);
     itkDirectory_Pointer & operator=(itkDirectory * r);
     itkDirectory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDynamicLoader_Pointer {
   public:
     itkDynamicLoader_Pointer();
     itkDynamicLoader_Pointer(itkDynamicLoader_Pointer const & p);
     itkDynamicLoader_Pointer(itkDynamicLoader * p);
     ~itkDynamicLoader_Pointer();
     itkDynamicLoader * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDynamicLoader * GetPointer() const;
     bool operator<(itkDynamicLoader_Pointer const & r) const;
     bool operator>(itkDynamicLoader_Pointer const & r) const;
     bool operator<=(itkDynamicLoader_Pointer const & r) const;
     bool operator>=(itkDynamicLoader_Pointer const & r) const;
     itkDynamicLoader_Pointer & operator=(itkDynamicLoader_Pointer const & r);
     itkDynamicLoader_Pointer & operator=(itkDynamicLoader * r);
     itkDynamicLoader * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkIndent {
   public:
     ~itkIndent();
     itkIndent & operator=(itkIndent const & arg0);
     itkIndent(itkIndent const & arg0);
     static itkIndent * New();
     void Delete();
     itkIndent(int ind = 0);
     static char const * GetNameOfClass();
     itkIndent GetNextIndent();
   private:
   protected:
 };


 class itkLightObject {
   public:
     static itkLightObject_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void Delete();
     virtual char const * GetNameOfClass() const;
     void Print(std::ostream & os, itkIndent indent = 0) const;
     static void BreakOnError();
     virtual void Register() const;
     virtual void UnRegister() const;
     virtual int GetReferenceCount() const;
     virtual void SetReferenceCount(int arg0);
   private:
     itkLightObject(itkLightObject const & arg0);
     void operator=(itkLightObject const & arg0);
   protected:
     itkLightObject();
     ~itkLightObject();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     virtual void PrintHeader(std::ostream & os, itkIndent indent) const;
     virtual void PrintTrailer(std::ostream & os, itkIndent indent) const;
 };


 class itkLightObject_Pointer {
   public:
     itkLightObject_Pointer();
     itkLightObject_Pointer(itkLightObject_Pointer const & p);
     itkLightObject_Pointer(itkLightObject * p);
     ~itkLightObject_Pointer();
     itkLightObject * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkLightObject * GetPointer() const;
     bool operator<(itkLightObject_Pointer const & r) const;
     bool operator>(itkLightObject_Pointer const & r) const;
     bool operator<=(itkLightObject_Pointer const & r) const;
     bool operator>=(itkLightObject_Pointer const & r) const;
     itkLightObject_Pointer & operator=(itkLightObject_Pointer const & r);
     itkLightObject_Pointer & operator=(itkLightObject * r);
     itkLightObject * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkLightProcessObject_Pointer {
   public:
     itkLightProcessObject_Pointer();
     itkLightProcessObject_Pointer(itkLightProcessObject_Pointer const & p);
     itkLightProcessObject_Pointer(itkLightProcessObject * p);
     ~itkLightProcessObject_Pointer();
     itkLightProcessObject * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkLightProcessObject * GetPointer() const;
     bool operator<(itkLightProcessObject_Pointer const & r) const;
     bool operator>(itkLightProcessObject_Pointer const & r) const;
     bool operator<=(itkLightProcessObject_Pointer const & r) const;
     bool operator>=(itkLightProcessObject_Pointer const & r) const;
     itkLightProcessObject_Pointer & operator=(itkLightProcessObject_Pointer const & r);
     itkLightProcessObject_Pointer & operator=(itkLightProcessObject * r);
     itkLightProcessObject * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMetaDataDictionary {
   public:
     virtual void Print(std::ostream & os) const;
     itkMetaDataDictionary();
     itkMetaDataDictionary(itkMetaDataDictionary const & arg0);
     void operator=(itkMetaDataDictionary const & arg0);
     ~itkMetaDataDictionary();
     std::vector< std::string > GetKeys() const;
     itkMetaDataObjectBase_Pointer & operator[](std::string const & arg0);
     itkMetaDataObjectBase const * operator[](std::string const & arg0) const;
     bool HasKey(std::string const & arg0) const;
   private:
   protected:
 };


 class itkMetaDataObjectBase : public itkLightObject {
   public:
     virtual char const * GetNameOfClass() const;
     virtual char const * GetMetaDataObjectTypeName() const;
     virtual std::type_info const & GetMetaDataObjectTypeInfo() const;
     virtual void Print(std::ostream & os) const;
   private:
     itkMetaDataObjectBase(itkMetaDataObjectBase const & arg0);
     void operator=(itkMetaDataObjectBase const & arg0);
   protected:
     ~itkMetaDataObjectBase();
     itkMetaDataObjectBase();
 };


 class itkMetaDataObjectBase_Pointer {
   public:
     itkMetaDataObjectBase_Pointer();
     itkMetaDataObjectBase_Pointer(itkMetaDataObjectBase_Pointer const & p);
     itkMetaDataObjectBase_Pointer(itkMetaDataObjectBase * p);
     ~itkMetaDataObjectBase_Pointer();
     itkMetaDataObjectBase * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMetaDataObjectBase * GetPointer() const;
     bool operator<(itkMetaDataObjectBase_Pointer const & r) const;
     bool operator>(itkMetaDataObjectBase_Pointer const & r) const;
     bool operator<=(itkMetaDataObjectBase_Pointer const & r) const;
     bool operator>=(itkMetaDataObjectBase_Pointer const & r) const;
     itkMetaDataObjectBase_Pointer & operator=(itkMetaDataObjectBase_Pointer const & r);
     itkMetaDataObjectBase_Pointer & operator=(itkMetaDataObjectBase * r);
     itkMetaDataObjectBase * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMultiThreader_Pointer {
   public:
     itkMultiThreader_Pointer();
     itkMultiThreader_Pointer(itkMultiThreader_Pointer const & p);
     itkMultiThreader_Pointer(itkMultiThreader * p);
     ~itkMultiThreader_Pointer();
     itkMultiThreader * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMultiThreader * GetPointer() const;
     bool operator<(itkMultiThreader_Pointer const & r) const;
     bool operator>(itkMultiThreader_Pointer const & r) const;
     bool operator<=(itkMultiThreader_Pointer const & r) const;
     bool operator>=(itkMultiThreader_Pointer const & r) const;
     itkMultiThreader_Pointer & operator=(itkMultiThreader_Pointer const & r);
     itkMultiThreader_Pointer & operator=(itkMultiThreader * r);
     itkMultiThreader * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkObject : public itkLightObject {
   public:
     static itkObject_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void DebugOn() const;
     virtual void DebugOff() const;
     bool GetDebug() const;
     void SetDebug(bool debugFlag) const;
     virtual unsigned long GetMTime() const;
     virtual void Modified() const;
     virtual void Register() const;
     virtual void UnRegister() const;
     virtual void SetReferenceCount(int arg0);
     static void SetGlobalWarningDisplay(bool flag);
     static bool GetGlobalWarningDisplay();
     static void GlobalWarningDisplayOn();
     static void GlobalWarningDisplayOff();
     unsigned long AddObserver(itkEventObject const & event, itkCommand * arg1);
     unsigned long AddObserver(itkEventObject const & event, itkCommand * arg1) const;
     itkCommand * GetCommand(unsigned long tag);
     void InvokeEvent(itkEventObject const & arg0);
     void InvokeEvent(itkEventObject const & arg0) const;
     void RemoveObserver(unsigned long tag);
     void RemoveAllObservers();
     bool HasObserver(itkEventObject const & event) const;
     itkMetaDataDictionary & GetMetaDataDictionary();
     itkMetaDataDictionary const & GetMetaDataDictionary() const;
     void SetMetaDataDictionary(itkMetaDataDictionary const & rhs);
   private:
     itkObject(itkObject const & arg0);
     void operator=(itkObject const & arg0);
   protected:
     itkObject();
     ~itkObject();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     bool PrintObservers(std::ostream & os, itkIndent indent) const;
 };


 class itkObjectFactoryBase : public itkObject {
   public:
     virtual char const * GetNameOfClass() const;
     static itkLightObject_Pointer CreateInstance(char const * itkclassname);
     static std::list< itkLightObject_Pointer > CreateAllInstance(char const * itkclassname);
     static void ReHash();
     static void RegisterFactory(itkObjectFactoryBase * arg0);
     static void UnRegisterFactory(itkObjectFactoryBase * arg0);
     static void UnRegisterAllFactories();
     static std::list< itkObjectFactoryBase* > GetRegisteredFactories();
     virtual char const * GetITKSourceVersion() const = 0;
     virtual char const * GetDescription() const = 0;
     virtual std::list< std::string > GetClassOverrideNames();
     virtual std::list< std::string > GetClassOverrideWithNames();
     virtual std::list< std::string > GetClassOverrideDescriptions();
     virtual std::list< bool > GetEnableFlags();
     virtual void SetEnableFlag(bool flag, char const * className, char const * subclassName);
     virtual bool GetEnableFlag(char const * className, char const * subclassName);
     virtual void Disable(char const * className);
     char const * GetLibraryPath();
   private:
     itkObjectFactoryBase(itkObjectFactoryBase const & arg0);
     void operator=(itkObjectFactoryBase const & arg0);
     static void Initialize();
     static void RegisterDefaults();
     static void LoadDynamicFactories();
     static void LoadLibrariesInPath(char const * arg0);
   protected:
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     void RegisterOverride(char const * classOverride, char const * overrideClassName, char const * description, bool enableFlag, itk::CreateObjectFunctionBase * createFunction);
     virtual itkLightObject_Pointer CreateObject(char const * itkclassname);
     virtual std::list< itkLightObject_Pointer > CreateAllObject(char const * itkclassname);
     itkObjectFactoryBase();
     ~itkObjectFactoryBase();
 };


 class itkObjectFactoryBase_Pointer {
   public:
     itkObjectFactoryBase_Pointer();
     itkObjectFactoryBase_Pointer(itkObjectFactoryBase_Pointer const & p);
     itkObjectFactoryBase_Pointer(itkObjectFactoryBase * p);
     ~itkObjectFactoryBase_Pointer();
     itkObjectFactoryBase * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkObjectFactoryBase * GetPointer() const;
     bool operator<(itkObjectFactoryBase_Pointer const & r) const;
     bool operator>(itkObjectFactoryBase_Pointer const & r) const;
     bool operator<=(itkObjectFactoryBase_Pointer const & r) const;
     bool operator>=(itkObjectFactoryBase_Pointer const & r) const;
     itkObjectFactoryBase_Pointer & operator=(itkObjectFactoryBase_Pointer const & r);
     itkObjectFactoryBase_Pointer & operator=(itkObjectFactoryBase * r);
     itkObjectFactoryBase * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkObject_Pointer {
   public:
     itkObject_Pointer();
     itkObject_Pointer(itkObject_Pointer const & p);
     itkObject_Pointer(itkObject * p);
     ~itkObject_Pointer();
     itkObject * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkObject * GetPointer() const;
     bool operator<(itkObject_Pointer const & r) const;
     bool operator>(itkObject_Pointer const & r) const;
     bool operator<=(itkObject_Pointer const & r) const;
     bool operator>=(itkObject_Pointer const & r) const;
     itkObject_Pointer & operator=(itkObject_Pointer const & r);
     itkObject_Pointer & operator=(itkObject * r);
     itkObject * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOutputWindow : public itkObject {
   public:
     virtual char const * GetNameOfClass() const;
     static itkOutputWindow_Pointer New();
     static itkOutputWindow_Pointer GetInstance();
     static void SetInstance(itkOutputWindow * instance);
     virtual void DisplayText(char const * arg0);
     virtual void DisplayErrorText(char const * t);
     virtual void DisplayWarningText(char const * t);
     virtual void DisplayGenericOutputText(char const * t);
     virtual void DisplayDebugText(char const * t);
     virtual void SetPromptUser(bool const _arg);
     virtual bool GetPromptUser() const;
     virtual void PromptUserOn();
     virtual void PromptUserOff();
   private:
     itkOutputWindow(itkOutputWindow const & arg0);
     void operator=(itkOutputWindow const & arg0);
   protected:
     itkOutputWindow();
     ~itkOutputWindow();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkOutputWindow_Pointer {
   public:
     itkOutputWindow_Pointer();
     itkOutputWindow_Pointer(itkOutputWindow_Pointer const & p);
     itkOutputWindow_Pointer(itkOutputWindow * p);
     ~itkOutputWindow_Pointer();
     itkOutputWindow * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOutputWindow * GetPointer() const;
     bool operator<(itkOutputWindow_Pointer const & r) const;
     bool operator>(itkOutputWindow_Pointer const & r) const;
     bool operator<=(itkOutputWindow_Pointer const & r) const;
     bool operator>=(itkOutputWindow_Pointer const & r) const;
     itkOutputWindow_Pointer & operator=(itkOutputWindow_Pointer const & r);
     itkOutputWindow_Pointer & operator=(itkOutputWindow * r);
     itkOutputWindow * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkProcessObject : public itkObject {
   public:
     virtual char const * GetNameOfClass() const;
     std::vector< itkDataObject_Pointer > & GetInputs();
     size_t GetNumberOfInputs() const;
     virtual size_t GetNumberOfValidRequiredInputs() const;
     std::vector< itkDataObject_Pointer > & GetOutputs();
     size_t GetNumberOfOutputs() const;
     virtual void SetAbortGenerateData(bool const _arg);
     virtual bool const & GetAbortGenerateData() const;
     virtual void AbortGenerateDataOn();
     virtual void AbortGenerateDataOff();
     virtual void SetProgress(float _arg);
     virtual float const & GetProgress() const;
     void UpdateProgress(float amount);
     virtual void Update();
     virtual void UpdateLargestPossibleRegion();
     virtual void UpdateOutputInformation();
     virtual void PropagateRequestedRegion(itkDataObject * output);
     virtual void UpdateOutputData(itkDataObject * output);
     virtual void EnlargeOutputRequestedRegion(itkDataObject * arg0);
     virtual void ResetPipeline();
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
     virtual void SetReleaseDataFlag(bool flag);
     virtual bool GetReleaseDataFlag() const;
     void ReleaseDataFlagOn();
     void ReleaseDataFlagOff();
     virtual void SetReleaseDataBeforeUpdateFlag(bool const _arg);
     virtual bool const & GetReleaseDataBeforeUpdateFlag() const;
     virtual void ReleaseDataBeforeUpdateFlagOn();
     virtual void ReleaseDataBeforeUpdateFlagOff();
     virtual void SetNumberOfThreads(int _arg);
     virtual int const & GetNumberOfThreads() const;
     itkMultiThreader * GetMultiThreader();
     virtual void PrepareOutputs();
   private:
     itkProcessObject(itkProcessObject const & arg0);
     void operator=(itkProcessObject const & arg0);
   protected:
     itkProcessObject();
     ~itkProcessObject();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     virtual void SetNthInput(unsigned int num, itkDataObject * input);
     virtual void AddInput(itkDataObject * input);
     virtual void RemoveInput(itkDataObject * input);
     virtual void SetNumberOfRequiredInputs(unsigned int const _arg);
     virtual unsigned int const & GetNumberOfRequiredInputs() const;
     virtual void PushBackInput(itkDataObject const * input);
     virtual void PopBackInput();
     virtual void PushFrontInput(itkDataObject const * input);
     virtual void PopFrontInput();
     void SetNumberOfInputs(unsigned int num);
     itkDataObject * GetInput(unsigned int idx);
     itkDataObject const * GetInput(unsigned int idx) const;
     virtual void SetNthOutput(unsigned int num, itkDataObject * output);
     virtual void AddOutput(itkDataObject * output);
     virtual void RemoveOutput(itkDataObject * output);
     virtual void SetNumberOfRequiredOutputs(unsigned int const _arg);
     virtual unsigned int const & GetNumberOfRequiredOutputs() const;
     void SetNumberOfOutputs(unsigned int num);
     itkDataObject * GetOutput(unsigned int idx);
     itkDataObject const * GetOutput(unsigned int idx) const;
     virtual void GenerateInputRequestedRegion();
     virtual void GenerateOutputRequestedRegion(itkDataObject * output);
     virtual void GenerateOutputInformation();
     virtual void GenerateData();
     virtual void PropagateResetPipeline();
     virtual void ReleaseInputs();
     virtual void CacheInputReleaseDataFlags();
     virtual void RestoreInputReleaseDataFlags();
 };


 class itkProcessObject_Pointer {
   public:
     itkProcessObject_Pointer();
     itkProcessObject_Pointer(itkProcessObject_Pointer const & p);
     itkProcessObject_Pointer(itkProcessObject * p);
     ~itkProcessObject_Pointer();
     itkProcessObject * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkProcessObject * GetPointer() const;
     bool operator<(itkProcessObject_Pointer const & r) const;
     bool operator>(itkProcessObject_Pointer const & r) const;
     bool operator<=(itkProcessObject_Pointer const & r) const;
     bool operator>=(itkProcessObject_Pointer const & r) const;
     itkProcessObject_Pointer & operator=(itkProcessObject_Pointer const & r);
     itkProcessObject_Pointer & operator=(itkProcessObject * r);
     itkProcessObject * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkProgressReporter {
   public:
     itkProgressReporter & operator=(itkProgressReporter const & arg0);
     itkProgressReporter(itkProgressReporter const & arg0);
     itkProgressReporter(itkProcessObject * filter, int threadId, unsigned long numberOfPixels, unsigned long numberOfUpdates = 100, float initialProgress = 0.0f, float progressWeight = 1.0e+0f);
     ~itkProgressReporter();
     void CompletedPixel();
   private:
     itkProgressReporter();
   protected:
 };


 class itkResourceProbeDD {
   public:
     itkResourceProbeDD & operator=(itkResourceProbeDD const & arg0);
     itkResourceProbeDD(itkResourceProbeDD const & arg0);
     itkResourceProbeDD(std::string const & type, std::string const & unit);
     ~itkResourceProbeDD();
     std::string GetType() const;
     std::string GetUnit() const;
     void Start();
     void Stop();
     unsigned long GetNumberOfStarts() const;
     unsigned long GetNumberOfStops() const;
     virtual double GetInstantValue() const = 0;
     double GetTotal() const;
     double GetMean() const;
   private:
   protected:
 };


 class itkSimpleFilterWatcher {
   public:
     itkSimpleFilterWatcher(itkProcessObject * o, char const * comment = "");
     itkSimpleFilterWatcher(itkSimpleFilterWatcher const & arg0);
     itkSimpleFilterWatcher();
     void operator=(itkSimpleFilterWatcher const & arg0);
     ~itkSimpleFilterWatcher();
     char const * GetNameOfClass();
     void QuietOn();
     void QuietOff();
     void TestAbortOn();
     void TestAbortOff();
     itkProcessObject * GetProcess();
     void SetSteps(int val);
     int GetSteps();
     void SetIterations(int val);
     int GetIterations();
     void SetQuiet(bool val);
     bool GetQuiet();
     std::string GetComment();
     itkTimeProbe & GetTimeProbe();
   private:
   protected:
     virtual void ShowProgress();
     virtual void ShowAbort();
     virtual void ShowIteration();
     virtual void StartFilter();
     virtual void EndFilter();
 };


 class itkTimeProbe : public itkResourceProbeDD {
   public:
     itkTimeProbe & operator=(itkTimeProbe const & arg0);
     itkTimeProbe(itkTimeProbe const & arg0);
     itkTimeProbe();
     ~itkTimeProbe();
     virtual double GetInstantValue() const;
     double GetMeanTime() const;
   private:
   protected:
 };


 class itkTimeStamp {
   public:
     ~itkTimeStamp();
     itkTimeStamp & operator=(itkTimeStamp const & arg0);
     itkTimeStamp(itkTimeStamp const & arg0);
     static itkTimeStamp * New();
     itkTimeStamp();
     void Delete();
     static char const * GetNameOfClass();
     void Modified();
     unsigned long GetMTime() const;
     bool operator>(itkTimeStamp & ts);
     bool operator<(itkTimeStamp & ts);
   private:
   protected:
 };


 class itkVersion : public itkObject {
   public:
     static itkVersion_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     static char const * GetITKVersion();
     static int GetITKMajorVersion();
     static int GetITKMinorVersion();
     static int GetITKBuildVersion();
     static char const * GetITKSourceVersion();
   private:
     itkVersion(itkVersion const & arg0);
     void operator=(itkVersion const & arg0);
   protected:
     itkVersion();
     ~itkVersion();
 };


 class itkVersion_Pointer {
   public:
     itkVersion_Pointer();
     itkVersion_Pointer(itkVersion_Pointer const & p);
     itkVersion_Pointer(itkVersion * p);
     ~itkVersion_Pointer();
     itkVersion * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVersion * GetPointer() const;
     bool operator<(itkVersion_Pointer const & r) const;
     bool operator>(itkVersion_Pointer const & r) const;
     bool operator<=(itkVersion_Pointer const & r) const;
     bool operator>=(itkVersion_Pointer const & r) const;
     itkVersion_Pointer & operator=(itkVersion_Pointer const & r);
     itkVersion_Pointer & operator=(itkVersion * r);
     itkVersion * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkXMLFilterWatcher : public itkSimpleFilterWatcher {
   public:
     itkXMLFilterWatcher & operator=(itkXMLFilterWatcher const & arg0);
     itkXMLFilterWatcher(itkXMLFilterWatcher const & arg0);
     itkXMLFilterWatcher(itkProcessObject * o, char const * comment = "");
     ~itkXMLFilterWatcher();
   private:
   protected:
     virtual void ShowProgress();
     virtual void StartFilter();
     virtual void EndFilter();
 };


 class itkCommand : public itkObject {
   public:
     virtual char const * GetNameOfClass() const;
     virtual void Execute(itkObject * caller, itkEventObject const & event) = 0;
     virtual void Execute(itkObject const * caller, itkEventObject const & event) = 0;
   private:
     itkCommand(itkCommand const & arg0);
     void operator=(itkCommand const & arg0);
   protected:
     itkCommand();
     ~itkCommand();
 };


 class itkDataObject : public itkObject {
   public:
     virtual char const * GetNameOfClass() const;
     void DisconnectPipeline();
     itk::SmartPointerForwardReference< itk::ProcessObject > GetSource() const;
     unsigned int GetSourceOutputIndex() const;
     virtual void Initialize();
     void SetReleaseDataFlag(bool flag);
     virtual bool const & GetReleaseDataFlag() const;
     virtual void ReleaseDataFlagOn();
     virtual void ReleaseDataFlagOff();
     static void SetGlobalReleaseDataFlag(bool val);
     static bool GetGlobalReleaseDataFlag();
     static void GlobalReleaseDataFlagOn();
     static void GlobalReleaseDataFlagOff();
     void ReleaseData();
     bool ShouldIReleaseData() const;
     bool GetDataReleased() const;
     virtual void Update();
     virtual void UpdateOutputInformation();
     virtual void PropagateRequestedRegion();
     virtual void UpdateOutputData();
     virtual void ResetPipeline();
     void SetPipelineMTime(unsigned long time);
     virtual unsigned long const & GetPipelineMTime() const;
     virtual unsigned long GetUpdateMTime() const;
     virtual void PrepareForNewData();
     void DataHasBeenGenerated();
     virtual void SetRequestedRegionToLargestPossibleRegion();
     virtual bool RequestedRegionIsOutsideOfTheBufferedRegion();
     virtual bool VerifyRequestedRegion();
     virtual void CopyInformation(itkDataObject const * arg0);
     virtual void SetRequestedRegion(itkDataObject * arg0);
     virtual void Graft(itkDataObject const * arg0);
   private:
     itkDataObject(itkDataObject const & arg0);
     void operator=(itkDataObject const & arg0);
     bool ConnectSource(itkProcessObject * s, unsigned long idx) const;
     bool DisconnectSource(itkProcessObject * s, unsigned long idx) const;
   protected:
     itkDataObject();
     ~itkDataObject();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     virtual void PropagateResetPipeline();
 };


 class itkDirectory : public itkObject {
   public:
     static itkDirectory_Pointer New();
     virtual char const * GetNameOfClass() const;
     bool Load(char const * dir);
     size_t GetNumberOfFiles();
     char const * GetFile(unsigned int index);
   private:
     itkDirectory(itkDirectory const & arg0);
     void operator=(itkDirectory const & arg0);
   protected:
     itkDirectory();
     ~itkDirectory();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkDynamicLoader : public itkObject {
   public:
     static itkDynamicLoader_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     static itk::LibHandle OpenLibrary(char const * arg0);
     static int CloseLibrary(itk::LibHandle arg0);
     static void * GetSymbolAddress(itk::LibHandle arg0, char const * arg1);
     static char const * LibPrefix();
     static char const * LibExtension();
     static char const * LastError();
   private:
     itkDynamicLoader(itkDynamicLoader const & arg0);
     void operator=(itkDynamicLoader const & arg0);
   protected:
     itkDynamicLoader();
     ~itkDynamicLoader();
 };


 class itkLightProcessObject : public itkObject {
   public:
     static itkLightProcessObject_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetAbortGenerateData(bool const _arg);
     virtual bool const & GetAbortGenerateData() const;
     virtual void AbortGenerateDataOn();
     virtual void AbortGenerateDataOff();
     virtual void SetProgress(float _arg);
     virtual float const & GetProgress() const;
     void UpdateProgress(float amount);
     virtual void UpdateOutputData();
   private:
     itkLightProcessObject(itkLightProcessObject const & arg0);
     void operator=(itkLightProcessObject const & arg0);
   protected:
     itkLightProcessObject();
     ~itkLightProcessObject();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkMultiThreader : public itkObject {
   public:
     static itkMultiThreader_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetNumberOfThreads(int numberOfThreads);
     virtual int GetNumberOfThreads() const;
     static void SetGlobalMaximumNumberOfThreads(int val);
     static int GetGlobalMaximumNumberOfThreads();
     static void SetGlobalDefaultNumberOfThreads(int val);
     static int GetGlobalDefaultNumberOfThreads();
     void SingleMethodExecute();
     void MultipleMethodExecute();
     void SetSingleMethod(itk::ThreadFunctionType arg0, void * data);
     void SetMultipleMethod(int index, itk::ThreadFunctionType arg1, void * data);
     int SpawnThread(itk::ThreadFunctionType arg0, void * data);
     void TerminateThread(int thread_id);
   private:
     itkMultiThreader(itkMultiThreader const & arg0);
     void operator=(itkMultiThreader const & arg0);
     static void * SingleMethodProxy(void * arg);
     itk::ThreadProcessIDType DispatchSingleMethodThread(itkMultiThreader::ThreadInfoStruct * arg0);
     void WaitForSingleMethodThread(itk::ThreadProcessIDType arg0);
   protected:
     itkMultiThreader();
     ~itkMultiThreader();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


