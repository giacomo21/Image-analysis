// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkMirrorPadImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkMirrorPadImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkMirrorPadImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkMirrorPadImageFilterJava
#endif
#ifdef SWIGLUA
%module itkMirrorPadImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkMirrorPadImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkMirrorPadImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkMirrorPadImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkMirrorPadImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkMirrorPadImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkMirrorPadImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkMirrorPadImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkMirrorPadImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkMirrorPadImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkMirrorPadImageFilterPython
#endif
#ifdef SWIGR
%module itkMirrorPadImageFilterR
#endif
#ifdef SWIGRUBY
%module itkMirrorPadImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkMirrorPadImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkMirrorPadImageFilterTcl
#endif
#ifdef SWIGXML
%module itkMirrorPadImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Resize.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkIndex.i
%import wrap_ITKRegions.i
%import wrap_itkConstantPadImageFilter.i


%include itk.i
%include wrap_itkMirrorPadImageFilter_ext.i


 class itkMirrorPadImageFilterICF2ICF2 : public itkConstantPadImageFilterICF2ICF2_Superclass {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkMirrorPadImageFilterICF2ICF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkMirrorPadImageFilterICF2ICF2(itkMirrorPadImageFilterICF2ICF2 const & arg0);
     void operator=(itkMirrorPadImageFilterICF2ICF2 const & arg0);
   protected:
     itkMirrorPadImageFilterICF2ICF2();
     ~itkMirrorPadImageFilterICF2ICF2();
     void ConvertOutputIndexToInputIndex(itkIndex2 & outputIndex, itkIndex2 & inputIndex, itkImageRegion2 & outputRegion, itkImageRegion2 & inputRegion, int * oddRegionArray);
     int RegionIsOdd(long base, long test, long size);
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkMirrorPadImageFilterICF2ICF2_Pointer {
   public:
     itkMirrorPadImageFilterICF2ICF2_Pointer();
     itkMirrorPadImageFilterICF2ICF2_Pointer(itkMirrorPadImageFilterICF2ICF2_Pointer const & p);
     itkMirrorPadImageFilterICF2ICF2_Pointer(itkMirrorPadImageFilterICF2ICF2 * p);
     ~itkMirrorPadImageFilterICF2ICF2_Pointer();
     itkMirrorPadImageFilterICF2ICF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMirrorPadImageFilterICF2ICF2 * GetPointer() const;
     bool operator<(itkMirrorPadImageFilterICF2ICF2_Pointer const & r) const;
     bool operator>(itkMirrorPadImageFilterICF2ICF2_Pointer const & r) const;
     bool operator<=(itkMirrorPadImageFilterICF2ICF2_Pointer const & r) const;
     bool operator>=(itkMirrorPadImageFilterICF2ICF2_Pointer const & r) const;
     itkMirrorPadImageFilterICF2ICF2_Pointer & operator=(itkMirrorPadImageFilterICF2ICF2_Pointer const & r);
     itkMirrorPadImageFilterICF2ICF2_Pointer & operator=(itkMirrorPadImageFilterICF2ICF2 * r);
     itkMirrorPadImageFilterICF2ICF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMirrorPadImageFilterICF3ICF3 : public itkConstantPadImageFilterICF3ICF3_Superclass {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkMirrorPadImageFilterICF3ICF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkMirrorPadImageFilterICF3ICF3(itkMirrorPadImageFilterICF3ICF3 const & arg0);
     void operator=(itkMirrorPadImageFilterICF3ICF3 const & arg0);
   protected:
     itkMirrorPadImageFilterICF3ICF3();
     ~itkMirrorPadImageFilterICF3ICF3();
     void ConvertOutputIndexToInputIndex(itkIndex3 & outputIndex, itkIndex3 & inputIndex, itkImageRegion3 & outputRegion, itkImageRegion3 & inputRegion, int * oddRegionArray);
     int RegionIsOdd(long base, long test, long size);
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkMirrorPadImageFilterICF3ICF3_Pointer {
   public:
     itkMirrorPadImageFilterICF3ICF3_Pointer();
     itkMirrorPadImageFilterICF3ICF3_Pointer(itkMirrorPadImageFilterICF3ICF3_Pointer const & p);
     itkMirrorPadImageFilterICF3ICF3_Pointer(itkMirrorPadImageFilterICF3ICF3 * p);
     ~itkMirrorPadImageFilterICF3ICF3_Pointer();
     itkMirrorPadImageFilterICF3ICF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMirrorPadImageFilterICF3ICF3 * GetPointer() const;
     bool operator<(itkMirrorPadImageFilterICF3ICF3_Pointer const & r) const;
     bool operator>(itkMirrorPadImageFilterICF3ICF3_Pointer const & r) const;
     bool operator<=(itkMirrorPadImageFilterICF3ICF3_Pointer const & r) const;
     bool operator>=(itkMirrorPadImageFilterICF3ICF3_Pointer const & r) const;
     itkMirrorPadImageFilterICF3ICF3_Pointer & operator=(itkMirrorPadImageFilterICF3ICF3_Pointer const & r);
     itkMirrorPadImageFilterICF3ICF3_Pointer & operator=(itkMirrorPadImageFilterICF3ICF3 * r);
     itkMirrorPadImageFilterICF3ICF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMirrorPadImageFilterICVF22ICVF22 : public itkConstantPadImageFilterICVF22ICVF22_Superclass {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkMirrorPadImageFilterICVF22ICVF22_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkMirrorPadImageFilterICVF22ICVF22(itkMirrorPadImageFilterICVF22ICVF22 const & arg0);
     void operator=(itkMirrorPadImageFilterICVF22ICVF22 const & arg0);
   protected:
     itkMirrorPadImageFilterICVF22ICVF22();
     ~itkMirrorPadImageFilterICVF22ICVF22();
     void ConvertOutputIndexToInputIndex(itkIndex2 & outputIndex, itkIndex2 & inputIndex, itkImageRegion2 & outputRegion, itkImageRegion2 & inputRegion, int * oddRegionArray);
     int RegionIsOdd(long base, long test, long size);
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkMirrorPadImageFilterICVF22ICVF22_Pointer {
   public:
     itkMirrorPadImageFilterICVF22ICVF22_Pointer();
     itkMirrorPadImageFilterICVF22ICVF22_Pointer(itkMirrorPadImageFilterICVF22ICVF22_Pointer const & p);
     itkMirrorPadImageFilterICVF22ICVF22_Pointer(itkMirrorPadImageFilterICVF22ICVF22 * p);
     ~itkMirrorPadImageFilterICVF22ICVF22_Pointer();
     itkMirrorPadImageFilterICVF22ICVF22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMirrorPadImageFilterICVF22ICVF22 * GetPointer() const;
     bool operator<(itkMirrorPadImageFilterICVF22ICVF22_Pointer const & r) const;
     bool operator>(itkMirrorPadImageFilterICVF22ICVF22_Pointer const & r) const;
     bool operator<=(itkMirrorPadImageFilterICVF22ICVF22_Pointer const & r) const;
     bool operator>=(itkMirrorPadImageFilterICVF22ICVF22_Pointer const & r) const;
     itkMirrorPadImageFilterICVF22ICVF22_Pointer & operator=(itkMirrorPadImageFilterICVF22ICVF22_Pointer const & r);
     itkMirrorPadImageFilterICVF22ICVF22_Pointer & operator=(itkMirrorPadImageFilterICVF22ICVF22 * r);
     itkMirrorPadImageFilterICVF22ICVF22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMirrorPadImageFilterICVF33ICVF33 : public itkConstantPadImageFilterICVF33ICVF33_Superclass {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkMirrorPadImageFilterICVF33ICVF33_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkMirrorPadImageFilterICVF33ICVF33(itkMirrorPadImageFilterICVF33ICVF33 const & arg0);
     void operator=(itkMirrorPadImageFilterICVF33ICVF33 const & arg0);
   protected:
     itkMirrorPadImageFilterICVF33ICVF33();
     ~itkMirrorPadImageFilterICVF33ICVF33();
     void ConvertOutputIndexToInputIndex(itkIndex3 & outputIndex, itkIndex3 & inputIndex, itkImageRegion3 & outputRegion, itkImageRegion3 & inputRegion, int * oddRegionArray);
     int RegionIsOdd(long base, long test, long size);
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkMirrorPadImageFilterICVF33ICVF33_Pointer {
   public:
     itkMirrorPadImageFilterICVF33ICVF33_Pointer();
     itkMirrorPadImageFilterICVF33ICVF33_Pointer(itkMirrorPadImageFilterICVF33ICVF33_Pointer const & p);
     itkMirrorPadImageFilterICVF33ICVF33_Pointer(itkMirrorPadImageFilterICVF33ICVF33 * p);
     ~itkMirrorPadImageFilterICVF33ICVF33_Pointer();
     itkMirrorPadImageFilterICVF33ICVF33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMirrorPadImageFilterICVF33ICVF33 * GetPointer() const;
     bool operator<(itkMirrorPadImageFilterICVF33ICVF33_Pointer const & r) const;
     bool operator>(itkMirrorPadImageFilterICVF33ICVF33_Pointer const & r) const;
     bool operator<=(itkMirrorPadImageFilterICVF33ICVF33_Pointer const & r) const;
     bool operator>=(itkMirrorPadImageFilterICVF33ICVF33_Pointer const & r) const;
     itkMirrorPadImageFilterICVF33ICVF33_Pointer & operator=(itkMirrorPadImageFilterICVF33ICVF33_Pointer const & r);
     itkMirrorPadImageFilterICVF33ICVF33_Pointer & operator=(itkMirrorPadImageFilterICVF33ICVF33 * r);
     itkMirrorPadImageFilterICVF33ICVF33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMirrorPadImageFilterID2ID2 : public itkConstantPadImageFilterID2ID2_Superclass {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkMirrorPadImageFilterID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkMirrorPadImageFilterID2ID2(itkMirrorPadImageFilterID2ID2 const & arg0);
     void operator=(itkMirrorPadImageFilterID2ID2 const & arg0);
   protected:
     itkMirrorPadImageFilterID2ID2();
     ~itkMirrorPadImageFilterID2ID2();
     void ConvertOutputIndexToInputIndex(itkIndex2 & outputIndex, itkIndex2 & inputIndex, itkImageRegion2 & outputRegion, itkImageRegion2 & inputRegion, int * oddRegionArray);
     int RegionIsOdd(long base, long test, long size);
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkMirrorPadImageFilterID2ID2_Pointer {
   public:
     itkMirrorPadImageFilterID2ID2_Pointer();
     itkMirrorPadImageFilterID2ID2_Pointer(itkMirrorPadImageFilterID2ID2_Pointer const & p);
     itkMirrorPadImageFilterID2ID2_Pointer(itkMirrorPadImageFilterID2ID2 * p);
     ~itkMirrorPadImageFilterID2ID2_Pointer();
     itkMirrorPadImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMirrorPadImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkMirrorPadImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkMirrorPadImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkMirrorPadImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkMirrorPadImageFilterID2ID2_Pointer const & r) const;
     itkMirrorPadImageFilterID2ID2_Pointer & operator=(itkMirrorPadImageFilterID2ID2_Pointer const & r);
     itkMirrorPadImageFilterID2ID2_Pointer & operator=(itkMirrorPadImageFilterID2ID2 * r);
     itkMirrorPadImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMirrorPadImageFilterID3ID3 : public itkConstantPadImageFilterID3ID3_Superclass {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkMirrorPadImageFilterID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkMirrorPadImageFilterID3ID3(itkMirrorPadImageFilterID3ID3 const & arg0);
     void operator=(itkMirrorPadImageFilterID3ID3 const & arg0);
   protected:
     itkMirrorPadImageFilterID3ID3();
     ~itkMirrorPadImageFilterID3ID3();
     void ConvertOutputIndexToInputIndex(itkIndex3 & outputIndex, itkIndex3 & inputIndex, itkImageRegion3 & outputRegion, itkImageRegion3 & inputRegion, int * oddRegionArray);
     int RegionIsOdd(long base, long test, long size);
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkMirrorPadImageFilterID3ID3_Pointer {
   public:
     itkMirrorPadImageFilterID3ID3_Pointer();
     itkMirrorPadImageFilterID3ID3_Pointer(itkMirrorPadImageFilterID3ID3_Pointer const & p);
     itkMirrorPadImageFilterID3ID3_Pointer(itkMirrorPadImageFilterID3ID3 * p);
     ~itkMirrorPadImageFilterID3ID3_Pointer();
     itkMirrorPadImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMirrorPadImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkMirrorPadImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkMirrorPadImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkMirrorPadImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkMirrorPadImageFilterID3ID3_Pointer const & r) const;
     itkMirrorPadImageFilterID3ID3_Pointer & operator=(itkMirrorPadImageFilterID3ID3_Pointer const & r);
     itkMirrorPadImageFilterID3ID3_Pointer & operator=(itkMirrorPadImageFilterID3ID3 * r);
     itkMirrorPadImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMirrorPadImageFilterIF2IF2 : public itkConstantPadImageFilterIF2IF2_Superclass {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkMirrorPadImageFilterIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkMirrorPadImageFilterIF2IF2(itkMirrorPadImageFilterIF2IF2 const & arg0);
     void operator=(itkMirrorPadImageFilterIF2IF2 const & arg0);
   protected:
     itkMirrorPadImageFilterIF2IF2();
     ~itkMirrorPadImageFilterIF2IF2();
     void ConvertOutputIndexToInputIndex(itkIndex2 & outputIndex, itkIndex2 & inputIndex, itkImageRegion2 & outputRegion, itkImageRegion2 & inputRegion, int * oddRegionArray);
     int RegionIsOdd(long base, long test, long size);
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkMirrorPadImageFilterIF2IF2_Pointer {
   public:
     itkMirrorPadImageFilterIF2IF2_Pointer();
     itkMirrorPadImageFilterIF2IF2_Pointer(itkMirrorPadImageFilterIF2IF2_Pointer const & p);
     itkMirrorPadImageFilterIF2IF2_Pointer(itkMirrorPadImageFilterIF2IF2 * p);
     ~itkMirrorPadImageFilterIF2IF2_Pointer();
     itkMirrorPadImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMirrorPadImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkMirrorPadImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkMirrorPadImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkMirrorPadImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkMirrorPadImageFilterIF2IF2_Pointer const & r) const;
     itkMirrorPadImageFilterIF2IF2_Pointer & operator=(itkMirrorPadImageFilterIF2IF2_Pointer const & r);
     itkMirrorPadImageFilterIF2IF2_Pointer & operator=(itkMirrorPadImageFilterIF2IF2 * r);
     itkMirrorPadImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMirrorPadImageFilterIF3IF3 : public itkConstantPadImageFilterIF3IF3_Superclass {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkMirrorPadImageFilterIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkMirrorPadImageFilterIF3IF3(itkMirrorPadImageFilterIF3IF3 const & arg0);
     void operator=(itkMirrorPadImageFilterIF3IF3 const & arg0);
   protected:
     itkMirrorPadImageFilterIF3IF3();
     ~itkMirrorPadImageFilterIF3IF3();
     void ConvertOutputIndexToInputIndex(itkIndex3 & outputIndex, itkIndex3 & inputIndex, itkImageRegion3 & outputRegion, itkImageRegion3 & inputRegion, int * oddRegionArray);
     int RegionIsOdd(long base, long test, long size);
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkMirrorPadImageFilterIF3IF3_Pointer {
   public:
     itkMirrorPadImageFilterIF3IF3_Pointer();
     itkMirrorPadImageFilterIF3IF3_Pointer(itkMirrorPadImageFilterIF3IF3_Pointer const & p);
     itkMirrorPadImageFilterIF3IF3_Pointer(itkMirrorPadImageFilterIF3IF3 * p);
     ~itkMirrorPadImageFilterIF3IF3_Pointer();
     itkMirrorPadImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMirrorPadImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkMirrorPadImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkMirrorPadImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkMirrorPadImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkMirrorPadImageFilterIF3IF3_Pointer const & r) const;
     itkMirrorPadImageFilterIF3IF3_Pointer & operator=(itkMirrorPadImageFilterIF3IF3_Pointer const & r);
     itkMirrorPadImageFilterIF3IF3_Pointer & operator=(itkMirrorPadImageFilterIF3IF3 * r);
     itkMirrorPadImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMirrorPadImageFilterIRGBAUS2IRGBAUS2 : public itkConstantPadImageFilterIRGBAUS2IRGBAUS2_Superclass {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkMirrorPadImageFilterIRGBAUS2IRGBAUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkMirrorPadImageFilterIRGBAUS2IRGBAUS2(itkMirrorPadImageFilterIRGBAUS2IRGBAUS2 const & arg0);
     void operator=(itkMirrorPadImageFilterIRGBAUS2IRGBAUS2 const & arg0);
   protected:
     itkMirrorPadImageFilterIRGBAUS2IRGBAUS2();
     ~itkMirrorPadImageFilterIRGBAUS2IRGBAUS2();
     void ConvertOutputIndexToInputIndex(itkIndex2 & outputIndex, itkIndex2 & inputIndex, itkImageRegion2 & outputRegion, itkImageRegion2 & inputRegion, int * oddRegionArray);
     int RegionIsOdd(long base, long test, long size);
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkMirrorPadImageFilterIRGBAUS2IRGBAUS2_Pointer {
   public:
     itkMirrorPadImageFilterIRGBAUS2IRGBAUS2_Pointer();
     itkMirrorPadImageFilterIRGBAUS2IRGBAUS2_Pointer(itkMirrorPadImageFilterIRGBAUS2IRGBAUS2_Pointer const & p);
     itkMirrorPadImageFilterIRGBAUS2IRGBAUS2_Pointer(itkMirrorPadImageFilterIRGBAUS2IRGBAUS2 * p);
     ~itkMirrorPadImageFilterIRGBAUS2IRGBAUS2_Pointer();
     itkMirrorPadImageFilterIRGBAUS2IRGBAUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMirrorPadImageFilterIRGBAUS2IRGBAUS2 * GetPointer() const;
     bool operator<(itkMirrorPadImageFilterIRGBAUS2IRGBAUS2_Pointer const & r) const;
     bool operator>(itkMirrorPadImageFilterIRGBAUS2IRGBAUS2_Pointer const & r) const;
     bool operator<=(itkMirrorPadImageFilterIRGBAUS2IRGBAUS2_Pointer const & r) const;
     bool operator>=(itkMirrorPadImageFilterIRGBAUS2IRGBAUS2_Pointer const & r) const;
     itkMirrorPadImageFilterIRGBAUS2IRGBAUS2_Pointer & operator=(itkMirrorPadImageFilterIRGBAUS2IRGBAUS2_Pointer const & r);
     itkMirrorPadImageFilterIRGBAUS2IRGBAUS2_Pointer & operator=(itkMirrorPadImageFilterIRGBAUS2IRGBAUS2 * r);
     itkMirrorPadImageFilterIRGBAUS2IRGBAUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMirrorPadImageFilterIRGBAUS3IRGBAUS3 : public itkConstantPadImageFilterIRGBAUS3IRGBAUS3_Superclass {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkMirrorPadImageFilterIRGBAUS3IRGBAUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkMirrorPadImageFilterIRGBAUS3IRGBAUS3(itkMirrorPadImageFilterIRGBAUS3IRGBAUS3 const & arg0);
     void operator=(itkMirrorPadImageFilterIRGBAUS3IRGBAUS3 const & arg0);
   protected:
     itkMirrorPadImageFilterIRGBAUS3IRGBAUS3();
     ~itkMirrorPadImageFilterIRGBAUS3IRGBAUS3();
     void ConvertOutputIndexToInputIndex(itkIndex3 & outputIndex, itkIndex3 & inputIndex, itkImageRegion3 & outputRegion, itkImageRegion3 & inputRegion, int * oddRegionArray);
     int RegionIsOdd(long base, long test, long size);
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkMirrorPadImageFilterIRGBAUS3IRGBAUS3_Pointer {
   public:
     itkMirrorPadImageFilterIRGBAUS3IRGBAUS3_Pointer();
     itkMirrorPadImageFilterIRGBAUS3IRGBAUS3_Pointer(itkMirrorPadImageFilterIRGBAUS3IRGBAUS3_Pointer const & p);
     itkMirrorPadImageFilterIRGBAUS3IRGBAUS3_Pointer(itkMirrorPadImageFilterIRGBAUS3IRGBAUS3 * p);
     ~itkMirrorPadImageFilterIRGBAUS3IRGBAUS3_Pointer();
     itkMirrorPadImageFilterIRGBAUS3IRGBAUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMirrorPadImageFilterIRGBAUS3IRGBAUS3 * GetPointer() const;
     bool operator<(itkMirrorPadImageFilterIRGBAUS3IRGBAUS3_Pointer const & r) const;
     bool operator>(itkMirrorPadImageFilterIRGBAUS3IRGBAUS3_Pointer const & r) const;
     bool operator<=(itkMirrorPadImageFilterIRGBAUS3IRGBAUS3_Pointer const & r) const;
     bool operator>=(itkMirrorPadImageFilterIRGBAUS3IRGBAUS3_Pointer const & r) const;
     itkMirrorPadImageFilterIRGBAUS3IRGBAUS3_Pointer & operator=(itkMirrorPadImageFilterIRGBAUS3IRGBAUS3_Pointer const & r);
     itkMirrorPadImageFilterIRGBAUS3IRGBAUS3_Pointer & operator=(itkMirrorPadImageFilterIRGBAUS3IRGBAUS3 * r);
     itkMirrorPadImageFilterIRGBAUS3IRGBAUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMirrorPadImageFilterIRGBUS2IRGBUS2 : public itkConstantPadImageFilterIRGBUS2IRGBUS2_Superclass {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkMirrorPadImageFilterIRGBUS2IRGBUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkMirrorPadImageFilterIRGBUS2IRGBUS2(itkMirrorPadImageFilterIRGBUS2IRGBUS2 const & arg0);
     void operator=(itkMirrorPadImageFilterIRGBUS2IRGBUS2 const & arg0);
   protected:
     itkMirrorPadImageFilterIRGBUS2IRGBUS2();
     ~itkMirrorPadImageFilterIRGBUS2IRGBUS2();
     void ConvertOutputIndexToInputIndex(itkIndex2 & outputIndex, itkIndex2 & inputIndex, itkImageRegion2 & outputRegion, itkImageRegion2 & inputRegion, int * oddRegionArray);
     int RegionIsOdd(long base, long test, long size);
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkMirrorPadImageFilterIRGBUS2IRGBUS2_Pointer {
   public:
     itkMirrorPadImageFilterIRGBUS2IRGBUS2_Pointer();
     itkMirrorPadImageFilterIRGBUS2IRGBUS2_Pointer(itkMirrorPadImageFilterIRGBUS2IRGBUS2_Pointer const & p);
     itkMirrorPadImageFilterIRGBUS2IRGBUS2_Pointer(itkMirrorPadImageFilterIRGBUS2IRGBUS2 * p);
     ~itkMirrorPadImageFilterIRGBUS2IRGBUS2_Pointer();
     itkMirrorPadImageFilterIRGBUS2IRGBUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMirrorPadImageFilterIRGBUS2IRGBUS2 * GetPointer() const;
     bool operator<(itkMirrorPadImageFilterIRGBUS2IRGBUS2_Pointer const & r) const;
     bool operator>(itkMirrorPadImageFilterIRGBUS2IRGBUS2_Pointer const & r) const;
     bool operator<=(itkMirrorPadImageFilterIRGBUS2IRGBUS2_Pointer const & r) const;
     bool operator>=(itkMirrorPadImageFilterIRGBUS2IRGBUS2_Pointer const & r) const;
     itkMirrorPadImageFilterIRGBUS2IRGBUS2_Pointer & operator=(itkMirrorPadImageFilterIRGBUS2IRGBUS2_Pointer const & r);
     itkMirrorPadImageFilterIRGBUS2IRGBUS2_Pointer & operator=(itkMirrorPadImageFilterIRGBUS2IRGBUS2 * r);
     itkMirrorPadImageFilterIRGBUS2IRGBUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMirrorPadImageFilterIRGBUS3IRGBUS3 : public itkConstantPadImageFilterIRGBUS3IRGBUS3_Superclass {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkMirrorPadImageFilterIRGBUS3IRGBUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkMirrorPadImageFilterIRGBUS3IRGBUS3(itkMirrorPadImageFilterIRGBUS3IRGBUS3 const & arg0);
     void operator=(itkMirrorPadImageFilterIRGBUS3IRGBUS3 const & arg0);
   protected:
     itkMirrorPadImageFilterIRGBUS3IRGBUS3();
     ~itkMirrorPadImageFilterIRGBUS3IRGBUS3();
     void ConvertOutputIndexToInputIndex(itkIndex3 & outputIndex, itkIndex3 & inputIndex, itkImageRegion3 & outputRegion, itkImageRegion3 & inputRegion, int * oddRegionArray);
     int RegionIsOdd(long base, long test, long size);
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkMirrorPadImageFilterIRGBUS3IRGBUS3_Pointer {
   public:
     itkMirrorPadImageFilterIRGBUS3IRGBUS3_Pointer();
     itkMirrorPadImageFilterIRGBUS3IRGBUS3_Pointer(itkMirrorPadImageFilterIRGBUS3IRGBUS3_Pointer const & p);
     itkMirrorPadImageFilterIRGBUS3IRGBUS3_Pointer(itkMirrorPadImageFilterIRGBUS3IRGBUS3 * p);
     ~itkMirrorPadImageFilterIRGBUS3IRGBUS3_Pointer();
     itkMirrorPadImageFilterIRGBUS3IRGBUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMirrorPadImageFilterIRGBUS3IRGBUS3 * GetPointer() const;
     bool operator<(itkMirrorPadImageFilterIRGBUS3IRGBUS3_Pointer const & r) const;
     bool operator>(itkMirrorPadImageFilterIRGBUS3IRGBUS3_Pointer const & r) const;
     bool operator<=(itkMirrorPadImageFilterIRGBUS3IRGBUS3_Pointer const & r) const;
     bool operator>=(itkMirrorPadImageFilterIRGBUS3IRGBUS3_Pointer const & r) const;
     itkMirrorPadImageFilterIRGBUS3IRGBUS3_Pointer & operator=(itkMirrorPadImageFilterIRGBUS3IRGBUS3_Pointer const & r);
     itkMirrorPadImageFilterIRGBUS3IRGBUS3_Pointer & operator=(itkMirrorPadImageFilterIRGBUS3IRGBUS3 * r);
     itkMirrorPadImageFilterIRGBUS3IRGBUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMirrorPadImageFilterIUC2IUC2 : public itkConstantPadImageFilterIUC2IUC2_Superclass {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkMirrorPadImageFilterIUC2IUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkMirrorPadImageFilterIUC2IUC2(itkMirrorPadImageFilterIUC2IUC2 const & arg0);
     void operator=(itkMirrorPadImageFilterIUC2IUC2 const & arg0);
   protected:
     itkMirrorPadImageFilterIUC2IUC2();
     ~itkMirrorPadImageFilterIUC2IUC2();
     void ConvertOutputIndexToInputIndex(itkIndex2 & outputIndex, itkIndex2 & inputIndex, itkImageRegion2 & outputRegion, itkImageRegion2 & inputRegion, int * oddRegionArray);
     int RegionIsOdd(long base, long test, long size);
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkMirrorPadImageFilterIUC2IUC2_Pointer {
   public:
     itkMirrorPadImageFilterIUC2IUC2_Pointer();
     itkMirrorPadImageFilterIUC2IUC2_Pointer(itkMirrorPadImageFilterIUC2IUC2_Pointer const & p);
     itkMirrorPadImageFilterIUC2IUC2_Pointer(itkMirrorPadImageFilterIUC2IUC2 * p);
     ~itkMirrorPadImageFilterIUC2IUC2_Pointer();
     itkMirrorPadImageFilterIUC2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMirrorPadImageFilterIUC2IUC2 * GetPointer() const;
     bool operator<(itkMirrorPadImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>(itkMirrorPadImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator<=(itkMirrorPadImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>=(itkMirrorPadImageFilterIUC2IUC2_Pointer const & r) const;
     itkMirrorPadImageFilterIUC2IUC2_Pointer & operator=(itkMirrorPadImageFilterIUC2IUC2_Pointer const & r);
     itkMirrorPadImageFilterIUC2IUC2_Pointer & operator=(itkMirrorPadImageFilterIUC2IUC2 * r);
     itkMirrorPadImageFilterIUC2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMirrorPadImageFilterIUC3IUC3 : public itkConstantPadImageFilterIUC3IUC3_Superclass {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkMirrorPadImageFilterIUC3IUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkMirrorPadImageFilterIUC3IUC3(itkMirrorPadImageFilterIUC3IUC3 const & arg0);
     void operator=(itkMirrorPadImageFilterIUC3IUC3 const & arg0);
   protected:
     itkMirrorPadImageFilterIUC3IUC3();
     ~itkMirrorPadImageFilterIUC3IUC3();
     void ConvertOutputIndexToInputIndex(itkIndex3 & outputIndex, itkIndex3 & inputIndex, itkImageRegion3 & outputRegion, itkImageRegion3 & inputRegion, int * oddRegionArray);
     int RegionIsOdd(long base, long test, long size);
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkMirrorPadImageFilterIUC3IUC3_Pointer {
   public:
     itkMirrorPadImageFilterIUC3IUC3_Pointer();
     itkMirrorPadImageFilterIUC3IUC3_Pointer(itkMirrorPadImageFilterIUC3IUC3_Pointer const & p);
     itkMirrorPadImageFilterIUC3IUC3_Pointer(itkMirrorPadImageFilterIUC3IUC3 * p);
     ~itkMirrorPadImageFilterIUC3IUC3_Pointer();
     itkMirrorPadImageFilterIUC3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMirrorPadImageFilterIUC3IUC3 * GetPointer() const;
     bool operator<(itkMirrorPadImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>(itkMirrorPadImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator<=(itkMirrorPadImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>=(itkMirrorPadImageFilterIUC3IUC3_Pointer const & r) const;
     itkMirrorPadImageFilterIUC3IUC3_Pointer & operator=(itkMirrorPadImageFilterIUC3IUC3_Pointer const & r);
     itkMirrorPadImageFilterIUC3IUC3_Pointer & operator=(itkMirrorPadImageFilterIUC3IUC3 * r);
     itkMirrorPadImageFilterIUC3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMirrorPadImageFilterIUL2IUL2 : public itkConstantPadImageFilterIUL2IUL2_Superclass {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkMirrorPadImageFilterIUL2IUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkMirrorPadImageFilterIUL2IUL2(itkMirrorPadImageFilterIUL2IUL2 const & arg0);
     void operator=(itkMirrorPadImageFilterIUL2IUL2 const & arg0);
   protected:
     itkMirrorPadImageFilterIUL2IUL2();
     ~itkMirrorPadImageFilterIUL2IUL2();
     void ConvertOutputIndexToInputIndex(itkIndex2 & outputIndex, itkIndex2 & inputIndex, itkImageRegion2 & outputRegion, itkImageRegion2 & inputRegion, int * oddRegionArray);
     int RegionIsOdd(long base, long test, long size);
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkMirrorPadImageFilterIUL2IUL2_Pointer {
   public:
     itkMirrorPadImageFilterIUL2IUL2_Pointer();
     itkMirrorPadImageFilterIUL2IUL2_Pointer(itkMirrorPadImageFilterIUL2IUL2_Pointer const & p);
     itkMirrorPadImageFilterIUL2IUL2_Pointer(itkMirrorPadImageFilterIUL2IUL2 * p);
     ~itkMirrorPadImageFilterIUL2IUL2_Pointer();
     itkMirrorPadImageFilterIUL2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMirrorPadImageFilterIUL2IUL2 * GetPointer() const;
     bool operator<(itkMirrorPadImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>(itkMirrorPadImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator<=(itkMirrorPadImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>=(itkMirrorPadImageFilterIUL2IUL2_Pointer const & r) const;
     itkMirrorPadImageFilterIUL2IUL2_Pointer & operator=(itkMirrorPadImageFilterIUL2IUL2_Pointer const & r);
     itkMirrorPadImageFilterIUL2IUL2_Pointer & operator=(itkMirrorPadImageFilterIUL2IUL2 * r);
     itkMirrorPadImageFilterIUL2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMirrorPadImageFilterIUL3IUL3 : public itkConstantPadImageFilterIUL3IUL3_Superclass {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkMirrorPadImageFilterIUL3IUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkMirrorPadImageFilterIUL3IUL3(itkMirrorPadImageFilterIUL3IUL3 const & arg0);
     void operator=(itkMirrorPadImageFilterIUL3IUL3 const & arg0);
   protected:
     itkMirrorPadImageFilterIUL3IUL3();
     ~itkMirrorPadImageFilterIUL3IUL3();
     void ConvertOutputIndexToInputIndex(itkIndex3 & outputIndex, itkIndex3 & inputIndex, itkImageRegion3 & outputRegion, itkImageRegion3 & inputRegion, int * oddRegionArray);
     int RegionIsOdd(long base, long test, long size);
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkMirrorPadImageFilterIUL3IUL3_Pointer {
   public:
     itkMirrorPadImageFilterIUL3IUL3_Pointer();
     itkMirrorPadImageFilterIUL3IUL3_Pointer(itkMirrorPadImageFilterIUL3IUL3_Pointer const & p);
     itkMirrorPadImageFilterIUL3IUL3_Pointer(itkMirrorPadImageFilterIUL3IUL3 * p);
     ~itkMirrorPadImageFilterIUL3IUL3_Pointer();
     itkMirrorPadImageFilterIUL3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMirrorPadImageFilterIUL3IUL3 * GetPointer() const;
     bool operator<(itkMirrorPadImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>(itkMirrorPadImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator<=(itkMirrorPadImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>=(itkMirrorPadImageFilterIUL3IUL3_Pointer const & r) const;
     itkMirrorPadImageFilterIUL3IUL3_Pointer & operator=(itkMirrorPadImageFilterIUL3IUL3_Pointer const & r);
     itkMirrorPadImageFilterIUL3IUL3_Pointer & operator=(itkMirrorPadImageFilterIUL3IUL3 * r);
     itkMirrorPadImageFilterIUL3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMirrorPadImageFilterIUS2IUS2 : public itkConstantPadImageFilterIUS2IUS2_Superclass {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkMirrorPadImageFilterIUS2IUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkMirrorPadImageFilterIUS2IUS2(itkMirrorPadImageFilterIUS2IUS2 const & arg0);
     void operator=(itkMirrorPadImageFilterIUS2IUS2 const & arg0);
   protected:
     itkMirrorPadImageFilterIUS2IUS2();
     ~itkMirrorPadImageFilterIUS2IUS2();
     void ConvertOutputIndexToInputIndex(itkIndex2 & outputIndex, itkIndex2 & inputIndex, itkImageRegion2 & outputRegion, itkImageRegion2 & inputRegion, int * oddRegionArray);
     int RegionIsOdd(long base, long test, long size);
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkMirrorPadImageFilterIUS2IUS2_Pointer {
   public:
     itkMirrorPadImageFilterIUS2IUS2_Pointer();
     itkMirrorPadImageFilterIUS2IUS2_Pointer(itkMirrorPadImageFilterIUS2IUS2_Pointer const & p);
     itkMirrorPadImageFilterIUS2IUS2_Pointer(itkMirrorPadImageFilterIUS2IUS2 * p);
     ~itkMirrorPadImageFilterIUS2IUS2_Pointer();
     itkMirrorPadImageFilterIUS2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMirrorPadImageFilterIUS2IUS2 * GetPointer() const;
     bool operator<(itkMirrorPadImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>(itkMirrorPadImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator<=(itkMirrorPadImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>=(itkMirrorPadImageFilterIUS2IUS2_Pointer const & r) const;
     itkMirrorPadImageFilterIUS2IUS2_Pointer & operator=(itkMirrorPadImageFilterIUS2IUS2_Pointer const & r);
     itkMirrorPadImageFilterIUS2IUS2_Pointer & operator=(itkMirrorPadImageFilterIUS2IUS2 * r);
     itkMirrorPadImageFilterIUS2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMirrorPadImageFilterIUS3IUS3 : public itkConstantPadImageFilterIUS3IUS3_Superclass {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkMirrorPadImageFilterIUS3IUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkMirrorPadImageFilterIUS3IUS3(itkMirrorPadImageFilterIUS3IUS3 const & arg0);
     void operator=(itkMirrorPadImageFilterIUS3IUS3 const & arg0);
   protected:
     itkMirrorPadImageFilterIUS3IUS3();
     ~itkMirrorPadImageFilterIUS3IUS3();
     void ConvertOutputIndexToInputIndex(itkIndex3 & outputIndex, itkIndex3 & inputIndex, itkImageRegion3 & outputRegion, itkImageRegion3 & inputRegion, int * oddRegionArray);
     int RegionIsOdd(long base, long test, long size);
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkMirrorPadImageFilterIUS3IUS3_Pointer {
   public:
     itkMirrorPadImageFilterIUS3IUS3_Pointer();
     itkMirrorPadImageFilterIUS3IUS3_Pointer(itkMirrorPadImageFilterIUS3IUS3_Pointer const & p);
     itkMirrorPadImageFilterIUS3IUS3_Pointer(itkMirrorPadImageFilterIUS3IUS3 * p);
     ~itkMirrorPadImageFilterIUS3IUS3_Pointer();
     itkMirrorPadImageFilterIUS3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMirrorPadImageFilterIUS3IUS3 * GetPointer() const;
     bool operator<(itkMirrorPadImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>(itkMirrorPadImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator<=(itkMirrorPadImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>=(itkMirrorPadImageFilterIUS3IUS3_Pointer const & r) const;
     itkMirrorPadImageFilterIUS3IUS3_Pointer & operator=(itkMirrorPadImageFilterIUS3IUS3_Pointer const & r);
     itkMirrorPadImageFilterIUS3IUS3_Pointer & operator=(itkMirrorPadImageFilterIUS3IUS3 * r);
     itkMirrorPadImageFilterIUS3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMirrorPadImageFilterIVF22IVF22 : public itkConstantPadImageFilterIVF22IVF22_Superclass {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkMirrorPadImageFilterIVF22IVF22_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkMirrorPadImageFilterIVF22IVF22(itkMirrorPadImageFilterIVF22IVF22 const & arg0);
     void operator=(itkMirrorPadImageFilterIVF22IVF22 const & arg0);
   protected:
     itkMirrorPadImageFilterIVF22IVF22();
     ~itkMirrorPadImageFilterIVF22IVF22();
     void ConvertOutputIndexToInputIndex(itkIndex2 & outputIndex, itkIndex2 & inputIndex, itkImageRegion2 & outputRegion, itkImageRegion2 & inputRegion, int * oddRegionArray);
     int RegionIsOdd(long base, long test, long size);
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion2 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkMirrorPadImageFilterIVF22IVF22_Pointer {
   public:
     itkMirrorPadImageFilterIVF22IVF22_Pointer();
     itkMirrorPadImageFilterIVF22IVF22_Pointer(itkMirrorPadImageFilterIVF22IVF22_Pointer const & p);
     itkMirrorPadImageFilterIVF22IVF22_Pointer(itkMirrorPadImageFilterIVF22IVF22 * p);
     ~itkMirrorPadImageFilterIVF22IVF22_Pointer();
     itkMirrorPadImageFilterIVF22IVF22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMirrorPadImageFilterIVF22IVF22 * GetPointer() const;
     bool operator<(itkMirrorPadImageFilterIVF22IVF22_Pointer const & r) const;
     bool operator>(itkMirrorPadImageFilterIVF22IVF22_Pointer const & r) const;
     bool operator<=(itkMirrorPadImageFilterIVF22IVF22_Pointer const & r) const;
     bool operator>=(itkMirrorPadImageFilterIVF22IVF22_Pointer const & r) const;
     itkMirrorPadImageFilterIVF22IVF22_Pointer & operator=(itkMirrorPadImageFilterIVF22IVF22_Pointer const & r);
     itkMirrorPadImageFilterIVF22IVF22_Pointer & operator=(itkMirrorPadImageFilterIVF22IVF22 * r);
     itkMirrorPadImageFilterIVF22IVF22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMirrorPadImageFilterIVF33IVF33 : public itkConstantPadImageFilterIVF33IVF33_Superclass {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkMirrorPadImageFilterIVF33IVF33_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkMirrorPadImageFilterIVF33IVF33(itkMirrorPadImageFilterIVF33IVF33 const & arg0);
     void operator=(itkMirrorPadImageFilterIVF33IVF33 const & arg0);
   protected:
     itkMirrorPadImageFilterIVF33IVF33();
     ~itkMirrorPadImageFilterIVF33IVF33();
     void ConvertOutputIndexToInputIndex(itkIndex3 & outputIndex, itkIndex3 & inputIndex, itkImageRegion3 & outputRegion, itkImageRegion3 & inputRegion, int * oddRegionArray);
     int RegionIsOdd(long base, long test, long size);
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     int GenerateNextInputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int GenerateNextOutputRegion(long * regIndices, long * regLimit, std::vector< long > * indices, std::vector< long > * sizes, itkImageRegion3 & outputRegion);
     int FindRegionsInArea(long start, long end, long size, long offset);
     int BuildInterRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPreRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     int BuildPostRegions(std::vector< long > & inputRegionStart, std::vector< long > & outputRegionStart, std::vector< long > & inputRegionSizes, std::vector< long > & outputRegionSizes, long inputIndex, long outputIndex, long inputSize, long outputSize, int numRegs, int & regCtr);
     virtual void GenerateInputRequestedRegion();
 };


 class itkMirrorPadImageFilterIVF33IVF33_Pointer {
   public:
     itkMirrorPadImageFilterIVF33IVF33_Pointer();
     itkMirrorPadImageFilterIVF33IVF33_Pointer(itkMirrorPadImageFilterIVF33IVF33_Pointer const & p);
     itkMirrorPadImageFilterIVF33IVF33_Pointer(itkMirrorPadImageFilterIVF33IVF33 * p);
     ~itkMirrorPadImageFilterIVF33IVF33_Pointer();
     itkMirrorPadImageFilterIVF33IVF33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMirrorPadImageFilterIVF33IVF33 * GetPointer() const;
     bool operator<(itkMirrorPadImageFilterIVF33IVF33_Pointer const & r) const;
     bool operator>(itkMirrorPadImageFilterIVF33IVF33_Pointer const & r) const;
     bool operator<=(itkMirrorPadImageFilterIVF33IVF33_Pointer const & r) const;
     bool operator>=(itkMirrorPadImageFilterIVF33IVF33_Pointer const & r) const;
     itkMirrorPadImageFilterIVF33IVF33_Pointer & operator=(itkMirrorPadImageFilterIVF33IVF33_Pointer const & r);
     itkMirrorPadImageFilterIVF33IVF33_Pointer & operator=(itkMirrorPadImageFilterIVF33IVF33 * r);
     itkMirrorPadImageFilterIVF33IVF33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


