// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module vnl_vector_refChicken
#endif
#ifdef SWIGCSHARP
%module vnl_vector_refCsharp
#endif
#ifdef SWIGGUILE
%module vnl_vector_refGuile
#endif
#ifdef SWIGJAVA
%module vnl_vector_refJava
#endif
#ifdef SWIGLUA
%module vnl_vector_refLua
#endif
#ifdef SWIGMODULA3
%module vnl_vector_refModula3
#endif
#ifdef SWIGMZSCHEME
%module vnl_vector_refMzscheme
#endif
#ifdef SWIGOCAML
%module vnl_vector_refOcaml
#endif
#ifdef SWIGPERL
%module vnl_vector_refPerl
#endif
#ifdef SWIGPERL5
%module vnl_vector_refPerl5
#endif
#ifdef SWIGPHP
%module vnl_vector_refPhp
#endif
#ifdef SWIGPHP4
%module vnl_vector_refPhp4
#endif
#ifdef SWIGPHP5
%module vnl_vector_refPhp5
#endif
#ifdef SWIGPIKE
%module vnl_vector_refPike
#endif
#ifdef SWIGPYTHON
%module vnl_vector_refPython
#endif
#ifdef SWIGR
%module vnl_vector_refR
#endif
#ifdef SWIGRUBY
%module vnl_vector_refRuby
#endif
#ifdef SWIGSEXP
%module vnl_vector_refSexp
#endif
#ifdef SWIGTCL
%module vnl_vector_refTcl
#endif
#ifdef SWIGXML
%module vnl_vector_refXml
#endif

%{
#include "VXLNumerics.includes"
%}


%{
%}




%import wrap_vcl_complex.i
%import wrap_vnl_vector.i


%include itk.i
%include wrap_vnl_vector_ref_ext.i


 class vnl_vector_refD : public vnl_vectorD {
   public:
     vnl_vector_refD & operator=(vnl_vector_refD const & arg0);
     vnl_vector_refD(unsigned int n, double * space);
     vnl_vector_refD(vnl_vector_refD const & v);
     ~vnl_vector_refD();
     vnl_vector_refD & non_const();
   private:
     vnl_vector_refD(vnl_vectorD const & arg0);
   protected:
 };


 class vnl_vector_refF : public vnl_vectorF {
   public:
     vnl_vector_refF & operator=(vnl_vector_refF const & arg0);
     vnl_vector_refF(unsigned int n, float * space);
     vnl_vector_refF(vnl_vector_refF const & v);
     ~vnl_vector_refF();
     vnl_vector_refF & non_const();
   private:
     vnl_vector_refF(vnl_vectorF const & arg0);
   protected:
 };


 class vnl_vector_refLD : public vnl_vectorLD {
   public:
     vnl_vector_refLD & operator=(vnl_vector_refLD const & arg0);
     vnl_vector_refLD(unsigned int n, long double * space);
     vnl_vector_refLD(vnl_vector_refLD const & v);
     ~vnl_vector_refLD();
     vnl_vector_refLD & non_const();
   private:
     vnl_vector_refLD(vnl_vectorLD const & arg0);
   protected:
 };


 class vnl_vector_refSC : public vnl_vectorSC {
   public:
     vnl_vector_refSC & operator=(vnl_vector_refSC const & arg0);
     vnl_vector_refSC(unsigned int n, signed char * space);
     vnl_vector_refSC(vnl_vector_refSC const & v);
     ~vnl_vector_refSC();
     vnl_vector_refSC & non_const();
   private:
     vnl_vector_refSC(vnl_vectorSC const & arg0);
   protected:
 };


 class vnl_vector_refSI : public vnl_vectorSI {
   public:
     vnl_vector_refSI & operator=(vnl_vector_refSI const & arg0);
     vnl_vector_refSI(unsigned int n, int * space);
     vnl_vector_refSI(vnl_vector_refSI const & v);
     ~vnl_vector_refSI();
     vnl_vector_refSI & non_const();
   private:
     vnl_vector_refSI(vnl_vectorSI const & arg0);
   protected:
 };


 class vnl_vector_refSL : public vnl_vectorSL {
   public:
     vnl_vector_refSL & operator=(vnl_vector_refSL const & arg0);
     vnl_vector_refSL(unsigned int n, long * space);
     vnl_vector_refSL(vnl_vector_refSL const & v);
     ~vnl_vector_refSL();
     vnl_vector_refSL & non_const();
   private:
     vnl_vector_refSL(vnl_vectorSL const & arg0);
   protected:
 };


 class vnl_vector_refUC : public vnl_vectorUC {
   public:
     vnl_vector_refUC & operator=(vnl_vector_refUC const & arg0);
     vnl_vector_refUC(unsigned int n, unsigned char * space);
     vnl_vector_refUC(vnl_vector_refUC const & v);
     ~vnl_vector_refUC();
     vnl_vector_refUC & non_const();
   private:
     vnl_vector_refUC(vnl_vectorUC const & arg0);
   protected:
 };


 class vnl_vector_refUI : public vnl_vectorUI {
   public:
     vnl_vector_refUI & operator=(vnl_vector_refUI const & arg0);
     vnl_vector_refUI(unsigned int n, unsigned int * space);
     vnl_vector_refUI(vnl_vector_refUI const & v);
     ~vnl_vector_refUI();
     vnl_vector_refUI & non_const();
   private:
     vnl_vector_refUI(vnl_vectorUI const & arg0);
   protected:
 };


 class vnl_vector_refUL : public vnl_vectorUL {
   public:
     vnl_vector_refUL & operator=(vnl_vector_refUL const & arg0);
     vnl_vector_refUL(unsigned int n, unsigned long * space);
     vnl_vector_refUL(vnl_vector_refUL const & v);
     ~vnl_vector_refUL();
     vnl_vector_refUL & non_const();
   private:
     vnl_vector_refUL(vnl_vectorUL const & arg0);
   protected:
 };


 class vnl_vector_refUS : public vnl_vectorUS {
   public:
     vnl_vector_refUS & operator=(vnl_vector_refUS const & arg0);
     vnl_vector_refUS(unsigned int n, unsigned short * space);
     vnl_vector_refUS(vnl_vector_refUS const & v);
     ~vnl_vector_refUS();
     vnl_vector_refUS & non_const();
   private:
     vnl_vector_refUS(vnl_vectorUS const & arg0);
   protected:
 };


 class vnl_vector_ref_vcl_complexD : public vnl_vector_vcl_complexD {
   public:
     vnl_vector_ref_vcl_complexD & operator=(vnl_vector_ref_vcl_complexD const & arg0);
     vnl_vector_ref_vcl_complexD(unsigned int n, vcl_complexD * space);
     vnl_vector_ref_vcl_complexD(vnl_vector_ref_vcl_complexD const & v);
     ~vnl_vector_ref_vcl_complexD();
     vnl_vector_ref_vcl_complexD & non_const();
   private:
     vnl_vector_ref_vcl_complexD(vnl_vector_vcl_complexD const & arg0);
   protected:
 };


 class vnl_vector_ref_vcl_complexF : public vnl_vector_vcl_complexF {
   public:
     vnl_vector_ref_vcl_complexF & operator=(vnl_vector_ref_vcl_complexF const & arg0);
     vnl_vector_ref_vcl_complexF(unsigned int n, vcl_complexF * space);
     vnl_vector_ref_vcl_complexF(vnl_vector_ref_vcl_complexF const & v);
     ~vnl_vector_ref_vcl_complexF();
     vnl_vector_ref_vcl_complexF & non_const();
   private:
     vnl_vector_ref_vcl_complexF(vnl_vector_vcl_complexF const & arg0);
   protected:
 };


 class vnl_vector_ref_vcl_complexLD : public vnl_vector_vcl_complexLD {
   public:
     vnl_vector_ref_vcl_complexLD & operator=(vnl_vector_ref_vcl_complexLD const & arg0);
     vnl_vector_ref_vcl_complexLD(unsigned int n, vcl_complexLD * space);
     vnl_vector_ref_vcl_complexLD(vnl_vector_ref_vcl_complexLD const & v);
     ~vnl_vector_ref_vcl_complexLD();
     vnl_vector_ref_vcl_complexLD & non_const();
   private:
     vnl_vector_ref_vcl_complexLD(vnl_vector_vcl_complexLD const & arg0);
   protected:
 };


