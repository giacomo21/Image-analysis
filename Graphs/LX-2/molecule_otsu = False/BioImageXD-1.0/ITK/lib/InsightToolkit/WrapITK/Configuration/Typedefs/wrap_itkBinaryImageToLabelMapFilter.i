// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkBinaryImageToLabelMapFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkBinaryImageToLabelMapFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkBinaryImageToLabelMapFilterGuile
#endif
#ifdef SWIGJAVA
%module itkBinaryImageToLabelMapFilterJava
#endif
#ifdef SWIGLUA
%module itkBinaryImageToLabelMapFilterLua
#endif
#ifdef SWIGMODULA3
%module itkBinaryImageToLabelMapFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkBinaryImageToLabelMapFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkBinaryImageToLabelMapFilterOcaml
#endif
#ifdef SWIGPERL
%module itkBinaryImageToLabelMapFilterPerl
#endif
#ifdef SWIGPERL5
%module itkBinaryImageToLabelMapFilterPerl5
#endif
#ifdef SWIGPHP
%module itkBinaryImageToLabelMapFilterPhp
#endif
#ifdef SWIGPHP4
%module itkBinaryImageToLabelMapFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkBinaryImageToLabelMapFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkBinaryImageToLabelMapFilterPike
#endif
#ifdef SWIGPYTHON
%module itkBinaryImageToLabelMapFilterPython
#endif
#ifdef SWIGR
%module itkBinaryImageToLabelMapFilterR
#endif
#ifdef SWIGRUBY
%module itkBinaryImageToLabelMapFilterRuby
#endif
#ifdef SWIGSEXP
%module itkBinaryImageToLabelMapFilterSexp
#endif
#ifdef SWIGTCL
%module itkBinaryImageToLabelMapFilterTcl
#endif
#ifdef SWIGXML
%module itkBinaryImageToLabelMapFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
#include "Numerics.includes"
#include "BinaryMorphology.includes"
%}


%{
%}




%import wrap_ITKLabelMapBase.i
%import wrap_ITKRegions.i
%import wrap_ITKCommonBase.i
%import wrap_itkIndex.i


%include itk.i
%include wrap_itkBinaryImageToLabelMapFilter_ext.i


 class itkBinaryImageToLabelMapFilterIUC2LM2 : public itkImageToImageFilterIUC2LM2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  InputImageDimension = 2 };
     enum  {  SameDimension = 1 };
     static itkBinaryImageToLabelMapFilterIUC2LM2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetFullyConnected(bool const _arg);
     virtual bool const & GetFullyConnected() const;
     virtual void FullyConnectedOn();
     virtual void FullyConnectedOff();
     virtual unsigned long const & GetNumberOfObjects() const;
     virtual void SetOutputBackgroundValue(unsigned long const _arg);
     virtual unsigned long GetOutputBackgroundValue() const;
     virtual void SetInputForegroundValue(unsigned char const _arg);
     virtual unsigned char GetInputForegroundValue() const;
   private:
     itkBinaryImageToLabelMapFilterIUC2LM2(itkBinaryImageToLabelMapFilterIUC2LM2 const & arg0);
     void operator=(itkBinaryImageToLabelMapFilterIUC2LM2 const & arg0);
     void InitUnion(unsigned long const size);
     void InsertSet(unsigned long const label);
     unsigned long LookupSet(unsigned long const label);
     void LinkLabels(unsigned long const lab1, unsigned long const lab2);
     unsigned long CreateConsecutive();
     bool CheckNeighbors(itkIndex2 const & A, itkIndex2 const & B);
     void CompareLines(std::vector< itkBinaryImageToLabelMapFilterIUC2LM2::runLength > & current, std::vector< itkBinaryImageToLabelMapFilterIUC2LM2::runLength > const & Neighbour);
     void FillOutput(std::vector< std::vector< itkBinaryImageToLabelMapFilterIUC2LM2::runLength > > const & LineMap, itkProgressReporter & progress);
     void SetupLineOffsets(std::vector< long > & LineOffsets);
     void Wait();
   protected:
     itkBinaryImageToLabelMapFilterIUC2LM2();
     ~itkBinaryImageToLabelMapFilterIUC2LM2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void GenerateInputRequestedRegion();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * arg0);
 };


 class itkBinaryImageToLabelMapFilterIUC2LM2_Pointer {
   public:
     itkBinaryImageToLabelMapFilterIUC2LM2_Pointer();
     itkBinaryImageToLabelMapFilterIUC2LM2_Pointer(itkBinaryImageToLabelMapFilterIUC2LM2_Pointer const & p);
     itkBinaryImageToLabelMapFilterIUC2LM2_Pointer(itkBinaryImageToLabelMapFilterIUC2LM2 * p);
     ~itkBinaryImageToLabelMapFilterIUC2LM2_Pointer();
     itkBinaryImageToLabelMapFilterIUC2LM2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryImageToLabelMapFilterIUC2LM2 * GetPointer() const;
     bool operator<(itkBinaryImageToLabelMapFilterIUC2LM2_Pointer const & r) const;
     bool operator>(itkBinaryImageToLabelMapFilterIUC2LM2_Pointer const & r) const;
     bool operator<=(itkBinaryImageToLabelMapFilterIUC2LM2_Pointer const & r) const;
     bool operator>=(itkBinaryImageToLabelMapFilterIUC2LM2_Pointer const & r) const;
     itkBinaryImageToLabelMapFilterIUC2LM2_Pointer & operator=(itkBinaryImageToLabelMapFilterIUC2LM2_Pointer const & r);
     itkBinaryImageToLabelMapFilterIUC2LM2_Pointer & operator=(itkBinaryImageToLabelMapFilterIUC2LM2 * r);
     itkBinaryImageToLabelMapFilterIUC2LM2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryImageToLabelMapFilterIUC3LM3 : public itkImageToImageFilterIUC3LM3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  InputImageDimension = 3 };
     enum  {  SameDimension = 1 };
     static itkBinaryImageToLabelMapFilterIUC3LM3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetFullyConnected(bool const _arg);
     virtual bool const & GetFullyConnected() const;
     virtual void FullyConnectedOn();
     virtual void FullyConnectedOff();
     virtual unsigned long const & GetNumberOfObjects() const;
     virtual void SetOutputBackgroundValue(unsigned long const _arg);
     virtual unsigned long GetOutputBackgroundValue() const;
     virtual void SetInputForegroundValue(unsigned char const _arg);
     virtual unsigned char GetInputForegroundValue() const;
   private:
     itkBinaryImageToLabelMapFilterIUC3LM3(itkBinaryImageToLabelMapFilterIUC3LM3 const & arg0);
     void operator=(itkBinaryImageToLabelMapFilterIUC3LM3 const & arg0);
     void InitUnion(unsigned long const size);
     void InsertSet(unsigned long const label);
     unsigned long LookupSet(unsigned long const label);
     void LinkLabels(unsigned long const lab1, unsigned long const lab2);
     unsigned long CreateConsecutive();
     bool CheckNeighbors(itkIndex3 const & A, itkIndex3 const & B);
     void CompareLines(std::vector< itkBinaryImageToLabelMapFilterIUC3LM3::runLength > & current, std::vector< itkBinaryImageToLabelMapFilterIUC3LM3::runLength > const & Neighbour);
     void FillOutput(std::vector< std::vector< itkBinaryImageToLabelMapFilterIUC3LM3::runLength > > const & LineMap, itkProgressReporter & progress);
     void SetupLineOffsets(std::vector< long > & LineOffsets);
     void Wait();
   protected:
     itkBinaryImageToLabelMapFilterIUC3LM3();
     ~itkBinaryImageToLabelMapFilterIUC3LM3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void GenerateInputRequestedRegion();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * arg0);
 };


 class itkBinaryImageToLabelMapFilterIUC3LM3_Pointer {
   public:
     itkBinaryImageToLabelMapFilterIUC3LM3_Pointer();
     itkBinaryImageToLabelMapFilterIUC3LM3_Pointer(itkBinaryImageToLabelMapFilterIUC3LM3_Pointer const & p);
     itkBinaryImageToLabelMapFilterIUC3LM3_Pointer(itkBinaryImageToLabelMapFilterIUC3LM3 * p);
     ~itkBinaryImageToLabelMapFilterIUC3LM3_Pointer();
     itkBinaryImageToLabelMapFilterIUC3LM3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryImageToLabelMapFilterIUC3LM3 * GetPointer() const;
     bool operator<(itkBinaryImageToLabelMapFilterIUC3LM3_Pointer const & r) const;
     bool operator>(itkBinaryImageToLabelMapFilterIUC3LM3_Pointer const & r) const;
     bool operator<=(itkBinaryImageToLabelMapFilterIUC3LM3_Pointer const & r) const;
     bool operator>=(itkBinaryImageToLabelMapFilterIUC3LM3_Pointer const & r) const;
     itkBinaryImageToLabelMapFilterIUC3LM3_Pointer & operator=(itkBinaryImageToLabelMapFilterIUC3LM3_Pointer const & r);
     itkBinaryImageToLabelMapFilterIUC3LM3_Pointer & operator=(itkBinaryImageToLabelMapFilterIUC3LM3 * r);
     itkBinaryImageToLabelMapFilterIUC3LM3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryImageToLabelMapFilterIUL2LM2 : public itkImageToImageFilterIUL2LM2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  InputImageDimension = 2 };
     enum  {  SameDimension = 1 };
     static itkBinaryImageToLabelMapFilterIUL2LM2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetFullyConnected(bool const _arg);
     virtual bool const & GetFullyConnected() const;
     virtual void FullyConnectedOn();
     virtual void FullyConnectedOff();
     virtual unsigned long const & GetNumberOfObjects() const;
     virtual void SetOutputBackgroundValue(unsigned long const _arg);
     virtual unsigned long GetOutputBackgroundValue() const;
     virtual void SetInputForegroundValue(unsigned long const _arg);
     virtual unsigned long GetInputForegroundValue() const;
   private:
     itkBinaryImageToLabelMapFilterIUL2LM2(itkBinaryImageToLabelMapFilterIUL2LM2 const & arg0);
     void operator=(itkBinaryImageToLabelMapFilterIUL2LM2 const & arg0);
     void InitUnion(unsigned long const size);
     void InsertSet(unsigned long const label);
     unsigned long LookupSet(unsigned long const label);
     void LinkLabels(unsigned long const lab1, unsigned long const lab2);
     unsigned long CreateConsecutive();
     bool CheckNeighbors(itkIndex2 const & A, itkIndex2 const & B);
     void CompareLines(std::vector< itkBinaryImageToLabelMapFilterIUL2LM2::runLength > & current, std::vector< itkBinaryImageToLabelMapFilterIUL2LM2::runLength > const & Neighbour);
     void FillOutput(std::vector< std::vector< itkBinaryImageToLabelMapFilterIUL2LM2::runLength > > const & LineMap, itkProgressReporter & progress);
     void SetupLineOffsets(std::vector< long > & LineOffsets);
     void Wait();
   protected:
     itkBinaryImageToLabelMapFilterIUL2LM2();
     ~itkBinaryImageToLabelMapFilterIUL2LM2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void GenerateInputRequestedRegion();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * arg0);
 };


 class itkBinaryImageToLabelMapFilterIUL2LM2_Pointer {
   public:
     itkBinaryImageToLabelMapFilterIUL2LM2_Pointer();
     itkBinaryImageToLabelMapFilterIUL2LM2_Pointer(itkBinaryImageToLabelMapFilterIUL2LM2_Pointer const & p);
     itkBinaryImageToLabelMapFilterIUL2LM2_Pointer(itkBinaryImageToLabelMapFilterIUL2LM2 * p);
     ~itkBinaryImageToLabelMapFilterIUL2LM2_Pointer();
     itkBinaryImageToLabelMapFilterIUL2LM2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryImageToLabelMapFilterIUL2LM2 * GetPointer() const;
     bool operator<(itkBinaryImageToLabelMapFilterIUL2LM2_Pointer const & r) const;
     bool operator>(itkBinaryImageToLabelMapFilterIUL2LM2_Pointer const & r) const;
     bool operator<=(itkBinaryImageToLabelMapFilterIUL2LM2_Pointer const & r) const;
     bool operator>=(itkBinaryImageToLabelMapFilterIUL2LM2_Pointer const & r) const;
     itkBinaryImageToLabelMapFilterIUL2LM2_Pointer & operator=(itkBinaryImageToLabelMapFilterIUL2LM2_Pointer const & r);
     itkBinaryImageToLabelMapFilterIUL2LM2_Pointer & operator=(itkBinaryImageToLabelMapFilterIUL2LM2 * r);
     itkBinaryImageToLabelMapFilterIUL2LM2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryImageToLabelMapFilterIUL3LM3 : public itkImageToImageFilterIUL3LM3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  InputImageDimension = 3 };
     enum  {  SameDimension = 1 };
     static itkBinaryImageToLabelMapFilterIUL3LM3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetFullyConnected(bool const _arg);
     virtual bool const & GetFullyConnected() const;
     virtual void FullyConnectedOn();
     virtual void FullyConnectedOff();
     virtual unsigned long const & GetNumberOfObjects() const;
     virtual void SetOutputBackgroundValue(unsigned long const _arg);
     virtual unsigned long GetOutputBackgroundValue() const;
     virtual void SetInputForegroundValue(unsigned long const _arg);
     virtual unsigned long GetInputForegroundValue() const;
   private:
     itkBinaryImageToLabelMapFilterIUL3LM3(itkBinaryImageToLabelMapFilterIUL3LM3 const & arg0);
     void operator=(itkBinaryImageToLabelMapFilterIUL3LM3 const & arg0);
     void InitUnion(unsigned long const size);
     void InsertSet(unsigned long const label);
     unsigned long LookupSet(unsigned long const label);
     void LinkLabels(unsigned long const lab1, unsigned long const lab2);
     unsigned long CreateConsecutive();
     bool CheckNeighbors(itkIndex3 const & A, itkIndex3 const & B);
     void CompareLines(std::vector< itkBinaryImageToLabelMapFilterIUL3LM3::runLength > & current, std::vector< itkBinaryImageToLabelMapFilterIUL3LM3::runLength > const & Neighbour);
     void FillOutput(std::vector< std::vector< itkBinaryImageToLabelMapFilterIUL3LM3::runLength > > const & LineMap, itkProgressReporter & progress);
     void SetupLineOffsets(std::vector< long > & LineOffsets);
     void Wait();
   protected:
     itkBinaryImageToLabelMapFilterIUL3LM3();
     ~itkBinaryImageToLabelMapFilterIUL3LM3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void GenerateInputRequestedRegion();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * arg0);
 };


 class itkBinaryImageToLabelMapFilterIUL3LM3_Pointer {
   public:
     itkBinaryImageToLabelMapFilterIUL3LM3_Pointer();
     itkBinaryImageToLabelMapFilterIUL3LM3_Pointer(itkBinaryImageToLabelMapFilterIUL3LM3_Pointer const & p);
     itkBinaryImageToLabelMapFilterIUL3LM3_Pointer(itkBinaryImageToLabelMapFilterIUL3LM3 * p);
     ~itkBinaryImageToLabelMapFilterIUL3LM3_Pointer();
     itkBinaryImageToLabelMapFilterIUL3LM3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryImageToLabelMapFilterIUL3LM3 * GetPointer() const;
     bool operator<(itkBinaryImageToLabelMapFilterIUL3LM3_Pointer const & r) const;
     bool operator>(itkBinaryImageToLabelMapFilterIUL3LM3_Pointer const & r) const;
     bool operator<=(itkBinaryImageToLabelMapFilterIUL3LM3_Pointer const & r) const;
     bool operator>=(itkBinaryImageToLabelMapFilterIUL3LM3_Pointer const & r) const;
     itkBinaryImageToLabelMapFilterIUL3LM3_Pointer & operator=(itkBinaryImageToLabelMapFilterIUL3LM3_Pointer const & r);
     itkBinaryImageToLabelMapFilterIUL3LM3_Pointer & operator=(itkBinaryImageToLabelMapFilterIUL3LM3 * r);
     itkBinaryImageToLabelMapFilterIUL3LM3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryImageToLabelMapFilterIUS2LM2 : public itkImageToImageFilterIUS2LM2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  InputImageDimension = 2 };
     enum  {  SameDimension = 1 };
     static itkBinaryImageToLabelMapFilterIUS2LM2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetFullyConnected(bool const _arg);
     virtual bool const & GetFullyConnected() const;
     virtual void FullyConnectedOn();
     virtual void FullyConnectedOff();
     virtual unsigned long const & GetNumberOfObjects() const;
     virtual void SetOutputBackgroundValue(unsigned long const _arg);
     virtual unsigned long GetOutputBackgroundValue() const;
     virtual void SetInputForegroundValue(unsigned short const _arg);
     virtual unsigned short GetInputForegroundValue() const;
   private:
     itkBinaryImageToLabelMapFilterIUS2LM2(itkBinaryImageToLabelMapFilterIUS2LM2 const & arg0);
     void operator=(itkBinaryImageToLabelMapFilterIUS2LM2 const & arg0);
     void InitUnion(unsigned long const size);
     void InsertSet(unsigned long const label);
     unsigned long LookupSet(unsigned long const label);
     void LinkLabels(unsigned long const lab1, unsigned long const lab2);
     unsigned long CreateConsecutive();
     bool CheckNeighbors(itkIndex2 const & A, itkIndex2 const & B);
     void CompareLines(std::vector< itkBinaryImageToLabelMapFilterIUS2LM2::runLength > & current, std::vector< itkBinaryImageToLabelMapFilterIUS2LM2::runLength > const & Neighbour);
     void FillOutput(std::vector< std::vector< itkBinaryImageToLabelMapFilterIUS2LM2::runLength > > const & LineMap, itkProgressReporter & progress);
     void SetupLineOffsets(std::vector< long > & LineOffsets);
     void Wait();
   protected:
     itkBinaryImageToLabelMapFilterIUS2LM2();
     ~itkBinaryImageToLabelMapFilterIUS2LM2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void GenerateInputRequestedRegion();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * arg0);
 };


 class itkBinaryImageToLabelMapFilterIUS2LM2_Pointer {
   public:
     itkBinaryImageToLabelMapFilterIUS2LM2_Pointer();
     itkBinaryImageToLabelMapFilterIUS2LM2_Pointer(itkBinaryImageToLabelMapFilterIUS2LM2_Pointer const & p);
     itkBinaryImageToLabelMapFilterIUS2LM2_Pointer(itkBinaryImageToLabelMapFilterIUS2LM2 * p);
     ~itkBinaryImageToLabelMapFilterIUS2LM2_Pointer();
     itkBinaryImageToLabelMapFilterIUS2LM2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryImageToLabelMapFilterIUS2LM2 * GetPointer() const;
     bool operator<(itkBinaryImageToLabelMapFilterIUS2LM2_Pointer const & r) const;
     bool operator>(itkBinaryImageToLabelMapFilterIUS2LM2_Pointer const & r) const;
     bool operator<=(itkBinaryImageToLabelMapFilterIUS2LM2_Pointer const & r) const;
     bool operator>=(itkBinaryImageToLabelMapFilterIUS2LM2_Pointer const & r) const;
     itkBinaryImageToLabelMapFilterIUS2LM2_Pointer & operator=(itkBinaryImageToLabelMapFilterIUS2LM2_Pointer const & r);
     itkBinaryImageToLabelMapFilterIUS2LM2_Pointer & operator=(itkBinaryImageToLabelMapFilterIUS2LM2 * r);
     itkBinaryImageToLabelMapFilterIUS2LM2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryImageToLabelMapFilterIUS3LM3 : public itkImageToImageFilterIUS3LM3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  InputImageDimension = 3 };
     enum  {  SameDimension = 1 };
     static itkBinaryImageToLabelMapFilterIUS3LM3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetFullyConnected(bool const _arg);
     virtual bool const & GetFullyConnected() const;
     virtual void FullyConnectedOn();
     virtual void FullyConnectedOff();
     virtual unsigned long const & GetNumberOfObjects() const;
     virtual void SetOutputBackgroundValue(unsigned long const _arg);
     virtual unsigned long GetOutputBackgroundValue() const;
     virtual void SetInputForegroundValue(unsigned short const _arg);
     virtual unsigned short GetInputForegroundValue() const;
   private:
     itkBinaryImageToLabelMapFilterIUS3LM3(itkBinaryImageToLabelMapFilterIUS3LM3 const & arg0);
     void operator=(itkBinaryImageToLabelMapFilterIUS3LM3 const & arg0);
     void InitUnion(unsigned long const size);
     void InsertSet(unsigned long const label);
     unsigned long LookupSet(unsigned long const label);
     void LinkLabels(unsigned long const lab1, unsigned long const lab2);
     unsigned long CreateConsecutive();
     bool CheckNeighbors(itkIndex3 const & A, itkIndex3 const & B);
     void CompareLines(std::vector< itkBinaryImageToLabelMapFilterIUS3LM3::runLength > & current, std::vector< itkBinaryImageToLabelMapFilterIUS3LM3::runLength > const & Neighbour);
     void FillOutput(std::vector< std::vector< itkBinaryImageToLabelMapFilterIUS3LM3::runLength > > const & LineMap, itkProgressReporter & progress);
     void SetupLineOffsets(std::vector< long > & LineOffsets);
     void Wait();
   protected:
     itkBinaryImageToLabelMapFilterIUS3LM3();
     ~itkBinaryImageToLabelMapFilterIUS3LM3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void GenerateInputRequestedRegion();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * arg0);
 };


 class itkBinaryImageToLabelMapFilterIUS3LM3_Pointer {
   public:
     itkBinaryImageToLabelMapFilterIUS3LM3_Pointer();
     itkBinaryImageToLabelMapFilterIUS3LM3_Pointer(itkBinaryImageToLabelMapFilterIUS3LM3_Pointer const & p);
     itkBinaryImageToLabelMapFilterIUS3LM3_Pointer(itkBinaryImageToLabelMapFilterIUS3LM3 * p);
     ~itkBinaryImageToLabelMapFilterIUS3LM3_Pointer();
     itkBinaryImageToLabelMapFilterIUS3LM3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryImageToLabelMapFilterIUS3LM3 * GetPointer() const;
     bool operator<(itkBinaryImageToLabelMapFilterIUS3LM3_Pointer const & r) const;
     bool operator>(itkBinaryImageToLabelMapFilterIUS3LM3_Pointer const & r) const;
     bool operator<=(itkBinaryImageToLabelMapFilterIUS3LM3_Pointer const & r) const;
     bool operator>=(itkBinaryImageToLabelMapFilterIUS3LM3_Pointer const & r) const;
     itkBinaryImageToLabelMapFilterIUS3LM3_Pointer & operator=(itkBinaryImageToLabelMapFilterIUS3LM3_Pointer const & r);
     itkBinaryImageToLabelMapFilterIUS3LM3_Pointer & operator=(itkBinaryImageToLabelMapFilterIUS3LM3 * r);
     itkBinaryImageToLabelMapFilterIUS3LM3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


