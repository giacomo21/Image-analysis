// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkRGBPixelChicken
#endif
#ifdef SWIGCSHARP
%module itkRGBPixelCsharp
#endif
#ifdef SWIGGUILE
%module itkRGBPixelGuile
#endif
#ifdef SWIGJAVA
%module itkRGBPixelJava
#endif
#ifdef SWIGLUA
%module itkRGBPixelLua
#endif
#ifdef SWIGMODULA3
%module itkRGBPixelModula3
#endif
#ifdef SWIGMZSCHEME
%module itkRGBPixelMzscheme
#endif
#ifdef SWIGOCAML
%module itkRGBPixelOcaml
#endif
#ifdef SWIGPERL
%module itkRGBPixelPerl
#endif
#ifdef SWIGPERL5
%module itkRGBPixelPerl5
#endif
#ifdef SWIGPHP
%module itkRGBPixelPhp
#endif
#ifdef SWIGPHP4
%module itkRGBPixelPhp4
#endif
#ifdef SWIGPHP5
%module itkRGBPixelPhp5
#endif
#ifdef SWIGPIKE
%module itkRGBPixelPike
#endif
#ifdef SWIGPYTHON
%module itkRGBPixelPython
#endif
#ifdef SWIGR
%module itkRGBPixelR
#endif
#ifdef SWIGRUBY
%module itkRGBPixelRuby
#endif
#ifdef SWIGSEXP
%module itkRGBPixelSexp
#endif
#ifdef SWIGTCL
%module itkRGBPixelTcl
#endif
#ifdef SWIGXML
%module itkRGBPixelXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
%}


%{
%}




%import wrap_itkFixedArray.i


%include itk.i
%include wrap_itkRGBPixel_ext.i


 class itkRGBPixelUC : public itkFixedArrayUC3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  Length = 3 };
     ~itkRGBPixelUC();
     itkRGBPixelUC & operator=(itkRGBPixelUC const & arg0);
     itkRGBPixelUC(itkRGBPixelUC const & arg0);
     itkRGBPixelUC();
     itkRGBPixelUC(unsigned char const & r);
     itkRGBPixelUC(unsigned char const * r);
     itkRGBPixelUC & operator=(unsigned char const * r);
     itkRGBPixelUC operator+(itkRGBPixelUC const & vec) const;
     itkRGBPixelUC operator-(itkRGBPixelUC const & vec) const;
     itkRGBPixelUC const & operator+=(itkRGBPixelUC const & vec);
     itkRGBPixelUC const & operator-=(itkRGBPixelUC const & vec);
     itkRGBPixelUC operator*(unsigned char const & f) const;
     bool operator<(itkRGBPixelUC const & vec) const;
     bool operator==(itkRGBPixelUC const & vec) const;
     static unsigned int GetNumberOfComponents();
     unsigned char GetNthComponent(int c) const;
     unsigned char GetScalarValue() const;
     void SetNthComponent(int c, unsigned char const & v);
     void SetRed(unsigned char red);
     void SetGreen(unsigned char green);
     void SetBlue(unsigned char blue);
     void Set(unsigned char red, unsigned char green, unsigned char blue);
     unsigned char const & GetRed() const;
     unsigned char const & GetGreen() const;
     unsigned char const & GetBlue() const;
     unsigned char GetLuminance() const;
   private:
   protected:
 };


 class itkRGBPixelUS : public itkFixedArrayUS3 {
   public:
     enum  {  Dimension = 3 };
     enum  {  Length = 3 };
     ~itkRGBPixelUS();
     itkRGBPixelUS & operator=(itkRGBPixelUS const & arg0);
     itkRGBPixelUS(itkRGBPixelUS const & arg0);
     itkRGBPixelUS();
     itkRGBPixelUS(unsigned short const & r);
     itkRGBPixelUS(unsigned short const * r);
     itkRGBPixelUS & operator=(unsigned short const * r);
     itkRGBPixelUS operator+(itkRGBPixelUS const & vec) const;
     itkRGBPixelUS operator-(itkRGBPixelUS const & vec) const;
     itkRGBPixelUS const & operator+=(itkRGBPixelUS const & vec);
     itkRGBPixelUS const & operator-=(itkRGBPixelUS const & vec);
     itkRGBPixelUS operator*(unsigned short const & f) const;
     bool operator<(itkRGBPixelUS const & vec) const;
     bool operator==(itkRGBPixelUS const & vec) const;
     static unsigned int GetNumberOfComponents();
     unsigned short GetNthComponent(int c) const;
     unsigned short GetScalarValue() const;
     void SetNthComponent(int c, unsigned short const & v);
     void SetRed(unsigned short red);
     void SetGreen(unsigned short green);
     void SetBlue(unsigned short blue);
     void Set(unsigned short red, unsigned short green, unsigned short blue);
     unsigned short const & GetRed() const;
     unsigned short const & GetGreen() const;
     unsigned short const & GetBlue() const;
     unsigned short GetLuminance() const;
   private:
   protected:
 };


