// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module vnl_vectorChicken
#endif
#ifdef SWIGCSHARP
%module vnl_vectorCsharp
#endif
#ifdef SWIGGUILE
%module vnl_vectorGuile
#endif
#ifdef SWIGJAVA
%module vnl_vectorJava
#endif
#ifdef SWIGLUA
%module vnl_vectorLua
#endif
#ifdef SWIGMODULA3
%module vnl_vectorModula3
#endif
#ifdef SWIGMZSCHEME
%module vnl_vectorMzscheme
#endif
#ifdef SWIGOCAML
%module vnl_vectorOcaml
#endif
#ifdef SWIGPERL
%module vnl_vectorPerl
#endif
#ifdef SWIGPERL5
%module vnl_vectorPerl5
#endif
#ifdef SWIGPHP
%module vnl_vectorPhp
#endif
#ifdef SWIGPHP4
%module vnl_vectorPhp4
#endif
#ifdef SWIGPHP5
%module vnl_vectorPhp5
#endif
#ifdef SWIGPIKE
%module vnl_vectorPike
#endif
#ifdef SWIGPYTHON
%module vnl_vectorPython
#endif
#ifdef SWIGR
%module vnl_vectorR
#endif
#ifdef SWIGRUBY
%module vnl_vectorRuby
#endif
#ifdef SWIGSEXP
%module vnl_vectorSexp
#endif
#ifdef SWIGTCL
%module vnl_vectorTcl
#endif
#ifdef SWIGXML
%module vnl_vectorXml
#endif

%{
#include "VXLNumerics.includes"
%}


%{
%}




%import wrap_vcl_complex.i
%import wrap_vnl_matrix.i


%include itk.i
%include wrap_vnl_vector_ext.i


 class vnl_vectorD {
   public:
     vnl_vectorD();
     vnl_vectorD(unsigned int len);
     vnl_vectorD(unsigned int len, double const & v0);
     vnl_vectorD(unsigned int len, int n, double const * values);
     vnl_vectorD(double const * data_block, unsigned int n);
     vnl_vectorD(vnl_vectorD const & arg0);
     vnl_vectorD(vnl_vectorD const & arg0, vnl_vectorD const & arg1, vnl_tag_add arg2);
     vnl_vectorD(vnl_vectorD const & arg0, vnl_vectorD const & arg1, vnl_tag_sub arg2);
     vnl_vectorD(vnl_vectorD const & arg0, double arg1, vnl_tag_mul arg2);
     vnl_vectorD(vnl_vectorD const & arg0, double arg1, vnl_tag_div arg2);
     vnl_vectorD(vnl_vectorD const & arg0, double arg1, vnl_tag_add arg2);
     vnl_vectorD(vnl_vectorD const & arg0, double arg1, vnl_tag_sub arg2);
     vnl_vectorD(vnl_matrixD const & arg0, vnl_vectorD const & arg1, vnl_tag_mul arg2);
     vnl_vectorD(vnl_vectorD const & arg0, vnl_matrixD const & arg1, vnl_tag_mul arg2);
     vnl_vectorD(vnl_vectorD & that, vnl_tag_grab arg1);
     ~vnl_vectorD();
     unsigned int size() const;
     void put(unsigned int index, double const & value);
     double get(unsigned int index) const;
     void fill(double const & v);
     void copy_in(double const * ptr);
     void copy_out(double * arg0) const;
     void set(double const * ptr);
     double & operator()(unsigned int i);
     double const & operator()(unsigned int i) const;
     double & operator[](unsigned int i);
     double const & operator[](unsigned int i) const;
     vnl_vectorD & operator=(double const & v);
     vnl_vectorD & operator=(vnl_vectorD const & rhs);
     vnl_vectorD & operator+=(double arg0);
     vnl_vectorD & operator-=(double value);
     vnl_vectorD & operator*=(double arg0);
     vnl_vectorD & operator/=(double arg0);
     vnl_vectorD & operator+=(vnl_vectorD const & rhs);
     vnl_vectorD & operator-=(vnl_vectorD const & rhs);
     vnl_vectorD & pre_multiply(vnl_matrixD const & M);
     vnl_vectorD & post_multiply(vnl_matrixD const & M);
     vnl_vectorD & operator*=(vnl_matrixD const & m);
     vnl_vectorD operator+() const;
     vnl_vectorD operator-() const;
     vnl_vectorD operator+(double v) const;
     vnl_vectorD operator-(double v) const;
     vnl_vectorD operator*(double v) const;
     vnl_vectorD operator/(double v) const;
     vnl_vectorD operator+(vnl_vectorD const & v) const;
     vnl_vectorD operator-(vnl_vectorD const & v) const;
     vnl_vectorD operator*(vnl_matrixD const & M) const;
     double const * data_block() const;
     double * data_block();
     double * begin();
     double * end();
     double const * begin() const;
     double const * end() const;
     vnl_vectorD extract(unsigned int len, unsigned int start = 0) const;
     vnl_vectorD & update(vnl_vectorD const & arg0, unsigned int start = 0);
     double squared_magnitude() const;
     double magnitude() const;
     double one_norm() const;
     double two_norm() const;
     double inf_norm() const;
     vnl_vectorD & normalize();
     double rms() const;
     double min_value() const;
     double max_value() const;
     double mean() const;
     double sum() const;
     void flip();
     void swap(vnl_vectorD & that);
     void assert_size(unsigned int sz) const;
     void assert_finite() const;
     bool is_finite() const;
     bool is_zero() const;
     bool empty() const;
     bool operator_eq(vnl_vectorD const & v) const;
     bool operator==(vnl_vectorD const & that) const;
     bool operator!=(vnl_vectorD const & that) const;
     bool set_size(unsigned int n);
     void clear();
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     static vnl_vectorD read(std::basic_istream< char, std::char_traits< char > > & s);
   private:
   protected:
     void assert_size_internal(unsigned int sz) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


 class vnl_vectorF {
   public:
     vnl_vectorF();
     vnl_vectorF(unsigned int len);
     vnl_vectorF(unsigned int len, float const & v0);
     vnl_vectorF(unsigned int len, int n, float const * values);
     vnl_vectorF(float const * data_block, unsigned int n);
     vnl_vectorF(vnl_vectorF const & arg0);
     vnl_vectorF(vnl_vectorF const & arg0, vnl_vectorF const & arg1, vnl_tag_add arg2);
     vnl_vectorF(vnl_vectorF const & arg0, vnl_vectorF const & arg1, vnl_tag_sub arg2);
     vnl_vectorF(vnl_vectorF const & arg0, float arg1, vnl_tag_mul arg2);
     vnl_vectorF(vnl_vectorF const & arg0, float arg1, vnl_tag_div arg2);
     vnl_vectorF(vnl_vectorF const & arg0, float arg1, vnl_tag_add arg2);
     vnl_vectorF(vnl_vectorF const & arg0, float arg1, vnl_tag_sub arg2);
     vnl_vectorF(vnl_matrixF const & arg0, vnl_vectorF const & arg1, vnl_tag_mul arg2);
     vnl_vectorF(vnl_vectorF const & arg0, vnl_matrixF const & arg1, vnl_tag_mul arg2);
     vnl_vectorF(vnl_vectorF & that, vnl_tag_grab arg1);
     ~vnl_vectorF();
     unsigned int size() const;
     void put(unsigned int index, float const & value);
     float get(unsigned int index) const;
     void fill(float const & v);
     void copy_in(float const * ptr);
     void copy_out(float * arg0) const;
     void set(float const * ptr);
     float & operator()(unsigned int i);
     float const & operator()(unsigned int i) const;
     float & operator[](unsigned int i);
     float const & operator[](unsigned int i) const;
     vnl_vectorF & operator=(float const & v);
     vnl_vectorF & operator=(vnl_vectorF const & rhs);
     vnl_vectorF & operator+=(float arg0);
     vnl_vectorF & operator-=(float value);
     vnl_vectorF & operator*=(float arg0);
     vnl_vectorF & operator/=(float arg0);
     vnl_vectorF & operator+=(vnl_vectorF const & rhs);
     vnl_vectorF & operator-=(vnl_vectorF const & rhs);
     vnl_vectorF & pre_multiply(vnl_matrixF const & M);
     vnl_vectorF & post_multiply(vnl_matrixF const & M);
     vnl_vectorF & operator*=(vnl_matrixF const & m);
     vnl_vectorF operator+() const;
     vnl_vectorF operator-() const;
     vnl_vectorF operator+(float v) const;
     vnl_vectorF operator-(float v) const;
     vnl_vectorF operator*(float v) const;
     vnl_vectorF operator/(float v) const;
     vnl_vectorF operator+(vnl_vectorF const & v) const;
     vnl_vectorF operator-(vnl_vectorF const & v) const;
     vnl_vectorF operator*(vnl_matrixF const & M) const;
     float const * data_block() const;
     float * data_block();
     float * begin();
     float * end();
     float const * begin() const;
     float const * end() const;
     vnl_vectorF extract(unsigned int len, unsigned int start = 0) const;
     vnl_vectorF & update(vnl_vectorF const & arg0, unsigned int start = 0);
     float squared_magnitude() const;
     float magnitude() const;
     float one_norm() const;
     float two_norm() const;
     float inf_norm() const;
     vnl_vectorF & normalize();
     float rms() const;
     float min_value() const;
     float max_value() const;
     float mean() const;
     float sum() const;
     void flip();
     void swap(vnl_vectorF & that);
     void assert_size(unsigned int sz) const;
     void assert_finite() const;
     bool is_finite() const;
     bool is_zero() const;
     bool empty() const;
     bool operator_eq(vnl_vectorF const & v) const;
     bool operator==(vnl_vectorF const & that) const;
     bool operator!=(vnl_vectorF const & that) const;
     bool set_size(unsigned int n);
     void clear();
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     static vnl_vectorF read(std::basic_istream< char, std::char_traits< char > > & s);
   private:
   protected:
     void assert_size_internal(unsigned int sz) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


 class vnl_vectorLD {
   public:
     vnl_vectorLD();
     vnl_vectorLD(unsigned int len);
     vnl_vectorLD(unsigned int len, long double const & v0);
     vnl_vectorLD(unsigned int len, int n, long double const * values);
     vnl_vectorLD(long double const * data_block, unsigned int n);
     vnl_vectorLD(vnl_vectorLD const & arg0);
     vnl_vectorLD(vnl_vectorLD const & arg0, vnl_vectorLD const & arg1, vnl_tag_add arg2);
     vnl_vectorLD(vnl_vectorLD const & arg0, vnl_vectorLD const & arg1, vnl_tag_sub arg2);
     vnl_vectorLD(vnl_vectorLD const & arg0, long double arg1, vnl_tag_mul arg2);
     vnl_vectorLD(vnl_vectorLD const & arg0, long double arg1, vnl_tag_div arg2);
     vnl_vectorLD(vnl_vectorLD const & arg0, long double arg1, vnl_tag_add arg2);
     vnl_vectorLD(vnl_vectorLD const & arg0, long double arg1, vnl_tag_sub arg2);
     vnl_vectorLD(vnl_matrixLD const & arg0, vnl_vectorLD const & arg1, vnl_tag_mul arg2);
     vnl_vectorLD(vnl_vectorLD const & arg0, vnl_matrixLD const & arg1, vnl_tag_mul arg2);
     vnl_vectorLD(vnl_vectorLD & that, vnl_tag_grab arg1);
     ~vnl_vectorLD();
     unsigned int size() const;
     void put(unsigned int index, long double const & value);
     long double get(unsigned int index) const;
     void fill(long double const & v);
     void copy_in(long double const * ptr);
     void copy_out(long double * arg0) const;
     void set(long double const * ptr);
     long double & operator()(unsigned int i);
     long double const & operator()(unsigned int i) const;
     long double & operator[](unsigned int i);
     long double const & operator[](unsigned int i) const;
     vnl_vectorLD & operator=(long double const & v);
     vnl_vectorLD & operator=(vnl_vectorLD const & rhs);
     vnl_vectorLD & operator+=(long double arg0);
     vnl_vectorLD & operator-=(long double value);
     vnl_vectorLD & operator*=(long double arg0);
     vnl_vectorLD & operator/=(long double arg0);
     vnl_vectorLD & operator+=(vnl_vectorLD const & rhs);
     vnl_vectorLD & operator-=(vnl_vectorLD const & rhs);
     vnl_vectorLD & pre_multiply(vnl_matrixLD const & M);
     vnl_vectorLD & post_multiply(vnl_matrixLD const & M);
     vnl_vectorLD & operator*=(vnl_matrixLD const & m);
     vnl_vectorLD operator+() const;
     vnl_vectorLD operator-() const;
     vnl_vectorLD operator+(long double v) const;
     vnl_vectorLD operator-(long double v) const;
     vnl_vectorLD operator*(long double v) const;
     vnl_vectorLD operator/(long double v) const;
     vnl_vectorLD operator+(vnl_vectorLD const & v) const;
     vnl_vectorLD operator-(vnl_vectorLD const & v) const;
     vnl_vectorLD operator*(vnl_matrixLD const & M) const;
     long double const * data_block() const;
     long double * data_block();
     long double * begin();
     long double * end();
     long double const * begin() const;
     long double const * end() const;
     vnl_vectorLD extract(unsigned int len, unsigned int start = 0) const;
     vnl_vectorLD & update(vnl_vectorLD const & arg0, unsigned int start = 0);
     long double squared_magnitude() const;
     long double magnitude() const;
     long double one_norm() const;
     long double two_norm() const;
     long double inf_norm() const;
     vnl_vectorLD & normalize();
     long double rms() const;
     long double min_value() const;
     long double max_value() const;
     long double mean() const;
     long double sum() const;
     void flip();
     void swap(vnl_vectorLD & that);
     void assert_size(unsigned int sz) const;
     void assert_finite() const;
     bool is_finite() const;
     bool is_zero() const;
     bool empty() const;
     bool operator_eq(vnl_vectorLD const & v) const;
     bool operator==(vnl_vectorLD const & that) const;
     bool operator!=(vnl_vectorLD const & that) const;
     bool set_size(unsigned int n);
     void clear();
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     static vnl_vectorLD read(std::basic_istream< char, std::char_traits< char > > & s);
   private:
   protected:
     void assert_size_internal(unsigned int sz) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


 class vnl_vectorSC {
   public:
     vnl_vectorSC();
     vnl_vectorSC(unsigned int len);
     vnl_vectorSC(unsigned int len, signed char const & v0);
     vnl_vectorSC(unsigned int len, int n, signed char const * values);
     vnl_vectorSC(signed char const * data_block, unsigned int n);
     vnl_vectorSC(vnl_vectorSC const & arg0);
     vnl_vectorSC(vnl_vectorSC const & arg0, vnl_vectorSC const & arg1, vnl_tag_add arg2);
     vnl_vectorSC(vnl_vectorSC const & arg0, vnl_vectorSC const & arg1, vnl_tag_sub arg2);
     vnl_vectorSC(vnl_vectorSC const & arg0, signed char arg1, vnl_tag_mul arg2);
     vnl_vectorSC(vnl_vectorSC const & arg0, signed char arg1, vnl_tag_div arg2);
     vnl_vectorSC(vnl_vectorSC const & arg0, signed char arg1, vnl_tag_add arg2);
     vnl_vectorSC(vnl_vectorSC const & arg0, signed char arg1, vnl_tag_sub arg2);
     vnl_vectorSC(vnl_matrixSC const & arg0, vnl_vectorSC const & arg1, vnl_tag_mul arg2);
     vnl_vectorSC(vnl_vectorSC const & arg0, vnl_matrixSC const & arg1, vnl_tag_mul arg2);
     vnl_vectorSC(vnl_vectorSC & that, vnl_tag_grab arg1);
     ~vnl_vectorSC();
     unsigned int size() const;
     void put(unsigned int index, signed char const & value);
     signed char get(unsigned int index) const;
     void fill(signed char const & v);
     void copy_in(signed char const * ptr);
     void copy_out(signed char * arg0) const;
     void set(signed char const * ptr);
     signed char & operator()(unsigned int i);
     signed char const & operator()(unsigned int i) const;
     signed char & operator[](unsigned int i);
     signed char const & operator[](unsigned int i) const;
     vnl_vectorSC & operator=(signed char const & v);
     vnl_vectorSC & operator=(vnl_vectorSC const & rhs);
     vnl_vectorSC & operator+=(signed char arg0);
     vnl_vectorSC & operator-=(signed char value);
     vnl_vectorSC & operator*=(signed char arg0);
     vnl_vectorSC & operator/=(signed char arg0);
     vnl_vectorSC & operator+=(vnl_vectorSC const & rhs);
     vnl_vectorSC & operator-=(vnl_vectorSC const & rhs);
     vnl_vectorSC & pre_multiply(vnl_matrixSC const & M);
     vnl_vectorSC & post_multiply(vnl_matrixSC const & M);
     vnl_vectorSC & operator*=(vnl_matrixSC const & m);
     vnl_vectorSC operator+() const;
     vnl_vectorSC operator-() const;
     vnl_vectorSC operator+(signed char v) const;
     vnl_vectorSC operator-(signed char v) const;
     vnl_vectorSC operator*(signed char v) const;
     vnl_vectorSC operator/(signed char v) const;
     vnl_vectorSC operator+(vnl_vectorSC const & v) const;
     vnl_vectorSC operator-(vnl_vectorSC const & v) const;
     vnl_vectorSC operator*(vnl_matrixSC const & M) const;
     signed char const * data_block() const;
     signed char * data_block();
     signed char * begin();
     signed char * end();
     signed char const * begin() const;
     signed char const * end() const;
     vnl_vectorSC extract(unsigned int len, unsigned int start = 0) const;
     vnl_vectorSC & update(vnl_vectorSC const & arg0, unsigned int start = 0);
     unsigned char squared_magnitude() const;
     unsigned char magnitude() const;
     unsigned char one_norm() const;
     unsigned char two_norm() const;
     unsigned char inf_norm() const;
     vnl_vectorSC & normalize();
     unsigned char rms() const;
     signed char min_value() const;
     signed char max_value() const;
     signed char mean() const;
     signed char sum() const;
     void flip();
     void swap(vnl_vectorSC & that);
     void assert_size(unsigned int sz) const;
     void assert_finite() const;
     bool is_finite() const;
     bool is_zero() const;
     bool empty() const;
     bool operator_eq(vnl_vectorSC const & v) const;
     bool operator==(vnl_vectorSC const & that) const;
     bool operator!=(vnl_vectorSC const & that) const;
     bool set_size(unsigned int n);
     void clear();
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     static vnl_vectorSC read(std::basic_istream< char, std::char_traits< char > > & s);
   private:
   protected:
     void assert_size_internal(unsigned int sz) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


 class vnl_vectorSI {
   public:
     vnl_vectorSI();
     vnl_vectorSI(unsigned int len);
     vnl_vectorSI(unsigned int len, int const & v0);
     vnl_vectorSI(unsigned int len, int n, int const * values);
     vnl_vectorSI(int const * data_block, unsigned int n);
     vnl_vectorSI(vnl_vectorSI const & arg0);
     vnl_vectorSI(vnl_vectorSI const & arg0, vnl_vectorSI const & arg1, vnl_tag_add arg2);
     vnl_vectorSI(vnl_vectorSI const & arg0, vnl_vectorSI const & arg1, vnl_tag_sub arg2);
     vnl_vectorSI(vnl_vectorSI const & arg0, int arg1, vnl_tag_mul arg2);
     vnl_vectorSI(vnl_vectorSI const & arg0, int arg1, vnl_tag_div arg2);
     vnl_vectorSI(vnl_vectorSI const & arg0, int arg1, vnl_tag_add arg2);
     vnl_vectorSI(vnl_vectorSI const & arg0, int arg1, vnl_tag_sub arg2);
     vnl_vectorSI(vnl_matrixSI const & arg0, vnl_vectorSI const & arg1, vnl_tag_mul arg2);
     vnl_vectorSI(vnl_vectorSI const & arg0, vnl_matrixSI const & arg1, vnl_tag_mul arg2);
     vnl_vectorSI(vnl_vectorSI & that, vnl_tag_grab arg1);
     ~vnl_vectorSI();
     unsigned int size() const;
     void put(unsigned int index, int const & value);
     int get(unsigned int index) const;
     void fill(int const & v);
     void copy_in(int const * ptr);
     void copy_out(int * arg0) const;
     void set(int const * ptr);
     int & operator()(unsigned int i);
     int const & operator()(unsigned int i) const;
     int & operator[](unsigned int i);
     int const & operator[](unsigned int i) const;
     vnl_vectorSI & operator=(int const & v);
     vnl_vectorSI & operator=(vnl_vectorSI const & rhs);
     vnl_vectorSI & operator+=(int arg0);
     vnl_vectorSI & operator-=(int value);
     vnl_vectorSI & operator*=(int arg0);
     vnl_vectorSI & operator/=(int arg0);
     vnl_vectorSI & operator+=(vnl_vectorSI const & rhs);
     vnl_vectorSI & operator-=(vnl_vectorSI const & rhs);
     vnl_vectorSI & pre_multiply(vnl_matrixSI const & M);
     vnl_vectorSI & post_multiply(vnl_matrixSI const & M);
     vnl_vectorSI & operator*=(vnl_matrixSI const & m);
     vnl_vectorSI operator+() const;
     vnl_vectorSI operator-() const;
     vnl_vectorSI operator+(int v) const;
     vnl_vectorSI operator-(int v) const;
     vnl_vectorSI operator*(int v) const;
     vnl_vectorSI operator/(int v) const;
     vnl_vectorSI operator+(vnl_vectorSI const & v) const;
     vnl_vectorSI operator-(vnl_vectorSI const & v) const;
     vnl_vectorSI operator*(vnl_matrixSI const & M) const;
     int const * data_block() const;
     int * data_block();
     int * begin();
     int * end();
     int const * begin() const;
     int const * end() const;
     vnl_vectorSI extract(unsigned int len, unsigned int start = 0) const;
     vnl_vectorSI & update(vnl_vectorSI const & arg0, unsigned int start = 0);
     unsigned int squared_magnitude() const;
     unsigned int magnitude() const;
     unsigned int one_norm() const;
     unsigned int two_norm() const;
     unsigned int inf_norm() const;
     vnl_vectorSI & normalize();
     unsigned int rms() const;
     int min_value() const;
     int max_value() const;
     int mean() const;
     int sum() const;
     void flip();
     void swap(vnl_vectorSI & that);
     void assert_size(unsigned int sz) const;
     void assert_finite() const;
     bool is_finite() const;
     bool is_zero() const;
     bool empty() const;
     bool operator_eq(vnl_vectorSI const & v) const;
     bool operator==(vnl_vectorSI const & that) const;
     bool operator!=(vnl_vectorSI const & that) const;
     bool set_size(unsigned int n);
     void clear();
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     static vnl_vectorSI read(std::basic_istream< char, std::char_traits< char > > & s);
   private:
   protected:
     void assert_size_internal(unsigned int sz) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


 class vnl_vectorSL {
   public:
     vnl_vectorSL();
     vnl_vectorSL(unsigned int len);
     vnl_vectorSL(unsigned int len, long const & v0);
     vnl_vectorSL(unsigned int len, int n, long const * values);
     vnl_vectorSL(long const * data_block, unsigned int n);
     vnl_vectorSL(vnl_vectorSL const & arg0);
     vnl_vectorSL(vnl_vectorSL const & arg0, vnl_vectorSL const & arg1, vnl_tag_add arg2);
     vnl_vectorSL(vnl_vectorSL const & arg0, vnl_vectorSL const & arg1, vnl_tag_sub arg2);
     vnl_vectorSL(vnl_vectorSL const & arg0, long arg1, vnl_tag_mul arg2);
     vnl_vectorSL(vnl_vectorSL const & arg0, long arg1, vnl_tag_div arg2);
     vnl_vectorSL(vnl_vectorSL const & arg0, long arg1, vnl_tag_add arg2);
     vnl_vectorSL(vnl_vectorSL const & arg0, long arg1, vnl_tag_sub arg2);
     vnl_vectorSL(vnl_matrixSL const & arg0, vnl_vectorSL const & arg1, vnl_tag_mul arg2);
     vnl_vectorSL(vnl_vectorSL const & arg0, vnl_matrixSL const & arg1, vnl_tag_mul arg2);
     vnl_vectorSL(vnl_vectorSL & that, vnl_tag_grab arg1);
     ~vnl_vectorSL();
     unsigned int size() const;
     void put(unsigned int index, long const & value);
     long get(unsigned int index) const;
     void fill(long const & v);
     void copy_in(long const * ptr);
     void copy_out(long * arg0) const;
     void set(long const * ptr);
     long & operator()(unsigned int i);
     long const & operator()(unsigned int i) const;
     long & operator[](unsigned int i);
     long const & operator[](unsigned int i) const;
     vnl_vectorSL & operator=(long const & v);
     vnl_vectorSL & operator=(vnl_vectorSL const & rhs);
     vnl_vectorSL & operator+=(long arg0);
     vnl_vectorSL & operator-=(long value);
     vnl_vectorSL & operator*=(long arg0);
     vnl_vectorSL & operator/=(long arg0);
     vnl_vectorSL & operator+=(vnl_vectorSL const & rhs);
     vnl_vectorSL & operator-=(vnl_vectorSL const & rhs);
     vnl_vectorSL & pre_multiply(vnl_matrixSL const & M);
     vnl_vectorSL & post_multiply(vnl_matrixSL const & M);
     vnl_vectorSL & operator*=(vnl_matrixSL const & m);
     vnl_vectorSL operator+() const;
     vnl_vectorSL operator-() const;
     vnl_vectorSL operator+(long v) const;
     vnl_vectorSL operator-(long v) const;
     vnl_vectorSL operator*(long v) const;
     vnl_vectorSL operator/(long v) const;
     vnl_vectorSL operator+(vnl_vectorSL const & v) const;
     vnl_vectorSL operator-(vnl_vectorSL const & v) const;
     vnl_vectorSL operator*(vnl_matrixSL const & M) const;
     long const * data_block() const;
     long * data_block();
     long * begin();
     long * end();
     long const * begin() const;
     long const * end() const;
     vnl_vectorSL extract(unsigned int len, unsigned int start = 0) const;
     vnl_vectorSL & update(vnl_vectorSL const & arg0, unsigned int start = 0);
     unsigned long squared_magnitude() const;
     unsigned long magnitude() const;
     unsigned long one_norm() const;
     unsigned long two_norm() const;
     unsigned long inf_norm() const;
     vnl_vectorSL & normalize();
     unsigned long rms() const;
     long min_value() const;
     long max_value() const;
     long mean() const;
     long sum() const;
     void flip();
     void swap(vnl_vectorSL & that);
     void assert_size(unsigned int sz) const;
     void assert_finite() const;
     bool is_finite() const;
     bool is_zero() const;
     bool empty() const;
     bool operator_eq(vnl_vectorSL const & v) const;
     bool operator==(vnl_vectorSL const & that) const;
     bool operator!=(vnl_vectorSL const & that) const;
     bool set_size(unsigned int n);
     void clear();
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     static vnl_vectorSL read(std::basic_istream< char, std::char_traits< char > > & s);
   private:
   protected:
     void assert_size_internal(unsigned int sz) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


 class vnl_vectorUC {
   public:
     vnl_vectorUC();
     vnl_vectorUC(unsigned int len);
     vnl_vectorUC(unsigned int len, unsigned char const & v0);
     vnl_vectorUC(unsigned int len, int n, unsigned char const * values);
     vnl_vectorUC(unsigned char const * data_block, unsigned int n);
     vnl_vectorUC(vnl_vectorUC const & arg0);
     vnl_vectorUC(vnl_vectorUC const & arg0, vnl_vectorUC const & arg1, vnl_tag_add arg2);
     vnl_vectorUC(vnl_vectorUC const & arg0, vnl_vectorUC const & arg1, vnl_tag_sub arg2);
     vnl_vectorUC(vnl_vectorUC const & arg0, unsigned char arg1, vnl_tag_mul arg2);
     vnl_vectorUC(vnl_vectorUC const & arg0, unsigned char arg1, vnl_tag_div arg2);
     vnl_vectorUC(vnl_vectorUC const & arg0, unsigned char arg1, vnl_tag_add arg2);
     vnl_vectorUC(vnl_vectorUC const & arg0, unsigned char arg1, vnl_tag_sub arg2);
     vnl_vectorUC(vnl_matrixUC const & arg0, vnl_vectorUC const & arg1, vnl_tag_mul arg2);
     vnl_vectorUC(vnl_vectorUC const & arg0, vnl_matrixUC const & arg1, vnl_tag_mul arg2);
     vnl_vectorUC(vnl_vectorUC & that, vnl_tag_grab arg1);
     ~vnl_vectorUC();
     unsigned int size() const;
     void put(unsigned int index, unsigned char const & value);
     unsigned char get(unsigned int index) const;
     void fill(unsigned char const & v);
     void copy_in(unsigned char const * ptr);
     void copy_out(unsigned char * arg0) const;
     void set(unsigned char const * ptr);
     unsigned char & operator()(unsigned int i);
     unsigned char const & operator()(unsigned int i) const;
     unsigned char & operator[](unsigned int i);
     unsigned char const & operator[](unsigned int i) const;
     vnl_vectorUC & operator=(unsigned char const & v);
     vnl_vectorUC & operator=(vnl_vectorUC const & rhs);
     vnl_vectorUC & operator+=(unsigned char arg0);
     vnl_vectorUC & operator-=(unsigned char value);
     vnl_vectorUC & operator*=(unsigned char arg0);
     vnl_vectorUC & operator/=(unsigned char arg0);
     vnl_vectorUC & operator+=(vnl_vectorUC const & rhs);
     vnl_vectorUC & operator-=(vnl_vectorUC const & rhs);
     vnl_vectorUC & pre_multiply(vnl_matrixUC const & M);
     vnl_vectorUC & post_multiply(vnl_matrixUC const & M);
     vnl_vectorUC & operator*=(vnl_matrixUC const & m);
     vnl_vectorUC operator+() const;
     vnl_vectorUC operator-() const;
     vnl_vectorUC operator+(unsigned char v) const;
     vnl_vectorUC operator-(unsigned char v) const;
     vnl_vectorUC operator*(unsigned char v) const;
     vnl_vectorUC operator/(unsigned char v) const;
     vnl_vectorUC operator+(vnl_vectorUC const & v) const;
     vnl_vectorUC operator-(vnl_vectorUC const & v) const;
     vnl_vectorUC operator*(vnl_matrixUC const & M) const;
     unsigned char const * data_block() const;
     unsigned char * data_block();
     unsigned char * begin();
     unsigned char * end();
     unsigned char const * begin() const;
     unsigned char const * end() const;
     vnl_vectorUC extract(unsigned int len, unsigned int start = 0) const;
     vnl_vectorUC & update(vnl_vectorUC const & arg0, unsigned int start = 0);
     unsigned char squared_magnitude() const;
     unsigned char magnitude() const;
     unsigned char one_norm() const;
     unsigned char two_norm() const;
     unsigned char inf_norm() const;
     vnl_vectorUC & normalize();
     unsigned char rms() const;
     unsigned char min_value() const;
     unsigned char max_value() const;
     unsigned char mean() const;
     unsigned char sum() const;
     void flip();
     void swap(vnl_vectorUC & that);
     void assert_size(unsigned int sz) const;
     void assert_finite() const;
     bool is_finite() const;
     bool is_zero() const;
     bool empty() const;
     bool operator_eq(vnl_vectorUC const & v) const;
     bool operator==(vnl_vectorUC const & that) const;
     bool operator!=(vnl_vectorUC const & that) const;
     bool set_size(unsigned int n);
     void clear();
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     static vnl_vectorUC read(std::basic_istream< char, std::char_traits< char > > & s);
   private:
   protected:
     void assert_size_internal(unsigned int sz) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


 class vnl_vectorUI {
   public:
     vnl_vectorUI();
     vnl_vectorUI(unsigned int len);
     vnl_vectorUI(unsigned int len, unsigned int const & v0);
     vnl_vectorUI(unsigned int len, int n, unsigned int const * values);
     vnl_vectorUI(unsigned int const * data_block, unsigned int n);
     vnl_vectorUI(vnl_vectorUI const & arg0);
     vnl_vectorUI(vnl_vectorUI const & arg0, vnl_vectorUI const & arg1, vnl_tag_add arg2);
     vnl_vectorUI(vnl_vectorUI const & arg0, vnl_vectorUI const & arg1, vnl_tag_sub arg2);
     vnl_vectorUI(vnl_vectorUI const & arg0, unsigned int arg1, vnl_tag_mul arg2);
     vnl_vectorUI(vnl_vectorUI const & arg0, unsigned int arg1, vnl_tag_div arg2);
     vnl_vectorUI(vnl_vectorUI const & arg0, unsigned int arg1, vnl_tag_add arg2);
     vnl_vectorUI(vnl_vectorUI const & arg0, unsigned int arg1, vnl_tag_sub arg2);
     vnl_vectorUI(vnl_matrixUI const & arg0, vnl_vectorUI const & arg1, vnl_tag_mul arg2);
     vnl_vectorUI(vnl_vectorUI const & arg0, vnl_matrixUI const & arg1, vnl_tag_mul arg2);
     vnl_vectorUI(vnl_vectorUI & that, vnl_tag_grab arg1);
     ~vnl_vectorUI();
     unsigned int size() const;
     void put(unsigned int index, unsigned int const & value);
     unsigned int get(unsigned int index) const;
     void fill(unsigned int const & v);
     void copy_in(unsigned int const * ptr);
     void copy_out(unsigned int * arg0) const;
     void set(unsigned int const * ptr);
     unsigned int & operator()(unsigned int i);
     unsigned int const & operator()(unsigned int i) const;
     unsigned int & operator[](unsigned int i);
     unsigned int const & operator[](unsigned int i) const;
     vnl_vectorUI & operator=(unsigned int const & v);
     vnl_vectorUI & operator=(vnl_vectorUI const & rhs);
     vnl_vectorUI & operator+=(unsigned int arg0);
     vnl_vectorUI & operator-=(unsigned int value);
     vnl_vectorUI & operator*=(unsigned int arg0);
     vnl_vectorUI & operator/=(unsigned int arg0);
     vnl_vectorUI & operator+=(vnl_vectorUI const & rhs);
     vnl_vectorUI & operator-=(vnl_vectorUI const & rhs);
     vnl_vectorUI & pre_multiply(vnl_matrixUI const & M);
     vnl_vectorUI & post_multiply(vnl_matrixUI const & M);
     vnl_vectorUI & operator*=(vnl_matrixUI const & m);
     vnl_vectorUI operator+() const;
     vnl_vectorUI operator-() const;
     vnl_vectorUI operator+(unsigned int v) const;
     vnl_vectorUI operator-(unsigned int v) const;
     vnl_vectorUI operator*(unsigned int v) const;
     vnl_vectorUI operator/(unsigned int v) const;
     vnl_vectorUI operator+(vnl_vectorUI const & v) const;
     vnl_vectorUI operator-(vnl_vectorUI const & v) const;
     vnl_vectorUI operator*(vnl_matrixUI const & M) const;
     unsigned int const * data_block() const;
     unsigned int * data_block();
     unsigned int * begin();
     unsigned int * end();
     unsigned int const * begin() const;
     unsigned int const * end() const;
     vnl_vectorUI extract(unsigned int len, unsigned int start = 0) const;
     vnl_vectorUI & update(vnl_vectorUI const & arg0, unsigned int start = 0);
     unsigned int squared_magnitude() const;
     unsigned int magnitude() const;
     unsigned int one_norm() const;
     unsigned int two_norm() const;
     unsigned int inf_norm() const;
     vnl_vectorUI & normalize();
     unsigned int rms() const;
     unsigned int min_value() const;
     unsigned int max_value() const;
     unsigned int mean() const;
     unsigned int sum() const;
     void flip();
     void swap(vnl_vectorUI & that);
     void assert_size(unsigned int sz) const;
     void assert_finite() const;
     bool is_finite() const;
     bool is_zero() const;
     bool empty() const;
     bool operator_eq(vnl_vectorUI const & v) const;
     bool operator==(vnl_vectorUI const & that) const;
     bool operator!=(vnl_vectorUI const & that) const;
     bool set_size(unsigned int n);
     void clear();
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     static vnl_vectorUI read(std::basic_istream< char, std::char_traits< char > > & s);
   private:
   protected:
     void assert_size_internal(unsigned int sz) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


 class vnl_vectorUL {
   public:
     vnl_vectorUL();
     vnl_vectorUL(unsigned int len);
     vnl_vectorUL(unsigned int len, unsigned long const & v0);
     vnl_vectorUL(unsigned int len, int n, unsigned long const * values);
     vnl_vectorUL(unsigned long const * data_block, unsigned int n);
     vnl_vectorUL(vnl_vectorUL const & arg0);
     vnl_vectorUL(vnl_vectorUL const & arg0, vnl_vectorUL const & arg1, vnl_tag_add arg2);
     vnl_vectorUL(vnl_vectorUL const & arg0, vnl_vectorUL const & arg1, vnl_tag_sub arg2);
     vnl_vectorUL(vnl_vectorUL const & arg0, unsigned long arg1, vnl_tag_mul arg2);
     vnl_vectorUL(vnl_vectorUL const & arg0, unsigned long arg1, vnl_tag_div arg2);
     vnl_vectorUL(vnl_vectorUL const & arg0, unsigned long arg1, vnl_tag_add arg2);
     vnl_vectorUL(vnl_vectorUL const & arg0, unsigned long arg1, vnl_tag_sub arg2);
     vnl_vectorUL(vnl_matrixUL const & arg0, vnl_vectorUL const & arg1, vnl_tag_mul arg2);
     vnl_vectorUL(vnl_vectorUL const & arg0, vnl_matrixUL const & arg1, vnl_tag_mul arg2);
     vnl_vectorUL(vnl_vectorUL & that, vnl_tag_grab arg1);
     ~vnl_vectorUL();
     unsigned int size() const;
     void put(unsigned int index, unsigned long const & value);
     unsigned long get(unsigned int index) const;
     void fill(unsigned long const & v);
     void copy_in(unsigned long const * ptr);
     void copy_out(unsigned long * arg0) const;
     void set(unsigned long const * ptr);
     unsigned long & operator()(unsigned int i);
     unsigned long const & operator()(unsigned int i) const;
     unsigned long & operator[](unsigned int i);
     unsigned long const & operator[](unsigned int i) const;
     vnl_vectorUL & operator=(unsigned long const & v);
     vnl_vectorUL & operator=(vnl_vectorUL const & rhs);
     vnl_vectorUL & operator+=(unsigned long arg0);
     vnl_vectorUL & operator-=(unsigned long value);
     vnl_vectorUL & operator*=(unsigned long arg0);
     vnl_vectorUL & operator/=(unsigned long arg0);
     vnl_vectorUL & operator+=(vnl_vectorUL const & rhs);
     vnl_vectorUL & operator-=(vnl_vectorUL const & rhs);
     vnl_vectorUL & pre_multiply(vnl_matrixUL const & M);
     vnl_vectorUL & post_multiply(vnl_matrixUL const & M);
     vnl_vectorUL & operator*=(vnl_matrixUL const & m);
     vnl_vectorUL operator+() const;
     vnl_vectorUL operator-() const;
     vnl_vectorUL operator+(unsigned long v) const;
     vnl_vectorUL operator-(unsigned long v) const;
     vnl_vectorUL operator*(unsigned long v) const;
     vnl_vectorUL operator/(unsigned long v) const;
     vnl_vectorUL operator+(vnl_vectorUL const & v) const;
     vnl_vectorUL operator-(vnl_vectorUL const & v) const;
     vnl_vectorUL operator*(vnl_matrixUL const & M) const;
     unsigned long const * data_block() const;
     unsigned long * data_block();
     unsigned long * begin();
     unsigned long * end();
     unsigned long const * begin() const;
     unsigned long const * end() const;
     vnl_vectorUL extract(unsigned int len, unsigned int start = 0) const;
     vnl_vectorUL & update(vnl_vectorUL const & arg0, unsigned int start = 0);
     unsigned long squared_magnitude() const;
     unsigned long magnitude() const;
     unsigned long one_norm() const;
     unsigned long two_norm() const;
     unsigned long inf_norm() const;
     vnl_vectorUL & normalize();
     unsigned long rms() const;
     unsigned long min_value() const;
     unsigned long max_value() const;
     unsigned long mean() const;
     unsigned long sum() const;
     void flip();
     void swap(vnl_vectorUL & that);
     void assert_size(unsigned int sz) const;
     void assert_finite() const;
     bool is_finite() const;
     bool is_zero() const;
     bool empty() const;
     bool operator_eq(vnl_vectorUL const & v) const;
     bool operator==(vnl_vectorUL const & that) const;
     bool operator!=(vnl_vectorUL const & that) const;
     bool set_size(unsigned int n);
     void clear();
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     static vnl_vectorUL read(std::basic_istream< char, std::char_traits< char > > & s);
   private:
   protected:
     void assert_size_internal(unsigned int sz) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


 class vnl_vectorUS {
   public:
     vnl_vectorUS();
     vnl_vectorUS(unsigned int len);
     vnl_vectorUS(unsigned int len, unsigned short const & v0);
     vnl_vectorUS(unsigned int len, int n, unsigned short const * values);
     vnl_vectorUS(unsigned short const * data_block, unsigned int n);
     vnl_vectorUS(vnl_vectorUS const & arg0);
     vnl_vectorUS(vnl_vectorUS const & arg0, vnl_vectorUS const & arg1, vnl_tag_add arg2);
     vnl_vectorUS(vnl_vectorUS const & arg0, vnl_vectorUS const & arg1, vnl_tag_sub arg2);
     vnl_vectorUS(vnl_vectorUS const & arg0, unsigned short arg1, vnl_tag_mul arg2);
     vnl_vectorUS(vnl_vectorUS const & arg0, unsigned short arg1, vnl_tag_div arg2);
     vnl_vectorUS(vnl_vectorUS const & arg0, unsigned short arg1, vnl_tag_add arg2);
     vnl_vectorUS(vnl_vectorUS const & arg0, unsigned short arg1, vnl_tag_sub arg2);
     vnl_vectorUS(vnl_matrix< unsigned short > const & arg0, vnl_vectorUS const & arg1, vnl_tag_mul arg2);
     vnl_vectorUS(vnl_vectorUS const & arg0, vnl_matrix< unsigned short > const & arg1, vnl_tag_mul arg2);
     vnl_vectorUS(vnl_vectorUS & that, vnl_tag_grab arg1);
     ~vnl_vectorUS();
     unsigned int size() const;
     void put(unsigned int index, unsigned short const & value);
     unsigned short get(unsigned int index) const;
     void fill(unsigned short const & v);
     void copy_in(unsigned short const * ptr);
     void copy_out(unsigned short * arg0) const;
     void set(unsigned short const * ptr);
     unsigned short & operator()(unsigned int i);
     unsigned short const & operator()(unsigned int i) const;
     unsigned short & operator[](unsigned int i);
     unsigned short const & operator[](unsigned int i) const;
     vnl_vectorUS & operator=(unsigned short const & v);
     vnl_vectorUS & operator=(vnl_vectorUS const & rhs);
     vnl_vectorUS & operator+=(unsigned short arg0);
     vnl_vectorUS & operator-=(unsigned short value);
     vnl_vectorUS & operator*=(unsigned short arg0);
     vnl_vectorUS & operator/=(unsigned short arg0);
     vnl_vectorUS & operator+=(vnl_vectorUS const & rhs);
     vnl_vectorUS & operator-=(vnl_vectorUS const & rhs);
     vnl_vectorUS & pre_multiply(vnl_matrix< unsigned short > const & M);
     vnl_vectorUS & post_multiply(vnl_matrix< unsigned short > const & M);
     vnl_vectorUS & operator*=(vnl_matrix< unsigned short > const & m);
     vnl_vectorUS operator+() const;
     vnl_vectorUS operator-() const;
     vnl_vectorUS operator+(unsigned short v) const;
     vnl_vectorUS operator-(unsigned short v) const;
     vnl_vectorUS operator*(unsigned short v) const;
     vnl_vectorUS operator/(unsigned short v) const;
     vnl_vectorUS operator+(vnl_vectorUS const & v) const;
     vnl_vectorUS operator-(vnl_vectorUS const & v) const;
     vnl_vectorUS operator*(vnl_matrix< unsigned short > const & M) const;
     unsigned short const * data_block() const;
     unsigned short * data_block();
     unsigned short * begin();
     unsigned short * end();
     unsigned short const * begin() const;
     unsigned short const * end() const;
     vnl_vectorUS extract(unsigned int len, unsigned int start = 0) const;
     vnl_vectorUS & update(vnl_vectorUS const & arg0, unsigned int start = 0);
     unsigned short squared_magnitude() const;
     unsigned short magnitude() const;
     unsigned short one_norm() const;
     unsigned short two_norm() const;
     unsigned short inf_norm() const;
     vnl_vectorUS & normalize();
     unsigned short rms() const;
     unsigned short min_value() const;
     unsigned short max_value() const;
     unsigned short mean() const;
     unsigned short sum() const;
     void flip();
     void swap(vnl_vectorUS & that);
     void assert_size(unsigned int sz) const;
     void assert_finite() const;
     bool is_finite() const;
     bool is_zero() const;
     bool empty() const;
     bool operator_eq(vnl_vectorUS const & v) const;
     bool operator==(vnl_vectorUS const & that) const;
     bool operator!=(vnl_vectorUS const & that) const;
     bool set_size(unsigned int n);
     void clear();
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     static vnl_vectorUS read(std::basic_istream< char, std::char_traits< char > > & s);
   private:
   protected:
     void assert_size_internal(unsigned int sz) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


 class vnl_vector_vcl_complexD {
   public:
     vnl_vector_vcl_complexD();
     vnl_vector_vcl_complexD(unsigned int len);
     vnl_vector_vcl_complexD(unsigned int len, vcl_complexD const & v0);
     vnl_vector_vcl_complexD(unsigned int len, int n, vcl_complexD const * values);
     vnl_vector_vcl_complexD(vcl_complexD const * data_block, unsigned int n);
     vnl_vector_vcl_complexD(vnl_vector_vcl_complexD const & arg0);
     vnl_vector_vcl_complexD(vnl_vector_vcl_complexD const & arg0, vnl_vector_vcl_complexD const & arg1, vnl_tag_add arg2);
     vnl_vector_vcl_complexD(vnl_vector_vcl_complexD const & arg0, vnl_vector_vcl_complexD const & arg1, vnl_tag_sub arg2);
     vnl_vector_vcl_complexD(vnl_vector_vcl_complexD const & arg0, vcl_complexD arg1, vnl_tag_mul arg2);
     vnl_vector_vcl_complexD(vnl_vector_vcl_complexD const & arg0, vcl_complexD arg1, vnl_tag_div arg2);
     vnl_vector_vcl_complexD(vnl_vector_vcl_complexD const & arg0, vcl_complexD arg1, vnl_tag_add arg2);
     vnl_vector_vcl_complexD(vnl_vector_vcl_complexD const & arg0, vcl_complexD arg1, vnl_tag_sub arg2);
     vnl_vector_vcl_complexD(vnl_matrix_vcl_complexD const & arg0, vnl_vector_vcl_complexD const & arg1, vnl_tag_mul arg2);
     vnl_vector_vcl_complexD(vnl_vector_vcl_complexD const & arg0, vnl_matrix_vcl_complexD const & arg1, vnl_tag_mul arg2);
     vnl_vector_vcl_complexD(vnl_vector_vcl_complexD & that, vnl_tag_grab arg1);
     ~vnl_vector_vcl_complexD();
     unsigned int size() const;
     void put(unsigned int index, vcl_complexD const & value);
     vcl_complexD get(unsigned int index) const;
     void fill(vcl_complexD const & v);
     void copy_in(vcl_complexD const * ptr);
     void copy_out(vcl_complexD * arg0) const;
     void set(vcl_complexD const * ptr);
     vcl_complexD & operator()(unsigned int i);
     vcl_complexD const & operator()(unsigned int i) const;
     vcl_complexD & operator[](unsigned int i);
     vcl_complexD const & operator[](unsigned int i) const;
     vnl_vector_vcl_complexD & operator=(vcl_complexD const & v);
     vnl_vector_vcl_complexD & operator=(vnl_vector_vcl_complexD const & rhs);
     vnl_vector_vcl_complexD & operator+=(vcl_complexD arg0);
     vnl_vector_vcl_complexD & operator-=(vcl_complexD value);
     vnl_vector_vcl_complexD & operator*=(vcl_complexD arg0);
     vnl_vector_vcl_complexD & operator/=(vcl_complexD arg0);
     vnl_vector_vcl_complexD & operator+=(vnl_vector_vcl_complexD const & rhs);
     vnl_vector_vcl_complexD & operator-=(vnl_vector_vcl_complexD const & rhs);
     vnl_vector_vcl_complexD & pre_multiply(vnl_matrix_vcl_complexD const & M);
     vnl_vector_vcl_complexD & post_multiply(vnl_matrix_vcl_complexD const & M);
     vnl_vector_vcl_complexD & operator*=(vnl_matrix_vcl_complexD const & m);
     vnl_vector_vcl_complexD operator+() const;
     vnl_vector_vcl_complexD operator-() const;
     vnl_vector_vcl_complexD operator+(vcl_complexD v) const;
     vnl_vector_vcl_complexD operator-(vcl_complexD v) const;
     vnl_vector_vcl_complexD operator*(vcl_complexD v) const;
     vnl_vector_vcl_complexD operator/(vcl_complexD v) const;
     vnl_vector_vcl_complexD operator+(vnl_vector_vcl_complexD const & v) const;
     vnl_vector_vcl_complexD operator-(vnl_vector_vcl_complexD const & v) const;
     vnl_vector_vcl_complexD operator*(vnl_matrix_vcl_complexD const & M) const;
     vcl_complexD const * data_block() const;
     vcl_complexD * data_block();
     vcl_complexD * begin();
     vcl_complexD * end();
     vcl_complexD const * begin() const;
     vcl_complexD const * end() const;
     vnl_vector_vcl_complexD extract(unsigned int len, unsigned int start = 0) const;
     vnl_vector_vcl_complexD & update(vnl_vector_vcl_complexD const & arg0, unsigned int start = 0);
     double squared_magnitude() const;
     double magnitude() const;
     double one_norm() const;
     double two_norm() const;
     double inf_norm() const;
     vnl_vector_vcl_complexD & normalize();
     double rms() const;
     vcl_complexD min_value() const;
     vcl_complexD max_value() const;
     vcl_complexD mean() const;
     vcl_complexD sum() const;
     void flip();
     void swap(vnl_vector_vcl_complexD & that);
     void assert_size(unsigned int sz) const;
     void assert_finite() const;
     bool is_finite() const;
     bool is_zero() const;
     bool empty() const;
     bool operator_eq(vnl_vector_vcl_complexD const & v) const;
     bool operator==(vnl_vector_vcl_complexD const & that) const;
     bool operator!=(vnl_vector_vcl_complexD const & that) const;
     bool set_size(unsigned int n);
     void clear();
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     static vnl_vector_vcl_complexD read(std::basic_istream< char, std::char_traits< char > > & s);
   private:
   protected:
     void assert_size_internal(unsigned int sz) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


 class vnl_vector_vcl_complexF {
   public:
     vnl_vector_vcl_complexF();
     vnl_vector_vcl_complexF(unsigned int len);
     vnl_vector_vcl_complexF(unsigned int len, vcl_complexF const & v0);
     vnl_vector_vcl_complexF(unsigned int len, int n, vcl_complexF const * values);
     vnl_vector_vcl_complexF(vcl_complexF const * data_block, unsigned int n);
     vnl_vector_vcl_complexF(vnl_vector_vcl_complexF const & arg0);
     vnl_vector_vcl_complexF(vnl_vector_vcl_complexF const & arg0, vnl_vector_vcl_complexF const & arg1, vnl_tag_add arg2);
     vnl_vector_vcl_complexF(vnl_vector_vcl_complexF const & arg0, vnl_vector_vcl_complexF const & arg1, vnl_tag_sub arg2);
     vnl_vector_vcl_complexF(vnl_vector_vcl_complexF const & arg0, vcl_complexF arg1, vnl_tag_mul arg2);
     vnl_vector_vcl_complexF(vnl_vector_vcl_complexF const & arg0, vcl_complexF arg1, vnl_tag_div arg2);
     vnl_vector_vcl_complexF(vnl_vector_vcl_complexF const & arg0, vcl_complexF arg1, vnl_tag_add arg2);
     vnl_vector_vcl_complexF(vnl_vector_vcl_complexF const & arg0, vcl_complexF arg1, vnl_tag_sub arg2);
     vnl_vector_vcl_complexF(vnl_matrix_vcl_complexF const & arg0, vnl_vector_vcl_complexF const & arg1, vnl_tag_mul arg2);
     vnl_vector_vcl_complexF(vnl_vector_vcl_complexF const & arg0, vnl_matrix_vcl_complexF const & arg1, vnl_tag_mul arg2);
     vnl_vector_vcl_complexF(vnl_vector_vcl_complexF & that, vnl_tag_grab arg1);
     ~vnl_vector_vcl_complexF();
     unsigned int size() const;
     void put(unsigned int index, vcl_complexF const & value);
     vcl_complexF get(unsigned int index) const;
     void fill(vcl_complexF const & v);
     void copy_in(vcl_complexF const * ptr);
     void copy_out(vcl_complexF * arg0) const;
     void set(vcl_complexF const * ptr);
     vcl_complexF & operator()(unsigned int i);
     vcl_complexF const & operator()(unsigned int i) const;
     vcl_complexF & operator[](unsigned int i);
     vcl_complexF const & operator[](unsigned int i) const;
     vnl_vector_vcl_complexF & operator=(vcl_complexF const & v);
     vnl_vector_vcl_complexF & operator=(vnl_vector_vcl_complexF const & rhs);
     vnl_vector_vcl_complexF & operator+=(vcl_complexF arg0);
     vnl_vector_vcl_complexF & operator-=(vcl_complexF value);
     vnl_vector_vcl_complexF & operator*=(vcl_complexF arg0);
     vnl_vector_vcl_complexF & operator/=(vcl_complexF arg0);
     vnl_vector_vcl_complexF & operator+=(vnl_vector_vcl_complexF const & rhs);
     vnl_vector_vcl_complexF & operator-=(vnl_vector_vcl_complexF const & rhs);
     vnl_vector_vcl_complexF & pre_multiply(vnl_matrix_vcl_complexF const & M);
     vnl_vector_vcl_complexF & post_multiply(vnl_matrix_vcl_complexF const & M);
     vnl_vector_vcl_complexF & operator*=(vnl_matrix_vcl_complexF const & m);
     vnl_vector_vcl_complexF operator+() const;
     vnl_vector_vcl_complexF operator-() const;
     vnl_vector_vcl_complexF operator+(vcl_complexF v) const;
     vnl_vector_vcl_complexF operator-(vcl_complexF v) const;
     vnl_vector_vcl_complexF operator*(vcl_complexF v) const;
     vnl_vector_vcl_complexF operator/(vcl_complexF v) const;
     vnl_vector_vcl_complexF operator+(vnl_vector_vcl_complexF const & v) const;
     vnl_vector_vcl_complexF operator-(vnl_vector_vcl_complexF const & v) const;
     vnl_vector_vcl_complexF operator*(vnl_matrix_vcl_complexF const & M) const;
     vcl_complexF const * data_block() const;
     vcl_complexF * data_block();
     vcl_complexF * begin();
     vcl_complexF * end();
     vcl_complexF const * begin() const;
     vcl_complexF const * end() const;
     vnl_vector_vcl_complexF extract(unsigned int len, unsigned int start = 0) const;
     vnl_vector_vcl_complexF & update(vnl_vector_vcl_complexF const & arg0, unsigned int start = 0);
     float squared_magnitude() const;
     float magnitude() const;
     float one_norm() const;
     float two_norm() const;
     float inf_norm() const;
     vnl_vector_vcl_complexF & normalize();
     float rms() const;
     vcl_complexF min_value() const;
     vcl_complexF max_value() const;
     vcl_complexF mean() const;
     vcl_complexF sum() const;
     void flip();
     void swap(vnl_vector_vcl_complexF & that);
     void assert_size(unsigned int sz) const;
     void assert_finite() const;
     bool is_finite() const;
     bool is_zero() const;
     bool empty() const;
     bool operator_eq(vnl_vector_vcl_complexF const & v) const;
     bool operator==(vnl_vector_vcl_complexF const & that) const;
     bool operator!=(vnl_vector_vcl_complexF const & that) const;
     bool set_size(unsigned int n);
     void clear();
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     static vnl_vector_vcl_complexF read(std::basic_istream< char, std::char_traits< char > > & s);
   private:
   protected:
     void assert_size_internal(unsigned int sz) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


 class vnl_vector_vcl_complexLD {
   public:
     vnl_vector_vcl_complexLD();
     vnl_vector_vcl_complexLD(unsigned int len);
     vnl_vector_vcl_complexLD(unsigned int len, vcl_complexLD const & v0);
     vnl_vector_vcl_complexLD(unsigned int len, int n, vcl_complexLD const * values);
     vnl_vector_vcl_complexLD(vcl_complexLD const * data_block, unsigned int n);
     vnl_vector_vcl_complexLD(vnl_vector_vcl_complexLD const & arg0);
     vnl_vector_vcl_complexLD(vnl_vector_vcl_complexLD const & arg0, vnl_vector_vcl_complexLD const & arg1, vnl_tag_add arg2);
     vnl_vector_vcl_complexLD(vnl_vector_vcl_complexLD const & arg0, vnl_vector_vcl_complexLD const & arg1, vnl_tag_sub arg2);
     vnl_vector_vcl_complexLD(vnl_vector_vcl_complexLD const & arg0, vcl_complexLD arg1, vnl_tag_mul arg2);
     vnl_vector_vcl_complexLD(vnl_vector_vcl_complexLD const & arg0, vcl_complexLD arg1, vnl_tag_div arg2);
     vnl_vector_vcl_complexLD(vnl_vector_vcl_complexLD const & arg0, vcl_complexLD arg1, vnl_tag_add arg2);
     vnl_vector_vcl_complexLD(vnl_vector_vcl_complexLD const & arg0, vcl_complexLD arg1, vnl_tag_sub arg2);
     vnl_vector_vcl_complexLD(vnl_matrix_vcl_complexLD const & arg0, vnl_vector_vcl_complexLD const & arg1, vnl_tag_mul arg2);
     vnl_vector_vcl_complexLD(vnl_vector_vcl_complexLD const & arg0, vnl_matrix_vcl_complexLD const & arg1, vnl_tag_mul arg2);
     vnl_vector_vcl_complexLD(vnl_vector_vcl_complexLD & that, vnl_tag_grab arg1);
     ~vnl_vector_vcl_complexLD();
     unsigned int size() const;
     void put(unsigned int index, vcl_complexLD const & value);
     vcl_complexLD get(unsigned int index) const;
     void fill(vcl_complexLD const & v);
     void copy_in(vcl_complexLD const * ptr);
     void copy_out(vcl_complexLD * arg0) const;
     void set(vcl_complexLD const * ptr);
     vcl_complexLD & operator()(unsigned int i);
     vcl_complexLD const & operator()(unsigned int i) const;
     vcl_complexLD & operator[](unsigned int i);
     vcl_complexLD const & operator[](unsigned int i) const;
     vnl_vector_vcl_complexLD & operator=(vcl_complexLD const & v);
     vnl_vector_vcl_complexLD & operator=(vnl_vector_vcl_complexLD const & rhs);
     vnl_vector_vcl_complexLD & operator+=(vcl_complexLD arg0);
     vnl_vector_vcl_complexLD & operator-=(vcl_complexLD value);
     vnl_vector_vcl_complexLD & operator*=(vcl_complexLD arg0);
     vnl_vector_vcl_complexLD & operator/=(vcl_complexLD arg0);
     vnl_vector_vcl_complexLD & operator+=(vnl_vector_vcl_complexLD const & rhs);
     vnl_vector_vcl_complexLD & operator-=(vnl_vector_vcl_complexLD const & rhs);
     vnl_vector_vcl_complexLD & pre_multiply(vnl_matrix_vcl_complexLD const & M);
     vnl_vector_vcl_complexLD & post_multiply(vnl_matrix_vcl_complexLD const & M);
     vnl_vector_vcl_complexLD & operator*=(vnl_matrix_vcl_complexLD const & m);
     vnl_vector_vcl_complexLD operator+() const;
     vnl_vector_vcl_complexLD operator-() const;
     vnl_vector_vcl_complexLD operator+(vcl_complexLD v) const;
     vnl_vector_vcl_complexLD operator-(vcl_complexLD v) const;
     vnl_vector_vcl_complexLD operator*(vcl_complexLD v) const;
     vnl_vector_vcl_complexLD operator/(vcl_complexLD v) const;
     vnl_vector_vcl_complexLD operator+(vnl_vector_vcl_complexLD const & v) const;
     vnl_vector_vcl_complexLD operator-(vnl_vector_vcl_complexLD const & v) const;
     vnl_vector_vcl_complexLD operator*(vnl_matrix_vcl_complexLD const & M) const;
     vcl_complexLD const * data_block() const;
     vcl_complexLD * data_block();
     vcl_complexLD * begin();
     vcl_complexLD * end();
     vcl_complexLD const * begin() const;
     vcl_complexLD const * end() const;
     vnl_vector_vcl_complexLD extract(unsigned int len, unsigned int start = 0) const;
     vnl_vector_vcl_complexLD & update(vnl_vector_vcl_complexLD const & arg0, unsigned int start = 0);
     long double squared_magnitude() const;
     long double magnitude() const;
     long double one_norm() const;
     long double two_norm() const;
     long double inf_norm() const;
     vnl_vector_vcl_complexLD & normalize();
     long double rms() const;
     vcl_complexLD min_value() const;
     vcl_complexLD max_value() const;
     vcl_complexLD mean() const;
     vcl_complexLD sum() const;
     void flip();
     void swap(vnl_vector_vcl_complexLD & that);
     void assert_size(unsigned int sz) const;
     void assert_finite() const;
     bool is_finite() const;
     bool is_zero() const;
     bool empty() const;
     bool operator_eq(vnl_vector_vcl_complexLD const & v) const;
     bool operator==(vnl_vector_vcl_complexLD const & that) const;
     bool operator!=(vnl_vector_vcl_complexLD const & that) const;
     bool set_size(unsigned int n);
     void clear();
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     static vnl_vector_vcl_complexLD read(std::basic_istream< char, std::char_traits< char > > & s);
   private:
   protected:
     void assert_size_internal(unsigned int sz) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


