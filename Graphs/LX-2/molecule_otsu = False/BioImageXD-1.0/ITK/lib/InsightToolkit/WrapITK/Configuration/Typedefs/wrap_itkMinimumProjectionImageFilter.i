// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkMinimumProjectionImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkMinimumProjectionImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkMinimumProjectionImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkMinimumProjectionImageFilterJava
#endif
#ifdef SWIGLUA
%module itkMinimumProjectionImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkMinimumProjectionImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkMinimumProjectionImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkMinimumProjectionImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkMinimumProjectionImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkMinimumProjectionImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkMinimumProjectionImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkMinimumProjectionImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkMinimumProjectionImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkMinimumProjectionImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkMinimumProjectionImageFilterPython
#endif
#ifdef SWIGR
%module itkMinimumProjectionImageFilterR
#endif
#ifdef SWIGRUBY
%module itkMinimumProjectionImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkMinimumProjectionImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkMinimumProjectionImageFilterTcl
#endif
#ifdef SWIGXML
%module itkMinimumProjectionImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Review.includes"
%}


%{
%}




%import wrap_itkImageToImageFilterB.i
%import wrap_ITKCommonBase.i
%import wrap_ITKRegions.i
%import wrap_itkImageToImageFilterA.i


%include itk.i
%include wrap_itkMinimumProjectionImageFilter_ext.i


 class itkMinimumProjectionImageFilterID2ID2_Pointer {
   public:
     itkMinimumProjectionImageFilterID2ID2_Pointer();
     itkMinimumProjectionImageFilterID2ID2_Pointer(itkMinimumProjectionImageFilterID2ID2_Pointer const & p);
     itkMinimumProjectionImageFilterID2ID2_Pointer(itkMinimumProjectionImageFilterID2ID2 * p);
     ~itkMinimumProjectionImageFilterID2ID2_Pointer();
     itkMinimumProjectionImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterID2ID2_Pointer const & r) const;
     itkMinimumProjectionImageFilterID2ID2_Pointer & operator=(itkMinimumProjectionImageFilterID2ID2_Pointer const & r);
     itkMinimumProjectionImageFilterID2ID2_Pointer & operator=(itkMinimumProjectionImageFilterID2ID2 * r);
     itkMinimumProjectionImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterID2ID2_Superclass : public itkImageToImageFilterID2ID2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  ImageDimensionCheck = 1 };
     static itkMinimumProjectionImageFilterID2ID2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetProjectionDimension(unsigned int const _arg);
     virtual unsigned int const & GetProjectionDimension() const;
   private:
     itkMinimumProjectionImageFilterID2ID2_Superclass(itkMinimumProjectionImageFilterID2ID2_Superclass const & arg0);
     void operator=(itkMinimumProjectionImageFilterID2ID2_Superclass const & arg0);
   protected:
     itkMinimumProjectionImageFilterID2ID2_Superclass();
     ~itkMinimumProjectionImageFilterID2ID2_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual itk::Function::MinimumAccumulator< double > NewAccumulator(unsigned long arg0) const;
 };


 class itkMinimumProjectionImageFilterID2ID2_Superclass_Pointer {
   public:
     itkMinimumProjectionImageFilterID2ID2_Superclass_Pointer();
     itkMinimumProjectionImageFilterID2ID2_Superclass_Pointer(itkMinimumProjectionImageFilterID2ID2_Superclass_Pointer const & p);
     itkMinimumProjectionImageFilterID2ID2_Superclass_Pointer(itkMinimumProjectionImageFilterID2ID2_Superclass * p);
     ~itkMinimumProjectionImageFilterID2ID2_Superclass_Pointer();
     itkMinimumProjectionImageFilterID2ID2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterID2ID2_Superclass * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterID2ID2_Superclass_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterID2ID2_Superclass_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterID2ID2_Superclass_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterID2ID2_Superclass_Pointer const & r) const;
     itkMinimumProjectionImageFilterID2ID2_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterID2ID2_Superclass_Pointer const & r);
     itkMinimumProjectionImageFilterID2ID2_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterID2ID2_Superclass * r);
     itkMinimumProjectionImageFilterID2ID2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterID3ID2_Pointer {
   public:
     itkMinimumProjectionImageFilterID3ID2_Pointer();
     itkMinimumProjectionImageFilterID3ID2_Pointer(itkMinimumProjectionImageFilterID3ID2_Pointer const & p);
     itkMinimumProjectionImageFilterID3ID2_Pointer(itkMinimumProjectionImageFilterID3ID2 * p);
     ~itkMinimumProjectionImageFilterID3ID2_Pointer();
     itkMinimumProjectionImageFilterID3ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterID3ID2 * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterID3ID2_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterID3ID2_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterID3ID2_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterID3ID2_Pointer const & r) const;
     itkMinimumProjectionImageFilterID3ID2_Pointer & operator=(itkMinimumProjectionImageFilterID3ID2_Pointer const & r);
     itkMinimumProjectionImageFilterID3ID2_Pointer & operator=(itkMinimumProjectionImageFilterID3ID2 * r);
     itkMinimumProjectionImageFilterID3ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterID3ID2_Superclass : public itkImageToImageFilterID3ID2 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 2 };
     enum  {  ImageDimensionCheck = 1 };
     static itkMinimumProjectionImageFilterID3ID2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetProjectionDimension(unsigned int const _arg);
     virtual unsigned int const & GetProjectionDimension() const;
   private:
     itkMinimumProjectionImageFilterID3ID2_Superclass(itkMinimumProjectionImageFilterID3ID2_Superclass const & arg0);
     void operator=(itkMinimumProjectionImageFilterID3ID2_Superclass const & arg0);
   protected:
     itkMinimumProjectionImageFilterID3ID2_Superclass();
     ~itkMinimumProjectionImageFilterID3ID2_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual itk::Function::MinimumAccumulator< double > NewAccumulator(unsigned long arg0) const;
 };


 class itkMinimumProjectionImageFilterID3ID2_Superclass_Pointer {
   public:
     itkMinimumProjectionImageFilterID3ID2_Superclass_Pointer();
     itkMinimumProjectionImageFilterID3ID2_Superclass_Pointer(itkMinimumProjectionImageFilterID3ID2_Superclass_Pointer const & p);
     itkMinimumProjectionImageFilterID3ID2_Superclass_Pointer(itkMinimumProjectionImageFilterID3ID2_Superclass * p);
     ~itkMinimumProjectionImageFilterID3ID2_Superclass_Pointer();
     itkMinimumProjectionImageFilterID3ID2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterID3ID2_Superclass * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterID3ID2_Superclass_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterID3ID2_Superclass_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterID3ID2_Superclass_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterID3ID2_Superclass_Pointer const & r) const;
     itkMinimumProjectionImageFilterID3ID2_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterID3ID2_Superclass_Pointer const & r);
     itkMinimumProjectionImageFilterID3ID2_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterID3ID2_Superclass * r);
     itkMinimumProjectionImageFilterID3ID2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterID3ID3_Pointer {
   public:
     itkMinimumProjectionImageFilterID3ID3_Pointer();
     itkMinimumProjectionImageFilterID3ID3_Pointer(itkMinimumProjectionImageFilterID3ID3_Pointer const & p);
     itkMinimumProjectionImageFilterID3ID3_Pointer(itkMinimumProjectionImageFilterID3ID3 * p);
     ~itkMinimumProjectionImageFilterID3ID3_Pointer();
     itkMinimumProjectionImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterID3ID3_Pointer const & r) const;
     itkMinimumProjectionImageFilterID3ID3_Pointer & operator=(itkMinimumProjectionImageFilterID3ID3_Pointer const & r);
     itkMinimumProjectionImageFilterID3ID3_Pointer & operator=(itkMinimumProjectionImageFilterID3ID3 * r);
     itkMinimumProjectionImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterID3ID3_Superclass : public itkImageToImageFilterID3ID3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  ImageDimensionCheck = 1 };
     static itkMinimumProjectionImageFilterID3ID3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetProjectionDimension(unsigned int const _arg);
     virtual unsigned int const & GetProjectionDimension() const;
   private:
     itkMinimumProjectionImageFilterID3ID3_Superclass(itkMinimumProjectionImageFilterID3ID3_Superclass const & arg0);
     void operator=(itkMinimumProjectionImageFilterID3ID3_Superclass const & arg0);
   protected:
     itkMinimumProjectionImageFilterID3ID3_Superclass();
     ~itkMinimumProjectionImageFilterID3ID3_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual itk::Function::MinimumAccumulator< double > NewAccumulator(unsigned long arg0) const;
 };


 class itkMinimumProjectionImageFilterID3ID3_Superclass_Pointer {
   public:
     itkMinimumProjectionImageFilterID3ID3_Superclass_Pointer();
     itkMinimumProjectionImageFilterID3ID3_Superclass_Pointer(itkMinimumProjectionImageFilterID3ID3_Superclass_Pointer const & p);
     itkMinimumProjectionImageFilterID3ID3_Superclass_Pointer(itkMinimumProjectionImageFilterID3ID3_Superclass * p);
     ~itkMinimumProjectionImageFilterID3ID3_Superclass_Pointer();
     itkMinimumProjectionImageFilterID3ID3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterID3ID3_Superclass * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterID3ID3_Superclass_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterID3ID3_Superclass_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterID3ID3_Superclass_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterID3ID3_Superclass_Pointer const & r) const;
     itkMinimumProjectionImageFilterID3ID3_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterID3ID3_Superclass_Pointer const & r);
     itkMinimumProjectionImageFilterID3ID3_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterID3ID3_Superclass * r);
     itkMinimumProjectionImageFilterID3ID3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterIF2IF2_Pointer {
   public:
     itkMinimumProjectionImageFilterIF2IF2_Pointer();
     itkMinimumProjectionImageFilterIF2IF2_Pointer(itkMinimumProjectionImageFilterIF2IF2_Pointer const & p);
     itkMinimumProjectionImageFilterIF2IF2_Pointer(itkMinimumProjectionImageFilterIF2IF2 * p);
     ~itkMinimumProjectionImageFilterIF2IF2_Pointer();
     itkMinimumProjectionImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterIF2IF2_Pointer const & r) const;
     itkMinimumProjectionImageFilterIF2IF2_Pointer & operator=(itkMinimumProjectionImageFilterIF2IF2_Pointer const & r);
     itkMinimumProjectionImageFilterIF2IF2_Pointer & operator=(itkMinimumProjectionImageFilterIF2IF2 * r);
     itkMinimumProjectionImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterIF2IF2_Superclass : public itkImageToImageFilterIF2IF2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  ImageDimensionCheck = 1 };
     static itkMinimumProjectionImageFilterIF2IF2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetProjectionDimension(unsigned int const _arg);
     virtual unsigned int const & GetProjectionDimension() const;
   private:
     itkMinimumProjectionImageFilterIF2IF2_Superclass(itkMinimumProjectionImageFilterIF2IF2_Superclass const & arg0);
     void operator=(itkMinimumProjectionImageFilterIF2IF2_Superclass const & arg0);
   protected:
     itkMinimumProjectionImageFilterIF2IF2_Superclass();
     ~itkMinimumProjectionImageFilterIF2IF2_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual itk::Function::MinimumAccumulator< float > NewAccumulator(unsigned long arg0) const;
 };


 class itkMinimumProjectionImageFilterIF2IF2_Superclass_Pointer {
   public:
     itkMinimumProjectionImageFilterIF2IF2_Superclass_Pointer();
     itkMinimumProjectionImageFilterIF2IF2_Superclass_Pointer(itkMinimumProjectionImageFilterIF2IF2_Superclass_Pointer const & p);
     itkMinimumProjectionImageFilterIF2IF2_Superclass_Pointer(itkMinimumProjectionImageFilterIF2IF2_Superclass * p);
     ~itkMinimumProjectionImageFilterIF2IF2_Superclass_Pointer();
     itkMinimumProjectionImageFilterIF2IF2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterIF2IF2_Superclass * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterIF2IF2_Superclass_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterIF2IF2_Superclass_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterIF2IF2_Superclass_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterIF2IF2_Superclass_Pointer const & r) const;
     itkMinimumProjectionImageFilterIF2IF2_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterIF2IF2_Superclass_Pointer const & r);
     itkMinimumProjectionImageFilterIF2IF2_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterIF2IF2_Superclass * r);
     itkMinimumProjectionImageFilterIF2IF2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterIF3IF2_Pointer {
   public:
     itkMinimumProjectionImageFilterIF3IF2_Pointer();
     itkMinimumProjectionImageFilterIF3IF2_Pointer(itkMinimumProjectionImageFilterIF3IF2_Pointer const & p);
     itkMinimumProjectionImageFilterIF3IF2_Pointer(itkMinimumProjectionImageFilterIF3IF2 * p);
     ~itkMinimumProjectionImageFilterIF3IF2_Pointer();
     itkMinimumProjectionImageFilterIF3IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterIF3IF2 * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterIF3IF2_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterIF3IF2_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterIF3IF2_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterIF3IF2_Pointer const & r) const;
     itkMinimumProjectionImageFilterIF3IF2_Pointer & operator=(itkMinimumProjectionImageFilterIF3IF2_Pointer const & r);
     itkMinimumProjectionImageFilterIF3IF2_Pointer & operator=(itkMinimumProjectionImageFilterIF3IF2 * r);
     itkMinimumProjectionImageFilterIF3IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterIF3IF2_Superclass : public itkImageToImageFilterIF3IF2 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 2 };
     enum  {  ImageDimensionCheck = 1 };
     static itkMinimumProjectionImageFilterIF3IF2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetProjectionDimension(unsigned int const _arg);
     virtual unsigned int const & GetProjectionDimension() const;
   private:
     itkMinimumProjectionImageFilterIF3IF2_Superclass(itkMinimumProjectionImageFilterIF3IF2_Superclass const & arg0);
     void operator=(itkMinimumProjectionImageFilterIF3IF2_Superclass const & arg0);
   protected:
     itkMinimumProjectionImageFilterIF3IF2_Superclass();
     ~itkMinimumProjectionImageFilterIF3IF2_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual itk::Function::MinimumAccumulator< float > NewAccumulator(unsigned long arg0) const;
 };


 class itkMinimumProjectionImageFilterIF3IF2_Superclass_Pointer {
   public:
     itkMinimumProjectionImageFilterIF3IF2_Superclass_Pointer();
     itkMinimumProjectionImageFilterIF3IF2_Superclass_Pointer(itkMinimumProjectionImageFilterIF3IF2_Superclass_Pointer const & p);
     itkMinimumProjectionImageFilterIF3IF2_Superclass_Pointer(itkMinimumProjectionImageFilterIF3IF2_Superclass * p);
     ~itkMinimumProjectionImageFilterIF3IF2_Superclass_Pointer();
     itkMinimumProjectionImageFilterIF3IF2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterIF3IF2_Superclass * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterIF3IF2_Superclass_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterIF3IF2_Superclass_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterIF3IF2_Superclass_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterIF3IF2_Superclass_Pointer const & r) const;
     itkMinimumProjectionImageFilterIF3IF2_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterIF3IF2_Superclass_Pointer const & r);
     itkMinimumProjectionImageFilterIF3IF2_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterIF3IF2_Superclass * r);
     itkMinimumProjectionImageFilterIF3IF2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterIF3IF3_Pointer {
   public:
     itkMinimumProjectionImageFilterIF3IF3_Pointer();
     itkMinimumProjectionImageFilterIF3IF3_Pointer(itkMinimumProjectionImageFilterIF3IF3_Pointer const & p);
     itkMinimumProjectionImageFilterIF3IF3_Pointer(itkMinimumProjectionImageFilterIF3IF3 * p);
     ~itkMinimumProjectionImageFilterIF3IF3_Pointer();
     itkMinimumProjectionImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterIF3IF3_Pointer const & r) const;
     itkMinimumProjectionImageFilterIF3IF3_Pointer & operator=(itkMinimumProjectionImageFilterIF3IF3_Pointer const & r);
     itkMinimumProjectionImageFilterIF3IF3_Pointer & operator=(itkMinimumProjectionImageFilterIF3IF3 * r);
     itkMinimumProjectionImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterIF3IF3_Superclass : public itkImageToImageFilterIF3IF3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  ImageDimensionCheck = 1 };
     static itkMinimumProjectionImageFilterIF3IF3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetProjectionDimension(unsigned int const _arg);
     virtual unsigned int const & GetProjectionDimension() const;
   private:
     itkMinimumProjectionImageFilterIF3IF3_Superclass(itkMinimumProjectionImageFilterIF3IF3_Superclass const & arg0);
     void operator=(itkMinimumProjectionImageFilterIF3IF3_Superclass const & arg0);
   protected:
     itkMinimumProjectionImageFilterIF3IF3_Superclass();
     ~itkMinimumProjectionImageFilterIF3IF3_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual itk::Function::MinimumAccumulator< float > NewAccumulator(unsigned long arg0) const;
 };


 class itkMinimumProjectionImageFilterIF3IF3_Superclass_Pointer {
   public:
     itkMinimumProjectionImageFilterIF3IF3_Superclass_Pointer();
     itkMinimumProjectionImageFilterIF3IF3_Superclass_Pointer(itkMinimumProjectionImageFilterIF3IF3_Superclass_Pointer const & p);
     itkMinimumProjectionImageFilterIF3IF3_Superclass_Pointer(itkMinimumProjectionImageFilterIF3IF3_Superclass * p);
     ~itkMinimumProjectionImageFilterIF3IF3_Superclass_Pointer();
     itkMinimumProjectionImageFilterIF3IF3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterIF3IF3_Superclass * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterIF3IF3_Superclass_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterIF3IF3_Superclass_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterIF3IF3_Superclass_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterIF3IF3_Superclass_Pointer const & r) const;
     itkMinimumProjectionImageFilterIF3IF3_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterIF3IF3_Superclass_Pointer const & r);
     itkMinimumProjectionImageFilterIF3IF3_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterIF3IF3_Superclass * r);
     itkMinimumProjectionImageFilterIF3IF3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterIUC2IUC2_Pointer {
   public:
     itkMinimumProjectionImageFilterIUC2IUC2_Pointer();
     itkMinimumProjectionImageFilterIUC2IUC2_Pointer(itkMinimumProjectionImageFilterIUC2IUC2_Pointer const & p);
     itkMinimumProjectionImageFilterIUC2IUC2_Pointer(itkMinimumProjectionImageFilterIUC2IUC2 * p);
     ~itkMinimumProjectionImageFilterIUC2IUC2_Pointer();
     itkMinimumProjectionImageFilterIUC2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterIUC2IUC2 * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterIUC2IUC2_Pointer const & r) const;
     itkMinimumProjectionImageFilterIUC2IUC2_Pointer & operator=(itkMinimumProjectionImageFilterIUC2IUC2_Pointer const & r);
     itkMinimumProjectionImageFilterIUC2IUC2_Pointer & operator=(itkMinimumProjectionImageFilterIUC2IUC2 * r);
     itkMinimumProjectionImageFilterIUC2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterIUC2IUC2_Superclass : public itkImageToImageFilterIUC2IUC2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  ImageDimensionCheck = 1 };
     static itkMinimumProjectionImageFilterIUC2IUC2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetProjectionDimension(unsigned int const _arg);
     virtual unsigned int const & GetProjectionDimension() const;
   private:
     itkMinimumProjectionImageFilterIUC2IUC2_Superclass(itkMinimumProjectionImageFilterIUC2IUC2_Superclass const & arg0);
     void operator=(itkMinimumProjectionImageFilterIUC2IUC2_Superclass const & arg0);
   protected:
     itkMinimumProjectionImageFilterIUC2IUC2_Superclass();
     ~itkMinimumProjectionImageFilterIUC2IUC2_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual itk::Function::MinimumAccumulator< unsigned char > NewAccumulator(unsigned long arg0) const;
 };


 class itkMinimumProjectionImageFilterIUC2IUC2_Superclass_Pointer {
   public:
     itkMinimumProjectionImageFilterIUC2IUC2_Superclass_Pointer();
     itkMinimumProjectionImageFilterIUC2IUC2_Superclass_Pointer(itkMinimumProjectionImageFilterIUC2IUC2_Superclass_Pointer const & p);
     itkMinimumProjectionImageFilterIUC2IUC2_Superclass_Pointer(itkMinimumProjectionImageFilterIUC2IUC2_Superclass * p);
     ~itkMinimumProjectionImageFilterIUC2IUC2_Superclass_Pointer();
     itkMinimumProjectionImageFilterIUC2IUC2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterIUC2IUC2_Superclass * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterIUC2IUC2_Superclass_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterIUC2IUC2_Superclass_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterIUC2IUC2_Superclass_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterIUC2IUC2_Superclass_Pointer const & r) const;
     itkMinimumProjectionImageFilterIUC2IUC2_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterIUC2IUC2_Superclass_Pointer const & r);
     itkMinimumProjectionImageFilterIUC2IUC2_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterIUC2IUC2_Superclass * r);
     itkMinimumProjectionImageFilterIUC2IUC2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterIUC3IUC2_Pointer {
   public:
     itkMinimumProjectionImageFilterIUC3IUC2_Pointer();
     itkMinimumProjectionImageFilterIUC3IUC2_Pointer(itkMinimumProjectionImageFilterIUC3IUC2_Pointer const & p);
     itkMinimumProjectionImageFilterIUC3IUC2_Pointer(itkMinimumProjectionImageFilterIUC3IUC2 * p);
     ~itkMinimumProjectionImageFilterIUC3IUC2_Pointer();
     itkMinimumProjectionImageFilterIUC3IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterIUC3IUC2 * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterIUC3IUC2_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterIUC3IUC2_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterIUC3IUC2_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterIUC3IUC2_Pointer const & r) const;
     itkMinimumProjectionImageFilterIUC3IUC2_Pointer & operator=(itkMinimumProjectionImageFilterIUC3IUC2_Pointer const & r);
     itkMinimumProjectionImageFilterIUC3IUC2_Pointer & operator=(itkMinimumProjectionImageFilterIUC3IUC2 * r);
     itkMinimumProjectionImageFilterIUC3IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterIUC3IUC2_Superclass : public itkImageToImageFilterIUC3IUC2 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 2 };
     enum  {  ImageDimensionCheck = 1 };
     static itkMinimumProjectionImageFilterIUC3IUC2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetProjectionDimension(unsigned int const _arg);
     virtual unsigned int const & GetProjectionDimension() const;
   private:
     itkMinimumProjectionImageFilterIUC3IUC2_Superclass(itkMinimumProjectionImageFilterIUC3IUC2_Superclass const & arg0);
     void operator=(itkMinimumProjectionImageFilterIUC3IUC2_Superclass const & arg0);
   protected:
     itkMinimumProjectionImageFilterIUC3IUC2_Superclass();
     ~itkMinimumProjectionImageFilterIUC3IUC2_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual itk::Function::MinimumAccumulator< unsigned char > NewAccumulator(unsigned long arg0) const;
 };


 class itkMinimumProjectionImageFilterIUC3IUC2_Superclass_Pointer {
   public:
     itkMinimumProjectionImageFilterIUC3IUC2_Superclass_Pointer();
     itkMinimumProjectionImageFilterIUC3IUC2_Superclass_Pointer(itkMinimumProjectionImageFilterIUC3IUC2_Superclass_Pointer const & p);
     itkMinimumProjectionImageFilterIUC3IUC2_Superclass_Pointer(itkMinimumProjectionImageFilterIUC3IUC2_Superclass * p);
     ~itkMinimumProjectionImageFilterIUC3IUC2_Superclass_Pointer();
     itkMinimumProjectionImageFilterIUC3IUC2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterIUC3IUC2_Superclass * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterIUC3IUC2_Superclass_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterIUC3IUC2_Superclass_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterIUC3IUC2_Superclass_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterIUC3IUC2_Superclass_Pointer const & r) const;
     itkMinimumProjectionImageFilterIUC3IUC2_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterIUC3IUC2_Superclass_Pointer const & r);
     itkMinimumProjectionImageFilterIUC3IUC2_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterIUC3IUC2_Superclass * r);
     itkMinimumProjectionImageFilterIUC3IUC2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterIUC3IUC3_Pointer {
   public:
     itkMinimumProjectionImageFilterIUC3IUC3_Pointer();
     itkMinimumProjectionImageFilterIUC3IUC3_Pointer(itkMinimumProjectionImageFilterIUC3IUC3_Pointer const & p);
     itkMinimumProjectionImageFilterIUC3IUC3_Pointer(itkMinimumProjectionImageFilterIUC3IUC3 * p);
     ~itkMinimumProjectionImageFilterIUC3IUC3_Pointer();
     itkMinimumProjectionImageFilterIUC3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterIUC3IUC3 * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterIUC3IUC3_Pointer const & r) const;
     itkMinimumProjectionImageFilterIUC3IUC3_Pointer & operator=(itkMinimumProjectionImageFilterIUC3IUC3_Pointer const & r);
     itkMinimumProjectionImageFilterIUC3IUC3_Pointer & operator=(itkMinimumProjectionImageFilterIUC3IUC3 * r);
     itkMinimumProjectionImageFilterIUC3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterIUC3IUC3_Superclass : public itkImageToImageFilterIUC3IUC3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  ImageDimensionCheck = 1 };
     static itkMinimumProjectionImageFilterIUC3IUC3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetProjectionDimension(unsigned int const _arg);
     virtual unsigned int const & GetProjectionDimension() const;
   private:
     itkMinimumProjectionImageFilterIUC3IUC3_Superclass(itkMinimumProjectionImageFilterIUC3IUC3_Superclass const & arg0);
     void operator=(itkMinimumProjectionImageFilterIUC3IUC3_Superclass const & arg0);
   protected:
     itkMinimumProjectionImageFilterIUC3IUC3_Superclass();
     ~itkMinimumProjectionImageFilterIUC3IUC3_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual itk::Function::MinimumAccumulator< unsigned char > NewAccumulator(unsigned long arg0) const;
 };


 class itkMinimumProjectionImageFilterIUC3IUC3_Superclass_Pointer {
   public:
     itkMinimumProjectionImageFilterIUC3IUC3_Superclass_Pointer();
     itkMinimumProjectionImageFilterIUC3IUC3_Superclass_Pointer(itkMinimumProjectionImageFilterIUC3IUC3_Superclass_Pointer const & p);
     itkMinimumProjectionImageFilterIUC3IUC3_Superclass_Pointer(itkMinimumProjectionImageFilterIUC3IUC3_Superclass * p);
     ~itkMinimumProjectionImageFilterIUC3IUC3_Superclass_Pointer();
     itkMinimumProjectionImageFilterIUC3IUC3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterIUC3IUC3_Superclass * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterIUC3IUC3_Superclass_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterIUC3IUC3_Superclass_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterIUC3IUC3_Superclass_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterIUC3IUC3_Superclass_Pointer const & r) const;
     itkMinimumProjectionImageFilterIUC3IUC3_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterIUC3IUC3_Superclass_Pointer const & r);
     itkMinimumProjectionImageFilterIUC3IUC3_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterIUC3IUC3_Superclass * r);
     itkMinimumProjectionImageFilterIUC3IUC3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterIUL2IUL2_Pointer {
   public:
     itkMinimumProjectionImageFilterIUL2IUL2_Pointer();
     itkMinimumProjectionImageFilterIUL2IUL2_Pointer(itkMinimumProjectionImageFilterIUL2IUL2_Pointer const & p);
     itkMinimumProjectionImageFilterIUL2IUL2_Pointer(itkMinimumProjectionImageFilterIUL2IUL2 * p);
     ~itkMinimumProjectionImageFilterIUL2IUL2_Pointer();
     itkMinimumProjectionImageFilterIUL2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterIUL2IUL2 * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterIUL2IUL2_Pointer const & r) const;
     itkMinimumProjectionImageFilterIUL2IUL2_Pointer & operator=(itkMinimumProjectionImageFilterIUL2IUL2_Pointer const & r);
     itkMinimumProjectionImageFilterIUL2IUL2_Pointer & operator=(itkMinimumProjectionImageFilterIUL2IUL2 * r);
     itkMinimumProjectionImageFilterIUL2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterIUL2IUL2_Superclass : public itkImageToImageFilterIUL2IUL2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  ImageDimensionCheck = 1 };
     static itkMinimumProjectionImageFilterIUL2IUL2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetProjectionDimension(unsigned int const _arg);
     virtual unsigned int const & GetProjectionDimension() const;
   private:
     itkMinimumProjectionImageFilterIUL2IUL2_Superclass(itkMinimumProjectionImageFilterIUL2IUL2_Superclass const & arg0);
     void operator=(itkMinimumProjectionImageFilterIUL2IUL2_Superclass const & arg0);
   protected:
     itkMinimumProjectionImageFilterIUL2IUL2_Superclass();
     ~itkMinimumProjectionImageFilterIUL2IUL2_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual itk::Function::MinimumAccumulator< unsigned long > NewAccumulator(unsigned long arg0) const;
 };


 class itkMinimumProjectionImageFilterIUL2IUL2_Superclass_Pointer {
   public:
     itkMinimumProjectionImageFilterIUL2IUL2_Superclass_Pointer();
     itkMinimumProjectionImageFilterIUL2IUL2_Superclass_Pointer(itkMinimumProjectionImageFilterIUL2IUL2_Superclass_Pointer const & p);
     itkMinimumProjectionImageFilterIUL2IUL2_Superclass_Pointer(itkMinimumProjectionImageFilterIUL2IUL2_Superclass * p);
     ~itkMinimumProjectionImageFilterIUL2IUL2_Superclass_Pointer();
     itkMinimumProjectionImageFilterIUL2IUL2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterIUL2IUL2_Superclass * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterIUL2IUL2_Superclass_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterIUL2IUL2_Superclass_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterIUL2IUL2_Superclass_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterIUL2IUL2_Superclass_Pointer const & r) const;
     itkMinimumProjectionImageFilterIUL2IUL2_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterIUL2IUL2_Superclass_Pointer const & r);
     itkMinimumProjectionImageFilterIUL2IUL2_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterIUL2IUL2_Superclass * r);
     itkMinimumProjectionImageFilterIUL2IUL2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterIUL3IUL2_Pointer {
   public:
     itkMinimumProjectionImageFilterIUL3IUL2_Pointer();
     itkMinimumProjectionImageFilterIUL3IUL2_Pointer(itkMinimumProjectionImageFilterIUL3IUL2_Pointer const & p);
     itkMinimumProjectionImageFilterIUL3IUL2_Pointer(itkMinimumProjectionImageFilterIUL3IUL2 * p);
     ~itkMinimumProjectionImageFilterIUL3IUL2_Pointer();
     itkMinimumProjectionImageFilterIUL3IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterIUL3IUL2 * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterIUL3IUL2_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterIUL3IUL2_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterIUL3IUL2_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterIUL3IUL2_Pointer const & r) const;
     itkMinimumProjectionImageFilterIUL3IUL2_Pointer & operator=(itkMinimumProjectionImageFilterIUL3IUL2_Pointer const & r);
     itkMinimumProjectionImageFilterIUL3IUL2_Pointer & operator=(itkMinimumProjectionImageFilterIUL3IUL2 * r);
     itkMinimumProjectionImageFilterIUL3IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterIUL3IUL2_Superclass : public itkImageToImageFilterIUL3IUL2 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 2 };
     enum  {  ImageDimensionCheck = 1 };
     static itkMinimumProjectionImageFilterIUL3IUL2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetProjectionDimension(unsigned int const _arg);
     virtual unsigned int const & GetProjectionDimension() const;
   private:
     itkMinimumProjectionImageFilterIUL3IUL2_Superclass(itkMinimumProjectionImageFilterIUL3IUL2_Superclass const & arg0);
     void operator=(itkMinimumProjectionImageFilterIUL3IUL2_Superclass const & arg0);
   protected:
     itkMinimumProjectionImageFilterIUL3IUL2_Superclass();
     ~itkMinimumProjectionImageFilterIUL3IUL2_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual itk::Function::MinimumAccumulator< unsigned long > NewAccumulator(unsigned long arg0) const;
 };


 class itkMinimumProjectionImageFilterIUL3IUL2_Superclass_Pointer {
   public:
     itkMinimumProjectionImageFilterIUL3IUL2_Superclass_Pointer();
     itkMinimumProjectionImageFilterIUL3IUL2_Superclass_Pointer(itkMinimumProjectionImageFilterIUL3IUL2_Superclass_Pointer const & p);
     itkMinimumProjectionImageFilterIUL3IUL2_Superclass_Pointer(itkMinimumProjectionImageFilterIUL3IUL2_Superclass * p);
     ~itkMinimumProjectionImageFilterIUL3IUL2_Superclass_Pointer();
     itkMinimumProjectionImageFilterIUL3IUL2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterIUL3IUL2_Superclass * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterIUL3IUL2_Superclass_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterIUL3IUL2_Superclass_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterIUL3IUL2_Superclass_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterIUL3IUL2_Superclass_Pointer const & r) const;
     itkMinimumProjectionImageFilterIUL3IUL2_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterIUL3IUL2_Superclass_Pointer const & r);
     itkMinimumProjectionImageFilterIUL3IUL2_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterIUL3IUL2_Superclass * r);
     itkMinimumProjectionImageFilterIUL3IUL2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterIUL3IUL3_Pointer {
   public:
     itkMinimumProjectionImageFilterIUL3IUL3_Pointer();
     itkMinimumProjectionImageFilterIUL3IUL3_Pointer(itkMinimumProjectionImageFilterIUL3IUL3_Pointer const & p);
     itkMinimumProjectionImageFilterIUL3IUL3_Pointer(itkMinimumProjectionImageFilterIUL3IUL3 * p);
     ~itkMinimumProjectionImageFilterIUL3IUL3_Pointer();
     itkMinimumProjectionImageFilterIUL3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterIUL3IUL3 * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterIUL3IUL3_Pointer const & r) const;
     itkMinimumProjectionImageFilterIUL3IUL3_Pointer & operator=(itkMinimumProjectionImageFilterIUL3IUL3_Pointer const & r);
     itkMinimumProjectionImageFilterIUL3IUL3_Pointer & operator=(itkMinimumProjectionImageFilterIUL3IUL3 * r);
     itkMinimumProjectionImageFilterIUL3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterIUL3IUL3_Superclass : public itkImageToImageFilterIUL3IUL3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  ImageDimensionCheck = 1 };
     static itkMinimumProjectionImageFilterIUL3IUL3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetProjectionDimension(unsigned int const _arg);
     virtual unsigned int const & GetProjectionDimension() const;
   private:
     itkMinimumProjectionImageFilterIUL3IUL3_Superclass(itkMinimumProjectionImageFilterIUL3IUL3_Superclass const & arg0);
     void operator=(itkMinimumProjectionImageFilterIUL3IUL3_Superclass const & arg0);
   protected:
     itkMinimumProjectionImageFilterIUL3IUL3_Superclass();
     ~itkMinimumProjectionImageFilterIUL3IUL3_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual itk::Function::MinimumAccumulator< unsigned long > NewAccumulator(unsigned long arg0) const;
 };


 class itkMinimumProjectionImageFilterIUL3IUL3_Superclass_Pointer {
   public:
     itkMinimumProjectionImageFilterIUL3IUL3_Superclass_Pointer();
     itkMinimumProjectionImageFilterIUL3IUL3_Superclass_Pointer(itkMinimumProjectionImageFilterIUL3IUL3_Superclass_Pointer const & p);
     itkMinimumProjectionImageFilterIUL3IUL3_Superclass_Pointer(itkMinimumProjectionImageFilterIUL3IUL3_Superclass * p);
     ~itkMinimumProjectionImageFilterIUL3IUL3_Superclass_Pointer();
     itkMinimumProjectionImageFilterIUL3IUL3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterIUL3IUL3_Superclass * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterIUL3IUL3_Superclass_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterIUL3IUL3_Superclass_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterIUL3IUL3_Superclass_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterIUL3IUL3_Superclass_Pointer const & r) const;
     itkMinimumProjectionImageFilterIUL3IUL3_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterIUL3IUL3_Superclass_Pointer const & r);
     itkMinimumProjectionImageFilterIUL3IUL3_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterIUL3IUL3_Superclass * r);
     itkMinimumProjectionImageFilterIUL3IUL3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterIUS2IUS2_Pointer {
   public:
     itkMinimumProjectionImageFilterIUS2IUS2_Pointer();
     itkMinimumProjectionImageFilterIUS2IUS2_Pointer(itkMinimumProjectionImageFilterIUS2IUS2_Pointer const & p);
     itkMinimumProjectionImageFilterIUS2IUS2_Pointer(itkMinimumProjectionImageFilterIUS2IUS2 * p);
     ~itkMinimumProjectionImageFilterIUS2IUS2_Pointer();
     itkMinimumProjectionImageFilterIUS2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterIUS2IUS2 * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterIUS2IUS2_Pointer const & r) const;
     itkMinimumProjectionImageFilterIUS2IUS2_Pointer & operator=(itkMinimumProjectionImageFilterIUS2IUS2_Pointer const & r);
     itkMinimumProjectionImageFilterIUS2IUS2_Pointer & operator=(itkMinimumProjectionImageFilterIUS2IUS2 * r);
     itkMinimumProjectionImageFilterIUS2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterIUS2IUS2_Superclass : public itkImageToImageFilterIUS2IUS2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  ImageDimensionCheck = 1 };
     static itkMinimumProjectionImageFilterIUS2IUS2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetProjectionDimension(unsigned int const _arg);
     virtual unsigned int const & GetProjectionDimension() const;
   private:
     itkMinimumProjectionImageFilterIUS2IUS2_Superclass(itkMinimumProjectionImageFilterIUS2IUS2_Superclass const & arg0);
     void operator=(itkMinimumProjectionImageFilterIUS2IUS2_Superclass const & arg0);
   protected:
     itkMinimumProjectionImageFilterIUS2IUS2_Superclass();
     ~itkMinimumProjectionImageFilterIUS2IUS2_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual itk::Function::MinimumAccumulator< unsigned short > NewAccumulator(unsigned long arg0) const;
 };


 class itkMinimumProjectionImageFilterIUS2IUS2_Superclass_Pointer {
   public:
     itkMinimumProjectionImageFilterIUS2IUS2_Superclass_Pointer();
     itkMinimumProjectionImageFilterIUS2IUS2_Superclass_Pointer(itkMinimumProjectionImageFilterIUS2IUS2_Superclass_Pointer const & p);
     itkMinimumProjectionImageFilterIUS2IUS2_Superclass_Pointer(itkMinimumProjectionImageFilterIUS2IUS2_Superclass * p);
     ~itkMinimumProjectionImageFilterIUS2IUS2_Superclass_Pointer();
     itkMinimumProjectionImageFilterIUS2IUS2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterIUS2IUS2_Superclass * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterIUS2IUS2_Superclass_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterIUS2IUS2_Superclass_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterIUS2IUS2_Superclass_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterIUS2IUS2_Superclass_Pointer const & r) const;
     itkMinimumProjectionImageFilterIUS2IUS2_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterIUS2IUS2_Superclass_Pointer const & r);
     itkMinimumProjectionImageFilterIUS2IUS2_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterIUS2IUS2_Superclass * r);
     itkMinimumProjectionImageFilterIUS2IUS2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterIUS3IUS2_Pointer {
   public:
     itkMinimumProjectionImageFilterIUS3IUS2_Pointer();
     itkMinimumProjectionImageFilterIUS3IUS2_Pointer(itkMinimumProjectionImageFilterIUS3IUS2_Pointer const & p);
     itkMinimumProjectionImageFilterIUS3IUS2_Pointer(itkMinimumProjectionImageFilterIUS3IUS2 * p);
     ~itkMinimumProjectionImageFilterIUS3IUS2_Pointer();
     itkMinimumProjectionImageFilterIUS3IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterIUS3IUS2 * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterIUS3IUS2_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterIUS3IUS2_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterIUS3IUS2_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterIUS3IUS2_Pointer const & r) const;
     itkMinimumProjectionImageFilterIUS3IUS2_Pointer & operator=(itkMinimumProjectionImageFilterIUS3IUS2_Pointer const & r);
     itkMinimumProjectionImageFilterIUS3IUS2_Pointer & operator=(itkMinimumProjectionImageFilterIUS3IUS2 * r);
     itkMinimumProjectionImageFilterIUS3IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterIUS3IUS2_Superclass : public itkImageToImageFilterIUS3IUS2 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 2 };
     enum  {  ImageDimensionCheck = 1 };
     static itkMinimumProjectionImageFilterIUS3IUS2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetProjectionDimension(unsigned int const _arg);
     virtual unsigned int const & GetProjectionDimension() const;
   private:
     itkMinimumProjectionImageFilterIUS3IUS2_Superclass(itkMinimumProjectionImageFilterIUS3IUS2_Superclass const & arg0);
     void operator=(itkMinimumProjectionImageFilterIUS3IUS2_Superclass const & arg0);
   protected:
     itkMinimumProjectionImageFilterIUS3IUS2_Superclass();
     ~itkMinimumProjectionImageFilterIUS3IUS2_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual itk::Function::MinimumAccumulator< unsigned short > NewAccumulator(unsigned long arg0) const;
 };


 class itkMinimumProjectionImageFilterIUS3IUS2_Superclass_Pointer {
   public:
     itkMinimumProjectionImageFilterIUS3IUS2_Superclass_Pointer();
     itkMinimumProjectionImageFilterIUS3IUS2_Superclass_Pointer(itkMinimumProjectionImageFilterIUS3IUS2_Superclass_Pointer const & p);
     itkMinimumProjectionImageFilterIUS3IUS2_Superclass_Pointer(itkMinimumProjectionImageFilterIUS3IUS2_Superclass * p);
     ~itkMinimumProjectionImageFilterIUS3IUS2_Superclass_Pointer();
     itkMinimumProjectionImageFilterIUS3IUS2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterIUS3IUS2_Superclass * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterIUS3IUS2_Superclass_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterIUS3IUS2_Superclass_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterIUS3IUS2_Superclass_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterIUS3IUS2_Superclass_Pointer const & r) const;
     itkMinimumProjectionImageFilterIUS3IUS2_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterIUS3IUS2_Superclass_Pointer const & r);
     itkMinimumProjectionImageFilterIUS3IUS2_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterIUS3IUS2_Superclass * r);
     itkMinimumProjectionImageFilterIUS3IUS2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterIUS3IUS3_Pointer {
   public:
     itkMinimumProjectionImageFilterIUS3IUS3_Pointer();
     itkMinimumProjectionImageFilterIUS3IUS3_Pointer(itkMinimumProjectionImageFilterIUS3IUS3_Pointer const & p);
     itkMinimumProjectionImageFilterIUS3IUS3_Pointer(itkMinimumProjectionImageFilterIUS3IUS3 * p);
     ~itkMinimumProjectionImageFilterIUS3IUS3_Pointer();
     itkMinimumProjectionImageFilterIUS3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterIUS3IUS3 * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterIUS3IUS3_Pointer const & r) const;
     itkMinimumProjectionImageFilterIUS3IUS3_Pointer & operator=(itkMinimumProjectionImageFilterIUS3IUS3_Pointer const & r);
     itkMinimumProjectionImageFilterIUS3IUS3_Pointer & operator=(itkMinimumProjectionImageFilterIUS3IUS3 * r);
     itkMinimumProjectionImageFilterIUS3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterIUS3IUS3_Superclass : public itkImageToImageFilterIUS3IUS3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  ImageDimensionCheck = 1 };
     static itkMinimumProjectionImageFilterIUS3IUS3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetProjectionDimension(unsigned int const _arg);
     virtual unsigned int const & GetProjectionDimension() const;
   private:
     itkMinimumProjectionImageFilterIUS3IUS3_Superclass(itkMinimumProjectionImageFilterIUS3IUS3_Superclass const & arg0);
     void operator=(itkMinimumProjectionImageFilterIUS3IUS3_Superclass const & arg0);
   protected:
     itkMinimumProjectionImageFilterIUS3IUS3_Superclass();
     ~itkMinimumProjectionImageFilterIUS3IUS3_Superclass();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual itk::Function::MinimumAccumulator< unsigned short > NewAccumulator(unsigned long arg0) const;
 };


 class itkMinimumProjectionImageFilterIUS3IUS3_Superclass_Pointer {
   public:
     itkMinimumProjectionImageFilterIUS3IUS3_Superclass_Pointer();
     itkMinimumProjectionImageFilterIUS3IUS3_Superclass_Pointer(itkMinimumProjectionImageFilterIUS3IUS3_Superclass_Pointer const & p);
     itkMinimumProjectionImageFilterIUS3IUS3_Superclass_Pointer(itkMinimumProjectionImageFilterIUS3IUS3_Superclass * p);
     ~itkMinimumProjectionImageFilterIUS3IUS3_Superclass_Pointer();
     itkMinimumProjectionImageFilterIUS3IUS3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMinimumProjectionImageFilterIUS3IUS3_Superclass * GetPointer() const;
     bool operator<(itkMinimumProjectionImageFilterIUS3IUS3_Superclass_Pointer const & r) const;
     bool operator>(itkMinimumProjectionImageFilterIUS3IUS3_Superclass_Pointer const & r) const;
     bool operator<=(itkMinimumProjectionImageFilterIUS3IUS3_Superclass_Pointer const & r) const;
     bool operator>=(itkMinimumProjectionImageFilterIUS3IUS3_Superclass_Pointer const & r) const;
     itkMinimumProjectionImageFilterIUS3IUS3_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterIUS3IUS3_Superclass_Pointer const & r);
     itkMinimumProjectionImageFilterIUS3IUS3_Superclass_Pointer & operator=(itkMinimumProjectionImageFilterIUS3IUS3_Superclass * r);
     itkMinimumProjectionImageFilterIUS3IUS3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMinimumProjectionImageFilterID2ID2 : public itkMinimumProjectionImageFilterID2ID2_Superclass {
   public:
     enum  {  InputPixelTypeGreaterThanComparable = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkMinimumProjectionImageFilterID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
   private:
     itkMinimumProjectionImageFilterID2ID2(itkMinimumProjectionImageFilterID2ID2 const & arg0);
     void operator=(itkMinimumProjectionImageFilterID2ID2 const & arg0);
   protected:
     itkMinimumProjectionImageFilterID2ID2();
     ~itkMinimumProjectionImageFilterID2ID2();
 };


 class itkMinimumProjectionImageFilterID3ID2 : public itkMinimumProjectionImageFilterID3ID2_Superclass {
   public:
     enum  {  InputPixelTypeGreaterThanComparable = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkMinimumProjectionImageFilterID3ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
   private:
     itkMinimumProjectionImageFilterID3ID2(itkMinimumProjectionImageFilterID3ID2 const & arg0);
     void operator=(itkMinimumProjectionImageFilterID3ID2 const & arg0);
   protected:
     itkMinimumProjectionImageFilterID3ID2();
     ~itkMinimumProjectionImageFilterID3ID2();
 };


 class itkMinimumProjectionImageFilterID3ID3 : public itkMinimumProjectionImageFilterID3ID3_Superclass {
   public:
     enum  {  InputPixelTypeGreaterThanComparable = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkMinimumProjectionImageFilterID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
   private:
     itkMinimumProjectionImageFilterID3ID3(itkMinimumProjectionImageFilterID3ID3 const & arg0);
     void operator=(itkMinimumProjectionImageFilterID3ID3 const & arg0);
   protected:
     itkMinimumProjectionImageFilterID3ID3();
     ~itkMinimumProjectionImageFilterID3ID3();
 };


 class itkMinimumProjectionImageFilterIF2IF2 : public itkMinimumProjectionImageFilterIF2IF2_Superclass {
   public:
     enum  {  InputPixelTypeGreaterThanComparable = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkMinimumProjectionImageFilterIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
   private:
     itkMinimumProjectionImageFilterIF2IF2(itkMinimumProjectionImageFilterIF2IF2 const & arg0);
     void operator=(itkMinimumProjectionImageFilterIF2IF2 const & arg0);
   protected:
     itkMinimumProjectionImageFilterIF2IF2();
     ~itkMinimumProjectionImageFilterIF2IF2();
 };


 class itkMinimumProjectionImageFilterIF3IF2 : public itkMinimumProjectionImageFilterIF3IF2_Superclass {
   public:
     enum  {  InputPixelTypeGreaterThanComparable = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkMinimumProjectionImageFilterIF3IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
   private:
     itkMinimumProjectionImageFilterIF3IF2(itkMinimumProjectionImageFilterIF3IF2 const & arg0);
     void operator=(itkMinimumProjectionImageFilterIF3IF2 const & arg0);
   protected:
     itkMinimumProjectionImageFilterIF3IF2();
     ~itkMinimumProjectionImageFilterIF3IF2();
 };


 class itkMinimumProjectionImageFilterIF3IF3 : public itkMinimumProjectionImageFilterIF3IF3_Superclass {
   public:
     enum  {  InputPixelTypeGreaterThanComparable = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkMinimumProjectionImageFilterIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
   private:
     itkMinimumProjectionImageFilterIF3IF3(itkMinimumProjectionImageFilterIF3IF3 const & arg0);
     void operator=(itkMinimumProjectionImageFilterIF3IF3 const & arg0);
   protected:
     itkMinimumProjectionImageFilterIF3IF3();
     ~itkMinimumProjectionImageFilterIF3IF3();
 };


 class itkMinimumProjectionImageFilterIUC2IUC2 : public itkMinimumProjectionImageFilterIUC2IUC2_Superclass {
   public:
     enum  {  InputPixelTypeGreaterThanComparable = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkMinimumProjectionImageFilterIUC2IUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
   private:
     itkMinimumProjectionImageFilterIUC2IUC2(itkMinimumProjectionImageFilterIUC2IUC2 const & arg0);
     void operator=(itkMinimumProjectionImageFilterIUC2IUC2 const & arg0);
   protected:
     itkMinimumProjectionImageFilterIUC2IUC2();
     ~itkMinimumProjectionImageFilterIUC2IUC2();
 };


 class itkMinimumProjectionImageFilterIUC3IUC2 : public itkMinimumProjectionImageFilterIUC3IUC2_Superclass {
   public:
     enum  {  InputPixelTypeGreaterThanComparable = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkMinimumProjectionImageFilterIUC3IUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
   private:
     itkMinimumProjectionImageFilterIUC3IUC2(itkMinimumProjectionImageFilterIUC3IUC2 const & arg0);
     void operator=(itkMinimumProjectionImageFilterIUC3IUC2 const & arg0);
   protected:
     itkMinimumProjectionImageFilterIUC3IUC2();
     ~itkMinimumProjectionImageFilterIUC3IUC2();
 };


 class itkMinimumProjectionImageFilterIUC3IUC3 : public itkMinimumProjectionImageFilterIUC3IUC3_Superclass {
   public:
     enum  {  InputPixelTypeGreaterThanComparable = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkMinimumProjectionImageFilterIUC3IUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
   private:
     itkMinimumProjectionImageFilterIUC3IUC3(itkMinimumProjectionImageFilterIUC3IUC3 const & arg0);
     void operator=(itkMinimumProjectionImageFilterIUC3IUC3 const & arg0);
   protected:
     itkMinimumProjectionImageFilterIUC3IUC3();
     ~itkMinimumProjectionImageFilterIUC3IUC3();
 };


 class itkMinimumProjectionImageFilterIUL2IUL2 : public itkMinimumProjectionImageFilterIUL2IUL2_Superclass {
   public:
     enum  {  InputPixelTypeGreaterThanComparable = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkMinimumProjectionImageFilterIUL2IUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
   private:
     itkMinimumProjectionImageFilterIUL2IUL2(itkMinimumProjectionImageFilterIUL2IUL2 const & arg0);
     void operator=(itkMinimumProjectionImageFilterIUL2IUL2 const & arg0);
   protected:
     itkMinimumProjectionImageFilterIUL2IUL2();
     ~itkMinimumProjectionImageFilterIUL2IUL2();
 };


 class itkMinimumProjectionImageFilterIUL3IUL2 : public itkMinimumProjectionImageFilterIUL3IUL2_Superclass {
   public:
     enum  {  InputPixelTypeGreaterThanComparable = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkMinimumProjectionImageFilterIUL3IUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
   private:
     itkMinimumProjectionImageFilterIUL3IUL2(itkMinimumProjectionImageFilterIUL3IUL2 const & arg0);
     void operator=(itkMinimumProjectionImageFilterIUL3IUL2 const & arg0);
   protected:
     itkMinimumProjectionImageFilterIUL3IUL2();
     ~itkMinimumProjectionImageFilterIUL3IUL2();
 };


 class itkMinimumProjectionImageFilterIUL3IUL3 : public itkMinimumProjectionImageFilterIUL3IUL3_Superclass {
   public:
     enum  {  InputPixelTypeGreaterThanComparable = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkMinimumProjectionImageFilterIUL3IUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
   private:
     itkMinimumProjectionImageFilterIUL3IUL3(itkMinimumProjectionImageFilterIUL3IUL3 const & arg0);
     void operator=(itkMinimumProjectionImageFilterIUL3IUL3 const & arg0);
   protected:
     itkMinimumProjectionImageFilterIUL3IUL3();
     ~itkMinimumProjectionImageFilterIUL3IUL3();
 };


 class itkMinimumProjectionImageFilterIUS2IUS2 : public itkMinimumProjectionImageFilterIUS2IUS2_Superclass {
   public:
     enum  {  InputPixelTypeGreaterThanComparable = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkMinimumProjectionImageFilterIUS2IUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
   private:
     itkMinimumProjectionImageFilterIUS2IUS2(itkMinimumProjectionImageFilterIUS2IUS2 const & arg0);
     void operator=(itkMinimumProjectionImageFilterIUS2IUS2 const & arg0);
   protected:
     itkMinimumProjectionImageFilterIUS2IUS2();
     ~itkMinimumProjectionImageFilterIUS2IUS2();
 };


 class itkMinimumProjectionImageFilterIUS3IUS2 : public itkMinimumProjectionImageFilterIUS3IUS2_Superclass {
   public:
     enum  {  InputPixelTypeGreaterThanComparable = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkMinimumProjectionImageFilterIUS3IUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
   private:
     itkMinimumProjectionImageFilterIUS3IUS2(itkMinimumProjectionImageFilterIUS3IUS2 const & arg0);
     void operator=(itkMinimumProjectionImageFilterIUS3IUS2 const & arg0);
   protected:
     itkMinimumProjectionImageFilterIUS3IUS2();
     ~itkMinimumProjectionImageFilterIUS3IUS2();
 };


 class itkMinimumProjectionImageFilterIUS3IUS3 : public itkMinimumProjectionImageFilterIUS3IUS3_Superclass {
   public:
     enum  {  InputPixelTypeGreaterThanComparable = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkMinimumProjectionImageFilterIUS3IUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
   private:
     itkMinimumProjectionImageFilterIUS3IUS3(itkMinimumProjectionImageFilterIUS3IUS3 const & arg0);
     void operator=(itkMinimumProjectionImageFilterIUS3IUS3 const & arg0);
   protected:
     itkMinimumProjectionImageFilterIUS3IUS3();
     ~itkMinimumProjectionImageFilterIUS3IUS3();
 };


