// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkBSplineInterpolationWeightFunctionChicken
#endif
#ifdef SWIGCSHARP
%module itkBSplineInterpolationWeightFunctionCsharp
#endif
#ifdef SWIGGUILE
%module itkBSplineInterpolationWeightFunctionGuile
#endif
#ifdef SWIGJAVA
%module itkBSplineInterpolationWeightFunctionJava
#endif
#ifdef SWIGLUA
%module itkBSplineInterpolationWeightFunctionLua
#endif
#ifdef SWIGMODULA3
%module itkBSplineInterpolationWeightFunctionModula3
#endif
#ifdef SWIGMZSCHEME
%module itkBSplineInterpolationWeightFunctionMzscheme
#endif
#ifdef SWIGOCAML
%module itkBSplineInterpolationWeightFunctionOcaml
#endif
#ifdef SWIGPERL
%module itkBSplineInterpolationWeightFunctionPerl
#endif
#ifdef SWIGPERL5
%module itkBSplineInterpolationWeightFunctionPerl5
#endif
#ifdef SWIGPHP
%module itkBSplineInterpolationWeightFunctionPhp
#endif
#ifdef SWIGPHP4
%module itkBSplineInterpolationWeightFunctionPhp4
#endif
#ifdef SWIGPHP5
%module itkBSplineInterpolationWeightFunctionPhp5
#endif
#ifdef SWIGPIKE
%module itkBSplineInterpolationWeightFunctionPike
#endif
#ifdef SWIGPYTHON
%module itkBSplineInterpolationWeightFunctionPython
#endif
#ifdef SWIGR
%module itkBSplineInterpolationWeightFunctionR
#endif
#ifdef SWIGRUBY
%module itkBSplineInterpolationWeightFunctionRuby
#endif
#ifdef SWIGSEXP
%module itkBSplineInterpolationWeightFunctionSexp
#endif
#ifdef SWIGTCL
%module itkBSplineInterpolationWeightFunctionTcl
#endif
#ifdef SWIGXML
%module itkBSplineInterpolationWeightFunctionXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Interpolators.includes"
%}


%{
%}




%import wrap_itkContinuousIndex.i
%import wrap_itkIndex.i
%import wrap_itkArray.i
%import wrap_itkFunctionBase.i
%import wrap_ITKCommonBase.i
%import wrap_itkSize.i


%include itk.i
%include wrap_itkBSplineInterpolationWeightFunction_ext.i


 class itkBSplineInterpolationWeightFunctionD22 : public itkFunctionBaseCID2AD {
   public:
     enum  {  SpaceDimension = 2 };
     enum  {  SplineOrder = 2 };
     static itkBSplineInterpolationWeightFunctionD22_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual itkArrayD Evaluate(itkContinuousIndexD2 const & index) const;
     virtual void Evaluate(itkContinuousIndexD2 const & index, itkArrayD & weights, itkIndex2 & startIndex) const;
     virtual itkSize2 GetSupportSize() const;
     virtual unsigned long GetNumberOfWeights() const;
   private:
     itkBSplineInterpolationWeightFunctionD22(itkBSplineInterpolationWeightFunctionD22 const & arg0);
     void operator=(itkBSplineInterpolationWeightFunctionD22 const & arg0);
   protected:
     itkBSplineInterpolationWeightFunctionD22();
     ~itkBSplineInterpolationWeightFunctionD22();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineInterpolationWeightFunctionD22_Pointer {
   public:
     itkBSplineInterpolationWeightFunctionD22_Pointer();
     itkBSplineInterpolationWeightFunctionD22_Pointer(itkBSplineInterpolationWeightFunctionD22_Pointer const & p);
     itkBSplineInterpolationWeightFunctionD22_Pointer(itkBSplineInterpolationWeightFunctionD22 * p);
     ~itkBSplineInterpolationWeightFunctionD22_Pointer();
     itkBSplineInterpolationWeightFunctionD22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineInterpolationWeightFunctionD22 * GetPointer() const;
     bool operator<(itkBSplineInterpolationWeightFunctionD22_Pointer const & r) const;
     bool operator>(itkBSplineInterpolationWeightFunctionD22_Pointer const & r) const;
     bool operator<=(itkBSplineInterpolationWeightFunctionD22_Pointer const & r) const;
     bool operator>=(itkBSplineInterpolationWeightFunctionD22_Pointer const & r) const;
     itkBSplineInterpolationWeightFunctionD22_Pointer & operator=(itkBSplineInterpolationWeightFunctionD22_Pointer const & r);
     itkBSplineInterpolationWeightFunctionD22_Pointer & operator=(itkBSplineInterpolationWeightFunctionD22 * r);
     itkBSplineInterpolationWeightFunctionD22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineInterpolationWeightFunctionD33 : public itkFunctionBaseCID3AD {
   public:
     enum  {  SpaceDimension = 3 };
     enum  {  SplineOrder = 3 };
     static itkBSplineInterpolationWeightFunctionD33_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual itkArrayD Evaluate(itkContinuousIndexD3 const & index) const;
     virtual void Evaluate(itkContinuousIndexD3 const & index, itkArrayD & weights, itkIndex3 & startIndex) const;
     virtual itkSize3 GetSupportSize() const;
     virtual unsigned long GetNumberOfWeights() const;
   private:
     itkBSplineInterpolationWeightFunctionD33(itkBSplineInterpolationWeightFunctionD33 const & arg0);
     void operator=(itkBSplineInterpolationWeightFunctionD33 const & arg0);
   protected:
     itkBSplineInterpolationWeightFunctionD33();
     ~itkBSplineInterpolationWeightFunctionD33();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineInterpolationWeightFunctionD33_Pointer {
   public:
     itkBSplineInterpolationWeightFunctionD33_Pointer();
     itkBSplineInterpolationWeightFunctionD33_Pointer(itkBSplineInterpolationWeightFunctionD33_Pointer const & p);
     itkBSplineInterpolationWeightFunctionD33_Pointer(itkBSplineInterpolationWeightFunctionD33 * p);
     ~itkBSplineInterpolationWeightFunctionD33_Pointer();
     itkBSplineInterpolationWeightFunctionD33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineInterpolationWeightFunctionD33 * GetPointer() const;
     bool operator<(itkBSplineInterpolationWeightFunctionD33_Pointer const & r) const;
     bool operator>(itkBSplineInterpolationWeightFunctionD33_Pointer const & r) const;
     bool operator<=(itkBSplineInterpolationWeightFunctionD33_Pointer const & r) const;
     bool operator>=(itkBSplineInterpolationWeightFunctionD33_Pointer const & r) const;
     itkBSplineInterpolationWeightFunctionD33_Pointer & operator=(itkBSplineInterpolationWeightFunctionD33_Pointer const & r);
     itkBSplineInterpolationWeightFunctionD33_Pointer & operator=(itkBSplineInterpolationWeightFunctionD33 * r);
     itkBSplineInterpolationWeightFunctionD33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


