# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkVectorContainerPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkVectorContainerPython', [dirname(__file__)])
        except ImportError:
            import _itkVectorContainerPython
            return _itkVectorContainerPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkVectorContainerPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkVectorContainerPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkVectorContainerPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkPointPython
import vnl_vectorPython
import vcl_complexPython
import pyBasePython
import vnl_matrixPython
import itkFixedArrayPython
import itkVectorPython
import vnl_vector_refPython
import itkOffsetPython
import itkSizePython
import itkContinuousIndexPython
import itkIndexPython
import ITKCommonBasePython
import itkEventObjectsPython
import itkLevelSetPython
def itkDataObjectDecoratorVCUCD_New():
  return itkDataObjectDecoratorVCUCD.New()

def itkVectorContainerULSUL_New():
  return itkVectorContainerULSUL.New()

def itkVectorContainerUIVUC1_New():
  return itkVectorContainerUIVUC1.New()

def itkVectorContainerUCD_New():
  return itkVectorContainerUCD.New()

def itkVectorContainerULD_New():
  return itkVectorContainerULD.New()

def itkVectorContainerUICID3_New():
  return itkVectorContainerUICID3.New()

def itkVectorContainerUCO3_New():
  return itkVectorContainerUCO3.New()

def itkVectorContainerULPD3_New():
  return itkVectorContainerULPD3.New()

def itkVectorContainerULVD3_New():
  return itkVectorContainerULVD3.New()

def itkVectorContainerUILSND3_New():
  return itkVectorContainerUILSND3.New()

def itkVectorContainerUILSNF3_New():
  return itkVectorContainerUILSNF3.New()

def itkVectorContainerUILSNUS3_New():
  return itkVectorContainerUILSNUS3.New()

def itkVectorContainerUILSNUL3_New():
  return itkVectorContainerUILSNUL3.New()

def itkVectorContainerUILSNUC3_New():
  return itkVectorContainerUILSNUC3.New()

def itkVectorContainerUICID2_New():
  return itkVectorContainerUICID2.New()

def itkVectorContainerUCO2_New():
  return itkVectorContainerUCO2.New()

def itkVectorContainerULPD2_New():
  return itkVectorContainerULPD2.New()

def itkVectorContainerULVD2_New():
  return itkVectorContainerULVD2.New()

def itkVectorContainerUILSND2_New():
  return itkVectorContainerUILSND2.New()

def itkVectorContainerUILSNF2_New():
  return itkVectorContainerUILSNF2.New()

def itkVectorContainerUILSNUS2_New():
  return itkVectorContainerUILSNUS2.New()

def itkVectorContainerUILSNUL2_New():
  return itkVectorContainerUILSNUL2.New()

def itkVectorContainerUILSNUC2_New():
  return itkVectorContainerUILSNUC2.New()

class vectoritkLevelSetNodeUC2(object):
    """Proxy of C++ std::vector<(itkLevelSetNodeUC2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectoritkLevelSetNodeUC2"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectoritkLevelSetNodeUC2 v)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectoritkLevelSetNodeUC2
        __getitem__(self, difference_type i) -> value_type
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectoritkLevelSetNodeUC2 v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2_size(self)

    def clear(self):
        """clear(self)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2_clear(self)

    def swap(self, *args):
        """swap(self, vectoritkLevelSetNodeUC2 v)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectoritkLevelSetNodeUC2
        __init__(self, vectoritkLevelSetNodeUC2 arg0) -> vectoritkLevelSetNodeUC2
        __init__(self, size_type size) -> vectoritkLevelSetNodeUC2
        __init__(self, size_type size, value_type value) -> vectoritkLevelSetNodeUC2
        """
        _itkVectorContainerPython.vectoritkLevelSetNodeUC2_swiginit(self,_itkVectorContainerPython.new_vectoritkLevelSetNodeUC2(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC2_capacity(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_vectoritkLevelSetNodeUC2
vectoritkLevelSetNodeUC2.iterator = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2_iterator,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.__nonzero__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2___nonzero__,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.__bool__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2___bool__,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.__len__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2___len__,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.pop = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2_pop,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.__getslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2___getslice__,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.__setslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2___setslice__,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.__delslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2___delslice__,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.__delitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2___delitem__,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.__getitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2___getitem__,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.__setitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2___setitem__,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.append = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2_append,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.empty = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2_empty,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.size = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2_size,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.clear = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2_clear,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.swap = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2_swap,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.get_allocator = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2_get_allocator,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.begin = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2_begin,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.end = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2_end,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.rbegin = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2_rbegin,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.rend = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2_rend,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.pop_back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2_pop_back,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.erase = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2_erase,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.push_back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2_push_back,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.front = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2_front,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2_back,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.assign = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2_assign,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.resize = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2_resize,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.insert = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2_insert,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.reserve = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2_reserve,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2.capacity = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC2_capacity,None,vectoritkLevelSetNodeUC2)
vectoritkLevelSetNodeUC2_swigregister = _itkVectorContainerPython.vectoritkLevelSetNodeUC2_swigregister
vectoritkLevelSetNodeUC2_swigregister(vectoritkLevelSetNodeUC2)

class vectoritkLevelSetNodeUL2(object):
    """Proxy of C++ std::vector<(itkLevelSetNodeUL2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectoritkLevelSetNodeUL2"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectoritkLevelSetNodeUL2 v)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectoritkLevelSetNodeUL2
        __getitem__(self, difference_type i) -> value_type
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectoritkLevelSetNodeUL2 v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2_size(self)

    def clear(self):
        """clear(self)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2_clear(self)

    def swap(self, *args):
        """swap(self, vectoritkLevelSetNodeUL2 v)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectoritkLevelSetNodeUL2
        __init__(self, vectoritkLevelSetNodeUL2 arg0) -> vectoritkLevelSetNodeUL2
        __init__(self, size_type size) -> vectoritkLevelSetNodeUL2
        __init__(self, size_type size, value_type value) -> vectoritkLevelSetNodeUL2
        """
        _itkVectorContainerPython.vectoritkLevelSetNodeUL2_swiginit(self,_itkVectorContainerPython.new_vectoritkLevelSetNodeUL2(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL2_capacity(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_vectoritkLevelSetNodeUL2
vectoritkLevelSetNodeUL2.iterator = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2_iterator,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.__nonzero__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2___nonzero__,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.__bool__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2___bool__,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.__len__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2___len__,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.pop = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2_pop,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.__getslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2___getslice__,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.__setslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2___setslice__,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.__delslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2___delslice__,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.__delitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2___delitem__,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.__getitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2___getitem__,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.__setitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2___setitem__,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.append = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2_append,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.empty = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2_empty,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.size = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2_size,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.clear = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2_clear,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.swap = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2_swap,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.get_allocator = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2_get_allocator,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.begin = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2_begin,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.end = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2_end,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.rbegin = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2_rbegin,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.rend = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2_rend,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.pop_back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2_pop_back,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.erase = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2_erase,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.push_back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2_push_back,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.front = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2_front,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2_back,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.assign = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2_assign,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.resize = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2_resize,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.insert = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2_insert,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.reserve = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2_reserve,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2.capacity = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL2_capacity,None,vectoritkLevelSetNodeUL2)
vectoritkLevelSetNodeUL2_swigregister = _itkVectorContainerPython.vectoritkLevelSetNodeUL2_swigregister
vectoritkLevelSetNodeUL2_swigregister(vectoritkLevelSetNodeUL2)

class vectoritkLevelSetNodeUS2(object):
    """Proxy of C++ std::vector<(itkLevelSetNodeUS2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectoritkLevelSetNodeUS2"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectoritkLevelSetNodeUS2 v)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectoritkLevelSetNodeUS2
        __getitem__(self, difference_type i) -> value_type
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectoritkLevelSetNodeUS2 v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2_size(self)

    def clear(self):
        """clear(self)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2_clear(self)

    def swap(self, *args):
        """swap(self, vectoritkLevelSetNodeUS2 v)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectoritkLevelSetNodeUS2
        __init__(self, vectoritkLevelSetNodeUS2 arg0) -> vectoritkLevelSetNodeUS2
        __init__(self, size_type size) -> vectoritkLevelSetNodeUS2
        __init__(self, size_type size, value_type value) -> vectoritkLevelSetNodeUS2
        """
        _itkVectorContainerPython.vectoritkLevelSetNodeUS2_swiginit(self,_itkVectorContainerPython.new_vectoritkLevelSetNodeUS2(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS2_capacity(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_vectoritkLevelSetNodeUS2
vectoritkLevelSetNodeUS2.iterator = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2_iterator,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.__nonzero__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2___nonzero__,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.__bool__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2___bool__,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.__len__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2___len__,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.pop = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2_pop,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.__getslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2___getslice__,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.__setslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2___setslice__,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.__delslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2___delslice__,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.__delitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2___delitem__,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.__getitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2___getitem__,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.__setitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2___setitem__,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.append = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2_append,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.empty = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2_empty,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.size = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2_size,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.clear = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2_clear,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.swap = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2_swap,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.get_allocator = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2_get_allocator,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.begin = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2_begin,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.end = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2_end,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.rbegin = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2_rbegin,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.rend = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2_rend,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.pop_back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2_pop_back,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.erase = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2_erase,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.push_back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2_push_back,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.front = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2_front,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2_back,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.assign = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2_assign,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.resize = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2_resize,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.insert = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2_insert,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.reserve = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2_reserve,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2.capacity = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS2_capacity,None,vectoritkLevelSetNodeUS2)
vectoritkLevelSetNodeUS2_swigregister = _itkVectorContainerPython.vectoritkLevelSetNodeUS2_swigregister
vectoritkLevelSetNodeUS2_swigregister(vectoritkLevelSetNodeUS2)

class vectoritkLevelSetNodeF2(object):
    """Proxy of C++ std::vector<(itkLevelSetNodeF2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectoritkLevelSetNodeF2"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectoritkLevelSetNodeF2 v)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectoritkLevelSetNodeF2
        __getitem__(self, difference_type i) -> value_type
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectoritkLevelSetNodeF2 v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2_size(self)

    def clear(self):
        """clear(self)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2_clear(self)

    def swap(self, *args):
        """swap(self, vectoritkLevelSetNodeF2 v)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectoritkLevelSetNodeF2
        __init__(self, vectoritkLevelSetNodeF2 arg0) -> vectoritkLevelSetNodeF2
        __init__(self, size_type size) -> vectoritkLevelSetNodeF2
        __init__(self, size_type size, value_type value) -> vectoritkLevelSetNodeF2
        """
        _itkVectorContainerPython.vectoritkLevelSetNodeF2_swiginit(self,_itkVectorContainerPython.new_vectoritkLevelSetNodeF2(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF2_capacity(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_vectoritkLevelSetNodeF2
vectoritkLevelSetNodeF2.iterator = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2_iterator,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.__nonzero__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2___nonzero__,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.__bool__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2___bool__,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.__len__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2___len__,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.pop = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2_pop,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.__getslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2___getslice__,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.__setslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2___setslice__,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.__delslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2___delslice__,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.__delitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2___delitem__,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.__getitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2___getitem__,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.__setitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2___setitem__,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.append = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2_append,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.empty = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2_empty,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.size = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2_size,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.clear = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2_clear,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.swap = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2_swap,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.get_allocator = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2_get_allocator,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.begin = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2_begin,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.end = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2_end,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.rbegin = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2_rbegin,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.rend = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2_rend,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.pop_back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2_pop_back,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.erase = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2_erase,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.push_back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2_push_back,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.front = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2_front,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2_back,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.assign = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2_assign,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.resize = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2_resize,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.insert = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2_insert,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.reserve = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2_reserve,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2.capacity = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF2_capacity,None,vectoritkLevelSetNodeF2)
vectoritkLevelSetNodeF2_swigregister = _itkVectorContainerPython.vectoritkLevelSetNodeF2_swigregister
vectoritkLevelSetNodeF2_swigregister(vectoritkLevelSetNodeF2)

class vectoritkLevelSetNodeD2(object):
    """Proxy of C++ std::vector<(itkLevelSetNodeD2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectoritkLevelSetNodeD2"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectoritkLevelSetNodeD2 v)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectoritkLevelSetNodeD2
        __getitem__(self, difference_type i) -> value_type
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectoritkLevelSetNodeD2 v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2_size(self)

    def clear(self):
        """clear(self)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2_clear(self)

    def swap(self, *args):
        """swap(self, vectoritkLevelSetNodeD2 v)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectoritkLevelSetNodeD2
        __init__(self, vectoritkLevelSetNodeD2 arg0) -> vectoritkLevelSetNodeD2
        __init__(self, size_type size) -> vectoritkLevelSetNodeD2
        __init__(self, size_type size, value_type value) -> vectoritkLevelSetNodeD2
        """
        _itkVectorContainerPython.vectoritkLevelSetNodeD2_swiginit(self,_itkVectorContainerPython.new_vectoritkLevelSetNodeD2(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD2_capacity(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_vectoritkLevelSetNodeD2
vectoritkLevelSetNodeD2.iterator = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2_iterator,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.__nonzero__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2___nonzero__,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.__bool__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2___bool__,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.__len__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2___len__,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.pop = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2_pop,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.__getslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2___getslice__,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.__setslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2___setslice__,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.__delslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2___delslice__,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.__delitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2___delitem__,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.__getitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2___getitem__,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.__setitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2___setitem__,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.append = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2_append,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.empty = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2_empty,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.size = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2_size,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.clear = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2_clear,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.swap = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2_swap,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.get_allocator = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2_get_allocator,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.begin = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2_begin,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.end = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2_end,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.rbegin = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2_rbegin,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.rend = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2_rend,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.pop_back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2_pop_back,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.erase = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2_erase,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.push_back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2_push_back,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.front = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2_front,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2_back,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.assign = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2_assign,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.resize = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2_resize,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.insert = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2_insert,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.reserve = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2_reserve,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2.capacity = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD2_capacity,None,vectoritkLevelSetNodeD2)
vectoritkLevelSetNodeD2_swigregister = _itkVectorContainerPython.vectoritkLevelSetNodeD2_swigregister
vectoritkLevelSetNodeD2_swigregister(vectoritkLevelSetNodeD2)

class vectoritkVectorD2(object):
    """Proxy of C++ std::vector<(itkVectorD2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _itkVectorContainerPython.vectoritkVectorD2_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkVectorD2___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkVectorD2___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkVectorD2___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkVectorD2_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectoritkVectorD2"""
        return _itkVectorContainerPython.vectoritkVectorD2___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectoritkVectorD2 v)"""
        return _itkVectorContainerPython.vectoritkVectorD2___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _itkVectorContainerPython.vectoritkVectorD2___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _itkVectorContainerPython.vectoritkVectorD2___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectoritkVectorD2
        __getitem__(self, difference_type i) -> value_type
        """
        return _itkVectorContainerPython.vectoritkVectorD2___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectoritkVectorD2 v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _itkVectorContainerPython.vectoritkVectorD2___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkVectorD2_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _itkVectorContainerPython.vectoritkVectorD2_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkVectorD2_size(self)

    def clear(self):
        """clear(self)"""
        return _itkVectorContainerPython.vectoritkVectorD2_clear(self)

    def swap(self, *args):
        """swap(self, vectoritkVectorD2 v)"""
        return _itkVectorContainerPython.vectoritkVectorD2_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _itkVectorContainerPython.vectoritkVectorD2_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkVectorD2_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkVectorD2_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkVectorD2_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkVectorD2_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _itkVectorContainerPython.vectoritkVectorD2_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _itkVectorContainerPython.vectoritkVectorD2_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectoritkVectorD2
        __init__(self, vectoritkVectorD2 arg0) -> vectoritkVectorD2
        __init__(self, size_type size) -> vectoritkVectorD2
        __init__(self, size_type size, value_type value) -> vectoritkVectorD2
        """
        _itkVectorContainerPython.vectoritkVectorD2_swiginit(self,_itkVectorContainerPython.new_vectoritkVectorD2(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkVectorD2_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkVectorD2_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkVectorD2_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _itkVectorContainerPython.vectoritkVectorD2_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _itkVectorContainerPython.vectoritkVectorD2_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _itkVectorContainerPython.vectoritkVectorD2_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _itkVectorContainerPython.vectoritkVectorD2_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkVectorD2_capacity(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_vectoritkVectorD2
vectoritkVectorD2.iterator = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2_iterator,None,vectoritkVectorD2)
vectoritkVectorD2.__nonzero__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2___nonzero__,None,vectoritkVectorD2)
vectoritkVectorD2.__bool__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2___bool__,None,vectoritkVectorD2)
vectoritkVectorD2.__len__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2___len__,None,vectoritkVectorD2)
vectoritkVectorD2.pop = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2_pop,None,vectoritkVectorD2)
vectoritkVectorD2.__getslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2___getslice__,None,vectoritkVectorD2)
vectoritkVectorD2.__setslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2___setslice__,None,vectoritkVectorD2)
vectoritkVectorD2.__delslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2___delslice__,None,vectoritkVectorD2)
vectoritkVectorD2.__delitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2___delitem__,None,vectoritkVectorD2)
vectoritkVectorD2.__getitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2___getitem__,None,vectoritkVectorD2)
vectoritkVectorD2.__setitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2___setitem__,None,vectoritkVectorD2)
vectoritkVectorD2.append = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2_append,None,vectoritkVectorD2)
vectoritkVectorD2.empty = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2_empty,None,vectoritkVectorD2)
vectoritkVectorD2.size = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2_size,None,vectoritkVectorD2)
vectoritkVectorD2.clear = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2_clear,None,vectoritkVectorD2)
vectoritkVectorD2.swap = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2_swap,None,vectoritkVectorD2)
vectoritkVectorD2.get_allocator = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2_get_allocator,None,vectoritkVectorD2)
vectoritkVectorD2.begin = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2_begin,None,vectoritkVectorD2)
vectoritkVectorD2.end = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2_end,None,vectoritkVectorD2)
vectoritkVectorD2.rbegin = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2_rbegin,None,vectoritkVectorD2)
vectoritkVectorD2.rend = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2_rend,None,vectoritkVectorD2)
vectoritkVectorD2.pop_back = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2_pop_back,None,vectoritkVectorD2)
vectoritkVectorD2.erase = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2_erase,None,vectoritkVectorD2)
vectoritkVectorD2.push_back = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2_push_back,None,vectoritkVectorD2)
vectoritkVectorD2.front = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2_front,None,vectoritkVectorD2)
vectoritkVectorD2.back = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2_back,None,vectoritkVectorD2)
vectoritkVectorD2.assign = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2_assign,None,vectoritkVectorD2)
vectoritkVectorD2.resize = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2_resize,None,vectoritkVectorD2)
vectoritkVectorD2.insert = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2_insert,None,vectoritkVectorD2)
vectoritkVectorD2.reserve = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2_reserve,None,vectoritkVectorD2)
vectoritkVectorD2.capacity = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD2_capacity,None,vectoritkVectorD2)
vectoritkVectorD2_swigregister = _itkVectorContainerPython.vectoritkVectorD2_swigregister
vectoritkVectorD2_swigregister(vectoritkVectorD2)

class vectoritkPointD2(object):
    """Proxy of C++ std::vector<(itkPointD2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _itkVectorContainerPython.vectoritkPointD2_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkPointD2___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkPointD2___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkPointD2___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkPointD2_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectoritkPointD2"""
        return _itkVectorContainerPython.vectoritkPointD2___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectoritkPointD2 v)"""
        return _itkVectorContainerPython.vectoritkPointD2___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _itkVectorContainerPython.vectoritkPointD2___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _itkVectorContainerPython.vectoritkPointD2___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectoritkPointD2
        __getitem__(self, difference_type i) -> value_type
        """
        return _itkVectorContainerPython.vectoritkPointD2___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectoritkPointD2 v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _itkVectorContainerPython.vectoritkPointD2___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkPointD2_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _itkVectorContainerPython.vectoritkPointD2_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkPointD2_size(self)

    def clear(self):
        """clear(self)"""
        return _itkVectorContainerPython.vectoritkPointD2_clear(self)

    def swap(self, *args):
        """swap(self, vectoritkPointD2 v)"""
        return _itkVectorContainerPython.vectoritkPointD2_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _itkVectorContainerPython.vectoritkPointD2_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkPointD2_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkPointD2_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkPointD2_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkPointD2_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _itkVectorContainerPython.vectoritkPointD2_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _itkVectorContainerPython.vectoritkPointD2_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectoritkPointD2
        __init__(self, vectoritkPointD2 arg0) -> vectoritkPointD2
        __init__(self, size_type size) -> vectoritkPointD2
        __init__(self, size_type size, value_type value) -> vectoritkPointD2
        """
        _itkVectorContainerPython.vectoritkPointD2_swiginit(self,_itkVectorContainerPython.new_vectoritkPointD2(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkPointD2_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkPointD2_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkPointD2_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _itkVectorContainerPython.vectoritkPointD2_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _itkVectorContainerPython.vectoritkPointD2_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _itkVectorContainerPython.vectoritkPointD2_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _itkVectorContainerPython.vectoritkPointD2_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkPointD2_capacity(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_vectoritkPointD2
vectoritkPointD2.iterator = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2_iterator,None,vectoritkPointD2)
vectoritkPointD2.__nonzero__ = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2___nonzero__,None,vectoritkPointD2)
vectoritkPointD2.__bool__ = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2___bool__,None,vectoritkPointD2)
vectoritkPointD2.__len__ = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2___len__,None,vectoritkPointD2)
vectoritkPointD2.pop = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2_pop,None,vectoritkPointD2)
vectoritkPointD2.__getslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2___getslice__,None,vectoritkPointD2)
vectoritkPointD2.__setslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2___setslice__,None,vectoritkPointD2)
vectoritkPointD2.__delslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2___delslice__,None,vectoritkPointD2)
vectoritkPointD2.__delitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2___delitem__,None,vectoritkPointD2)
vectoritkPointD2.__getitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2___getitem__,None,vectoritkPointD2)
vectoritkPointD2.__setitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2___setitem__,None,vectoritkPointD2)
vectoritkPointD2.append = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2_append,None,vectoritkPointD2)
vectoritkPointD2.empty = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2_empty,None,vectoritkPointD2)
vectoritkPointD2.size = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2_size,None,vectoritkPointD2)
vectoritkPointD2.clear = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2_clear,None,vectoritkPointD2)
vectoritkPointD2.swap = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2_swap,None,vectoritkPointD2)
vectoritkPointD2.get_allocator = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2_get_allocator,None,vectoritkPointD2)
vectoritkPointD2.begin = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2_begin,None,vectoritkPointD2)
vectoritkPointD2.end = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2_end,None,vectoritkPointD2)
vectoritkPointD2.rbegin = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2_rbegin,None,vectoritkPointD2)
vectoritkPointD2.rend = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2_rend,None,vectoritkPointD2)
vectoritkPointD2.pop_back = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2_pop_back,None,vectoritkPointD2)
vectoritkPointD2.erase = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2_erase,None,vectoritkPointD2)
vectoritkPointD2.push_back = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2_push_back,None,vectoritkPointD2)
vectoritkPointD2.front = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2_front,None,vectoritkPointD2)
vectoritkPointD2.back = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2_back,None,vectoritkPointD2)
vectoritkPointD2.assign = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2_assign,None,vectoritkPointD2)
vectoritkPointD2.resize = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2_resize,None,vectoritkPointD2)
vectoritkPointD2.insert = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2_insert,None,vectoritkPointD2)
vectoritkPointD2.reserve = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2_reserve,None,vectoritkPointD2)
vectoritkPointD2.capacity = new_instancemethod(_itkVectorContainerPython.vectoritkPointD2_capacity,None,vectoritkPointD2)
vectoritkPointD2_swigregister = _itkVectorContainerPython.vectoritkPointD2_swigregister
vectoritkPointD2_swigregister(vectoritkPointD2)

class vectoritkOffset2(object):
    """Proxy of C++ std::vector<(itkOffset2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _itkVectorContainerPython.vectoritkOffset2_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkOffset2___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkOffset2___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkOffset2___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkOffset2_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectoritkOffset2"""
        return _itkVectorContainerPython.vectoritkOffset2___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectoritkOffset2 v)"""
        return _itkVectorContainerPython.vectoritkOffset2___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _itkVectorContainerPython.vectoritkOffset2___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _itkVectorContainerPython.vectoritkOffset2___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectoritkOffset2
        __getitem__(self, difference_type i) -> value_type
        """
        return _itkVectorContainerPython.vectoritkOffset2___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectoritkOffset2 v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _itkVectorContainerPython.vectoritkOffset2___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkOffset2_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _itkVectorContainerPython.vectoritkOffset2_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkOffset2_size(self)

    def clear(self):
        """clear(self)"""
        return _itkVectorContainerPython.vectoritkOffset2_clear(self)

    def swap(self, *args):
        """swap(self, vectoritkOffset2 v)"""
        return _itkVectorContainerPython.vectoritkOffset2_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _itkVectorContainerPython.vectoritkOffset2_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkOffset2_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkOffset2_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkOffset2_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkOffset2_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _itkVectorContainerPython.vectoritkOffset2_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _itkVectorContainerPython.vectoritkOffset2_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectoritkOffset2
        __init__(self, vectoritkOffset2 arg0) -> vectoritkOffset2
        __init__(self, size_type size) -> vectoritkOffset2
        __init__(self, size_type size, value_type value) -> vectoritkOffset2
        """
        _itkVectorContainerPython.vectoritkOffset2_swiginit(self,_itkVectorContainerPython.new_vectoritkOffset2(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkOffset2_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkOffset2_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkOffset2_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _itkVectorContainerPython.vectoritkOffset2_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _itkVectorContainerPython.vectoritkOffset2_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _itkVectorContainerPython.vectoritkOffset2_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _itkVectorContainerPython.vectoritkOffset2_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkOffset2_capacity(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_vectoritkOffset2
vectoritkOffset2.iterator = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2_iterator,None,vectoritkOffset2)
vectoritkOffset2.__nonzero__ = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2___nonzero__,None,vectoritkOffset2)
vectoritkOffset2.__bool__ = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2___bool__,None,vectoritkOffset2)
vectoritkOffset2.__len__ = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2___len__,None,vectoritkOffset2)
vectoritkOffset2.pop = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2_pop,None,vectoritkOffset2)
vectoritkOffset2.__getslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2___getslice__,None,vectoritkOffset2)
vectoritkOffset2.__setslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2___setslice__,None,vectoritkOffset2)
vectoritkOffset2.__delslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2___delslice__,None,vectoritkOffset2)
vectoritkOffset2.__delitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2___delitem__,None,vectoritkOffset2)
vectoritkOffset2.__getitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2___getitem__,None,vectoritkOffset2)
vectoritkOffset2.__setitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2___setitem__,None,vectoritkOffset2)
vectoritkOffset2.append = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2_append,None,vectoritkOffset2)
vectoritkOffset2.empty = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2_empty,None,vectoritkOffset2)
vectoritkOffset2.size = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2_size,None,vectoritkOffset2)
vectoritkOffset2.clear = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2_clear,None,vectoritkOffset2)
vectoritkOffset2.swap = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2_swap,None,vectoritkOffset2)
vectoritkOffset2.get_allocator = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2_get_allocator,None,vectoritkOffset2)
vectoritkOffset2.begin = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2_begin,None,vectoritkOffset2)
vectoritkOffset2.end = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2_end,None,vectoritkOffset2)
vectoritkOffset2.rbegin = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2_rbegin,None,vectoritkOffset2)
vectoritkOffset2.rend = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2_rend,None,vectoritkOffset2)
vectoritkOffset2.pop_back = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2_pop_back,None,vectoritkOffset2)
vectoritkOffset2.erase = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2_erase,None,vectoritkOffset2)
vectoritkOffset2.push_back = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2_push_back,None,vectoritkOffset2)
vectoritkOffset2.front = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2_front,None,vectoritkOffset2)
vectoritkOffset2.back = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2_back,None,vectoritkOffset2)
vectoritkOffset2.assign = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2_assign,None,vectoritkOffset2)
vectoritkOffset2.resize = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2_resize,None,vectoritkOffset2)
vectoritkOffset2.insert = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2_insert,None,vectoritkOffset2)
vectoritkOffset2.reserve = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2_reserve,None,vectoritkOffset2)
vectoritkOffset2.capacity = new_instancemethod(_itkVectorContainerPython.vectoritkOffset2_capacity,None,vectoritkOffset2)
vectoritkOffset2_swigregister = _itkVectorContainerPython.vectoritkOffset2_swigregister
vectoritkOffset2_swigregister(vectoritkOffset2)

class vectoritkContinuousIndexD2(object):
    """Proxy of C++ std::vector<(itkContinuousIndexD2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectoritkContinuousIndexD2"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectoritkContinuousIndexD2 v)"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _itkVectorContainerPython.vectoritkContinuousIndexD2___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectoritkContinuousIndexD2
        __getitem__(self, difference_type i) -> value_type
        """
        return _itkVectorContainerPython.vectoritkContinuousIndexD2___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectoritkContinuousIndexD2 v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _itkVectorContainerPython.vectoritkContinuousIndexD2___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2_size(self)

    def clear(self):
        """clear(self)"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2_clear(self)

    def swap(self, *args):
        """swap(self, vectoritkContinuousIndexD2 v)"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _itkVectorContainerPython.vectoritkContinuousIndexD2_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectoritkContinuousIndexD2
        __init__(self, vectoritkContinuousIndexD2 arg0) -> vectoritkContinuousIndexD2
        __init__(self, size_type size) -> vectoritkContinuousIndexD2
        __init__(self, size_type size, value_type value) -> vectoritkContinuousIndexD2
        """
        _itkVectorContainerPython.vectoritkContinuousIndexD2_swiginit(self,_itkVectorContainerPython.new_vectoritkContinuousIndexD2(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _itkVectorContainerPython.vectoritkContinuousIndexD2_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _itkVectorContainerPython.vectoritkContinuousIndexD2_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD2_capacity(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_vectoritkContinuousIndexD2
vectoritkContinuousIndexD2.iterator = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2_iterator,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.__nonzero__ = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2___nonzero__,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.__bool__ = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2___bool__,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.__len__ = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2___len__,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.pop = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2_pop,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.__getslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2___getslice__,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.__setslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2___setslice__,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.__delslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2___delslice__,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.__delitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2___delitem__,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.__getitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2___getitem__,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.__setitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2___setitem__,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.append = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2_append,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.empty = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2_empty,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.size = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2_size,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.clear = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2_clear,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.swap = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2_swap,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.get_allocator = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2_get_allocator,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.begin = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2_begin,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.end = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2_end,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.rbegin = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2_rbegin,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.rend = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2_rend,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.pop_back = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2_pop_back,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.erase = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2_erase,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.push_back = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2_push_back,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.front = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2_front,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.back = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2_back,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.assign = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2_assign,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.resize = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2_resize,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.insert = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2_insert,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.reserve = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2_reserve,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2.capacity = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD2_capacity,None,vectoritkContinuousIndexD2)
vectoritkContinuousIndexD2_swigregister = _itkVectorContainerPython.vectoritkContinuousIndexD2_swigregister
vectoritkContinuousIndexD2_swigregister(vectoritkContinuousIndexD2)

class vectoritkLevelSetNodeUC3(object):
    """Proxy of C++ std::vector<(itkLevelSetNodeUC3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectoritkLevelSetNodeUC3"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectoritkLevelSetNodeUC3 v)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectoritkLevelSetNodeUC3
        __getitem__(self, difference_type i) -> value_type
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectoritkLevelSetNodeUC3 v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3_size(self)

    def clear(self):
        """clear(self)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3_clear(self)

    def swap(self, *args):
        """swap(self, vectoritkLevelSetNodeUC3 v)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectoritkLevelSetNodeUC3
        __init__(self, vectoritkLevelSetNodeUC3 arg0) -> vectoritkLevelSetNodeUC3
        __init__(self, size_type size) -> vectoritkLevelSetNodeUC3
        __init__(self, size_type size, value_type value) -> vectoritkLevelSetNodeUC3
        """
        _itkVectorContainerPython.vectoritkLevelSetNodeUC3_swiginit(self,_itkVectorContainerPython.new_vectoritkLevelSetNodeUC3(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUC3_capacity(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_vectoritkLevelSetNodeUC3
vectoritkLevelSetNodeUC3.iterator = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3_iterator,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.__nonzero__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3___nonzero__,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.__bool__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3___bool__,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.__len__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3___len__,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.pop = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3_pop,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.__getslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3___getslice__,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.__setslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3___setslice__,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.__delslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3___delslice__,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.__delitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3___delitem__,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.__getitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3___getitem__,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.__setitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3___setitem__,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.append = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3_append,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.empty = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3_empty,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.size = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3_size,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.clear = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3_clear,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.swap = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3_swap,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.get_allocator = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3_get_allocator,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.begin = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3_begin,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.end = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3_end,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.rbegin = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3_rbegin,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.rend = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3_rend,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.pop_back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3_pop_back,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.erase = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3_erase,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.push_back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3_push_back,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.front = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3_front,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3_back,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.assign = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3_assign,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.resize = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3_resize,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.insert = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3_insert,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.reserve = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3_reserve,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3.capacity = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUC3_capacity,None,vectoritkLevelSetNodeUC3)
vectoritkLevelSetNodeUC3_swigregister = _itkVectorContainerPython.vectoritkLevelSetNodeUC3_swigregister
vectoritkLevelSetNodeUC3_swigregister(vectoritkLevelSetNodeUC3)

class vectoritkLevelSetNodeUL3(object):
    """Proxy of C++ std::vector<(itkLevelSetNodeUL3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectoritkLevelSetNodeUL3"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectoritkLevelSetNodeUL3 v)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectoritkLevelSetNodeUL3
        __getitem__(self, difference_type i) -> value_type
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectoritkLevelSetNodeUL3 v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3_size(self)

    def clear(self):
        """clear(self)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3_clear(self)

    def swap(self, *args):
        """swap(self, vectoritkLevelSetNodeUL3 v)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectoritkLevelSetNodeUL3
        __init__(self, vectoritkLevelSetNodeUL3 arg0) -> vectoritkLevelSetNodeUL3
        __init__(self, size_type size) -> vectoritkLevelSetNodeUL3
        __init__(self, size_type size, value_type value) -> vectoritkLevelSetNodeUL3
        """
        _itkVectorContainerPython.vectoritkLevelSetNodeUL3_swiginit(self,_itkVectorContainerPython.new_vectoritkLevelSetNodeUL3(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUL3_capacity(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_vectoritkLevelSetNodeUL3
vectoritkLevelSetNodeUL3.iterator = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3_iterator,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.__nonzero__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3___nonzero__,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.__bool__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3___bool__,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.__len__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3___len__,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.pop = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3_pop,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.__getslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3___getslice__,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.__setslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3___setslice__,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.__delslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3___delslice__,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.__delitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3___delitem__,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.__getitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3___getitem__,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.__setitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3___setitem__,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.append = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3_append,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.empty = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3_empty,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.size = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3_size,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.clear = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3_clear,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.swap = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3_swap,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.get_allocator = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3_get_allocator,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.begin = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3_begin,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.end = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3_end,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.rbegin = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3_rbegin,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.rend = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3_rend,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.pop_back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3_pop_back,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.erase = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3_erase,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.push_back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3_push_back,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.front = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3_front,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3_back,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.assign = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3_assign,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.resize = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3_resize,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.insert = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3_insert,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.reserve = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3_reserve,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3.capacity = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUL3_capacity,None,vectoritkLevelSetNodeUL3)
vectoritkLevelSetNodeUL3_swigregister = _itkVectorContainerPython.vectoritkLevelSetNodeUL3_swigregister
vectoritkLevelSetNodeUL3_swigregister(vectoritkLevelSetNodeUL3)

class vectoritkLevelSetNodeUS3(object):
    """Proxy of C++ std::vector<(itkLevelSetNodeUS3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectoritkLevelSetNodeUS3"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectoritkLevelSetNodeUS3 v)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectoritkLevelSetNodeUS3
        __getitem__(self, difference_type i) -> value_type
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectoritkLevelSetNodeUS3 v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3_size(self)

    def clear(self):
        """clear(self)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3_clear(self)

    def swap(self, *args):
        """swap(self, vectoritkLevelSetNodeUS3 v)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectoritkLevelSetNodeUS3
        __init__(self, vectoritkLevelSetNodeUS3 arg0) -> vectoritkLevelSetNodeUS3
        __init__(self, size_type size) -> vectoritkLevelSetNodeUS3
        __init__(self, size_type size, value_type value) -> vectoritkLevelSetNodeUS3
        """
        _itkVectorContainerPython.vectoritkLevelSetNodeUS3_swiginit(self,_itkVectorContainerPython.new_vectoritkLevelSetNodeUS3(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeUS3_capacity(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_vectoritkLevelSetNodeUS3
vectoritkLevelSetNodeUS3.iterator = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3_iterator,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.__nonzero__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3___nonzero__,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.__bool__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3___bool__,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.__len__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3___len__,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.pop = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3_pop,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.__getslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3___getslice__,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.__setslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3___setslice__,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.__delslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3___delslice__,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.__delitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3___delitem__,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.__getitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3___getitem__,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.__setitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3___setitem__,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.append = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3_append,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.empty = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3_empty,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.size = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3_size,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.clear = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3_clear,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.swap = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3_swap,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.get_allocator = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3_get_allocator,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.begin = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3_begin,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.end = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3_end,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.rbegin = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3_rbegin,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.rend = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3_rend,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.pop_back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3_pop_back,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.erase = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3_erase,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.push_back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3_push_back,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.front = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3_front,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3_back,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.assign = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3_assign,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.resize = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3_resize,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.insert = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3_insert,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.reserve = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3_reserve,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3.capacity = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeUS3_capacity,None,vectoritkLevelSetNodeUS3)
vectoritkLevelSetNodeUS3_swigregister = _itkVectorContainerPython.vectoritkLevelSetNodeUS3_swigregister
vectoritkLevelSetNodeUS3_swigregister(vectoritkLevelSetNodeUS3)

class vectoritkLevelSetNodeF3(object):
    """Proxy of C++ std::vector<(itkLevelSetNodeF3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectoritkLevelSetNodeF3"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectoritkLevelSetNodeF3 v)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectoritkLevelSetNodeF3
        __getitem__(self, difference_type i) -> value_type
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectoritkLevelSetNodeF3 v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3_size(self)

    def clear(self):
        """clear(self)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3_clear(self)

    def swap(self, *args):
        """swap(self, vectoritkLevelSetNodeF3 v)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectoritkLevelSetNodeF3
        __init__(self, vectoritkLevelSetNodeF3 arg0) -> vectoritkLevelSetNodeF3
        __init__(self, size_type size) -> vectoritkLevelSetNodeF3
        __init__(self, size_type size, value_type value) -> vectoritkLevelSetNodeF3
        """
        _itkVectorContainerPython.vectoritkLevelSetNodeF3_swiginit(self,_itkVectorContainerPython.new_vectoritkLevelSetNodeF3(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeF3_capacity(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_vectoritkLevelSetNodeF3
vectoritkLevelSetNodeF3.iterator = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3_iterator,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.__nonzero__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3___nonzero__,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.__bool__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3___bool__,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.__len__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3___len__,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.pop = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3_pop,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.__getslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3___getslice__,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.__setslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3___setslice__,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.__delslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3___delslice__,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.__delitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3___delitem__,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.__getitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3___getitem__,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.__setitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3___setitem__,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.append = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3_append,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.empty = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3_empty,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.size = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3_size,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.clear = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3_clear,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.swap = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3_swap,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.get_allocator = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3_get_allocator,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.begin = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3_begin,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.end = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3_end,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.rbegin = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3_rbegin,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.rend = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3_rend,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.pop_back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3_pop_back,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.erase = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3_erase,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.push_back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3_push_back,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.front = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3_front,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3_back,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.assign = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3_assign,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.resize = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3_resize,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.insert = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3_insert,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.reserve = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3_reserve,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3.capacity = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeF3_capacity,None,vectoritkLevelSetNodeF3)
vectoritkLevelSetNodeF3_swigregister = _itkVectorContainerPython.vectoritkLevelSetNodeF3_swigregister
vectoritkLevelSetNodeF3_swigregister(vectoritkLevelSetNodeF3)

class vectoritkLevelSetNodeD3(object):
    """Proxy of C++ std::vector<(itkLevelSetNodeD3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectoritkLevelSetNodeD3"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectoritkLevelSetNodeD3 v)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectoritkLevelSetNodeD3
        __getitem__(self, difference_type i) -> value_type
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectoritkLevelSetNodeD3 v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3_size(self)

    def clear(self):
        """clear(self)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3_clear(self)

    def swap(self, *args):
        """swap(self, vectoritkLevelSetNodeD3 v)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectoritkLevelSetNodeD3
        __init__(self, vectoritkLevelSetNodeD3 arg0) -> vectoritkLevelSetNodeD3
        __init__(self, size_type size) -> vectoritkLevelSetNodeD3
        __init__(self, size_type size, value_type value) -> vectoritkLevelSetNodeD3
        """
        _itkVectorContainerPython.vectoritkLevelSetNodeD3_swiginit(self,_itkVectorContainerPython.new_vectoritkLevelSetNodeD3(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkLevelSetNodeD3_capacity(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_vectoritkLevelSetNodeD3
vectoritkLevelSetNodeD3.iterator = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3_iterator,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.__nonzero__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3___nonzero__,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.__bool__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3___bool__,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.__len__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3___len__,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.pop = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3_pop,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.__getslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3___getslice__,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.__setslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3___setslice__,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.__delslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3___delslice__,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.__delitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3___delitem__,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.__getitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3___getitem__,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.__setitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3___setitem__,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.append = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3_append,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.empty = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3_empty,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.size = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3_size,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.clear = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3_clear,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.swap = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3_swap,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.get_allocator = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3_get_allocator,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.begin = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3_begin,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.end = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3_end,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.rbegin = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3_rbegin,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.rend = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3_rend,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.pop_back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3_pop_back,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.erase = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3_erase,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.push_back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3_push_back,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.front = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3_front,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.back = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3_back,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.assign = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3_assign,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.resize = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3_resize,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.insert = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3_insert,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.reserve = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3_reserve,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3.capacity = new_instancemethod(_itkVectorContainerPython.vectoritkLevelSetNodeD3_capacity,None,vectoritkLevelSetNodeD3)
vectoritkLevelSetNodeD3_swigregister = _itkVectorContainerPython.vectoritkLevelSetNodeD3_swigregister
vectoritkLevelSetNodeD3_swigregister(vectoritkLevelSetNodeD3)

class vectoritkVectorD3(object):
    """Proxy of C++ std::vector<(itkVectorD3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _itkVectorContainerPython.vectoritkVectorD3_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkVectorD3___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkVectorD3___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkVectorD3___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkVectorD3_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectoritkVectorD3"""
        return _itkVectorContainerPython.vectoritkVectorD3___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectoritkVectorD3 v)"""
        return _itkVectorContainerPython.vectoritkVectorD3___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _itkVectorContainerPython.vectoritkVectorD3___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _itkVectorContainerPython.vectoritkVectorD3___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectoritkVectorD3
        __getitem__(self, difference_type i) -> value_type
        """
        return _itkVectorContainerPython.vectoritkVectorD3___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectoritkVectorD3 v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _itkVectorContainerPython.vectoritkVectorD3___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkVectorD3_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _itkVectorContainerPython.vectoritkVectorD3_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkVectorD3_size(self)

    def clear(self):
        """clear(self)"""
        return _itkVectorContainerPython.vectoritkVectorD3_clear(self)

    def swap(self, *args):
        """swap(self, vectoritkVectorD3 v)"""
        return _itkVectorContainerPython.vectoritkVectorD3_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _itkVectorContainerPython.vectoritkVectorD3_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkVectorD3_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkVectorD3_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkVectorD3_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkVectorD3_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _itkVectorContainerPython.vectoritkVectorD3_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _itkVectorContainerPython.vectoritkVectorD3_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectoritkVectorD3
        __init__(self, vectoritkVectorD3 arg0) -> vectoritkVectorD3
        __init__(self, size_type size) -> vectoritkVectorD3
        __init__(self, size_type size, value_type value) -> vectoritkVectorD3
        """
        _itkVectorContainerPython.vectoritkVectorD3_swiginit(self,_itkVectorContainerPython.new_vectoritkVectorD3(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkVectorD3_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkVectorD3_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkVectorD3_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _itkVectorContainerPython.vectoritkVectorD3_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _itkVectorContainerPython.vectoritkVectorD3_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _itkVectorContainerPython.vectoritkVectorD3_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _itkVectorContainerPython.vectoritkVectorD3_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkVectorD3_capacity(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_vectoritkVectorD3
vectoritkVectorD3.iterator = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3_iterator,None,vectoritkVectorD3)
vectoritkVectorD3.__nonzero__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3___nonzero__,None,vectoritkVectorD3)
vectoritkVectorD3.__bool__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3___bool__,None,vectoritkVectorD3)
vectoritkVectorD3.__len__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3___len__,None,vectoritkVectorD3)
vectoritkVectorD3.pop = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3_pop,None,vectoritkVectorD3)
vectoritkVectorD3.__getslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3___getslice__,None,vectoritkVectorD3)
vectoritkVectorD3.__setslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3___setslice__,None,vectoritkVectorD3)
vectoritkVectorD3.__delslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3___delslice__,None,vectoritkVectorD3)
vectoritkVectorD3.__delitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3___delitem__,None,vectoritkVectorD3)
vectoritkVectorD3.__getitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3___getitem__,None,vectoritkVectorD3)
vectoritkVectorD3.__setitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3___setitem__,None,vectoritkVectorD3)
vectoritkVectorD3.append = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3_append,None,vectoritkVectorD3)
vectoritkVectorD3.empty = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3_empty,None,vectoritkVectorD3)
vectoritkVectorD3.size = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3_size,None,vectoritkVectorD3)
vectoritkVectorD3.clear = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3_clear,None,vectoritkVectorD3)
vectoritkVectorD3.swap = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3_swap,None,vectoritkVectorD3)
vectoritkVectorD3.get_allocator = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3_get_allocator,None,vectoritkVectorD3)
vectoritkVectorD3.begin = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3_begin,None,vectoritkVectorD3)
vectoritkVectorD3.end = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3_end,None,vectoritkVectorD3)
vectoritkVectorD3.rbegin = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3_rbegin,None,vectoritkVectorD3)
vectoritkVectorD3.rend = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3_rend,None,vectoritkVectorD3)
vectoritkVectorD3.pop_back = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3_pop_back,None,vectoritkVectorD3)
vectoritkVectorD3.erase = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3_erase,None,vectoritkVectorD3)
vectoritkVectorD3.push_back = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3_push_back,None,vectoritkVectorD3)
vectoritkVectorD3.front = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3_front,None,vectoritkVectorD3)
vectoritkVectorD3.back = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3_back,None,vectoritkVectorD3)
vectoritkVectorD3.assign = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3_assign,None,vectoritkVectorD3)
vectoritkVectorD3.resize = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3_resize,None,vectoritkVectorD3)
vectoritkVectorD3.insert = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3_insert,None,vectoritkVectorD3)
vectoritkVectorD3.reserve = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3_reserve,None,vectoritkVectorD3)
vectoritkVectorD3.capacity = new_instancemethod(_itkVectorContainerPython.vectoritkVectorD3_capacity,None,vectoritkVectorD3)
vectoritkVectorD3_swigregister = _itkVectorContainerPython.vectoritkVectorD3_swigregister
vectoritkVectorD3_swigregister(vectoritkVectorD3)

class vectoritkPointD3(object):
    """Proxy of C++ std::vector<(itkPointD3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _itkVectorContainerPython.vectoritkPointD3_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkPointD3___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkPointD3___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkPointD3___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkPointD3_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectoritkPointD3"""
        return _itkVectorContainerPython.vectoritkPointD3___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectoritkPointD3 v)"""
        return _itkVectorContainerPython.vectoritkPointD3___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _itkVectorContainerPython.vectoritkPointD3___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _itkVectorContainerPython.vectoritkPointD3___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectoritkPointD3
        __getitem__(self, difference_type i) -> value_type
        """
        return _itkVectorContainerPython.vectoritkPointD3___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectoritkPointD3 v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _itkVectorContainerPython.vectoritkPointD3___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkPointD3_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _itkVectorContainerPython.vectoritkPointD3_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkPointD3_size(self)

    def clear(self):
        """clear(self)"""
        return _itkVectorContainerPython.vectoritkPointD3_clear(self)

    def swap(self, *args):
        """swap(self, vectoritkPointD3 v)"""
        return _itkVectorContainerPython.vectoritkPointD3_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _itkVectorContainerPython.vectoritkPointD3_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkPointD3_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkPointD3_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkPointD3_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkPointD3_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _itkVectorContainerPython.vectoritkPointD3_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _itkVectorContainerPython.vectoritkPointD3_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectoritkPointD3
        __init__(self, vectoritkPointD3 arg0) -> vectoritkPointD3
        __init__(self, size_type size) -> vectoritkPointD3
        __init__(self, size_type size, value_type value) -> vectoritkPointD3
        """
        _itkVectorContainerPython.vectoritkPointD3_swiginit(self,_itkVectorContainerPython.new_vectoritkPointD3(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkPointD3_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkPointD3_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkPointD3_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _itkVectorContainerPython.vectoritkPointD3_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _itkVectorContainerPython.vectoritkPointD3_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _itkVectorContainerPython.vectoritkPointD3_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _itkVectorContainerPython.vectoritkPointD3_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkPointD3_capacity(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_vectoritkPointD3
vectoritkPointD3.iterator = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3_iterator,None,vectoritkPointD3)
vectoritkPointD3.__nonzero__ = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3___nonzero__,None,vectoritkPointD3)
vectoritkPointD3.__bool__ = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3___bool__,None,vectoritkPointD3)
vectoritkPointD3.__len__ = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3___len__,None,vectoritkPointD3)
vectoritkPointD3.pop = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3_pop,None,vectoritkPointD3)
vectoritkPointD3.__getslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3___getslice__,None,vectoritkPointD3)
vectoritkPointD3.__setslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3___setslice__,None,vectoritkPointD3)
vectoritkPointD3.__delslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3___delslice__,None,vectoritkPointD3)
vectoritkPointD3.__delitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3___delitem__,None,vectoritkPointD3)
vectoritkPointD3.__getitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3___getitem__,None,vectoritkPointD3)
vectoritkPointD3.__setitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3___setitem__,None,vectoritkPointD3)
vectoritkPointD3.append = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3_append,None,vectoritkPointD3)
vectoritkPointD3.empty = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3_empty,None,vectoritkPointD3)
vectoritkPointD3.size = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3_size,None,vectoritkPointD3)
vectoritkPointD3.clear = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3_clear,None,vectoritkPointD3)
vectoritkPointD3.swap = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3_swap,None,vectoritkPointD3)
vectoritkPointD3.get_allocator = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3_get_allocator,None,vectoritkPointD3)
vectoritkPointD3.begin = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3_begin,None,vectoritkPointD3)
vectoritkPointD3.end = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3_end,None,vectoritkPointD3)
vectoritkPointD3.rbegin = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3_rbegin,None,vectoritkPointD3)
vectoritkPointD3.rend = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3_rend,None,vectoritkPointD3)
vectoritkPointD3.pop_back = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3_pop_back,None,vectoritkPointD3)
vectoritkPointD3.erase = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3_erase,None,vectoritkPointD3)
vectoritkPointD3.push_back = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3_push_back,None,vectoritkPointD3)
vectoritkPointD3.front = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3_front,None,vectoritkPointD3)
vectoritkPointD3.back = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3_back,None,vectoritkPointD3)
vectoritkPointD3.assign = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3_assign,None,vectoritkPointD3)
vectoritkPointD3.resize = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3_resize,None,vectoritkPointD3)
vectoritkPointD3.insert = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3_insert,None,vectoritkPointD3)
vectoritkPointD3.reserve = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3_reserve,None,vectoritkPointD3)
vectoritkPointD3.capacity = new_instancemethod(_itkVectorContainerPython.vectoritkPointD3_capacity,None,vectoritkPointD3)
vectoritkPointD3_swigregister = _itkVectorContainerPython.vectoritkPointD3_swigregister
vectoritkPointD3_swigregister(vectoritkPointD3)

class vectoritkOffset3(object):
    """Proxy of C++ std::vector<(itkOffset3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _itkVectorContainerPython.vectoritkOffset3_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkOffset3___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkOffset3___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkOffset3___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkOffset3_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectoritkOffset3"""
        return _itkVectorContainerPython.vectoritkOffset3___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectoritkOffset3 v)"""
        return _itkVectorContainerPython.vectoritkOffset3___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _itkVectorContainerPython.vectoritkOffset3___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _itkVectorContainerPython.vectoritkOffset3___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectoritkOffset3
        __getitem__(self, difference_type i) -> value_type
        """
        return _itkVectorContainerPython.vectoritkOffset3___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectoritkOffset3 v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _itkVectorContainerPython.vectoritkOffset3___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkOffset3_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _itkVectorContainerPython.vectoritkOffset3_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkOffset3_size(self)

    def clear(self):
        """clear(self)"""
        return _itkVectorContainerPython.vectoritkOffset3_clear(self)

    def swap(self, *args):
        """swap(self, vectoritkOffset3 v)"""
        return _itkVectorContainerPython.vectoritkOffset3_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _itkVectorContainerPython.vectoritkOffset3_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkOffset3_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkOffset3_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkOffset3_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkOffset3_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _itkVectorContainerPython.vectoritkOffset3_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _itkVectorContainerPython.vectoritkOffset3_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectoritkOffset3
        __init__(self, vectoritkOffset3 arg0) -> vectoritkOffset3
        __init__(self, size_type size) -> vectoritkOffset3
        __init__(self, size_type size, value_type value) -> vectoritkOffset3
        """
        _itkVectorContainerPython.vectoritkOffset3_swiginit(self,_itkVectorContainerPython.new_vectoritkOffset3(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkOffset3_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkOffset3_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkOffset3_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _itkVectorContainerPython.vectoritkOffset3_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _itkVectorContainerPython.vectoritkOffset3_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _itkVectorContainerPython.vectoritkOffset3_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _itkVectorContainerPython.vectoritkOffset3_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkOffset3_capacity(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_vectoritkOffset3
vectoritkOffset3.iterator = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3_iterator,None,vectoritkOffset3)
vectoritkOffset3.__nonzero__ = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3___nonzero__,None,vectoritkOffset3)
vectoritkOffset3.__bool__ = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3___bool__,None,vectoritkOffset3)
vectoritkOffset3.__len__ = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3___len__,None,vectoritkOffset3)
vectoritkOffset3.pop = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3_pop,None,vectoritkOffset3)
vectoritkOffset3.__getslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3___getslice__,None,vectoritkOffset3)
vectoritkOffset3.__setslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3___setslice__,None,vectoritkOffset3)
vectoritkOffset3.__delslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3___delslice__,None,vectoritkOffset3)
vectoritkOffset3.__delitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3___delitem__,None,vectoritkOffset3)
vectoritkOffset3.__getitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3___getitem__,None,vectoritkOffset3)
vectoritkOffset3.__setitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3___setitem__,None,vectoritkOffset3)
vectoritkOffset3.append = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3_append,None,vectoritkOffset3)
vectoritkOffset3.empty = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3_empty,None,vectoritkOffset3)
vectoritkOffset3.size = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3_size,None,vectoritkOffset3)
vectoritkOffset3.clear = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3_clear,None,vectoritkOffset3)
vectoritkOffset3.swap = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3_swap,None,vectoritkOffset3)
vectoritkOffset3.get_allocator = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3_get_allocator,None,vectoritkOffset3)
vectoritkOffset3.begin = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3_begin,None,vectoritkOffset3)
vectoritkOffset3.end = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3_end,None,vectoritkOffset3)
vectoritkOffset3.rbegin = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3_rbegin,None,vectoritkOffset3)
vectoritkOffset3.rend = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3_rend,None,vectoritkOffset3)
vectoritkOffset3.pop_back = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3_pop_back,None,vectoritkOffset3)
vectoritkOffset3.erase = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3_erase,None,vectoritkOffset3)
vectoritkOffset3.push_back = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3_push_back,None,vectoritkOffset3)
vectoritkOffset3.front = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3_front,None,vectoritkOffset3)
vectoritkOffset3.back = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3_back,None,vectoritkOffset3)
vectoritkOffset3.assign = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3_assign,None,vectoritkOffset3)
vectoritkOffset3.resize = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3_resize,None,vectoritkOffset3)
vectoritkOffset3.insert = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3_insert,None,vectoritkOffset3)
vectoritkOffset3.reserve = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3_reserve,None,vectoritkOffset3)
vectoritkOffset3.capacity = new_instancemethod(_itkVectorContainerPython.vectoritkOffset3_capacity,None,vectoritkOffset3)
vectoritkOffset3_swigregister = _itkVectorContainerPython.vectoritkOffset3_swigregister
vectoritkOffset3_swigregister(vectoritkOffset3)

class vectoritkContinuousIndexD3(object):
    """Proxy of C++ std::vector<(itkContinuousIndexD3)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectoritkContinuousIndexD3"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectoritkContinuousIndexD3 v)"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _itkVectorContainerPython.vectoritkContinuousIndexD3___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectoritkContinuousIndexD3
        __getitem__(self, difference_type i) -> value_type
        """
        return _itkVectorContainerPython.vectoritkContinuousIndexD3___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectoritkContinuousIndexD3 v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _itkVectorContainerPython.vectoritkContinuousIndexD3___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3_size(self)

    def clear(self):
        """clear(self)"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3_clear(self)

    def swap(self, *args):
        """swap(self, vectoritkContinuousIndexD3 v)"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _itkVectorContainerPython.vectoritkContinuousIndexD3_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectoritkContinuousIndexD3
        __init__(self, vectoritkContinuousIndexD3 arg0) -> vectoritkContinuousIndexD3
        __init__(self, size_type size) -> vectoritkContinuousIndexD3
        __init__(self, size_type size, value_type value) -> vectoritkContinuousIndexD3
        """
        _itkVectorContainerPython.vectoritkContinuousIndexD3_swiginit(self,_itkVectorContainerPython.new_vectoritkContinuousIndexD3(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _itkVectorContainerPython.vectoritkContinuousIndexD3_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _itkVectorContainerPython.vectoritkContinuousIndexD3_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkContinuousIndexD3_capacity(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_vectoritkContinuousIndexD3
vectoritkContinuousIndexD3.iterator = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3_iterator,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.__nonzero__ = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3___nonzero__,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.__bool__ = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3___bool__,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.__len__ = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3___len__,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.pop = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3_pop,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.__getslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3___getslice__,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.__setslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3___setslice__,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.__delslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3___delslice__,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.__delitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3___delitem__,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.__getitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3___getitem__,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.__setitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3___setitem__,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.append = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3_append,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.empty = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3_empty,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.size = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3_size,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.clear = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3_clear,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.swap = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3_swap,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.get_allocator = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3_get_allocator,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.begin = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3_begin,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.end = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3_end,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.rbegin = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3_rbegin,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.rend = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3_rend,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.pop_back = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3_pop_back,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.erase = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3_erase,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.push_back = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3_push_back,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.front = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3_front,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.back = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3_back,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.assign = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3_assign,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.resize = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3_resize,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.insert = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3_insert,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.reserve = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3_reserve,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3.capacity = new_instancemethod(_itkVectorContainerPython.vectoritkContinuousIndexD3_capacity,None,vectoritkContinuousIndexD3)
vectoritkContinuousIndexD3_swigregister = _itkVectorContainerPython.vectoritkContinuousIndexD3_swigregister
vectoritkContinuousIndexD3_swigregister(vectoritkContinuousIndexD3)

class vectoritkVectorUC1(object):
    """Proxy of C++ std::vector<(itkVectorUC1)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(self) -> SwigPyIterator"""
        return _itkVectorContainerPython.vectoritkVectorUC1_iterator(self)

    def __iter__(self): return self.iterator()
    def __nonzero__(self):
        """__nonzero__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkVectorUC1___nonzero__(self)

    def __bool__(self):
        """__bool__(self) -> bool"""
        return _itkVectorContainerPython.vectoritkVectorUC1___bool__(self)

    def __len__(self):
        """__len__(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkVectorUC1___len__(self)

    def pop(self):
        """pop(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkVectorUC1_pop(self)

    def __getslice__(self, *args):
        """__getslice__(self, difference_type i, difference_type j) -> vectoritkVectorUC1"""
        return _itkVectorContainerPython.vectoritkVectorUC1___getslice__(self, *args)

    def __setslice__(self, *args):
        """__setslice__(self, difference_type i, difference_type j, vectoritkVectorUC1 v)"""
        return _itkVectorContainerPython.vectoritkVectorUC1___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(self, difference_type i, difference_type j)"""
        return _itkVectorContainerPython.vectoritkVectorUC1___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(self, difference_type i)
        __delitem__(self, PySliceObject slice)
        """
        return _itkVectorContainerPython.vectoritkVectorUC1___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(self, PySliceObject slice) -> vectoritkVectorUC1
        __getitem__(self, difference_type i) -> value_type
        """
        return _itkVectorContainerPython.vectoritkVectorUC1___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(self, PySliceObject slice, vectoritkVectorUC1 v)
        __setitem__(self, difference_type i, value_type x)
        """
        return _itkVectorContainerPython.vectoritkVectorUC1___setitem__(self, *args)

    def append(self, *args):
        """append(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkVectorUC1_append(self, *args)

    def empty(self):
        """empty(self) -> bool"""
        return _itkVectorContainerPython.vectoritkVectorUC1_empty(self)

    def size(self):
        """size(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkVectorUC1_size(self)

    def clear(self):
        """clear(self)"""
        return _itkVectorContainerPython.vectoritkVectorUC1_clear(self)

    def swap(self, *args):
        """swap(self, vectoritkVectorUC1 v)"""
        return _itkVectorContainerPython.vectoritkVectorUC1_swap(self, *args)

    def get_allocator(self):
        """get_allocator(self) -> allocator_type"""
        return _itkVectorContainerPython.vectoritkVectorUC1_get_allocator(self)

    def begin(self):
        """begin(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkVectorUC1_begin(self)

    def end(self):
        """end(self) -> const_iterator"""
        return _itkVectorContainerPython.vectoritkVectorUC1_end(self)

    def rbegin(self):
        """rbegin(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkVectorUC1_rbegin(self)

    def rend(self):
        """rend(self) -> const_reverse_iterator"""
        return _itkVectorContainerPython.vectoritkVectorUC1_rend(self)

    def pop_back(self):
        """pop_back(self)"""
        return _itkVectorContainerPython.vectoritkVectorUC1_pop_back(self)

    def erase(self, *args):
        """
        erase(self, iterator pos) -> iterator
        erase(self, iterator first, iterator last) -> iterator
        """
        return _itkVectorContainerPython.vectoritkVectorUC1_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(self) -> vectoritkVectorUC1
        __init__(self, vectoritkVectorUC1 arg0) -> vectoritkVectorUC1
        __init__(self, size_type size) -> vectoritkVectorUC1
        __init__(self, size_type size, value_type value) -> vectoritkVectorUC1
        """
        _itkVectorContainerPython.vectoritkVectorUC1_swiginit(self,_itkVectorContainerPython.new_vectoritkVectorUC1(*args))
    def push_back(self, *args):
        """push_back(self, value_type x)"""
        return _itkVectorContainerPython.vectoritkVectorUC1_push_back(self, *args)

    def front(self):
        """front(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkVectorUC1_front(self)

    def back(self):
        """back(self) -> value_type"""
        return _itkVectorContainerPython.vectoritkVectorUC1_back(self)

    def assign(self, *args):
        """assign(self, size_type n, value_type x)"""
        return _itkVectorContainerPython.vectoritkVectorUC1_assign(self, *args)

    def resize(self, *args):
        """
        resize(self, size_type new_size)
        resize(self, size_type new_size, value_type x)
        """
        return _itkVectorContainerPython.vectoritkVectorUC1_resize(self, *args)

    def insert(self, *args):
        """
        insert(self, iterator pos, value_type x) -> iterator
        insert(self, iterator pos, size_type n, value_type x)
        """
        return _itkVectorContainerPython.vectoritkVectorUC1_insert(self, *args)

    def reserve(self, *args):
        """reserve(self, size_type n)"""
        return _itkVectorContainerPython.vectoritkVectorUC1_reserve(self, *args)

    def capacity(self):
        """capacity(self) -> size_type"""
        return _itkVectorContainerPython.vectoritkVectorUC1_capacity(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_vectoritkVectorUC1
vectoritkVectorUC1.iterator = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1_iterator,None,vectoritkVectorUC1)
vectoritkVectorUC1.__nonzero__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1___nonzero__,None,vectoritkVectorUC1)
vectoritkVectorUC1.__bool__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1___bool__,None,vectoritkVectorUC1)
vectoritkVectorUC1.__len__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1___len__,None,vectoritkVectorUC1)
vectoritkVectorUC1.pop = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1_pop,None,vectoritkVectorUC1)
vectoritkVectorUC1.__getslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1___getslice__,None,vectoritkVectorUC1)
vectoritkVectorUC1.__setslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1___setslice__,None,vectoritkVectorUC1)
vectoritkVectorUC1.__delslice__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1___delslice__,None,vectoritkVectorUC1)
vectoritkVectorUC1.__delitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1___delitem__,None,vectoritkVectorUC1)
vectoritkVectorUC1.__getitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1___getitem__,None,vectoritkVectorUC1)
vectoritkVectorUC1.__setitem__ = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1___setitem__,None,vectoritkVectorUC1)
vectoritkVectorUC1.append = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1_append,None,vectoritkVectorUC1)
vectoritkVectorUC1.empty = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1_empty,None,vectoritkVectorUC1)
vectoritkVectorUC1.size = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1_size,None,vectoritkVectorUC1)
vectoritkVectorUC1.clear = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1_clear,None,vectoritkVectorUC1)
vectoritkVectorUC1.swap = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1_swap,None,vectoritkVectorUC1)
vectoritkVectorUC1.get_allocator = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1_get_allocator,None,vectoritkVectorUC1)
vectoritkVectorUC1.begin = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1_begin,None,vectoritkVectorUC1)
vectoritkVectorUC1.end = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1_end,None,vectoritkVectorUC1)
vectoritkVectorUC1.rbegin = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1_rbegin,None,vectoritkVectorUC1)
vectoritkVectorUC1.rend = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1_rend,None,vectoritkVectorUC1)
vectoritkVectorUC1.pop_back = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1_pop_back,None,vectoritkVectorUC1)
vectoritkVectorUC1.erase = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1_erase,None,vectoritkVectorUC1)
vectoritkVectorUC1.push_back = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1_push_back,None,vectoritkVectorUC1)
vectoritkVectorUC1.front = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1_front,None,vectoritkVectorUC1)
vectoritkVectorUC1.back = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1_back,None,vectoritkVectorUC1)
vectoritkVectorUC1.assign = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1_assign,None,vectoritkVectorUC1)
vectoritkVectorUC1.resize = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1_resize,None,vectoritkVectorUC1)
vectoritkVectorUC1.insert = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1_insert,None,vectoritkVectorUC1)
vectoritkVectorUC1.reserve = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1_reserve,None,vectoritkVectorUC1)
vectoritkVectorUC1.capacity = new_instancemethod(_itkVectorContainerPython.vectoritkVectorUC1_capacity,None,vectoritkVectorUC1)
vectoritkVectorUC1_swigregister = _itkVectorContainerPython.vectoritkVectorUC1_swigregister
vectoritkVectorUC1_swigregister(vectoritkVectorUC1)

class itkDataObjectDecoratorVCUCD(ITKCommonBasePython.itkDataObject):
    """Proxy of C++ itkDataObjectDecoratorVCUCD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Set(self, *args):
        """Set(self, itkVectorContainerUCD val)"""
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Set(self, *args)

    def Get(self):
        """Get(self) -> itkVectorContainerUCD"""
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Get(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkDataObjectDecoratorVCUCD
    def cast(*args):
        """cast(itkLightObject obj) -> itkDataObjectDecoratorVCUCD"""
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDataObjectDecoratorVCUCD"""
        return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDataObjectDecoratorVCUCD
        
        Create a new object of the class itkDataObjectDecoratorVCUCD and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDataObjectDecoratorVCUCD.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDataObjectDecoratorVCUCD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDataObjectDecoratorVCUCD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDataObjectDecoratorVCUCD.Set = new_instancemethod(_itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Set,None,itkDataObjectDecoratorVCUCD)
itkDataObjectDecoratorVCUCD.Get = new_instancemethod(_itkVectorContainerPython.itkDataObjectDecoratorVCUCD_Get,None,itkDataObjectDecoratorVCUCD)
itkDataObjectDecoratorVCUCD.GetPointer = new_instancemethod(_itkVectorContainerPython.itkDataObjectDecoratorVCUCD_GetPointer,None,itkDataObjectDecoratorVCUCD)
itkDataObjectDecoratorVCUCD_swigregister = _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_swigregister
itkDataObjectDecoratorVCUCD_swigregister(itkDataObjectDecoratorVCUCD)

def itkDataObjectDecoratorVCUCD___New_orig__():
  """itkDataObjectDecoratorVCUCD___New_orig__()"""
  return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD___New_orig__()

def itkDataObjectDecoratorVCUCD_cast(*args):
  """itkDataObjectDecoratorVCUCD_cast(itkLightObject obj) -> itkDataObjectDecoratorVCUCD"""
  return _itkVectorContainerPython.itkDataObjectDecoratorVCUCD_cast(*args)

class itkVectorContainerUCD(ITKCommonBasePython.itkObject,pyBasePython.vectorD):
    """Proxy of C++ itkVectorContainerUCD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkVectorContainerPython.itkVectorContainerUCD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> vectorD"""
        return _itkVectorContainerPython.itkVectorContainerUCD_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> vectorD"""
        return _itkVectorContainerPython.itkVectorContainerUCD_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned char arg0) -> double
        ElementAt(self, unsigned char arg0) -> double
        """
        return _itkVectorContainerPython.itkVectorContainerUCD_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned char arg0) -> double"""
        return _itkVectorContainerPython.itkVectorContainerUCD_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned char arg0) -> double"""
        return _itkVectorContainerPython.itkVectorContainerUCD_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned char arg0, double arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCD_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned char arg0, double arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCD_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned char arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCD_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned char arg0, double arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCD_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCD_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCD_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerUCD_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCD_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCD_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCD_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCD
    def cast(*args):
        """cast(itkLightObject obj) -> itkVectorContainerUCD"""
        return _itkVectorContainerPython.itkVectorContainerUCD_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkVectorContainerUCD"""
        return _itkVectorContainerPython.itkVectorContainerUCD_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUCD
        
        Create a new object of the class itkVectorContainerUCD and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkVectorContainerUCD.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkVectorContainerUCD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUCD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUCD.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_CastToSTLContainer,None,itkVectorContainerUCD)
itkVectorContainerUCD.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_CastToSTLConstContainer,None,itkVectorContainerUCD)
itkVectorContainerUCD.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_ElementAt,None,itkVectorContainerUCD)
itkVectorContainerUCD.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_CreateElementAt,None,itkVectorContainerUCD)
itkVectorContainerUCD.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_GetElement,None,itkVectorContainerUCD)
itkVectorContainerUCD.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_SetElement,None,itkVectorContainerUCD)
itkVectorContainerUCD.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_InsertElement,None,itkVectorContainerUCD)
itkVectorContainerUCD.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_IndexExists,None,itkVectorContainerUCD)
itkVectorContainerUCD.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_GetElementIfIndexExists,None,itkVectorContainerUCD)
itkVectorContainerUCD.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_CreateIndex,None,itkVectorContainerUCD)
itkVectorContainerUCD.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_DeleteIndex,None,itkVectorContainerUCD)
itkVectorContainerUCD.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_Size,None,itkVectorContainerUCD)
itkVectorContainerUCD.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_Reserve,None,itkVectorContainerUCD)
itkVectorContainerUCD.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_Squeeze,None,itkVectorContainerUCD)
itkVectorContainerUCD.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_Initialize,None,itkVectorContainerUCD)
itkVectorContainerUCD.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCD_GetPointer,None,itkVectorContainerUCD)
itkVectorContainerUCD_swigregister = _itkVectorContainerPython.itkVectorContainerUCD_swigregister
itkVectorContainerUCD_swigregister(itkVectorContainerUCD)

def itkVectorContainerUCD___New_orig__():
  """itkVectorContainerUCD___New_orig__()"""
  return _itkVectorContainerPython.itkVectorContainerUCD___New_orig__()

def itkVectorContainerUCD_cast(*args):
  """itkVectorContainerUCD_cast(itkLightObject obj) -> itkVectorContainerUCD"""
  return _itkVectorContainerPython.itkVectorContainerUCD_cast(*args)

class itkVectorContainerUCO2(ITKCommonBasePython.itkObject,vectoritkOffset2):
    """Proxy of C++ itkVectorContainerUCO2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkVectorContainerPython.itkVectorContainerUCO2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> vectoritkOffset2"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> vectoritkOffset2"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned char arg0) -> itkOffset2
        ElementAt(self, unsigned char arg0) -> itkOffset2
        """
        return _itkVectorContainerPython.itkVectorContainerUCO2_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned char arg0) -> itkOffset2"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned char arg0) -> itkOffset2"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned char arg0, itkOffset2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned char arg0, itkOffset2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned char arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned char arg0, itkOffset2 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCO2
    def cast(*args):
        """cast(itkLightObject obj) -> itkVectorContainerUCO2"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkVectorContainerUCO2"""
        return _itkVectorContainerPython.itkVectorContainerUCO2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUCO2
        
        Create a new object of the class itkVectorContainerUCO2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkVectorContainerUCO2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkVectorContainerUCO2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUCO2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUCO2.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_CastToSTLContainer,None,itkVectorContainerUCO2)
itkVectorContainerUCO2.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_CastToSTLConstContainer,None,itkVectorContainerUCO2)
itkVectorContainerUCO2.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_ElementAt,None,itkVectorContainerUCO2)
itkVectorContainerUCO2.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_CreateElementAt,None,itkVectorContainerUCO2)
itkVectorContainerUCO2.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_GetElement,None,itkVectorContainerUCO2)
itkVectorContainerUCO2.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_SetElement,None,itkVectorContainerUCO2)
itkVectorContainerUCO2.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_InsertElement,None,itkVectorContainerUCO2)
itkVectorContainerUCO2.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_IndexExists,None,itkVectorContainerUCO2)
itkVectorContainerUCO2.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_GetElementIfIndexExists,None,itkVectorContainerUCO2)
itkVectorContainerUCO2.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_CreateIndex,None,itkVectorContainerUCO2)
itkVectorContainerUCO2.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_DeleteIndex,None,itkVectorContainerUCO2)
itkVectorContainerUCO2.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_Size,None,itkVectorContainerUCO2)
itkVectorContainerUCO2.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_Reserve,None,itkVectorContainerUCO2)
itkVectorContainerUCO2.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_Squeeze,None,itkVectorContainerUCO2)
itkVectorContainerUCO2.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_Initialize,None,itkVectorContainerUCO2)
itkVectorContainerUCO2.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO2_GetPointer,None,itkVectorContainerUCO2)
itkVectorContainerUCO2_swigregister = _itkVectorContainerPython.itkVectorContainerUCO2_swigregister
itkVectorContainerUCO2_swigregister(itkVectorContainerUCO2)

def itkVectorContainerUCO2___New_orig__():
  """itkVectorContainerUCO2___New_orig__()"""
  return _itkVectorContainerPython.itkVectorContainerUCO2___New_orig__()

def itkVectorContainerUCO2_cast(*args):
  """itkVectorContainerUCO2_cast(itkLightObject obj) -> itkVectorContainerUCO2"""
  return _itkVectorContainerPython.itkVectorContainerUCO2_cast(*args)

class itkVectorContainerUCO3(ITKCommonBasePython.itkObject,vectoritkOffset3):
    """Proxy of C++ itkVectorContainerUCO3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkVectorContainerPython.itkVectorContainerUCO3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> vectoritkOffset3"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> vectoritkOffset3"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned char arg0) -> itkOffset3
        ElementAt(self, unsigned char arg0) -> itkOffset3
        """
        return _itkVectorContainerPython.itkVectorContainerUCO3_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned char arg0) -> itkOffset3"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned char arg0) -> itkOffset3"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned char arg0, itkOffset3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned char arg0, itkOffset3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned char arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned char arg0, itkOffset3 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned char arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUCO3
    def cast(*args):
        """cast(itkLightObject obj) -> itkVectorContainerUCO3"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkVectorContainerUCO3"""
        return _itkVectorContainerPython.itkVectorContainerUCO3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUCO3
        
        Create a new object of the class itkVectorContainerUCO3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkVectorContainerUCO3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkVectorContainerUCO3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUCO3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUCO3.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_CastToSTLContainer,None,itkVectorContainerUCO3)
itkVectorContainerUCO3.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_CastToSTLConstContainer,None,itkVectorContainerUCO3)
itkVectorContainerUCO3.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_ElementAt,None,itkVectorContainerUCO3)
itkVectorContainerUCO3.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_CreateElementAt,None,itkVectorContainerUCO3)
itkVectorContainerUCO3.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_GetElement,None,itkVectorContainerUCO3)
itkVectorContainerUCO3.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_SetElement,None,itkVectorContainerUCO3)
itkVectorContainerUCO3.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_InsertElement,None,itkVectorContainerUCO3)
itkVectorContainerUCO3.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_IndexExists,None,itkVectorContainerUCO3)
itkVectorContainerUCO3.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_GetElementIfIndexExists,None,itkVectorContainerUCO3)
itkVectorContainerUCO3.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_CreateIndex,None,itkVectorContainerUCO3)
itkVectorContainerUCO3.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_DeleteIndex,None,itkVectorContainerUCO3)
itkVectorContainerUCO3.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_Size,None,itkVectorContainerUCO3)
itkVectorContainerUCO3.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_Reserve,None,itkVectorContainerUCO3)
itkVectorContainerUCO3.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_Squeeze,None,itkVectorContainerUCO3)
itkVectorContainerUCO3.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_Initialize,None,itkVectorContainerUCO3)
itkVectorContainerUCO3.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUCO3_GetPointer,None,itkVectorContainerUCO3)
itkVectorContainerUCO3_swigregister = _itkVectorContainerPython.itkVectorContainerUCO3_swigregister
itkVectorContainerUCO3_swigregister(itkVectorContainerUCO3)

def itkVectorContainerUCO3___New_orig__():
  """itkVectorContainerUCO3___New_orig__()"""
  return _itkVectorContainerPython.itkVectorContainerUCO3___New_orig__()

def itkVectorContainerUCO3_cast(*args):
  """itkVectorContainerUCO3_cast(itkLightObject obj) -> itkVectorContainerUCO3"""
  return _itkVectorContainerPython.itkVectorContainerUCO3_cast(*args)

class itkVectorContainerUICID2(ITKCommonBasePython.itkObject,vectoritkContinuousIndexD2):
    """Proxy of C++ itkVectorContainerUICID2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkVectorContainerPython.itkVectorContainerUICID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> vectoritkContinuousIndexD2"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> vectoritkContinuousIndexD2"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned int arg0) -> itkContinuousIndexD2
        ElementAt(self, unsigned int arg0) -> itkContinuousIndexD2
        """
        return _itkVectorContainerPython.itkVectorContainerUICID2_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned int arg0) -> itkContinuousIndexD2"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned int arg0) -> itkContinuousIndexD2"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned int arg0, itkContinuousIndexD2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned int arg0, itkContinuousIndexD2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned int arg0, itkContinuousIndexD2 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUICID2
    def cast(*args):
        """cast(itkLightObject obj) -> itkVectorContainerUICID2"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkVectorContainerUICID2"""
        return _itkVectorContainerPython.itkVectorContainerUICID2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUICID2
        
        Create a new object of the class itkVectorContainerUICID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkVectorContainerUICID2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkVectorContainerUICID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUICID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUICID2.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_CastToSTLContainer,None,itkVectorContainerUICID2)
itkVectorContainerUICID2.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_CastToSTLConstContainer,None,itkVectorContainerUICID2)
itkVectorContainerUICID2.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_ElementAt,None,itkVectorContainerUICID2)
itkVectorContainerUICID2.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_CreateElementAt,None,itkVectorContainerUICID2)
itkVectorContainerUICID2.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_GetElement,None,itkVectorContainerUICID2)
itkVectorContainerUICID2.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_SetElement,None,itkVectorContainerUICID2)
itkVectorContainerUICID2.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_InsertElement,None,itkVectorContainerUICID2)
itkVectorContainerUICID2.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_IndexExists,None,itkVectorContainerUICID2)
itkVectorContainerUICID2.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_GetElementIfIndexExists,None,itkVectorContainerUICID2)
itkVectorContainerUICID2.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_CreateIndex,None,itkVectorContainerUICID2)
itkVectorContainerUICID2.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_DeleteIndex,None,itkVectorContainerUICID2)
itkVectorContainerUICID2.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_Size,None,itkVectorContainerUICID2)
itkVectorContainerUICID2.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_Reserve,None,itkVectorContainerUICID2)
itkVectorContainerUICID2.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_Squeeze,None,itkVectorContainerUICID2)
itkVectorContainerUICID2.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_Initialize,None,itkVectorContainerUICID2)
itkVectorContainerUICID2.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID2_GetPointer,None,itkVectorContainerUICID2)
itkVectorContainerUICID2_swigregister = _itkVectorContainerPython.itkVectorContainerUICID2_swigregister
itkVectorContainerUICID2_swigregister(itkVectorContainerUICID2)

def itkVectorContainerUICID2___New_orig__():
  """itkVectorContainerUICID2___New_orig__()"""
  return _itkVectorContainerPython.itkVectorContainerUICID2___New_orig__()

def itkVectorContainerUICID2_cast(*args):
  """itkVectorContainerUICID2_cast(itkLightObject obj) -> itkVectorContainerUICID2"""
  return _itkVectorContainerPython.itkVectorContainerUICID2_cast(*args)

class itkVectorContainerUICID3(ITKCommonBasePython.itkObject,vectoritkContinuousIndexD3):
    """Proxy of C++ itkVectorContainerUICID3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkVectorContainerPython.itkVectorContainerUICID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> vectoritkContinuousIndexD3"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> vectoritkContinuousIndexD3"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned int arg0) -> itkContinuousIndexD3
        ElementAt(self, unsigned int arg0) -> itkContinuousIndexD3
        """
        return _itkVectorContainerPython.itkVectorContainerUICID3_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned int arg0) -> itkContinuousIndexD3"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned int arg0) -> itkContinuousIndexD3"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned int arg0, itkContinuousIndexD3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned int arg0, itkContinuousIndexD3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned int arg0, itkContinuousIndexD3 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUICID3
    def cast(*args):
        """cast(itkLightObject obj) -> itkVectorContainerUICID3"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkVectorContainerUICID3"""
        return _itkVectorContainerPython.itkVectorContainerUICID3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUICID3
        
        Create a new object of the class itkVectorContainerUICID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkVectorContainerUICID3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkVectorContainerUICID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUICID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUICID3.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_CastToSTLContainer,None,itkVectorContainerUICID3)
itkVectorContainerUICID3.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_CastToSTLConstContainer,None,itkVectorContainerUICID3)
itkVectorContainerUICID3.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_ElementAt,None,itkVectorContainerUICID3)
itkVectorContainerUICID3.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_CreateElementAt,None,itkVectorContainerUICID3)
itkVectorContainerUICID3.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_GetElement,None,itkVectorContainerUICID3)
itkVectorContainerUICID3.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_SetElement,None,itkVectorContainerUICID3)
itkVectorContainerUICID3.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_InsertElement,None,itkVectorContainerUICID3)
itkVectorContainerUICID3.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_IndexExists,None,itkVectorContainerUICID3)
itkVectorContainerUICID3.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_GetElementIfIndexExists,None,itkVectorContainerUICID3)
itkVectorContainerUICID3.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_CreateIndex,None,itkVectorContainerUICID3)
itkVectorContainerUICID3.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_DeleteIndex,None,itkVectorContainerUICID3)
itkVectorContainerUICID3.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_Size,None,itkVectorContainerUICID3)
itkVectorContainerUICID3.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_Reserve,None,itkVectorContainerUICID3)
itkVectorContainerUICID3.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_Squeeze,None,itkVectorContainerUICID3)
itkVectorContainerUICID3.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_Initialize,None,itkVectorContainerUICID3)
itkVectorContainerUICID3.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUICID3_GetPointer,None,itkVectorContainerUICID3)
itkVectorContainerUICID3_swigregister = _itkVectorContainerPython.itkVectorContainerUICID3_swigregister
itkVectorContainerUICID3_swigregister(itkVectorContainerUICID3)

def itkVectorContainerUICID3___New_orig__():
  """itkVectorContainerUICID3___New_orig__()"""
  return _itkVectorContainerPython.itkVectorContainerUICID3___New_orig__()

def itkVectorContainerUICID3_cast(*args):
  """itkVectorContainerUICID3_cast(itkLightObject obj) -> itkVectorContainerUICID3"""
  return _itkVectorContainerPython.itkVectorContainerUICID3_cast(*args)

class itkVectorContainerUILSND2(ITKCommonBasePython.itkObject,vectoritkLevelSetNodeD2):
    """Proxy of C++ itkVectorContainerUILSND2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkVectorContainerPython.itkVectorContainerUILSND2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> vectoritkLevelSetNodeD2"""
        return _itkVectorContainerPython.itkVectorContainerUILSND2_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> vectoritkLevelSetNodeD2"""
        return _itkVectorContainerPython.itkVectorContainerUILSND2_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned int arg0) -> itkLevelSetNodeD2
        ElementAt(self, unsigned int arg0) -> itkLevelSetNodeD2
        """
        return _itkVectorContainerPython.itkVectorContainerUILSND2_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned int arg0) -> itkLevelSetNodeD2"""
        return _itkVectorContainerPython.itkVectorContainerUILSND2_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned int arg0) -> itkLevelSetNodeD2"""
        return _itkVectorContainerPython.itkVectorContainerUILSND2_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned int arg0, itkLevelSetNodeD2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUILSND2_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned int arg0, itkLevelSetNodeD2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUILSND2_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUILSND2_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned int arg0, itkLevelSetNodeD2 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUILSND2_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSND2_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSND2_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerUILSND2_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSND2_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUILSND2_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUILSND2_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUILSND2
    def cast(*args):
        """cast(itkLightObject obj) -> itkVectorContainerUILSND2"""
        return _itkVectorContainerPython.itkVectorContainerUILSND2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkVectorContainerUILSND2"""
        return _itkVectorContainerPython.itkVectorContainerUILSND2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUILSND2
        
        Create a new object of the class itkVectorContainerUILSND2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkVectorContainerUILSND2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkVectorContainerUILSND2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUILSND2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUILSND2.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND2_CastToSTLContainer,None,itkVectorContainerUILSND2)
itkVectorContainerUILSND2.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND2_CastToSTLConstContainer,None,itkVectorContainerUILSND2)
itkVectorContainerUILSND2.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND2_ElementAt,None,itkVectorContainerUILSND2)
itkVectorContainerUILSND2.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND2_CreateElementAt,None,itkVectorContainerUILSND2)
itkVectorContainerUILSND2.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND2_GetElement,None,itkVectorContainerUILSND2)
itkVectorContainerUILSND2.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND2_SetElement,None,itkVectorContainerUILSND2)
itkVectorContainerUILSND2.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND2_InsertElement,None,itkVectorContainerUILSND2)
itkVectorContainerUILSND2.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND2_IndexExists,None,itkVectorContainerUILSND2)
itkVectorContainerUILSND2.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND2_GetElementIfIndexExists,None,itkVectorContainerUILSND2)
itkVectorContainerUILSND2.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND2_CreateIndex,None,itkVectorContainerUILSND2)
itkVectorContainerUILSND2.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND2_DeleteIndex,None,itkVectorContainerUILSND2)
itkVectorContainerUILSND2.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND2_Size,None,itkVectorContainerUILSND2)
itkVectorContainerUILSND2.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND2_Reserve,None,itkVectorContainerUILSND2)
itkVectorContainerUILSND2.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND2_Squeeze,None,itkVectorContainerUILSND2)
itkVectorContainerUILSND2.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND2_Initialize,None,itkVectorContainerUILSND2)
itkVectorContainerUILSND2.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND2_GetPointer,None,itkVectorContainerUILSND2)
itkVectorContainerUILSND2_swigregister = _itkVectorContainerPython.itkVectorContainerUILSND2_swigregister
itkVectorContainerUILSND2_swigregister(itkVectorContainerUILSND2)

def itkVectorContainerUILSND2___New_orig__():
  """itkVectorContainerUILSND2___New_orig__()"""
  return _itkVectorContainerPython.itkVectorContainerUILSND2___New_orig__()

def itkVectorContainerUILSND2_cast(*args):
  """itkVectorContainerUILSND2_cast(itkLightObject obj) -> itkVectorContainerUILSND2"""
  return _itkVectorContainerPython.itkVectorContainerUILSND2_cast(*args)

class itkVectorContainerUILSND3(ITKCommonBasePython.itkObject,vectoritkLevelSetNodeD3):
    """Proxy of C++ itkVectorContainerUILSND3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkVectorContainerPython.itkVectorContainerUILSND3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> vectoritkLevelSetNodeD3"""
        return _itkVectorContainerPython.itkVectorContainerUILSND3_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> vectoritkLevelSetNodeD3"""
        return _itkVectorContainerPython.itkVectorContainerUILSND3_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned int arg0) -> itkLevelSetNodeD3
        ElementAt(self, unsigned int arg0) -> itkLevelSetNodeD3
        """
        return _itkVectorContainerPython.itkVectorContainerUILSND3_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned int arg0) -> itkLevelSetNodeD3"""
        return _itkVectorContainerPython.itkVectorContainerUILSND3_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned int arg0) -> itkLevelSetNodeD3"""
        return _itkVectorContainerPython.itkVectorContainerUILSND3_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned int arg0, itkLevelSetNodeD3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUILSND3_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned int arg0, itkLevelSetNodeD3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUILSND3_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUILSND3_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned int arg0, itkLevelSetNodeD3 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUILSND3_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSND3_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSND3_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerUILSND3_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSND3_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUILSND3_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUILSND3_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUILSND3
    def cast(*args):
        """cast(itkLightObject obj) -> itkVectorContainerUILSND3"""
        return _itkVectorContainerPython.itkVectorContainerUILSND3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkVectorContainerUILSND3"""
        return _itkVectorContainerPython.itkVectorContainerUILSND3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUILSND3
        
        Create a new object of the class itkVectorContainerUILSND3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkVectorContainerUILSND3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkVectorContainerUILSND3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUILSND3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUILSND3.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND3_CastToSTLContainer,None,itkVectorContainerUILSND3)
itkVectorContainerUILSND3.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND3_CastToSTLConstContainer,None,itkVectorContainerUILSND3)
itkVectorContainerUILSND3.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND3_ElementAt,None,itkVectorContainerUILSND3)
itkVectorContainerUILSND3.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND3_CreateElementAt,None,itkVectorContainerUILSND3)
itkVectorContainerUILSND3.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND3_GetElement,None,itkVectorContainerUILSND3)
itkVectorContainerUILSND3.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND3_SetElement,None,itkVectorContainerUILSND3)
itkVectorContainerUILSND3.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND3_InsertElement,None,itkVectorContainerUILSND3)
itkVectorContainerUILSND3.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND3_IndexExists,None,itkVectorContainerUILSND3)
itkVectorContainerUILSND3.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND3_GetElementIfIndexExists,None,itkVectorContainerUILSND3)
itkVectorContainerUILSND3.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND3_CreateIndex,None,itkVectorContainerUILSND3)
itkVectorContainerUILSND3.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND3_DeleteIndex,None,itkVectorContainerUILSND3)
itkVectorContainerUILSND3.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND3_Size,None,itkVectorContainerUILSND3)
itkVectorContainerUILSND3.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND3_Reserve,None,itkVectorContainerUILSND3)
itkVectorContainerUILSND3.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND3_Squeeze,None,itkVectorContainerUILSND3)
itkVectorContainerUILSND3.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND3_Initialize,None,itkVectorContainerUILSND3)
itkVectorContainerUILSND3.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSND3_GetPointer,None,itkVectorContainerUILSND3)
itkVectorContainerUILSND3_swigregister = _itkVectorContainerPython.itkVectorContainerUILSND3_swigregister
itkVectorContainerUILSND3_swigregister(itkVectorContainerUILSND3)

def itkVectorContainerUILSND3___New_orig__():
  """itkVectorContainerUILSND3___New_orig__()"""
  return _itkVectorContainerPython.itkVectorContainerUILSND3___New_orig__()

def itkVectorContainerUILSND3_cast(*args):
  """itkVectorContainerUILSND3_cast(itkLightObject obj) -> itkVectorContainerUILSND3"""
  return _itkVectorContainerPython.itkVectorContainerUILSND3_cast(*args)

class itkVectorContainerUILSNF2(ITKCommonBasePython.itkObject,vectoritkLevelSetNodeF2):
    """Proxy of C++ itkVectorContainerUILSNF2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> vectoritkLevelSetNodeF2"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF2_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> vectoritkLevelSetNodeF2"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF2_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned int arg0) -> itkLevelSetNodeF2
        ElementAt(self, unsigned int arg0) -> itkLevelSetNodeF2
        """
        return _itkVectorContainerPython.itkVectorContainerUILSNF2_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned int arg0) -> itkLevelSetNodeF2"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF2_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned int arg0) -> itkLevelSetNodeF2"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF2_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned int arg0, itkLevelSetNodeF2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF2_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned int arg0, itkLevelSetNodeF2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF2_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF2_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned int arg0, itkLevelSetNodeF2 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF2_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF2_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF2_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF2_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF2_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF2_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF2_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUILSNF2
    def cast(*args):
        """cast(itkLightObject obj) -> itkVectorContainerUILSNF2"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkVectorContainerUILSNF2"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUILSNF2
        
        Create a new object of the class itkVectorContainerUILSNF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkVectorContainerUILSNF2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkVectorContainerUILSNF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUILSNF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUILSNF2.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF2_CastToSTLContainer,None,itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF2_CastToSTLConstContainer,None,itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF2_ElementAt,None,itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF2_CreateElementAt,None,itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF2_GetElement,None,itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF2_SetElement,None,itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF2_InsertElement,None,itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF2_IndexExists,None,itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF2_GetElementIfIndexExists,None,itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF2_CreateIndex,None,itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF2_DeleteIndex,None,itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF2_Size,None,itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF2_Reserve,None,itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF2_Squeeze,None,itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF2_Initialize,None,itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF2_GetPointer,None,itkVectorContainerUILSNF2)
itkVectorContainerUILSNF2_swigregister = _itkVectorContainerPython.itkVectorContainerUILSNF2_swigregister
itkVectorContainerUILSNF2_swigregister(itkVectorContainerUILSNF2)

def itkVectorContainerUILSNF2___New_orig__():
  """itkVectorContainerUILSNF2___New_orig__()"""
  return _itkVectorContainerPython.itkVectorContainerUILSNF2___New_orig__()

def itkVectorContainerUILSNF2_cast(*args):
  """itkVectorContainerUILSNF2_cast(itkLightObject obj) -> itkVectorContainerUILSNF2"""
  return _itkVectorContainerPython.itkVectorContainerUILSNF2_cast(*args)

class itkVectorContainerUILSNF3(ITKCommonBasePython.itkObject,vectoritkLevelSetNodeF3):
    """Proxy of C++ itkVectorContainerUILSNF3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> vectoritkLevelSetNodeF3"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF3_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> vectoritkLevelSetNodeF3"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF3_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned int arg0) -> itkLevelSetNodeF3
        ElementAt(self, unsigned int arg0) -> itkLevelSetNodeF3
        """
        return _itkVectorContainerPython.itkVectorContainerUILSNF3_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned int arg0) -> itkLevelSetNodeF3"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF3_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned int arg0) -> itkLevelSetNodeF3"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF3_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned int arg0, itkLevelSetNodeF3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF3_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned int arg0, itkLevelSetNodeF3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF3_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF3_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned int arg0, itkLevelSetNodeF3 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF3_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF3_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF3_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF3_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF3_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF3_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF3_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUILSNF3
    def cast(*args):
        """cast(itkLightObject obj) -> itkVectorContainerUILSNF3"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkVectorContainerUILSNF3"""
        return _itkVectorContainerPython.itkVectorContainerUILSNF3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUILSNF3
        
        Create a new object of the class itkVectorContainerUILSNF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkVectorContainerUILSNF3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkVectorContainerUILSNF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUILSNF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUILSNF3.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF3_CastToSTLContainer,None,itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF3_CastToSTLConstContainer,None,itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF3_ElementAt,None,itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF3_CreateElementAt,None,itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF3_GetElement,None,itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF3_SetElement,None,itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF3_InsertElement,None,itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF3_IndexExists,None,itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF3_GetElementIfIndexExists,None,itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF3_CreateIndex,None,itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF3_DeleteIndex,None,itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF3_Size,None,itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF3_Reserve,None,itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF3_Squeeze,None,itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF3_Initialize,None,itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNF3_GetPointer,None,itkVectorContainerUILSNF3)
itkVectorContainerUILSNF3_swigregister = _itkVectorContainerPython.itkVectorContainerUILSNF3_swigregister
itkVectorContainerUILSNF3_swigregister(itkVectorContainerUILSNF3)

def itkVectorContainerUILSNF3___New_orig__():
  """itkVectorContainerUILSNF3___New_orig__()"""
  return _itkVectorContainerPython.itkVectorContainerUILSNF3___New_orig__()

def itkVectorContainerUILSNF3_cast(*args):
  """itkVectorContainerUILSNF3_cast(itkLightObject obj) -> itkVectorContainerUILSNF3"""
  return _itkVectorContainerPython.itkVectorContainerUILSNF3_cast(*args)

class itkVectorContainerUILSNUC2(ITKCommonBasePython.itkObject,vectoritkLevelSetNodeUC2):
    """Proxy of C++ itkVectorContainerUILSNUC2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> vectoritkLevelSetNodeUC2"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC2_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> vectoritkLevelSetNodeUC2"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC2_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned int arg0) -> itkLevelSetNodeUC2
        ElementAt(self, unsigned int arg0) -> itkLevelSetNodeUC2
        """
        return _itkVectorContainerPython.itkVectorContainerUILSNUC2_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned int arg0) -> itkLevelSetNodeUC2"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC2_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned int arg0) -> itkLevelSetNodeUC2"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC2_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned int arg0, itkLevelSetNodeUC2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC2_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned int arg0, itkLevelSetNodeUC2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC2_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC2_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned int arg0, itkLevelSetNodeUC2 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC2_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC2_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC2_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC2_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC2_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC2_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC2_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUILSNUC2
    def cast(*args):
        """cast(itkLightObject obj) -> itkVectorContainerUILSNUC2"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkVectorContainerUILSNUC2"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUILSNUC2
        
        Create a new object of the class itkVectorContainerUILSNUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkVectorContainerUILSNUC2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkVectorContainerUILSNUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUILSNUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUILSNUC2.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC2_CastToSTLContainer,None,itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC2_CastToSTLConstContainer,None,itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC2_ElementAt,None,itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC2_CreateElementAt,None,itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC2_GetElement,None,itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC2_SetElement,None,itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC2_InsertElement,None,itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC2_IndexExists,None,itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC2_GetElementIfIndexExists,None,itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC2_CreateIndex,None,itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC2_DeleteIndex,None,itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC2_Size,None,itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC2_Reserve,None,itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC2_Squeeze,None,itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC2_Initialize,None,itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC2_GetPointer,None,itkVectorContainerUILSNUC2)
itkVectorContainerUILSNUC2_swigregister = _itkVectorContainerPython.itkVectorContainerUILSNUC2_swigregister
itkVectorContainerUILSNUC2_swigregister(itkVectorContainerUILSNUC2)

def itkVectorContainerUILSNUC2___New_orig__():
  """itkVectorContainerUILSNUC2___New_orig__()"""
  return _itkVectorContainerPython.itkVectorContainerUILSNUC2___New_orig__()

def itkVectorContainerUILSNUC2_cast(*args):
  """itkVectorContainerUILSNUC2_cast(itkLightObject obj) -> itkVectorContainerUILSNUC2"""
  return _itkVectorContainerPython.itkVectorContainerUILSNUC2_cast(*args)

class itkVectorContainerUILSNUC3(ITKCommonBasePython.itkObject,vectoritkLevelSetNodeUC3):
    """Proxy of C++ itkVectorContainerUILSNUC3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> vectoritkLevelSetNodeUC3"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC3_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> vectoritkLevelSetNodeUC3"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC3_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned int arg0) -> itkLevelSetNodeUC3
        ElementAt(self, unsigned int arg0) -> itkLevelSetNodeUC3
        """
        return _itkVectorContainerPython.itkVectorContainerUILSNUC3_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned int arg0) -> itkLevelSetNodeUC3"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC3_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned int arg0) -> itkLevelSetNodeUC3"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC3_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned int arg0, itkLevelSetNodeUC3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC3_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned int arg0, itkLevelSetNodeUC3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC3_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC3_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned int arg0, itkLevelSetNodeUC3 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC3_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC3_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC3_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC3_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC3_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC3_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC3_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUILSNUC3
    def cast(*args):
        """cast(itkLightObject obj) -> itkVectorContainerUILSNUC3"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkVectorContainerUILSNUC3"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUC3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUILSNUC3
        
        Create a new object of the class itkVectorContainerUILSNUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkVectorContainerUILSNUC3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkVectorContainerUILSNUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUILSNUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUILSNUC3.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC3_CastToSTLContainer,None,itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC3_CastToSTLConstContainer,None,itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC3_ElementAt,None,itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC3_CreateElementAt,None,itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC3_GetElement,None,itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC3_SetElement,None,itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC3_InsertElement,None,itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC3_IndexExists,None,itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC3_GetElementIfIndexExists,None,itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC3_CreateIndex,None,itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC3_DeleteIndex,None,itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC3_Size,None,itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC3_Reserve,None,itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC3_Squeeze,None,itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC3_Initialize,None,itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUC3_GetPointer,None,itkVectorContainerUILSNUC3)
itkVectorContainerUILSNUC3_swigregister = _itkVectorContainerPython.itkVectorContainerUILSNUC3_swigregister
itkVectorContainerUILSNUC3_swigregister(itkVectorContainerUILSNUC3)

def itkVectorContainerUILSNUC3___New_orig__():
  """itkVectorContainerUILSNUC3___New_orig__()"""
  return _itkVectorContainerPython.itkVectorContainerUILSNUC3___New_orig__()

def itkVectorContainerUILSNUC3_cast(*args):
  """itkVectorContainerUILSNUC3_cast(itkLightObject obj) -> itkVectorContainerUILSNUC3"""
  return _itkVectorContainerPython.itkVectorContainerUILSNUC3_cast(*args)

class itkVectorContainerUILSNUL2(ITKCommonBasePython.itkObject,vectoritkLevelSetNodeUL2):
    """Proxy of C++ itkVectorContainerUILSNUL2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> vectoritkLevelSetNodeUL2"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL2_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> vectoritkLevelSetNodeUL2"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL2_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned int arg0) -> itkLevelSetNodeUL2
        ElementAt(self, unsigned int arg0) -> itkLevelSetNodeUL2
        """
        return _itkVectorContainerPython.itkVectorContainerUILSNUL2_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned int arg0) -> itkLevelSetNodeUL2"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL2_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned int arg0) -> itkLevelSetNodeUL2"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL2_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned int arg0, itkLevelSetNodeUL2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL2_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned int arg0, itkLevelSetNodeUL2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL2_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL2_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned int arg0, itkLevelSetNodeUL2 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL2_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL2_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL2_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL2_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL2_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL2_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL2_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUILSNUL2
    def cast(*args):
        """cast(itkLightObject obj) -> itkVectorContainerUILSNUL2"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkVectorContainerUILSNUL2"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUILSNUL2
        
        Create a new object of the class itkVectorContainerUILSNUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkVectorContainerUILSNUL2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkVectorContainerUILSNUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUILSNUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUILSNUL2.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL2_CastToSTLContainer,None,itkVectorContainerUILSNUL2)
itkVectorContainerUILSNUL2.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL2_CastToSTLConstContainer,None,itkVectorContainerUILSNUL2)
itkVectorContainerUILSNUL2.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL2_ElementAt,None,itkVectorContainerUILSNUL2)
itkVectorContainerUILSNUL2.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL2_CreateElementAt,None,itkVectorContainerUILSNUL2)
itkVectorContainerUILSNUL2.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL2_GetElement,None,itkVectorContainerUILSNUL2)
itkVectorContainerUILSNUL2.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL2_SetElement,None,itkVectorContainerUILSNUL2)
itkVectorContainerUILSNUL2.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL2_InsertElement,None,itkVectorContainerUILSNUL2)
itkVectorContainerUILSNUL2.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL2_IndexExists,None,itkVectorContainerUILSNUL2)
itkVectorContainerUILSNUL2.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL2_GetElementIfIndexExists,None,itkVectorContainerUILSNUL2)
itkVectorContainerUILSNUL2.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL2_CreateIndex,None,itkVectorContainerUILSNUL2)
itkVectorContainerUILSNUL2.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL2_DeleteIndex,None,itkVectorContainerUILSNUL2)
itkVectorContainerUILSNUL2.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL2_Size,None,itkVectorContainerUILSNUL2)
itkVectorContainerUILSNUL2.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL2_Reserve,None,itkVectorContainerUILSNUL2)
itkVectorContainerUILSNUL2.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL2_Squeeze,None,itkVectorContainerUILSNUL2)
itkVectorContainerUILSNUL2.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL2_Initialize,None,itkVectorContainerUILSNUL2)
itkVectorContainerUILSNUL2.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL2_GetPointer,None,itkVectorContainerUILSNUL2)
itkVectorContainerUILSNUL2_swigregister = _itkVectorContainerPython.itkVectorContainerUILSNUL2_swigregister
itkVectorContainerUILSNUL2_swigregister(itkVectorContainerUILSNUL2)

def itkVectorContainerUILSNUL2___New_orig__():
  """itkVectorContainerUILSNUL2___New_orig__()"""
  return _itkVectorContainerPython.itkVectorContainerUILSNUL2___New_orig__()

def itkVectorContainerUILSNUL2_cast(*args):
  """itkVectorContainerUILSNUL2_cast(itkLightObject obj) -> itkVectorContainerUILSNUL2"""
  return _itkVectorContainerPython.itkVectorContainerUILSNUL2_cast(*args)

class itkVectorContainerUILSNUL3(ITKCommonBasePython.itkObject,vectoritkLevelSetNodeUL3):
    """Proxy of C++ itkVectorContainerUILSNUL3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> vectoritkLevelSetNodeUL3"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL3_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> vectoritkLevelSetNodeUL3"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL3_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned int arg0) -> itkLevelSetNodeUL3
        ElementAt(self, unsigned int arg0) -> itkLevelSetNodeUL3
        """
        return _itkVectorContainerPython.itkVectorContainerUILSNUL3_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned int arg0) -> itkLevelSetNodeUL3"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL3_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned int arg0) -> itkLevelSetNodeUL3"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL3_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned int arg0, itkLevelSetNodeUL3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL3_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned int arg0, itkLevelSetNodeUL3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL3_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL3_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned int arg0, itkLevelSetNodeUL3 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL3_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL3_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL3_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL3_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL3_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL3_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL3_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUILSNUL3
    def cast(*args):
        """cast(itkLightObject obj) -> itkVectorContainerUILSNUL3"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkVectorContainerUILSNUL3"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUL3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUILSNUL3
        
        Create a new object of the class itkVectorContainerUILSNUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkVectorContainerUILSNUL3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkVectorContainerUILSNUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUILSNUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUILSNUL3.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL3_CastToSTLContainer,None,itkVectorContainerUILSNUL3)
itkVectorContainerUILSNUL3.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL3_CastToSTLConstContainer,None,itkVectorContainerUILSNUL3)
itkVectorContainerUILSNUL3.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL3_ElementAt,None,itkVectorContainerUILSNUL3)
itkVectorContainerUILSNUL3.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL3_CreateElementAt,None,itkVectorContainerUILSNUL3)
itkVectorContainerUILSNUL3.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL3_GetElement,None,itkVectorContainerUILSNUL3)
itkVectorContainerUILSNUL3.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL3_SetElement,None,itkVectorContainerUILSNUL3)
itkVectorContainerUILSNUL3.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL3_InsertElement,None,itkVectorContainerUILSNUL3)
itkVectorContainerUILSNUL3.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL3_IndexExists,None,itkVectorContainerUILSNUL3)
itkVectorContainerUILSNUL3.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL3_GetElementIfIndexExists,None,itkVectorContainerUILSNUL3)
itkVectorContainerUILSNUL3.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL3_CreateIndex,None,itkVectorContainerUILSNUL3)
itkVectorContainerUILSNUL3.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL3_DeleteIndex,None,itkVectorContainerUILSNUL3)
itkVectorContainerUILSNUL3.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL3_Size,None,itkVectorContainerUILSNUL3)
itkVectorContainerUILSNUL3.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL3_Reserve,None,itkVectorContainerUILSNUL3)
itkVectorContainerUILSNUL3.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL3_Squeeze,None,itkVectorContainerUILSNUL3)
itkVectorContainerUILSNUL3.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL3_Initialize,None,itkVectorContainerUILSNUL3)
itkVectorContainerUILSNUL3.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUL3_GetPointer,None,itkVectorContainerUILSNUL3)
itkVectorContainerUILSNUL3_swigregister = _itkVectorContainerPython.itkVectorContainerUILSNUL3_swigregister
itkVectorContainerUILSNUL3_swigregister(itkVectorContainerUILSNUL3)

def itkVectorContainerUILSNUL3___New_orig__():
  """itkVectorContainerUILSNUL3___New_orig__()"""
  return _itkVectorContainerPython.itkVectorContainerUILSNUL3___New_orig__()

def itkVectorContainerUILSNUL3_cast(*args):
  """itkVectorContainerUILSNUL3_cast(itkLightObject obj) -> itkVectorContainerUILSNUL3"""
  return _itkVectorContainerPython.itkVectorContainerUILSNUL3_cast(*args)

class itkVectorContainerUILSNUS2(ITKCommonBasePython.itkObject,vectoritkLevelSetNodeUS2):
    """Proxy of C++ itkVectorContainerUILSNUS2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> vectoritkLevelSetNodeUS2"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS2_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> vectoritkLevelSetNodeUS2"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS2_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned int arg0) -> itkLevelSetNodeUS2
        ElementAt(self, unsigned int arg0) -> itkLevelSetNodeUS2
        """
        return _itkVectorContainerPython.itkVectorContainerUILSNUS2_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned int arg0) -> itkLevelSetNodeUS2"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS2_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned int arg0) -> itkLevelSetNodeUS2"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS2_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned int arg0, itkLevelSetNodeUS2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS2_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned int arg0, itkLevelSetNodeUS2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS2_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS2_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned int arg0, itkLevelSetNodeUS2 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS2_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS2_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS2_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS2_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS2_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS2_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS2_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUILSNUS2
    def cast(*args):
        """cast(itkLightObject obj) -> itkVectorContainerUILSNUS2"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkVectorContainerUILSNUS2"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUILSNUS2
        
        Create a new object of the class itkVectorContainerUILSNUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkVectorContainerUILSNUS2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkVectorContainerUILSNUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUILSNUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUILSNUS2.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS2_CastToSTLContainer,None,itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS2_CastToSTLConstContainer,None,itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS2_ElementAt,None,itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS2_CreateElementAt,None,itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS2_GetElement,None,itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS2_SetElement,None,itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS2_InsertElement,None,itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS2_IndexExists,None,itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS2_GetElementIfIndexExists,None,itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS2_CreateIndex,None,itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS2_DeleteIndex,None,itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS2_Size,None,itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS2_Reserve,None,itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS2_Squeeze,None,itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS2_Initialize,None,itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS2_GetPointer,None,itkVectorContainerUILSNUS2)
itkVectorContainerUILSNUS2_swigregister = _itkVectorContainerPython.itkVectorContainerUILSNUS2_swigregister
itkVectorContainerUILSNUS2_swigregister(itkVectorContainerUILSNUS2)

def itkVectorContainerUILSNUS2___New_orig__():
  """itkVectorContainerUILSNUS2___New_orig__()"""
  return _itkVectorContainerPython.itkVectorContainerUILSNUS2___New_orig__()

def itkVectorContainerUILSNUS2_cast(*args):
  """itkVectorContainerUILSNUS2_cast(itkLightObject obj) -> itkVectorContainerUILSNUS2"""
  return _itkVectorContainerPython.itkVectorContainerUILSNUS2_cast(*args)

class itkVectorContainerUILSNUS3(ITKCommonBasePython.itkObject,vectoritkLevelSetNodeUS3):
    """Proxy of C++ itkVectorContainerUILSNUS3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> vectoritkLevelSetNodeUS3"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS3_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> vectoritkLevelSetNodeUS3"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS3_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned int arg0) -> itkLevelSetNodeUS3
        ElementAt(self, unsigned int arg0) -> itkLevelSetNodeUS3
        """
        return _itkVectorContainerPython.itkVectorContainerUILSNUS3_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned int arg0) -> itkLevelSetNodeUS3"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS3_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned int arg0) -> itkLevelSetNodeUS3"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS3_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned int arg0, itkLevelSetNodeUS3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS3_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned int arg0, itkLevelSetNodeUS3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS3_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS3_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned int arg0, itkLevelSetNodeUS3 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS3_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS3_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS3_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS3_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS3_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS3_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS3_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUILSNUS3
    def cast(*args):
        """cast(itkLightObject obj) -> itkVectorContainerUILSNUS3"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkVectorContainerUILSNUS3"""
        return _itkVectorContainerPython.itkVectorContainerUILSNUS3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUILSNUS3
        
        Create a new object of the class itkVectorContainerUILSNUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkVectorContainerUILSNUS3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkVectorContainerUILSNUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUILSNUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUILSNUS3.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS3_CastToSTLContainer,None,itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS3_CastToSTLConstContainer,None,itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS3_ElementAt,None,itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS3_CreateElementAt,None,itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS3_GetElement,None,itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS3_SetElement,None,itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS3_InsertElement,None,itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS3_IndexExists,None,itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS3_GetElementIfIndexExists,None,itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS3_CreateIndex,None,itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS3_DeleteIndex,None,itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS3_Size,None,itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS3_Reserve,None,itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS3_Squeeze,None,itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS3_Initialize,None,itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUILSNUS3_GetPointer,None,itkVectorContainerUILSNUS3)
itkVectorContainerUILSNUS3_swigregister = _itkVectorContainerPython.itkVectorContainerUILSNUS3_swigregister
itkVectorContainerUILSNUS3_swigregister(itkVectorContainerUILSNUS3)

def itkVectorContainerUILSNUS3___New_orig__():
  """itkVectorContainerUILSNUS3___New_orig__()"""
  return _itkVectorContainerPython.itkVectorContainerUILSNUS3___New_orig__()

def itkVectorContainerUILSNUS3_cast(*args):
  """itkVectorContainerUILSNUS3_cast(itkLightObject obj) -> itkVectorContainerUILSNUS3"""
  return _itkVectorContainerPython.itkVectorContainerUILSNUS3_cast(*args)

class itkVectorContainerUIVUC1(ITKCommonBasePython.itkObject,vectoritkVectorUC1):
    """Proxy of C++ itkVectorContainerUIVUC1 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> vectoritkVectorUC1"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> vectoritkVectorUC1"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned int arg0) -> itkVectorUC1
        ElementAt(self, unsigned int arg0) -> itkVectorUC1
        """
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned int arg0) -> itkVectorUC1"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned int arg0) -> itkVectorUC1"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned int arg0, itkVectorUC1 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned int arg0, itkVectorUC1 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned int arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned int arg0, itkVectorUC1 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned int arg0)"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerUIVUC1
    def cast(*args):
        """cast(itkLightObject obj) -> itkVectorContainerUIVUC1"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkVectorContainerUIVUC1"""
        return _itkVectorContainerPython.itkVectorContainerUIVUC1_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkVectorContainerUIVUC1
        
        Create a new object of the class itkVectorContainerUIVUC1 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkVectorContainerUIVUC1.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkVectorContainerUIVUC1.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerUIVUC1.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerUIVUC1.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_CastToSTLContainer,None,itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_CastToSTLConstContainer,None,itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_ElementAt,None,itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_CreateElementAt,None,itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_GetElement,None,itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_SetElement,None,itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_InsertElement,None,itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_IndexExists,None,itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_GetElementIfIndexExists,None,itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_CreateIndex,None,itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_DeleteIndex,None,itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_Size,None,itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_Reserve,None,itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_Squeeze,None,itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_Initialize,None,itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerUIVUC1_GetPointer,None,itkVectorContainerUIVUC1)
itkVectorContainerUIVUC1_swigregister = _itkVectorContainerPython.itkVectorContainerUIVUC1_swigregister
itkVectorContainerUIVUC1_swigregister(itkVectorContainerUIVUC1)

def itkVectorContainerUIVUC1___New_orig__():
  """itkVectorContainerUIVUC1___New_orig__()"""
  return _itkVectorContainerPython.itkVectorContainerUIVUC1___New_orig__()

def itkVectorContainerUIVUC1_cast(*args):
  """itkVectorContainerUIVUC1_cast(itkLightObject obj) -> itkVectorContainerUIVUC1"""
  return _itkVectorContainerPython.itkVectorContainerUIVUC1_cast(*args)

class itkVectorContainerULD(ITKCommonBasePython.itkObject,pyBasePython.vectorD):
    """Proxy of C++ itkVectorContainerULD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkVectorContainerPython.itkVectorContainerULD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> vectorD"""
        return _itkVectorContainerPython.itkVectorContainerULD_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> vectorD"""
        return _itkVectorContainerPython.itkVectorContainerULD_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned long arg0) -> double
        ElementAt(self, unsigned long arg0) -> double
        """
        return _itkVectorContainerPython.itkVectorContainerULD_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned long arg0) -> double"""
        return _itkVectorContainerPython.itkVectorContainerULD_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned long arg0) -> double"""
        return _itkVectorContainerPython.itkVectorContainerULD_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned long arg0, double arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULD_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned long arg0, double arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULD_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULD_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned long arg0, double arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULD_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULD_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULD_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULD_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULD_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULD_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULD_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULD
    def cast(*args):
        """cast(itkLightObject obj) -> itkVectorContainerULD"""
        return _itkVectorContainerPython.itkVectorContainerULD_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkVectorContainerULD"""
        return _itkVectorContainerPython.itkVectorContainerULD_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULD
        
        Create a new object of the class itkVectorContainerULD and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkVectorContainerULD.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkVectorContainerULD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULD.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_CastToSTLContainer,None,itkVectorContainerULD)
itkVectorContainerULD.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_CastToSTLConstContainer,None,itkVectorContainerULD)
itkVectorContainerULD.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_ElementAt,None,itkVectorContainerULD)
itkVectorContainerULD.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_CreateElementAt,None,itkVectorContainerULD)
itkVectorContainerULD.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_GetElement,None,itkVectorContainerULD)
itkVectorContainerULD.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_SetElement,None,itkVectorContainerULD)
itkVectorContainerULD.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_InsertElement,None,itkVectorContainerULD)
itkVectorContainerULD.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_IndexExists,None,itkVectorContainerULD)
itkVectorContainerULD.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_GetElementIfIndexExists,None,itkVectorContainerULD)
itkVectorContainerULD.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_CreateIndex,None,itkVectorContainerULD)
itkVectorContainerULD.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_DeleteIndex,None,itkVectorContainerULD)
itkVectorContainerULD.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_Size,None,itkVectorContainerULD)
itkVectorContainerULD.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_Reserve,None,itkVectorContainerULD)
itkVectorContainerULD.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_Squeeze,None,itkVectorContainerULD)
itkVectorContainerULD.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_Initialize,None,itkVectorContainerULD)
itkVectorContainerULD.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULD_GetPointer,None,itkVectorContainerULD)
itkVectorContainerULD_swigregister = _itkVectorContainerPython.itkVectorContainerULD_swigregister
itkVectorContainerULD_swigregister(itkVectorContainerULD)

def itkVectorContainerULD___New_orig__():
  """itkVectorContainerULD___New_orig__()"""
  return _itkVectorContainerPython.itkVectorContainerULD___New_orig__()

def itkVectorContainerULD_cast(*args):
  """itkVectorContainerULD_cast(itkLightObject obj) -> itkVectorContainerULD"""
  return _itkVectorContainerPython.itkVectorContainerULD_cast(*args)

class itkVectorContainerULPD2(ITKCommonBasePython.itkObject,vectoritkPointD2):
    """Proxy of C++ itkVectorContainerULPD2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkVectorContainerPython.itkVectorContainerULPD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> vectoritkPointD2"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> vectoritkPointD2"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned long arg0) -> itkPointD2
        ElementAt(self, unsigned long arg0) -> itkPointD2
        """
        return _itkVectorContainerPython.itkVectorContainerULPD2_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned long arg0) -> itkPointD2"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned long arg0) -> itkPointD2"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned long arg0, itkPointD2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned long arg0, itkPointD2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned long arg0, itkPointD2 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULPD2
    def cast(*args):
        """cast(itkLightObject obj) -> itkVectorContainerULPD2"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkVectorContainerULPD2"""
        return _itkVectorContainerPython.itkVectorContainerULPD2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULPD2
        
        Create a new object of the class itkVectorContainerULPD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkVectorContainerULPD2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkVectorContainerULPD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULPD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULPD2.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_CastToSTLContainer,None,itkVectorContainerULPD2)
itkVectorContainerULPD2.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_CastToSTLConstContainer,None,itkVectorContainerULPD2)
itkVectorContainerULPD2.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_ElementAt,None,itkVectorContainerULPD2)
itkVectorContainerULPD2.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_CreateElementAt,None,itkVectorContainerULPD2)
itkVectorContainerULPD2.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_GetElement,None,itkVectorContainerULPD2)
itkVectorContainerULPD2.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_SetElement,None,itkVectorContainerULPD2)
itkVectorContainerULPD2.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_InsertElement,None,itkVectorContainerULPD2)
itkVectorContainerULPD2.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_IndexExists,None,itkVectorContainerULPD2)
itkVectorContainerULPD2.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_GetElementIfIndexExists,None,itkVectorContainerULPD2)
itkVectorContainerULPD2.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_CreateIndex,None,itkVectorContainerULPD2)
itkVectorContainerULPD2.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_DeleteIndex,None,itkVectorContainerULPD2)
itkVectorContainerULPD2.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_Size,None,itkVectorContainerULPD2)
itkVectorContainerULPD2.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_Reserve,None,itkVectorContainerULPD2)
itkVectorContainerULPD2.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_Squeeze,None,itkVectorContainerULPD2)
itkVectorContainerULPD2.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_Initialize,None,itkVectorContainerULPD2)
itkVectorContainerULPD2.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD2_GetPointer,None,itkVectorContainerULPD2)
itkVectorContainerULPD2_swigregister = _itkVectorContainerPython.itkVectorContainerULPD2_swigregister
itkVectorContainerULPD2_swigregister(itkVectorContainerULPD2)

def itkVectorContainerULPD2___New_orig__():
  """itkVectorContainerULPD2___New_orig__()"""
  return _itkVectorContainerPython.itkVectorContainerULPD2___New_orig__()

def itkVectorContainerULPD2_cast(*args):
  """itkVectorContainerULPD2_cast(itkLightObject obj) -> itkVectorContainerULPD2"""
  return _itkVectorContainerPython.itkVectorContainerULPD2_cast(*args)

class itkVectorContainerULPD3(ITKCommonBasePython.itkObject,vectoritkPointD3):
    """Proxy of C++ itkVectorContainerULPD3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkVectorContainerPython.itkVectorContainerULPD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> vectoritkPointD3"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> vectoritkPointD3"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned long arg0) -> itkPointD3
        ElementAt(self, unsigned long arg0) -> itkPointD3
        """
        return _itkVectorContainerPython.itkVectorContainerULPD3_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned long arg0) -> itkPointD3"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned long arg0) -> itkPointD3"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned long arg0, itkPointD3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned long arg0, itkPointD3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned long arg0, itkPointD3 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULPD3
    def cast(*args):
        """cast(itkLightObject obj) -> itkVectorContainerULPD3"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkVectorContainerULPD3"""
        return _itkVectorContainerPython.itkVectorContainerULPD3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULPD3
        
        Create a new object of the class itkVectorContainerULPD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkVectorContainerULPD3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkVectorContainerULPD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULPD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULPD3.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_CastToSTLContainer,None,itkVectorContainerULPD3)
itkVectorContainerULPD3.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_CastToSTLConstContainer,None,itkVectorContainerULPD3)
itkVectorContainerULPD3.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_ElementAt,None,itkVectorContainerULPD3)
itkVectorContainerULPD3.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_CreateElementAt,None,itkVectorContainerULPD3)
itkVectorContainerULPD3.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_GetElement,None,itkVectorContainerULPD3)
itkVectorContainerULPD3.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_SetElement,None,itkVectorContainerULPD3)
itkVectorContainerULPD3.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_InsertElement,None,itkVectorContainerULPD3)
itkVectorContainerULPD3.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_IndexExists,None,itkVectorContainerULPD3)
itkVectorContainerULPD3.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_GetElementIfIndexExists,None,itkVectorContainerULPD3)
itkVectorContainerULPD3.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_CreateIndex,None,itkVectorContainerULPD3)
itkVectorContainerULPD3.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_DeleteIndex,None,itkVectorContainerULPD3)
itkVectorContainerULPD3.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_Size,None,itkVectorContainerULPD3)
itkVectorContainerULPD3.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_Reserve,None,itkVectorContainerULPD3)
itkVectorContainerULPD3.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_Squeeze,None,itkVectorContainerULPD3)
itkVectorContainerULPD3.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_Initialize,None,itkVectorContainerULPD3)
itkVectorContainerULPD3.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULPD3_GetPointer,None,itkVectorContainerULPD3)
itkVectorContainerULPD3_swigregister = _itkVectorContainerPython.itkVectorContainerULPD3_swigregister
itkVectorContainerULPD3_swigregister(itkVectorContainerULPD3)

def itkVectorContainerULPD3___New_orig__():
  """itkVectorContainerULPD3___New_orig__()"""
  return _itkVectorContainerPython.itkVectorContainerULPD3___New_orig__()

def itkVectorContainerULPD3_cast(*args):
  """itkVectorContainerULPD3_cast(itkLightObject obj) -> itkVectorContainerULPD3"""
  return _itkVectorContainerPython.itkVectorContainerULPD3_cast(*args)

class itkVectorContainerULSUL(ITKCommonBasePython.itkObject,pyBasePython.vectorsetUL):
    """Proxy of C++ itkVectorContainerULSUL class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkVectorContainerPython.itkVectorContainerULSUL___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> vectorsetUL"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> vectorsetUL"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned long arg0) -> setUL
        ElementAt(self, unsigned long arg0) -> setUL
        """
        return _itkVectorContainerPython.itkVectorContainerULSUL_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned long arg0) -> setUL"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned long arg0) -> setUL"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned long arg0, setUL arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned long arg0, setUL arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned long arg0, setUL arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULSUL
    def cast(*args):
        """cast(itkLightObject obj) -> itkVectorContainerULSUL"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkVectorContainerULSUL"""
        return _itkVectorContainerPython.itkVectorContainerULSUL_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULSUL
        
        Create a new object of the class itkVectorContainerULSUL and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkVectorContainerULSUL.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkVectorContainerULSUL.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULSUL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULSUL.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_CastToSTLContainer,None,itkVectorContainerULSUL)
itkVectorContainerULSUL.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_CastToSTLConstContainer,None,itkVectorContainerULSUL)
itkVectorContainerULSUL.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_ElementAt,None,itkVectorContainerULSUL)
itkVectorContainerULSUL.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_CreateElementAt,None,itkVectorContainerULSUL)
itkVectorContainerULSUL.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_GetElement,None,itkVectorContainerULSUL)
itkVectorContainerULSUL.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_SetElement,None,itkVectorContainerULSUL)
itkVectorContainerULSUL.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_InsertElement,None,itkVectorContainerULSUL)
itkVectorContainerULSUL.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_IndexExists,None,itkVectorContainerULSUL)
itkVectorContainerULSUL.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_GetElementIfIndexExists,None,itkVectorContainerULSUL)
itkVectorContainerULSUL.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_CreateIndex,None,itkVectorContainerULSUL)
itkVectorContainerULSUL.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_DeleteIndex,None,itkVectorContainerULSUL)
itkVectorContainerULSUL.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_Size,None,itkVectorContainerULSUL)
itkVectorContainerULSUL.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_Reserve,None,itkVectorContainerULSUL)
itkVectorContainerULSUL.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_Squeeze,None,itkVectorContainerULSUL)
itkVectorContainerULSUL.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_Initialize,None,itkVectorContainerULSUL)
itkVectorContainerULSUL.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULSUL_GetPointer,None,itkVectorContainerULSUL)
itkVectorContainerULSUL_swigregister = _itkVectorContainerPython.itkVectorContainerULSUL_swigregister
itkVectorContainerULSUL_swigregister(itkVectorContainerULSUL)

def itkVectorContainerULSUL___New_orig__():
  """itkVectorContainerULSUL___New_orig__()"""
  return _itkVectorContainerPython.itkVectorContainerULSUL___New_orig__()

def itkVectorContainerULSUL_cast(*args):
  """itkVectorContainerULSUL_cast(itkLightObject obj) -> itkVectorContainerULSUL"""
  return _itkVectorContainerPython.itkVectorContainerULSUL_cast(*args)

class itkVectorContainerULVD2(ITKCommonBasePython.itkObject,vectoritkVectorD2):
    """Proxy of C++ itkVectorContainerULVD2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkVectorContainerPython.itkVectorContainerULVD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> vectoritkVectorD2"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> vectoritkVectorD2"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned long arg0) -> itkVectorD2
        ElementAt(self, unsigned long arg0) -> itkVectorD2
        """
        return _itkVectorContainerPython.itkVectorContainerULVD2_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned long arg0) -> itkVectorD2"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned long arg0) -> itkVectorD2"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned long arg0, itkVectorD2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned long arg0, itkVectorD2 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned long arg0, itkVectorD2 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULVD2
    def cast(*args):
        """cast(itkLightObject obj) -> itkVectorContainerULVD2"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkVectorContainerULVD2"""
        return _itkVectorContainerPython.itkVectorContainerULVD2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULVD2
        
        Create a new object of the class itkVectorContainerULVD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkVectorContainerULVD2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkVectorContainerULVD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULVD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULVD2.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_CastToSTLContainer,None,itkVectorContainerULVD2)
itkVectorContainerULVD2.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_CastToSTLConstContainer,None,itkVectorContainerULVD2)
itkVectorContainerULVD2.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_ElementAt,None,itkVectorContainerULVD2)
itkVectorContainerULVD2.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_CreateElementAt,None,itkVectorContainerULVD2)
itkVectorContainerULVD2.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_GetElement,None,itkVectorContainerULVD2)
itkVectorContainerULVD2.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_SetElement,None,itkVectorContainerULVD2)
itkVectorContainerULVD2.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_InsertElement,None,itkVectorContainerULVD2)
itkVectorContainerULVD2.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_IndexExists,None,itkVectorContainerULVD2)
itkVectorContainerULVD2.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_GetElementIfIndexExists,None,itkVectorContainerULVD2)
itkVectorContainerULVD2.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_CreateIndex,None,itkVectorContainerULVD2)
itkVectorContainerULVD2.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_DeleteIndex,None,itkVectorContainerULVD2)
itkVectorContainerULVD2.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_Size,None,itkVectorContainerULVD2)
itkVectorContainerULVD2.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_Reserve,None,itkVectorContainerULVD2)
itkVectorContainerULVD2.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_Squeeze,None,itkVectorContainerULVD2)
itkVectorContainerULVD2.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_Initialize,None,itkVectorContainerULVD2)
itkVectorContainerULVD2.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD2_GetPointer,None,itkVectorContainerULVD2)
itkVectorContainerULVD2_swigregister = _itkVectorContainerPython.itkVectorContainerULVD2_swigregister
itkVectorContainerULVD2_swigregister(itkVectorContainerULVD2)

def itkVectorContainerULVD2___New_orig__():
  """itkVectorContainerULVD2___New_orig__()"""
  return _itkVectorContainerPython.itkVectorContainerULVD2___New_orig__()

def itkVectorContainerULVD2_cast(*args):
  """itkVectorContainerULVD2_cast(itkLightObject obj) -> itkVectorContainerULVD2"""
  return _itkVectorContainerPython.itkVectorContainerULVD2_cast(*args)

class itkVectorContainerULVD3(ITKCommonBasePython.itkObject,vectoritkVectorD3):
    """Proxy of C++ itkVectorContainerULVD3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkVectorContainerPython.itkVectorContainerULVD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def CastToSTLContainer(self):
        """CastToSTLContainer(self) -> vectoritkVectorD3"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_CastToSTLContainer(self)

    def CastToSTLConstContainer(self):
        """CastToSTLConstContainer(self) -> vectoritkVectorD3"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_CastToSTLConstContainer(self)

    def ElementAt(self, *args):
        """
        ElementAt(self, unsigned long arg0) -> itkVectorD3
        ElementAt(self, unsigned long arg0) -> itkVectorD3
        """
        return _itkVectorContainerPython.itkVectorContainerULVD3_ElementAt(self, *args)

    def CreateElementAt(self, *args):
        """CreateElementAt(self, unsigned long arg0) -> itkVectorD3"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_CreateElementAt(self, *args)

    def GetElement(self, *args):
        """GetElement(self, unsigned long arg0) -> itkVectorD3"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_GetElement(self, *args)

    def SetElement(self, *args):
        """SetElement(self, unsigned long arg0, itkVectorD3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_SetElement(self, *args)

    def InsertElement(self, *args):
        """InsertElement(self, unsigned long arg0, itkVectorD3 arg1)"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_InsertElement(self, *args)

    def IndexExists(self, *args):
        """IndexExists(self, unsigned long arg0) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_IndexExists(self, *args)

    def GetElementIfIndexExists(self, *args):
        """GetElementIfIndexExists(self, unsigned long arg0, itkVectorD3 arg1) -> bool"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_GetElementIfIndexExists(self, *args)

    def CreateIndex(self, *args):
        """CreateIndex(self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_CreateIndex(self, *args)

    def DeleteIndex(self, *args):
        """DeleteIndex(self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_DeleteIndex(self, *args)

    def Size(self):
        """Size(self) -> unsigned long"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_Size(self)

    def Reserve(self, *args):
        """Reserve(self, unsigned long arg0)"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_Reserve(self, *args)

    def Squeeze(self):
        """Squeeze(self)"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_Squeeze(self)

    def Initialize(self):
        """Initialize(self)"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_Initialize(self)

    __swig_destroy__ = _itkVectorContainerPython.delete_itkVectorContainerULVD3
    def cast(*args):
        """cast(itkLightObject obj) -> itkVectorContainerULVD3"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkVectorContainerULVD3"""
        return _itkVectorContainerPython.itkVectorContainerULVD3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkVectorContainerULVD3
        
        Create a new object of the class itkVectorContainerULVD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkVectorContainerULVD3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkVectorContainerULVD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkVectorContainerULVD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkVectorContainerULVD3.CastToSTLContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_CastToSTLContainer,None,itkVectorContainerULVD3)
itkVectorContainerULVD3.CastToSTLConstContainer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_CastToSTLConstContainer,None,itkVectorContainerULVD3)
itkVectorContainerULVD3.ElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_ElementAt,None,itkVectorContainerULVD3)
itkVectorContainerULVD3.CreateElementAt = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_CreateElementAt,None,itkVectorContainerULVD3)
itkVectorContainerULVD3.GetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_GetElement,None,itkVectorContainerULVD3)
itkVectorContainerULVD3.SetElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_SetElement,None,itkVectorContainerULVD3)
itkVectorContainerULVD3.InsertElement = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_InsertElement,None,itkVectorContainerULVD3)
itkVectorContainerULVD3.IndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_IndexExists,None,itkVectorContainerULVD3)
itkVectorContainerULVD3.GetElementIfIndexExists = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_GetElementIfIndexExists,None,itkVectorContainerULVD3)
itkVectorContainerULVD3.CreateIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_CreateIndex,None,itkVectorContainerULVD3)
itkVectorContainerULVD3.DeleteIndex = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_DeleteIndex,None,itkVectorContainerULVD3)
itkVectorContainerULVD3.Size = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_Size,None,itkVectorContainerULVD3)
itkVectorContainerULVD3.Reserve = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_Reserve,None,itkVectorContainerULVD3)
itkVectorContainerULVD3.Squeeze = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_Squeeze,None,itkVectorContainerULVD3)
itkVectorContainerULVD3.Initialize = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_Initialize,None,itkVectorContainerULVD3)
itkVectorContainerULVD3.GetPointer = new_instancemethod(_itkVectorContainerPython.itkVectorContainerULVD3_GetPointer,None,itkVectorContainerULVD3)
itkVectorContainerULVD3_swigregister = _itkVectorContainerPython.itkVectorContainerULVD3_swigregister
itkVectorContainerULVD3_swigregister(itkVectorContainerULVD3)

def itkVectorContainerULVD3___New_orig__():
  """itkVectorContainerULVD3___New_orig__()"""
  return _itkVectorContainerPython.itkVectorContainerULVD3___New_orig__()

def itkVectorContainerULVD3_cast(*args):
  """itkVectorContainerULVD3_cast(itkLightObject obj) -> itkVectorContainerULVD3"""
  return _itkVectorContainerPython.itkVectorContainerULVD3_cast(*args)



