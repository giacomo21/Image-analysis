// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkMeshChicken
#endif
#ifdef SWIGCSHARP
%module itkMeshCsharp
#endif
#ifdef SWIGGUILE
%module itkMeshGuile
#endif
#ifdef SWIGJAVA
%module itkMeshJava
#endif
#ifdef SWIGLUA
%module itkMeshLua
#endif
#ifdef SWIGMODULA3
%module itkMeshModula3
#endif
#ifdef SWIGMZSCHEME
%module itkMeshMzscheme
#endif
#ifdef SWIGOCAML
%module itkMeshOcaml
#endif
#ifdef SWIGPERL
%module itkMeshPerl
#endif
#ifdef SWIGPERL5
%module itkMeshPerl5
#endif
#ifdef SWIGPHP
%module itkMeshPhp
#endif
#ifdef SWIGPHP4
%module itkMeshPhp4
#endif
#ifdef SWIGPHP5
%module itkMeshPhp5
#endif
#ifdef SWIGPIKE
%module itkMeshPike
#endif
#ifdef SWIGPYTHON
%module itkMeshPython
#endif
#ifdef SWIGR
%module itkMeshR
#endif
#ifdef SWIGRUBY
%module itkMeshRuby
#endif
#ifdef SWIGSEXP
%module itkMeshSexp
#endif
#ifdef SWIGTCL
%module itkMeshTcl
#endif
#ifdef SWIGXML
%module itkMeshXml
#endif

%{
#include "Base.includes"
#include "Mesh.includes"
%}


%{
%}




%import wrap_itkPointSet.i
%import wrap_itkMapContainer.i
%import wrap_itkVectorContainer.i
%import wrap_ITKCommonBase.i


%include itk.i
%include wrap_itkMesh_ext.i


 class itkMeshD2D : public itkPointSetD2D {
   public:
     enum  {  PointDimension = 2 };
     enum  {  MaxTopologicalDimension = 2 };
     enum CellsAllocationMethodType {  CellsAllocationMethodUndefined = 0,  CellsAllocatedAsStaticArray = 1,  CellsAllocatedAsADynamicArray = 2,  CellsAllocatedDynamicallyCellByCell = 3 };
     static itkMeshD2D_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     unsigned long GetNumberOfCells() const;
     void PassStructure(itkMeshD2D * inputMesh);
     virtual void Initialize();
     virtual void CopyInformation(itkDataObject const * data);
     virtual void Graft(itkDataObject const * data);
     void SetCellLinks(itkMapContainerULSUL * arg0);
     void SetCellData(itkMapContainerULD * arg0);
     itkMapContainerULD * GetCellData();
     itkMapContainerULD const * GetCellData() const;
     void SetCellData(unsigned long arg0, double arg1);
     bool GetCellData(unsigned long arg0, double * arg1) const;
     void SetBoundaryAssignment(int dimension, unsigned long cellId, unsigned long featureId, unsigned long boundaryId);
     bool GetBoundaryAssignment(int dimension, unsigned long cellId, unsigned long featureId, unsigned long * boundaryId) const;
     bool RemoveBoundaryAssignment(int dimension, unsigned long cellId, unsigned long featureId);
     unsigned long GetNumberOfCellBoundaryFeatures(int dimension, unsigned long arg1) const;
     unsigned long GetCellBoundaryFeatureNeighbors(int dimension, unsigned long arg1, unsigned long arg2, std::set< unsigned long, std::less< unsigned long > > * cellSet);
     unsigned long GetCellNeighbors(unsigned long cellId, std::set< unsigned long, std::less< unsigned long > > * cellSet);
     void BuildCellLinks() const;
     virtual void SetCellsAllocationMethod(itkMeshD2D::CellsAllocationMethodType const _arg);
     virtual itkMeshD2D::CellsAllocationMethodType const & GetCellsAllocationMethod() const;
   private:
     itkMeshD2D(itkMeshD2D const & arg0);
     void operator=(itkMeshD2D const & arg0);
   protected:
     itkMeshD2D();
     ~itkMeshD2D();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     void ReleaseCellsMemory();
 };


 class itkMeshD2D_Pointer {
   public:
     itkMeshD2D_Pointer();
     itkMeshD2D_Pointer(itkMeshD2D_Pointer const & p);
     itkMeshD2D_Pointer(itkMeshD2D * p);
     ~itkMeshD2D_Pointer();
     itkMeshD2D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeshD2D * GetPointer() const;
     bool operator<(itkMeshD2D_Pointer const & r) const;
     bool operator>(itkMeshD2D_Pointer const & r) const;
     bool operator<=(itkMeshD2D_Pointer const & r) const;
     bool operator>=(itkMeshD2D_Pointer const & r) const;
     itkMeshD2D_Pointer & operator=(itkMeshD2D_Pointer const & r);
     itkMeshD2D_Pointer & operator=(itkMeshD2D * r);
     itkMeshD2D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMeshD2Q : public itkPointSetD2Q {
   public:
     enum  {  PointDimension = 2 };
     enum  {  MaxTopologicalDimension = 2 };
     enum CellsAllocationMethodType {  CellsAllocationMethodUndefined = 0,  CellsAllocatedAsStaticArray = 1,  CellsAllocatedAsADynamicArray = 2,  CellsAllocatedDynamicallyCellByCell = 3 };
     static itkMeshD2Q_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     unsigned long GetNumberOfCells() const;
     void PassStructure(itkMeshD2Q * inputMesh);
     virtual void Initialize();
     virtual void CopyInformation(itkDataObject const * data);
     virtual void Graft(itkDataObject const * data);
     void SetCellLinks(itkMapContainerULSUL * arg0);
     void SetCellData(itkMapContainerULD * arg0);
     itkMapContainerULD * GetCellData();
     itkMapContainerULD const * GetCellData() const;
     void SetCellData(unsigned long arg0, double arg1);
     bool GetCellData(unsigned long arg0, double * arg1) const;
     void SetBoundaryAssignment(int dimension, unsigned long cellId, unsigned char featureId, unsigned long boundaryId);
     bool GetBoundaryAssignment(int dimension, unsigned long cellId, unsigned char featureId, unsigned long * boundaryId) const;
     bool RemoveBoundaryAssignment(int dimension, unsigned long cellId, unsigned char featureId);
     unsigned char GetNumberOfCellBoundaryFeatures(int dimension, unsigned long arg1) const;
     unsigned long GetCellBoundaryFeatureNeighbors(int dimension, unsigned long arg1, unsigned char arg2, std::set< unsigned long, std::less< unsigned long > > * cellSet);
     unsigned long GetCellNeighbors(unsigned long cellId, std::set< unsigned long, std::less< unsigned long > > * cellSet);
     void BuildCellLinks() const;
     virtual void SetCellsAllocationMethod(itkMeshD2Q::CellsAllocationMethodType const _arg);
     virtual itkMeshD2Q::CellsAllocationMethodType const & GetCellsAllocationMethod() const;
   private:
     itkMeshD2Q(itkMeshD2Q const & arg0);
     void operator=(itkMeshD2Q const & arg0);
   protected:
     itkMeshD2Q();
     ~itkMeshD2Q();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     void ReleaseCellsMemory();
 };


 class itkMeshD2Q_Pointer {
   public:
     itkMeshD2Q_Pointer();
     itkMeshD2Q_Pointer(itkMeshD2Q_Pointer const & p);
     itkMeshD2Q_Pointer(itkMeshD2Q * p);
     ~itkMeshD2Q_Pointer();
     itkMeshD2Q * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeshD2Q * GetPointer() const;
     bool operator<(itkMeshD2Q_Pointer const & r) const;
     bool operator>(itkMeshD2Q_Pointer const & r) const;
     bool operator<=(itkMeshD2Q_Pointer const & r) const;
     bool operator>=(itkMeshD2Q_Pointer const & r) const;
     itkMeshD2Q_Pointer & operator=(itkMeshD2Q_Pointer const & r);
     itkMeshD2Q_Pointer & operator=(itkMeshD2Q * r);
     itkMeshD2Q * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMeshD2S : public itkPointSetD2S {
   public:
     enum  {  PointDimension = 2 };
     enum  {  MaxTopologicalDimension = 2 };
     enum CellsAllocationMethodType {  CellsAllocationMethodUndefined = 0,  CellsAllocatedAsStaticArray = 1,  CellsAllocatedAsADynamicArray = 2,  CellsAllocatedDynamicallyCellByCell = 3 };
     static itkMeshD2S_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     unsigned long GetNumberOfCells() const;
     void PassStructure(itkMeshD2S * inputMesh);
     virtual void Initialize();
     virtual void CopyInformation(itkDataObject const * data);
     virtual void Graft(itkDataObject const * data);
     void SetCellLinks(itkVectorContainerULSUL * arg0);
     void SetCellData(itkVectorContainerULD * arg0);
     itkVectorContainerULD * GetCellData();
     itkVectorContainerULD const * GetCellData() const;
     void SetCellData(unsigned long arg0, double arg1);
     bool GetCellData(unsigned long arg0, double * arg1) const;
     void SetBoundaryAssignment(int dimension, unsigned long cellId, unsigned long featureId, unsigned long boundaryId);
     bool GetBoundaryAssignment(int dimension, unsigned long cellId, unsigned long featureId, unsigned long * boundaryId) const;
     bool RemoveBoundaryAssignment(int dimension, unsigned long cellId, unsigned long featureId);
     unsigned long GetNumberOfCellBoundaryFeatures(int dimension, unsigned long arg1) const;
     unsigned long GetCellBoundaryFeatureNeighbors(int dimension, unsigned long arg1, unsigned long arg2, std::set< unsigned long, std::less< unsigned long > > * cellSet);
     unsigned long GetCellNeighbors(unsigned long cellId, std::set< unsigned long, std::less< unsigned long > > * cellSet);
     void BuildCellLinks() const;
     virtual void SetCellsAllocationMethod(itkMeshD2S::CellsAllocationMethodType const _arg);
     virtual itkMeshD2S::CellsAllocationMethodType const & GetCellsAllocationMethod() const;
   private:
     itkMeshD2S(itkMeshD2S const & arg0);
     void operator=(itkMeshD2S const & arg0);
   protected:
     itkMeshD2S();
     ~itkMeshD2S();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     void ReleaseCellsMemory();
 };


 class itkMeshD2S_Pointer {
   public:
     itkMeshD2S_Pointer();
     itkMeshD2S_Pointer(itkMeshD2S_Pointer const & p);
     itkMeshD2S_Pointer(itkMeshD2S * p);
     ~itkMeshD2S_Pointer();
     itkMeshD2S * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeshD2S * GetPointer() const;
     bool operator<(itkMeshD2S_Pointer const & r) const;
     bool operator>(itkMeshD2S_Pointer const & r) const;
     bool operator<=(itkMeshD2S_Pointer const & r) const;
     bool operator>=(itkMeshD2S_Pointer const & r) const;
     itkMeshD2S_Pointer & operator=(itkMeshD2S_Pointer const & r);
     itkMeshD2S_Pointer & operator=(itkMeshD2S * r);
     itkMeshD2S * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMeshD3D : public itkPointSetD3D {
   public:
     enum  {  PointDimension = 3 };
     enum  {  MaxTopologicalDimension = 3 };
     enum CellsAllocationMethodType {  CellsAllocationMethodUndefined = 0,  CellsAllocatedAsStaticArray = 1,  CellsAllocatedAsADynamicArray = 2,  CellsAllocatedDynamicallyCellByCell = 3 };
     static itkMeshD3D_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     unsigned long GetNumberOfCells() const;
     void PassStructure(itkMeshD3D * inputMesh);
     virtual void Initialize();
     virtual void CopyInformation(itkDataObject const * data);
     virtual void Graft(itkDataObject const * data);
     void SetCellLinks(itkMapContainerULSUL * arg0);
     void SetCellData(itkMapContainerULD * arg0);
     itkMapContainerULD * GetCellData();
     itkMapContainerULD const * GetCellData() const;
     void SetCellData(unsigned long arg0, double arg1);
     bool GetCellData(unsigned long arg0, double * arg1) const;
     void SetBoundaryAssignment(int dimension, unsigned long cellId, unsigned long featureId, unsigned long boundaryId);
     bool GetBoundaryAssignment(int dimension, unsigned long cellId, unsigned long featureId, unsigned long * boundaryId) const;
     bool RemoveBoundaryAssignment(int dimension, unsigned long cellId, unsigned long featureId);
     unsigned long GetNumberOfCellBoundaryFeatures(int dimension, unsigned long arg1) const;
     unsigned long GetCellBoundaryFeatureNeighbors(int dimension, unsigned long arg1, unsigned long arg2, std::set< unsigned long, std::less< unsigned long > > * cellSet);
     unsigned long GetCellNeighbors(unsigned long cellId, std::set< unsigned long, std::less< unsigned long > > * cellSet);
     void BuildCellLinks() const;
     virtual void SetCellsAllocationMethod(itkMeshD3D::CellsAllocationMethodType const _arg);
     virtual itkMeshD3D::CellsAllocationMethodType const & GetCellsAllocationMethod() const;
   private:
     itkMeshD3D(itkMeshD3D const & arg0);
     void operator=(itkMeshD3D const & arg0);
   protected:
     itkMeshD3D();
     ~itkMeshD3D();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     void ReleaseCellsMemory();
 };


 class itkMeshD3D_Pointer {
   public:
     itkMeshD3D_Pointer();
     itkMeshD3D_Pointer(itkMeshD3D_Pointer const & p);
     itkMeshD3D_Pointer(itkMeshD3D * p);
     ~itkMeshD3D_Pointer();
     itkMeshD3D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeshD3D * GetPointer() const;
     bool operator<(itkMeshD3D_Pointer const & r) const;
     bool operator>(itkMeshD3D_Pointer const & r) const;
     bool operator<=(itkMeshD3D_Pointer const & r) const;
     bool operator>=(itkMeshD3D_Pointer const & r) const;
     itkMeshD3D_Pointer & operator=(itkMeshD3D_Pointer const & r);
     itkMeshD3D_Pointer & operator=(itkMeshD3D * r);
     itkMeshD3D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMeshD3Q : public itkPointSetD3Q {
   public:
     enum  {  PointDimension = 3 };
     enum  {  MaxTopologicalDimension = 3 };
     enum CellsAllocationMethodType {  CellsAllocationMethodUndefined = 0,  CellsAllocatedAsStaticArray = 1,  CellsAllocatedAsADynamicArray = 2,  CellsAllocatedDynamicallyCellByCell = 3 };
     static itkMeshD3Q_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     unsigned long GetNumberOfCells() const;
     void PassStructure(itkMeshD3Q * inputMesh);
     virtual void Initialize();
     virtual void CopyInformation(itkDataObject const * data);
     virtual void Graft(itkDataObject const * data);
     void SetCellLinks(itkMapContainerULSUL * arg0);
     void SetCellData(itkMapContainerULD * arg0);
     itkMapContainerULD * GetCellData();
     itkMapContainerULD const * GetCellData() const;
     void SetCellData(unsigned long arg0, double arg1);
     bool GetCellData(unsigned long arg0, double * arg1) const;
     void SetBoundaryAssignment(int dimension, unsigned long cellId, unsigned char featureId, unsigned long boundaryId);
     bool GetBoundaryAssignment(int dimension, unsigned long cellId, unsigned char featureId, unsigned long * boundaryId) const;
     bool RemoveBoundaryAssignment(int dimension, unsigned long cellId, unsigned char featureId);
     unsigned char GetNumberOfCellBoundaryFeatures(int dimension, unsigned long arg1) const;
     unsigned long GetCellBoundaryFeatureNeighbors(int dimension, unsigned long arg1, unsigned char arg2, std::set< unsigned long, std::less< unsigned long > > * cellSet);
     unsigned long GetCellNeighbors(unsigned long cellId, std::set< unsigned long, std::less< unsigned long > > * cellSet);
     void BuildCellLinks() const;
     virtual void SetCellsAllocationMethod(itkMeshD3Q::CellsAllocationMethodType const _arg);
     virtual itkMeshD3Q::CellsAllocationMethodType const & GetCellsAllocationMethod() const;
   private:
     itkMeshD3Q(itkMeshD3Q const & arg0);
     void operator=(itkMeshD3Q const & arg0);
   protected:
     itkMeshD3Q();
     ~itkMeshD3Q();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     void ReleaseCellsMemory();
 };


 class itkMeshD3Q_Pointer {
   public:
     itkMeshD3Q_Pointer();
     itkMeshD3Q_Pointer(itkMeshD3Q_Pointer const & p);
     itkMeshD3Q_Pointer(itkMeshD3Q * p);
     ~itkMeshD3Q_Pointer();
     itkMeshD3Q * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeshD3Q * GetPointer() const;
     bool operator<(itkMeshD3Q_Pointer const & r) const;
     bool operator>(itkMeshD3Q_Pointer const & r) const;
     bool operator<=(itkMeshD3Q_Pointer const & r) const;
     bool operator>=(itkMeshD3Q_Pointer const & r) const;
     itkMeshD3Q_Pointer & operator=(itkMeshD3Q_Pointer const & r);
     itkMeshD3Q_Pointer & operator=(itkMeshD3Q * r);
     itkMeshD3Q * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMeshD3S : public itkPointSetD3S {
   public:
     enum  {  PointDimension = 3 };
     enum  {  MaxTopologicalDimension = 3 };
     enum CellsAllocationMethodType {  CellsAllocationMethodUndefined = 0,  CellsAllocatedAsStaticArray = 1,  CellsAllocatedAsADynamicArray = 2,  CellsAllocatedDynamicallyCellByCell = 3 };
     static itkMeshD3S_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     unsigned long GetNumberOfCells() const;
     void PassStructure(itkMeshD3S * inputMesh);
     virtual void Initialize();
     virtual void CopyInformation(itkDataObject const * data);
     virtual void Graft(itkDataObject const * data);
     void SetCellLinks(itkVectorContainerULSUL * arg0);
     void SetCellData(itkVectorContainerULD * arg0);
     itkVectorContainerULD * GetCellData();
     itkVectorContainerULD const * GetCellData() const;
     void SetCellData(unsigned long arg0, double arg1);
     bool GetCellData(unsigned long arg0, double * arg1) const;
     void SetBoundaryAssignment(int dimension, unsigned long cellId, unsigned long featureId, unsigned long boundaryId);
     bool GetBoundaryAssignment(int dimension, unsigned long cellId, unsigned long featureId, unsigned long * boundaryId) const;
     bool RemoveBoundaryAssignment(int dimension, unsigned long cellId, unsigned long featureId);
     unsigned long GetNumberOfCellBoundaryFeatures(int dimension, unsigned long arg1) const;
     unsigned long GetCellBoundaryFeatureNeighbors(int dimension, unsigned long arg1, unsigned long arg2, std::set< unsigned long, std::less< unsigned long > > * cellSet);
     unsigned long GetCellNeighbors(unsigned long cellId, std::set< unsigned long, std::less< unsigned long > > * cellSet);
     void BuildCellLinks() const;
     virtual void SetCellsAllocationMethod(itkMeshD3S::CellsAllocationMethodType const _arg);
     virtual itkMeshD3S::CellsAllocationMethodType const & GetCellsAllocationMethod() const;
   private:
     itkMeshD3S(itkMeshD3S const & arg0);
     void operator=(itkMeshD3S const & arg0);
   protected:
     itkMeshD3S();
     ~itkMeshD3S();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     void ReleaseCellsMemory();
 };


 class itkMeshD3S_Pointer {
   public:
     itkMeshD3S_Pointer();
     itkMeshD3S_Pointer(itkMeshD3S_Pointer const & p);
     itkMeshD3S_Pointer(itkMeshD3S * p);
     ~itkMeshD3S_Pointer();
     itkMeshD3S * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeshD3S * GetPointer() const;
     bool operator<(itkMeshD3S_Pointer const & r) const;
     bool operator>(itkMeshD3S_Pointer const & r) const;
     bool operator<=(itkMeshD3S_Pointer const & r) const;
     bool operator>=(itkMeshD3S_Pointer const & r) const;
     itkMeshD3S_Pointer & operator=(itkMeshD3S_Pointer const & r);
     itkMeshD3S_Pointer & operator=(itkMeshD3S * r);
     itkMeshD3S * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


