# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkFiniteDifferenceFunctionPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkFiniteDifferenceFunctionPython', [dirname(__file__)])
        except ImportError:
            import _itkFiniteDifferenceFunctionPython
            return _itkFiniteDifferenceFunctionPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkFiniteDifferenceFunctionPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkFiniteDifferenceFunctionPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkFiniteDifferenceFunctionPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import itkEventObjectsPython
import pyBasePython
import itkSizePython
import itkVectorPython
import itkFixedArrayPython
import vnl_vectorPython
import vcl_complexPython
import vnl_matrixPython
import vnl_vector_refPython
def itkFiniteDifferenceFunctionICVF33_New():
  return itkFiniteDifferenceFunctionICVF33.New()

def itkFiniteDifferenceFunctionICVF22_New():
  return itkFiniteDifferenceFunctionICVF22.New()

def itkFiniteDifferenceFunctionIVF33_New():
  return itkFiniteDifferenceFunctionIVF33.New()

def itkFiniteDifferenceFunctionIVF22_New():
  return itkFiniteDifferenceFunctionIVF22.New()

def itkFiniteDifferenceFunctionID3_New():
  return itkFiniteDifferenceFunctionID3.New()

def itkFiniteDifferenceFunctionID2_New():
  return itkFiniteDifferenceFunctionID2.New()

def itkFiniteDifferenceFunctionIF3_New():
  return itkFiniteDifferenceFunctionIF3.New()

def itkFiniteDifferenceFunctionIF2_New():
  return itkFiniteDifferenceFunctionIF2.New()

def itkFiniteDifferenceFunctionIUS3_New():
  return itkFiniteDifferenceFunctionIUS3.New()

def itkFiniteDifferenceFunctionIUS2_New():
  return itkFiniteDifferenceFunctionIUS2.New()

def itkFiniteDifferenceFunctionIUL3_New():
  return itkFiniteDifferenceFunctionIUL3.New()

def itkFiniteDifferenceFunctionIUL2_New():
  return itkFiniteDifferenceFunctionIUL2.New()

def itkFiniteDifferenceFunctionIUC3_New():
  return itkFiniteDifferenceFunctionIUC3.New()

def itkFiniteDifferenceFunctionIUC2_New():
  return itkFiniteDifferenceFunctionIUC2.New()

class itkFiniteDifferenceFunctionICVF22(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionICVF22 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_ImageDimension
    def InitializeIteration(self):
        """InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_InitializeIteration(self)

    def SetRadius(self, *args):
        """SetRadius(self, itkSize2 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_SetRadius(self, *args)

    def GetRadius(self):
        """GetRadius(self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_GetRadius(self)

    def SetScaleCoefficients(self, *args):
        """SetScaleCoefficients(self, double vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_SetScaleCoefficients(self, *args)

    def ComputeNeighborhoodScales(self):
        """ComputeNeighborhoodScales(self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, *args):
        """ComputeGlobalTimeStep(self, void GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_ComputeGlobalTimeStep(self, *args)

    def GetGlobalDataPointer(self):
        """GetGlobalDataPointer(self) -> void"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, *args):
        """ReleaseGlobalDataPointer(self, void GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_ReleaseGlobalDataPointer(self, *args)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionICVF22
    def cast(*args):
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionICVF22"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFiniteDifferenceFunctionICVF22"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionICVF22
        
        Create a new object of the class itkFiniteDifferenceFunctionICVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFiniteDifferenceFunctionICVF22.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFiniteDifferenceFunctionICVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionICVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionICVF22.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_InitializeIteration,None,itkFiniteDifferenceFunctionICVF22)
itkFiniteDifferenceFunctionICVF22.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_SetRadius,None,itkFiniteDifferenceFunctionICVF22)
itkFiniteDifferenceFunctionICVF22.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_GetRadius,None,itkFiniteDifferenceFunctionICVF22)
itkFiniteDifferenceFunctionICVF22.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_SetScaleCoefficients,None,itkFiniteDifferenceFunctionICVF22)
itkFiniteDifferenceFunctionICVF22.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_ComputeNeighborhoodScales,None,itkFiniteDifferenceFunctionICVF22)
itkFiniteDifferenceFunctionICVF22.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_ComputeGlobalTimeStep,None,itkFiniteDifferenceFunctionICVF22)
itkFiniteDifferenceFunctionICVF22.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_GetGlobalDataPointer,None,itkFiniteDifferenceFunctionICVF22)
itkFiniteDifferenceFunctionICVF22.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_ReleaseGlobalDataPointer,None,itkFiniteDifferenceFunctionICVF22)
itkFiniteDifferenceFunctionICVF22.GetPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_GetPointer,None,itkFiniteDifferenceFunctionICVF22)
itkFiniteDifferenceFunctionICVF22_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_swigregister
itkFiniteDifferenceFunctionICVF22_swigregister(itkFiniteDifferenceFunctionICVF22)

def itkFiniteDifferenceFunctionICVF22_cast(*args):
  """itkFiniteDifferenceFunctionICVF22_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionICVF22"""
  return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF22_cast(*args)

class itkFiniteDifferenceFunctionICVF33(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionICVF33 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_ImageDimension
    def InitializeIteration(self):
        """InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_InitializeIteration(self)

    def SetRadius(self, *args):
        """SetRadius(self, itkSize3 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_SetRadius(self, *args)

    def GetRadius(self):
        """GetRadius(self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_GetRadius(self)

    def SetScaleCoefficients(self, *args):
        """SetScaleCoefficients(self, double vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_SetScaleCoefficients(self, *args)

    def ComputeNeighborhoodScales(self):
        """ComputeNeighborhoodScales(self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, *args):
        """ComputeGlobalTimeStep(self, void GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_ComputeGlobalTimeStep(self, *args)

    def GetGlobalDataPointer(self):
        """GetGlobalDataPointer(self) -> void"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, *args):
        """ReleaseGlobalDataPointer(self, void GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_ReleaseGlobalDataPointer(self, *args)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionICVF33
    def cast(*args):
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionICVF33"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFiniteDifferenceFunctionICVF33"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionICVF33
        
        Create a new object of the class itkFiniteDifferenceFunctionICVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFiniteDifferenceFunctionICVF33.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFiniteDifferenceFunctionICVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionICVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionICVF33.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_InitializeIteration,None,itkFiniteDifferenceFunctionICVF33)
itkFiniteDifferenceFunctionICVF33.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_SetRadius,None,itkFiniteDifferenceFunctionICVF33)
itkFiniteDifferenceFunctionICVF33.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_GetRadius,None,itkFiniteDifferenceFunctionICVF33)
itkFiniteDifferenceFunctionICVF33.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_SetScaleCoefficients,None,itkFiniteDifferenceFunctionICVF33)
itkFiniteDifferenceFunctionICVF33.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_ComputeNeighborhoodScales,None,itkFiniteDifferenceFunctionICVF33)
itkFiniteDifferenceFunctionICVF33.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_ComputeGlobalTimeStep,None,itkFiniteDifferenceFunctionICVF33)
itkFiniteDifferenceFunctionICVF33.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_GetGlobalDataPointer,None,itkFiniteDifferenceFunctionICVF33)
itkFiniteDifferenceFunctionICVF33.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_ReleaseGlobalDataPointer,None,itkFiniteDifferenceFunctionICVF33)
itkFiniteDifferenceFunctionICVF33.GetPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_GetPointer,None,itkFiniteDifferenceFunctionICVF33)
itkFiniteDifferenceFunctionICVF33_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_swigregister
itkFiniteDifferenceFunctionICVF33_swigregister(itkFiniteDifferenceFunctionICVF33)

def itkFiniteDifferenceFunctionICVF33_cast(*args):
  """itkFiniteDifferenceFunctionICVF33_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionICVF33"""
  return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionICVF33_cast(*args)

class itkFiniteDifferenceFunctionID2(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionID2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_ImageDimension
    def InitializeIteration(self):
        """InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_InitializeIteration(self)

    def SetRadius(self, *args):
        """SetRadius(self, itkSize2 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_SetRadius(self, *args)

    def GetRadius(self):
        """GetRadius(self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_GetRadius(self)

    def SetScaleCoefficients(self, *args):
        """SetScaleCoefficients(self, double vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_SetScaleCoefficients(self, *args)

    def ComputeNeighborhoodScales(self):
        """ComputeNeighborhoodScales(self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, *args):
        """ComputeGlobalTimeStep(self, void GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_ComputeGlobalTimeStep(self, *args)

    def GetGlobalDataPointer(self):
        """GetGlobalDataPointer(self) -> void"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, *args):
        """ReleaseGlobalDataPointer(self, void GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_ReleaseGlobalDataPointer(self, *args)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionID2
    def cast(*args):
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionID2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFiniteDifferenceFunctionID2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionID2
        
        Create a new object of the class itkFiniteDifferenceFunctionID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFiniteDifferenceFunctionID2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFiniteDifferenceFunctionID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionID2.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_InitializeIteration,None,itkFiniteDifferenceFunctionID2)
itkFiniteDifferenceFunctionID2.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_SetRadius,None,itkFiniteDifferenceFunctionID2)
itkFiniteDifferenceFunctionID2.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_GetRadius,None,itkFiniteDifferenceFunctionID2)
itkFiniteDifferenceFunctionID2.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_SetScaleCoefficients,None,itkFiniteDifferenceFunctionID2)
itkFiniteDifferenceFunctionID2.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_ComputeNeighborhoodScales,None,itkFiniteDifferenceFunctionID2)
itkFiniteDifferenceFunctionID2.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_ComputeGlobalTimeStep,None,itkFiniteDifferenceFunctionID2)
itkFiniteDifferenceFunctionID2.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_GetGlobalDataPointer,None,itkFiniteDifferenceFunctionID2)
itkFiniteDifferenceFunctionID2.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_ReleaseGlobalDataPointer,None,itkFiniteDifferenceFunctionID2)
itkFiniteDifferenceFunctionID2.GetPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_GetPointer,None,itkFiniteDifferenceFunctionID2)
itkFiniteDifferenceFunctionID2_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_swigregister
itkFiniteDifferenceFunctionID2_swigregister(itkFiniteDifferenceFunctionID2)

def itkFiniteDifferenceFunctionID2_cast(*args):
  """itkFiniteDifferenceFunctionID2_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionID2"""
  return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2_cast(*args)

class itkFiniteDifferenceFunctionID3(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionID3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_ImageDimension
    def InitializeIteration(self):
        """InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_InitializeIteration(self)

    def SetRadius(self, *args):
        """SetRadius(self, itkSize3 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_SetRadius(self, *args)

    def GetRadius(self):
        """GetRadius(self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_GetRadius(self)

    def SetScaleCoefficients(self, *args):
        """SetScaleCoefficients(self, double vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_SetScaleCoefficients(self, *args)

    def ComputeNeighborhoodScales(self):
        """ComputeNeighborhoodScales(self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, *args):
        """ComputeGlobalTimeStep(self, void GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_ComputeGlobalTimeStep(self, *args)

    def GetGlobalDataPointer(self):
        """GetGlobalDataPointer(self) -> void"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, *args):
        """ReleaseGlobalDataPointer(self, void GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_ReleaseGlobalDataPointer(self, *args)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionID3
    def cast(*args):
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionID3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFiniteDifferenceFunctionID3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionID3
        
        Create a new object of the class itkFiniteDifferenceFunctionID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFiniteDifferenceFunctionID3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFiniteDifferenceFunctionID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionID3.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_InitializeIteration,None,itkFiniteDifferenceFunctionID3)
itkFiniteDifferenceFunctionID3.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_SetRadius,None,itkFiniteDifferenceFunctionID3)
itkFiniteDifferenceFunctionID3.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_GetRadius,None,itkFiniteDifferenceFunctionID3)
itkFiniteDifferenceFunctionID3.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_SetScaleCoefficients,None,itkFiniteDifferenceFunctionID3)
itkFiniteDifferenceFunctionID3.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_ComputeNeighborhoodScales,None,itkFiniteDifferenceFunctionID3)
itkFiniteDifferenceFunctionID3.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_ComputeGlobalTimeStep,None,itkFiniteDifferenceFunctionID3)
itkFiniteDifferenceFunctionID3.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_GetGlobalDataPointer,None,itkFiniteDifferenceFunctionID3)
itkFiniteDifferenceFunctionID3.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_ReleaseGlobalDataPointer,None,itkFiniteDifferenceFunctionID3)
itkFiniteDifferenceFunctionID3.GetPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_GetPointer,None,itkFiniteDifferenceFunctionID3)
itkFiniteDifferenceFunctionID3_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_swigregister
itkFiniteDifferenceFunctionID3_swigregister(itkFiniteDifferenceFunctionID3)

def itkFiniteDifferenceFunctionID3_cast(*args):
  """itkFiniteDifferenceFunctionID3_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionID3"""
  return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3_cast(*args)

class itkFiniteDifferenceFunctionIF2(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionIF2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_ImageDimension
    def InitializeIteration(self):
        """InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_InitializeIteration(self)

    def SetRadius(self, *args):
        """SetRadius(self, itkSize2 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_SetRadius(self, *args)

    def GetRadius(self):
        """GetRadius(self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_GetRadius(self)

    def SetScaleCoefficients(self, *args):
        """SetScaleCoefficients(self, double vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_SetScaleCoefficients(self, *args)

    def ComputeNeighborhoodScales(self):
        """ComputeNeighborhoodScales(self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, *args):
        """ComputeGlobalTimeStep(self, void GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_ComputeGlobalTimeStep(self, *args)

    def GetGlobalDataPointer(self):
        """GetGlobalDataPointer(self) -> void"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, *args):
        """ReleaseGlobalDataPointer(self, void GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_ReleaseGlobalDataPointer(self, *args)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIF2
    def cast(*args):
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIF2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFiniteDifferenceFunctionIF2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionIF2
        
        Create a new object of the class itkFiniteDifferenceFunctionIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFiniteDifferenceFunctionIF2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFiniteDifferenceFunctionIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionIF2.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_InitializeIteration,None,itkFiniteDifferenceFunctionIF2)
itkFiniteDifferenceFunctionIF2.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_SetRadius,None,itkFiniteDifferenceFunctionIF2)
itkFiniteDifferenceFunctionIF2.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_GetRadius,None,itkFiniteDifferenceFunctionIF2)
itkFiniteDifferenceFunctionIF2.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_SetScaleCoefficients,None,itkFiniteDifferenceFunctionIF2)
itkFiniteDifferenceFunctionIF2.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_ComputeNeighborhoodScales,None,itkFiniteDifferenceFunctionIF2)
itkFiniteDifferenceFunctionIF2.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_ComputeGlobalTimeStep,None,itkFiniteDifferenceFunctionIF2)
itkFiniteDifferenceFunctionIF2.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_GetGlobalDataPointer,None,itkFiniteDifferenceFunctionIF2)
itkFiniteDifferenceFunctionIF2.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_ReleaseGlobalDataPointer,None,itkFiniteDifferenceFunctionIF2)
itkFiniteDifferenceFunctionIF2.GetPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_GetPointer,None,itkFiniteDifferenceFunctionIF2)
itkFiniteDifferenceFunctionIF2_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_swigregister
itkFiniteDifferenceFunctionIF2_swigregister(itkFiniteDifferenceFunctionIF2)

def itkFiniteDifferenceFunctionIF2_cast(*args):
  """itkFiniteDifferenceFunctionIF2_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIF2"""
  return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2_cast(*args)

class itkFiniteDifferenceFunctionIF3(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionIF3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_ImageDimension
    def InitializeIteration(self):
        """InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_InitializeIteration(self)

    def SetRadius(self, *args):
        """SetRadius(self, itkSize3 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_SetRadius(self, *args)

    def GetRadius(self):
        """GetRadius(self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_GetRadius(self)

    def SetScaleCoefficients(self, *args):
        """SetScaleCoefficients(self, double vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_SetScaleCoefficients(self, *args)

    def ComputeNeighborhoodScales(self):
        """ComputeNeighborhoodScales(self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, *args):
        """ComputeGlobalTimeStep(self, void GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_ComputeGlobalTimeStep(self, *args)

    def GetGlobalDataPointer(self):
        """GetGlobalDataPointer(self) -> void"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, *args):
        """ReleaseGlobalDataPointer(self, void GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_ReleaseGlobalDataPointer(self, *args)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIF3
    def cast(*args):
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIF3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFiniteDifferenceFunctionIF3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionIF3
        
        Create a new object of the class itkFiniteDifferenceFunctionIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFiniteDifferenceFunctionIF3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFiniteDifferenceFunctionIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionIF3.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_InitializeIteration,None,itkFiniteDifferenceFunctionIF3)
itkFiniteDifferenceFunctionIF3.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_SetRadius,None,itkFiniteDifferenceFunctionIF3)
itkFiniteDifferenceFunctionIF3.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_GetRadius,None,itkFiniteDifferenceFunctionIF3)
itkFiniteDifferenceFunctionIF3.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_SetScaleCoefficients,None,itkFiniteDifferenceFunctionIF3)
itkFiniteDifferenceFunctionIF3.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_ComputeNeighborhoodScales,None,itkFiniteDifferenceFunctionIF3)
itkFiniteDifferenceFunctionIF3.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_ComputeGlobalTimeStep,None,itkFiniteDifferenceFunctionIF3)
itkFiniteDifferenceFunctionIF3.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_GetGlobalDataPointer,None,itkFiniteDifferenceFunctionIF3)
itkFiniteDifferenceFunctionIF3.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_ReleaseGlobalDataPointer,None,itkFiniteDifferenceFunctionIF3)
itkFiniteDifferenceFunctionIF3.GetPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_GetPointer,None,itkFiniteDifferenceFunctionIF3)
itkFiniteDifferenceFunctionIF3_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_swigregister
itkFiniteDifferenceFunctionIF3_swigregister(itkFiniteDifferenceFunctionIF3)

def itkFiniteDifferenceFunctionIF3_cast(*args):
  """itkFiniteDifferenceFunctionIF3_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIF3"""
  return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3_cast(*args)

class itkFiniteDifferenceFunctionIUC2(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionIUC2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_ImageDimension
    def InitializeIteration(self):
        """InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_InitializeIteration(self)

    def SetRadius(self, *args):
        """SetRadius(self, itkSize2 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_SetRadius(self, *args)

    def GetRadius(self):
        """GetRadius(self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_GetRadius(self)

    def SetScaleCoefficients(self, *args):
        """SetScaleCoefficients(self, double vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_SetScaleCoefficients(self, *args)

    def ComputeNeighborhoodScales(self):
        """ComputeNeighborhoodScales(self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, *args):
        """ComputeGlobalTimeStep(self, void GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_ComputeGlobalTimeStep(self, *args)

    def GetGlobalDataPointer(self):
        """GetGlobalDataPointer(self) -> void"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, *args):
        """ReleaseGlobalDataPointer(self, void GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_ReleaseGlobalDataPointer(self, *args)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIUC2
    def cast(*args):
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIUC2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFiniteDifferenceFunctionIUC2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionIUC2
        
        Create a new object of the class itkFiniteDifferenceFunctionIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFiniteDifferenceFunctionIUC2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFiniteDifferenceFunctionIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionIUC2.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_InitializeIteration,None,itkFiniteDifferenceFunctionIUC2)
itkFiniteDifferenceFunctionIUC2.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_SetRadius,None,itkFiniteDifferenceFunctionIUC2)
itkFiniteDifferenceFunctionIUC2.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_GetRadius,None,itkFiniteDifferenceFunctionIUC2)
itkFiniteDifferenceFunctionIUC2.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_SetScaleCoefficients,None,itkFiniteDifferenceFunctionIUC2)
itkFiniteDifferenceFunctionIUC2.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_ComputeNeighborhoodScales,None,itkFiniteDifferenceFunctionIUC2)
itkFiniteDifferenceFunctionIUC2.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_ComputeGlobalTimeStep,None,itkFiniteDifferenceFunctionIUC2)
itkFiniteDifferenceFunctionIUC2.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_GetGlobalDataPointer,None,itkFiniteDifferenceFunctionIUC2)
itkFiniteDifferenceFunctionIUC2.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_ReleaseGlobalDataPointer,None,itkFiniteDifferenceFunctionIUC2)
itkFiniteDifferenceFunctionIUC2.GetPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_GetPointer,None,itkFiniteDifferenceFunctionIUC2)
itkFiniteDifferenceFunctionIUC2_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_swigregister
itkFiniteDifferenceFunctionIUC2_swigregister(itkFiniteDifferenceFunctionIUC2)

def itkFiniteDifferenceFunctionIUC2_cast(*args):
  """itkFiniteDifferenceFunctionIUC2_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIUC2"""
  return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC2_cast(*args)

class itkFiniteDifferenceFunctionIUC3(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionIUC3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_ImageDimension
    def InitializeIteration(self):
        """InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_InitializeIteration(self)

    def SetRadius(self, *args):
        """SetRadius(self, itkSize3 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_SetRadius(self, *args)

    def GetRadius(self):
        """GetRadius(self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_GetRadius(self)

    def SetScaleCoefficients(self, *args):
        """SetScaleCoefficients(self, double vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_SetScaleCoefficients(self, *args)

    def ComputeNeighborhoodScales(self):
        """ComputeNeighborhoodScales(self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, *args):
        """ComputeGlobalTimeStep(self, void GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_ComputeGlobalTimeStep(self, *args)

    def GetGlobalDataPointer(self):
        """GetGlobalDataPointer(self) -> void"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, *args):
        """ReleaseGlobalDataPointer(self, void GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_ReleaseGlobalDataPointer(self, *args)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIUC3
    def cast(*args):
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIUC3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFiniteDifferenceFunctionIUC3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionIUC3
        
        Create a new object of the class itkFiniteDifferenceFunctionIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFiniteDifferenceFunctionIUC3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFiniteDifferenceFunctionIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionIUC3.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_InitializeIteration,None,itkFiniteDifferenceFunctionIUC3)
itkFiniteDifferenceFunctionIUC3.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_SetRadius,None,itkFiniteDifferenceFunctionIUC3)
itkFiniteDifferenceFunctionIUC3.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_GetRadius,None,itkFiniteDifferenceFunctionIUC3)
itkFiniteDifferenceFunctionIUC3.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_SetScaleCoefficients,None,itkFiniteDifferenceFunctionIUC3)
itkFiniteDifferenceFunctionIUC3.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_ComputeNeighborhoodScales,None,itkFiniteDifferenceFunctionIUC3)
itkFiniteDifferenceFunctionIUC3.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_ComputeGlobalTimeStep,None,itkFiniteDifferenceFunctionIUC3)
itkFiniteDifferenceFunctionIUC3.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_GetGlobalDataPointer,None,itkFiniteDifferenceFunctionIUC3)
itkFiniteDifferenceFunctionIUC3.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_ReleaseGlobalDataPointer,None,itkFiniteDifferenceFunctionIUC3)
itkFiniteDifferenceFunctionIUC3.GetPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_GetPointer,None,itkFiniteDifferenceFunctionIUC3)
itkFiniteDifferenceFunctionIUC3_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_swigregister
itkFiniteDifferenceFunctionIUC3_swigregister(itkFiniteDifferenceFunctionIUC3)

def itkFiniteDifferenceFunctionIUC3_cast(*args):
  """itkFiniteDifferenceFunctionIUC3_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIUC3"""
  return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUC3_cast(*args)

class itkFiniteDifferenceFunctionIUL2(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionIUL2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL2_ImageDimension
    def InitializeIteration(self):
        """InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL2_InitializeIteration(self)

    def SetRadius(self, *args):
        """SetRadius(self, itkSize2 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL2_SetRadius(self, *args)

    def GetRadius(self):
        """GetRadius(self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL2_GetRadius(self)

    def SetScaleCoefficients(self, *args):
        """SetScaleCoefficients(self, double vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL2_SetScaleCoefficients(self, *args)

    def ComputeNeighborhoodScales(self):
        """ComputeNeighborhoodScales(self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL2_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, *args):
        """ComputeGlobalTimeStep(self, void GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL2_ComputeGlobalTimeStep(self, *args)

    def GetGlobalDataPointer(self):
        """GetGlobalDataPointer(self) -> void"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL2_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, *args):
        """ReleaseGlobalDataPointer(self, void GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL2_ReleaseGlobalDataPointer(self, *args)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIUL2
    def cast(*args):
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIUL2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFiniteDifferenceFunctionIUL2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionIUL2
        
        Create a new object of the class itkFiniteDifferenceFunctionIUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFiniteDifferenceFunctionIUL2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFiniteDifferenceFunctionIUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionIUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionIUL2.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL2_InitializeIteration,None,itkFiniteDifferenceFunctionIUL2)
itkFiniteDifferenceFunctionIUL2.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL2_SetRadius,None,itkFiniteDifferenceFunctionIUL2)
itkFiniteDifferenceFunctionIUL2.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL2_GetRadius,None,itkFiniteDifferenceFunctionIUL2)
itkFiniteDifferenceFunctionIUL2.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL2_SetScaleCoefficients,None,itkFiniteDifferenceFunctionIUL2)
itkFiniteDifferenceFunctionIUL2.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL2_ComputeNeighborhoodScales,None,itkFiniteDifferenceFunctionIUL2)
itkFiniteDifferenceFunctionIUL2.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL2_ComputeGlobalTimeStep,None,itkFiniteDifferenceFunctionIUL2)
itkFiniteDifferenceFunctionIUL2.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL2_GetGlobalDataPointer,None,itkFiniteDifferenceFunctionIUL2)
itkFiniteDifferenceFunctionIUL2.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL2_ReleaseGlobalDataPointer,None,itkFiniteDifferenceFunctionIUL2)
itkFiniteDifferenceFunctionIUL2.GetPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL2_GetPointer,None,itkFiniteDifferenceFunctionIUL2)
itkFiniteDifferenceFunctionIUL2_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL2_swigregister
itkFiniteDifferenceFunctionIUL2_swigregister(itkFiniteDifferenceFunctionIUL2)

def itkFiniteDifferenceFunctionIUL2_cast(*args):
  """itkFiniteDifferenceFunctionIUL2_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIUL2"""
  return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL2_cast(*args)

class itkFiniteDifferenceFunctionIUL3(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionIUL3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL3_ImageDimension
    def InitializeIteration(self):
        """InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL3_InitializeIteration(self)

    def SetRadius(self, *args):
        """SetRadius(self, itkSize3 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL3_SetRadius(self, *args)

    def GetRadius(self):
        """GetRadius(self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL3_GetRadius(self)

    def SetScaleCoefficients(self, *args):
        """SetScaleCoefficients(self, double vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL3_SetScaleCoefficients(self, *args)

    def ComputeNeighborhoodScales(self):
        """ComputeNeighborhoodScales(self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL3_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, *args):
        """ComputeGlobalTimeStep(self, void GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL3_ComputeGlobalTimeStep(self, *args)

    def GetGlobalDataPointer(self):
        """GetGlobalDataPointer(self) -> void"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL3_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, *args):
        """ReleaseGlobalDataPointer(self, void GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL3_ReleaseGlobalDataPointer(self, *args)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIUL3
    def cast(*args):
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIUL3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFiniteDifferenceFunctionIUL3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionIUL3
        
        Create a new object of the class itkFiniteDifferenceFunctionIUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFiniteDifferenceFunctionIUL3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFiniteDifferenceFunctionIUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionIUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionIUL3.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL3_InitializeIteration,None,itkFiniteDifferenceFunctionIUL3)
itkFiniteDifferenceFunctionIUL3.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL3_SetRadius,None,itkFiniteDifferenceFunctionIUL3)
itkFiniteDifferenceFunctionIUL3.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL3_GetRadius,None,itkFiniteDifferenceFunctionIUL3)
itkFiniteDifferenceFunctionIUL3.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL3_SetScaleCoefficients,None,itkFiniteDifferenceFunctionIUL3)
itkFiniteDifferenceFunctionIUL3.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL3_ComputeNeighborhoodScales,None,itkFiniteDifferenceFunctionIUL3)
itkFiniteDifferenceFunctionIUL3.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL3_ComputeGlobalTimeStep,None,itkFiniteDifferenceFunctionIUL3)
itkFiniteDifferenceFunctionIUL3.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL3_GetGlobalDataPointer,None,itkFiniteDifferenceFunctionIUL3)
itkFiniteDifferenceFunctionIUL3.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL3_ReleaseGlobalDataPointer,None,itkFiniteDifferenceFunctionIUL3)
itkFiniteDifferenceFunctionIUL3.GetPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL3_GetPointer,None,itkFiniteDifferenceFunctionIUL3)
itkFiniteDifferenceFunctionIUL3_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL3_swigregister
itkFiniteDifferenceFunctionIUL3_swigregister(itkFiniteDifferenceFunctionIUL3)

def itkFiniteDifferenceFunctionIUL3_cast(*args):
  """itkFiniteDifferenceFunctionIUL3_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIUL3"""
  return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUL3_cast(*args)

class itkFiniteDifferenceFunctionIUS2(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionIUS2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_ImageDimension
    def InitializeIteration(self):
        """InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_InitializeIteration(self)

    def SetRadius(self, *args):
        """SetRadius(self, itkSize2 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_SetRadius(self, *args)

    def GetRadius(self):
        """GetRadius(self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_GetRadius(self)

    def SetScaleCoefficients(self, *args):
        """SetScaleCoefficients(self, double vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_SetScaleCoefficients(self, *args)

    def ComputeNeighborhoodScales(self):
        """ComputeNeighborhoodScales(self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, *args):
        """ComputeGlobalTimeStep(self, void GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_ComputeGlobalTimeStep(self, *args)

    def GetGlobalDataPointer(self):
        """GetGlobalDataPointer(self) -> void"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, *args):
        """ReleaseGlobalDataPointer(self, void GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_ReleaseGlobalDataPointer(self, *args)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIUS2
    def cast(*args):
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIUS2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFiniteDifferenceFunctionIUS2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionIUS2
        
        Create a new object of the class itkFiniteDifferenceFunctionIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFiniteDifferenceFunctionIUS2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFiniteDifferenceFunctionIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionIUS2.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_InitializeIteration,None,itkFiniteDifferenceFunctionIUS2)
itkFiniteDifferenceFunctionIUS2.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_SetRadius,None,itkFiniteDifferenceFunctionIUS2)
itkFiniteDifferenceFunctionIUS2.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_GetRadius,None,itkFiniteDifferenceFunctionIUS2)
itkFiniteDifferenceFunctionIUS2.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_SetScaleCoefficients,None,itkFiniteDifferenceFunctionIUS2)
itkFiniteDifferenceFunctionIUS2.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_ComputeNeighborhoodScales,None,itkFiniteDifferenceFunctionIUS2)
itkFiniteDifferenceFunctionIUS2.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_ComputeGlobalTimeStep,None,itkFiniteDifferenceFunctionIUS2)
itkFiniteDifferenceFunctionIUS2.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_GetGlobalDataPointer,None,itkFiniteDifferenceFunctionIUS2)
itkFiniteDifferenceFunctionIUS2.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_ReleaseGlobalDataPointer,None,itkFiniteDifferenceFunctionIUS2)
itkFiniteDifferenceFunctionIUS2.GetPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_GetPointer,None,itkFiniteDifferenceFunctionIUS2)
itkFiniteDifferenceFunctionIUS2_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_swigregister
itkFiniteDifferenceFunctionIUS2_swigregister(itkFiniteDifferenceFunctionIUS2)

def itkFiniteDifferenceFunctionIUS2_cast(*args):
  """itkFiniteDifferenceFunctionIUS2_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIUS2"""
  return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS2_cast(*args)

class itkFiniteDifferenceFunctionIUS3(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionIUS3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_ImageDimension
    def InitializeIteration(self):
        """InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_InitializeIteration(self)

    def SetRadius(self, *args):
        """SetRadius(self, itkSize3 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_SetRadius(self, *args)

    def GetRadius(self):
        """GetRadius(self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_GetRadius(self)

    def SetScaleCoefficients(self, *args):
        """SetScaleCoefficients(self, double vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_SetScaleCoefficients(self, *args)

    def ComputeNeighborhoodScales(self):
        """ComputeNeighborhoodScales(self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, *args):
        """ComputeGlobalTimeStep(self, void GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_ComputeGlobalTimeStep(self, *args)

    def GetGlobalDataPointer(self):
        """GetGlobalDataPointer(self) -> void"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, *args):
        """ReleaseGlobalDataPointer(self, void GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_ReleaseGlobalDataPointer(self, *args)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIUS3
    def cast(*args):
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIUS3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFiniteDifferenceFunctionIUS3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionIUS3
        
        Create a new object of the class itkFiniteDifferenceFunctionIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFiniteDifferenceFunctionIUS3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFiniteDifferenceFunctionIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionIUS3.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_InitializeIteration,None,itkFiniteDifferenceFunctionIUS3)
itkFiniteDifferenceFunctionIUS3.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_SetRadius,None,itkFiniteDifferenceFunctionIUS3)
itkFiniteDifferenceFunctionIUS3.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_GetRadius,None,itkFiniteDifferenceFunctionIUS3)
itkFiniteDifferenceFunctionIUS3.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_SetScaleCoefficients,None,itkFiniteDifferenceFunctionIUS3)
itkFiniteDifferenceFunctionIUS3.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_ComputeNeighborhoodScales,None,itkFiniteDifferenceFunctionIUS3)
itkFiniteDifferenceFunctionIUS3.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_ComputeGlobalTimeStep,None,itkFiniteDifferenceFunctionIUS3)
itkFiniteDifferenceFunctionIUS3.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_GetGlobalDataPointer,None,itkFiniteDifferenceFunctionIUS3)
itkFiniteDifferenceFunctionIUS3.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_ReleaseGlobalDataPointer,None,itkFiniteDifferenceFunctionIUS3)
itkFiniteDifferenceFunctionIUS3.GetPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_GetPointer,None,itkFiniteDifferenceFunctionIUS3)
itkFiniteDifferenceFunctionIUS3_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_swigregister
itkFiniteDifferenceFunctionIUS3_swigregister(itkFiniteDifferenceFunctionIUS3)

def itkFiniteDifferenceFunctionIUS3_cast(*args):
  """itkFiniteDifferenceFunctionIUS3_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIUS3"""
  return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIUS3_cast(*args)

class itkFiniteDifferenceFunctionIVF22(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionIVF22 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_ImageDimension
    def InitializeIteration(self):
        """InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_InitializeIteration(self)

    def SetRadius(self, *args):
        """SetRadius(self, itkSize2 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_SetRadius(self, *args)

    def GetRadius(self):
        """GetRadius(self) -> itkSize2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_GetRadius(self)

    def SetScaleCoefficients(self, *args):
        """SetScaleCoefficients(self, double vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_SetScaleCoefficients(self, *args)

    def ComputeNeighborhoodScales(self):
        """ComputeNeighborhoodScales(self) -> itkVectorD2"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, *args):
        """ComputeGlobalTimeStep(self, void GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_ComputeGlobalTimeStep(self, *args)

    def GetGlobalDataPointer(self):
        """GetGlobalDataPointer(self) -> void"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, *args):
        """ReleaseGlobalDataPointer(self, void GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_ReleaseGlobalDataPointer(self, *args)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIVF22
    def cast(*args):
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIVF22"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFiniteDifferenceFunctionIVF22"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionIVF22
        
        Create a new object of the class itkFiniteDifferenceFunctionIVF22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFiniteDifferenceFunctionIVF22.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFiniteDifferenceFunctionIVF22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionIVF22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionIVF22.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_InitializeIteration,None,itkFiniteDifferenceFunctionIVF22)
itkFiniteDifferenceFunctionIVF22.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_SetRadius,None,itkFiniteDifferenceFunctionIVF22)
itkFiniteDifferenceFunctionIVF22.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_GetRadius,None,itkFiniteDifferenceFunctionIVF22)
itkFiniteDifferenceFunctionIVF22.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_SetScaleCoefficients,None,itkFiniteDifferenceFunctionIVF22)
itkFiniteDifferenceFunctionIVF22.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_ComputeNeighborhoodScales,None,itkFiniteDifferenceFunctionIVF22)
itkFiniteDifferenceFunctionIVF22.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_ComputeGlobalTimeStep,None,itkFiniteDifferenceFunctionIVF22)
itkFiniteDifferenceFunctionIVF22.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_GetGlobalDataPointer,None,itkFiniteDifferenceFunctionIVF22)
itkFiniteDifferenceFunctionIVF22.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_ReleaseGlobalDataPointer,None,itkFiniteDifferenceFunctionIVF22)
itkFiniteDifferenceFunctionIVF22.GetPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_GetPointer,None,itkFiniteDifferenceFunctionIVF22)
itkFiniteDifferenceFunctionIVF22_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_swigregister
itkFiniteDifferenceFunctionIVF22_swigregister(itkFiniteDifferenceFunctionIVF22)

def itkFiniteDifferenceFunctionIVF22_cast(*args):
  """itkFiniteDifferenceFunctionIVF22_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIVF22"""
  return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF22_cast(*args)

class itkFiniteDifferenceFunctionIVF33(ITKCommonBasePython.itkLightObject):
    """Proxy of C++ itkFiniteDifferenceFunctionIVF33 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_ImageDimension
    def InitializeIteration(self):
        """InitializeIteration(self)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_InitializeIteration(self)

    def SetRadius(self, *args):
        """SetRadius(self, itkSize3 r)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_SetRadius(self, *args)

    def GetRadius(self):
        """GetRadius(self) -> itkSize3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_GetRadius(self)

    def SetScaleCoefficients(self, *args):
        """SetScaleCoefficients(self, double vals)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_SetScaleCoefficients(self, *args)

    def ComputeNeighborhoodScales(self):
        """ComputeNeighborhoodScales(self) -> itkVectorD3"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_ComputeNeighborhoodScales(self)

    def ComputeGlobalTimeStep(self, *args):
        """ComputeGlobalTimeStep(self, void GlobalData) -> double"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_ComputeGlobalTimeStep(self, *args)

    def GetGlobalDataPointer(self):
        """GetGlobalDataPointer(self) -> void"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_GetGlobalDataPointer(self)

    def ReleaseGlobalDataPointer(self, *args):
        """ReleaseGlobalDataPointer(self, void GlobalData)"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_ReleaseGlobalDataPointer(self, *args)

    __swig_destroy__ = _itkFiniteDifferenceFunctionPython.delete_itkFiniteDifferenceFunctionIVF33
    def cast(*args):
        """cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIVF33"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFiniteDifferenceFunctionIVF33"""
        return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFiniteDifferenceFunctionIVF33
        
        Create a new object of the class itkFiniteDifferenceFunctionIVF33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFiniteDifferenceFunctionIVF33.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFiniteDifferenceFunctionIVF33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFiniteDifferenceFunctionIVF33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFiniteDifferenceFunctionIVF33.InitializeIteration = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_InitializeIteration,None,itkFiniteDifferenceFunctionIVF33)
itkFiniteDifferenceFunctionIVF33.SetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_SetRadius,None,itkFiniteDifferenceFunctionIVF33)
itkFiniteDifferenceFunctionIVF33.GetRadius = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_GetRadius,None,itkFiniteDifferenceFunctionIVF33)
itkFiniteDifferenceFunctionIVF33.SetScaleCoefficients = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_SetScaleCoefficients,None,itkFiniteDifferenceFunctionIVF33)
itkFiniteDifferenceFunctionIVF33.ComputeNeighborhoodScales = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_ComputeNeighborhoodScales,None,itkFiniteDifferenceFunctionIVF33)
itkFiniteDifferenceFunctionIVF33.ComputeGlobalTimeStep = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_ComputeGlobalTimeStep,None,itkFiniteDifferenceFunctionIVF33)
itkFiniteDifferenceFunctionIVF33.GetGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_GetGlobalDataPointer,None,itkFiniteDifferenceFunctionIVF33)
itkFiniteDifferenceFunctionIVF33.ReleaseGlobalDataPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_ReleaseGlobalDataPointer,None,itkFiniteDifferenceFunctionIVF33)
itkFiniteDifferenceFunctionIVF33.GetPointer = new_instancemethod(_itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_GetPointer,None,itkFiniteDifferenceFunctionIVF33)
itkFiniteDifferenceFunctionIVF33_swigregister = _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_swigregister
itkFiniteDifferenceFunctionIVF33_swigregister(itkFiniteDifferenceFunctionIVF33)

def itkFiniteDifferenceFunctionIVF33_cast(*args):
  """itkFiniteDifferenceFunctionIVF33_cast(itkLightObject obj) -> itkFiniteDifferenceFunctionIVF33"""
  return _itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIVF33_cast(*args)



