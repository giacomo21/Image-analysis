// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkNarrowBandImageFilterBaseChicken
#endif
#ifdef SWIGCSHARP
%module itkNarrowBandImageFilterBaseCsharp
#endif
#ifdef SWIGGUILE
%module itkNarrowBandImageFilterBaseGuile
#endif
#ifdef SWIGJAVA
%module itkNarrowBandImageFilterBaseJava
#endif
#ifdef SWIGLUA
%module itkNarrowBandImageFilterBaseLua
#endif
#ifdef SWIGMODULA3
%module itkNarrowBandImageFilterBaseModula3
#endif
#ifdef SWIGMZSCHEME
%module itkNarrowBandImageFilterBaseMzscheme
#endif
#ifdef SWIGOCAML
%module itkNarrowBandImageFilterBaseOcaml
#endif
#ifdef SWIGPERL
%module itkNarrowBandImageFilterBasePerl
#endif
#ifdef SWIGPERL5
%module itkNarrowBandImageFilterBasePerl5
#endif
#ifdef SWIGPHP
%module itkNarrowBandImageFilterBasePhp
#endif
#ifdef SWIGPHP4
%module itkNarrowBandImageFilterBasePhp4
#endif
#ifdef SWIGPHP5
%module itkNarrowBandImageFilterBasePhp5
#endif
#ifdef SWIGPIKE
%module itkNarrowBandImageFilterBasePike
#endif
#ifdef SWIGPYTHON
%module itkNarrowBandImageFilterBasePython
#endif
#ifdef SWIGR
%module itkNarrowBandImageFilterBaseR
#endif
#ifdef SWIGRUBY
%module itkNarrowBandImageFilterBaseRuby
#endif
#ifdef SWIGSEXP
%module itkNarrowBandImageFilterBaseSexp
#endif
#ifdef SWIGTCL
%module itkNarrowBandImageFilterBaseTcl
#endif
#ifdef SWIGXML
%module itkNarrowBandImageFilterBaseXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Numerics.includes"
#include "LevelSet.includes"
%}


%{
%}




%import wrap_itkNarrowBand.i
%import wrap_itkIndex.i
%import wrap_itkFiniteDifferenceImageFilter.i
%import wrap_ITKCommonBase.i


%include itk.i
%include wrap_itkNarrowBandImageFilterBase_ext.i


 class itkNarrowBandImageFilterBaseID2ID2 : public itkFiniteDifferenceImageFilterID2ID2 {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetIsoSurfaceValue(double const _arg);
     virtual double GetIsoSurfaceValue() const;
     void InsertNarrowBandNode(itkBandNodeI2D & node);
     void InsertNarrowBandNode(itkIndex2 & index);
     void InsertNarrowBandNode(itkIndex2 & index, double & value, signed char & nodestate);
     void SetNarrowBandTotalRadius(float val);
     float GetNarrowBandTotalRadius();
     void SetNarrowBandInnerRadius(float val);
     float GetNarrowBandInnerRadius();
     virtual void CreateNarrowBand();
     virtual void SetNarrowBand(itkNarrowBandBNI2D * ptr);
     virtual void CopyInputToOutput();
   private:
     itkNarrowBandImageFilterBaseID2ID2(itkNarrowBandImageFilterBaseID2ID2 const & arg0);
     void operator=(itkNarrowBandImageFilterBaseID2ID2 const & arg0);
     virtual void AllocateUpdateBuffer();
     static void * IterateThreaderCallback(void * arg);
     virtual void ThreadedIterate(void * arg, int threadId);
     virtual void ThreadedApplyUpdate(double dt, itkNarrowBandImageFilterBaseID2ID2::ThreadRegionType const & regionToProcess, int threadId);
     virtual void ApplyUpdate(double arg0);
     virtual double ThreadedCalculateChange(itkNarrowBandImageFilterBaseID2ID2::ThreadRegionType const & regionToProcess, int threadId);
     virtual double CalculateChange();
   protected:
     itkNarrowBandImageFilterBaseID2ID2();
     ~itkNarrowBandImageFilterBaseID2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     void GetSplitRegion(int i, itkNarrowBandImageFilterBaseID2ID2::ThreadRegionType & splitRegion);
     virtual void Initialize();
     virtual void InitializeIteration();
     virtual void PostProcessOutput();
     void ClearNarrowBand();
     void WaitForAll();
     virtual void GenerateData();
 };


 class itkNarrowBandImageFilterBaseID2ID2_Pointer {
   public:
     itkNarrowBandImageFilterBaseID2ID2_Pointer();
     itkNarrowBandImageFilterBaseID2ID2_Pointer(itkNarrowBandImageFilterBaseID2ID2_Pointer const & p);
     itkNarrowBandImageFilterBaseID2ID2_Pointer(itkNarrowBandImageFilterBaseID2ID2 * p);
     ~itkNarrowBandImageFilterBaseID2ID2_Pointer();
     itkNarrowBandImageFilterBaseID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkNarrowBandImageFilterBaseID2ID2 * GetPointer() const;
     bool operator<(itkNarrowBandImageFilterBaseID2ID2_Pointer const & r) const;
     bool operator>(itkNarrowBandImageFilterBaseID2ID2_Pointer const & r) const;
     bool operator<=(itkNarrowBandImageFilterBaseID2ID2_Pointer const & r) const;
     bool operator>=(itkNarrowBandImageFilterBaseID2ID2_Pointer const & r) const;
     itkNarrowBandImageFilterBaseID2ID2_Pointer & operator=(itkNarrowBandImageFilterBaseID2ID2_Pointer const & r);
     itkNarrowBandImageFilterBaseID2ID2_Pointer & operator=(itkNarrowBandImageFilterBaseID2ID2 * r);
     itkNarrowBandImageFilterBaseID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkNarrowBandImageFilterBaseID3ID3 : public itkFiniteDifferenceImageFilterID3ID3 {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetIsoSurfaceValue(double const _arg);
     virtual double GetIsoSurfaceValue() const;
     void InsertNarrowBandNode(itkBandNodeI3D & node);
     void InsertNarrowBandNode(itkIndex3 & index);
     void InsertNarrowBandNode(itkIndex3 & index, double & value, signed char & nodestate);
     void SetNarrowBandTotalRadius(float val);
     float GetNarrowBandTotalRadius();
     void SetNarrowBandInnerRadius(float val);
     float GetNarrowBandInnerRadius();
     virtual void CreateNarrowBand();
     virtual void SetNarrowBand(itkNarrowBandBNI3D * ptr);
     virtual void CopyInputToOutput();
   private:
     itkNarrowBandImageFilterBaseID3ID3(itkNarrowBandImageFilterBaseID3ID3 const & arg0);
     void operator=(itkNarrowBandImageFilterBaseID3ID3 const & arg0);
     virtual void AllocateUpdateBuffer();
     static void * IterateThreaderCallback(void * arg);
     virtual void ThreadedIterate(void * arg, int threadId);
     virtual void ThreadedApplyUpdate(double dt, itkNarrowBandImageFilterBaseID3ID3::ThreadRegionType const & regionToProcess, int threadId);
     virtual void ApplyUpdate(double arg0);
     virtual double ThreadedCalculateChange(itkNarrowBandImageFilterBaseID3ID3::ThreadRegionType const & regionToProcess, int threadId);
     virtual double CalculateChange();
   protected:
     itkNarrowBandImageFilterBaseID3ID3();
     ~itkNarrowBandImageFilterBaseID3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     void GetSplitRegion(int i, itkNarrowBandImageFilterBaseID3ID3::ThreadRegionType & splitRegion);
     virtual void Initialize();
     virtual void InitializeIteration();
     virtual void PostProcessOutput();
     void ClearNarrowBand();
     void WaitForAll();
     virtual void GenerateData();
 };


 class itkNarrowBandImageFilterBaseID3ID3_Pointer {
   public:
     itkNarrowBandImageFilterBaseID3ID3_Pointer();
     itkNarrowBandImageFilterBaseID3ID3_Pointer(itkNarrowBandImageFilterBaseID3ID3_Pointer const & p);
     itkNarrowBandImageFilterBaseID3ID3_Pointer(itkNarrowBandImageFilterBaseID3ID3 * p);
     ~itkNarrowBandImageFilterBaseID3ID3_Pointer();
     itkNarrowBandImageFilterBaseID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkNarrowBandImageFilterBaseID3ID3 * GetPointer() const;
     bool operator<(itkNarrowBandImageFilterBaseID3ID3_Pointer const & r) const;
     bool operator>(itkNarrowBandImageFilterBaseID3ID3_Pointer const & r) const;
     bool operator<=(itkNarrowBandImageFilterBaseID3ID3_Pointer const & r) const;
     bool operator>=(itkNarrowBandImageFilterBaseID3ID3_Pointer const & r) const;
     itkNarrowBandImageFilterBaseID3ID3_Pointer & operator=(itkNarrowBandImageFilterBaseID3ID3_Pointer const & r);
     itkNarrowBandImageFilterBaseID3ID3_Pointer & operator=(itkNarrowBandImageFilterBaseID3ID3 * r);
     itkNarrowBandImageFilterBaseID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkNarrowBandImageFilterBaseIF2IF2 : public itkFiniteDifferenceImageFilterIF2IF2 {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetIsoSurfaceValue(float const _arg);
     virtual float GetIsoSurfaceValue() const;
     void InsertNarrowBandNode(itkBandNodeI2F & node);
     void InsertNarrowBandNode(itkIndex2 & index);
     void InsertNarrowBandNode(itkIndex2 & index, float & value, signed char & nodestate);
     void SetNarrowBandTotalRadius(float val);
     float GetNarrowBandTotalRadius();
     void SetNarrowBandInnerRadius(float val);
     float GetNarrowBandInnerRadius();
     virtual void CreateNarrowBand();
     virtual void SetNarrowBand(itkNarrowBandBNI2F * ptr);
     virtual void CopyInputToOutput();
   private:
     itkNarrowBandImageFilterBaseIF2IF2(itkNarrowBandImageFilterBaseIF2IF2 const & arg0);
     void operator=(itkNarrowBandImageFilterBaseIF2IF2 const & arg0);
     virtual void AllocateUpdateBuffer();
     static void * IterateThreaderCallback(void * arg);
     virtual void ThreadedIterate(void * arg, int threadId);
     virtual void ThreadedApplyUpdate(double dt, itkNarrowBandImageFilterBaseIF2IF2::ThreadRegionType const & regionToProcess, int threadId);
     virtual void ApplyUpdate(double arg0);
     virtual double ThreadedCalculateChange(itkNarrowBandImageFilterBaseIF2IF2::ThreadRegionType const & regionToProcess, int threadId);
     virtual double CalculateChange();
   protected:
     itkNarrowBandImageFilterBaseIF2IF2();
     ~itkNarrowBandImageFilterBaseIF2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     void GetSplitRegion(int i, itkNarrowBandImageFilterBaseIF2IF2::ThreadRegionType & splitRegion);
     virtual void Initialize();
     virtual void InitializeIteration();
     virtual void PostProcessOutput();
     void ClearNarrowBand();
     void WaitForAll();
     virtual void GenerateData();
 };


 class itkNarrowBandImageFilterBaseIF2IF2_Pointer {
   public:
     itkNarrowBandImageFilterBaseIF2IF2_Pointer();
     itkNarrowBandImageFilterBaseIF2IF2_Pointer(itkNarrowBandImageFilterBaseIF2IF2_Pointer const & p);
     itkNarrowBandImageFilterBaseIF2IF2_Pointer(itkNarrowBandImageFilterBaseIF2IF2 * p);
     ~itkNarrowBandImageFilterBaseIF2IF2_Pointer();
     itkNarrowBandImageFilterBaseIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkNarrowBandImageFilterBaseIF2IF2 * GetPointer() const;
     bool operator<(itkNarrowBandImageFilterBaseIF2IF2_Pointer const & r) const;
     bool operator>(itkNarrowBandImageFilterBaseIF2IF2_Pointer const & r) const;
     bool operator<=(itkNarrowBandImageFilterBaseIF2IF2_Pointer const & r) const;
     bool operator>=(itkNarrowBandImageFilterBaseIF2IF2_Pointer const & r) const;
     itkNarrowBandImageFilterBaseIF2IF2_Pointer & operator=(itkNarrowBandImageFilterBaseIF2IF2_Pointer const & r);
     itkNarrowBandImageFilterBaseIF2IF2_Pointer & operator=(itkNarrowBandImageFilterBaseIF2IF2 * r);
     itkNarrowBandImageFilterBaseIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkNarrowBandImageFilterBaseIF3IF3 : public itkFiniteDifferenceImageFilterIF3IF3 {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     virtual void SetIsoSurfaceValue(float const _arg);
     virtual float GetIsoSurfaceValue() const;
     void InsertNarrowBandNode(itkBandNodeI3F & node);
     void InsertNarrowBandNode(itkIndex3 & index);
     void InsertNarrowBandNode(itkIndex3 & index, float & value, signed char & nodestate);
     void SetNarrowBandTotalRadius(float val);
     float GetNarrowBandTotalRadius();
     void SetNarrowBandInnerRadius(float val);
     float GetNarrowBandInnerRadius();
     virtual void CreateNarrowBand();
     virtual void SetNarrowBand(itkNarrowBandBNI3F * ptr);
     virtual void CopyInputToOutput();
   private:
     itkNarrowBandImageFilterBaseIF3IF3(itkNarrowBandImageFilterBaseIF3IF3 const & arg0);
     void operator=(itkNarrowBandImageFilterBaseIF3IF3 const & arg0);
     virtual void AllocateUpdateBuffer();
     static void * IterateThreaderCallback(void * arg);
     virtual void ThreadedIterate(void * arg, int threadId);
     virtual void ThreadedApplyUpdate(double dt, itkNarrowBandImageFilterBaseIF3IF3::ThreadRegionType const & regionToProcess, int threadId);
     virtual void ApplyUpdate(double arg0);
     virtual double ThreadedCalculateChange(itkNarrowBandImageFilterBaseIF3IF3::ThreadRegionType const & regionToProcess, int threadId);
     virtual double CalculateChange();
   protected:
     itkNarrowBandImageFilterBaseIF3IF3();
     ~itkNarrowBandImageFilterBaseIF3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     void GetSplitRegion(int i, itkNarrowBandImageFilterBaseIF3IF3::ThreadRegionType & splitRegion);
     virtual void Initialize();
     virtual void InitializeIteration();
     virtual void PostProcessOutput();
     void ClearNarrowBand();
     void WaitForAll();
     virtual void GenerateData();
 };


 class itkNarrowBandImageFilterBaseIF3IF3_Pointer {
   public:
     itkNarrowBandImageFilterBaseIF3IF3_Pointer();
     itkNarrowBandImageFilterBaseIF3IF3_Pointer(itkNarrowBandImageFilterBaseIF3IF3_Pointer const & p);
     itkNarrowBandImageFilterBaseIF3IF3_Pointer(itkNarrowBandImageFilterBaseIF3IF3 * p);
     ~itkNarrowBandImageFilterBaseIF3IF3_Pointer();
     itkNarrowBandImageFilterBaseIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkNarrowBandImageFilterBaseIF3IF3 * GetPointer() const;
     bool operator<(itkNarrowBandImageFilterBaseIF3IF3_Pointer const & r) const;
     bool operator>(itkNarrowBandImageFilterBaseIF3IF3_Pointer const & r) const;
     bool operator<=(itkNarrowBandImageFilterBaseIF3IF3_Pointer const & r) const;
     bool operator>=(itkNarrowBandImageFilterBaseIF3IF3_Pointer const & r) const;
     itkNarrowBandImageFilterBaseIF3IF3_Pointer & operator=(itkNarrowBandImageFilterBaseIF3IF3_Pointer const & r);
     itkNarrowBandImageFilterBaseIF3IF3_Pointer & operator=(itkNarrowBandImageFilterBaseIF3IF3 * r);
     itkNarrowBandImageFilterBaseIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


