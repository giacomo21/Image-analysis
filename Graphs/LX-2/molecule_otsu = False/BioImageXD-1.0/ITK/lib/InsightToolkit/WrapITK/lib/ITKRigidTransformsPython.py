# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _ITKRigidTransformsPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ITKRigidTransformsPython', [dirname(__file__)])
        except ImportError:
            import _ITKRigidTransformsPython
            return _ITKRigidTransformsPython
        if fp is not None:
            try:
                _mod = imp.load_module('_ITKRigidTransformsPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ITKRigidTransformsPython = swig_import_helper()
    del swig_import_helper
else:
    import _ITKRigidTransformsPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkPointPython
import vnl_vectorPython
import vcl_complexPython
import pyBasePython
import vnl_matrixPython
import itkFixedArrayPython
import itkVectorPython
import vnl_vector_refPython
import itkTransformPython
import itkCovariantVectorPython
import itkArray2DPython
import itkArrayPython
import ITKCommonBasePython
import itkEventObjectsPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkMatrixOffsetTransformBasePython
def itkRigid3DTransformD_New():
  return itkRigid3DTransformD.New()

def itkRigid2DTransformD_New():
  return itkRigid2DTransformD.New()

class itkRigid2DTransformD(itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22):
    """Proxy of C++ itkRigid2DTransformD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputSpaceDimension = _ITKRigidTransformsPython.itkRigid2DTransformD_InputSpaceDimension
    OutputSpaceDimension = _ITKRigidTransformsPython.itkRigid2DTransformD_OutputSpaceDimension
    ParametersDimension = _ITKRigidTransformsPython.itkRigid2DTransformD_ParametersDimension
    def __New_orig__():
        """__New_orig__()"""
        return _ITKRigidTransformsPython.itkRigid2DTransformD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetRotationMatrix(self, *args):
        """SetRotationMatrix(self, itkMatrixD22 matrix)"""
        return _ITKRigidTransformsPython.itkRigid2DTransformD_SetRotationMatrix(self, *args)

    def GetRotationMatrix(self):
        """GetRotationMatrix(self) -> itkMatrixD22"""
        return _ITKRigidTransformsPython.itkRigid2DTransformD_GetRotationMatrix(self)

    def Translate(self, *args):
        """
        Translate(self, itkVectorD2 offset, bool pre = False)
        Translate(self, itkVectorD2 offset)
        """
        return _ITKRigidTransformsPython.itkRigid2DTransformD_Translate(self, *args)

    def BackTransform(self, *args):
        """
        BackTransform(self, itkPointD2 point) -> itkPointD2
        BackTransform(self, itkVectorD2 vect) -> itkVectorD2
        BackTransform(self, vnl_vector_fixed<(double,2u)> vect) -> vnl_vector_fixed<(double,2u)>
        BackTransform(self, itkCovariantVectorD2 vect) -> itkCovariantVectorD2
        """
        return _ITKRigidTransformsPython.itkRigid2DTransformD_BackTransform(self, *args)

    def SetAngle(self, *args):
        """SetAngle(self, double angle)"""
        return _ITKRigidTransformsPython.itkRigid2DTransformD_SetAngle(self, *args)

    def GetAngle(self):
        """GetAngle(self) -> double"""
        return _ITKRigidTransformsPython.itkRigid2DTransformD_GetAngle(self)

    def SetAngleInDegrees(self, *args):
        """SetAngleInDegrees(self, double angle)"""
        return _ITKRigidTransformsPython.itkRigid2DTransformD_SetAngleInDegrees(self, *args)

    def SetRotation(self, *args):
        """SetRotation(self, double angle)"""
        return _ITKRigidTransformsPython.itkRigid2DTransformD_SetRotation(self, *args)

    def GetRotation(self):
        """GetRotation(self) -> double"""
        return _ITKRigidTransformsPython.itkRigid2DTransformD_GetRotation(self)

    def CloneInverseTo(self, *args):
        """CloneInverseTo(self,  newinverse)"""
        return _ITKRigidTransformsPython.itkRigid2DTransformD_CloneInverseTo(self, *args)

    def GetInverse(self, *args):
        """GetInverse(self, itkRigid2DTransformD inverse) -> bool"""
        return _ITKRigidTransformsPython.itkRigid2DTransformD_GetInverse(self, *args)

    def CloneTo(self, *args):
        """CloneTo(self,  clone)"""
        return _ITKRigidTransformsPython.itkRigid2DTransformD_CloneTo(self, *args)

    __swig_destroy__ = _ITKRigidTransformsPython.delete_itkRigid2DTransformD
    def cast(*args):
        """cast(itkLightObject obj) -> itkRigid2DTransformD"""
        return _ITKRigidTransformsPython.itkRigid2DTransformD_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkRigid2DTransformD"""
        return _ITKRigidTransformsPython.itkRigid2DTransformD_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkRigid2DTransformD
        
        Create a new object of the class itkRigid2DTransformD and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkRigid2DTransformD.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkRigid2DTransformD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRigid2DTransformD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRigid2DTransformD.SetRotationMatrix = new_instancemethod(_ITKRigidTransformsPython.itkRigid2DTransformD_SetRotationMatrix,None,itkRigid2DTransformD)
itkRigid2DTransformD.GetRotationMatrix = new_instancemethod(_ITKRigidTransformsPython.itkRigid2DTransformD_GetRotationMatrix,None,itkRigid2DTransformD)
itkRigid2DTransformD.Translate = new_instancemethod(_ITKRigidTransformsPython.itkRigid2DTransformD_Translate,None,itkRigid2DTransformD)
itkRigid2DTransformD.BackTransform = new_instancemethod(_ITKRigidTransformsPython.itkRigid2DTransformD_BackTransform,None,itkRigid2DTransformD)
itkRigid2DTransformD.SetAngle = new_instancemethod(_ITKRigidTransformsPython.itkRigid2DTransformD_SetAngle,None,itkRigid2DTransformD)
itkRigid2DTransformD.GetAngle = new_instancemethod(_ITKRigidTransformsPython.itkRigid2DTransformD_GetAngle,None,itkRigid2DTransformD)
itkRigid2DTransformD.SetAngleInDegrees = new_instancemethod(_ITKRigidTransformsPython.itkRigid2DTransformD_SetAngleInDegrees,None,itkRigid2DTransformD)
itkRigid2DTransformD.SetRotation = new_instancemethod(_ITKRigidTransformsPython.itkRigid2DTransformD_SetRotation,None,itkRigid2DTransformD)
itkRigid2DTransformD.GetRotation = new_instancemethod(_ITKRigidTransformsPython.itkRigid2DTransformD_GetRotation,None,itkRigid2DTransformD)
itkRigid2DTransformD.CloneInverseTo = new_instancemethod(_ITKRigidTransformsPython.itkRigid2DTransformD_CloneInverseTo,None,itkRigid2DTransformD)
itkRigid2DTransformD.GetInverse = new_instancemethod(_ITKRigidTransformsPython.itkRigid2DTransformD_GetInverse,None,itkRigid2DTransformD)
itkRigid2DTransformD.CloneTo = new_instancemethod(_ITKRigidTransformsPython.itkRigid2DTransformD_CloneTo,None,itkRigid2DTransformD)
itkRigid2DTransformD.GetPointer = new_instancemethod(_ITKRigidTransformsPython.itkRigid2DTransformD_GetPointer,None,itkRigid2DTransformD)
itkRigid2DTransformD_swigregister = _ITKRigidTransformsPython.itkRigid2DTransformD_swigregister
itkRigid2DTransformD_swigregister(itkRigid2DTransformD)

def itkRigid2DTransformD___New_orig__():
  """itkRigid2DTransformD___New_orig__()"""
  return _ITKRigidTransformsPython.itkRigid2DTransformD___New_orig__()

def itkRigid2DTransformD_cast(*args):
  """itkRigid2DTransformD_cast(itkLightObject obj) -> itkRigid2DTransformD"""
  return _ITKRigidTransformsPython.itkRigid2DTransformD_cast(*args)

class itkRigid3DTransformD(itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33):
    """Proxy of C++ itkRigid3DTransformD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SpaceDimension = _ITKRigidTransformsPython.itkRigid3DTransformD_SpaceDimension
    InputSpaceDimension = _ITKRigidTransformsPython.itkRigid3DTransformD_InputSpaceDimension
    OutputSpaceDimension = _ITKRigidTransformsPython.itkRigid3DTransformD_OutputSpaceDimension
    ParametersDimension = _ITKRigidTransformsPython.itkRigid3DTransformD_ParametersDimension
    def __New_orig__():
        """__New_orig__()"""
        return _ITKRigidTransformsPython.itkRigid3DTransformD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetRotationMatrix(self):
        """GetRotationMatrix(self) -> itkMatrixD33"""
        return _ITKRigidTransformsPython.itkRigid3DTransformD_GetRotationMatrix(self)

    def SetRotationMatrix(self, *args):
        """SetRotationMatrix(self, itkMatrixD33 matrix)"""
        return _ITKRigidTransformsPython.itkRigid3DTransformD_SetRotationMatrix(self, *args)

    def Translate(self, *args):
        """
        Translate(self, itkVectorD3 offset, bool pre = False)
        Translate(self, itkVectorD3 offset)
        """
        return _ITKRigidTransformsPython.itkRigid3DTransformD_Translate(self, *args)

    def GetInverse(self, *args):
        """GetInverse(self, itkRigid3DTransformD inverse) -> bool"""
        return _ITKRigidTransformsPython.itkRigid3DTransformD_GetInverse(self, *args)

    def BackTransform(self, *args):
        """
        BackTransform(self, itkPointD3 point) -> itkPointD3
        BackTransform(self, itkVectorD3 vector) -> itkVectorD3
        BackTransform(self, vnl_vector_fixed<(double,3u)> vector) -> vnl_vector_fixed<(double,3u)>
        BackTransform(self, itkCovariantVectorD3 vector) -> itkCovariantVectorD3
        """
        return _ITKRigidTransformsPython.itkRigid3DTransformD_BackTransform(self, *args)

    def MatrixIsOrthogonal(self, *args):
        """
        MatrixIsOrthogonal(self, itkMatrixD33 matrix, double tol = 1.00000000000000003643219731549774157916554706559963960899e-10) -> bool
        MatrixIsOrthogonal(self, itkMatrixD33 matrix) -> bool
        """
        return _ITKRigidTransformsPython.itkRigid3DTransformD_MatrixIsOrthogonal(self, *args)

    __swig_destroy__ = _ITKRigidTransformsPython.delete_itkRigid3DTransformD
    def cast(*args):
        """cast(itkLightObject obj) -> itkRigid3DTransformD"""
        return _ITKRigidTransformsPython.itkRigid3DTransformD_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkRigid3DTransformD"""
        return _ITKRigidTransformsPython.itkRigid3DTransformD_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkRigid3DTransformD
        
        Create a new object of the class itkRigid3DTransformD and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkRigid3DTransformD.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkRigid3DTransformD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRigid3DTransformD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRigid3DTransformD.GetRotationMatrix = new_instancemethod(_ITKRigidTransformsPython.itkRigid3DTransformD_GetRotationMatrix,None,itkRigid3DTransformD)
itkRigid3DTransformD.SetRotationMatrix = new_instancemethod(_ITKRigidTransformsPython.itkRigid3DTransformD_SetRotationMatrix,None,itkRigid3DTransformD)
itkRigid3DTransformD.Translate = new_instancemethod(_ITKRigidTransformsPython.itkRigid3DTransformD_Translate,None,itkRigid3DTransformD)
itkRigid3DTransformD.GetInverse = new_instancemethod(_ITKRigidTransformsPython.itkRigid3DTransformD_GetInverse,None,itkRigid3DTransformD)
itkRigid3DTransformD.BackTransform = new_instancemethod(_ITKRigidTransformsPython.itkRigid3DTransformD_BackTransform,None,itkRigid3DTransformD)
itkRigid3DTransformD.MatrixIsOrthogonal = new_instancemethod(_ITKRigidTransformsPython.itkRigid3DTransformD_MatrixIsOrthogonal,None,itkRigid3DTransformD)
itkRigid3DTransformD.GetPointer = new_instancemethod(_ITKRigidTransformsPython.itkRigid3DTransformD_GetPointer,None,itkRigid3DTransformD)
itkRigid3DTransformD_swigregister = _ITKRigidTransformsPython.itkRigid3DTransformD_swigregister
itkRigid3DTransformD_swigregister(itkRigid3DTransformD)

def itkRigid3DTransformD___New_orig__():
  """itkRigid3DTransformD___New_orig__()"""
  return _ITKRigidTransformsPython.itkRigid3DTransformD___New_orig__()

def itkRigid3DTransformD_cast(*args):
  """itkRigid3DTransformD_cast(itkLightObject obj) -> itkRigid3DTransformD"""
  return _ITKRigidTransformsPython.itkRigid3DTransformD_cast(*args)



