// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkCannySegmentationLevelSetImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkCannySegmentationLevelSetImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkCannySegmentationLevelSetImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkCannySegmentationLevelSetImageFilterJava
#endif
#ifdef SWIGLUA
%module itkCannySegmentationLevelSetImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkCannySegmentationLevelSetImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkCannySegmentationLevelSetImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkCannySegmentationLevelSetImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkCannySegmentationLevelSetImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkCannySegmentationLevelSetImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkCannySegmentationLevelSetImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkCannySegmentationLevelSetImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkCannySegmentationLevelSetImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkCannySegmentationLevelSetImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkCannySegmentationLevelSetImageFilterPython
#endif
#ifdef SWIGR
%module itkCannySegmentationLevelSetImageFilterR
#endif
#ifdef SWIGRUBY
%module itkCannySegmentationLevelSetImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkCannySegmentationLevelSetImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkCannySegmentationLevelSetImageFilterTcl
#endif
#ifdef SWIGXML
%module itkCannySegmentationLevelSetImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Numerics.includes"
#include "LevelSet.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkImage.i
%import wrap_itkSegmentationLevelSetImageFilter.i


%include itk.i
%include wrap_itkCannySegmentationLevelSetImageFilter_ext.i


 class itkCannySegmentationLevelSetImageFilterID2ID2D : public itkSegmentationLevelSetImageFilterID2ID2D {
   public:
     enum  {  OutputHasNumericTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkCannySegmentationLevelSetImageFilterID2ID2D_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void SetThreshold(double v);
     double GetThreshold() const;
     void SetVariance(double v);
     double GetVariance() const;
     itkImageD2 * GetCannyImage();
   private:
     itkCannySegmentationLevelSetImageFilterID2ID2D(itkCannySegmentationLevelSetImageFilterID2ID2D const & arg0);
     void operator=(itkCannySegmentationLevelSetImageFilterID2ID2D const & arg0);
   protected:
     ~itkCannySegmentationLevelSetImageFilterID2ID2D();
     itkCannySegmentationLevelSetImageFilterID2ID2D();
 };


 class itkCannySegmentationLevelSetImageFilterID2ID2D_Pointer {
   public:
     itkCannySegmentationLevelSetImageFilterID2ID2D_Pointer();
     itkCannySegmentationLevelSetImageFilterID2ID2D_Pointer(itkCannySegmentationLevelSetImageFilterID2ID2D_Pointer const & p);
     itkCannySegmentationLevelSetImageFilterID2ID2D_Pointer(itkCannySegmentationLevelSetImageFilterID2ID2D * p);
     ~itkCannySegmentationLevelSetImageFilterID2ID2D_Pointer();
     itkCannySegmentationLevelSetImageFilterID2ID2D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkCannySegmentationLevelSetImageFilterID2ID2D * GetPointer() const;
     bool operator<(itkCannySegmentationLevelSetImageFilterID2ID2D_Pointer const & r) const;
     bool operator>(itkCannySegmentationLevelSetImageFilterID2ID2D_Pointer const & r) const;
     bool operator<=(itkCannySegmentationLevelSetImageFilterID2ID2D_Pointer const & r) const;
     bool operator>=(itkCannySegmentationLevelSetImageFilterID2ID2D_Pointer const & r) const;
     itkCannySegmentationLevelSetImageFilterID2ID2D_Pointer & operator=(itkCannySegmentationLevelSetImageFilterID2ID2D_Pointer const & r);
     itkCannySegmentationLevelSetImageFilterID2ID2D_Pointer & operator=(itkCannySegmentationLevelSetImageFilterID2ID2D * r);
     itkCannySegmentationLevelSetImageFilterID2ID2D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkCannySegmentationLevelSetImageFilterID3ID3D : public itkSegmentationLevelSetImageFilterID3ID3D {
   public:
     enum  {  OutputHasNumericTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkCannySegmentationLevelSetImageFilterID3ID3D_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void SetThreshold(double v);
     double GetThreshold() const;
     void SetVariance(double v);
     double GetVariance() const;
     itkImageD3 * GetCannyImage();
   private:
     itkCannySegmentationLevelSetImageFilterID3ID3D(itkCannySegmentationLevelSetImageFilterID3ID3D const & arg0);
     void operator=(itkCannySegmentationLevelSetImageFilterID3ID3D const & arg0);
   protected:
     ~itkCannySegmentationLevelSetImageFilterID3ID3D();
     itkCannySegmentationLevelSetImageFilterID3ID3D();
 };


 class itkCannySegmentationLevelSetImageFilterID3ID3D_Pointer {
   public:
     itkCannySegmentationLevelSetImageFilterID3ID3D_Pointer();
     itkCannySegmentationLevelSetImageFilterID3ID3D_Pointer(itkCannySegmentationLevelSetImageFilterID3ID3D_Pointer const & p);
     itkCannySegmentationLevelSetImageFilterID3ID3D_Pointer(itkCannySegmentationLevelSetImageFilterID3ID3D * p);
     ~itkCannySegmentationLevelSetImageFilterID3ID3D_Pointer();
     itkCannySegmentationLevelSetImageFilterID3ID3D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkCannySegmentationLevelSetImageFilterID3ID3D * GetPointer() const;
     bool operator<(itkCannySegmentationLevelSetImageFilterID3ID3D_Pointer const & r) const;
     bool operator>(itkCannySegmentationLevelSetImageFilterID3ID3D_Pointer const & r) const;
     bool operator<=(itkCannySegmentationLevelSetImageFilterID3ID3D_Pointer const & r) const;
     bool operator>=(itkCannySegmentationLevelSetImageFilterID3ID3D_Pointer const & r) const;
     itkCannySegmentationLevelSetImageFilterID3ID3D_Pointer & operator=(itkCannySegmentationLevelSetImageFilterID3ID3D_Pointer const & r);
     itkCannySegmentationLevelSetImageFilterID3ID3D_Pointer & operator=(itkCannySegmentationLevelSetImageFilterID3ID3D * r);
     itkCannySegmentationLevelSetImageFilterID3ID3D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkCannySegmentationLevelSetImageFilterIF2IF2F : public itkSegmentationLevelSetImageFilterIF2IF2F {
   public:
     enum  {  OutputHasNumericTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkCannySegmentationLevelSetImageFilterIF2IF2F_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void SetThreshold(float v);
     float GetThreshold() const;
     void SetVariance(double v);
     double GetVariance() const;
     itkImageF2 * GetCannyImage();
   private:
     itkCannySegmentationLevelSetImageFilterIF2IF2F(itkCannySegmentationLevelSetImageFilterIF2IF2F const & arg0);
     void operator=(itkCannySegmentationLevelSetImageFilterIF2IF2F const & arg0);
   protected:
     ~itkCannySegmentationLevelSetImageFilterIF2IF2F();
     itkCannySegmentationLevelSetImageFilterIF2IF2F();
 };


 class itkCannySegmentationLevelSetImageFilterIF2IF2F_Pointer {
   public:
     itkCannySegmentationLevelSetImageFilterIF2IF2F_Pointer();
     itkCannySegmentationLevelSetImageFilterIF2IF2F_Pointer(itkCannySegmentationLevelSetImageFilterIF2IF2F_Pointer const & p);
     itkCannySegmentationLevelSetImageFilterIF2IF2F_Pointer(itkCannySegmentationLevelSetImageFilterIF2IF2F * p);
     ~itkCannySegmentationLevelSetImageFilterIF2IF2F_Pointer();
     itkCannySegmentationLevelSetImageFilterIF2IF2F * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkCannySegmentationLevelSetImageFilterIF2IF2F * GetPointer() const;
     bool operator<(itkCannySegmentationLevelSetImageFilterIF2IF2F_Pointer const & r) const;
     bool operator>(itkCannySegmentationLevelSetImageFilterIF2IF2F_Pointer const & r) const;
     bool operator<=(itkCannySegmentationLevelSetImageFilterIF2IF2F_Pointer const & r) const;
     bool operator>=(itkCannySegmentationLevelSetImageFilterIF2IF2F_Pointer const & r) const;
     itkCannySegmentationLevelSetImageFilterIF2IF2F_Pointer & operator=(itkCannySegmentationLevelSetImageFilterIF2IF2F_Pointer const & r);
     itkCannySegmentationLevelSetImageFilterIF2IF2F_Pointer & operator=(itkCannySegmentationLevelSetImageFilterIF2IF2F * r);
     itkCannySegmentationLevelSetImageFilterIF2IF2F * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkCannySegmentationLevelSetImageFilterIF3IF3F : public itkSegmentationLevelSetImageFilterIF3IF3F {
   public:
     enum  {  OutputHasNumericTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkCannySegmentationLevelSetImageFilterIF3IF3F_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void SetThreshold(float v);
     float GetThreshold() const;
     void SetVariance(double v);
     double GetVariance() const;
     itkImageF3 * GetCannyImage();
   private:
     itkCannySegmentationLevelSetImageFilterIF3IF3F(itkCannySegmentationLevelSetImageFilterIF3IF3F const & arg0);
     void operator=(itkCannySegmentationLevelSetImageFilterIF3IF3F const & arg0);
   protected:
     ~itkCannySegmentationLevelSetImageFilterIF3IF3F();
     itkCannySegmentationLevelSetImageFilterIF3IF3F();
 };


 class itkCannySegmentationLevelSetImageFilterIF3IF3F_Pointer {
   public:
     itkCannySegmentationLevelSetImageFilterIF3IF3F_Pointer();
     itkCannySegmentationLevelSetImageFilterIF3IF3F_Pointer(itkCannySegmentationLevelSetImageFilterIF3IF3F_Pointer const & p);
     itkCannySegmentationLevelSetImageFilterIF3IF3F_Pointer(itkCannySegmentationLevelSetImageFilterIF3IF3F * p);
     ~itkCannySegmentationLevelSetImageFilterIF3IF3F_Pointer();
     itkCannySegmentationLevelSetImageFilterIF3IF3F * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkCannySegmentationLevelSetImageFilterIF3IF3F * GetPointer() const;
     bool operator<(itkCannySegmentationLevelSetImageFilterIF3IF3F_Pointer const & r) const;
     bool operator>(itkCannySegmentationLevelSetImageFilterIF3IF3F_Pointer const & r) const;
     bool operator<=(itkCannySegmentationLevelSetImageFilterIF3IF3F_Pointer const & r) const;
     bool operator>=(itkCannySegmentationLevelSetImageFilterIF3IF3F_Pointer const & r) const;
     itkCannySegmentationLevelSetImageFilterIF3IF3F_Pointer & operator=(itkCannySegmentationLevelSetImageFilterIF3IF3F_Pointer const & r);
     itkCannySegmentationLevelSetImageFilterIF3IF3F_Pointer & operator=(itkCannySegmentationLevelSetImageFilterIF3IF3F * r);
     itkCannySegmentationLevelSetImageFilterIF3IF3F * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


