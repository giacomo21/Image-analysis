// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkComplexToImaginaryImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkComplexToImaginaryImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkComplexToImaginaryImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkComplexToImaginaryImageFilterJava
#endif
#ifdef SWIGLUA
%module itkComplexToImaginaryImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkComplexToImaginaryImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkComplexToImaginaryImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkComplexToImaginaryImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkComplexToImaginaryImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkComplexToImaginaryImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkComplexToImaginaryImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkComplexToImaginaryImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkComplexToImaginaryImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkComplexToImaginaryImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkComplexToImaginaryImageFilterPython
#endif
#ifdef SWIGR
%module itkComplexToImaginaryImageFilterR
#endif
#ifdef SWIGRUBY
%module itkComplexToImaginaryImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkComplexToImaginaryImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkComplexToImaginaryImageFilterTcl
#endif
#ifdef SWIGXML
%module itkComplexToImaginaryImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "FFT.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_ITKRegions.i
%import wrap_itkInPlaceImageFilterB.i


%include itk.i
%include wrap_itkComplexToImaginaryImageFilter_ext.i


 class itkComplexToImaginaryImageFilterICF2IF2_Pointer {
   public:
     itkComplexToImaginaryImageFilterICF2IF2_Pointer();
     itkComplexToImaginaryImageFilterICF2IF2_Pointer(itkComplexToImaginaryImageFilterICF2IF2_Pointer const & p);
     itkComplexToImaginaryImageFilterICF2IF2_Pointer(itkComplexToImaginaryImageFilterICF2IF2 * p);
     ~itkComplexToImaginaryImageFilterICF2IF2_Pointer();
     itkComplexToImaginaryImageFilterICF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkComplexToImaginaryImageFilterICF2IF2 * GetPointer() const;
     bool operator<(itkComplexToImaginaryImageFilterICF2IF2_Pointer const & r) const;
     bool operator>(itkComplexToImaginaryImageFilterICF2IF2_Pointer const & r) const;
     bool operator<=(itkComplexToImaginaryImageFilterICF2IF2_Pointer const & r) const;
     bool operator>=(itkComplexToImaginaryImageFilterICF2IF2_Pointer const & r) const;
     itkComplexToImaginaryImageFilterICF2IF2_Pointer & operator=(itkComplexToImaginaryImageFilterICF2IF2_Pointer const & r);
     itkComplexToImaginaryImageFilterICF2IF2_Pointer & operator=(itkComplexToImaginaryImageFilterICF2IF2 * r);
     itkComplexToImaginaryImageFilterICF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkComplexToImaginaryImageFilterICF2IF2_Superclass : public itkInPlaceImageFilterICF2IF2 {
   public:
     static itkComplexToImaginaryImageFilterICF2IF2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Function::ComplexToImaginary< std::complex< float >, float > & GetFunctor();
     itk::Function::ComplexToImaginary< std::complex< float >, float > const & GetFunctor() const;
     void SetFunctor(itk::Function::ComplexToImaginary< std::complex< float >, float > const & functor);
   private:
     itkComplexToImaginaryImageFilterICF2IF2_Superclass(itkComplexToImaginaryImageFilterICF2IF2_Superclass const & arg0);
     void operator=(itkComplexToImaginaryImageFilterICF2IF2_Superclass const & arg0);
   protected:
     itkComplexToImaginaryImageFilterICF2IF2_Superclass();
     ~itkComplexToImaginaryImageFilterICF2IF2_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkComplexToImaginaryImageFilterICF2IF2_Superclass_Pointer {
   public:
     itkComplexToImaginaryImageFilterICF2IF2_Superclass_Pointer();
     itkComplexToImaginaryImageFilterICF2IF2_Superclass_Pointer(itkComplexToImaginaryImageFilterICF2IF2_Superclass_Pointer const & p);
     itkComplexToImaginaryImageFilterICF2IF2_Superclass_Pointer(itkComplexToImaginaryImageFilterICF2IF2_Superclass * p);
     ~itkComplexToImaginaryImageFilterICF2IF2_Superclass_Pointer();
     itkComplexToImaginaryImageFilterICF2IF2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkComplexToImaginaryImageFilterICF2IF2_Superclass * GetPointer() const;
     bool operator<(itkComplexToImaginaryImageFilterICF2IF2_Superclass_Pointer const & r) const;
     bool operator>(itkComplexToImaginaryImageFilterICF2IF2_Superclass_Pointer const & r) const;
     bool operator<=(itkComplexToImaginaryImageFilterICF2IF2_Superclass_Pointer const & r) const;
     bool operator>=(itkComplexToImaginaryImageFilterICF2IF2_Superclass_Pointer const & r) const;
     itkComplexToImaginaryImageFilterICF2IF2_Superclass_Pointer & operator=(itkComplexToImaginaryImageFilterICF2IF2_Superclass_Pointer const & r);
     itkComplexToImaginaryImageFilterICF2IF2_Superclass_Pointer & operator=(itkComplexToImaginaryImageFilterICF2IF2_Superclass * r);
     itkComplexToImaginaryImageFilterICF2IF2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkComplexToImaginaryImageFilterICF3IF3_Pointer {
   public:
     itkComplexToImaginaryImageFilterICF3IF3_Pointer();
     itkComplexToImaginaryImageFilterICF3IF3_Pointer(itkComplexToImaginaryImageFilterICF3IF3_Pointer const & p);
     itkComplexToImaginaryImageFilterICF3IF3_Pointer(itkComplexToImaginaryImageFilterICF3IF3 * p);
     ~itkComplexToImaginaryImageFilterICF3IF3_Pointer();
     itkComplexToImaginaryImageFilterICF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkComplexToImaginaryImageFilterICF3IF3 * GetPointer() const;
     bool operator<(itkComplexToImaginaryImageFilterICF3IF3_Pointer const & r) const;
     bool operator>(itkComplexToImaginaryImageFilterICF3IF3_Pointer const & r) const;
     bool operator<=(itkComplexToImaginaryImageFilterICF3IF3_Pointer const & r) const;
     bool operator>=(itkComplexToImaginaryImageFilterICF3IF3_Pointer const & r) const;
     itkComplexToImaginaryImageFilterICF3IF3_Pointer & operator=(itkComplexToImaginaryImageFilterICF3IF3_Pointer const & r);
     itkComplexToImaginaryImageFilterICF3IF3_Pointer & operator=(itkComplexToImaginaryImageFilterICF3IF3 * r);
     itkComplexToImaginaryImageFilterICF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkComplexToImaginaryImageFilterICF3IF3_Superclass : public itkInPlaceImageFilterICF3IF3 {
   public:
     static itkComplexToImaginaryImageFilterICF3IF3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Function::ComplexToImaginary< std::complex< float >, float > & GetFunctor();
     itk::Function::ComplexToImaginary< std::complex< float >, float > const & GetFunctor() const;
     void SetFunctor(itk::Function::ComplexToImaginary< std::complex< float >, float > const & functor);
   private:
     itkComplexToImaginaryImageFilterICF3IF3_Superclass(itkComplexToImaginaryImageFilterICF3IF3_Superclass const & arg0);
     void operator=(itkComplexToImaginaryImageFilterICF3IF3_Superclass const & arg0);
   protected:
     itkComplexToImaginaryImageFilterICF3IF3_Superclass();
     ~itkComplexToImaginaryImageFilterICF3IF3_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkComplexToImaginaryImageFilterICF3IF3_Superclass_Pointer {
   public:
     itkComplexToImaginaryImageFilterICF3IF3_Superclass_Pointer();
     itkComplexToImaginaryImageFilterICF3IF3_Superclass_Pointer(itkComplexToImaginaryImageFilterICF3IF3_Superclass_Pointer const & p);
     itkComplexToImaginaryImageFilterICF3IF3_Superclass_Pointer(itkComplexToImaginaryImageFilterICF3IF3_Superclass * p);
     ~itkComplexToImaginaryImageFilterICF3IF3_Superclass_Pointer();
     itkComplexToImaginaryImageFilterICF3IF3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkComplexToImaginaryImageFilterICF3IF3_Superclass * GetPointer() const;
     bool operator<(itkComplexToImaginaryImageFilterICF3IF3_Superclass_Pointer const & r) const;
     bool operator>(itkComplexToImaginaryImageFilterICF3IF3_Superclass_Pointer const & r) const;
     bool operator<=(itkComplexToImaginaryImageFilterICF3IF3_Superclass_Pointer const & r) const;
     bool operator>=(itkComplexToImaginaryImageFilterICF3IF3_Superclass_Pointer const & r) const;
     itkComplexToImaginaryImageFilterICF3IF3_Superclass_Pointer & operator=(itkComplexToImaginaryImageFilterICF3IF3_Superclass_Pointer const & r);
     itkComplexToImaginaryImageFilterICF3IF3_Superclass_Pointer & operator=(itkComplexToImaginaryImageFilterICF3IF3_Superclass * r);
     itkComplexToImaginaryImageFilterICF3IF3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkComplexToImaginaryImageFilterICF2IF2 : public itkComplexToImaginaryImageFilterICF2IF2_Superclass {
   public:
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkComplexToImaginaryImageFilterICF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkComplexToImaginaryImageFilterICF2IF2(itkComplexToImaginaryImageFilterICF2IF2 const & arg0);
     void operator=(itkComplexToImaginaryImageFilterICF2IF2 const & arg0);
   protected:
     itkComplexToImaginaryImageFilterICF2IF2();
     ~itkComplexToImaginaryImageFilterICF2IF2();
 };


 class itkComplexToImaginaryImageFilterICF3IF3 : public itkComplexToImaginaryImageFilterICF3IF3_Superclass {
   public:
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkComplexToImaginaryImageFilterICF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkComplexToImaginaryImageFilterICF3IF3(itkComplexToImaginaryImageFilterICF3IF3 const & arg0);
     void operator=(itkComplexToImaginaryImageFilterICF3IF3 const & arg0);
   protected:
     itkComplexToImaginaryImageFilterICF3IF3();
     ~itkComplexToImaginaryImageFilterICF3IF3();
 };


