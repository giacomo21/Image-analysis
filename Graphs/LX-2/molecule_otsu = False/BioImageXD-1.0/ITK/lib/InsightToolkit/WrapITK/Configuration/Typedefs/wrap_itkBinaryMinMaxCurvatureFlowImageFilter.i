// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkBinaryMinMaxCurvatureFlowImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkBinaryMinMaxCurvatureFlowImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkBinaryMinMaxCurvatureFlowImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkBinaryMinMaxCurvatureFlowImageFilterJava
#endif
#ifdef SWIGLUA
%module itkBinaryMinMaxCurvatureFlowImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkBinaryMinMaxCurvatureFlowImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkBinaryMinMaxCurvatureFlowImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkBinaryMinMaxCurvatureFlowImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkBinaryMinMaxCurvatureFlowImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkBinaryMinMaxCurvatureFlowImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkBinaryMinMaxCurvatureFlowImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkBinaryMinMaxCurvatureFlowImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkBinaryMinMaxCurvatureFlowImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkBinaryMinMaxCurvatureFlowImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkBinaryMinMaxCurvatureFlowImageFilterPython
#endif
#ifdef SWIGR
%module itkBinaryMinMaxCurvatureFlowImageFilterR
#endif
#ifdef SWIGRUBY
%module itkBinaryMinMaxCurvatureFlowImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkBinaryMinMaxCurvatureFlowImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkBinaryMinMaxCurvatureFlowImageFilterTcl
#endif
#ifdef SWIGXML
%module itkBinaryMinMaxCurvatureFlowImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Denoising.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkMinMaxCurvatureFlowImageFilter.i


%include itk.i
%include wrap_itkBinaryMinMaxCurvatureFlowImageFilter_ext.i


 class itkBinaryMinMaxCurvatureFlowImageFilterID2ID2 : public itkMinMaxCurvatureFlowImageFilterID2ID2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetThreshold(double const _arg);
     virtual double GetThreshold() const;
   private:
     itkBinaryMinMaxCurvatureFlowImageFilterID2ID2(itkBinaryMinMaxCurvatureFlowImageFilterID2ID2 const & arg0);
     void operator=(itkBinaryMinMaxCurvatureFlowImageFilterID2ID2 const & arg0);
   protected:
     itkBinaryMinMaxCurvatureFlowImageFilterID2ID2();
     ~itkBinaryMinMaxCurvatureFlowImageFilterID2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void InitializeIteration();
 };


 class itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_Pointer {
   public:
     itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_Pointer();
     itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_Pointer(itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_Pointer const & p);
     itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_Pointer(itkBinaryMinMaxCurvatureFlowImageFilterID2ID2 * p);
     ~itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_Pointer();
     itkBinaryMinMaxCurvatureFlowImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMinMaxCurvatureFlowImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_Pointer const & r) const;
     itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_Pointer & operator=(itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_Pointer const & r);
     itkBinaryMinMaxCurvatureFlowImageFilterID2ID2_Pointer & operator=(itkBinaryMinMaxCurvatureFlowImageFilterID2ID2 * r);
     itkBinaryMinMaxCurvatureFlowImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryMinMaxCurvatureFlowImageFilterID3ID3 : public itkMinMaxCurvatureFlowImageFilterID3ID3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetThreshold(double const _arg);
     virtual double GetThreshold() const;
   private:
     itkBinaryMinMaxCurvatureFlowImageFilterID3ID3(itkBinaryMinMaxCurvatureFlowImageFilterID3ID3 const & arg0);
     void operator=(itkBinaryMinMaxCurvatureFlowImageFilterID3ID3 const & arg0);
   protected:
     itkBinaryMinMaxCurvatureFlowImageFilterID3ID3();
     ~itkBinaryMinMaxCurvatureFlowImageFilterID3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void InitializeIteration();
 };


 class itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_Pointer {
   public:
     itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_Pointer();
     itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_Pointer(itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_Pointer const & p);
     itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_Pointer(itkBinaryMinMaxCurvatureFlowImageFilterID3ID3 * p);
     ~itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_Pointer();
     itkBinaryMinMaxCurvatureFlowImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMinMaxCurvatureFlowImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_Pointer const & r) const;
     itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_Pointer & operator=(itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_Pointer const & r);
     itkBinaryMinMaxCurvatureFlowImageFilterID3ID3_Pointer & operator=(itkBinaryMinMaxCurvatureFlowImageFilterID3ID3 * r);
     itkBinaryMinMaxCurvatureFlowImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2 : public itkMinMaxCurvatureFlowImageFilterIF2IF2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetThreshold(double const _arg);
     virtual double GetThreshold() const;
   private:
     itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2(itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2 const & arg0);
     void operator=(itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2 const & arg0);
   protected:
     itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2();
     ~itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void InitializeIteration();
 };


 class itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_Pointer {
   public:
     itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_Pointer();
     itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_Pointer(itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_Pointer const & p);
     itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_Pointer(itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2 * p);
     ~itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_Pointer();
     itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_Pointer const & r) const;
     itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_Pointer & operator=(itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_Pointer const & r);
     itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2_Pointer & operator=(itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2 * r);
     itkBinaryMinMaxCurvatureFlowImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3 : public itkMinMaxCurvatureFlowImageFilterIF3IF3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetThreshold(double const _arg);
     virtual double GetThreshold() const;
   private:
     itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3(itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3 const & arg0);
     void operator=(itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3 const & arg0);
   protected:
     itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3();
     ~itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void InitializeIteration();
 };


 class itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_Pointer {
   public:
     itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_Pointer();
     itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_Pointer(itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_Pointer const & p);
     itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_Pointer(itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3 * p);
     ~itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_Pointer();
     itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_Pointer const & r) const;
     itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_Pointer & operator=(itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_Pointer const & r);
     itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3_Pointer & operator=(itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3 * r);
     itkBinaryMinMaxCurvatureFlowImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


