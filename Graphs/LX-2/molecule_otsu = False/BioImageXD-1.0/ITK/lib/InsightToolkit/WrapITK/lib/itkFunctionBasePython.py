# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkFunctionBasePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkFunctionBasePython', [dirname(__file__)])
        except ImportError:
            import _itkFunctionBasePython
            return _itkFunctionBasePython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkFunctionBasePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkFunctionBasePython = swig_import_helper()
    del swig_import_helper
else:
    import _itkFunctionBasePython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkPointPython
import vnl_vectorPython
import vcl_complexPython
import pyBasePython
import vnl_matrixPython
import itkFixedArrayPython
import itkVectorPython
import vnl_vector_refPython
import itkContinuousIndexPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkImagePython
import itkCovariantVectorPython
import ITKRegionsPython
import ITKCommonBasePython
import itkEventObjectsPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkRGBPixelPython
import itkArrayPython
def itkFunctionBaseDD_New():
  return itkFunctionBaseDD.New()

def itkFunctionBaseVF3D_New():
  return itkFunctionBaseVF3D.New()

def itkFunctionBasePD3VD3_New():
  return itkFunctionBasePD3VD3.New()

def itkFunctionBaseCID3AD_New():
  return itkFunctionBaseCID3AD.New()

def itkFunctionBaseCIF3AD_New():
  return itkFunctionBaseCIF3AD.New()

def itkFunctionBasePD3D_New():
  return itkFunctionBasePD3D.New()

def itkFunctionBasePF3D_New():
  return itkFunctionBasePF3D.New()

def itkFunctionBaseIUS3D_New():
  return itkFunctionBaseIUS3D.New()

def itkFunctionBaseIF3D_New():
  return itkFunctionBaseIF3D.New()

def itkFunctionBaseVF2D_New():
  return itkFunctionBaseVF2D.New()

def itkFunctionBasePD2VD2_New():
  return itkFunctionBasePD2VD2.New()

def itkFunctionBaseCID2AD_New():
  return itkFunctionBaseCID2AD.New()

def itkFunctionBaseCIF2AD_New():
  return itkFunctionBaseCIF2AD.New()

def itkFunctionBasePD2D_New():
  return itkFunctionBasePD2D.New()

def itkFunctionBasePF2D_New():
  return itkFunctionBasePF2D.New()

def itkFunctionBaseIUS2D_New():
  return itkFunctionBaseIUS2D.New()

def itkFunctionBaseIF2D_New():
  return itkFunctionBaseIF2D.New()

class itkFunctionBaseCID2AD(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBaseCID2AD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Evaluate(self, *args):
        """Evaluate(self, itkContinuousIndexD2 input) -> itkArrayD"""
        return _itkFunctionBasePython.itkFunctionBaseCID2AD_Evaluate(self, *args)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBaseCID2AD
    def cast(*args):
        """cast(itkLightObject obj) -> itkFunctionBaseCID2AD"""
        return _itkFunctionBasePython.itkFunctionBaseCID2AD_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFunctionBaseCID2AD"""
        return _itkFunctionBasePython.itkFunctionBaseCID2AD_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFunctionBaseCID2AD
        
        Create a new object of the class itkFunctionBaseCID2AD and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFunctionBaseCID2AD.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFunctionBaseCID2AD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBaseCID2AD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBaseCID2AD.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseCID2AD_Evaluate,None,itkFunctionBaseCID2AD)
itkFunctionBaseCID2AD.GetPointer = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseCID2AD_GetPointer,None,itkFunctionBaseCID2AD)
itkFunctionBaseCID2AD_swigregister = _itkFunctionBasePython.itkFunctionBaseCID2AD_swigregister
itkFunctionBaseCID2AD_swigregister(itkFunctionBaseCID2AD)

def itkFunctionBaseCID2AD_cast(*args):
  """itkFunctionBaseCID2AD_cast(itkLightObject obj) -> itkFunctionBaseCID2AD"""
  return _itkFunctionBasePython.itkFunctionBaseCID2AD_cast(*args)

class itkFunctionBaseCID3AD(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBaseCID3AD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Evaluate(self, *args):
        """Evaluate(self, itkContinuousIndexD3 input) -> itkArrayD"""
        return _itkFunctionBasePython.itkFunctionBaseCID3AD_Evaluate(self, *args)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBaseCID3AD
    def cast(*args):
        """cast(itkLightObject obj) -> itkFunctionBaseCID3AD"""
        return _itkFunctionBasePython.itkFunctionBaseCID3AD_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFunctionBaseCID3AD"""
        return _itkFunctionBasePython.itkFunctionBaseCID3AD_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFunctionBaseCID3AD
        
        Create a new object of the class itkFunctionBaseCID3AD and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFunctionBaseCID3AD.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFunctionBaseCID3AD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBaseCID3AD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBaseCID3AD.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseCID3AD_Evaluate,None,itkFunctionBaseCID3AD)
itkFunctionBaseCID3AD.GetPointer = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseCID3AD_GetPointer,None,itkFunctionBaseCID3AD)
itkFunctionBaseCID3AD_swigregister = _itkFunctionBasePython.itkFunctionBaseCID3AD_swigregister
itkFunctionBaseCID3AD_swigregister(itkFunctionBaseCID3AD)

def itkFunctionBaseCID3AD_cast(*args):
  """itkFunctionBaseCID3AD_cast(itkLightObject obj) -> itkFunctionBaseCID3AD"""
  return _itkFunctionBasePython.itkFunctionBaseCID3AD_cast(*args)

class itkFunctionBaseCIF2AD(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBaseCIF2AD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Evaluate(self, *args):
        """Evaluate(self, itkContinuousIndexF2 input) -> itkArrayD"""
        return _itkFunctionBasePython.itkFunctionBaseCIF2AD_Evaluate(self, *args)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBaseCIF2AD
    def cast(*args):
        """cast(itkLightObject obj) -> itkFunctionBaseCIF2AD"""
        return _itkFunctionBasePython.itkFunctionBaseCIF2AD_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFunctionBaseCIF2AD"""
        return _itkFunctionBasePython.itkFunctionBaseCIF2AD_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFunctionBaseCIF2AD
        
        Create a new object of the class itkFunctionBaseCIF2AD and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFunctionBaseCIF2AD.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFunctionBaseCIF2AD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBaseCIF2AD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBaseCIF2AD.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseCIF2AD_Evaluate,None,itkFunctionBaseCIF2AD)
itkFunctionBaseCIF2AD.GetPointer = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseCIF2AD_GetPointer,None,itkFunctionBaseCIF2AD)
itkFunctionBaseCIF2AD_swigregister = _itkFunctionBasePython.itkFunctionBaseCIF2AD_swigregister
itkFunctionBaseCIF2AD_swigregister(itkFunctionBaseCIF2AD)

def itkFunctionBaseCIF2AD_cast(*args):
  """itkFunctionBaseCIF2AD_cast(itkLightObject obj) -> itkFunctionBaseCIF2AD"""
  return _itkFunctionBasePython.itkFunctionBaseCIF2AD_cast(*args)

class itkFunctionBaseCIF3AD(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBaseCIF3AD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Evaluate(self, *args):
        """Evaluate(self, itkContinuousIndexF3 input) -> itkArrayD"""
        return _itkFunctionBasePython.itkFunctionBaseCIF3AD_Evaluate(self, *args)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBaseCIF3AD
    def cast(*args):
        """cast(itkLightObject obj) -> itkFunctionBaseCIF3AD"""
        return _itkFunctionBasePython.itkFunctionBaseCIF3AD_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFunctionBaseCIF3AD"""
        return _itkFunctionBasePython.itkFunctionBaseCIF3AD_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFunctionBaseCIF3AD
        
        Create a new object of the class itkFunctionBaseCIF3AD and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFunctionBaseCIF3AD.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFunctionBaseCIF3AD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBaseCIF3AD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBaseCIF3AD.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseCIF3AD_Evaluate,None,itkFunctionBaseCIF3AD)
itkFunctionBaseCIF3AD.GetPointer = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseCIF3AD_GetPointer,None,itkFunctionBaseCIF3AD)
itkFunctionBaseCIF3AD_swigregister = _itkFunctionBasePython.itkFunctionBaseCIF3AD_swigregister
itkFunctionBaseCIF3AD_swigregister(itkFunctionBaseCIF3AD)

def itkFunctionBaseCIF3AD_cast(*args):
  """itkFunctionBaseCIF3AD_cast(itkLightObject obj) -> itkFunctionBaseCIF3AD"""
  return _itkFunctionBasePython.itkFunctionBaseCIF3AD_cast(*args)

class itkFunctionBaseDD(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBaseDD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Evaluate(self, *args):
        """Evaluate(self, double input) -> double"""
        return _itkFunctionBasePython.itkFunctionBaseDD_Evaluate(self, *args)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBaseDD
    def cast(*args):
        """cast(itkLightObject obj) -> itkFunctionBaseDD"""
        return _itkFunctionBasePython.itkFunctionBaseDD_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFunctionBaseDD"""
        return _itkFunctionBasePython.itkFunctionBaseDD_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFunctionBaseDD
        
        Create a new object of the class itkFunctionBaseDD and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFunctionBaseDD.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFunctionBaseDD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBaseDD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBaseDD.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseDD_Evaluate,None,itkFunctionBaseDD)
itkFunctionBaseDD.GetPointer = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseDD_GetPointer,None,itkFunctionBaseDD)
itkFunctionBaseDD_swigregister = _itkFunctionBasePython.itkFunctionBaseDD_swigregister
itkFunctionBaseDD_swigregister(itkFunctionBaseDD)

def itkFunctionBaseDD_cast(*args):
  """itkFunctionBaseDD_cast(itkLightObject obj) -> itkFunctionBaseDD"""
  return _itkFunctionBasePython.itkFunctionBaseDD_cast(*args)

class itkFunctionBaseIF2D(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBaseIF2D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Evaluate(self, *args):
        """Evaluate(self, itkImageF2 input) -> double"""
        return _itkFunctionBasePython.itkFunctionBaseIF2D_Evaluate(self, *args)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBaseIF2D
    def cast(*args):
        """cast(itkLightObject obj) -> itkFunctionBaseIF2D"""
        return _itkFunctionBasePython.itkFunctionBaseIF2D_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFunctionBaseIF2D"""
        return _itkFunctionBasePython.itkFunctionBaseIF2D_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFunctionBaseIF2D
        
        Create a new object of the class itkFunctionBaseIF2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFunctionBaseIF2D.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFunctionBaseIF2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBaseIF2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBaseIF2D.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseIF2D_Evaluate,None,itkFunctionBaseIF2D)
itkFunctionBaseIF2D.GetPointer = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseIF2D_GetPointer,None,itkFunctionBaseIF2D)
itkFunctionBaseIF2D_swigregister = _itkFunctionBasePython.itkFunctionBaseIF2D_swigregister
itkFunctionBaseIF2D_swigregister(itkFunctionBaseIF2D)

def itkFunctionBaseIF2D_cast(*args):
  """itkFunctionBaseIF2D_cast(itkLightObject obj) -> itkFunctionBaseIF2D"""
  return _itkFunctionBasePython.itkFunctionBaseIF2D_cast(*args)

class itkFunctionBaseIF3D(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBaseIF3D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Evaluate(self, *args):
        """Evaluate(self, itkImageF3 input) -> double"""
        return _itkFunctionBasePython.itkFunctionBaseIF3D_Evaluate(self, *args)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBaseIF3D
    def cast(*args):
        """cast(itkLightObject obj) -> itkFunctionBaseIF3D"""
        return _itkFunctionBasePython.itkFunctionBaseIF3D_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFunctionBaseIF3D"""
        return _itkFunctionBasePython.itkFunctionBaseIF3D_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFunctionBaseIF3D
        
        Create a new object of the class itkFunctionBaseIF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFunctionBaseIF3D.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFunctionBaseIF3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBaseIF3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBaseIF3D.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseIF3D_Evaluate,None,itkFunctionBaseIF3D)
itkFunctionBaseIF3D.GetPointer = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseIF3D_GetPointer,None,itkFunctionBaseIF3D)
itkFunctionBaseIF3D_swigregister = _itkFunctionBasePython.itkFunctionBaseIF3D_swigregister
itkFunctionBaseIF3D_swigregister(itkFunctionBaseIF3D)

def itkFunctionBaseIF3D_cast(*args):
  """itkFunctionBaseIF3D_cast(itkLightObject obj) -> itkFunctionBaseIF3D"""
  return _itkFunctionBasePython.itkFunctionBaseIF3D_cast(*args)

class itkFunctionBaseIUS2D(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBaseIUS2D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Evaluate(self, *args):
        """Evaluate(self, itkImageUS2 input) -> double"""
        return _itkFunctionBasePython.itkFunctionBaseIUS2D_Evaluate(self, *args)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBaseIUS2D
    def cast(*args):
        """cast(itkLightObject obj) -> itkFunctionBaseIUS2D"""
        return _itkFunctionBasePython.itkFunctionBaseIUS2D_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFunctionBaseIUS2D"""
        return _itkFunctionBasePython.itkFunctionBaseIUS2D_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFunctionBaseIUS2D
        
        Create a new object of the class itkFunctionBaseIUS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFunctionBaseIUS2D.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFunctionBaseIUS2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBaseIUS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBaseIUS2D.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseIUS2D_Evaluate,None,itkFunctionBaseIUS2D)
itkFunctionBaseIUS2D.GetPointer = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseIUS2D_GetPointer,None,itkFunctionBaseIUS2D)
itkFunctionBaseIUS2D_swigregister = _itkFunctionBasePython.itkFunctionBaseIUS2D_swigregister
itkFunctionBaseIUS2D_swigregister(itkFunctionBaseIUS2D)

def itkFunctionBaseIUS2D_cast(*args):
  """itkFunctionBaseIUS2D_cast(itkLightObject obj) -> itkFunctionBaseIUS2D"""
  return _itkFunctionBasePython.itkFunctionBaseIUS2D_cast(*args)

class itkFunctionBaseIUS3D(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBaseIUS3D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Evaluate(self, *args):
        """Evaluate(self, itkImageUS3 input) -> double"""
        return _itkFunctionBasePython.itkFunctionBaseIUS3D_Evaluate(self, *args)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBaseIUS3D
    def cast(*args):
        """cast(itkLightObject obj) -> itkFunctionBaseIUS3D"""
        return _itkFunctionBasePython.itkFunctionBaseIUS3D_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFunctionBaseIUS3D"""
        return _itkFunctionBasePython.itkFunctionBaseIUS3D_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFunctionBaseIUS3D
        
        Create a new object of the class itkFunctionBaseIUS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFunctionBaseIUS3D.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFunctionBaseIUS3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBaseIUS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBaseIUS3D.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseIUS3D_Evaluate,None,itkFunctionBaseIUS3D)
itkFunctionBaseIUS3D.GetPointer = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseIUS3D_GetPointer,None,itkFunctionBaseIUS3D)
itkFunctionBaseIUS3D_swigregister = _itkFunctionBasePython.itkFunctionBaseIUS3D_swigregister
itkFunctionBaseIUS3D_swigregister(itkFunctionBaseIUS3D)

def itkFunctionBaseIUS3D_cast(*args):
  """itkFunctionBaseIUS3D_cast(itkLightObject obj) -> itkFunctionBaseIUS3D"""
  return _itkFunctionBasePython.itkFunctionBaseIUS3D_cast(*args)

class itkFunctionBasePD2D(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePD2D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Evaluate(self, *args):
        """Evaluate(self, itkPointD2 input) -> double"""
        return _itkFunctionBasePython.itkFunctionBasePD2D_Evaluate(self, *args)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePD2D
    def cast(*args):
        """cast(itkLightObject obj) -> itkFunctionBasePD2D"""
        return _itkFunctionBasePython.itkFunctionBasePD2D_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFunctionBasePD2D"""
        return _itkFunctionBasePython.itkFunctionBasePD2D_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePD2D
        
        Create a new object of the class itkFunctionBasePD2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFunctionBasePD2D.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFunctionBasePD2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePD2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePD2D.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePD2D_Evaluate,None,itkFunctionBasePD2D)
itkFunctionBasePD2D.GetPointer = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePD2D_GetPointer,None,itkFunctionBasePD2D)
itkFunctionBasePD2D_swigregister = _itkFunctionBasePython.itkFunctionBasePD2D_swigregister
itkFunctionBasePD2D_swigregister(itkFunctionBasePD2D)

def itkFunctionBasePD2D_cast(*args):
  """itkFunctionBasePD2D_cast(itkLightObject obj) -> itkFunctionBasePD2D"""
  return _itkFunctionBasePython.itkFunctionBasePD2D_cast(*args)

class itkFunctionBasePD2VD2(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePD2VD2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Evaluate(self, *args):
        """Evaluate(self, itkPointD2 input) -> itkVectorD2"""
        return _itkFunctionBasePython.itkFunctionBasePD2VD2_Evaluate(self, *args)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePD2VD2
    def cast(*args):
        """cast(itkLightObject obj) -> itkFunctionBasePD2VD2"""
        return _itkFunctionBasePython.itkFunctionBasePD2VD2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFunctionBasePD2VD2"""
        return _itkFunctionBasePython.itkFunctionBasePD2VD2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePD2VD2
        
        Create a new object of the class itkFunctionBasePD2VD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFunctionBasePD2VD2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFunctionBasePD2VD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePD2VD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePD2VD2.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePD2VD2_Evaluate,None,itkFunctionBasePD2VD2)
itkFunctionBasePD2VD2.GetPointer = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePD2VD2_GetPointer,None,itkFunctionBasePD2VD2)
itkFunctionBasePD2VD2_swigregister = _itkFunctionBasePython.itkFunctionBasePD2VD2_swigregister
itkFunctionBasePD2VD2_swigregister(itkFunctionBasePD2VD2)

def itkFunctionBasePD2VD2_cast(*args):
  """itkFunctionBasePD2VD2_cast(itkLightObject obj) -> itkFunctionBasePD2VD2"""
  return _itkFunctionBasePython.itkFunctionBasePD2VD2_cast(*args)

class itkFunctionBasePD3D(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePD3D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Evaluate(self, *args):
        """Evaluate(self, itkPointD3 input) -> double"""
        return _itkFunctionBasePython.itkFunctionBasePD3D_Evaluate(self, *args)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePD3D
    def cast(*args):
        """cast(itkLightObject obj) -> itkFunctionBasePD3D"""
        return _itkFunctionBasePython.itkFunctionBasePD3D_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFunctionBasePD3D"""
        return _itkFunctionBasePython.itkFunctionBasePD3D_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePD3D
        
        Create a new object of the class itkFunctionBasePD3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFunctionBasePD3D.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFunctionBasePD3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePD3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePD3D.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePD3D_Evaluate,None,itkFunctionBasePD3D)
itkFunctionBasePD3D.GetPointer = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePD3D_GetPointer,None,itkFunctionBasePD3D)
itkFunctionBasePD3D_swigregister = _itkFunctionBasePython.itkFunctionBasePD3D_swigregister
itkFunctionBasePD3D_swigregister(itkFunctionBasePD3D)

def itkFunctionBasePD3D_cast(*args):
  """itkFunctionBasePD3D_cast(itkLightObject obj) -> itkFunctionBasePD3D"""
  return _itkFunctionBasePython.itkFunctionBasePD3D_cast(*args)

class itkFunctionBasePD3VD3(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePD3VD3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Evaluate(self, *args):
        """Evaluate(self, itkPointD3 input) -> itkVectorD3"""
        return _itkFunctionBasePython.itkFunctionBasePD3VD3_Evaluate(self, *args)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePD3VD3
    def cast(*args):
        """cast(itkLightObject obj) -> itkFunctionBasePD3VD3"""
        return _itkFunctionBasePython.itkFunctionBasePD3VD3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFunctionBasePD3VD3"""
        return _itkFunctionBasePython.itkFunctionBasePD3VD3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePD3VD3
        
        Create a new object of the class itkFunctionBasePD3VD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFunctionBasePD3VD3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFunctionBasePD3VD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePD3VD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePD3VD3.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePD3VD3_Evaluate,None,itkFunctionBasePD3VD3)
itkFunctionBasePD3VD3.GetPointer = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePD3VD3_GetPointer,None,itkFunctionBasePD3VD3)
itkFunctionBasePD3VD3_swigregister = _itkFunctionBasePython.itkFunctionBasePD3VD3_swigregister
itkFunctionBasePD3VD3_swigregister(itkFunctionBasePD3VD3)

def itkFunctionBasePD3VD3_cast(*args):
  """itkFunctionBasePD3VD3_cast(itkLightObject obj) -> itkFunctionBasePD3VD3"""
  return _itkFunctionBasePython.itkFunctionBasePD3VD3_cast(*args)

class itkFunctionBasePF2D(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePF2D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Evaluate(self, *args):
        """Evaluate(self, itkPointF2 input) -> double"""
        return _itkFunctionBasePython.itkFunctionBasePF2D_Evaluate(self, *args)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePF2D
    def cast(*args):
        """cast(itkLightObject obj) -> itkFunctionBasePF2D"""
        return _itkFunctionBasePython.itkFunctionBasePF2D_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFunctionBasePF2D"""
        return _itkFunctionBasePython.itkFunctionBasePF2D_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePF2D
        
        Create a new object of the class itkFunctionBasePF2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFunctionBasePF2D.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFunctionBasePF2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePF2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePF2D.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePF2D_Evaluate,None,itkFunctionBasePF2D)
itkFunctionBasePF2D.GetPointer = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePF2D_GetPointer,None,itkFunctionBasePF2D)
itkFunctionBasePF2D_swigregister = _itkFunctionBasePython.itkFunctionBasePF2D_swigregister
itkFunctionBasePF2D_swigregister(itkFunctionBasePF2D)

def itkFunctionBasePF2D_cast(*args):
  """itkFunctionBasePF2D_cast(itkLightObject obj) -> itkFunctionBasePF2D"""
  return _itkFunctionBasePython.itkFunctionBasePF2D_cast(*args)

class itkFunctionBasePF3D(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBasePF3D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Evaluate(self, *args):
        """Evaluate(self, itkPointF3 input) -> double"""
        return _itkFunctionBasePython.itkFunctionBasePF3D_Evaluate(self, *args)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBasePF3D
    def cast(*args):
        """cast(itkLightObject obj) -> itkFunctionBasePF3D"""
        return _itkFunctionBasePython.itkFunctionBasePF3D_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFunctionBasePF3D"""
        return _itkFunctionBasePython.itkFunctionBasePF3D_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFunctionBasePF3D
        
        Create a new object of the class itkFunctionBasePF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFunctionBasePF3D.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFunctionBasePF3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBasePF3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBasePF3D.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePF3D_Evaluate,None,itkFunctionBasePF3D)
itkFunctionBasePF3D.GetPointer = new_instancemethod(_itkFunctionBasePython.itkFunctionBasePF3D_GetPointer,None,itkFunctionBasePF3D)
itkFunctionBasePF3D_swigregister = _itkFunctionBasePython.itkFunctionBasePF3D_swigregister
itkFunctionBasePF3D_swigregister(itkFunctionBasePF3D)

def itkFunctionBasePF3D_cast(*args):
  """itkFunctionBasePF3D_cast(itkLightObject obj) -> itkFunctionBasePF3D"""
  return _itkFunctionBasePython.itkFunctionBasePF3D_cast(*args)

class itkFunctionBaseVF2D(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBaseVF2D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Evaluate(self, *args):
        """Evaluate(self, itkVectorF2 input) -> double"""
        return _itkFunctionBasePython.itkFunctionBaseVF2D_Evaluate(self, *args)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBaseVF2D
    def cast(*args):
        """cast(itkLightObject obj) -> itkFunctionBaseVF2D"""
        return _itkFunctionBasePython.itkFunctionBaseVF2D_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFunctionBaseVF2D"""
        return _itkFunctionBasePython.itkFunctionBaseVF2D_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFunctionBaseVF2D
        
        Create a new object of the class itkFunctionBaseVF2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFunctionBaseVF2D.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFunctionBaseVF2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBaseVF2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBaseVF2D.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseVF2D_Evaluate,None,itkFunctionBaseVF2D)
itkFunctionBaseVF2D.GetPointer = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseVF2D_GetPointer,None,itkFunctionBaseVF2D)
itkFunctionBaseVF2D_swigregister = _itkFunctionBasePython.itkFunctionBaseVF2D_swigregister
itkFunctionBaseVF2D_swigregister(itkFunctionBaseVF2D)

def itkFunctionBaseVF2D_cast(*args):
  """itkFunctionBaseVF2D_cast(itkLightObject obj) -> itkFunctionBaseVF2D"""
  return _itkFunctionBasePython.itkFunctionBaseVF2D_cast(*args)

class itkFunctionBaseVF3D(ITKCommonBasePython.itkObject):
    """Proxy of C++ itkFunctionBaseVF3D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Evaluate(self, *args):
        """Evaluate(self, itkVectorF3 input) -> double"""
        return _itkFunctionBasePython.itkFunctionBaseVF3D_Evaluate(self, *args)

    __swig_destroy__ = _itkFunctionBasePython.delete_itkFunctionBaseVF3D
    def cast(*args):
        """cast(itkLightObject obj) -> itkFunctionBaseVF3D"""
        return _itkFunctionBasePython.itkFunctionBaseVF3D_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkFunctionBaseVF3D"""
        return _itkFunctionBasePython.itkFunctionBaseVF3D_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkFunctionBaseVF3D
        
        Create a new object of the class itkFunctionBaseVF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkFunctionBaseVF3D.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkFunctionBaseVF3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkFunctionBaseVF3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkFunctionBaseVF3D.Evaluate = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseVF3D_Evaluate,None,itkFunctionBaseVF3D)
itkFunctionBaseVF3D.GetPointer = new_instancemethod(_itkFunctionBasePython.itkFunctionBaseVF3D_GetPointer,None,itkFunctionBaseVF3D)
itkFunctionBaseVF3D_swigregister = _itkFunctionBasePython.itkFunctionBaseVF3D_swigregister
itkFunctionBaseVF3D_swigregister(itkFunctionBaseVF3D)

def itkFunctionBaseVF3D_cast(*args):
  """itkFunctionBaseVF3D_cast(itkLightObject obj) -> itkFunctionBaseVF3D"""
  return _itkFunctionBasePython.itkFunctionBaseVF3D_cast(*args)



