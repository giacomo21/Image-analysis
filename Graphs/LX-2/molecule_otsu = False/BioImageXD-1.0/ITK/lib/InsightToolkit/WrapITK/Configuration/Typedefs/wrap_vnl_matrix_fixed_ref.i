// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module vnl_matrix_fixed_refChicken
#endif
#ifdef SWIGCSHARP
%module vnl_matrix_fixed_refCsharp
#endif
#ifdef SWIGGUILE
%module vnl_matrix_fixed_refGuile
#endif
#ifdef SWIGJAVA
%module vnl_matrix_fixed_refJava
#endif
#ifdef SWIGLUA
%module vnl_matrix_fixed_refLua
#endif
#ifdef SWIGMODULA3
%module vnl_matrix_fixed_refModula3
#endif
#ifdef SWIGMZSCHEME
%module vnl_matrix_fixed_refMzscheme
#endif
#ifdef SWIGOCAML
%module vnl_matrix_fixed_refOcaml
#endif
#ifdef SWIGPERL
%module vnl_matrix_fixed_refPerl
#endif
#ifdef SWIGPERL5
%module vnl_matrix_fixed_refPerl5
#endif
#ifdef SWIGPHP
%module vnl_matrix_fixed_refPhp
#endif
#ifdef SWIGPHP4
%module vnl_matrix_fixed_refPhp4
#endif
#ifdef SWIGPHP5
%module vnl_matrix_fixed_refPhp5
#endif
#ifdef SWIGPIKE
%module vnl_matrix_fixed_refPike
#endif
#ifdef SWIGPYTHON
%module vnl_matrix_fixed_refPython
#endif
#ifdef SWIGR
%module vnl_matrix_fixed_refR
#endif
#ifdef SWIGRUBY
%module vnl_matrix_fixed_refRuby
#endif
#ifdef SWIGSEXP
%module vnl_matrix_fixed_refSexp
#endif
#ifdef SWIGTCL
%module vnl_matrix_fixed_refTcl
#endif
#ifdef SWIGXML
%module vnl_matrix_fixed_refXml
#endif

%{
#include "VXLNumerics.includes"
%}


%{
%}




%import wrap_vnl_matrix_fixed.i
%import wrap_vnl_vector.i
%import wrap_vnl_matrix.i


%include itk.i
%include wrap_vnl_matrix_fixed_ref_ext.i


 class vnl_matrix_fixed_ref_constF_3_3 {
   public:
     ~vnl_matrix_fixed_ref_constF_3_3();
     vnl_matrix_fixed_ref_constF_3_3(vnl_matrix_fixedF_3_3 const & rhs);
     vnl_matrix_fixed_ref_constF_3_3(float const * dataptr);
     vnl_matrix_fixed_ref_constF_3_3(vnl_matrix_fixed_ref_constF_3_3 const & rhs);
     vnl_vector_fixed< float, 3u > get_row(unsigned int row_index) const;
     vnl_vector_fixed< float, 3u > get_column(unsigned int column_index) const;
     float const * data_block() const;
     float const * begin() const;
     float const * end() const;
     float const & operator()(unsigned int r, unsigned int c) const;
     float const * operator[](unsigned int r) const;
     unsigned int rows() const;
     unsigned int columns() const;
     unsigned int cols() const;
     unsigned int size() const;
     void print(std::basic_ostream< char, std::char_traits< char > > & os) const;
     void copy_out(float * arg0) const;
     vnl_matrix_fixedF_3_3 transpose() const;
     vnl_matrix_fixedF_3_3 conjugate_transpose() const;
     vnl_matrixF extract(unsigned int rows, unsigned int cols, unsigned int top = 0, unsigned int left = 0) const;
     vnl_matrixF get_n_rows(unsigned int rowstart, unsigned int n) const;
     vnl_matrixF get_n_columns(unsigned int colstart, unsigned int n) const;
     float array_one_norm() const;
     float array_two_norm() const;
     float array_inf_norm() const;
     float absolute_value_sum() const;
     float absolute_value_max() const;
     float operator_one_norm() const;
     float operator_inf_norm() const;
     float frobenius_norm() const;
     float fro_norm() const;
     float rms() const;
     float min_value() const;
     float max_value() const;
     float mean() const;
     bool empty() const;
     bool is_identity() const;
     bool is_identity(double tol) const;
     bool is_zero() const;
     bool is_zero(double tol) const;
     bool is_finite() const;
     bool has_nans() const;
     void assert_size(unsigned int rows, unsigned int cols) const;
     void assert_finite() const;
     static void add(float const * a, float const * b, float * r);
     static void add(float const * a, float b, float * r);
     static void sub(float const * a, float const * b, float * r);
     static void sub(float const * a, float b, float * r);
     static void sub(float a, float const * b, float * r);
     static void mul(float const * a, float const * b, float * r);
     static void mul(float const * a, float b, float * r);
     static void div(float const * a, float const * b, float * r);
     static void div(float const * a, float b, float * r);
     static bool equal(float const * a, float const * b);
   private:
     vnl_matrix_fixed_ref_constF_3_3 const & operator=(vnl_matrix_fixed_ref_constF_3_3 const & arg0) const;
     void assert_finite_internal() const;
     void assert_size_internal(unsigned int arg0, unsigned int arg1) const;
   protected:
 };


 class vnl_matrix_fixed_refF_3_3 : public vnl_matrix_fixed_ref_constF_3_3 {
   public:
     ~vnl_matrix_fixed_refF_3_3();
     vnl_matrix_fixed_refF_3_3(vnl_matrix_fixed_refF_3_3 const & arg0);
     float * data_block() const;
     vnl_matrix_fixed_refF_3_3(vnl_matrix_fixedF_3_3 & rhs);
     vnl_matrix_fixed_refF_3_3(float * dataptr);
     vnl_matrix_fixed_refF_3_3 const & operator=(vnl_matrix_fixed_ref_constF_3_3 const & rhs) const;
     void put(unsigned int r, unsigned int c, float const & v);
     float get(unsigned int r, unsigned int c) const;
     float * operator[](unsigned int r) const;
     float & operator()(unsigned int r, unsigned int c) const;
     void fill(float arg0) const;
     void fill_diagonal(float arg0) const;
     void copy_in(float const * arg0) const;
     void set(float const * d) const;
     void inplace_transpose() const;
     vnl_matrix_fixed_refF_3_3 const & operator+=(float s) const;
     vnl_matrix_fixed_refF_3_3 const & operator-=(float s) const;
     vnl_matrix_fixed_refF_3_3 const & operator*=(float s) const;
     vnl_matrix_fixed_refF_3_3 const & operator/=(float s) const;
     vnl_matrix_fixed_refF_3_3 const & operator+=(vnl_matrix_fixed_ref_constF_3_3 const & m) const;
     vnl_matrix_fixed_refF_3_3 const & operator+=(vnl_matrixF const & m) const;
     vnl_matrix_fixed_refF_3_3 const & operator-=(vnl_matrix_fixed_ref_constF_3_3 const & m) const;
     vnl_matrix_fixed_refF_3_3 const & operator-=(vnl_matrixF const & m) const;
     vnl_matrix_fixedF_3_3 operator-() const;
     vnl_matrix_fixed_refF_3_3 const & operator*=(vnl_matrix_fixed_ref_constF_3_3 const & s) const;
     vnl_matrix_fixed_refF_3_3 const & update(vnl_matrixF const & arg0, unsigned int top = 0, unsigned int left = 0) const;
     void set_column(unsigned int i, float const * v) const;
     void set_column(unsigned int i, float value) const;
     void set_column(unsigned int j, vnl_vectorF const & v) const;
     void set_columns(unsigned int starting_column, vnl_matrixF const & M) const;
     void set_row(unsigned int i, float const * v) const;
     void set_row(unsigned int i, float value) const;
     void set_row(unsigned int i, vnl_vectorF const & arg1) const;
     void set_identity() const;
     void flipud() const;
     void fliplr() const;
     void normalize_rows() const;
     void normalize_columns() const;
     void scale_row(unsigned int row, float value) const;
     void scale_column(unsigned int col, float value) const;
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s) const;
     vnl_matrixF const as_matrix() const;
     float * begin() const;
     float * end() const;
     bool operator_eq(vnl_matrix_fixed_ref_constF_3_3 const & rhs) const;
     bool operator==(vnl_matrix_fixed_ref_constF_3_3 const & that) const;
     bool operator!=(vnl_matrix_fixed_ref_constF_3_3 const & that) const;
   private:
   protected:
 };


