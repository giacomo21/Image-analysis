// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkMagnitudeAndPhaseToComplexImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkMagnitudeAndPhaseToComplexImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkMagnitudeAndPhaseToComplexImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkMagnitudeAndPhaseToComplexImageFilterJava
#endif
#ifdef SWIGLUA
%module itkMagnitudeAndPhaseToComplexImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkMagnitudeAndPhaseToComplexImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkMagnitudeAndPhaseToComplexImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkMagnitudeAndPhaseToComplexImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkMagnitudeAndPhaseToComplexImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkMagnitudeAndPhaseToComplexImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkMagnitudeAndPhaseToComplexImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkMagnitudeAndPhaseToComplexImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkMagnitudeAndPhaseToComplexImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkMagnitudeAndPhaseToComplexImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkMagnitudeAndPhaseToComplexImageFilterPython
#endif
#ifdef SWIGR
%module itkMagnitudeAndPhaseToComplexImageFilterR
#endif
#ifdef SWIGRUBY
%module itkMagnitudeAndPhaseToComplexImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkMagnitudeAndPhaseToComplexImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkMagnitudeAndPhaseToComplexImageFilterTcl
#endif
#ifdef SWIGXML
%module itkMagnitudeAndPhaseToComplexImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "FFT.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_ITKRegions.i
%import wrap_itkImage.i
%import wrap_itkInPlaceImageFilterB.i


%include itk.i
%include wrap_itkMagnitudeAndPhaseToComplexImageFilter_ext.i


 class itkMagnitudeAndPhaseToComplexImageFilterDDF2_Pointer {
   public:
     itkMagnitudeAndPhaseToComplexImageFilterDDF2_Pointer();
     itkMagnitudeAndPhaseToComplexImageFilterDDF2_Pointer(itkMagnitudeAndPhaseToComplexImageFilterDDF2_Pointer const & p);
     itkMagnitudeAndPhaseToComplexImageFilterDDF2_Pointer(itkMagnitudeAndPhaseToComplexImageFilterDDF2 * p);
     ~itkMagnitudeAndPhaseToComplexImageFilterDDF2_Pointer();
     itkMagnitudeAndPhaseToComplexImageFilterDDF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMagnitudeAndPhaseToComplexImageFilterDDF2 * GetPointer() const;
     bool operator<(itkMagnitudeAndPhaseToComplexImageFilterDDF2_Pointer const & r) const;
     bool operator>(itkMagnitudeAndPhaseToComplexImageFilterDDF2_Pointer const & r) const;
     bool operator<=(itkMagnitudeAndPhaseToComplexImageFilterDDF2_Pointer const & r) const;
     bool operator>=(itkMagnitudeAndPhaseToComplexImageFilterDDF2_Pointer const & r) const;
     itkMagnitudeAndPhaseToComplexImageFilterDDF2_Pointer & operator=(itkMagnitudeAndPhaseToComplexImageFilterDDF2_Pointer const & r);
     itkMagnitudeAndPhaseToComplexImageFilterDDF2_Pointer & operator=(itkMagnitudeAndPhaseToComplexImageFilterDDF2 * r);
     itkMagnitudeAndPhaseToComplexImageFilterDDF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass : public itkInPlaceImageFilterID2ICF2 {
   public:
     enum  {  InputImage1Dimension = 2 };
     enum  {  InputImage2Dimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     static itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetInput1(itkImageD2 const * image1);
     void SetInput2(itkImageD2 const * image2);
     itk::Functor::MagnitudeAndPhaseToComplex< double, double, float > & GetFunctor();
     itk::Functor::MagnitudeAndPhaseToComplex< double, double, float > const & GetFunctor() const;
     void SetFunctor(itk::Functor::MagnitudeAndPhaseToComplex< double, double, float > const & functor);
   private:
     itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass(itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass const & arg0);
     void operator=(itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass const & arg0);
   protected:
     itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass();
     ~itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass_Pointer {
   public:
     itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass_Pointer();
     itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass_Pointer(itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass_Pointer const & p);
     itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass_Pointer(itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass * p);
     ~itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass_Pointer();
     itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass * GetPointer() const;
     bool operator<(itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass_Pointer const & r) const;
     bool operator>(itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass_Pointer const & r) const;
     bool operator<=(itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass_Pointer const & r) const;
     bool operator>=(itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass_Pointer const & r) const;
     itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass_Pointer & operator=(itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass_Pointer const & r);
     itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass_Pointer & operator=(itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass * r);
     itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMagnitudeAndPhaseToComplexImageFilterDDF3_Pointer {
   public:
     itkMagnitudeAndPhaseToComplexImageFilterDDF3_Pointer();
     itkMagnitudeAndPhaseToComplexImageFilterDDF3_Pointer(itkMagnitudeAndPhaseToComplexImageFilterDDF3_Pointer const & p);
     itkMagnitudeAndPhaseToComplexImageFilterDDF3_Pointer(itkMagnitudeAndPhaseToComplexImageFilterDDF3 * p);
     ~itkMagnitudeAndPhaseToComplexImageFilterDDF3_Pointer();
     itkMagnitudeAndPhaseToComplexImageFilterDDF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMagnitudeAndPhaseToComplexImageFilterDDF3 * GetPointer() const;
     bool operator<(itkMagnitudeAndPhaseToComplexImageFilterDDF3_Pointer const & r) const;
     bool operator>(itkMagnitudeAndPhaseToComplexImageFilterDDF3_Pointer const & r) const;
     bool operator<=(itkMagnitudeAndPhaseToComplexImageFilterDDF3_Pointer const & r) const;
     bool operator>=(itkMagnitudeAndPhaseToComplexImageFilterDDF3_Pointer const & r) const;
     itkMagnitudeAndPhaseToComplexImageFilterDDF3_Pointer & operator=(itkMagnitudeAndPhaseToComplexImageFilterDDF3_Pointer const & r);
     itkMagnitudeAndPhaseToComplexImageFilterDDF3_Pointer & operator=(itkMagnitudeAndPhaseToComplexImageFilterDDF3 * r);
     itkMagnitudeAndPhaseToComplexImageFilterDDF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass : public itkInPlaceImageFilterID3ICF3 {
   public:
     enum  {  InputImage1Dimension = 3 };
     enum  {  InputImage2Dimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     static itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetInput1(itkImageD3 const * image1);
     void SetInput2(itkImageD3 const * image2);
     itk::Functor::MagnitudeAndPhaseToComplex< double, double, float > & GetFunctor();
     itk::Functor::MagnitudeAndPhaseToComplex< double, double, float > const & GetFunctor() const;
     void SetFunctor(itk::Functor::MagnitudeAndPhaseToComplex< double, double, float > const & functor);
   private:
     itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass(itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass const & arg0);
     void operator=(itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass const & arg0);
   protected:
     itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass();
     ~itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass_Pointer {
   public:
     itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass_Pointer();
     itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass_Pointer(itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass_Pointer const & p);
     itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass_Pointer(itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass * p);
     ~itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass_Pointer();
     itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass * GetPointer() const;
     bool operator<(itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass_Pointer const & r) const;
     bool operator>(itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass_Pointer const & r) const;
     bool operator<=(itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass_Pointer const & r) const;
     bool operator>=(itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass_Pointer const & r) const;
     itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass_Pointer & operator=(itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass_Pointer const & r);
     itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass_Pointer & operator=(itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass * r);
     itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMagnitudeAndPhaseToComplexImageFilterFFF2_Pointer {
   public:
     itkMagnitudeAndPhaseToComplexImageFilterFFF2_Pointer();
     itkMagnitudeAndPhaseToComplexImageFilterFFF2_Pointer(itkMagnitudeAndPhaseToComplexImageFilterFFF2_Pointer const & p);
     itkMagnitudeAndPhaseToComplexImageFilterFFF2_Pointer(itkMagnitudeAndPhaseToComplexImageFilterFFF2 * p);
     ~itkMagnitudeAndPhaseToComplexImageFilterFFF2_Pointer();
     itkMagnitudeAndPhaseToComplexImageFilterFFF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMagnitudeAndPhaseToComplexImageFilterFFF2 * GetPointer() const;
     bool operator<(itkMagnitudeAndPhaseToComplexImageFilterFFF2_Pointer const & r) const;
     bool operator>(itkMagnitudeAndPhaseToComplexImageFilterFFF2_Pointer const & r) const;
     bool operator<=(itkMagnitudeAndPhaseToComplexImageFilterFFF2_Pointer const & r) const;
     bool operator>=(itkMagnitudeAndPhaseToComplexImageFilterFFF2_Pointer const & r) const;
     itkMagnitudeAndPhaseToComplexImageFilterFFF2_Pointer & operator=(itkMagnitudeAndPhaseToComplexImageFilterFFF2_Pointer const & r);
     itkMagnitudeAndPhaseToComplexImageFilterFFF2_Pointer & operator=(itkMagnitudeAndPhaseToComplexImageFilterFFF2 * r);
     itkMagnitudeAndPhaseToComplexImageFilterFFF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass : public itkInPlaceImageFilterIF2ICF2 {
   public:
     enum  {  InputImage1Dimension = 2 };
     enum  {  InputImage2Dimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     static itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetInput1(itkImageF2 const * image1);
     void SetInput2(itkImageF2 const * image2);
     itk::Functor::MagnitudeAndPhaseToComplex< float, float, float > & GetFunctor();
     itk::Functor::MagnitudeAndPhaseToComplex< float, float, float > const & GetFunctor() const;
     void SetFunctor(itk::Functor::MagnitudeAndPhaseToComplex< float, float, float > const & functor);
   private:
     itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass(itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass const & arg0);
     void operator=(itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass const & arg0);
   protected:
     itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass();
     ~itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass_Pointer {
   public:
     itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass_Pointer();
     itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass_Pointer(itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass_Pointer const & p);
     itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass_Pointer(itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass * p);
     ~itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass_Pointer();
     itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass * GetPointer() const;
     bool operator<(itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass_Pointer const & r) const;
     bool operator>(itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass_Pointer const & r) const;
     bool operator<=(itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass_Pointer const & r) const;
     bool operator>=(itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass_Pointer const & r) const;
     itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass_Pointer & operator=(itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass_Pointer const & r);
     itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass_Pointer & operator=(itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass * r);
     itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMagnitudeAndPhaseToComplexImageFilterFFF3_Pointer {
   public:
     itkMagnitudeAndPhaseToComplexImageFilterFFF3_Pointer();
     itkMagnitudeAndPhaseToComplexImageFilterFFF3_Pointer(itkMagnitudeAndPhaseToComplexImageFilterFFF3_Pointer const & p);
     itkMagnitudeAndPhaseToComplexImageFilterFFF3_Pointer(itkMagnitudeAndPhaseToComplexImageFilterFFF3 * p);
     ~itkMagnitudeAndPhaseToComplexImageFilterFFF3_Pointer();
     itkMagnitudeAndPhaseToComplexImageFilterFFF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMagnitudeAndPhaseToComplexImageFilterFFF3 * GetPointer() const;
     bool operator<(itkMagnitudeAndPhaseToComplexImageFilterFFF3_Pointer const & r) const;
     bool operator>(itkMagnitudeAndPhaseToComplexImageFilterFFF3_Pointer const & r) const;
     bool operator<=(itkMagnitudeAndPhaseToComplexImageFilterFFF3_Pointer const & r) const;
     bool operator>=(itkMagnitudeAndPhaseToComplexImageFilterFFF3_Pointer const & r) const;
     itkMagnitudeAndPhaseToComplexImageFilterFFF3_Pointer & operator=(itkMagnitudeAndPhaseToComplexImageFilterFFF3_Pointer const & r);
     itkMagnitudeAndPhaseToComplexImageFilterFFF3_Pointer & operator=(itkMagnitudeAndPhaseToComplexImageFilterFFF3 * r);
     itkMagnitudeAndPhaseToComplexImageFilterFFF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass : public itkInPlaceImageFilterIF3ICF3 {
   public:
     enum  {  InputImage1Dimension = 3 };
     enum  {  InputImage2Dimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     static itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetInput1(itkImageF3 const * image1);
     void SetInput2(itkImageF3 const * image2);
     itk::Functor::MagnitudeAndPhaseToComplex< float, float, float > & GetFunctor();
     itk::Functor::MagnitudeAndPhaseToComplex< float, float, float > const & GetFunctor() const;
     void SetFunctor(itk::Functor::MagnitudeAndPhaseToComplex< float, float, float > const & functor);
   private:
     itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass(itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass const & arg0);
     void operator=(itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass const & arg0);
   protected:
     itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass();
     ~itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass_Pointer {
   public:
     itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass_Pointer();
     itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass_Pointer(itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass_Pointer const & p);
     itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass_Pointer(itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass * p);
     ~itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass_Pointer();
     itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass * GetPointer() const;
     bool operator<(itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass_Pointer const & r) const;
     bool operator>(itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass_Pointer const & r) const;
     bool operator<=(itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass_Pointer const & r) const;
     bool operator>=(itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass_Pointer const & r) const;
     itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass_Pointer & operator=(itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass_Pointer const & r);
     itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass_Pointer & operator=(itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass * r);
     itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMagnitudeAndPhaseToComplexImageFilterDDF2 : public itkMagnitudeAndPhaseToComplexImageFilterDDF2_Superclass {
   public:
     enum  {  Input1ConvertibleToDoubleCheck = 1 };
     enum  {  Input2ConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     static itkMagnitudeAndPhaseToComplexImageFilterDDF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkMagnitudeAndPhaseToComplexImageFilterDDF2(itkMagnitudeAndPhaseToComplexImageFilterDDF2 const & arg0);
     void operator=(itkMagnitudeAndPhaseToComplexImageFilterDDF2 const & arg0);
   protected:
     itkMagnitudeAndPhaseToComplexImageFilterDDF2();
     ~itkMagnitudeAndPhaseToComplexImageFilterDDF2();
 };


 class itkMagnitudeAndPhaseToComplexImageFilterDDF3 : public itkMagnitudeAndPhaseToComplexImageFilterDDF3_Superclass {
   public:
     enum  {  Input1ConvertibleToDoubleCheck = 1 };
     enum  {  Input2ConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     static itkMagnitudeAndPhaseToComplexImageFilterDDF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkMagnitudeAndPhaseToComplexImageFilterDDF3(itkMagnitudeAndPhaseToComplexImageFilterDDF3 const & arg0);
     void operator=(itkMagnitudeAndPhaseToComplexImageFilterDDF3 const & arg0);
   protected:
     itkMagnitudeAndPhaseToComplexImageFilterDDF3();
     ~itkMagnitudeAndPhaseToComplexImageFilterDDF3();
 };


 class itkMagnitudeAndPhaseToComplexImageFilterFFF2 : public itkMagnitudeAndPhaseToComplexImageFilterFFF2_Superclass {
   public:
     enum  {  Input1ConvertibleToDoubleCheck = 1 };
     enum  {  Input2ConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     static itkMagnitudeAndPhaseToComplexImageFilterFFF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkMagnitudeAndPhaseToComplexImageFilterFFF2(itkMagnitudeAndPhaseToComplexImageFilterFFF2 const & arg0);
     void operator=(itkMagnitudeAndPhaseToComplexImageFilterFFF2 const & arg0);
   protected:
     itkMagnitudeAndPhaseToComplexImageFilterFFF2();
     ~itkMagnitudeAndPhaseToComplexImageFilterFFF2();
 };


 class itkMagnitudeAndPhaseToComplexImageFilterFFF3 : public itkMagnitudeAndPhaseToComplexImageFilterFFF3_Superclass {
   public:
     enum  {  Input1ConvertibleToDoubleCheck = 1 };
     enum  {  Input2ConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     static itkMagnitudeAndPhaseToComplexImageFilterFFF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkMagnitudeAndPhaseToComplexImageFilterFFF3(itkMagnitudeAndPhaseToComplexImageFilterFFF3 const & arg0);
     void operator=(itkMagnitudeAndPhaseToComplexImageFilterFFF3 const & arg0);
   protected:
     itkMagnitudeAndPhaseToComplexImageFilterFFF3();
     ~itkMagnitudeAndPhaseToComplexImageFilterFFF3();
 };


