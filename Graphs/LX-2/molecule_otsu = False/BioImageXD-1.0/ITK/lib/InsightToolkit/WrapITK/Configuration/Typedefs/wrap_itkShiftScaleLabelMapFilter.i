// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkShiftScaleLabelMapFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkShiftScaleLabelMapFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkShiftScaleLabelMapFilterGuile
#endif
#ifdef SWIGJAVA
%module itkShiftScaleLabelMapFilterJava
#endif
#ifdef SWIGLUA
%module itkShiftScaleLabelMapFilterLua
#endif
#ifdef SWIGMODULA3
%module itkShiftScaleLabelMapFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkShiftScaleLabelMapFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkShiftScaleLabelMapFilterOcaml
#endif
#ifdef SWIGPERL
%module itkShiftScaleLabelMapFilterPerl
#endif
#ifdef SWIGPERL5
%module itkShiftScaleLabelMapFilterPerl5
#endif
#ifdef SWIGPHP
%module itkShiftScaleLabelMapFilterPhp
#endif
#ifdef SWIGPHP4
%module itkShiftScaleLabelMapFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkShiftScaleLabelMapFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkShiftScaleLabelMapFilterPike
#endif
#ifdef SWIGPYTHON
%module itkShiftScaleLabelMapFilterPython
#endif
#ifdef SWIGR
%module itkShiftScaleLabelMapFilterR
#endif
#ifdef SWIGRUBY
%module itkShiftScaleLabelMapFilterRuby
#endif
#ifdef SWIGSEXP
%module itkShiftScaleLabelMapFilterSexp
#endif
#ifdef SWIGTCL
%module itkShiftScaleLabelMapFilterTcl
#endif
#ifdef SWIGXML
%module itkShiftScaleLabelMapFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
#include "Numerics.includes"
#include "BinaryMorphology.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkInPlaceLabelMapFilter.i


%include itk.i
%include wrap_itkShiftScaleLabelMapFilter_ext.i


 class itkShiftScaleLabelMapFilterLM2 : public itkInPlaceLabelMapFilterLM2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkShiftScaleLabelMapFilterLM2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetShift(double const _arg);
     virtual double const & GetShift() const;
     virtual void SetScale(double const _arg);
     virtual double const & GetScale() const;
     virtual void SetChangeBackgroundValue(bool const _arg);
     virtual bool GetChangeBackgroundValue() const;
     virtual void ChangeBackgroundValueOn();
     virtual void ChangeBackgroundValueOff();
   private:
     itkShiftScaleLabelMapFilterLM2(itkShiftScaleLabelMapFilterLM2 const & arg0);
     void operator=(itkShiftScaleLabelMapFilterLM2 const & arg0);
   protected:
     itkShiftScaleLabelMapFilterLM2();
     ~itkShiftScaleLabelMapFilterLM2();
     virtual void GenerateData();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkShiftScaleLabelMapFilterLM2_Pointer {
   public:
     itkShiftScaleLabelMapFilterLM2_Pointer();
     itkShiftScaleLabelMapFilterLM2_Pointer(itkShiftScaleLabelMapFilterLM2_Pointer const & p);
     itkShiftScaleLabelMapFilterLM2_Pointer(itkShiftScaleLabelMapFilterLM2 * p);
     ~itkShiftScaleLabelMapFilterLM2_Pointer();
     itkShiftScaleLabelMapFilterLM2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkShiftScaleLabelMapFilterLM2 * GetPointer() const;
     bool operator<(itkShiftScaleLabelMapFilterLM2_Pointer const & r) const;
     bool operator>(itkShiftScaleLabelMapFilterLM2_Pointer const & r) const;
     bool operator<=(itkShiftScaleLabelMapFilterLM2_Pointer const & r) const;
     bool operator>=(itkShiftScaleLabelMapFilterLM2_Pointer const & r) const;
     itkShiftScaleLabelMapFilterLM2_Pointer & operator=(itkShiftScaleLabelMapFilterLM2_Pointer const & r);
     itkShiftScaleLabelMapFilterLM2_Pointer & operator=(itkShiftScaleLabelMapFilterLM2 * r);
     itkShiftScaleLabelMapFilterLM2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkShiftScaleLabelMapFilterLM3 : public itkInPlaceLabelMapFilterLM3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkShiftScaleLabelMapFilterLM3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetShift(double const _arg);
     virtual double const & GetShift() const;
     virtual void SetScale(double const _arg);
     virtual double const & GetScale() const;
     virtual void SetChangeBackgroundValue(bool const _arg);
     virtual bool GetChangeBackgroundValue() const;
     virtual void ChangeBackgroundValueOn();
     virtual void ChangeBackgroundValueOff();
   private:
     itkShiftScaleLabelMapFilterLM3(itkShiftScaleLabelMapFilterLM3 const & arg0);
     void operator=(itkShiftScaleLabelMapFilterLM3 const & arg0);
   protected:
     itkShiftScaleLabelMapFilterLM3();
     ~itkShiftScaleLabelMapFilterLM3();
     virtual void GenerateData();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkShiftScaleLabelMapFilterLM3_Pointer {
   public:
     itkShiftScaleLabelMapFilterLM3_Pointer();
     itkShiftScaleLabelMapFilterLM3_Pointer(itkShiftScaleLabelMapFilterLM3_Pointer const & p);
     itkShiftScaleLabelMapFilterLM3_Pointer(itkShiftScaleLabelMapFilterLM3 * p);
     ~itkShiftScaleLabelMapFilterLM3_Pointer();
     itkShiftScaleLabelMapFilterLM3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkShiftScaleLabelMapFilterLM3 * GetPointer() const;
     bool operator<(itkShiftScaleLabelMapFilterLM3_Pointer const & r) const;
     bool operator>(itkShiftScaleLabelMapFilterLM3_Pointer const & r) const;
     bool operator<=(itkShiftScaleLabelMapFilterLM3_Pointer const & r) const;
     bool operator>=(itkShiftScaleLabelMapFilterLM3_Pointer const & r) const;
     itkShiftScaleLabelMapFilterLM3_Pointer & operator=(itkShiftScaleLabelMapFilterLM3_Pointer const & r);
     itkShiftScaleLabelMapFilterLM3_Pointer & operator=(itkShiftScaleLabelMapFilterLM3 * r);
     itkShiftScaleLabelMapFilterLM3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


