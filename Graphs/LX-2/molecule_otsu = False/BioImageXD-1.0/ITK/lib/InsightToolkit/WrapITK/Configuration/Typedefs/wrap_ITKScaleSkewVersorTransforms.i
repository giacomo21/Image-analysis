// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module ITKScaleSkewVersorTransformsChicken
#endif
#ifdef SWIGCSHARP
%module ITKScaleSkewVersorTransformsCsharp
#endif
#ifdef SWIGGUILE
%module ITKScaleSkewVersorTransformsGuile
#endif
#ifdef SWIGJAVA
%module ITKScaleSkewVersorTransformsJava
#endif
#ifdef SWIGLUA
%module ITKScaleSkewVersorTransformsLua
#endif
#ifdef SWIGMODULA3
%module ITKScaleSkewVersorTransformsModula3
#endif
#ifdef SWIGMZSCHEME
%module ITKScaleSkewVersorTransformsMzscheme
#endif
#ifdef SWIGOCAML
%module ITKScaleSkewVersorTransformsOcaml
#endif
#ifdef SWIGPERL
%module ITKScaleSkewVersorTransformsPerl
#endif
#ifdef SWIGPERL5
%module ITKScaleSkewVersorTransformsPerl5
#endif
#ifdef SWIGPHP
%module ITKScaleSkewVersorTransformsPhp
#endif
#ifdef SWIGPHP4
%module ITKScaleSkewVersorTransformsPhp4
#endif
#ifdef SWIGPHP5
%module ITKScaleSkewVersorTransformsPhp5
#endif
#ifdef SWIGPIKE
%module ITKScaleSkewVersorTransformsPike
#endif
#ifdef SWIGPYTHON
%module ITKScaleSkewVersorTransformsPython
#endif
#ifdef SWIGR
%module ITKScaleSkewVersorTransformsR
#endif
#ifdef SWIGRUBY
%module ITKScaleSkewVersorTransformsRuby
#endif
#ifdef SWIGSEXP
%module ITKScaleSkewVersorTransformsSexp
#endif
#ifdef SWIGTCL
%module ITKScaleSkewVersorTransformsTcl
#endif
#ifdef SWIGXML
%module ITKScaleSkewVersorTransformsXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
%}


%{
%}




%import wrap_itkPoint.i
%import wrap_ITKVersorRigidTransform.i
%import wrap_itkArray2D.i
%import wrap_itkVector.i
%import wrap_itkArray.i
%import wrap_itkMatrix.i
%import wrap_ITKCommonBase.i


%include itk.i
%include wrap_ITKScaleSkewVersorTransforms_ext.i


 class itkScaleSkewVersor3DTransformD : public itkVersorRigid3DTransformD {
   public:
     enum  {  InputSpaceDimension = 3 };
     enum  {  OutputSpaceDimension = 3 };
     enum  {  ParametersDimension = 15 };
     static itkScaleSkewVersor3DTransformD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetMatrix(itkMatrixD33 const & matrix);
     virtual void SetParameters(itkArrayD const & parameters);
     virtual itkArrayD const & GetParameters() const;
     void SetScale(itkVectorD3 const & scale);
     virtual itkVectorD3 const & GetScale() const;
     void SetSkew(itkVectorD6 const & skew);
     virtual itkVectorD6 const & GetSkew() const;
     virtual void SetIdentity();
     virtual itkArray2DD const & GetJacobian(itkPointD3 const & point) const;
   private:
     itkScaleSkewVersor3DTransformD(itkScaleSkewVersor3DTransformD const & arg0);
     void operator=(itkScaleSkewVersor3DTransformD const & arg0);
   protected:
     itkScaleSkewVersor3DTransformD();
     itkScaleSkewVersor3DTransformD(itkMatrixD33 const & matrix, itkVectorD3 const & offset);
     itkScaleSkewVersor3DTransformD(unsigned int outputDims, unsigned int paramDims);
     ~itkScaleSkewVersor3DTransformD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     void SetVarScale(itkVectorD3 const & scale);
     void SetVarSkew(itkVectorD6 const & skew);
     virtual void ComputeMatrix();
     virtual void ComputeMatrixParameters();
 };


 class itkScaleSkewVersor3DTransformD_Pointer {
   public:
     itkScaleSkewVersor3DTransformD_Pointer();
     itkScaleSkewVersor3DTransformD_Pointer(itkScaleSkewVersor3DTransformD_Pointer const & p);
     itkScaleSkewVersor3DTransformD_Pointer(itkScaleSkewVersor3DTransformD * p);
     ~itkScaleSkewVersor3DTransformD_Pointer();
     itkScaleSkewVersor3DTransformD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkScaleSkewVersor3DTransformD * GetPointer() const;
     bool operator<(itkScaleSkewVersor3DTransformD_Pointer const & r) const;
     bool operator>(itkScaleSkewVersor3DTransformD_Pointer const & r) const;
     bool operator<=(itkScaleSkewVersor3DTransformD_Pointer const & r) const;
     bool operator>=(itkScaleSkewVersor3DTransformD_Pointer const & r) const;
     itkScaleSkewVersor3DTransformD_Pointer & operator=(itkScaleSkewVersor3DTransformD_Pointer const & r);
     itkScaleSkewVersor3DTransformD_Pointer & operator=(itkScaleSkewVersor3DTransformD * r);
     itkScaleSkewVersor3DTransformD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


