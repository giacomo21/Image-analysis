# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkMultiplyByConstantImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkMultiplyByConstantImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkMultiplyByConstantImageFilterPython
            return _itkMultiplyByConstantImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkMultiplyByConstantImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkMultiplyByConstantImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkMultiplyByConstantImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import vcl_complexPython
import pyBasePython
import ITKRegionsPython
import ITKCommonBasePython
import itkEventObjectsPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkInPlaceImageFilterBPython
import itkImageToImageFilterBPython
import itkImagePython
import itkFixedArrayPython
import itkCovariantVectorPython
import vnl_vectorPython
import vnl_matrixPython
import itkVectorPython
import vnl_vector_refPython
import itkPointPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkRGBPixelPython
import itkImageSourcePython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython
def itkMultiplyByConstantImageFilterICF3CFICF3_New():
  return itkMultiplyByConstantImageFilterICF3CFICF3.New()

def itkMultiplyByConstantImageFilterICF3CFICF3_Superclass_New():
  return itkMultiplyByConstantImageFilterICF3CFICF3_Superclass.New()

def itkMultiplyByConstantImageFilterID3DID3_New():
  return itkMultiplyByConstantImageFilterID3DID3.New()

def itkMultiplyByConstantImageFilterID3DID3_Superclass_New():
  return itkMultiplyByConstantImageFilterID3DID3_Superclass.New()

def itkMultiplyByConstantImageFilterIF3DIF3_New():
  return itkMultiplyByConstantImageFilterIF3DIF3.New()

def itkMultiplyByConstantImageFilterIF3DIF3_Superclass_New():
  return itkMultiplyByConstantImageFilterIF3DIF3_Superclass.New()

def itkMultiplyByConstantImageFilterIUS3DIUS3_New():
  return itkMultiplyByConstantImageFilterIUS3DIUS3.New()

def itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass_New():
  return itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass.New()

def itkMultiplyByConstantImageFilterIUL3DIUL3_New():
  return itkMultiplyByConstantImageFilterIUL3DIUL3.New()

def itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass_New():
  return itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass.New()

def itkMultiplyByConstantImageFilterIUC3DIUC3_New():
  return itkMultiplyByConstantImageFilterIUC3DIUC3.New()

def itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass_New():
  return itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass.New()

def itkMultiplyByConstantImageFilterICF2CFICF2_New():
  return itkMultiplyByConstantImageFilterICF2CFICF2.New()

def itkMultiplyByConstantImageFilterICF2CFICF2_Superclass_New():
  return itkMultiplyByConstantImageFilterICF2CFICF2_Superclass.New()

def itkMultiplyByConstantImageFilterID2DID2_New():
  return itkMultiplyByConstantImageFilterID2DID2.New()

def itkMultiplyByConstantImageFilterID2DID2_Superclass_New():
  return itkMultiplyByConstantImageFilterID2DID2_Superclass.New()

def itkMultiplyByConstantImageFilterIF2DIF2_New():
  return itkMultiplyByConstantImageFilterIF2DIF2.New()

def itkMultiplyByConstantImageFilterIF2DIF2_Superclass_New():
  return itkMultiplyByConstantImageFilterIF2DIF2_Superclass.New()

def itkMultiplyByConstantImageFilterIUS2DIUS2_New():
  return itkMultiplyByConstantImageFilterIUS2DIUS2.New()

def itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass_New():
  return itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass.New()

def itkMultiplyByConstantImageFilterIUL2DIUL2_New():
  return itkMultiplyByConstantImageFilterIUL2DIUL2.New()

def itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass_New():
  return itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass.New()

def itkMultiplyByConstantImageFilterIUC2DIUC2_New():
  return itkMultiplyByConstantImageFilterIUC2DIUC2.New()

def itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass_New():
  return itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass.New()

class itkMultiplyByConstantImageFilterICF2CFICF2_Superclass(itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ICF2):
    """Proxy of C++ itkMultiplyByConstantImageFilterICF2CFICF2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF2CFICF2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::MultiplyByConstant<(std::complex<(float)>,std::complex<(float)>,std::complex<(float)>)>
        GetFunctor(self) -> itk::Functor::MultiplyByConstant<(std::complex<(float)>,std::complex<(float)>,std::complex<(float)>)>
        """
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF2CFICF2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::MultiplyByConstant<(std::complex<(float)>,std::complex<(float)>,std::complex<(float)>)> functor)"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF2CFICF2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkMultiplyByConstantImageFilterPython.delete_itkMultiplyByConstantImageFilterICF2CFICF2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterICF2CFICF2_Superclass"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF2CFICF2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiplyByConstantImageFilterICF2CFICF2_Superclass"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF2CFICF2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiplyByConstantImageFilterICF2CFICF2_Superclass
        
        Create a new object of the class itkMultiplyByConstantImageFilterICF2CFICF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiplyByConstantImageFilterICF2CFICF2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiplyByConstantImageFilterICF2CFICF2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyByConstantImageFilterICF2CFICF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyByConstantImageFilterICF2CFICF2_Superclass.GetFunctor = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF2CFICF2_Superclass_GetFunctor,None,itkMultiplyByConstantImageFilterICF2CFICF2_Superclass)
itkMultiplyByConstantImageFilterICF2CFICF2_Superclass.SetFunctor = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF2CFICF2_Superclass_SetFunctor,None,itkMultiplyByConstantImageFilterICF2CFICF2_Superclass)
itkMultiplyByConstantImageFilterICF2CFICF2_Superclass.GetPointer = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF2CFICF2_Superclass_GetPointer,None,itkMultiplyByConstantImageFilterICF2CFICF2_Superclass)
itkMultiplyByConstantImageFilterICF2CFICF2_Superclass_swigregister = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF2CFICF2_Superclass_swigregister
itkMultiplyByConstantImageFilterICF2CFICF2_Superclass_swigregister(itkMultiplyByConstantImageFilterICF2CFICF2_Superclass)

def itkMultiplyByConstantImageFilterICF2CFICF2_Superclass___New_orig__():
  """itkMultiplyByConstantImageFilterICF2CFICF2_Superclass___New_orig__()"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF2CFICF2_Superclass___New_orig__()

def itkMultiplyByConstantImageFilterICF2CFICF2_Superclass_cast(*args):
  """itkMultiplyByConstantImageFilterICF2CFICF2_Superclass_cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterICF2CFICF2_Superclass"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF2CFICF2_Superclass_cast(*args)

class itkMultiplyByConstantImageFilterICF3CFICF3_Superclass(itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF3):
    """Proxy of C++ itkMultiplyByConstantImageFilterICF3CFICF3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF3CFICF3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::MultiplyByConstant<(std::complex<(float)>,std::complex<(float)>,std::complex<(float)>)>
        GetFunctor(self) -> itk::Functor::MultiplyByConstant<(std::complex<(float)>,std::complex<(float)>,std::complex<(float)>)>
        """
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF3CFICF3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::MultiplyByConstant<(std::complex<(float)>,std::complex<(float)>,std::complex<(float)>)> functor)"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF3CFICF3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkMultiplyByConstantImageFilterPython.delete_itkMultiplyByConstantImageFilterICF3CFICF3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterICF3CFICF3_Superclass"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF3CFICF3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiplyByConstantImageFilterICF3CFICF3_Superclass"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF3CFICF3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiplyByConstantImageFilterICF3CFICF3_Superclass
        
        Create a new object of the class itkMultiplyByConstantImageFilterICF3CFICF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiplyByConstantImageFilterICF3CFICF3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiplyByConstantImageFilterICF3CFICF3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyByConstantImageFilterICF3CFICF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyByConstantImageFilterICF3CFICF3_Superclass.GetFunctor = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF3CFICF3_Superclass_GetFunctor,None,itkMultiplyByConstantImageFilterICF3CFICF3_Superclass)
itkMultiplyByConstantImageFilterICF3CFICF3_Superclass.SetFunctor = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF3CFICF3_Superclass_SetFunctor,None,itkMultiplyByConstantImageFilterICF3CFICF3_Superclass)
itkMultiplyByConstantImageFilterICF3CFICF3_Superclass.GetPointer = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF3CFICF3_Superclass_GetPointer,None,itkMultiplyByConstantImageFilterICF3CFICF3_Superclass)
itkMultiplyByConstantImageFilterICF3CFICF3_Superclass_swigregister = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF3CFICF3_Superclass_swigregister
itkMultiplyByConstantImageFilterICF3CFICF3_Superclass_swigregister(itkMultiplyByConstantImageFilterICF3CFICF3_Superclass)

def itkMultiplyByConstantImageFilterICF3CFICF3_Superclass___New_orig__():
  """itkMultiplyByConstantImageFilterICF3CFICF3_Superclass___New_orig__()"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF3CFICF3_Superclass___New_orig__()

def itkMultiplyByConstantImageFilterICF3CFICF3_Superclass_cast(*args):
  """itkMultiplyByConstantImageFilterICF3CFICF3_Superclass_cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterICF3CFICF3_Superclass"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF3CFICF3_Superclass_cast(*args)

class itkMultiplyByConstantImageFilterID2DID2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    """Proxy of C++ itkMultiplyByConstantImageFilterID2DID2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID2DID2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::MultiplyByConstant<(double,double,double)>
        GetFunctor(self) -> itk::Functor::MultiplyByConstant<(double,double,double)>
        """
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID2DID2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::MultiplyByConstant<(double,double,double)> functor)"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID2DID2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkMultiplyByConstantImageFilterPython.delete_itkMultiplyByConstantImageFilterID2DID2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterID2DID2_Superclass"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID2DID2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiplyByConstantImageFilterID2DID2_Superclass"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID2DID2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiplyByConstantImageFilterID2DID2_Superclass
        
        Create a new object of the class itkMultiplyByConstantImageFilterID2DID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiplyByConstantImageFilterID2DID2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiplyByConstantImageFilterID2DID2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyByConstantImageFilterID2DID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyByConstantImageFilterID2DID2_Superclass.GetFunctor = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID2DID2_Superclass_GetFunctor,None,itkMultiplyByConstantImageFilterID2DID2_Superclass)
itkMultiplyByConstantImageFilterID2DID2_Superclass.SetFunctor = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID2DID2_Superclass_SetFunctor,None,itkMultiplyByConstantImageFilterID2DID2_Superclass)
itkMultiplyByConstantImageFilterID2DID2_Superclass.GetPointer = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID2DID2_Superclass_GetPointer,None,itkMultiplyByConstantImageFilterID2DID2_Superclass)
itkMultiplyByConstantImageFilterID2DID2_Superclass_swigregister = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID2DID2_Superclass_swigregister
itkMultiplyByConstantImageFilterID2DID2_Superclass_swigregister(itkMultiplyByConstantImageFilterID2DID2_Superclass)

def itkMultiplyByConstantImageFilterID2DID2_Superclass___New_orig__():
  """itkMultiplyByConstantImageFilterID2DID2_Superclass___New_orig__()"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID2DID2_Superclass___New_orig__()

def itkMultiplyByConstantImageFilterID2DID2_Superclass_cast(*args):
  """itkMultiplyByConstantImageFilterID2DID2_Superclass_cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterID2DID2_Superclass"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID2DID2_Superclass_cast(*args)

class itkMultiplyByConstantImageFilterID3DID3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    """Proxy of C++ itkMultiplyByConstantImageFilterID3DID3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID3DID3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::MultiplyByConstant<(double,double,double)>
        GetFunctor(self) -> itk::Functor::MultiplyByConstant<(double,double,double)>
        """
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID3DID3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::MultiplyByConstant<(double,double,double)> functor)"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID3DID3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkMultiplyByConstantImageFilterPython.delete_itkMultiplyByConstantImageFilterID3DID3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterID3DID3_Superclass"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID3DID3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiplyByConstantImageFilterID3DID3_Superclass"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID3DID3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiplyByConstantImageFilterID3DID3_Superclass
        
        Create a new object of the class itkMultiplyByConstantImageFilterID3DID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiplyByConstantImageFilterID3DID3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiplyByConstantImageFilterID3DID3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyByConstantImageFilterID3DID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyByConstantImageFilterID3DID3_Superclass.GetFunctor = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID3DID3_Superclass_GetFunctor,None,itkMultiplyByConstantImageFilterID3DID3_Superclass)
itkMultiplyByConstantImageFilterID3DID3_Superclass.SetFunctor = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID3DID3_Superclass_SetFunctor,None,itkMultiplyByConstantImageFilterID3DID3_Superclass)
itkMultiplyByConstantImageFilterID3DID3_Superclass.GetPointer = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID3DID3_Superclass_GetPointer,None,itkMultiplyByConstantImageFilterID3DID3_Superclass)
itkMultiplyByConstantImageFilterID3DID3_Superclass_swigregister = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID3DID3_Superclass_swigregister
itkMultiplyByConstantImageFilterID3DID3_Superclass_swigregister(itkMultiplyByConstantImageFilterID3DID3_Superclass)

def itkMultiplyByConstantImageFilterID3DID3_Superclass___New_orig__():
  """itkMultiplyByConstantImageFilterID3DID3_Superclass___New_orig__()"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID3DID3_Superclass___New_orig__()

def itkMultiplyByConstantImageFilterID3DID3_Superclass_cast(*args):
  """itkMultiplyByConstantImageFilterID3DID3_Superclass_cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterID3DID3_Superclass"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID3DID3_Superclass_cast(*args)

class itkMultiplyByConstantImageFilterIF2DIF2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    """Proxy of C++ itkMultiplyByConstantImageFilterIF2DIF2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF2DIF2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::MultiplyByConstant<(float,double,float)>
        GetFunctor(self) -> itk::Functor::MultiplyByConstant<(float,double,float)>
        """
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF2DIF2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::MultiplyByConstant<(float,double,float)> functor)"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF2DIF2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkMultiplyByConstantImageFilterPython.delete_itkMultiplyByConstantImageFilterIF2DIF2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIF2DIF2_Superclass"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF2DIF2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiplyByConstantImageFilterIF2DIF2_Superclass"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF2DIF2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiplyByConstantImageFilterIF2DIF2_Superclass
        
        Create a new object of the class itkMultiplyByConstantImageFilterIF2DIF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiplyByConstantImageFilterIF2DIF2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiplyByConstantImageFilterIF2DIF2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyByConstantImageFilterIF2DIF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyByConstantImageFilterIF2DIF2_Superclass.GetFunctor = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF2DIF2_Superclass_GetFunctor,None,itkMultiplyByConstantImageFilterIF2DIF2_Superclass)
itkMultiplyByConstantImageFilterIF2DIF2_Superclass.SetFunctor = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF2DIF2_Superclass_SetFunctor,None,itkMultiplyByConstantImageFilterIF2DIF2_Superclass)
itkMultiplyByConstantImageFilterIF2DIF2_Superclass.GetPointer = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF2DIF2_Superclass_GetPointer,None,itkMultiplyByConstantImageFilterIF2DIF2_Superclass)
itkMultiplyByConstantImageFilterIF2DIF2_Superclass_swigregister = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF2DIF2_Superclass_swigregister
itkMultiplyByConstantImageFilterIF2DIF2_Superclass_swigregister(itkMultiplyByConstantImageFilterIF2DIF2_Superclass)

def itkMultiplyByConstantImageFilterIF2DIF2_Superclass___New_orig__():
  """itkMultiplyByConstantImageFilterIF2DIF2_Superclass___New_orig__()"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF2DIF2_Superclass___New_orig__()

def itkMultiplyByConstantImageFilterIF2DIF2_Superclass_cast(*args):
  """itkMultiplyByConstantImageFilterIF2DIF2_Superclass_cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIF2DIF2_Superclass"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF2DIF2_Superclass_cast(*args)

class itkMultiplyByConstantImageFilterIF3DIF3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    """Proxy of C++ itkMultiplyByConstantImageFilterIF3DIF3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF3DIF3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::MultiplyByConstant<(float,double,float)>
        GetFunctor(self) -> itk::Functor::MultiplyByConstant<(float,double,float)>
        """
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF3DIF3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::MultiplyByConstant<(float,double,float)> functor)"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF3DIF3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkMultiplyByConstantImageFilterPython.delete_itkMultiplyByConstantImageFilterIF3DIF3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIF3DIF3_Superclass"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF3DIF3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiplyByConstantImageFilterIF3DIF3_Superclass"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF3DIF3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiplyByConstantImageFilterIF3DIF3_Superclass
        
        Create a new object of the class itkMultiplyByConstantImageFilterIF3DIF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiplyByConstantImageFilterIF3DIF3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiplyByConstantImageFilterIF3DIF3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyByConstantImageFilterIF3DIF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyByConstantImageFilterIF3DIF3_Superclass.GetFunctor = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF3DIF3_Superclass_GetFunctor,None,itkMultiplyByConstantImageFilterIF3DIF3_Superclass)
itkMultiplyByConstantImageFilterIF3DIF3_Superclass.SetFunctor = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF3DIF3_Superclass_SetFunctor,None,itkMultiplyByConstantImageFilterIF3DIF3_Superclass)
itkMultiplyByConstantImageFilterIF3DIF3_Superclass.GetPointer = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF3DIF3_Superclass_GetPointer,None,itkMultiplyByConstantImageFilterIF3DIF3_Superclass)
itkMultiplyByConstantImageFilterIF3DIF3_Superclass_swigregister = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF3DIF3_Superclass_swigregister
itkMultiplyByConstantImageFilterIF3DIF3_Superclass_swigregister(itkMultiplyByConstantImageFilterIF3DIF3_Superclass)

def itkMultiplyByConstantImageFilterIF3DIF3_Superclass___New_orig__():
  """itkMultiplyByConstantImageFilterIF3DIF3_Superclass___New_orig__()"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF3DIF3_Superclass___New_orig__()

def itkMultiplyByConstantImageFilterIF3DIF3_Superclass_cast(*args):
  """itkMultiplyByConstantImageFilterIF3DIF3_Superclass_cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIF3DIF3_Superclass"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF3DIF3_Superclass_cast(*args)

class itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    """Proxy of C++ itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::MultiplyByConstant<(unsigned char,double,unsigned char)>
        GetFunctor(self) -> itk::Functor::MultiplyByConstant<(unsigned char,double,unsigned char)>
        """
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::MultiplyByConstant<(unsigned char,double,unsigned char)> functor)"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkMultiplyByConstantImageFilterPython.delete_itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass
        
        Create a new object of the class itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass.GetFunctor = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass_GetFunctor,None,itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass)
itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass.SetFunctor = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass_SetFunctor,None,itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass)
itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass.GetPointer = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass_GetPointer,None,itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass)
itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass_swigregister = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass_swigregister
itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass_swigregister(itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass)

def itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass___New_orig__():
  """itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass___New_orig__()"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass___New_orig__()

def itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass_cast(*args):
  """itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass_cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass_cast(*args)

class itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    """Proxy of C++ itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::MultiplyByConstant<(unsigned char,double,unsigned char)>
        GetFunctor(self) -> itk::Functor::MultiplyByConstant<(unsigned char,double,unsigned char)>
        """
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::MultiplyByConstant<(unsigned char,double,unsigned char)> functor)"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkMultiplyByConstantImageFilterPython.delete_itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass
        
        Create a new object of the class itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass.GetFunctor = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass_GetFunctor,None,itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass)
itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass.SetFunctor = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass_SetFunctor,None,itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass)
itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass.GetPointer = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass_GetPointer,None,itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass)
itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass_swigregister = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass_swigregister
itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass_swigregister(itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass)

def itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass___New_orig__():
  """itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass___New_orig__()"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass___New_orig__()

def itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass_cast(*args):
  """itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass_cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass_cast(*args)

class itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUL2):
    """Proxy of C++ itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::MultiplyByConstant<(unsigned long,double,unsigned long)>
        GetFunctor(self) -> itk::Functor::MultiplyByConstant<(unsigned long,double,unsigned long)>
        """
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::MultiplyByConstant<(unsigned long,double,unsigned long)> functor)"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkMultiplyByConstantImageFilterPython.delete_itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass
        
        Create a new object of the class itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass.GetFunctor = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass_GetFunctor,None,itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass)
itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass.SetFunctor = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass_SetFunctor,None,itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass)
itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass.GetPointer = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass_GetPointer,None,itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass)
itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass_swigregister = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass_swigregister
itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass_swigregister(itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass)

def itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass___New_orig__():
  """itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass___New_orig__()"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass___New_orig__()

def itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass_cast(*args):
  """itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass_cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass_cast(*args)

class itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUL3):
    """Proxy of C++ itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::MultiplyByConstant<(unsigned long,double,unsigned long)>
        GetFunctor(self) -> itk::Functor::MultiplyByConstant<(unsigned long,double,unsigned long)>
        """
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::MultiplyByConstant<(unsigned long,double,unsigned long)> functor)"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkMultiplyByConstantImageFilterPython.delete_itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass
        
        Create a new object of the class itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass.GetFunctor = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass_GetFunctor,None,itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass)
itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass.SetFunctor = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass_SetFunctor,None,itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass)
itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass.GetPointer = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass_GetPointer,None,itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass)
itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass_swigregister = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass_swigregister
itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass_swigregister(itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass)

def itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass___New_orig__():
  """itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass___New_orig__()"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass___New_orig__()

def itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass_cast(*args):
  """itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass_cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass_cast(*args)

class itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    """Proxy of C++ itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::MultiplyByConstant<(unsigned short,double,unsigned short)>
        GetFunctor(self) -> itk::Functor::MultiplyByConstant<(unsigned short,double,unsigned short)>
        """
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::MultiplyByConstant<(unsigned short,double,unsigned short)> functor)"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkMultiplyByConstantImageFilterPython.delete_itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass
        
        Create a new object of the class itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass.GetFunctor = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass_GetFunctor,None,itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass)
itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass.SetFunctor = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass_SetFunctor,None,itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass)
itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass.GetPointer = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass_GetPointer,None,itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass)
itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass_swigregister = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass_swigregister
itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass_swigregister(itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass)

def itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass___New_orig__():
  """itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass___New_orig__()"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass___New_orig__()

def itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass_cast(*args):
  """itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass_cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass_cast(*args)

class itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    """Proxy of C++ itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Functor::MultiplyByConstant<(unsigned short,double,unsigned short)>
        GetFunctor(self) -> itk::Functor::MultiplyByConstant<(unsigned short,double,unsigned short)>
        """
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Functor::MultiplyByConstant<(unsigned short,double,unsigned short)> functor)"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkMultiplyByConstantImageFilterPython.delete_itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass
        
        Create a new object of the class itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass.GetFunctor = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass_GetFunctor,None,itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass)
itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass.SetFunctor = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass_SetFunctor,None,itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass)
itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass.GetPointer = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass_GetPointer,None,itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass)
itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass_swigregister = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass_swigregister
itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass_swigregister(itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass)

def itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass___New_orig__():
  """itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass___New_orig__()"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass___New_orig__()

def itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass_cast(*args):
  """itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass_cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass_cast(*args)

class itkMultiplyByConstantImageFilterICF2CFICF2(itkMultiplyByConstantImageFilterICF2CFICF2_Superclass):
    """Proxy of C++ itkMultiplyByConstantImageFilterICF2CFICF2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToOutputCheck = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF2CFICF2_InputConvertibleToOutputCheck
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF2CFICF2_Input1Input2OutputMultiplyOperatorCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF2CFICF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetConstant(self, *args):
        """SetConstant(self, vcl_complexF ct)"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF2CFICF2_SetConstant(self, *args)

    def GetConstant(self):
        """GetConstant(self) -> vcl_complexF"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF2CFICF2_GetConstant(self)

    __swig_destroy__ = _itkMultiplyByConstantImageFilterPython.delete_itkMultiplyByConstantImageFilterICF2CFICF2
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterICF2CFICF2"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF2CFICF2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiplyByConstantImageFilterICF2CFICF2"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF2CFICF2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiplyByConstantImageFilterICF2CFICF2
        
        Create a new object of the class itkMultiplyByConstantImageFilterICF2CFICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiplyByConstantImageFilterICF2CFICF2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiplyByConstantImageFilterICF2CFICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyByConstantImageFilterICF2CFICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyByConstantImageFilterICF2CFICF2.SetConstant = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF2CFICF2_SetConstant,None,itkMultiplyByConstantImageFilterICF2CFICF2)
itkMultiplyByConstantImageFilterICF2CFICF2.GetConstant = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF2CFICF2_GetConstant,None,itkMultiplyByConstantImageFilterICF2CFICF2)
itkMultiplyByConstantImageFilterICF2CFICF2.GetPointer = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF2CFICF2_GetPointer,None,itkMultiplyByConstantImageFilterICF2CFICF2)
itkMultiplyByConstantImageFilterICF2CFICF2_swigregister = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF2CFICF2_swigregister
itkMultiplyByConstantImageFilterICF2CFICF2_swigregister(itkMultiplyByConstantImageFilterICF2CFICF2)

def itkMultiplyByConstantImageFilterICF2CFICF2___New_orig__():
  """itkMultiplyByConstantImageFilterICF2CFICF2___New_orig__()"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF2CFICF2___New_orig__()

def itkMultiplyByConstantImageFilterICF2CFICF2_cast(*args):
  """itkMultiplyByConstantImageFilterICF2CFICF2_cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterICF2CFICF2"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF2CFICF2_cast(*args)

class itkMultiplyByConstantImageFilterICF3CFICF3(itkMultiplyByConstantImageFilterICF3CFICF3_Superclass):
    """Proxy of C++ itkMultiplyByConstantImageFilterICF3CFICF3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToOutputCheck = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF3CFICF3_InputConvertibleToOutputCheck
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF3CFICF3_Input1Input2OutputMultiplyOperatorCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF3CFICF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetConstant(self, *args):
        """SetConstant(self, vcl_complexF ct)"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF3CFICF3_SetConstant(self, *args)

    def GetConstant(self):
        """GetConstant(self) -> vcl_complexF"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF3CFICF3_GetConstant(self)

    __swig_destroy__ = _itkMultiplyByConstantImageFilterPython.delete_itkMultiplyByConstantImageFilterICF3CFICF3
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterICF3CFICF3"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF3CFICF3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiplyByConstantImageFilterICF3CFICF3"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF3CFICF3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiplyByConstantImageFilterICF3CFICF3
        
        Create a new object of the class itkMultiplyByConstantImageFilterICF3CFICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiplyByConstantImageFilterICF3CFICF3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiplyByConstantImageFilterICF3CFICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyByConstantImageFilterICF3CFICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyByConstantImageFilterICF3CFICF3.SetConstant = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF3CFICF3_SetConstant,None,itkMultiplyByConstantImageFilterICF3CFICF3)
itkMultiplyByConstantImageFilterICF3CFICF3.GetConstant = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF3CFICF3_GetConstant,None,itkMultiplyByConstantImageFilterICF3CFICF3)
itkMultiplyByConstantImageFilterICF3CFICF3.GetPointer = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF3CFICF3_GetPointer,None,itkMultiplyByConstantImageFilterICF3CFICF3)
itkMultiplyByConstantImageFilterICF3CFICF3_swigregister = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF3CFICF3_swigregister
itkMultiplyByConstantImageFilterICF3CFICF3_swigregister(itkMultiplyByConstantImageFilterICF3CFICF3)

def itkMultiplyByConstantImageFilterICF3CFICF3___New_orig__():
  """itkMultiplyByConstantImageFilterICF3CFICF3___New_orig__()"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF3CFICF3___New_orig__()

def itkMultiplyByConstantImageFilterICF3CFICF3_cast(*args):
  """itkMultiplyByConstantImageFilterICF3CFICF3_cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterICF3CFICF3"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterICF3CFICF3_cast(*args)

class itkMultiplyByConstantImageFilterID2DID2(itkMultiplyByConstantImageFilterID2DID2_Superclass):
    """Proxy of C++ itkMultiplyByConstantImageFilterID2DID2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToOutputCheck = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID2DID2_InputConvertibleToOutputCheck
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID2DID2_Input1Input2OutputMultiplyOperatorCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID2DID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetConstant(self, *args):
        """SetConstant(self, double ct)"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID2DID2_SetConstant(self, *args)

    def GetConstant(self):
        """GetConstant(self) -> double"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID2DID2_GetConstant(self)

    __swig_destroy__ = _itkMultiplyByConstantImageFilterPython.delete_itkMultiplyByConstantImageFilterID2DID2
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterID2DID2"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID2DID2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiplyByConstantImageFilterID2DID2"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID2DID2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiplyByConstantImageFilterID2DID2
        
        Create a new object of the class itkMultiplyByConstantImageFilterID2DID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiplyByConstantImageFilterID2DID2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiplyByConstantImageFilterID2DID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyByConstantImageFilterID2DID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyByConstantImageFilterID2DID2.SetConstant = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID2DID2_SetConstant,None,itkMultiplyByConstantImageFilterID2DID2)
itkMultiplyByConstantImageFilterID2DID2.GetConstant = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID2DID2_GetConstant,None,itkMultiplyByConstantImageFilterID2DID2)
itkMultiplyByConstantImageFilterID2DID2.GetPointer = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID2DID2_GetPointer,None,itkMultiplyByConstantImageFilterID2DID2)
itkMultiplyByConstantImageFilterID2DID2_swigregister = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID2DID2_swigregister
itkMultiplyByConstantImageFilterID2DID2_swigregister(itkMultiplyByConstantImageFilterID2DID2)

def itkMultiplyByConstantImageFilterID2DID2___New_orig__():
  """itkMultiplyByConstantImageFilterID2DID2___New_orig__()"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID2DID2___New_orig__()

def itkMultiplyByConstantImageFilterID2DID2_cast(*args):
  """itkMultiplyByConstantImageFilterID2DID2_cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterID2DID2"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID2DID2_cast(*args)

class itkMultiplyByConstantImageFilterID3DID3(itkMultiplyByConstantImageFilterID3DID3_Superclass):
    """Proxy of C++ itkMultiplyByConstantImageFilterID3DID3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToOutputCheck = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID3DID3_InputConvertibleToOutputCheck
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID3DID3_Input1Input2OutputMultiplyOperatorCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID3DID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetConstant(self, *args):
        """SetConstant(self, double ct)"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID3DID3_SetConstant(self, *args)

    def GetConstant(self):
        """GetConstant(self) -> double"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID3DID3_GetConstant(self)

    __swig_destroy__ = _itkMultiplyByConstantImageFilterPython.delete_itkMultiplyByConstantImageFilterID3DID3
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterID3DID3"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID3DID3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiplyByConstantImageFilterID3DID3"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID3DID3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiplyByConstantImageFilterID3DID3
        
        Create a new object of the class itkMultiplyByConstantImageFilterID3DID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiplyByConstantImageFilterID3DID3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiplyByConstantImageFilterID3DID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyByConstantImageFilterID3DID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyByConstantImageFilterID3DID3.SetConstant = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID3DID3_SetConstant,None,itkMultiplyByConstantImageFilterID3DID3)
itkMultiplyByConstantImageFilterID3DID3.GetConstant = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID3DID3_GetConstant,None,itkMultiplyByConstantImageFilterID3DID3)
itkMultiplyByConstantImageFilterID3DID3.GetPointer = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID3DID3_GetPointer,None,itkMultiplyByConstantImageFilterID3DID3)
itkMultiplyByConstantImageFilterID3DID3_swigregister = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID3DID3_swigregister
itkMultiplyByConstantImageFilterID3DID3_swigregister(itkMultiplyByConstantImageFilterID3DID3)

def itkMultiplyByConstantImageFilterID3DID3___New_orig__():
  """itkMultiplyByConstantImageFilterID3DID3___New_orig__()"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID3DID3___New_orig__()

def itkMultiplyByConstantImageFilterID3DID3_cast(*args):
  """itkMultiplyByConstantImageFilterID3DID3_cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterID3DID3"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterID3DID3_cast(*args)

class itkMultiplyByConstantImageFilterIF2DIF2(itkMultiplyByConstantImageFilterIF2DIF2_Superclass):
    """Proxy of C++ itkMultiplyByConstantImageFilterIF2DIF2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToOutputCheck = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF2DIF2_InputConvertibleToOutputCheck
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF2DIF2_Input1Input2OutputMultiplyOperatorCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF2DIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetConstant(self, *args):
        """SetConstant(self, double ct)"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF2DIF2_SetConstant(self, *args)

    def GetConstant(self):
        """GetConstant(self) -> double"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF2DIF2_GetConstant(self)

    __swig_destroy__ = _itkMultiplyByConstantImageFilterPython.delete_itkMultiplyByConstantImageFilterIF2DIF2
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIF2DIF2"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF2DIF2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiplyByConstantImageFilterIF2DIF2"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF2DIF2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiplyByConstantImageFilterIF2DIF2
        
        Create a new object of the class itkMultiplyByConstantImageFilterIF2DIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiplyByConstantImageFilterIF2DIF2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiplyByConstantImageFilterIF2DIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyByConstantImageFilterIF2DIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyByConstantImageFilterIF2DIF2.SetConstant = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF2DIF2_SetConstant,None,itkMultiplyByConstantImageFilterIF2DIF2)
itkMultiplyByConstantImageFilterIF2DIF2.GetConstant = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF2DIF2_GetConstant,None,itkMultiplyByConstantImageFilterIF2DIF2)
itkMultiplyByConstantImageFilterIF2DIF2.GetPointer = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF2DIF2_GetPointer,None,itkMultiplyByConstantImageFilterIF2DIF2)
itkMultiplyByConstantImageFilterIF2DIF2_swigregister = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF2DIF2_swigregister
itkMultiplyByConstantImageFilterIF2DIF2_swigregister(itkMultiplyByConstantImageFilterIF2DIF2)

def itkMultiplyByConstantImageFilterIF2DIF2___New_orig__():
  """itkMultiplyByConstantImageFilterIF2DIF2___New_orig__()"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF2DIF2___New_orig__()

def itkMultiplyByConstantImageFilterIF2DIF2_cast(*args):
  """itkMultiplyByConstantImageFilterIF2DIF2_cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIF2DIF2"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF2DIF2_cast(*args)

class itkMultiplyByConstantImageFilterIF3DIF3(itkMultiplyByConstantImageFilterIF3DIF3_Superclass):
    """Proxy of C++ itkMultiplyByConstantImageFilterIF3DIF3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToOutputCheck = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF3DIF3_InputConvertibleToOutputCheck
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF3DIF3_Input1Input2OutputMultiplyOperatorCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF3DIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetConstant(self, *args):
        """SetConstant(self, double ct)"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF3DIF3_SetConstant(self, *args)

    def GetConstant(self):
        """GetConstant(self) -> double"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF3DIF3_GetConstant(self)

    __swig_destroy__ = _itkMultiplyByConstantImageFilterPython.delete_itkMultiplyByConstantImageFilterIF3DIF3
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIF3DIF3"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF3DIF3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiplyByConstantImageFilterIF3DIF3"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF3DIF3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiplyByConstantImageFilterIF3DIF3
        
        Create a new object of the class itkMultiplyByConstantImageFilterIF3DIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiplyByConstantImageFilterIF3DIF3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiplyByConstantImageFilterIF3DIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyByConstantImageFilterIF3DIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyByConstantImageFilterIF3DIF3.SetConstant = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF3DIF3_SetConstant,None,itkMultiplyByConstantImageFilterIF3DIF3)
itkMultiplyByConstantImageFilterIF3DIF3.GetConstant = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF3DIF3_GetConstant,None,itkMultiplyByConstantImageFilterIF3DIF3)
itkMultiplyByConstantImageFilterIF3DIF3.GetPointer = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF3DIF3_GetPointer,None,itkMultiplyByConstantImageFilterIF3DIF3)
itkMultiplyByConstantImageFilterIF3DIF3_swigregister = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF3DIF3_swigregister
itkMultiplyByConstantImageFilterIF3DIF3_swigregister(itkMultiplyByConstantImageFilterIF3DIF3)

def itkMultiplyByConstantImageFilterIF3DIF3___New_orig__():
  """itkMultiplyByConstantImageFilterIF3DIF3___New_orig__()"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF3DIF3___New_orig__()

def itkMultiplyByConstantImageFilterIF3DIF3_cast(*args):
  """itkMultiplyByConstantImageFilterIF3DIF3_cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIF3DIF3"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIF3DIF3_cast(*args)

class itkMultiplyByConstantImageFilterIUC2DIUC2(itkMultiplyByConstantImageFilterIUC2DIUC2_Superclass):
    """Proxy of C++ itkMultiplyByConstantImageFilterIUC2DIUC2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToOutputCheck = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC2DIUC2_InputConvertibleToOutputCheck
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC2DIUC2_Input1Input2OutputMultiplyOperatorCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC2DIUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetConstant(self, *args):
        """SetConstant(self, double ct)"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC2DIUC2_SetConstant(self, *args)

    def GetConstant(self):
        """GetConstant(self) -> double"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC2DIUC2_GetConstant(self)

    __swig_destroy__ = _itkMultiplyByConstantImageFilterPython.delete_itkMultiplyByConstantImageFilterIUC2DIUC2
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIUC2DIUC2"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC2DIUC2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiplyByConstantImageFilterIUC2DIUC2"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC2DIUC2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiplyByConstantImageFilterIUC2DIUC2
        
        Create a new object of the class itkMultiplyByConstantImageFilterIUC2DIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiplyByConstantImageFilterIUC2DIUC2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiplyByConstantImageFilterIUC2DIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyByConstantImageFilterIUC2DIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyByConstantImageFilterIUC2DIUC2.SetConstant = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC2DIUC2_SetConstant,None,itkMultiplyByConstantImageFilterIUC2DIUC2)
itkMultiplyByConstantImageFilterIUC2DIUC2.GetConstant = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC2DIUC2_GetConstant,None,itkMultiplyByConstantImageFilterIUC2DIUC2)
itkMultiplyByConstantImageFilterIUC2DIUC2.GetPointer = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC2DIUC2_GetPointer,None,itkMultiplyByConstantImageFilterIUC2DIUC2)
itkMultiplyByConstantImageFilterIUC2DIUC2_swigregister = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC2DIUC2_swigregister
itkMultiplyByConstantImageFilterIUC2DIUC2_swigregister(itkMultiplyByConstantImageFilterIUC2DIUC2)

def itkMultiplyByConstantImageFilterIUC2DIUC2___New_orig__():
  """itkMultiplyByConstantImageFilterIUC2DIUC2___New_orig__()"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC2DIUC2___New_orig__()

def itkMultiplyByConstantImageFilterIUC2DIUC2_cast(*args):
  """itkMultiplyByConstantImageFilterIUC2DIUC2_cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIUC2DIUC2"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC2DIUC2_cast(*args)

class itkMultiplyByConstantImageFilterIUC3DIUC3(itkMultiplyByConstantImageFilterIUC3DIUC3_Superclass):
    """Proxy of C++ itkMultiplyByConstantImageFilterIUC3DIUC3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToOutputCheck = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC3DIUC3_InputConvertibleToOutputCheck
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC3DIUC3_Input1Input2OutputMultiplyOperatorCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC3DIUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetConstant(self, *args):
        """SetConstant(self, double ct)"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC3DIUC3_SetConstant(self, *args)

    def GetConstant(self):
        """GetConstant(self) -> double"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC3DIUC3_GetConstant(self)

    __swig_destroy__ = _itkMultiplyByConstantImageFilterPython.delete_itkMultiplyByConstantImageFilterIUC3DIUC3
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIUC3DIUC3"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC3DIUC3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiplyByConstantImageFilterIUC3DIUC3"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC3DIUC3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiplyByConstantImageFilterIUC3DIUC3
        
        Create a new object of the class itkMultiplyByConstantImageFilterIUC3DIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiplyByConstantImageFilterIUC3DIUC3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiplyByConstantImageFilterIUC3DIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyByConstantImageFilterIUC3DIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyByConstantImageFilterIUC3DIUC3.SetConstant = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC3DIUC3_SetConstant,None,itkMultiplyByConstantImageFilterIUC3DIUC3)
itkMultiplyByConstantImageFilterIUC3DIUC3.GetConstant = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC3DIUC3_GetConstant,None,itkMultiplyByConstantImageFilterIUC3DIUC3)
itkMultiplyByConstantImageFilterIUC3DIUC3.GetPointer = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC3DIUC3_GetPointer,None,itkMultiplyByConstantImageFilterIUC3DIUC3)
itkMultiplyByConstantImageFilterIUC3DIUC3_swigregister = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC3DIUC3_swigregister
itkMultiplyByConstantImageFilterIUC3DIUC3_swigregister(itkMultiplyByConstantImageFilterIUC3DIUC3)

def itkMultiplyByConstantImageFilterIUC3DIUC3___New_orig__():
  """itkMultiplyByConstantImageFilterIUC3DIUC3___New_orig__()"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC3DIUC3___New_orig__()

def itkMultiplyByConstantImageFilterIUC3DIUC3_cast(*args):
  """itkMultiplyByConstantImageFilterIUC3DIUC3_cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIUC3DIUC3"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUC3DIUC3_cast(*args)

class itkMultiplyByConstantImageFilterIUL2DIUL2(itkMultiplyByConstantImageFilterIUL2DIUL2_Superclass):
    """Proxy of C++ itkMultiplyByConstantImageFilterIUL2DIUL2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToOutputCheck = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL2DIUL2_InputConvertibleToOutputCheck
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL2DIUL2_Input1Input2OutputMultiplyOperatorCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL2DIUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetConstant(self, *args):
        """SetConstant(self, double ct)"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL2DIUL2_SetConstant(self, *args)

    def GetConstant(self):
        """GetConstant(self) -> double"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL2DIUL2_GetConstant(self)

    __swig_destroy__ = _itkMultiplyByConstantImageFilterPython.delete_itkMultiplyByConstantImageFilterIUL2DIUL2
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIUL2DIUL2"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL2DIUL2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiplyByConstantImageFilterIUL2DIUL2"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL2DIUL2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiplyByConstantImageFilterIUL2DIUL2
        
        Create a new object of the class itkMultiplyByConstantImageFilterIUL2DIUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiplyByConstantImageFilterIUL2DIUL2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiplyByConstantImageFilterIUL2DIUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyByConstantImageFilterIUL2DIUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyByConstantImageFilterIUL2DIUL2.SetConstant = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL2DIUL2_SetConstant,None,itkMultiplyByConstantImageFilterIUL2DIUL2)
itkMultiplyByConstantImageFilterIUL2DIUL2.GetConstant = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL2DIUL2_GetConstant,None,itkMultiplyByConstantImageFilterIUL2DIUL2)
itkMultiplyByConstantImageFilterIUL2DIUL2.GetPointer = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL2DIUL2_GetPointer,None,itkMultiplyByConstantImageFilterIUL2DIUL2)
itkMultiplyByConstantImageFilterIUL2DIUL2_swigregister = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL2DIUL2_swigregister
itkMultiplyByConstantImageFilterIUL2DIUL2_swigregister(itkMultiplyByConstantImageFilterIUL2DIUL2)

def itkMultiplyByConstantImageFilterIUL2DIUL2___New_orig__():
  """itkMultiplyByConstantImageFilterIUL2DIUL2___New_orig__()"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL2DIUL2___New_orig__()

def itkMultiplyByConstantImageFilterIUL2DIUL2_cast(*args):
  """itkMultiplyByConstantImageFilterIUL2DIUL2_cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIUL2DIUL2"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL2DIUL2_cast(*args)

class itkMultiplyByConstantImageFilterIUL3DIUL3(itkMultiplyByConstantImageFilterIUL3DIUL3_Superclass):
    """Proxy of C++ itkMultiplyByConstantImageFilterIUL3DIUL3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToOutputCheck = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL3DIUL3_InputConvertibleToOutputCheck
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL3DIUL3_Input1Input2OutputMultiplyOperatorCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL3DIUL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetConstant(self, *args):
        """SetConstant(self, double ct)"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL3DIUL3_SetConstant(self, *args)

    def GetConstant(self):
        """GetConstant(self) -> double"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL3DIUL3_GetConstant(self)

    __swig_destroy__ = _itkMultiplyByConstantImageFilterPython.delete_itkMultiplyByConstantImageFilterIUL3DIUL3
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIUL3DIUL3"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL3DIUL3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiplyByConstantImageFilterIUL3DIUL3"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL3DIUL3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiplyByConstantImageFilterIUL3DIUL3
        
        Create a new object of the class itkMultiplyByConstantImageFilterIUL3DIUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiplyByConstantImageFilterIUL3DIUL3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiplyByConstantImageFilterIUL3DIUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyByConstantImageFilterIUL3DIUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyByConstantImageFilterIUL3DIUL3.SetConstant = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL3DIUL3_SetConstant,None,itkMultiplyByConstantImageFilterIUL3DIUL3)
itkMultiplyByConstantImageFilterIUL3DIUL3.GetConstant = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL3DIUL3_GetConstant,None,itkMultiplyByConstantImageFilterIUL3DIUL3)
itkMultiplyByConstantImageFilterIUL3DIUL3.GetPointer = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL3DIUL3_GetPointer,None,itkMultiplyByConstantImageFilterIUL3DIUL3)
itkMultiplyByConstantImageFilterIUL3DIUL3_swigregister = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL3DIUL3_swigregister
itkMultiplyByConstantImageFilterIUL3DIUL3_swigregister(itkMultiplyByConstantImageFilterIUL3DIUL3)

def itkMultiplyByConstantImageFilterIUL3DIUL3___New_orig__():
  """itkMultiplyByConstantImageFilterIUL3DIUL3___New_orig__()"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL3DIUL3___New_orig__()

def itkMultiplyByConstantImageFilterIUL3DIUL3_cast(*args):
  """itkMultiplyByConstantImageFilterIUL3DIUL3_cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIUL3DIUL3"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUL3DIUL3_cast(*args)

class itkMultiplyByConstantImageFilterIUS2DIUS2(itkMultiplyByConstantImageFilterIUS2DIUS2_Superclass):
    """Proxy of C++ itkMultiplyByConstantImageFilterIUS2DIUS2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToOutputCheck = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS2DIUS2_InputConvertibleToOutputCheck
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS2DIUS2_Input1Input2OutputMultiplyOperatorCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS2DIUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetConstant(self, *args):
        """SetConstant(self, double ct)"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS2DIUS2_SetConstant(self, *args)

    def GetConstant(self):
        """GetConstant(self) -> double"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS2DIUS2_GetConstant(self)

    __swig_destroy__ = _itkMultiplyByConstantImageFilterPython.delete_itkMultiplyByConstantImageFilterIUS2DIUS2
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIUS2DIUS2"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS2DIUS2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiplyByConstantImageFilterIUS2DIUS2"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS2DIUS2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiplyByConstantImageFilterIUS2DIUS2
        
        Create a new object of the class itkMultiplyByConstantImageFilterIUS2DIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiplyByConstantImageFilterIUS2DIUS2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiplyByConstantImageFilterIUS2DIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyByConstantImageFilterIUS2DIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyByConstantImageFilterIUS2DIUS2.SetConstant = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS2DIUS2_SetConstant,None,itkMultiplyByConstantImageFilterIUS2DIUS2)
itkMultiplyByConstantImageFilterIUS2DIUS2.GetConstant = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS2DIUS2_GetConstant,None,itkMultiplyByConstantImageFilterIUS2DIUS2)
itkMultiplyByConstantImageFilterIUS2DIUS2.GetPointer = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS2DIUS2_GetPointer,None,itkMultiplyByConstantImageFilterIUS2DIUS2)
itkMultiplyByConstantImageFilterIUS2DIUS2_swigregister = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS2DIUS2_swigregister
itkMultiplyByConstantImageFilterIUS2DIUS2_swigregister(itkMultiplyByConstantImageFilterIUS2DIUS2)

def itkMultiplyByConstantImageFilterIUS2DIUS2___New_orig__():
  """itkMultiplyByConstantImageFilterIUS2DIUS2___New_orig__()"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS2DIUS2___New_orig__()

def itkMultiplyByConstantImageFilterIUS2DIUS2_cast(*args):
  """itkMultiplyByConstantImageFilterIUS2DIUS2_cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIUS2DIUS2"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS2DIUS2_cast(*args)

class itkMultiplyByConstantImageFilterIUS3DIUS3(itkMultiplyByConstantImageFilterIUS3DIUS3_Superclass):
    """Proxy of C++ itkMultiplyByConstantImageFilterIUS3DIUS3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputConvertibleToOutputCheck = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS3DIUS3_InputConvertibleToOutputCheck
    Input1Input2OutputMultiplyOperatorCheck = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS3DIUS3_Input1Input2OutputMultiplyOperatorCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS3DIUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetConstant(self, *args):
        """SetConstant(self, double ct)"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS3DIUS3_SetConstant(self, *args)

    def GetConstant(self):
        """GetConstant(self) -> double"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS3DIUS3_GetConstant(self)

    __swig_destroy__ = _itkMultiplyByConstantImageFilterPython.delete_itkMultiplyByConstantImageFilterIUS3DIUS3
    def cast(*args):
        """cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIUS3DIUS3"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS3DIUS3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMultiplyByConstantImageFilterIUS3DIUS3"""
        return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS3DIUS3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMultiplyByConstantImageFilterIUS3DIUS3
        
        Create a new object of the class itkMultiplyByConstantImageFilterIUS3DIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMultiplyByConstantImageFilterIUS3DIUS3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMultiplyByConstantImageFilterIUS3DIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMultiplyByConstantImageFilterIUS3DIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMultiplyByConstantImageFilterIUS3DIUS3.SetConstant = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS3DIUS3_SetConstant,None,itkMultiplyByConstantImageFilterIUS3DIUS3)
itkMultiplyByConstantImageFilterIUS3DIUS3.GetConstant = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS3DIUS3_GetConstant,None,itkMultiplyByConstantImageFilterIUS3DIUS3)
itkMultiplyByConstantImageFilterIUS3DIUS3.GetPointer = new_instancemethod(_itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS3DIUS3_GetPointer,None,itkMultiplyByConstantImageFilterIUS3DIUS3)
itkMultiplyByConstantImageFilterIUS3DIUS3_swigregister = _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS3DIUS3_swigregister
itkMultiplyByConstantImageFilterIUS3DIUS3_swigregister(itkMultiplyByConstantImageFilterIUS3DIUS3)

def itkMultiplyByConstantImageFilterIUS3DIUS3___New_orig__():
  """itkMultiplyByConstantImageFilterIUS3DIUS3___New_orig__()"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS3DIUS3___New_orig__()

def itkMultiplyByConstantImageFilterIUS3DIUS3_cast(*args):
  """itkMultiplyByConstantImageFilterIUS3DIUS3_cast(itkLightObject obj) -> itkMultiplyByConstantImageFilterIUS3DIUS3"""
  return _itkMultiplyByConstantImageFilterPython.itkMultiplyByConstantImageFilterIUS3DIUS3_cast(*args)



