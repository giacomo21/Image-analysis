// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkOtsuMultipleThresholdsImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkOtsuMultipleThresholdsImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkOtsuMultipleThresholdsImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkOtsuMultipleThresholdsImageFilterJava
#endif
#ifdef SWIGLUA
%module itkOtsuMultipleThresholdsImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkOtsuMultipleThresholdsImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkOtsuMultipleThresholdsImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkOtsuMultipleThresholdsImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkOtsuMultipleThresholdsImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkOtsuMultipleThresholdsImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkOtsuMultipleThresholdsImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkOtsuMultipleThresholdsImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkOtsuMultipleThresholdsImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkOtsuMultipleThresholdsImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkOtsuMultipleThresholdsImageFilterPython
#endif
#ifdef SWIGR
%module itkOtsuMultipleThresholdsImageFilterR
#endif
#ifdef SWIGRUBY
%module itkOtsuMultipleThresholdsImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkOtsuMultipleThresholdsImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkOtsuMultipleThresholdsImageFilterTcl
#endif
#ifdef SWIGXML
%module itkOtsuMultipleThresholdsImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "SegmentationAndThreshold.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkImageToImageFilterA.i


%include itk.i
%include wrap_itkOtsuMultipleThresholdsImageFilter_ext.i


 class itkOtsuMultipleThresholdsImageFilterID2ID2 : public itkImageToImageFilterID2ID2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  OutputComparableCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     static itkOtsuMultipleThresholdsImageFilterID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     virtual void SetNumberOfThresholds(unsigned long _arg);
     virtual unsigned long GetNumberOfThresholds() const;
     virtual void SetLabelOffset(double _arg);
     virtual double GetLabelOffset() const;
     std::vector< double > const & GetThresholds() const;
   private:
     itkOtsuMultipleThresholdsImageFilterID2ID2(itkOtsuMultipleThresholdsImageFilterID2ID2 const & arg0);
     void operator=(itkOtsuMultipleThresholdsImageFilterID2ID2 const & arg0);
   protected:
     itkOtsuMultipleThresholdsImageFilterID2ID2();
     ~itkOtsuMultipleThresholdsImageFilterID2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void GenerateData();
 };


 class itkOtsuMultipleThresholdsImageFilterID2ID2_Pointer {
   public:
     itkOtsuMultipleThresholdsImageFilterID2ID2_Pointer();
     itkOtsuMultipleThresholdsImageFilterID2ID2_Pointer(itkOtsuMultipleThresholdsImageFilterID2ID2_Pointer const & p);
     itkOtsuMultipleThresholdsImageFilterID2ID2_Pointer(itkOtsuMultipleThresholdsImageFilterID2ID2 * p);
     ~itkOtsuMultipleThresholdsImageFilterID2ID2_Pointer();
     itkOtsuMultipleThresholdsImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuMultipleThresholdsImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkOtsuMultipleThresholdsImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkOtsuMultipleThresholdsImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkOtsuMultipleThresholdsImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkOtsuMultipleThresholdsImageFilterID2ID2_Pointer const & r) const;
     itkOtsuMultipleThresholdsImageFilterID2ID2_Pointer & operator=(itkOtsuMultipleThresholdsImageFilterID2ID2_Pointer const & r);
     itkOtsuMultipleThresholdsImageFilterID2ID2_Pointer & operator=(itkOtsuMultipleThresholdsImageFilterID2ID2 * r);
     itkOtsuMultipleThresholdsImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuMultipleThresholdsImageFilterID3ID3 : public itkImageToImageFilterID3ID3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  OutputComparableCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     static itkOtsuMultipleThresholdsImageFilterID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     virtual void SetNumberOfThresholds(unsigned long _arg);
     virtual unsigned long GetNumberOfThresholds() const;
     virtual void SetLabelOffset(double _arg);
     virtual double GetLabelOffset() const;
     std::vector< double > const & GetThresholds() const;
   private:
     itkOtsuMultipleThresholdsImageFilterID3ID3(itkOtsuMultipleThresholdsImageFilterID3ID3 const & arg0);
     void operator=(itkOtsuMultipleThresholdsImageFilterID3ID3 const & arg0);
   protected:
     itkOtsuMultipleThresholdsImageFilterID3ID3();
     ~itkOtsuMultipleThresholdsImageFilterID3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void GenerateData();
 };


 class itkOtsuMultipleThresholdsImageFilterID3ID3_Pointer {
   public:
     itkOtsuMultipleThresholdsImageFilterID3ID3_Pointer();
     itkOtsuMultipleThresholdsImageFilterID3ID3_Pointer(itkOtsuMultipleThresholdsImageFilterID3ID3_Pointer const & p);
     itkOtsuMultipleThresholdsImageFilterID3ID3_Pointer(itkOtsuMultipleThresholdsImageFilterID3ID3 * p);
     ~itkOtsuMultipleThresholdsImageFilterID3ID3_Pointer();
     itkOtsuMultipleThresholdsImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuMultipleThresholdsImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkOtsuMultipleThresholdsImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkOtsuMultipleThresholdsImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkOtsuMultipleThresholdsImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkOtsuMultipleThresholdsImageFilterID3ID3_Pointer const & r) const;
     itkOtsuMultipleThresholdsImageFilterID3ID3_Pointer & operator=(itkOtsuMultipleThresholdsImageFilterID3ID3_Pointer const & r);
     itkOtsuMultipleThresholdsImageFilterID3ID3_Pointer & operator=(itkOtsuMultipleThresholdsImageFilterID3ID3 * r);
     itkOtsuMultipleThresholdsImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuMultipleThresholdsImageFilterIF2IF2 : public itkImageToImageFilterIF2IF2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  OutputComparableCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     static itkOtsuMultipleThresholdsImageFilterIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     virtual void SetNumberOfThresholds(unsigned long _arg);
     virtual unsigned long GetNumberOfThresholds() const;
     virtual void SetLabelOffset(float _arg);
     virtual float GetLabelOffset() const;
     std::vector< double > const & GetThresholds() const;
   private:
     itkOtsuMultipleThresholdsImageFilterIF2IF2(itkOtsuMultipleThresholdsImageFilterIF2IF2 const & arg0);
     void operator=(itkOtsuMultipleThresholdsImageFilterIF2IF2 const & arg0);
   protected:
     itkOtsuMultipleThresholdsImageFilterIF2IF2();
     ~itkOtsuMultipleThresholdsImageFilterIF2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void GenerateData();
 };


 class itkOtsuMultipleThresholdsImageFilterIF2IF2_Pointer {
   public:
     itkOtsuMultipleThresholdsImageFilterIF2IF2_Pointer();
     itkOtsuMultipleThresholdsImageFilterIF2IF2_Pointer(itkOtsuMultipleThresholdsImageFilterIF2IF2_Pointer const & p);
     itkOtsuMultipleThresholdsImageFilterIF2IF2_Pointer(itkOtsuMultipleThresholdsImageFilterIF2IF2 * p);
     ~itkOtsuMultipleThresholdsImageFilterIF2IF2_Pointer();
     itkOtsuMultipleThresholdsImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuMultipleThresholdsImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkOtsuMultipleThresholdsImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkOtsuMultipleThresholdsImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkOtsuMultipleThresholdsImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkOtsuMultipleThresholdsImageFilterIF2IF2_Pointer const & r) const;
     itkOtsuMultipleThresholdsImageFilterIF2IF2_Pointer & operator=(itkOtsuMultipleThresholdsImageFilterIF2IF2_Pointer const & r);
     itkOtsuMultipleThresholdsImageFilterIF2IF2_Pointer & operator=(itkOtsuMultipleThresholdsImageFilterIF2IF2 * r);
     itkOtsuMultipleThresholdsImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuMultipleThresholdsImageFilterIF3IF3 : public itkImageToImageFilterIF3IF3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  OutputComparableCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     static itkOtsuMultipleThresholdsImageFilterIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     virtual void SetNumberOfThresholds(unsigned long _arg);
     virtual unsigned long GetNumberOfThresholds() const;
     virtual void SetLabelOffset(float _arg);
     virtual float GetLabelOffset() const;
     std::vector< double > const & GetThresholds() const;
   private:
     itkOtsuMultipleThresholdsImageFilterIF3IF3(itkOtsuMultipleThresholdsImageFilterIF3IF3 const & arg0);
     void operator=(itkOtsuMultipleThresholdsImageFilterIF3IF3 const & arg0);
   protected:
     itkOtsuMultipleThresholdsImageFilterIF3IF3();
     ~itkOtsuMultipleThresholdsImageFilterIF3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void GenerateData();
 };


 class itkOtsuMultipleThresholdsImageFilterIF3IF3_Pointer {
   public:
     itkOtsuMultipleThresholdsImageFilterIF3IF3_Pointer();
     itkOtsuMultipleThresholdsImageFilterIF3IF3_Pointer(itkOtsuMultipleThresholdsImageFilterIF3IF3_Pointer const & p);
     itkOtsuMultipleThresholdsImageFilterIF3IF3_Pointer(itkOtsuMultipleThresholdsImageFilterIF3IF3 * p);
     ~itkOtsuMultipleThresholdsImageFilterIF3IF3_Pointer();
     itkOtsuMultipleThresholdsImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuMultipleThresholdsImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkOtsuMultipleThresholdsImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkOtsuMultipleThresholdsImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkOtsuMultipleThresholdsImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkOtsuMultipleThresholdsImageFilterIF3IF3_Pointer const & r) const;
     itkOtsuMultipleThresholdsImageFilterIF3IF3_Pointer & operator=(itkOtsuMultipleThresholdsImageFilterIF3IF3_Pointer const & r);
     itkOtsuMultipleThresholdsImageFilterIF3IF3_Pointer & operator=(itkOtsuMultipleThresholdsImageFilterIF3IF3 * r);
     itkOtsuMultipleThresholdsImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuMultipleThresholdsImageFilterIUC2IUC2 : public itkImageToImageFilterIUC2IUC2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  OutputComparableCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     static itkOtsuMultipleThresholdsImageFilterIUC2IUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     virtual void SetNumberOfThresholds(unsigned long _arg);
     virtual unsigned long GetNumberOfThresholds() const;
     virtual void SetLabelOffset(unsigned char _arg);
     virtual unsigned char GetLabelOffset() const;
     std::vector< double > const & GetThresholds() const;
   private:
     itkOtsuMultipleThresholdsImageFilterIUC2IUC2(itkOtsuMultipleThresholdsImageFilterIUC2IUC2 const & arg0);
     void operator=(itkOtsuMultipleThresholdsImageFilterIUC2IUC2 const & arg0);
   protected:
     itkOtsuMultipleThresholdsImageFilterIUC2IUC2();
     ~itkOtsuMultipleThresholdsImageFilterIUC2IUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void GenerateData();
 };


 class itkOtsuMultipleThresholdsImageFilterIUC2IUC2_Pointer {
   public:
     itkOtsuMultipleThresholdsImageFilterIUC2IUC2_Pointer();
     itkOtsuMultipleThresholdsImageFilterIUC2IUC2_Pointer(itkOtsuMultipleThresholdsImageFilterIUC2IUC2_Pointer const & p);
     itkOtsuMultipleThresholdsImageFilterIUC2IUC2_Pointer(itkOtsuMultipleThresholdsImageFilterIUC2IUC2 * p);
     ~itkOtsuMultipleThresholdsImageFilterIUC2IUC2_Pointer();
     itkOtsuMultipleThresholdsImageFilterIUC2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuMultipleThresholdsImageFilterIUC2IUC2 * GetPointer() const;
     bool operator<(itkOtsuMultipleThresholdsImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>(itkOtsuMultipleThresholdsImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator<=(itkOtsuMultipleThresholdsImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>=(itkOtsuMultipleThresholdsImageFilterIUC2IUC2_Pointer const & r) const;
     itkOtsuMultipleThresholdsImageFilterIUC2IUC2_Pointer & operator=(itkOtsuMultipleThresholdsImageFilterIUC2IUC2_Pointer const & r);
     itkOtsuMultipleThresholdsImageFilterIUC2IUC2_Pointer & operator=(itkOtsuMultipleThresholdsImageFilterIUC2IUC2 * r);
     itkOtsuMultipleThresholdsImageFilterIUC2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuMultipleThresholdsImageFilterIUC3IUC3 : public itkImageToImageFilterIUC3IUC3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  OutputComparableCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     static itkOtsuMultipleThresholdsImageFilterIUC3IUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     virtual void SetNumberOfThresholds(unsigned long _arg);
     virtual unsigned long GetNumberOfThresholds() const;
     virtual void SetLabelOffset(unsigned char _arg);
     virtual unsigned char GetLabelOffset() const;
     std::vector< double > const & GetThresholds() const;
   private:
     itkOtsuMultipleThresholdsImageFilterIUC3IUC3(itkOtsuMultipleThresholdsImageFilterIUC3IUC3 const & arg0);
     void operator=(itkOtsuMultipleThresholdsImageFilterIUC3IUC3 const & arg0);
   protected:
     itkOtsuMultipleThresholdsImageFilterIUC3IUC3();
     ~itkOtsuMultipleThresholdsImageFilterIUC3IUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void GenerateData();
 };


 class itkOtsuMultipleThresholdsImageFilterIUC3IUC3_Pointer {
   public:
     itkOtsuMultipleThresholdsImageFilterIUC3IUC3_Pointer();
     itkOtsuMultipleThresholdsImageFilterIUC3IUC3_Pointer(itkOtsuMultipleThresholdsImageFilterIUC3IUC3_Pointer const & p);
     itkOtsuMultipleThresholdsImageFilterIUC3IUC3_Pointer(itkOtsuMultipleThresholdsImageFilterIUC3IUC3 * p);
     ~itkOtsuMultipleThresholdsImageFilterIUC3IUC3_Pointer();
     itkOtsuMultipleThresholdsImageFilterIUC3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuMultipleThresholdsImageFilterIUC3IUC3 * GetPointer() const;
     bool operator<(itkOtsuMultipleThresholdsImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>(itkOtsuMultipleThresholdsImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator<=(itkOtsuMultipleThresholdsImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>=(itkOtsuMultipleThresholdsImageFilterIUC3IUC3_Pointer const & r) const;
     itkOtsuMultipleThresholdsImageFilterIUC3IUC3_Pointer & operator=(itkOtsuMultipleThresholdsImageFilterIUC3IUC3_Pointer const & r);
     itkOtsuMultipleThresholdsImageFilterIUC3IUC3_Pointer & operator=(itkOtsuMultipleThresholdsImageFilterIUC3IUC3 * r);
     itkOtsuMultipleThresholdsImageFilterIUC3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuMultipleThresholdsImageFilterIUL2IUL2 : public itkImageToImageFilterIUL2IUL2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  OutputComparableCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     static itkOtsuMultipleThresholdsImageFilterIUL2IUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     virtual void SetNumberOfThresholds(unsigned long _arg);
     virtual unsigned long GetNumberOfThresholds() const;
     virtual void SetLabelOffset(unsigned long _arg);
     virtual unsigned long GetLabelOffset() const;
     std::vector< double > const & GetThresholds() const;
   private:
     itkOtsuMultipleThresholdsImageFilterIUL2IUL2(itkOtsuMultipleThresholdsImageFilterIUL2IUL2 const & arg0);
     void operator=(itkOtsuMultipleThresholdsImageFilterIUL2IUL2 const & arg0);
   protected:
     itkOtsuMultipleThresholdsImageFilterIUL2IUL2();
     ~itkOtsuMultipleThresholdsImageFilterIUL2IUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void GenerateData();
 };


 class itkOtsuMultipleThresholdsImageFilterIUL2IUL2_Pointer {
   public:
     itkOtsuMultipleThresholdsImageFilterIUL2IUL2_Pointer();
     itkOtsuMultipleThresholdsImageFilterIUL2IUL2_Pointer(itkOtsuMultipleThresholdsImageFilterIUL2IUL2_Pointer const & p);
     itkOtsuMultipleThresholdsImageFilterIUL2IUL2_Pointer(itkOtsuMultipleThresholdsImageFilterIUL2IUL2 * p);
     ~itkOtsuMultipleThresholdsImageFilterIUL2IUL2_Pointer();
     itkOtsuMultipleThresholdsImageFilterIUL2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuMultipleThresholdsImageFilterIUL2IUL2 * GetPointer() const;
     bool operator<(itkOtsuMultipleThresholdsImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>(itkOtsuMultipleThresholdsImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator<=(itkOtsuMultipleThresholdsImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>=(itkOtsuMultipleThresholdsImageFilterIUL2IUL2_Pointer const & r) const;
     itkOtsuMultipleThresholdsImageFilterIUL2IUL2_Pointer & operator=(itkOtsuMultipleThresholdsImageFilterIUL2IUL2_Pointer const & r);
     itkOtsuMultipleThresholdsImageFilterIUL2IUL2_Pointer & operator=(itkOtsuMultipleThresholdsImageFilterIUL2IUL2 * r);
     itkOtsuMultipleThresholdsImageFilterIUL2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuMultipleThresholdsImageFilterIUL3IUL3 : public itkImageToImageFilterIUL3IUL3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  OutputComparableCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     static itkOtsuMultipleThresholdsImageFilterIUL3IUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     virtual void SetNumberOfThresholds(unsigned long _arg);
     virtual unsigned long GetNumberOfThresholds() const;
     virtual void SetLabelOffset(unsigned long _arg);
     virtual unsigned long GetLabelOffset() const;
     std::vector< double > const & GetThresholds() const;
   private:
     itkOtsuMultipleThresholdsImageFilterIUL3IUL3(itkOtsuMultipleThresholdsImageFilterIUL3IUL3 const & arg0);
     void operator=(itkOtsuMultipleThresholdsImageFilterIUL3IUL3 const & arg0);
   protected:
     itkOtsuMultipleThresholdsImageFilterIUL3IUL3();
     ~itkOtsuMultipleThresholdsImageFilterIUL3IUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void GenerateData();
 };


 class itkOtsuMultipleThresholdsImageFilterIUL3IUL3_Pointer {
   public:
     itkOtsuMultipleThresholdsImageFilterIUL3IUL3_Pointer();
     itkOtsuMultipleThresholdsImageFilterIUL3IUL3_Pointer(itkOtsuMultipleThresholdsImageFilterIUL3IUL3_Pointer const & p);
     itkOtsuMultipleThresholdsImageFilterIUL3IUL3_Pointer(itkOtsuMultipleThresholdsImageFilterIUL3IUL3 * p);
     ~itkOtsuMultipleThresholdsImageFilterIUL3IUL3_Pointer();
     itkOtsuMultipleThresholdsImageFilterIUL3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuMultipleThresholdsImageFilterIUL3IUL3 * GetPointer() const;
     bool operator<(itkOtsuMultipleThresholdsImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>(itkOtsuMultipleThresholdsImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator<=(itkOtsuMultipleThresholdsImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>=(itkOtsuMultipleThresholdsImageFilterIUL3IUL3_Pointer const & r) const;
     itkOtsuMultipleThresholdsImageFilterIUL3IUL3_Pointer & operator=(itkOtsuMultipleThresholdsImageFilterIUL3IUL3_Pointer const & r);
     itkOtsuMultipleThresholdsImageFilterIUL3IUL3_Pointer & operator=(itkOtsuMultipleThresholdsImageFilterIUL3IUL3 * r);
     itkOtsuMultipleThresholdsImageFilterIUL3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuMultipleThresholdsImageFilterIUS2IUS2 : public itkImageToImageFilterIUS2IUS2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  OutputComparableCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     static itkOtsuMultipleThresholdsImageFilterIUS2IUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     virtual void SetNumberOfThresholds(unsigned long _arg);
     virtual unsigned long GetNumberOfThresholds() const;
     virtual void SetLabelOffset(unsigned short _arg);
     virtual unsigned short GetLabelOffset() const;
     std::vector< double > const & GetThresholds() const;
   private:
     itkOtsuMultipleThresholdsImageFilterIUS2IUS2(itkOtsuMultipleThresholdsImageFilterIUS2IUS2 const & arg0);
     void operator=(itkOtsuMultipleThresholdsImageFilterIUS2IUS2 const & arg0);
   protected:
     itkOtsuMultipleThresholdsImageFilterIUS2IUS2();
     ~itkOtsuMultipleThresholdsImageFilterIUS2IUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void GenerateData();
 };


 class itkOtsuMultipleThresholdsImageFilterIUS2IUS2_Pointer {
   public:
     itkOtsuMultipleThresholdsImageFilterIUS2IUS2_Pointer();
     itkOtsuMultipleThresholdsImageFilterIUS2IUS2_Pointer(itkOtsuMultipleThresholdsImageFilterIUS2IUS2_Pointer const & p);
     itkOtsuMultipleThresholdsImageFilterIUS2IUS2_Pointer(itkOtsuMultipleThresholdsImageFilterIUS2IUS2 * p);
     ~itkOtsuMultipleThresholdsImageFilterIUS2IUS2_Pointer();
     itkOtsuMultipleThresholdsImageFilterIUS2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuMultipleThresholdsImageFilterIUS2IUS2 * GetPointer() const;
     bool operator<(itkOtsuMultipleThresholdsImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>(itkOtsuMultipleThresholdsImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator<=(itkOtsuMultipleThresholdsImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>=(itkOtsuMultipleThresholdsImageFilterIUS2IUS2_Pointer const & r) const;
     itkOtsuMultipleThresholdsImageFilterIUS2IUS2_Pointer & operator=(itkOtsuMultipleThresholdsImageFilterIUS2IUS2_Pointer const & r);
     itkOtsuMultipleThresholdsImageFilterIUS2IUS2_Pointer & operator=(itkOtsuMultipleThresholdsImageFilterIUS2IUS2 * r);
     itkOtsuMultipleThresholdsImageFilterIUS2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuMultipleThresholdsImageFilterIUS3IUS3 : public itkImageToImageFilterIUS3IUS3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  OutputComparableCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     static itkOtsuMultipleThresholdsImageFilterIUS3IUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     virtual void SetNumberOfThresholds(unsigned long _arg);
     virtual unsigned long GetNumberOfThresholds() const;
     virtual void SetLabelOffset(unsigned short _arg);
     virtual unsigned short GetLabelOffset() const;
     std::vector< double > const & GetThresholds() const;
   private:
     itkOtsuMultipleThresholdsImageFilterIUS3IUS3(itkOtsuMultipleThresholdsImageFilterIUS3IUS3 const & arg0);
     void operator=(itkOtsuMultipleThresholdsImageFilterIUS3IUS3 const & arg0);
   protected:
     itkOtsuMultipleThresholdsImageFilterIUS3IUS3();
     ~itkOtsuMultipleThresholdsImageFilterIUS3IUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateInputRequestedRegion();
     virtual void GenerateData();
 };


 class itkOtsuMultipleThresholdsImageFilterIUS3IUS3_Pointer {
   public:
     itkOtsuMultipleThresholdsImageFilterIUS3IUS3_Pointer();
     itkOtsuMultipleThresholdsImageFilterIUS3IUS3_Pointer(itkOtsuMultipleThresholdsImageFilterIUS3IUS3_Pointer const & p);
     itkOtsuMultipleThresholdsImageFilterIUS3IUS3_Pointer(itkOtsuMultipleThresholdsImageFilterIUS3IUS3 * p);
     ~itkOtsuMultipleThresholdsImageFilterIUS3IUS3_Pointer();
     itkOtsuMultipleThresholdsImageFilterIUS3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuMultipleThresholdsImageFilterIUS3IUS3 * GetPointer() const;
     bool operator<(itkOtsuMultipleThresholdsImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>(itkOtsuMultipleThresholdsImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator<=(itkOtsuMultipleThresholdsImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>=(itkOtsuMultipleThresholdsImageFilterIUS3IUS3_Pointer const & r) const;
     itkOtsuMultipleThresholdsImageFilterIUS3IUS3_Pointer & operator=(itkOtsuMultipleThresholdsImageFilterIUS3IUS3_Pointer const & r);
     itkOtsuMultipleThresholdsImageFilterIUS3IUS3_Pointer & operator=(itkOtsuMultipleThresholdsImageFilterIUS3IUS3 * r);
     itkOtsuMultipleThresholdsImageFilterIUS3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


