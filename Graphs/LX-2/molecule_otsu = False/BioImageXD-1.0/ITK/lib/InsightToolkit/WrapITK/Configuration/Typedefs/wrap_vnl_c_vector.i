// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module vnl_c_vectorChicken
#endif
#ifdef SWIGCSHARP
%module vnl_c_vectorCsharp
#endif
#ifdef SWIGGUILE
%module vnl_c_vectorGuile
#endif
#ifdef SWIGJAVA
%module vnl_c_vectorJava
#endif
#ifdef SWIGLUA
%module vnl_c_vectorLua
#endif
#ifdef SWIGMODULA3
%module vnl_c_vectorModula3
#endif
#ifdef SWIGMZSCHEME
%module vnl_c_vectorMzscheme
#endif
#ifdef SWIGOCAML
%module vnl_c_vectorOcaml
#endif
#ifdef SWIGPERL
%module vnl_c_vectorPerl
#endif
#ifdef SWIGPERL5
%module vnl_c_vectorPerl5
#endif
#ifdef SWIGPHP
%module vnl_c_vectorPhp
#endif
#ifdef SWIGPHP4
%module vnl_c_vectorPhp4
#endif
#ifdef SWIGPHP5
%module vnl_c_vectorPhp5
#endif
#ifdef SWIGPIKE
%module vnl_c_vectorPike
#endif
#ifdef SWIGPYTHON
%module vnl_c_vectorPython
#endif
#ifdef SWIGR
%module vnl_c_vectorR
#endif
#ifdef SWIGRUBY
%module vnl_c_vectorRuby
#endif
#ifdef SWIGSEXP
%module vnl_c_vectorSexp
#endif
#ifdef SWIGTCL
%module vnl_c_vectorTcl
#endif
#ifdef SWIGXML
%module vnl_c_vectorXml
#endif

%{
#include "VXLNumerics.includes"
%}


%{
%}




%import wrap_vcl_complex.i


%include itk.i
%include wrap_vnl_c_vector_ext.i


 class vnl_c_vectorD {
   public:
     ~vnl_c_vectorD();
     vnl_c_vectorD & operator=(vnl_c_vectorD const & arg0);
     vnl_c_vectorD(vnl_c_vectorD const & arg0);
     vnl_c_vectorD();
     static double sum(double const * v, unsigned int n);
     static double squared_magnitude(double const * p, unsigned int n);
     static void normalize(double * arg0, unsigned int n);
     static void copy(double const * x, double * y, unsigned int arg2);
     static void scale(double const * x, double * y, unsigned int arg2, double const & arg3);
     static void add(double const * x, double const * y, double * z, unsigned int arg3);
     static void add(double const * x, double const & y, double * z, unsigned int arg3);
     static void subtract(double const * x, double const * y, double * z, unsigned int arg3);
     static void subtract(double const * x, double const & y, double * z, unsigned int arg3);
     static void multiply(double const * x, double const * y, double * z, unsigned int arg3);
     static void multiply(double const * x, double const & y, double * z, unsigned int arg3);
     static void divide(double const * x, double const * y, double * z, unsigned int arg3);
     static void divide(double const * x, double const & y, double * z, unsigned int arg3);
     static void negate(double const * x, double * y, unsigned int arg2);
     static void invert(double const * x, double * y, unsigned int arg2);
     static void saxpy(double const & a, double const * x, double * y, unsigned int arg3);
     static void fill(double * x, unsigned int arg1, double const & v);
     static void reverse(double * x, unsigned int arg1);
     static double dot_product(double const * arg0, double const * arg1, unsigned int arg2);
     static double inner_product(double const * arg0, double const * arg1, unsigned int arg2);
     static void conjugate(double const * arg0, double * arg1, unsigned int arg2);
     static double max_value(double const * arg0, unsigned int arg1);
     static double min_value(double const * arg0, unsigned int arg1);
     static double mean(double const * p, unsigned int n);
     static double std(double const * p, unsigned int n);
     static double sum_sq_diff_means(double const * v, unsigned int n);
     static double one_norm(double const * p, unsigned int n);
     static double two_norm(double const * p, unsigned int n);
     static double inf_norm(double const * p, unsigned int n);
     static double two_nrm2(double const * p, unsigned int n);
     static double rms_norm(double const * p, unsigned int n);
     static double euclid_dist_sq(double const * arg0, double const * arg1, unsigned int arg2);
     static double * * allocate_Tptr(int n);
     static double * allocate_T(int n);
     static void deallocate(double * * arg0, int n_when_allocated);
     static void deallocate(double * arg0, int n_when_allocated);
   private:
   protected:
 };


 class vnl_c_vectorF {
   public:
     ~vnl_c_vectorF();
     vnl_c_vectorF & operator=(vnl_c_vectorF const & arg0);
     vnl_c_vectorF(vnl_c_vectorF const & arg0);
     vnl_c_vectorF();
     static float sum(float const * v, unsigned int n);
     static float squared_magnitude(float const * p, unsigned int n);
     static void normalize(float * arg0, unsigned int n);
     static void copy(float const * x, float * y, unsigned int arg2);
     static void scale(float const * x, float * y, unsigned int arg2, float const & arg3);
     static void add(float const * x, float const * y, float * z, unsigned int arg3);
     static void add(float const * x, float const & y, float * z, unsigned int arg3);
     static void subtract(float const * x, float const * y, float * z, unsigned int arg3);
     static void subtract(float const * x, float const & y, float * z, unsigned int arg3);
     static void multiply(float const * x, float const * y, float * z, unsigned int arg3);
     static void multiply(float const * x, float const & y, float * z, unsigned int arg3);
     static void divide(float const * x, float const * y, float * z, unsigned int arg3);
     static void divide(float const * x, float const & y, float * z, unsigned int arg3);
     static void negate(float const * x, float * y, unsigned int arg2);
     static void invert(float const * x, float * y, unsigned int arg2);
     static void saxpy(float const & a, float const * x, float * y, unsigned int arg3);
     static void fill(float * x, unsigned int arg1, float const & v);
     static void reverse(float * x, unsigned int arg1);
     static float dot_product(float const * arg0, float const * arg1, unsigned int arg2);
     static float inner_product(float const * arg0, float const * arg1, unsigned int arg2);
     static void conjugate(float const * arg0, float * arg1, unsigned int arg2);
     static float max_value(float const * arg0, unsigned int arg1);
     static float min_value(float const * arg0, unsigned int arg1);
     static float mean(float const * p, unsigned int n);
     static double std(float const * p, unsigned int n);
     static float sum_sq_diff_means(float const * v, unsigned int n);
     static float one_norm(float const * p, unsigned int n);
     static float two_norm(float const * p, unsigned int n);
     static float inf_norm(float const * p, unsigned int n);
     static float two_nrm2(float const * p, unsigned int n);
     static float rms_norm(float const * p, unsigned int n);
     static float euclid_dist_sq(float const * arg0, float const * arg1, unsigned int arg2);
     static float * * allocate_Tptr(int n);
     static float * allocate_T(int n);
     static void deallocate(float * * arg0, int n_when_allocated);
     static void deallocate(float * arg0, int n_when_allocated);
   private:
   protected:
 };


 class vnl_c_vectorLD {
   public:
     ~vnl_c_vectorLD();
     vnl_c_vectorLD & operator=(vnl_c_vectorLD const & arg0);
     vnl_c_vectorLD(vnl_c_vectorLD const & arg0);
     vnl_c_vectorLD();
     static long double sum(long double const * v, unsigned int n);
     static long double squared_magnitude(long double const * p, unsigned int n);
     static void normalize(long double * arg0, unsigned int n);
     static void copy(long double const * x, long double * y, unsigned int arg2);
     static void scale(long double const * x, long double * y, unsigned int arg2, long double const & arg3);
     static void add(long double const * x, long double const * y, long double * z, unsigned int arg3);
     static void add(long double const * x, long double const & y, long double * z, unsigned int arg3);
     static void subtract(long double const * x, long double const * y, long double * z, unsigned int arg3);
     static void subtract(long double const * x, long double const & y, long double * z, unsigned int arg3);
     static void multiply(long double const * x, long double const * y, long double * z, unsigned int arg3);
     static void multiply(long double const * x, long double const & y, long double * z, unsigned int arg3);
     static void divide(long double const * x, long double const * y, long double * z, unsigned int arg3);
     static void divide(long double const * x, long double const & y, long double * z, unsigned int arg3);
     static void negate(long double const * x, long double * y, unsigned int arg2);
     static void invert(long double const * x, long double * y, unsigned int arg2);
     static void saxpy(long double const & a, long double const * x, long double * y, unsigned int arg3);
     static void fill(long double * x, unsigned int arg1, long double const & v);
     static void reverse(long double * x, unsigned int arg1);
     static long double dot_product(long double const * arg0, long double const * arg1, unsigned int arg2);
     static long double inner_product(long double const * arg0, long double const * arg1, unsigned int arg2);
     static void conjugate(long double const * arg0, long double * arg1, unsigned int arg2);
     static long double max_value(long double const * arg0, unsigned int arg1);
     static long double min_value(long double const * arg0, unsigned int arg1);
     static long double mean(long double const * p, unsigned int n);
     static long double std(long double const * p, unsigned int n);
     static long double sum_sq_diff_means(long double const * v, unsigned int n);
     static long double one_norm(long double const * p, unsigned int n);
     static long double two_norm(long double const * p, unsigned int n);
     static long double inf_norm(long double const * p, unsigned int n);
     static long double two_nrm2(long double const * p, unsigned int n);
     static long double rms_norm(long double const * p, unsigned int n);
     static long double euclid_dist_sq(long double const * arg0, long double const * arg1, unsigned int arg2);
     static long double * * allocate_Tptr(int n);
     static long double * allocate_T(int n);
     static void deallocate(long double * * arg0, int n_when_allocated);
     static void deallocate(long double * arg0, int n_when_allocated);
   private:
   protected:
 };


 class vnl_c_vectorSC {
   public:
     ~vnl_c_vectorSC();
     vnl_c_vectorSC & operator=(vnl_c_vectorSC const & arg0);
     vnl_c_vectorSC(vnl_c_vectorSC const & arg0);
     vnl_c_vectorSC();
     static signed char sum(signed char const * v, unsigned int n);
     static unsigned char squared_magnitude(signed char const * p, unsigned int n);
     static void normalize(signed char * arg0, unsigned int n);
     static void copy(signed char const * x, signed char * y, unsigned int arg2);
     static void scale(signed char const * x, signed char * y, unsigned int arg2, signed char const & arg3);
     static void add(signed char const * x, signed char const * y, signed char * z, unsigned int arg3);
     static void add(signed char const * x, signed char const & y, signed char * z, unsigned int arg3);
     static void subtract(signed char const * x, signed char const * y, signed char * z, unsigned int arg3);
     static void subtract(signed char const * x, signed char const & y, signed char * z, unsigned int arg3);
     static void multiply(signed char const * x, signed char const * y, signed char * z, unsigned int arg3);
     static void multiply(signed char const * x, signed char const & y, signed char * z, unsigned int arg3);
     static void divide(signed char const * x, signed char const * y, signed char * z, unsigned int arg3);
     static void divide(signed char const * x, signed char const & y, signed char * z, unsigned int arg3);
     static void negate(signed char const * x, signed char * y, unsigned int arg2);
     static void invert(signed char const * x, signed char * y, unsigned int arg2);
     static void saxpy(signed char const & a, signed char const * x, signed char * y, unsigned int arg3);
     static void fill(signed char * x, unsigned int arg1, signed char const & v);
     static void reverse(signed char * x, unsigned int arg1);
     static signed char dot_product(signed char const * arg0, signed char const * arg1, unsigned int arg2);
     static signed char inner_product(signed char const * arg0, signed char const * arg1, unsigned int arg2);
     static void conjugate(signed char const * arg0, signed char * arg1, unsigned int arg2);
     static signed char max_value(signed char const * arg0, unsigned int arg1);
     static signed char min_value(signed char const * arg0, unsigned int arg1);
     static signed char mean(signed char const * p, unsigned int n);
     static double std(signed char const * p, unsigned int n);
     static signed char sum_sq_diff_means(signed char const * v, unsigned int n);
     static unsigned char one_norm(signed char const * p, unsigned int n);
     static unsigned char two_norm(signed char const * p, unsigned int n);
     static unsigned char inf_norm(signed char const * p, unsigned int n);
     static unsigned char two_nrm2(signed char const * p, unsigned int n);
     static unsigned char rms_norm(signed char const * p, unsigned int n);
     static signed char euclid_dist_sq(signed char const * arg0, signed char const * arg1, unsigned int arg2);
     static signed char * * allocate_Tptr(int n);
     static signed char * allocate_T(int n);
     static void deallocate(signed char * * arg0, int n_when_allocated);
     static void deallocate(signed char * arg0, int n_when_allocated);
   private:
   protected:
 };


 class vnl_c_vectorSI {
   public:
     ~vnl_c_vectorSI();
     vnl_c_vectorSI & operator=(vnl_c_vectorSI const & arg0);
     vnl_c_vectorSI(vnl_c_vectorSI const & arg0);
     vnl_c_vectorSI();
     static int sum(int const * v, unsigned int n);
     static unsigned int squared_magnitude(int const * p, unsigned int n);
     static void normalize(int * arg0, unsigned int n);
     static void copy(int const * x, int * y, unsigned int arg2);
     static void scale(int const * x, int * y, unsigned int arg2, int const & arg3);
     static void add(int const * x, int const * y, int * z, unsigned int arg3);
     static void add(int const * x, int const & y, int * z, unsigned int arg3);
     static void subtract(int const * x, int const * y, int * z, unsigned int arg3);
     static void subtract(int const * x, int const & y, int * z, unsigned int arg3);
     static void multiply(int const * x, int const * y, int * z, unsigned int arg3);
     static void multiply(int const * x, int const & y, int * z, unsigned int arg3);
     static void divide(int const * x, int const * y, int * z, unsigned int arg3);
     static void divide(int const * x, int const & y, int * z, unsigned int arg3);
     static void negate(int const * x, int * y, unsigned int arg2);
     static void invert(int const * x, int * y, unsigned int arg2);
     static void saxpy(int const & a, int const * x, int * y, unsigned int arg3);
     static void fill(int * x, unsigned int arg1, int const & v);
     static void reverse(int * x, unsigned int arg1);
     static int dot_product(int const * arg0, int const * arg1, unsigned int arg2);
     static int inner_product(int const * arg0, int const * arg1, unsigned int arg2);
     static void conjugate(int const * arg0, int * arg1, unsigned int arg2);
     static int max_value(int const * arg0, unsigned int arg1);
     static int min_value(int const * arg0, unsigned int arg1);
     static int mean(int const * p, unsigned int n);
     static double std(int const * p, unsigned int n);
     static int sum_sq_diff_means(int const * v, unsigned int n);
     static unsigned int one_norm(int const * p, unsigned int n);
     static unsigned int two_norm(int const * p, unsigned int n);
     static unsigned int inf_norm(int const * p, unsigned int n);
     static unsigned int two_nrm2(int const * p, unsigned int n);
     static unsigned int rms_norm(int const * p, unsigned int n);
     static int euclid_dist_sq(int const * arg0, int const * arg1, unsigned int arg2);
     static int * * allocate_Tptr(int n);
     static int * allocate_T(int n);
     static void deallocate(int * * arg0, int n_when_allocated);
     static void deallocate(int * arg0, int n_when_allocated);
   private:
   protected:
 };


 class vnl_c_vectorSL {
   public:
     ~vnl_c_vectorSL();
     vnl_c_vectorSL & operator=(vnl_c_vectorSL const & arg0);
     vnl_c_vectorSL(vnl_c_vectorSL const & arg0);
     vnl_c_vectorSL();
     static long sum(long const * v, unsigned int n);
     static unsigned long squared_magnitude(long const * p, unsigned int n);
     static void normalize(long * arg0, unsigned int n);
     static void copy(long const * x, long * y, unsigned int arg2);
     static void scale(long const * x, long * y, unsigned int arg2, long const & arg3);
     static void add(long const * x, long const * y, long * z, unsigned int arg3);
     static void add(long const * x, long const & y, long * z, unsigned int arg3);
     static void subtract(long const * x, long const * y, long * z, unsigned int arg3);
     static void subtract(long const * x, long const & y, long * z, unsigned int arg3);
     static void multiply(long const * x, long const * y, long * z, unsigned int arg3);
     static void multiply(long const * x, long const & y, long * z, unsigned int arg3);
     static void divide(long const * x, long const * y, long * z, unsigned int arg3);
     static void divide(long const * x, long const & y, long * z, unsigned int arg3);
     static void negate(long const * x, long * y, unsigned int arg2);
     static void invert(long const * x, long * y, unsigned int arg2);
     static void saxpy(long const & a, long const * x, long * y, unsigned int arg3);
     static void fill(long * x, unsigned int arg1, long const & v);
     static void reverse(long * x, unsigned int arg1);
     static long dot_product(long const * arg0, long const * arg1, unsigned int arg2);
     static long inner_product(long const * arg0, long const * arg1, unsigned int arg2);
     static void conjugate(long const * arg0, long * arg1, unsigned int arg2);
     static long max_value(long const * arg0, unsigned int arg1);
     static long min_value(long const * arg0, unsigned int arg1);
     static long mean(long const * p, unsigned int n);
     static double std(long const * p, unsigned int n);
     static long sum_sq_diff_means(long const * v, unsigned int n);
     static unsigned long one_norm(long const * p, unsigned int n);
     static unsigned long two_norm(long const * p, unsigned int n);
     static unsigned long inf_norm(long const * p, unsigned int n);
     static unsigned long two_nrm2(long const * p, unsigned int n);
     static unsigned long rms_norm(long const * p, unsigned int n);
     static long euclid_dist_sq(long const * arg0, long const * arg1, unsigned int arg2);
     static long * * allocate_Tptr(int n);
     static long * allocate_T(int n);
     static void deallocate(long * * arg0, int n_when_allocated);
     static void deallocate(long * arg0, int n_when_allocated);
   private:
   protected:
 };


 class vnl_c_vectorUC {
   public:
     ~vnl_c_vectorUC();
     vnl_c_vectorUC & operator=(vnl_c_vectorUC const & arg0);
     vnl_c_vectorUC(vnl_c_vectorUC const & arg0);
     vnl_c_vectorUC();
     static unsigned char sum(unsigned char const * v, unsigned int n);
     static unsigned char squared_magnitude(unsigned char const * p, unsigned int n);
     static void normalize(unsigned char * arg0, unsigned int n);
     static void copy(unsigned char const * x, unsigned char * y, unsigned int arg2);
     static void scale(unsigned char const * x, unsigned char * y, unsigned int arg2, unsigned char const & arg3);
     static void add(unsigned char const * x, unsigned char const * y, unsigned char * z, unsigned int arg3);
     static void add(unsigned char const * x, unsigned char const & y, unsigned char * z, unsigned int arg3);
     static void subtract(unsigned char const * x, unsigned char const * y, unsigned char * z, unsigned int arg3);
     static void subtract(unsigned char const * x, unsigned char const & y, unsigned char * z, unsigned int arg3);
     static void multiply(unsigned char const * x, unsigned char const * y, unsigned char * z, unsigned int arg3);
     static void multiply(unsigned char const * x, unsigned char const & y, unsigned char * z, unsigned int arg3);
     static void divide(unsigned char const * x, unsigned char const * y, unsigned char * z, unsigned int arg3);
     static void divide(unsigned char const * x, unsigned char const & y, unsigned char * z, unsigned int arg3);
     static void negate(unsigned char const * x, unsigned char * y, unsigned int arg2);
     static void invert(unsigned char const * x, unsigned char * y, unsigned int arg2);
     static void saxpy(unsigned char const & a, unsigned char const * x, unsigned char * y, unsigned int arg3);
     static void fill(unsigned char * x, unsigned int arg1, unsigned char const & v);
     static void reverse(unsigned char * x, unsigned int arg1);
     static unsigned char dot_product(unsigned char const * arg0, unsigned char const * arg1, unsigned int arg2);
     static unsigned char inner_product(unsigned char const * arg0, unsigned char const * arg1, unsigned int arg2);
     static void conjugate(unsigned char const * arg0, unsigned char * arg1, unsigned int arg2);
     static unsigned char max_value(unsigned char const * arg0, unsigned int arg1);
     static unsigned char min_value(unsigned char const * arg0, unsigned int arg1);
     static unsigned char mean(unsigned char const * p, unsigned int n);
     static double std(unsigned char const * p, unsigned int n);
     static unsigned char sum_sq_diff_means(unsigned char const * v, unsigned int n);
     static unsigned char one_norm(unsigned char const * p, unsigned int n);
     static unsigned char two_norm(unsigned char const * p, unsigned int n);
     static unsigned char inf_norm(unsigned char const * p, unsigned int n);
     static unsigned char two_nrm2(unsigned char const * p, unsigned int n);
     static unsigned char rms_norm(unsigned char const * p, unsigned int n);
     static unsigned char euclid_dist_sq(unsigned char const * arg0, unsigned char const * arg1, unsigned int arg2);
     static unsigned char * * allocate_Tptr(int n);
     static unsigned char * allocate_T(int n);
     static void deallocate(unsigned char * * arg0, int n_when_allocated);
     static void deallocate(unsigned char * arg0, int n_when_allocated);
   private:
   protected:
 };


 class vnl_c_vectorUI {
   public:
     ~vnl_c_vectorUI();
     vnl_c_vectorUI & operator=(vnl_c_vectorUI const & arg0);
     vnl_c_vectorUI(vnl_c_vectorUI const & arg0);
     vnl_c_vectorUI();
     static unsigned int sum(unsigned int const * v, unsigned int n);
     static unsigned int squared_magnitude(unsigned int const * p, unsigned int n);
     static void normalize(unsigned int * arg0, unsigned int n);
     static void copy(unsigned int const * x, unsigned int * y, unsigned int arg2);
     static void scale(unsigned int const * x, unsigned int * y, unsigned int arg2, unsigned int const & arg3);
     static void add(unsigned int const * x, unsigned int const * y, unsigned int * z, unsigned int arg3);
     static void add(unsigned int const * x, unsigned int const & y, unsigned int * z, unsigned int arg3);
     static void subtract(unsigned int const * x, unsigned int const * y, unsigned int * z, unsigned int arg3);
     static void subtract(unsigned int const * x, unsigned int const & y, unsigned int * z, unsigned int arg3);
     static void multiply(unsigned int const * x, unsigned int const * y, unsigned int * z, unsigned int arg3);
     static void multiply(unsigned int const * x, unsigned int const & y, unsigned int * z, unsigned int arg3);
     static void divide(unsigned int const * x, unsigned int const * y, unsigned int * z, unsigned int arg3);
     static void divide(unsigned int const * x, unsigned int const & y, unsigned int * z, unsigned int arg3);
     static void negate(unsigned int const * x, unsigned int * y, unsigned int arg2);
     static void invert(unsigned int const * x, unsigned int * y, unsigned int arg2);
     static void saxpy(unsigned int const & a, unsigned int const * x, unsigned int * y, unsigned int arg3);
     static void fill(unsigned int * x, unsigned int arg1, unsigned int const & v);
     static void reverse(unsigned int * x, unsigned int arg1);
     static unsigned int dot_product(unsigned int const * arg0, unsigned int const * arg1, unsigned int arg2);
     static unsigned int inner_product(unsigned int const * arg0, unsigned int const * arg1, unsigned int arg2);
     static void conjugate(unsigned int const * arg0, unsigned int * arg1, unsigned int arg2);
     static unsigned int max_value(unsigned int const * arg0, unsigned int arg1);
     static unsigned int min_value(unsigned int const * arg0, unsigned int arg1);
     static unsigned int mean(unsigned int const * p, unsigned int n);
     static double std(unsigned int const * p, unsigned int n);
     static unsigned int sum_sq_diff_means(unsigned int const * v, unsigned int n);
     static unsigned int one_norm(unsigned int const * p, unsigned int n);
     static unsigned int two_norm(unsigned int const * p, unsigned int n);
     static unsigned int inf_norm(unsigned int const * p, unsigned int n);
     static unsigned int two_nrm2(unsigned int const * p, unsigned int n);
     static unsigned int rms_norm(unsigned int const * p, unsigned int n);
     static unsigned int euclid_dist_sq(unsigned int const * arg0, unsigned int const * arg1, unsigned int arg2);
     static unsigned int * * allocate_Tptr(int n);
     static unsigned int * allocate_T(int n);
     static void deallocate(unsigned int * * arg0, int n_when_allocated);
     static void deallocate(unsigned int * arg0, int n_when_allocated);
   private:
   protected:
 };


 class vnl_c_vectorUL {
   public:
     ~vnl_c_vectorUL();
     vnl_c_vectorUL & operator=(vnl_c_vectorUL const & arg0);
     vnl_c_vectorUL(vnl_c_vectorUL const & arg0);
     vnl_c_vectorUL();
     static unsigned long sum(unsigned long const * v, unsigned int n);
     static unsigned long squared_magnitude(unsigned long const * p, unsigned int n);
     static void normalize(unsigned long * arg0, unsigned int n);
     static void copy(unsigned long const * x, unsigned long * y, unsigned int arg2);
     static void scale(unsigned long const * x, unsigned long * y, unsigned int arg2, unsigned long const & arg3);
     static void add(unsigned long const * x, unsigned long const * y, unsigned long * z, unsigned int arg3);
     static void add(unsigned long const * x, unsigned long const & y, unsigned long * z, unsigned int arg3);
     static void subtract(unsigned long const * x, unsigned long const * y, unsigned long * z, unsigned int arg3);
     static void subtract(unsigned long const * x, unsigned long const & y, unsigned long * z, unsigned int arg3);
     static void multiply(unsigned long const * x, unsigned long const * y, unsigned long * z, unsigned int arg3);
     static void multiply(unsigned long const * x, unsigned long const & y, unsigned long * z, unsigned int arg3);
     static void divide(unsigned long const * x, unsigned long const * y, unsigned long * z, unsigned int arg3);
     static void divide(unsigned long const * x, unsigned long const & y, unsigned long * z, unsigned int arg3);
     static void negate(unsigned long const * x, unsigned long * y, unsigned int arg2);
     static void invert(unsigned long const * x, unsigned long * y, unsigned int arg2);
     static void saxpy(unsigned long const & a, unsigned long const * x, unsigned long * y, unsigned int arg3);
     static void fill(unsigned long * x, unsigned int arg1, unsigned long const & v);
     static void reverse(unsigned long * x, unsigned int arg1);
     static unsigned long dot_product(unsigned long const * arg0, unsigned long const * arg1, unsigned int arg2);
     static unsigned long inner_product(unsigned long const * arg0, unsigned long const * arg1, unsigned int arg2);
     static void conjugate(unsigned long const * arg0, unsigned long * arg1, unsigned int arg2);
     static unsigned long max_value(unsigned long const * arg0, unsigned int arg1);
     static unsigned long min_value(unsigned long const * arg0, unsigned int arg1);
     static unsigned long mean(unsigned long const * p, unsigned int n);
     static double std(unsigned long const * p, unsigned int n);
     static unsigned long sum_sq_diff_means(unsigned long const * v, unsigned int n);
     static unsigned long one_norm(unsigned long const * p, unsigned int n);
     static unsigned long two_norm(unsigned long const * p, unsigned int n);
     static unsigned long inf_norm(unsigned long const * p, unsigned int n);
     static unsigned long two_nrm2(unsigned long const * p, unsigned int n);
     static unsigned long rms_norm(unsigned long const * p, unsigned int n);
     static unsigned long euclid_dist_sq(unsigned long const * arg0, unsigned long const * arg1, unsigned int arg2);
     static unsigned long * * allocate_Tptr(int n);
     static unsigned long * allocate_T(int n);
     static void deallocate(unsigned long * * arg0, int n_when_allocated);
     static void deallocate(unsigned long * arg0, int n_when_allocated);
   private:
   protected:
 };


 class vnl_c_vector_vcl_complexD {
   public:
     ~vnl_c_vector_vcl_complexD();
     vnl_c_vector_vcl_complexD & operator=(vnl_c_vector_vcl_complexD const & arg0);
     vnl_c_vector_vcl_complexD(vnl_c_vector_vcl_complexD const & arg0);
     vnl_c_vector_vcl_complexD();
     static vcl_complexD sum(vcl_complexD const * v, unsigned int n);
     static double squared_magnitude(vcl_complexD const * p, unsigned int n);
     static void normalize(vcl_complexD * arg0, unsigned int n);
     static void copy(vcl_complexD const * x, vcl_complexD * y, unsigned int arg2);
     static void scale(vcl_complexD const * x, vcl_complexD * y, unsigned int arg2, vcl_complexD const & arg3);
     static void add(vcl_complexD const * x, vcl_complexD const * y, vcl_complexD * z, unsigned int arg3);
     static void add(vcl_complexD const * x, vcl_complexD const & y, vcl_complexD * z, unsigned int arg3);
     static void subtract(vcl_complexD const * x, vcl_complexD const * y, vcl_complexD * z, unsigned int arg3);
     static void subtract(vcl_complexD const * x, vcl_complexD const & y, vcl_complexD * z, unsigned int arg3);
     static void multiply(vcl_complexD const * x, vcl_complexD const * y, vcl_complexD * z, unsigned int arg3);
     static void multiply(vcl_complexD const * x, vcl_complexD const & y, vcl_complexD * z, unsigned int arg3);
     static void divide(vcl_complexD const * x, vcl_complexD const * y, vcl_complexD * z, unsigned int arg3);
     static void divide(vcl_complexD const * x, vcl_complexD const & y, vcl_complexD * z, unsigned int arg3);
     static void negate(vcl_complexD const * x, vcl_complexD * y, unsigned int arg2);
     static void invert(vcl_complexD const * x, vcl_complexD * y, unsigned int arg2);
     static void saxpy(vcl_complexD const & a, vcl_complexD const * x, vcl_complexD * y, unsigned int arg3);
     static void fill(vcl_complexD * x, unsigned int arg1, vcl_complexD const & v);
     static void reverse(vcl_complexD * x, unsigned int arg1);
     static vcl_complexD dot_product(vcl_complexD const * arg0, vcl_complexD const * arg1, unsigned int arg2);
     static vcl_complexD inner_product(vcl_complexD const * arg0, vcl_complexD const * arg1, unsigned int arg2);
     static void conjugate(vcl_complexD const * arg0, vcl_complexD * arg1, unsigned int arg2);
     static vcl_complexD max_value(vcl_complexD const * arg0, unsigned int arg1);
     static vcl_complexD min_value(vcl_complexD const * arg0, unsigned int arg1);
     static vcl_complexD mean(vcl_complexD const * p, unsigned int n);
     static vcl_complexD std(vcl_complexD const * p, unsigned int n);
     static vcl_complexD sum_sq_diff_means(vcl_complexD const * v, unsigned int n);
     static double one_norm(vcl_complexD const * p, unsigned int n);
     static double two_norm(vcl_complexD const * p, unsigned int n);
     static double inf_norm(vcl_complexD const * p, unsigned int n);
     static double two_nrm2(vcl_complexD const * p, unsigned int n);
     static double rms_norm(vcl_complexD const * p, unsigned int n);
     static vcl_complexD euclid_dist_sq(vcl_complexD const * arg0, vcl_complexD const * arg1, unsigned int arg2);
     static vcl_complexD * * allocate_Tptr(int n);
     static vcl_complexD * allocate_T(int n);
     static void deallocate(vcl_complexD * * arg0, int n_when_allocated);
     static void deallocate(vcl_complexD * arg0, int n_when_allocated);
   private:
   protected:
 };


 class vnl_c_vector_vcl_complexF {
   public:
     ~vnl_c_vector_vcl_complexF();
     vnl_c_vector_vcl_complexF & operator=(vnl_c_vector_vcl_complexF const & arg0);
     vnl_c_vector_vcl_complexF(vnl_c_vector_vcl_complexF const & arg0);
     vnl_c_vector_vcl_complexF();
     static vcl_complexF sum(vcl_complexF const * v, unsigned int n);
     static float squared_magnitude(vcl_complexF const * p, unsigned int n);
     static void normalize(vcl_complexF * arg0, unsigned int n);
     static void copy(vcl_complexF const * x, vcl_complexF * y, unsigned int arg2);
     static void scale(vcl_complexF const * x, vcl_complexF * y, unsigned int arg2, vcl_complexF const & arg3);
     static void add(vcl_complexF const * x, vcl_complexF const * y, vcl_complexF * z, unsigned int arg3);
     static void add(vcl_complexF const * x, vcl_complexF const & y, vcl_complexF * z, unsigned int arg3);
     static void subtract(vcl_complexF const * x, vcl_complexF const * y, vcl_complexF * z, unsigned int arg3);
     static void subtract(vcl_complexF const * x, vcl_complexF const & y, vcl_complexF * z, unsigned int arg3);
     static void multiply(vcl_complexF const * x, vcl_complexF const * y, vcl_complexF * z, unsigned int arg3);
     static void multiply(vcl_complexF const * x, vcl_complexF const & y, vcl_complexF * z, unsigned int arg3);
     static void divide(vcl_complexF const * x, vcl_complexF const * y, vcl_complexF * z, unsigned int arg3);
     static void divide(vcl_complexF const * x, vcl_complexF const & y, vcl_complexF * z, unsigned int arg3);
     static void negate(vcl_complexF const * x, vcl_complexF * y, unsigned int arg2);
     static void invert(vcl_complexF const * x, vcl_complexF * y, unsigned int arg2);
     static void saxpy(vcl_complexF const & a, vcl_complexF const * x, vcl_complexF * y, unsigned int arg3);
     static void fill(vcl_complexF * x, unsigned int arg1, vcl_complexF const & v);
     static void reverse(vcl_complexF * x, unsigned int arg1);
     static vcl_complexF dot_product(vcl_complexF const * arg0, vcl_complexF const * arg1, unsigned int arg2);
     static vcl_complexF inner_product(vcl_complexF const * arg0, vcl_complexF const * arg1, unsigned int arg2);
     static void conjugate(vcl_complexF const * arg0, vcl_complexF * arg1, unsigned int arg2);
     static vcl_complexF max_value(vcl_complexF const * arg0, unsigned int arg1);
     static vcl_complexF min_value(vcl_complexF const * arg0, unsigned int arg1);
     static vcl_complexF mean(vcl_complexF const * p, unsigned int n);
     static vcl_complexF std(vcl_complexF const * p, unsigned int n);
     static vcl_complexF sum_sq_diff_means(vcl_complexF const * v, unsigned int n);
     static float one_norm(vcl_complexF const * p, unsigned int n);
     static float two_norm(vcl_complexF const * p, unsigned int n);
     static float inf_norm(vcl_complexF const * p, unsigned int n);
     static float two_nrm2(vcl_complexF const * p, unsigned int n);
     static float rms_norm(vcl_complexF const * p, unsigned int n);
     static vcl_complexF euclid_dist_sq(vcl_complexF const * arg0, vcl_complexF const * arg1, unsigned int arg2);
     static vcl_complexF * * allocate_Tptr(int n);
     static vcl_complexF * allocate_T(int n);
     static void deallocate(vcl_complexF * * arg0, int n_when_allocated);
     static void deallocate(vcl_complexF * arg0, int n_when_allocated);
   private:
   protected:
 };


 class vnl_c_vector_vcl_complexLD {
   public:
     ~vnl_c_vector_vcl_complexLD();
     vnl_c_vector_vcl_complexLD & operator=(vnl_c_vector_vcl_complexLD const & arg0);
     vnl_c_vector_vcl_complexLD(vnl_c_vector_vcl_complexLD const & arg0);
     vnl_c_vector_vcl_complexLD();
     static vcl_complexLD sum(vcl_complexLD const * v, unsigned int n);
     static long double squared_magnitude(vcl_complexLD const * p, unsigned int n);
     static void normalize(vcl_complexLD * arg0, unsigned int n);
     static void copy(vcl_complexLD const * x, vcl_complexLD * y, unsigned int arg2);
     static void scale(vcl_complexLD const * x, vcl_complexLD * y, unsigned int arg2, vcl_complexLD const & arg3);
     static void add(vcl_complexLD const * x, vcl_complexLD const * y, vcl_complexLD * z, unsigned int arg3);
     static void add(vcl_complexLD const * x, vcl_complexLD const & y, vcl_complexLD * z, unsigned int arg3);
     static void subtract(vcl_complexLD const * x, vcl_complexLD const * y, vcl_complexLD * z, unsigned int arg3);
     static void subtract(vcl_complexLD const * x, vcl_complexLD const & y, vcl_complexLD * z, unsigned int arg3);
     static void multiply(vcl_complexLD const * x, vcl_complexLD const * y, vcl_complexLD * z, unsigned int arg3);
     static void multiply(vcl_complexLD const * x, vcl_complexLD const & y, vcl_complexLD * z, unsigned int arg3);
     static void divide(vcl_complexLD const * x, vcl_complexLD const * y, vcl_complexLD * z, unsigned int arg3);
     static void divide(vcl_complexLD const * x, vcl_complexLD const & y, vcl_complexLD * z, unsigned int arg3);
     static void negate(vcl_complexLD const * x, vcl_complexLD * y, unsigned int arg2);
     static void invert(vcl_complexLD const * x, vcl_complexLD * y, unsigned int arg2);
     static void saxpy(vcl_complexLD const & a, vcl_complexLD const * x, vcl_complexLD * y, unsigned int arg3);
     static void fill(vcl_complexLD * x, unsigned int arg1, vcl_complexLD const & v);
     static void reverse(vcl_complexLD * x, unsigned int arg1);
     static vcl_complexLD dot_product(vcl_complexLD const * arg0, vcl_complexLD const * arg1, unsigned int arg2);
     static vcl_complexLD inner_product(vcl_complexLD const * arg0, vcl_complexLD const * arg1, unsigned int arg2);
     static void conjugate(vcl_complexLD const * arg0, vcl_complexLD * arg1, unsigned int arg2);
     static vcl_complexLD max_value(vcl_complexLD const * arg0, unsigned int arg1);
     static vcl_complexLD min_value(vcl_complexLD const * arg0, unsigned int arg1);
     static vcl_complexLD mean(vcl_complexLD const * p, unsigned int n);
     static vcl_complexLD std(vcl_complexLD const * p, unsigned int n);
     static vcl_complexLD sum_sq_diff_means(vcl_complexLD const * v, unsigned int n);
     static long double one_norm(vcl_complexLD const * p, unsigned int n);
     static long double two_norm(vcl_complexLD const * p, unsigned int n);
     static long double inf_norm(vcl_complexLD const * p, unsigned int n);
     static long double two_nrm2(vcl_complexLD const * p, unsigned int n);
     static long double rms_norm(vcl_complexLD const * p, unsigned int n);
     static vcl_complexLD euclid_dist_sq(vcl_complexLD const * arg0, vcl_complexLD const * arg1, unsigned int arg2);
     static vcl_complexLD * * allocate_Tptr(int n);
     static vcl_complexLD * allocate_T(int n);
     static void deallocate(vcl_complexLD * * arg0, int n_when_allocated);
     static void deallocate(vcl_complexLD * arg0, int n_when_allocated);
   private:
   protected:
 };


