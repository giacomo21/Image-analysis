// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkWarpImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkWarpImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkWarpImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkWarpImageFilterJava
#endif
#ifdef SWIGLUA
%module itkWarpImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkWarpImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkWarpImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkWarpImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkWarpImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkWarpImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkWarpImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkWarpImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkWarpImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkWarpImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkWarpImageFilterPython
#endif
#ifdef SWIGR
%module itkWarpImageFilterR
#endif
#ifdef SWIGRUBY
%module itkWarpImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkWarpImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkWarpImageFilterTcl
#endif
#ifdef SWIGXML
%module itkWarpImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
#include "SimpleFilters.includes"
%}


%{
%}




%import wrap_itkPoint.i
%import wrap_ITKRegions.i
%import wrap_itkImageToImageFilterA.i
%import wrap_itkIndex.i
%import wrap_itkImage.i
%import wrap_itkVector.i
%import wrap_itkMatrix.i
%import wrap_ITKCommonBase.i
%import wrap_itkSize.i
%import wrap_itkInterpolateImageFunction.i


%include itk.i
%include wrap_itkWarpImageFilter_ext.i


 class itkWarpImageFilterID2ID2IVF22 : public itkImageToImageFilterID2ID2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputImageDimension = 2 };
     enum  {  DeformationFieldDimension = 2 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  DeformationFieldHasNumericTraitsCheck = 1 };
     static itkWarpImageFilterID2ID2IVF22_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetDeformationField(itkImageVF22 const * field);
     itkImageVF22 * GetDeformationField();
     virtual void SetInterpolator(itkInterpolateImageFunctionID2D * _arg);
     virtual itkInterpolateImageFunctionID2D * GetInterpolator();
     virtual void SetOutputSpacing(itkVectorD2 const _arg);
     virtual void SetOutputSpacing(double const * values);
     virtual itkVectorD2 const & GetOutputSpacing() const;
     virtual void SetOutputOrigin(itkPointD2 const _arg);
     virtual void SetOutputOrigin(double const * values);
     virtual itkPointD2 const & GetOutputOrigin() const;
     virtual void SetOutputDirection(itkMatrixD22 const _arg);
     virtual itkMatrixD22 const & GetOutputDirection() const;
     void SetOutputParametersFromImage(itkImageBase2 const * image);
     virtual void SetOutputStartIndex(itkIndex2 const _arg);
     virtual itkIndex2 const & GetOutputStartIndex() const;
     virtual void SetOutputSize(itkSize2 const _arg);
     virtual itkSize2 const & GetOutputSize() const;
     virtual void SetEdgePaddingValue(double const _arg);
     virtual double GetEdgePaddingValue() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
   private:
     itkWarpImageFilterID2ID2IVF22(itkWarpImageFilterID2ID2IVF22 const & arg0);
     void operator=(itkWarpImageFilterID2ID2IVF22 const & arg0);
     itkVectorF2 EvaluateDeformationAtPhysicalPoint(itkPointD2 const & p);
   protected:
     itkWarpImageFilterID2ID2IVF22();
     ~itkWarpImageFilterID2ID2IVF22();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkWarpImageFilterID2ID2IVF22_Pointer {
   public:
     itkWarpImageFilterID2ID2IVF22_Pointer();
     itkWarpImageFilterID2ID2IVF22_Pointer(itkWarpImageFilterID2ID2IVF22_Pointer const & p);
     itkWarpImageFilterID2ID2IVF22_Pointer(itkWarpImageFilterID2ID2IVF22 * p);
     ~itkWarpImageFilterID2ID2IVF22_Pointer();
     itkWarpImageFilterID2ID2IVF22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWarpImageFilterID2ID2IVF22 * GetPointer() const;
     bool operator<(itkWarpImageFilterID2ID2IVF22_Pointer const & r) const;
     bool operator>(itkWarpImageFilterID2ID2IVF22_Pointer const & r) const;
     bool operator<=(itkWarpImageFilterID2ID2IVF22_Pointer const & r) const;
     bool operator>=(itkWarpImageFilterID2ID2IVF22_Pointer const & r) const;
     itkWarpImageFilterID2ID2IVF22_Pointer & operator=(itkWarpImageFilterID2ID2IVF22_Pointer const & r);
     itkWarpImageFilterID2ID2IVF22_Pointer & operator=(itkWarpImageFilterID2ID2IVF22 * r);
     itkWarpImageFilterID2ID2IVF22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWarpImageFilterID3ID3IVF33 : public itkImageToImageFilterID3ID3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputImageDimension = 3 };
     enum  {  DeformationFieldDimension = 3 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  DeformationFieldHasNumericTraitsCheck = 1 };
     static itkWarpImageFilterID3ID3IVF33_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetDeformationField(itkImageVF33 const * field);
     itkImageVF33 * GetDeformationField();
     virtual void SetInterpolator(itkInterpolateImageFunctionID3D * _arg);
     virtual itkInterpolateImageFunctionID3D * GetInterpolator();
     virtual void SetOutputSpacing(itkVectorD3 const _arg);
     virtual void SetOutputSpacing(double const * values);
     virtual itkVectorD3 const & GetOutputSpacing() const;
     virtual void SetOutputOrigin(itkPointD3 const _arg);
     virtual void SetOutputOrigin(double const * values);
     virtual itkPointD3 const & GetOutputOrigin() const;
     virtual void SetOutputDirection(itkMatrixD33 const _arg);
     virtual itkMatrixD33 const & GetOutputDirection() const;
     void SetOutputParametersFromImage(itkImageBase3 const * image);
     virtual void SetOutputStartIndex(itkIndex3 const _arg);
     virtual itkIndex3 const & GetOutputStartIndex() const;
     virtual void SetOutputSize(itkSize3 const _arg);
     virtual itkSize3 const & GetOutputSize() const;
     virtual void SetEdgePaddingValue(double const _arg);
     virtual double GetEdgePaddingValue() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
   private:
     itkWarpImageFilterID3ID3IVF33(itkWarpImageFilterID3ID3IVF33 const & arg0);
     void operator=(itkWarpImageFilterID3ID3IVF33 const & arg0);
     itkVectorF3 EvaluateDeformationAtPhysicalPoint(itkPointD3 const & p);
   protected:
     itkWarpImageFilterID3ID3IVF33();
     ~itkWarpImageFilterID3ID3IVF33();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkWarpImageFilterID3ID3IVF33_Pointer {
   public:
     itkWarpImageFilterID3ID3IVF33_Pointer();
     itkWarpImageFilterID3ID3IVF33_Pointer(itkWarpImageFilterID3ID3IVF33_Pointer const & p);
     itkWarpImageFilterID3ID3IVF33_Pointer(itkWarpImageFilterID3ID3IVF33 * p);
     ~itkWarpImageFilterID3ID3IVF33_Pointer();
     itkWarpImageFilterID3ID3IVF33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWarpImageFilterID3ID3IVF33 * GetPointer() const;
     bool operator<(itkWarpImageFilterID3ID3IVF33_Pointer const & r) const;
     bool operator>(itkWarpImageFilterID3ID3IVF33_Pointer const & r) const;
     bool operator<=(itkWarpImageFilterID3ID3IVF33_Pointer const & r) const;
     bool operator>=(itkWarpImageFilterID3ID3IVF33_Pointer const & r) const;
     itkWarpImageFilterID3ID3IVF33_Pointer & operator=(itkWarpImageFilterID3ID3IVF33_Pointer const & r);
     itkWarpImageFilterID3ID3IVF33_Pointer & operator=(itkWarpImageFilterID3ID3IVF33 * r);
     itkWarpImageFilterID3ID3IVF33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWarpImageFilterIF2IF2IVF22 : public itkImageToImageFilterIF2IF2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputImageDimension = 2 };
     enum  {  DeformationFieldDimension = 2 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  DeformationFieldHasNumericTraitsCheck = 1 };
     static itkWarpImageFilterIF2IF2IVF22_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetDeformationField(itkImageVF22 const * field);
     itkImageVF22 * GetDeformationField();
     virtual void SetInterpolator(itkInterpolateImageFunctionIF2D * _arg);
     virtual itkInterpolateImageFunctionIF2D * GetInterpolator();
     virtual void SetOutputSpacing(itkVectorD2 const _arg);
     virtual void SetOutputSpacing(double const * values);
     virtual itkVectorD2 const & GetOutputSpacing() const;
     virtual void SetOutputOrigin(itkPointD2 const _arg);
     virtual void SetOutputOrigin(double const * values);
     virtual itkPointD2 const & GetOutputOrigin() const;
     virtual void SetOutputDirection(itkMatrixD22 const _arg);
     virtual itkMatrixD22 const & GetOutputDirection() const;
     void SetOutputParametersFromImage(itkImageBase2 const * image);
     virtual void SetOutputStartIndex(itkIndex2 const _arg);
     virtual itkIndex2 const & GetOutputStartIndex() const;
     virtual void SetOutputSize(itkSize2 const _arg);
     virtual itkSize2 const & GetOutputSize() const;
     virtual void SetEdgePaddingValue(float const _arg);
     virtual float GetEdgePaddingValue() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
   private:
     itkWarpImageFilterIF2IF2IVF22(itkWarpImageFilterIF2IF2IVF22 const & arg0);
     void operator=(itkWarpImageFilterIF2IF2IVF22 const & arg0);
     itkVectorF2 EvaluateDeformationAtPhysicalPoint(itkPointD2 const & p);
   protected:
     itkWarpImageFilterIF2IF2IVF22();
     ~itkWarpImageFilterIF2IF2IVF22();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkWarpImageFilterIF2IF2IVF22_Pointer {
   public:
     itkWarpImageFilterIF2IF2IVF22_Pointer();
     itkWarpImageFilterIF2IF2IVF22_Pointer(itkWarpImageFilterIF2IF2IVF22_Pointer const & p);
     itkWarpImageFilterIF2IF2IVF22_Pointer(itkWarpImageFilterIF2IF2IVF22 * p);
     ~itkWarpImageFilterIF2IF2IVF22_Pointer();
     itkWarpImageFilterIF2IF2IVF22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWarpImageFilterIF2IF2IVF22 * GetPointer() const;
     bool operator<(itkWarpImageFilterIF2IF2IVF22_Pointer const & r) const;
     bool operator>(itkWarpImageFilterIF2IF2IVF22_Pointer const & r) const;
     bool operator<=(itkWarpImageFilterIF2IF2IVF22_Pointer const & r) const;
     bool operator>=(itkWarpImageFilterIF2IF2IVF22_Pointer const & r) const;
     itkWarpImageFilterIF2IF2IVF22_Pointer & operator=(itkWarpImageFilterIF2IF2IVF22_Pointer const & r);
     itkWarpImageFilterIF2IF2IVF22_Pointer & operator=(itkWarpImageFilterIF2IF2IVF22 * r);
     itkWarpImageFilterIF2IF2IVF22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWarpImageFilterIF3IF3IVF33 : public itkImageToImageFilterIF3IF3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputImageDimension = 3 };
     enum  {  DeformationFieldDimension = 3 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  DeformationFieldHasNumericTraitsCheck = 1 };
     static itkWarpImageFilterIF3IF3IVF33_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetDeformationField(itkImageVF33 const * field);
     itkImageVF33 * GetDeformationField();
     virtual void SetInterpolator(itkInterpolateImageFunctionIF3D * _arg);
     virtual itkInterpolateImageFunctionIF3D * GetInterpolator();
     virtual void SetOutputSpacing(itkVectorD3 const _arg);
     virtual void SetOutputSpacing(double const * values);
     virtual itkVectorD3 const & GetOutputSpacing() const;
     virtual void SetOutputOrigin(itkPointD3 const _arg);
     virtual void SetOutputOrigin(double const * values);
     virtual itkPointD3 const & GetOutputOrigin() const;
     virtual void SetOutputDirection(itkMatrixD33 const _arg);
     virtual itkMatrixD33 const & GetOutputDirection() const;
     void SetOutputParametersFromImage(itkImageBase3 const * image);
     virtual void SetOutputStartIndex(itkIndex3 const _arg);
     virtual itkIndex3 const & GetOutputStartIndex() const;
     virtual void SetOutputSize(itkSize3 const _arg);
     virtual itkSize3 const & GetOutputSize() const;
     virtual void SetEdgePaddingValue(float const _arg);
     virtual float GetEdgePaddingValue() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
   private:
     itkWarpImageFilterIF3IF3IVF33(itkWarpImageFilterIF3IF3IVF33 const & arg0);
     void operator=(itkWarpImageFilterIF3IF3IVF33 const & arg0);
     itkVectorF3 EvaluateDeformationAtPhysicalPoint(itkPointD3 const & p);
   protected:
     itkWarpImageFilterIF3IF3IVF33();
     ~itkWarpImageFilterIF3IF3IVF33();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkWarpImageFilterIF3IF3IVF33_Pointer {
   public:
     itkWarpImageFilterIF3IF3IVF33_Pointer();
     itkWarpImageFilterIF3IF3IVF33_Pointer(itkWarpImageFilterIF3IF3IVF33_Pointer const & p);
     itkWarpImageFilterIF3IF3IVF33_Pointer(itkWarpImageFilterIF3IF3IVF33 * p);
     ~itkWarpImageFilterIF3IF3IVF33_Pointer();
     itkWarpImageFilterIF3IF3IVF33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWarpImageFilterIF3IF3IVF33 * GetPointer() const;
     bool operator<(itkWarpImageFilterIF3IF3IVF33_Pointer const & r) const;
     bool operator>(itkWarpImageFilterIF3IF3IVF33_Pointer const & r) const;
     bool operator<=(itkWarpImageFilterIF3IF3IVF33_Pointer const & r) const;
     bool operator>=(itkWarpImageFilterIF3IF3IVF33_Pointer const & r) const;
     itkWarpImageFilterIF3IF3IVF33_Pointer & operator=(itkWarpImageFilterIF3IF3IVF33_Pointer const & r);
     itkWarpImageFilterIF3IF3IVF33_Pointer & operator=(itkWarpImageFilterIF3IF3IVF33 * r);
     itkWarpImageFilterIF3IF3IVF33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWarpImageFilterIUC2IUC2IVF22 : public itkImageToImageFilterIUC2IUC2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputImageDimension = 2 };
     enum  {  DeformationFieldDimension = 2 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  DeformationFieldHasNumericTraitsCheck = 1 };
     static itkWarpImageFilterIUC2IUC2IVF22_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetDeformationField(itkImageVF22 const * field);
     itkImageVF22 * GetDeformationField();
     virtual void SetInterpolator(itkInterpolateImageFunctionIUC2D * _arg);
     virtual itkInterpolateImageFunctionIUC2D * GetInterpolator();
     virtual void SetOutputSpacing(itkVectorD2 const _arg);
     virtual void SetOutputSpacing(double const * values);
     virtual itkVectorD2 const & GetOutputSpacing() const;
     virtual void SetOutputOrigin(itkPointD2 const _arg);
     virtual void SetOutputOrigin(double const * values);
     virtual itkPointD2 const & GetOutputOrigin() const;
     virtual void SetOutputDirection(itkMatrixD22 const _arg);
     virtual itkMatrixD22 const & GetOutputDirection() const;
     void SetOutputParametersFromImage(itkImageBase2 const * image);
     virtual void SetOutputStartIndex(itkIndex2 const _arg);
     virtual itkIndex2 const & GetOutputStartIndex() const;
     virtual void SetOutputSize(itkSize2 const _arg);
     virtual itkSize2 const & GetOutputSize() const;
     virtual void SetEdgePaddingValue(unsigned char const _arg);
     virtual unsigned char GetEdgePaddingValue() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
   private:
     itkWarpImageFilterIUC2IUC2IVF22(itkWarpImageFilterIUC2IUC2IVF22 const & arg0);
     void operator=(itkWarpImageFilterIUC2IUC2IVF22 const & arg0);
     itkVectorF2 EvaluateDeformationAtPhysicalPoint(itkPointD2 const & p);
   protected:
     itkWarpImageFilterIUC2IUC2IVF22();
     ~itkWarpImageFilterIUC2IUC2IVF22();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkWarpImageFilterIUC2IUC2IVF22_Pointer {
   public:
     itkWarpImageFilterIUC2IUC2IVF22_Pointer();
     itkWarpImageFilterIUC2IUC2IVF22_Pointer(itkWarpImageFilterIUC2IUC2IVF22_Pointer const & p);
     itkWarpImageFilterIUC2IUC2IVF22_Pointer(itkWarpImageFilterIUC2IUC2IVF22 * p);
     ~itkWarpImageFilterIUC2IUC2IVF22_Pointer();
     itkWarpImageFilterIUC2IUC2IVF22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWarpImageFilterIUC2IUC2IVF22 * GetPointer() const;
     bool operator<(itkWarpImageFilterIUC2IUC2IVF22_Pointer const & r) const;
     bool operator>(itkWarpImageFilterIUC2IUC2IVF22_Pointer const & r) const;
     bool operator<=(itkWarpImageFilterIUC2IUC2IVF22_Pointer const & r) const;
     bool operator>=(itkWarpImageFilterIUC2IUC2IVF22_Pointer const & r) const;
     itkWarpImageFilterIUC2IUC2IVF22_Pointer & operator=(itkWarpImageFilterIUC2IUC2IVF22_Pointer const & r);
     itkWarpImageFilterIUC2IUC2IVF22_Pointer & operator=(itkWarpImageFilterIUC2IUC2IVF22 * r);
     itkWarpImageFilterIUC2IUC2IVF22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWarpImageFilterIUC3IUC3IVF33 : public itkImageToImageFilterIUC3IUC3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputImageDimension = 3 };
     enum  {  DeformationFieldDimension = 3 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  DeformationFieldHasNumericTraitsCheck = 1 };
     static itkWarpImageFilterIUC3IUC3IVF33_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetDeformationField(itkImageVF33 const * field);
     itkImageVF33 * GetDeformationField();
     virtual void SetInterpolator(itkInterpolateImageFunctionIUC3D * _arg);
     virtual itkInterpolateImageFunctionIUC3D * GetInterpolator();
     virtual void SetOutputSpacing(itkVectorD3 const _arg);
     virtual void SetOutputSpacing(double const * values);
     virtual itkVectorD3 const & GetOutputSpacing() const;
     virtual void SetOutputOrigin(itkPointD3 const _arg);
     virtual void SetOutputOrigin(double const * values);
     virtual itkPointD3 const & GetOutputOrigin() const;
     virtual void SetOutputDirection(itkMatrixD33 const _arg);
     virtual itkMatrixD33 const & GetOutputDirection() const;
     void SetOutputParametersFromImage(itkImageBase3 const * image);
     virtual void SetOutputStartIndex(itkIndex3 const _arg);
     virtual itkIndex3 const & GetOutputStartIndex() const;
     virtual void SetOutputSize(itkSize3 const _arg);
     virtual itkSize3 const & GetOutputSize() const;
     virtual void SetEdgePaddingValue(unsigned char const _arg);
     virtual unsigned char GetEdgePaddingValue() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
   private:
     itkWarpImageFilterIUC3IUC3IVF33(itkWarpImageFilterIUC3IUC3IVF33 const & arg0);
     void operator=(itkWarpImageFilterIUC3IUC3IVF33 const & arg0);
     itkVectorF3 EvaluateDeformationAtPhysicalPoint(itkPointD3 const & p);
   protected:
     itkWarpImageFilterIUC3IUC3IVF33();
     ~itkWarpImageFilterIUC3IUC3IVF33();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkWarpImageFilterIUC3IUC3IVF33_Pointer {
   public:
     itkWarpImageFilterIUC3IUC3IVF33_Pointer();
     itkWarpImageFilterIUC3IUC3IVF33_Pointer(itkWarpImageFilterIUC3IUC3IVF33_Pointer const & p);
     itkWarpImageFilterIUC3IUC3IVF33_Pointer(itkWarpImageFilterIUC3IUC3IVF33 * p);
     ~itkWarpImageFilterIUC3IUC3IVF33_Pointer();
     itkWarpImageFilterIUC3IUC3IVF33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWarpImageFilterIUC3IUC3IVF33 * GetPointer() const;
     bool operator<(itkWarpImageFilterIUC3IUC3IVF33_Pointer const & r) const;
     bool operator>(itkWarpImageFilterIUC3IUC3IVF33_Pointer const & r) const;
     bool operator<=(itkWarpImageFilterIUC3IUC3IVF33_Pointer const & r) const;
     bool operator>=(itkWarpImageFilterIUC3IUC3IVF33_Pointer const & r) const;
     itkWarpImageFilterIUC3IUC3IVF33_Pointer & operator=(itkWarpImageFilterIUC3IUC3IVF33_Pointer const & r);
     itkWarpImageFilterIUC3IUC3IVF33_Pointer & operator=(itkWarpImageFilterIUC3IUC3IVF33 * r);
     itkWarpImageFilterIUC3IUC3IVF33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWarpImageFilterIUL2IUL2IVF22 : public itkImageToImageFilterIUL2IUL2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputImageDimension = 2 };
     enum  {  DeformationFieldDimension = 2 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  DeformationFieldHasNumericTraitsCheck = 1 };
     static itkWarpImageFilterIUL2IUL2IVF22_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetDeformationField(itkImageVF22 const * field);
     itkImageVF22 * GetDeformationField();
     virtual void SetInterpolator(itkInterpolateImageFunctionIUL2D * _arg);
     virtual itkInterpolateImageFunctionIUL2D * GetInterpolator();
     virtual void SetOutputSpacing(itkVectorD2 const _arg);
     virtual void SetOutputSpacing(double const * values);
     virtual itkVectorD2 const & GetOutputSpacing() const;
     virtual void SetOutputOrigin(itkPointD2 const _arg);
     virtual void SetOutputOrigin(double const * values);
     virtual itkPointD2 const & GetOutputOrigin() const;
     virtual void SetOutputDirection(itkMatrixD22 const _arg);
     virtual itkMatrixD22 const & GetOutputDirection() const;
     void SetOutputParametersFromImage(itkImageBase2 const * image);
     virtual void SetOutputStartIndex(itkIndex2 const _arg);
     virtual itkIndex2 const & GetOutputStartIndex() const;
     virtual void SetOutputSize(itkSize2 const _arg);
     virtual itkSize2 const & GetOutputSize() const;
     virtual void SetEdgePaddingValue(unsigned long const _arg);
     virtual unsigned long GetEdgePaddingValue() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
   private:
     itkWarpImageFilterIUL2IUL2IVF22(itkWarpImageFilterIUL2IUL2IVF22 const & arg0);
     void operator=(itkWarpImageFilterIUL2IUL2IVF22 const & arg0);
     itkVectorF2 EvaluateDeformationAtPhysicalPoint(itkPointD2 const & p);
   protected:
     itkWarpImageFilterIUL2IUL2IVF22();
     ~itkWarpImageFilterIUL2IUL2IVF22();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkWarpImageFilterIUL2IUL2IVF22_Pointer {
   public:
     itkWarpImageFilterIUL2IUL2IVF22_Pointer();
     itkWarpImageFilterIUL2IUL2IVF22_Pointer(itkWarpImageFilterIUL2IUL2IVF22_Pointer const & p);
     itkWarpImageFilterIUL2IUL2IVF22_Pointer(itkWarpImageFilterIUL2IUL2IVF22 * p);
     ~itkWarpImageFilterIUL2IUL2IVF22_Pointer();
     itkWarpImageFilterIUL2IUL2IVF22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWarpImageFilterIUL2IUL2IVF22 * GetPointer() const;
     bool operator<(itkWarpImageFilterIUL2IUL2IVF22_Pointer const & r) const;
     bool operator>(itkWarpImageFilterIUL2IUL2IVF22_Pointer const & r) const;
     bool operator<=(itkWarpImageFilterIUL2IUL2IVF22_Pointer const & r) const;
     bool operator>=(itkWarpImageFilterIUL2IUL2IVF22_Pointer const & r) const;
     itkWarpImageFilterIUL2IUL2IVF22_Pointer & operator=(itkWarpImageFilterIUL2IUL2IVF22_Pointer const & r);
     itkWarpImageFilterIUL2IUL2IVF22_Pointer & operator=(itkWarpImageFilterIUL2IUL2IVF22 * r);
     itkWarpImageFilterIUL2IUL2IVF22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWarpImageFilterIUL3IUL3IVF33 : public itkImageToImageFilterIUL3IUL3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputImageDimension = 3 };
     enum  {  DeformationFieldDimension = 3 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  DeformationFieldHasNumericTraitsCheck = 1 };
     static itkWarpImageFilterIUL3IUL3IVF33_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetDeformationField(itkImageVF33 const * field);
     itkImageVF33 * GetDeformationField();
     virtual void SetInterpolator(itkInterpolateImageFunctionIUL3D * _arg);
     virtual itkInterpolateImageFunctionIUL3D * GetInterpolator();
     virtual void SetOutputSpacing(itkVectorD3 const _arg);
     virtual void SetOutputSpacing(double const * values);
     virtual itkVectorD3 const & GetOutputSpacing() const;
     virtual void SetOutputOrigin(itkPointD3 const _arg);
     virtual void SetOutputOrigin(double const * values);
     virtual itkPointD3 const & GetOutputOrigin() const;
     virtual void SetOutputDirection(itkMatrixD33 const _arg);
     virtual itkMatrixD33 const & GetOutputDirection() const;
     void SetOutputParametersFromImage(itkImageBase3 const * image);
     virtual void SetOutputStartIndex(itkIndex3 const _arg);
     virtual itkIndex3 const & GetOutputStartIndex() const;
     virtual void SetOutputSize(itkSize3 const _arg);
     virtual itkSize3 const & GetOutputSize() const;
     virtual void SetEdgePaddingValue(unsigned long const _arg);
     virtual unsigned long GetEdgePaddingValue() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
   private:
     itkWarpImageFilterIUL3IUL3IVF33(itkWarpImageFilterIUL3IUL3IVF33 const & arg0);
     void operator=(itkWarpImageFilterIUL3IUL3IVF33 const & arg0);
     itkVectorF3 EvaluateDeformationAtPhysicalPoint(itkPointD3 const & p);
   protected:
     itkWarpImageFilterIUL3IUL3IVF33();
     ~itkWarpImageFilterIUL3IUL3IVF33();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkWarpImageFilterIUL3IUL3IVF33_Pointer {
   public:
     itkWarpImageFilterIUL3IUL3IVF33_Pointer();
     itkWarpImageFilterIUL3IUL3IVF33_Pointer(itkWarpImageFilterIUL3IUL3IVF33_Pointer const & p);
     itkWarpImageFilterIUL3IUL3IVF33_Pointer(itkWarpImageFilterIUL3IUL3IVF33 * p);
     ~itkWarpImageFilterIUL3IUL3IVF33_Pointer();
     itkWarpImageFilterIUL3IUL3IVF33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWarpImageFilterIUL3IUL3IVF33 * GetPointer() const;
     bool operator<(itkWarpImageFilterIUL3IUL3IVF33_Pointer const & r) const;
     bool operator>(itkWarpImageFilterIUL3IUL3IVF33_Pointer const & r) const;
     bool operator<=(itkWarpImageFilterIUL3IUL3IVF33_Pointer const & r) const;
     bool operator>=(itkWarpImageFilterIUL3IUL3IVF33_Pointer const & r) const;
     itkWarpImageFilterIUL3IUL3IVF33_Pointer & operator=(itkWarpImageFilterIUL3IUL3IVF33_Pointer const & r);
     itkWarpImageFilterIUL3IUL3IVF33_Pointer & operator=(itkWarpImageFilterIUL3IUL3IVF33 * r);
     itkWarpImageFilterIUL3IUL3IVF33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWarpImageFilterIUS2IUS2IVF22 : public itkImageToImageFilterIUS2IUS2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputImageDimension = 2 };
     enum  {  DeformationFieldDimension = 2 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  DeformationFieldHasNumericTraitsCheck = 1 };
     static itkWarpImageFilterIUS2IUS2IVF22_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetDeformationField(itkImageVF22 const * field);
     itkImageVF22 * GetDeformationField();
     virtual void SetInterpolator(itkInterpolateImageFunctionIUS2D * _arg);
     virtual itkInterpolateImageFunctionIUS2D * GetInterpolator();
     virtual void SetOutputSpacing(itkVectorD2 const _arg);
     virtual void SetOutputSpacing(double const * values);
     virtual itkVectorD2 const & GetOutputSpacing() const;
     virtual void SetOutputOrigin(itkPointD2 const _arg);
     virtual void SetOutputOrigin(double const * values);
     virtual itkPointD2 const & GetOutputOrigin() const;
     virtual void SetOutputDirection(itkMatrixD22 const _arg);
     virtual itkMatrixD22 const & GetOutputDirection() const;
     void SetOutputParametersFromImage(itkImageBase2 const * image);
     virtual void SetOutputStartIndex(itkIndex2 const _arg);
     virtual itkIndex2 const & GetOutputStartIndex() const;
     virtual void SetOutputSize(itkSize2 const _arg);
     virtual itkSize2 const & GetOutputSize() const;
     virtual void SetEdgePaddingValue(unsigned short const _arg);
     virtual unsigned short GetEdgePaddingValue() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
   private:
     itkWarpImageFilterIUS2IUS2IVF22(itkWarpImageFilterIUS2IUS2IVF22 const & arg0);
     void operator=(itkWarpImageFilterIUS2IUS2IVF22 const & arg0);
     itkVectorF2 EvaluateDeformationAtPhysicalPoint(itkPointD2 const & p);
   protected:
     itkWarpImageFilterIUS2IUS2IVF22();
     ~itkWarpImageFilterIUS2IUS2IVF22();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkWarpImageFilterIUS2IUS2IVF22_Pointer {
   public:
     itkWarpImageFilterIUS2IUS2IVF22_Pointer();
     itkWarpImageFilterIUS2IUS2IVF22_Pointer(itkWarpImageFilterIUS2IUS2IVF22_Pointer const & p);
     itkWarpImageFilterIUS2IUS2IVF22_Pointer(itkWarpImageFilterIUS2IUS2IVF22 * p);
     ~itkWarpImageFilterIUS2IUS2IVF22_Pointer();
     itkWarpImageFilterIUS2IUS2IVF22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWarpImageFilterIUS2IUS2IVF22 * GetPointer() const;
     bool operator<(itkWarpImageFilterIUS2IUS2IVF22_Pointer const & r) const;
     bool operator>(itkWarpImageFilterIUS2IUS2IVF22_Pointer const & r) const;
     bool operator<=(itkWarpImageFilterIUS2IUS2IVF22_Pointer const & r) const;
     bool operator>=(itkWarpImageFilterIUS2IUS2IVF22_Pointer const & r) const;
     itkWarpImageFilterIUS2IUS2IVF22_Pointer & operator=(itkWarpImageFilterIUS2IUS2IVF22_Pointer const & r);
     itkWarpImageFilterIUS2IUS2IVF22_Pointer & operator=(itkWarpImageFilterIUS2IUS2IVF22 * r);
     itkWarpImageFilterIUS2IUS2IVF22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkWarpImageFilterIUS3IUS3IVF33 : public itkImageToImageFilterIUS3IUS3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputImageDimension = 3 };
     enum  {  DeformationFieldDimension = 3 };
     enum  {  SameDimensionCheck1 = 1 };
     enum  {  SameDimensionCheck2 = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  DeformationFieldHasNumericTraitsCheck = 1 };
     static itkWarpImageFilterIUS3IUS3IVF33_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetDeformationField(itkImageVF33 const * field);
     itkImageVF33 * GetDeformationField();
     virtual void SetInterpolator(itkInterpolateImageFunctionIUS3D * _arg);
     virtual itkInterpolateImageFunctionIUS3D * GetInterpolator();
     virtual void SetOutputSpacing(itkVectorD3 const _arg);
     virtual void SetOutputSpacing(double const * values);
     virtual itkVectorD3 const & GetOutputSpacing() const;
     virtual void SetOutputOrigin(itkPointD3 const _arg);
     virtual void SetOutputOrigin(double const * values);
     virtual itkPointD3 const & GetOutputOrigin() const;
     virtual void SetOutputDirection(itkMatrixD33 const _arg);
     virtual itkMatrixD33 const & GetOutputDirection() const;
     void SetOutputParametersFromImage(itkImageBase3 const * image);
     virtual void SetOutputStartIndex(itkIndex3 const _arg);
     virtual itkIndex3 const & GetOutputStartIndex() const;
     virtual void SetOutputSize(itkSize3 const _arg);
     virtual itkSize3 const & GetOutputSize() const;
     virtual void SetEdgePaddingValue(unsigned short const _arg);
     virtual unsigned short GetEdgePaddingValue() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
   private:
     itkWarpImageFilterIUS3IUS3IVF33(itkWarpImageFilterIUS3IUS3IVF33 const & arg0);
     void operator=(itkWarpImageFilterIUS3IUS3IVF33 const & arg0);
     itkVectorF3 EvaluateDeformationAtPhysicalPoint(itkPointD3 const & p);
   protected:
     itkWarpImageFilterIUS3IUS3IVF33();
     ~itkWarpImageFilterIUS3IUS3IVF33();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkWarpImageFilterIUS3IUS3IVF33_Pointer {
   public:
     itkWarpImageFilterIUS3IUS3IVF33_Pointer();
     itkWarpImageFilterIUS3IUS3IVF33_Pointer(itkWarpImageFilterIUS3IUS3IVF33_Pointer const & p);
     itkWarpImageFilterIUS3IUS3IVF33_Pointer(itkWarpImageFilterIUS3IUS3IVF33 * p);
     ~itkWarpImageFilterIUS3IUS3IVF33_Pointer();
     itkWarpImageFilterIUS3IUS3IVF33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkWarpImageFilterIUS3IUS3IVF33 * GetPointer() const;
     bool operator<(itkWarpImageFilterIUS3IUS3IVF33_Pointer const & r) const;
     bool operator>(itkWarpImageFilterIUS3IUS3IVF33_Pointer const & r) const;
     bool operator<=(itkWarpImageFilterIUS3IUS3IVF33_Pointer const & r) const;
     bool operator>=(itkWarpImageFilterIUS3IUS3IVF33_Pointer const & r) const;
     itkWarpImageFilterIUS3IUS3IVF33_Pointer & operator=(itkWarpImageFilterIUS3IUS3IVF33_Pointer const & r);
     itkWarpImageFilterIUS3IUS3IVF33_Pointer & operator=(itkWarpImageFilterIUS3IUS3IVF33 * r);
     itkWarpImageFilterIUS3IUS3IVF33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


