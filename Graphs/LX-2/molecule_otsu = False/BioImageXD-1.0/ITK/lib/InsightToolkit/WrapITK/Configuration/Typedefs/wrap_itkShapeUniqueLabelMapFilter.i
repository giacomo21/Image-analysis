// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkShapeUniqueLabelMapFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkShapeUniqueLabelMapFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkShapeUniqueLabelMapFilterGuile
#endif
#ifdef SWIGJAVA
%module itkShapeUniqueLabelMapFilterJava
#endif
#ifdef SWIGLUA
%module itkShapeUniqueLabelMapFilterLua
#endif
#ifdef SWIGMODULA3
%module itkShapeUniqueLabelMapFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkShapeUniqueLabelMapFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkShapeUniqueLabelMapFilterOcaml
#endif
#ifdef SWIGPERL
%module itkShapeUniqueLabelMapFilterPerl
#endif
#ifdef SWIGPERL5
%module itkShapeUniqueLabelMapFilterPerl5
#endif
#ifdef SWIGPHP
%module itkShapeUniqueLabelMapFilterPhp
#endif
#ifdef SWIGPHP4
%module itkShapeUniqueLabelMapFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkShapeUniqueLabelMapFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkShapeUniqueLabelMapFilterPike
#endif
#ifdef SWIGPYTHON
%module itkShapeUniqueLabelMapFilterPython
#endif
#ifdef SWIGR
%module itkShapeUniqueLabelMapFilterR
#endif
#ifdef SWIGRUBY
%module itkShapeUniqueLabelMapFilterRuby
#endif
#ifdef SWIGSEXP
%module itkShapeUniqueLabelMapFilterSexp
#endif
#ifdef SWIGTCL
%module itkShapeUniqueLabelMapFilterTcl
#endif
#ifdef SWIGXML
%module itkShapeUniqueLabelMapFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
#include "Numerics.includes"
#include "BinaryMorphology.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkInPlaceLabelMapFilter.i


%include itk.i
%include wrap_itkShapeUniqueLabelMapFilter_ext.i


 class itkShapeUniqueLabelMapFilterLM2 : public itkInPlaceLabelMapFilterLM2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkShapeUniqueLabelMapFilterLM2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool GetReverseOrdering() const;
     virtual void SetReverseOrdering(bool const _arg);
     virtual void ReverseOrderingOn();
     virtual void ReverseOrderingOff();
     virtual unsigned int GetAttribute() const;
     virtual void SetAttribute(unsigned int const _arg);
     void SetAttribute(std::string const & s);
   private:
     itkShapeUniqueLabelMapFilterLM2(itkShapeUniqueLabelMapFilterLM2 const & arg0);
     void operator=(itkShapeUniqueLabelMapFilterLM2 const & arg0);
   protected:
     itkShapeUniqueLabelMapFilterLM2();
     ~itkShapeUniqueLabelMapFilterLM2();
     virtual void GenerateData();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkShapeUniqueLabelMapFilterLM2_Pointer {
   public:
     itkShapeUniqueLabelMapFilterLM2_Pointer();
     itkShapeUniqueLabelMapFilterLM2_Pointer(itkShapeUniqueLabelMapFilterLM2_Pointer const & p);
     itkShapeUniqueLabelMapFilterLM2_Pointer(itkShapeUniqueLabelMapFilterLM2 * p);
     ~itkShapeUniqueLabelMapFilterLM2_Pointer();
     itkShapeUniqueLabelMapFilterLM2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkShapeUniqueLabelMapFilterLM2 * GetPointer() const;
     bool operator<(itkShapeUniqueLabelMapFilterLM2_Pointer const & r) const;
     bool operator>(itkShapeUniqueLabelMapFilterLM2_Pointer const & r) const;
     bool operator<=(itkShapeUniqueLabelMapFilterLM2_Pointer const & r) const;
     bool operator>=(itkShapeUniqueLabelMapFilterLM2_Pointer const & r) const;
     itkShapeUniqueLabelMapFilterLM2_Pointer & operator=(itkShapeUniqueLabelMapFilterLM2_Pointer const & r);
     itkShapeUniqueLabelMapFilterLM2_Pointer & operator=(itkShapeUniqueLabelMapFilterLM2 * r);
     itkShapeUniqueLabelMapFilterLM2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkShapeUniqueLabelMapFilterLM3 : public itkInPlaceLabelMapFilterLM3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkShapeUniqueLabelMapFilterLM3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool GetReverseOrdering() const;
     virtual void SetReverseOrdering(bool const _arg);
     virtual void ReverseOrderingOn();
     virtual void ReverseOrderingOff();
     virtual unsigned int GetAttribute() const;
     virtual void SetAttribute(unsigned int const _arg);
     void SetAttribute(std::string const & s);
   private:
     itkShapeUniqueLabelMapFilterLM3(itkShapeUniqueLabelMapFilterLM3 const & arg0);
     void operator=(itkShapeUniqueLabelMapFilterLM3 const & arg0);
   protected:
     itkShapeUniqueLabelMapFilterLM3();
     ~itkShapeUniqueLabelMapFilterLM3();
     virtual void GenerateData();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkShapeUniqueLabelMapFilterLM3_Pointer {
   public:
     itkShapeUniqueLabelMapFilterLM3_Pointer();
     itkShapeUniqueLabelMapFilterLM3_Pointer(itkShapeUniqueLabelMapFilterLM3_Pointer const & p);
     itkShapeUniqueLabelMapFilterLM3_Pointer(itkShapeUniqueLabelMapFilterLM3 * p);
     ~itkShapeUniqueLabelMapFilterLM3_Pointer();
     itkShapeUniqueLabelMapFilterLM3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkShapeUniqueLabelMapFilterLM3 * GetPointer() const;
     bool operator<(itkShapeUniqueLabelMapFilterLM3_Pointer const & r) const;
     bool operator>(itkShapeUniqueLabelMapFilterLM3_Pointer const & r) const;
     bool operator<=(itkShapeUniqueLabelMapFilterLM3_Pointer const & r) const;
     bool operator>=(itkShapeUniqueLabelMapFilterLM3_Pointer const & r) const;
     itkShapeUniqueLabelMapFilterLM3_Pointer & operator=(itkShapeUniqueLabelMapFilterLM3_Pointer const & r);
     itkShapeUniqueLabelMapFilterLM3_Pointer & operator=(itkShapeUniqueLabelMapFilterLM3 * r);
     itkShapeUniqueLabelMapFilterLM3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


