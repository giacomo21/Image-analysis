// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkTubeSpatialObjectPointChicken
#endif
#ifdef SWIGCSHARP
%module itkTubeSpatialObjectPointCsharp
#endif
#ifdef SWIGGUILE
%module itkTubeSpatialObjectPointGuile
#endif
#ifdef SWIGJAVA
%module itkTubeSpatialObjectPointJava
#endif
#ifdef SWIGLUA
%module itkTubeSpatialObjectPointLua
#endif
#ifdef SWIGMODULA3
%module itkTubeSpatialObjectPointModula3
#endif
#ifdef SWIGMZSCHEME
%module itkTubeSpatialObjectPointMzscheme
#endif
#ifdef SWIGOCAML
%module itkTubeSpatialObjectPointOcaml
#endif
#ifdef SWIGPERL
%module itkTubeSpatialObjectPointPerl
#endif
#ifdef SWIGPERL5
%module itkTubeSpatialObjectPointPerl5
#endif
#ifdef SWIGPHP
%module itkTubeSpatialObjectPointPhp
#endif
#ifdef SWIGPHP4
%module itkTubeSpatialObjectPointPhp4
#endif
#ifdef SWIGPHP5
%module itkTubeSpatialObjectPointPhp5
#endif
#ifdef SWIGPIKE
%module itkTubeSpatialObjectPointPike
#endif
#ifdef SWIGPYTHON
%module itkTubeSpatialObjectPointPython
#endif
#ifdef SWIGR
%module itkTubeSpatialObjectPointR
#endif
#ifdef SWIGRUBY
%module itkTubeSpatialObjectPointRuby
#endif
#ifdef SWIGSEXP
%module itkTubeSpatialObjectPointSexp
#endif
#ifdef SWIGTCL
%module itkTubeSpatialObjectPointTcl
#endif
#ifdef SWIGXML
%module itkTubeSpatialObjectPointXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
#include "Calculators.includes"
#include "SpatialObject.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkVector.i
%import wrap_itkCovariantVector.i
%import wrap_itkSpatialObjectPoint.i


%include itk.i
%include wrap_itkTubeSpatialObjectPoint_ext.i


 class itkTubeSpatialObjectPoint2 : public itkSpatialObjectPoint2 {
   public:
     itkTubeSpatialObjectPoint2(itkTubeSpatialObjectPoint2 const & arg0);
     itkTubeSpatialObjectPoint2();
     ~itkTubeSpatialObjectPoint2();
     itkVectorD2 const & GetTangent() const;
     void SetTangent(itkVectorD2 const & newT);
     void SetTangent(double const t0, double const t1);
     void SetTangent(double const t0, double const t1, double const t2);
     itkCovariantVectorD2 const & GetNormal1() const;
     void SetNormal1(itkCovariantVectorD2 const & newV1);
     void SetNormal1(double const v10, double const v11);
     void SetNormal1(double const v10, double const v11, double const v12);
     itkCovariantVectorD2 const & GetNormal2() const;
     void SetNormal2(itkCovariantVectorD2 const & newV2);
     void SetNormal2(double const v20, double const v21);
     void SetNormal2(double const v20, double const v21, double const v22);
     float GetRadius() const;
     void SetRadius(float const newR);
     unsigned short GetNumDimensions() const;
     itkTubeSpatialObjectPoint2 & operator=(itkTubeSpatialObjectPoint2 const & rhs);
   private:
   protected:
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkTubeSpatialObjectPoint3 : public itkSpatialObjectPoint3 {
   public:
     itkTubeSpatialObjectPoint3(itkTubeSpatialObjectPoint3 const & arg0);
     itkTubeSpatialObjectPoint3();
     ~itkTubeSpatialObjectPoint3();
     itkVectorD3 const & GetTangent() const;
     void SetTangent(itkVectorD3 const & newT);
     void SetTangent(double const t0, double const t1);
     void SetTangent(double const t0, double const t1, double const t2);
     itkCovariantVectorD3 const & GetNormal1() const;
     void SetNormal1(itkCovariantVectorD3 const & newV1);
     void SetNormal1(double const v10, double const v11);
     void SetNormal1(double const v10, double const v11, double const v12);
     itkCovariantVectorD3 const & GetNormal2() const;
     void SetNormal2(itkCovariantVectorD3 const & newV2);
     void SetNormal2(double const v20, double const v21);
     void SetNormal2(double const v20, double const v21, double const v22);
     float GetRadius() const;
     void SetRadius(float const newR);
     unsigned short GetNumDimensions() const;
     itkTubeSpatialObjectPoint3 & operator=(itkTubeSpatialObjectPoint3 const & rhs);
   private:
   protected:
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


