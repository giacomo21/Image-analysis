// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkNoiseImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkNoiseImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkNoiseImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkNoiseImageFilterJava
#endif
#ifdef SWIGLUA
%module itkNoiseImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkNoiseImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkNoiseImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkNoiseImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkNoiseImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkNoiseImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkNoiseImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkNoiseImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkNoiseImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkNoiseImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkNoiseImageFilterPython
#endif
#ifdef SWIGR
%module itkNoiseImageFilterR
#endif
#ifdef SWIGRUBY
%module itkNoiseImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkNoiseImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkNoiseImageFilterTcl
#endif
#ifdef SWIGXML
%module itkNoiseImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Numerics.includes"
#include "Calculators.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkSize.i
%import wrap_ITKRegions.i
%import wrap_itkImageToImageFilterA.i


%include itk.i
%include wrap_itkNoiseImageFilter_ext.i


 class itkNoiseImageFilterID2ID2 : public itkImageToImageFilterID2ID2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     static itkNoiseImageFilterID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetRadius(itkSize2 const _arg);
     virtual itkSize2 const & GetRadius() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkNoiseImageFilterID2ID2(itkNoiseImageFilterID2ID2 const & arg0);
     void operator=(itkNoiseImageFilterID2ID2 const & arg0);
   protected:
     itkNoiseImageFilterID2ID2();
     ~itkNoiseImageFilterID2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkNoiseImageFilterID2ID2_Pointer {
   public:
     itkNoiseImageFilterID2ID2_Pointer();
     itkNoiseImageFilterID2ID2_Pointer(itkNoiseImageFilterID2ID2_Pointer const & p);
     itkNoiseImageFilterID2ID2_Pointer(itkNoiseImageFilterID2ID2 * p);
     ~itkNoiseImageFilterID2ID2_Pointer();
     itkNoiseImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkNoiseImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkNoiseImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkNoiseImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkNoiseImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkNoiseImageFilterID2ID2_Pointer const & r) const;
     itkNoiseImageFilterID2ID2_Pointer & operator=(itkNoiseImageFilterID2ID2_Pointer const & r);
     itkNoiseImageFilterID2ID2_Pointer & operator=(itkNoiseImageFilterID2ID2 * r);
     itkNoiseImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkNoiseImageFilterID3ID3 : public itkImageToImageFilterID3ID3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     static itkNoiseImageFilterID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetRadius(itkSize3 const _arg);
     virtual itkSize3 const & GetRadius() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkNoiseImageFilterID3ID3(itkNoiseImageFilterID3ID3 const & arg0);
     void operator=(itkNoiseImageFilterID3ID3 const & arg0);
   protected:
     itkNoiseImageFilterID3ID3();
     ~itkNoiseImageFilterID3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkNoiseImageFilterID3ID3_Pointer {
   public:
     itkNoiseImageFilterID3ID3_Pointer();
     itkNoiseImageFilterID3ID3_Pointer(itkNoiseImageFilterID3ID3_Pointer const & p);
     itkNoiseImageFilterID3ID3_Pointer(itkNoiseImageFilterID3ID3 * p);
     ~itkNoiseImageFilterID3ID3_Pointer();
     itkNoiseImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkNoiseImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkNoiseImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkNoiseImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkNoiseImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkNoiseImageFilterID3ID3_Pointer const & r) const;
     itkNoiseImageFilterID3ID3_Pointer & operator=(itkNoiseImageFilterID3ID3_Pointer const & r);
     itkNoiseImageFilterID3ID3_Pointer & operator=(itkNoiseImageFilterID3ID3 * r);
     itkNoiseImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkNoiseImageFilterIF2IF2 : public itkImageToImageFilterIF2IF2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     static itkNoiseImageFilterIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetRadius(itkSize2 const _arg);
     virtual itkSize2 const & GetRadius() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkNoiseImageFilterIF2IF2(itkNoiseImageFilterIF2IF2 const & arg0);
     void operator=(itkNoiseImageFilterIF2IF2 const & arg0);
   protected:
     itkNoiseImageFilterIF2IF2();
     ~itkNoiseImageFilterIF2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkNoiseImageFilterIF2IF2_Pointer {
   public:
     itkNoiseImageFilterIF2IF2_Pointer();
     itkNoiseImageFilterIF2IF2_Pointer(itkNoiseImageFilterIF2IF2_Pointer const & p);
     itkNoiseImageFilterIF2IF2_Pointer(itkNoiseImageFilterIF2IF2 * p);
     ~itkNoiseImageFilterIF2IF2_Pointer();
     itkNoiseImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkNoiseImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkNoiseImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkNoiseImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkNoiseImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkNoiseImageFilterIF2IF2_Pointer const & r) const;
     itkNoiseImageFilterIF2IF2_Pointer & operator=(itkNoiseImageFilterIF2IF2_Pointer const & r);
     itkNoiseImageFilterIF2IF2_Pointer & operator=(itkNoiseImageFilterIF2IF2 * r);
     itkNoiseImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkNoiseImageFilterIF3IF3 : public itkImageToImageFilterIF3IF3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     static itkNoiseImageFilterIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetRadius(itkSize3 const _arg);
     virtual itkSize3 const & GetRadius() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkNoiseImageFilterIF3IF3(itkNoiseImageFilterIF3IF3 const & arg0);
     void operator=(itkNoiseImageFilterIF3IF3 const & arg0);
   protected:
     itkNoiseImageFilterIF3IF3();
     ~itkNoiseImageFilterIF3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkNoiseImageFilterIF3IF3_Pointer {
   public:
     itkNoiseImageFilterIF3IF3_Pointer();
     itkNoiseImageFilterIF3IF3_Pointer(itkNoiseImageFilterIF3IF3_Pointer const & p);
     itkNoiseImageFilterIF3IF3_Pointer(itkNoiseImageFilterIF3IF3 * p);
     ~itkNoiseImageFilterIF3IF3_Pointer();
     itkNoiseImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkNoiseImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkNoiseImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkNoiseImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkNoiseImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkNoiseImageFilterIF3IF3_Pointer const & r) const;
     itkNoiseImageFilterIF3IF3_Pointer & operator=(itkNoiseImageFilterIF3IF3_Pointer const & r);
     itkNoiseImageFilterIF3IF3_Pointer & operator=(itkNoiseImageFilterIF3IF3 * r);
     itkNoiseImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkNoiseImageFilterIUC2IUC2 : public itkImageToImageFilterIUC2IUC2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     static itkNoiseImageFilterIUC2IUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetRadius(itkSize2 const _arg);
     virtual itkSize2 const & GetRadius() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkNoiseImageFilterIUC2IUC2(itkNoiseImageFilterIUC2IUC2 const & arg0);
     void operator=(itkNoiseImageFilterIUC2IUC2 const & arg0);
   protected:
     itkNoiseImageFilterIUC2IUC2();
     ~itkNoiseImageFilterIUC2IUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkNoiseImageFilterIUC2IUC2_Pointer {
   public:
     itkNoiseImageFilterIUC2IUC2_Pointer();
     itkNoiseImageFilterIUC2IUC2_Pointer(itkNoiseImageFilterIUC2IUC2_Pointer const & p);
     itkNoiseImageFilterIUC2IUC2_Pointer(itkNoiseImageFilterIUC2IUC2 * p);
     ~itkNoiseImageFilterIUC2IUC2_Pointer();
     itkNoiseImageFilterIUC2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkNoiseImageFilterIUC2IUC2 * GetPointer() const;
     bool operator<(itkNoiseImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>(itkNoiseImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator<=(itkNoiseImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>=(itkNoiseImageFilterIUC2IUC2_Pointer const & r) const;
     itkNoiseImageFilterIUC2IUC2_Pointer & operator=(itkNoiseImageFilterIUC2IUC2_Pointer const & r);
     itkNoiseImageFilterIUC2IUC2_Pointer & operator=(itkNoiseImageFilterIUC2IUC2 * r);
     itkNoiseImageFilterIUC2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkNoiseImageFilterIUC3IUC3 : public itkImageToImageFilterIUC3IUC3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     static itkNoiseImageFilterIUC3IUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetRadius(itkSize3 const _arg);
     virtual itkSize3 const & GetRadius() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkNoiseImageFilterIUC3IUC3(itkNoiseImageFilterIUC3IUC3 const & arg0);
     void operator=(itkNoiseImageFilterIUC3IUC3 const & arg0);
   protected:
     itkNoiseImageFilterIUC3IUC3();
     ~itkNoiseImageFilterIUC3IUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkNoiseImageFilterIUC3IUC3_Pointer {
   public:
     itkNoiseImageFilterIUC3IUC3_Pointer();
     itkNoiseImageFilterIUC3IUC3_Pointer(itkNoiseImageFilterIUC3IUC3_Pointer const & p);
     itkNoiseImageFilterIUC3IUC3_Pointer(itkNoiseImageFilterIUC3IUC3 * p);
     ~itkNoiseImageFilterIUC3IUC3_Pointer();
     itkNoiseImageFilterIUC3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkNoiseImageFilterIUC3IUC3 * GetPointer() const;
     bool operator<(itkNoiseImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>(itkNoiseImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator<=(itkNoiseImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>=(itkNoiseImageFilterIUC3IUC3_Pointer const & r) const;
     itkNoiseImageFilterIUC3IUC3_Pointer & operator=(itkNoiseImageFilterIUC3IUC3_Pointer const & r);
     itkNoiseImageFilterIUC3IUC3_Pointer & operator=(itkNoiseImageFilterIUC3IUC3 * r);
     itkNoiseImageFilterIUC3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkNoiseImageFilterIUL2IUL2 : public itkImageToImageFilterIUL2IUL2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     static itkNoiseImageFilterIUL2IUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetRadius(itkSize2 const _arg);
     virtual itkSize2 const & GetRadius() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkNoiseImageFilterIUL2IUL2(itkNoiseImageFilterIUL2IUL2 const & arg0);
     void operator=(itkNoiseImageFilterIUL2IUL2 const & arg0);
   protected:
     itkNoiseImageFilterIUL2IUL2();
     ~itkNoiseImageFilterIUL2IUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkNoiseImageFilterIUL2IUL2_Pointer {
   public:
     itkNoiseImageFilterIUL2IUL2_Pointer();
     itkNoiseImageFilterIUL2IUL2_Pointer(itkNoiseImageFilterIUL2IUL2_Pointer const & p);
     itkNoiseImageFilterIUL2IUL2_Pointer(itkNoiseImageFilterIUL2IUL2 * p);
     ~itkNoiseImageFilterIUL2IUL2_Pointer();
     itkNoiseImageFilterIUL2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkNoiseImageFilterIUL2IUL2 * GetPointer() const;
     bool operator<(itkNoiseImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>(itkNoiseImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator<=(itkNoiseImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>=(itkNoiseImageFilterIUL2IUL2_Pointer const & r) const;
     itkNoiseImageFilterIUL2IUL2_Pointer & operator=(itkNoiseImageFilterIUL2IUL2_Pointer const & r);
     itkNoiseImageFilterIUL2IUL2_Pointer & operator=(itkNoiseImageFilterIUL2IUL2 * r);
     itkNoiseImageFilterIUL2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkNoiseImageFilterIUL3IUL3 : public itkImageToImageFilterIUL3IUL3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     static itkNoiseImageFilterIUL3IUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetRadius(itkSize3 const _arg);
     virtual itkSize3 const & GetRadius() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkNoiseImageFilterIUL3IUL3(itkNoiseImageFilterIUL3IUL3 const & arg0);
     void operator=(itkNoiseImageFilterIUL3IUL3 const & arg0);
   protected:
     itkNoiseImageFilterIUL3IUL3();
     ~itkNoiseImageFilterIUL3IUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkNoiseImageFilterIUL3IUL3_Pointer {
   public:
     itkNoiseImageFilterIUL3IUL3_Pointer();
     itkNoiseImageFilterIUL3IUL3_Pointer(itkNoiseImageFilterIUL3IUL3_Pointer const & p);
     itkNoiseImageFilterIUL3IUL3_Pointer(itkNoiseImageFilterIUL3IUL3 * p);
     ~itkNoiseImageFilterIUL3IUL3_Pointer();
     itkNoiseImageFilterIUL3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkNoiseImageFilterIUL3IUL3 * GetPointer() const;
     bool operator<(itkNoiseImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>(itkNoiseImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator<=(itkNoiseImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>=(itkNoiseImageFilterIUL3IUL3_Pointer const & r) const;
     itkNoiseImageFilterIUL3IUL3_Pointer & operator=(itkNoiseImageFilterIUL3IUL3_Pointer const & r);
     itkNoiseImageFilterIUL3IUL3_Pointer & operator=(itkNoiseImageFilterIUL3IUL3 * r);
     itkNoiseImageFilterIUL3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkNoiseImageFilterIUS2IUS2 : public itkImageToImageFilterIUS2IUS2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     static itkNoiseImageFilterIUS2IUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetRadius(itkSize2 const _arg);
     virtual itkSize2 const & GetRadius() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkNoiseImageFilterIUS2IUS2(itkNoiseImageFilterIUS2IUS2 const & arg0);
     void operator=(itkNoiseImageFilterIUS2IUS2 const & arg0);
   protected:
     itkNoiseImageFilterIUS2IUS2();
     ~itkNoiseImageFilterIUS2IUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkNoiseImageFilterIUS2IUS2_Pointer {
   public:
     itkNoiseImageFilterIUS2IUS2_Pointer();
     itkNoiseImageFilterIUS2IUS2_Pointer(itkNoiseImageFilterIUS2IUS2_Pointer const & p);
     itkNoiseImageFilterIUS2IUS2_Pointer(itkNoiseImageFilterIUS2IUS2 * p);
     ~itkNoiseImageFilterIUS2IUS2_Pointer();
     itkNoiseImageFilterIUS2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkNoiseImageFilterIUS2IUS2 * GetPointer() const;
     bool operator<(itkNoiseImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>(itkNoiseImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator<=(itkNoiseImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>=(itkNoiseImageFilterIUS2IUS2_Pointer const & r) const;
     itkNoiseImageFilterIUS2IUS2_Pointer & operator=(itkNoiseImageFilterIUS2IUS2_Pointer const & r);
     itkNoiseImageFilterIUS2IUS2_Pointer & operator=(itkNoiseImageFilterIUS2IUS2 * r);
     itkNoiseImageFilterIUS2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkNoiseImageFilterIUS3IUS3 : public itkImageToImageFilterIUS3IUS3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     static itkNoiseImageFilterIUS3IUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetRadius(itkSize3 const _arg);
     virtual itkSize3 const & GetRadius() const;
     virtual void GenerateInputRequestedRegion();
   private:
     itkNoiseImageFilterIUS3IUS3(itkNoiseImageFilterIUS3IUS3 const & arg0);
     void operator=(itkNoiseImageFilterIUS3IUS3 const & arg0);
   protected:
     itkNoiseImageFilterIUS3IUS3();
     ~itkNoiseImageFilterIUS3IUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkNoiseImageFilterIUS3IUS3_Pointer {
   public:
     itkNoiseImageFilterIUS3IUS3_Pointer();
     itkNoiseImageFilterIUS3IUS3_Pointer(itkNoiseImageFilterIUS3IUS3_Pointer const & p);
     itkNoiseImageFilterIUS3IUS3_Pointer(itkNoiseImageFilterIUS3IUS3 * p);
     ~itkNoiseImageFilterIUS3IUS3_Pointer();
     itkNoiseImageFilterIUS3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkNoiseImageFilterIUS3IUS3 * GetPointer() const;
     bool operator<(itkNoiseImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>(itkNoiseImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator<=(itkNoiseImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>=(itkNoiseImageFilterIUS3IUS3_Pointer const & r) const;
     itkNoiseImageFilterIUS3IUS3_Pointer & operator=(itkNoiseImageFilterIUS3IUS3_Pointer const & r);
     itkNoiseImageFilterIUS3IUS3_Pointer & operator=(itkNoiseImageFilterIUS3IUS3 * r);
     itkNoiseImageFilterIUS3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


