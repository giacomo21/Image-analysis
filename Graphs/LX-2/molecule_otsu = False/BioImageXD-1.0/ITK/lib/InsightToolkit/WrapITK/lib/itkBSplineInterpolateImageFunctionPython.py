# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkBSplineInterpolateImageFunctionPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkBSplineInterpolateImageFunctionPython', [dirname(__file__)])
        except ImportError:
            import _itkBSplineInterpolateImageFunctionPython
            return _itkBSplineInterpolateImageFunctionPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkBSplineInterpolateImageFunctionPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkBSplineInterpolateImageFunctionPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkBSplineInterpolateImageFunctionPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkPointPython
import vnl_vectorPython
import vcl_complexPython
import pyBasePython
import vnl_matrixPython
import itkFixedArrayPython
import itkVectorPython
import vnl_vector_refPython
import itkContinuousIndexPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkImagePython
import itkCovariantVectorPython
import ITKRegionsPython
import ITKCommonBasePython
import itkEventObjectsPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkRGBPixelPython
import itkInterpolateImageFunctionPython
import itkImageFunctionPython
import itkFunctionBasePython
import itkArrayPython
def itkBSplineInterpolateImageFunctionID3DD_New():
  return itkBSplineInterpolateImageFunctionID3DD.New()

def itkBSplineInterpolateImageFunctionIF3DF_New():
  return itkBSplineInterpolateImageFunctionIF3DF.New()

def itkBSplineInterpolateImageFunctionIUS3DUS_New():
  return itkBSplineInterpolateImageFunctionIUS3DUS.New()

def itkBSplineInterpolateImageFunctionIUL3DUL_New():
  return itkBSplineInterpolateImageFunctionIUL3DUL.New()

def itkBSplineInterpolateImageFunctionIUC3DUC_New():
  return itkBSplineInterpolateImageFunctionIUC3DUC.New()

def itkBSplineInterpolateImageFunctionID2DD_New():
  return itkBSplineInterpolateImageFunctionID2DD.New()

def itkBSplineInterpolateImageFunctionIF2DF_New():
  return itkBSplineInterpolateImageFunctionIF2DF.New()

def itkBSplineInterpolateImageFunctionIUS2DUS_New():
  return itkBSplineInterpolateImageFunctionIUS2DUS.New()

def itkBSplineInterpolateImageFunctionIUL2DUL_New():
  return itkBSplineInterpolateImageFunctionIUL2DUL.New()

def itkBSplineInterpolateImageFunctionIUC2DUC_New():
  return itkBSplineInterpolateImageFunctionIUC2DUC.New()

class itkBSplineInterpolateImageFunctionID2DD(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D):
    """Proxy of C++ itkBSplineInterpolateImageFunctionID2DD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Evaluate(self, *args):
        """
        Evaluate(self, itkPointD2 point) -> double
        Evaluate(self, itkPointD2 point, unsigned int threadID) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        """
        EvaluateAtContinuousIndex(self, itkContinuousIndexD2 index) -> double
        EvaluateAtContinuousIndex(self, itkContinuousIndexD2 index, unsigned int threadID) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        """
        EvaluateDerivative(self, itkPointD2 point) -> itkCovariantVectorD2
        EvaluateDerivative(self, itkPointD2 point, unsigned int threadID) -> itkCovariantVectorD2
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        """
        EvaluateDerivativeAtContinuousIndex(self, itkContinuousIndexD2 x) -> itkCovariantVectorD2
        EvaluateDerivativeAtContinuousIndex(self, itkContinuousIndexD2 x, unsigned int threadID) -> itkCovariantVectorD2
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        """
        EvaluateValueAndDerivative(self, itkPointD2 point, double value, itkCovariantVectorD2 deriv)
        EvaluateValueAndDerivative(self, itkPointD2 point, double value, itkCovariantVectorD2 deriv, 
            unsigned int threadID)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        """
        EvaluateValueAndDerivativeAtContinuousIndex(self, itkContinuousIndexD2 x, double value, itkCovariantVectorD2 deriv)
        EvaluateValueAndDerivativeAtContinuousIndex(self, itkContinuousIndexD2 x, double value, itkCovariantVectorD2 deriv, 
            unsigned int threadID)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, *args):
        """SetSplineOrder(self, unsigned int SplineOrder)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_SetSplineOrder(self, *args)

    def GetSplineOrder(self):
        """GetSplineOrder(self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_GetSplineOrder(self)

    def SetNumberOfThreads(self, *args):
        """SetNumberOfThreads(self, unsigned int numThreads)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_SetNumberOfThreads(self, *args)

    def GetNumberOfThreads(self):
        """GetNumberOfThreads(self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_GetNumberOfThreads(self)

    def SetUseImageDirection(self, *args):
        """SetUseImageDirection(self, bool _arg)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_SetUseImageDirection(self, *args)

    def GetUseImageDirection(self):
        """GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        """UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        """UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_UseImageDirectionOff(self)

    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionID2DD
    def cast(*args):
        """cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionID2DD"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBSplineInterpolateImageFunctionID2DD"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionID2DD
        
        Create a new object of the class itkBSplineInterpolateImageFunctionID2DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBSplineInterpolateImageFunctionID2DD.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBSplineInterpolateImageFunctionID2DD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineInterpolateImageFunctionID2DD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineInterpolateImageFunctionID2DD.Evaluate = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_Evaluate,None,itkBSplineInterpolateImageFunctionID2DD)
itkBSplineInterpolateImageFunctionID2DD.EvaluateAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_EvaluateAtContinuousIndex,None,itkBSplineInterpolateImageFunctionID2DD)
itkBSplineInterpolateImageFunctionID2DD.EvaluateDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_EvaluateDerivative,None,itkBSplineInterpolateImageFunctionID2DD)
itkBSplineInterpolateImageFunctionID2DD.EvaluateDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_EvaluateDerivativeAtContinuousIndex,None,itkBSplineInterpolateImageFunctionID2DD)
itkBSplineInterpolateImageFunctionID2DD.EvaluateValueAndDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_EvaluateValueAndDerivative,None,itkBSplineInterpolateImageFunctionID2DD)
itkBSplineInterpolateImageFunctionID2DD.EvaluateValueAndDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_EvaluateValueAndDerivativeAtContinuousIndex,None,itkBSplineInterpolateImageFunctionID2DD)
itkBSplineInterpolateImageFunctionID2DD.SetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_SetSplineOrder,None,itkBSplineInterpolateImageFunctionID2DD)
itkBSplineInterpolateImageFunctionID2DD.GetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_GetSplineOrder,None,itkBSplineInterpolateImageFunctionID2DD)
itkBSplineInterpolateImageFunctionID2DD.SetNumberOfThreads = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_SetNumberOfThreads,None,itkBSplineInterpolateImageFunctionID2DD)
itkBSplineInterpolateImageFunctionID2DD.GetNumberOfThreads = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_GetNumberOfThreads,None,itkBSplineInterpolateImageFunctionID2DD)
itkBSplineInterpolateImageFunctionID2DD.SetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_SetUseImageDirection,None,itkBSplineInterpolateImageFunctionID2DD)
itkBSplineInterpolateImageFunctionID2DD.GetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_GetUseImageDirection,None,itkBSplineInterpolateImageFunctionID2DD)
itkBSplineInterpolateImageFunctionID2DD.UseImageDirectionOn = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_UseImageDirectionOn,None,itkBSplineInterpolateImageFunctionID2DD)
itkBSplineInterpolateImageFunctionID2DD.UseImageDirectionOff = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_UseImageDirectionOff,None,itkBSplineInterpolateImageFunctionID2DD)
itkBSplineInterpolateImageFunctionID2DD.GetPointer = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_GetPointer,None,itkBSplineInterpolateImageFunctionID2DD)
itkBSplineInterpolateImageFunctionID2DD_swigregister = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_swigregister
itkBSplineInterpolateImageFunctionID2DD_swigregister(itkBSplineInterpolateImageFunctionID2DD)

def itkBSplineInterpolateImageFunctionID2DD___New_orig__():
  """itkBSplineInterpolateImageFunctionID2DD___New_orig__()"""
  return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD___New_orig__()

def itkBSplineInterpolateImageFunctionID2DD_cast(*args):
  """itkBSplineInterpolateImageFunctionID2DD_cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionID2DD"""
  return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID2DD_cast(*args)

class itkBSplineInterpolateImageFunctionID3DD(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D):
    """Proxy of C++ itkBSplineInterpolateImageFunctionID3DD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Evaluate(self, *args):
        """
        Evaluate(self, itkPointD3 point) -> double
        Evaluate(self, itkPointD3 point, unsigned int threadID) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        """
        EvaluateAtContinuousIndex(self, itkContinuousIndexD3 index) -> double
        EvaluateAtContinuousIndex(self, itkContinuousIndexD3 index, unsigned int threadID) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        """
        EvaluateDerivative(self, itkPointD3 point) -> itkCovariantVectorD3
        EvaluateDerivative(self, itkPointD3 point, unsigned int threadID) -> itkCovariantVectorD3
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        """
        EvaluateDerivativeAtContinuousIndex(self, itkContinuousIndexD3 x) -> itkCovariantVectorD3
        EvaluateDerivativeAtContinuousIndex(self, itkContinuousIndexD3 x, unsigned int threadID) -> itkCovariantVectorD3
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        """
        EvaluateValueAndDerivative(self, itkPointD3 point, double value, itkCovariantVectorD3 deriv)
        EvaluateValueAndDerivative(self, itkPointD3 point, double value, itkCovariantVectorD3 deriv, 
            unsigned int threadID)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        """
        EvaluateValueAndDerivativeAtContinuousIndex(self, itkContinuousIndexD3 x, double value, itkCovariantVectorD3 deriv)
        EvaluateValueAndDerivativeAtContinuousIndex(self, itkContinuousIndexD3 x, double value, itkCovariantVectorD3 deriv, 
            unsigned int threadID)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, *args):
        """SetSplineOrder(self, unsigned int SplineOrder)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_SetSplineOrder(self, *args)

    def GetSplineOrder(self):
        """GetSplineOrder(self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_GetSplineOrder(self)

    def SetNumberOfThreads(self, *args):
        """SetNumberOfThreads(self, unsigned int numThreads)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_SetNumberOfThreads(self, *args)

    def GetNumberOfThreads(self):
        """GetNumberOfThreads(self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_GetNumberOfThreads(self)

    def SetUseImageDirection(self, *args):
        """SetUseImageDirection(self, bool _arg)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_SetUseImageDirection(self, *args)

    def GetUseImageDirection(self):
        """GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        """UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        """UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_UseImageDirectionOff(self)

    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionID3DD
    def cast(*args):
        """cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionID3DD"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBSplineInterpolateImageFunctionID3DD"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionID3DD
        
        Create a new object of the class itkBSplineInterpolateImageFunctionID3DD and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBSplineInterpolateImageFunctionID3DD.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBSplineInterpolateImageFunctionID3DD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineInterpolateImageFunctionID3DD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineInterpolateImageFunctionID3DD.Evaluate = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_Evaluate,None,itkBSplineInterpolateImageFunctionID3DD)
itkBSplineInterpolateImageFunctionID3DD.EvaluateAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_EvaluateAtContinuousIndex,None,itkBSplineInterpolateImageFunctionID3DD)
itkBSplineInterpolateImageFunctionID3DD.EvaluateDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_EvaluateDerivative,None,itkBSplineInterpolateImageFunctionID3DD)
itkBSplineInterpolateImageFunctionID3DD.EvaluateDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_EvaluateDerivativeAtContinuousIndex,None,itkBSplineInterpolateImageFunctionID3DD)
itkBSplineInterpolateImageFunctionID3DD.EvaluateValueAndDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_EvaluateValueAndDerivative,None,itkBSplineInterpolateImageFunctionID3DD)
itkBSplineInterpolateImageFunctionID3DD.EvaluateValueAndDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_EvaluateValueAndDerivativeAtContinuousIndex,None,itkBSplineInterpolateImageFunctionID3DD)
itkBSplineInterpolateImageFunctionID3DD.SetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_SetSplineOrder,None,itkBSplineInterpolateImageFunctionID3DD)
itkBSplineInterpolateImageFunctionID3DD.GetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_GetSplineOrder,None,itkBSplineInterpolateImageFunctionID3DD)
itkBSplineInterpolateImageFunctionID3DD.SetNumberOfThreads = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_SetNumberOfThreads,None,itkBSplineInterpolateImageFunctionID3DD)
itkBSplineInterpolateImageFunctionID3DD.GetNumberOfThreads = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_GetNumberOfThreads,None,itkBSplineInterpolateImageFunctionID3DD)
itkBSplineInterpolateImageFunctionID3DD.SetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_SetUseImageDirection,None,itkBSplineInterpolateImageFunctionID3DD)
itkBSplineInterpolateImageFunctionID3DD.GetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_GetUseImageDirection,None,itkBSplineInterpolateImageFunctionID3DD)
itkBSplineInterpolateImageFunctionID3DD.UseImageDirectionOn = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_UseImageDirectionOn,None,itkBSplineInterpolateImageFunctionID3DD)
itkBSplineInterpolateImageFunctionID3DD.UseImageDirectionOff = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_UseImageDirectionOff,None,itkBSplineInterpolateImageFunctionID3DD)
itkBSplineInterpolateImageFunctionID3DD.GetPointer = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_GetPointer,None,itkBSplineInterpolateImageFunctionID3DD)
itkBSplineInterpolateImageFunctionID3DD_swigregister = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_swigregister
itkBSplineInterpolateImageFunctionID3DD_swigregister(itkBSplineInterpolateImageFunctionID3DD)

def itkBSplineInterpolateImageFunctionID3DD___New_orig__():
  """itkBSplineInterpolateImageFunctionID3DD___New_orig__()"""
  return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD___New_orig__()

def itkBSplineInterpolateImageFunctionID3DD_cast(*args):
  """itkBSplineInterpolateImageFunctionID3DD_cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionID3DD"""
  return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionID3DD_cast(*args)

class itkBSplineInterpolateImageFunctionIF2DF(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D):
    """Proxy of C++ itkBSplineInterpolateImageFunctionIF2DF class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Evaluate(self, *args):
        """
        Evaluate(self, itkPointD2 point) -> double
        Evaluate(self, itkPointD2 point, unsigned int threadID) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        """
        EvaluateAtContinuousIndex(self, itkContinuousIndexD2 index) -> double
        EvaluateAtContinuousIndex(self, itkContinuousIndexD2 index, unsigned int threadID) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        """
        EvaluateDerivative(self, itkPointD2 point) -> itkCovariantVectorD2
        EvaluateDerivative(self, itkPointD2 point, unsigned int threadID) -> itkCovariantVectorD2
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        """
        EvaluateDerivativeAtContinuousIndex(self, itkContinuousIndexD2 x) -> itkCovariantVectorD2
        EvaluateDerivativeAtContinuousIndex(self, itkContinuousIndexD2 x, unsigned int threadID) -> itkCovariantVectorD2
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        """
        EvaluateValueAndDerivative(self, itkPointD2 point, double value, itkCovariantVectorD2 deriv)
        EvaluateValueAndDerivative(self, itkPointD2 point, double value, itkCovariantVectorD2 deriv, 
            unsigned int threadID)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        """
        EvaluateValueAndDerivativeAtContinuousIndex(self, itkContinuousIndexD2 x, double value, itkCovariantVectorD2 deriv)
        EvaluateValueAndDerivativeAtContinuousIndex(self, itkContinuousIndexD2 x, double value, itkCovariantVectorD2 deriv, 
            unsigned int threadID)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, *args):
        """SetSplineOrder(self, unsigned int SplineOrder)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_SetSplineOrder(self, *args)

    def GetSplineOrder(self):
        """GetSplineOrder(self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_GetSplineOrder(self)

    def SetNumberOfThreads(self, *args):
        """SetNumberOfThreads(self, unsigned int numThreads)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_SetNumberOfThreads(self, *args)

    def GetNumberOfThreads(self):
        """GetNumberOfThreads(self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_GetNumberOfThreads(self)

    def SetUseImageDirection(self, *args):
        """SetUseImageDirection(self, bool _arg)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_SetUseImageDirection(self, *args)

    def GetUseImageDirection(self):
        """GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        """UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        """UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_UseImageDirectionOff(self)

    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIF2DF
    def cast(*args):
        """cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIF2DF"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBSplineInterpolateImageFunctionIF2DF"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIF2DF
        
        Create a new object of the class itkBSplineInterpolateImageFunctionIF2DF and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBSplineInterpolateImageFunctionIF2DF.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBSplineInterpolateImageFunctionIF2DF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineInterpolateImageFunctionIF2DF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineInterpolateImageFunctionIF2DF.Evaluate = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_Evaluate,None,itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.EvaluateAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateAtContinuousIndex,None,itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.EvaluateDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateDerivative,None,itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.EvaluateDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateDerivativeAtContinuousIndex,None,itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.EvaluateValueAndDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateValueAndDerivative,None,itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.EvaluateValueAndDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_EvaluateValueAndDerivativeAtContinuousIndex,None,itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.SetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_SetSplineOrder,None,itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.GetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_GetSplineOrder,None,itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.SetNumberOfThreads = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_SetNumberOfThreads,None,itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.GetNumberOfThreads = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_GetNumberOfThreads,None,itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.SetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_SetUseImageDirection,None,itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.GetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_GetUseImageDirection,None,itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.UseImageDirectionOn = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_UseImageDirectionOn,None,itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.UseImageDirectionOff = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_UseImageDirectionOff,None,itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF.GetPointer = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_GetPointer,None,itkBSplineInterpolateImageFunctionIF2DF)
itkBSplineInterpolateImageFunctionIF2DF_swigregister = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_swigregister
itkBSplineInterpolateImageFunctionIF2DF_swigregister(itkBSplineInterpolateImageFunctionIF2DF)

def itkBSplineInterpolateImageFunctionIF2DF___New_orig__():
  """itkBSplineInterpolateImageFunctionIF2DF___New_orig__()"""
  return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF___New_orig__()

def itkBSplineInterpolateImageFunctionIF2DF_cast(*args):
  """itkBSplineInterpolateImageFunctionIF2DF_cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIF2DF"""
  return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF2DF_cast(*args)

class itkBSplineInterpolateImageFunctionIF3DF(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D):
    """Proxy of C++ itkBSplineInterpolateImageFunctionIF3DF class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Evaluate(self, *args):
        """
        Evaluate(self, itkPointD3 point) -> double
        Evaluate(self, itkPointD3 point, unsigned int threadID) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        """
        EvaluateAtContinuousIndex(self, itkContinuousIndexD3 index) -> double
        EvaluateAtContinuousIndex(self, itkContinuousIndexD3 index, unsigned int threadID) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        """
        EvaluateDerivative(self, itkPointD3 point) -> itkCovariantVectorD3
        EvaluateDerivative(self, itkPointD3 point, unsigned int threadID) -> itkCovariantVectorD3
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        """
        EvaluateDerivativeAtContinuousIndex(self, itkContinuousIndexD3 x) -> itkCovariantVectorD3
        EvaluateDerivativeAtContinuousIndex(self, itkContinuousIndexD3 x, unsigned int threadID) -> itkCovariantVectorD3
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        """
        EvaluateValueAndDerivative(self, itkPointD3 point, double value, itkCovariantVectorD3 deriv)
        EvaluateValueAndDerivative(self, itkPointD3 point, double value, itkCovariantVectorD3 deriv, 
            unsigned int threadID)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        """
        EvaluateValueAndDerivativeAtContinuousIndex(self, itkContinuousIndexD3 x, double value, itkCovariantVectorD3 deriv)
        EvaluateValueAndDerivativeAtContinuousIndex(self, itkContinuousIndexD3 x, double value, itkCovariantVectorD3 deriv, 
            unsigned int threadID)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, *args):
        """SetSplineOrder(self, unsigned int SplineOrder)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_SetSplineOrder(self, *args)

    def GetSplineOrder(self):
        """GetSplineOrder(self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_GetSplineOrder(self)

    def SetNumberOfThreads(self, *args):
        """SetNumberOfThreads(self, unsigned int numThreads)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_SetNumberOfThreads(self, *args)

    def GetNumberOfThreads(self):
        """GetNumberOfThreads(self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_GetNumberOfThreads(self)

    def SetUseImageDirection(self, *args):
        """SetUseImageDirection(self, bool _arg)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_SetUseImageDirection(self, *args)

    def GetUseImageDirection(self):
        """GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        """UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        """UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_UseImageDirectionOff(self)

    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIF3DF
    def cast(*args):
        """cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIF3DF"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBSplineInterpolateImageFunctionIF3DF"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIF3DF
        
        Create a new object of the class itkBSplineInterpolateImageFunctionIF3DF and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBSplineInterpolateImageFunctionIF3DF.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBSplineInterpolateImageFunctionIF3DF.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineInterpolateImageFunctionIF3DF.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineInterpolateImageFunctionIF3DF.Evaluate = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_Evaluate,None,itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.EvaluateAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateAtContinuousIndex,None,itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.EvaluateDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateDerivative,None,itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.EvaluateDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateDerivativeAtContinuousIndex,None,itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.EvaluateValueAndDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateValueAndDerivative,None,itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.EvaluateValueAndDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_EvaluateValueAndDerivativeAtContinuousIndex,None,itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.SetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_SetSplineOrder,None,itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.GetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_GetSplineOrder,None,itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.SetNumberOfThreads = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_SetNumberOfThreads,None,itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.GetNumberOfThreads = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_GetNumberOfThreads,None,itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.SetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_SetUseImageDirection,None,itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.GetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_GetUseImageDirection,None,itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.UseImageDirectionOn = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_UseImageDirectionOn,None,itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.UseImageDirectionOff = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_UseImageDirectionOff,None,itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF.GetPointer = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_GetPointer,None,itkBSplineInterpolateImageFunctionIF3DF)
itkBSplineInterpolateImageFunctionIF3DF_swigregister = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_swigregister
itkBSplineInterpolateImageFunctionIF3DF_swigregister(itkBSplineInterpolateImageFunctionIF3DF)

def itkBSplineInterpolateImageFunctionIF3DF___New_orig__():
  """itkBSplineInterpolateImageFunctionIF3DF___New_orig__()"""
  return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF___New_orig__()

def itkBSplineInterpolateImageFunctionIF3DF_cast(*args):
  """itkBSplineInterpolateImageFunctionIF3DF_cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIF3DF"""
  return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIF3DF_cast(*args)

class itkBSplineInterpolateImageFunctionIUC2DUC(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D):
    """Proxy of C++ itkBSplineInterpolateImageFunctionIUC2DUC class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Evaluate(self, *args):
        """
        Evaluate(self, itkPointD2 point) -> double
        Evaluate(self, itkPointD2 point, unsigned int threadID) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        """
        EvaluateAtContinuousIndex(self, itkContinuousIndexD2 index) -> double
        EvaluateAtContinuousIndex(self, itkContinuousIndexD2 index, unsigned int threadID) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        """
        EvaluateDerivative(self, itkPointD2 point) -> itkCovariantVectorD2
        EvaluateDerivative(self, itkPointD2 point, unsigned int threadID) -> itkCovariantVectorD2
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        """
        EvaluateDerivativeAtContinuousIndex(self, itkContinuousIndexD2 x) -> itkCovariantVectorD2
        EvaluateDerivativeAtContinuousIndex(self, itkContinuousIndexD2 x, unsigned int threadID) -> itkCovariantVectorD2
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        """
        EvaluateValueAndDerivative(self, itkPointD2 point, double value, itkCovariantVectorD2 deriv)
        EvaluateValueAndDerivative(self, itkPointD2 point, double value, itkCovariantVectorD2 deriv, 
            unsigned int threadID)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        """
        EvaluateValueAndDerivativeAtContinuousIndex(self, itkContinuousIndexD2 x, double value, itkCovariantVectorD2 deriv)
        EvaluateValueAndDerivativeAtContinuousIndex(self, itkContinuousIndexD2 x, double value, itkCovariantVectorD2 deriv, 
            unsigned int threadID)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, *args):
        """SetSplineOrder(self, unsigned int SplineOrder)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_SetSplineOrder(self, *args)

    def GetSplineOrder(self):
        """GetSplineOrder(self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_GetSplineOrder(self)

    def SetNumberOfThreads(self, *args):
        """SetNumberOfThreads(self, unsigned int numThreads)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_SetNumberOfThreads(self, *args)

    def GetNumberOfThreads(self):
        """GetNumberOfThreads(self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_GetNumberOfThreads(self)

    def SetUseImageDirection(self, *args):
        """SetUseImageDirection(self, bool _arg)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_SetUseImageDirection(self, *args)

    def GetUseImageDirection(self):
        """GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        """UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        """UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_UseImageDirectionOff(self)

    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIUC2DUC
    def cast(*args):
        """cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIUC2DUC"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBSplineInterpolateImageFunctionIUC2DUC"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIUC2DUC
        
        Create a new object of the class itkBSplineInterpolateImageFunctionIUC2DUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBSplineInterpolateImageFunctionIUC2DUC.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBSplineInterpolateImageFunctionIUC2DUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineInterpolateImageFunctionIUC2DUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineInterpolateImageFunctionIUC2DUC.Evaluate = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_Evaluate,None,itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.EvaluateAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateAtContinuousIndex,None,itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.EvaluateDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateDerivative,None,itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.EvaluateDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateDerivativeAtContinuousIndex,None,itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.EvaluateValueAndDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateValueAndDerivative,None,itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.EvaluateValueAndDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_EvaluateValueAndDerivativeAtContinuousIndex,None,itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.SetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_SetSplineOrder,None,itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.GetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_GetSplineOrder,None,itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.SetNumberOfThreads = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_SetNumberOfThreads,None,itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.GetNumberOfThreads = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_GetNumberOfThreads,None,itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.SetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_SetUseImageDirection,None,itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.GetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_GetUseImageDirection,None,itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.UseImageDirectionOn = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_UseImageDirectionOn,None,itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.UseImageDirectionOff = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_UseImageDirectionOff,None,itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC.GetPointer = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_GetPointer,None,itkBSplineInterpolateImageFunctionIUC2DUC)
itkBSplineInterpolateImageFunctionIUC2DUC_swigregister = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_swigregister
itkBSplineInterpolateImageFunctionIUC2DUC_swigregister(itkBSplineInterpolateImageFunctionIUC2DUC)

def itkBSplineInterpolateImageFunctionIUC2DUC___New_orig__():
  """itkBSplineInterpolateImageFunctionIUC2DUC___New_orig__()"""
  return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC___New_orig__()

def itkBSplineInterpolateImageFunctionIUC2DUC_cast(*args):
  """itkBSplineInterpolateImageFunctionIUC2DUC_cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIUC2DUC"""
  return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC2DUC_cast(*args)

class itkBSplineInterpolateImageFunctionIUC3DUC(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D):
    """Proxy of C++ itkBSplineInterpolateImageFunctionIUC3DUC class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Evaluate(self, *args):
        """
        Evaluate(self, itkPointD3 point) -> double
        Evaluate(self, itkPointD3 point, unsigned int threadID) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        """
        EvaluateAtContinuousIndex(self, itkContinuousIndexD3 index) -> double
        EvaluateAtContinuousIndex(self, itkContinuousIndexD3 index, unsigned int threadID) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        """
        EvaluateDerivative(self, itkPointD3 point) -> itkCovariantVectorD3
        EvaluateDerivative(self, itkPointD3 point, unsigned int threadID) -> itkCovariantVectorD3
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        """
        EvaluateDerivativeAtContinuousIndex(self, itkContinuousIndexD3 x) -> itkCovariantVectorD3
        EvaluateDerivativeAtContinuousIndex(self, itkContinuousIndexD3 x, unsigned int threadID) -> itkCovariantVectorD3
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        """
        EvaluateValueAndDerivative(self, itkPointD3 point, double value, itkCovariantVectorD3 deriv)
        EvaluateValueAndDerivative(self, itkPointD3 point, double value, itkCovariantVectorD3 deriv, 
            unsigned int threadID)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        """
        EvaluateValueAndDerivativeAtContinuousIndex(self, itkContinuousIndexD3 x, double value, itkCovariantVectorD3 deriv)
        EvaluateValueAndDerivativeAtContinuousIndex(self, itkContinuousIndexD3 x, double value, itkCovariantVectorD3 deriv, 
            unsigned int threadID)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, *args):
        """SetSplineOrder(self, unsigned int SplineOrder)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_SetSplineOrder(self, *args)

    def GetSplineOrder(self):
        """GetSplineOrder(self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_GetSplineOrder(self)

    def SetNumberOfThreads(self, *args):
        """SetNumberOfThreads(self, unsigned int numThreads)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_SetNumberOfThreads(self, *args)

    def GetNumberOfThreads(self):
        """GetNumberOfThreads(self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_GetNumberOfThreads(self)

    def SetUseImageDirection(self, *args):
        """SetUseImageDirection(self, bool _arg)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_SetUseImageDirection(self, *args)

    def GetUseImageDirection(self):
        """GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        """UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        """UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_UseImageDirectionOff(self)

    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIUC3DUC
    def cast(*args):
        """cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIUC3DUC"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBSplineInterpolateImageFunctionIUC3DUC"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIUC3DUC
        
        Create a new object of the class itkBSplineInterpolateImageFunctionIUC3DUC and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBSplineInterpolateImageFunctionIUC3DUC.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBSplineInterpolateImageFunctionIUC3DUC.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineInterpolateImageFunctionIUC3DUC.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineInterpolateImageFunctionIUC3DUC.Evaluate = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_Evaluate,None,itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.EvaluateAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateAtContinuousIndex,None,itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.EvaluateDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateDerivative,None,itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.EvaluateDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateDerivativeAtContinuousIndex,None,itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.EvaluateValueAndDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateValueAndDerivative,None,itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.EvaluateValueAndDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_EvaluateValueAndDerivativeAtContinuousIndex,None,itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.SetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_SetSplineOrder,None,itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.GetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_GetSplineOrder,None,itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.SetNumberOfThreads = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_SetNumberOfThreads,None,itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.GetNumberOfThreads = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_GetNumberOfThreads,None,itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.SetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_SetUseImageDirection,None,itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.GetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_GetUseImageDirection,None,itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.UseImageDirectionOn = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_UseImageDirectionOn,None,itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.UseImageDirectionOff = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_UseImageDirectionOff,None,itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC.GetPointer = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_GetPointer,None,itkBSplineInterpolateImageFunctionIUC3DUC)
itkBSplineInterpolateImageFunctionIUC3DUC_swigregister = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_swigregister
itkBSplineInterpolateImageFunctionIUC3DUC_swigregister(itkBSplineInterpolateImageFunctionIUC3DUC)

def itkBSplineInterpolateImageFunctionIUC3DUC___New_orig__():
  """itkBSplineInterpolateImageFunctionIUC3DUC___New_orig__()"""
  return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC___New_orig__()

def itkBSplineInterpolateImageFunctionIUC3DUC_cast(*args):
  """itkBSplineInterpolateImageFunctionIUC3DUC_cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIUC3DUC"""
  return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUC3DUC_cast(*args)

class itkBSplineInterpolateImageFunctionIUL2DUL(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL2D):
    """Proxy of C++ itkBSplineInterpolateImageFunctionIUL2DUL class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Evaluate(self, *args):
        """
        Evaluate(self, itkPointD2 point) -> double
        Evaluate(self, itkPointD2 point, unsigned int threadID) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        """
        EvaluateAtContinuousIndex(self, itkContinuousIndexD2 index) -> double
        EvaluateAtContinuousIndex(self, itkContinuousIndexD2 index, unsigned int threadID) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        """
        EvaluateDerivative(self, itkPointD2 point) -> itkCovariantVectorD2
        EvaluateDerivative(self, itkPointD2 point, unsigned int threadID) -> itkCovariantVectorD2
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        """
        EvaluateDerivativeAtContinuousIndex(self, itkContinuousIndexD2 x) -> itkCovariantVectorD2
        EvaluateDerivativeAtContinuousIndex(self, itkContinuousIndexD2 x, unsigned int threadID) -> itkCovariantVectorD2
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        """
        EvaluateValueAndDerivative(self, itkPointD2 point, double value, itkCovariantVectorD2 deriv)
        EvaluateValueAndDerivative(self, itkPointD2 point, double value, itkCovariantVectorD2 deriv, 
            unsigned int threadID)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        """
        EvaluateValueAndDerivativeAtContinuousIndex(self, itkContinuousIndexD2 x, double value, itkCovariantVectorD2 deriv)
        EvaluateValueAndDerivativeAtContinuousIndex(self, itkContinuousIndexD2 x, double value, itkCovariantVectorD2 deriv, 
            unsigned int threadID)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, *args):
        """SetSplineOrder(self, unsigned int SplineOrder)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_SetSplineOrder(self, *args)

    def GetSplineOrder(self):
        """GetSplineOrder(self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_GetSplineOrder(self)

    def SetNumberOfThreads(self, *args):
        """SetNumberOfThreads(self, unsigned int numThreads)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_SetNumberOfThreads(self, *args)

    def GetNumberOfThreads(self):
        """GetNumberOfThreads(self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_GetNumberOfThreads(self)

    def SetUseImageDirection(self, *args):
        """SetUseImageDirection(self, bool _arg)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_SetUseImageDirection(self, *args)

    def GetUseImageDirection(self):
        """GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        """UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        """UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_UseImageDirectionOff(self)

    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIUL2DUL
    def cast(*args):
        """cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIUL2DUL"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBSplineInterpolateImageFunctionIUL2DUL"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIUL2DUL
        
        Create a new object of the class itkBSplineInterpolateImageFunctionIUL2DUL and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBSplineInterpolateImageFunctionIUL2DUL.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBSplineInterpolateImageFunctionIUL2DUL.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineInterpolateImageFunctionIUL2DUL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineInterpolateImageFunctionIUL2DUL.Evaluate = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_Evaluate,None,itkBSplineInterpolateImageFunctionIUL2DUL)
itkBSplineInterpolateImageFunctionIUL2DUL.EvaluateAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_EvaluateAtContinuousIndex,None,itkBSplineInterpolateImageFunctionIUL2DUL)
itkBSplineInterpolateImageFunctionIUL2DUL.EvaluateDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_EvaluateDerivative,None,itkBSplineInterpolateImageFunctionIUL2DUL)
itkBSplineInterpolateImageFunctionIUL2DUL.EvaluateDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_EvaluateDerivativeAtContinuousIndex,None,itkBSplineInterpolateImageFunctionIUL2DUL)
itkBSplineInterpolateImageFunctionIUL2DUL.EvaluateValueAndDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_EvaluateValueAndDerivative,None,itkBSplineInterpolateImageFunctionIUL2DUL)
itkBSplineInterpolateImageFunctionIUL2DUL.EvaluateValueAndDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_EvaluateValueAndDerivativeAtContinuousIndex,None,itkBSplineInterpolateImageFunctionIUL2DUL)
itkBSplineInterpolateImageFunctionIUL2DUL.SetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_SetSplineOrder,None,itkBSplineInterpolateImageFunctionIUL2DUL)
itkBSplineInterpolateImageFunctionIUL2DUL.GetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_GetSplineOrder,None,itkBSplineInterpolateImageFunctionIUL2DUL)
itkBSplineInterpolateImageFunctionIUL2DUL.SetNumberOfThreads = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_SetNumberOfThreads,None,itkBSplineInterpolateImageFunctionIUL2DUL)
itkBSplineInterpolateImageFunctionIUL2DUL.GetNumberOfThreads = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_GetNumberOfThreads,None,itkBSplineInterpolateImageFunctionIUL2DUL)
itkBSplineInterpolateImageFunctionIUL2DUL.SetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_SetUseImageDirection,None,itkBSplineInterpolateImageFunctionIUL2DUL)
itkBSplineInterpolateImageFunctionIUL2DUL.GetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_GetUseImageDirection,None,itkBSplineInterpolateImageFunctionIUL2DUL)
itkBSplineInterpolateImageFunctionIUL2DUL.UseImageDirectionOn = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_UseImageDirectionOn,None,itkBSplineInterpolateImageFunctionIUL2DUL)
itkBSplineInterpolateImageFunctionIUL2DUL.UseImageDirectionOff = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_UseImageDirectionOff,None,itkBSplineInterpolateImageFunctionIUL2DUL)
itkBSplineInterpolateImageFunctionIUL2DUL.GetPointer = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_GetPointer,None,itkBSplineInterpolateImageFunctionIUL2DUL)
itkBSplineInterpolateImageFunctionIUL2DUL_swigregister = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_swigregister
itkBSplineInterpolateImageFunctionIUL2DUL_swigregister(itkBSplineInterpolateImageFunctionIUL2DUL)

def itkBSplineInterpolateImageFunctionIUL2DUL___New_orig__():
  """itkBSplineInterpolateImageFunctionIUL2DUL___New_orig__()"""
  return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL___New_orig__()

def itkBSplineInterpolateImageFunctionIUL2DUL_cast(*args):
  """itkBSplineInterpolateImageFunctionIUL2DUL_cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIUL2DUL"""
  return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL2DUL_cast(*args)

class itkBSplineInterpolateImageFunctionIUL3DUL(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL3D):
    """Proxy of C++ itkBSplineInterpolateImageFunctionIUL3DUL class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Evaluate(self, *args):
        """
        Evaluate(self, itkPointD3 point) -> double
        Evaluate(self, itkPointD3 point, unsigned int threadID) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        """
        EvaluateAtContinuousIndex(self, itkContinuousIndexD3 index) -> double
        EvaluateAtContinuousIndex(self, itkContinuousIndexD3 index, unsigned int threadID) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        """
        EvaluateDerivative(self, itkPointD3 point) -> itkCovariantVectorD3
        EvaluateDerivative(self, itkPointD3 point, unsigned int threadID) -> itkCovariantVectorD3
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        """
        EvaluateDerivativeAtContinuousIndex(self, itkContinuousIndexD3 x) -> itkCovariantVectorD3
        EvaluateDerivativeAtContinuousIndex(self, itkContinuousIndexD3 x, unsigned int threadID) -> itkCovariantVectorD3
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        """
        EvaluateValueAndDerivative(self, itkPointD3 point, double value, itkCovariantVectorD3 deriv)
        EvaluateValueAndDerivative(self, itkPointD3 point, double value, itkCovariantVectorD3 deriv, 
            unsigned int threadID)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        """
        EvaluateValueAndDerivativeAtContinuousIndex(self, itkContinuousIndexD3 x, double value, itkCovariantVectorD3 deriv)
        EvaluateValueAndDerivativeAtContinuousIndex(self, itkContinuousIndexD3 x, double value, itkCovariantVectorD3 deriv, 
            unsigned int threadID)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, *args):
        """SetSplineOrder(self, unsigned int SplineOrder)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_SetSplineOrder(self, *args)

    def GetSplineOrder(self):
        """GetSplineOrder(self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_GetSplineOrder(self)

    def SetNumberOfThreads(self, *args):
        """SetNumberOfThreads(self, unsigned int numThreads)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_SetNumberOfThreads(self, *args)

    def GetNumberOfThreads(self):
        """GetNumberOfThreads(self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_GetNumberOfThreads(self)

    def SetUseImageDirection(self, *args):
        """SetUseImageDirection(self, bool _arg)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_SetUseImageDirection(self, *args)

    def GetUseImageDirection(self):
        """GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        """UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        """UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_UseImageDirectionOff(self)

    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIUL3DUL
    def cast(*args):
        """cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIUL3DUL"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBSplineInterpolateImageFunctionIUL3DUL"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIUL3DUL
        
        Create a new object of the class itkBSplineInterpolateImageFunctionIUL3DUL and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBSplineInterpolateImageFunctionIUL3DUL.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBSplineInterpolateImageFunctionIUL3DUL.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineInterpolateImageFunctionIUL3DUL.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineInterpolateImageFunctionIUL3DUL.Evaluate = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_Evaluate,None,itkBSplineInterpolateImageFunctionIUL3DUL)
itkBSplineInterpolateImageFunctionIUL3DUL.EvaluateAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_EvaluateAtContinuousIndex,None,itkBSplineInterpolateImageFunctionIUL3DUL)
itkBSplineInterpolateImageFunctionIUL3DUL.EvaluateDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_EvaluateDerivative,None,itkBSplineInterpolateImageFunctionIUL3DUL)
itkBSplineInterpolateImageFunctionIUL3DUL.EvaluateDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_EvaluateDerivativeAtContinuousIndex,None,itkBSplineInterpolateImageFunctionIUL3DUL)
itkBSplineInterpolateImageFunctionIUL3DUL.EvaluateValueAndDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_EvaluateValueAndDerivative,None,itkBSplineInterpolateImageFunctionIUL3DUL)
itkBSplineInterpolateImageFunctionIUL3DUL.EvaluateValueAndDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_EvaluateValueAndDerivativeAtContinuousIndex,None,itkBSplineInterpolateImageFunctionIUL3DUL)
itkBSplineInterpolateImageFunctionIUL3DUL.SetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_SetSplineOrder,None,itkBSplineInterpolateImageFunctionIUL3DUL)
itkBSplineInterpolateImageFunctionIUL3DUL.GetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_GetSplineOrder,None,itkBSplineInterpolateImageFunctionIUL3DUL)
itkBSplineInterpolateImageFunctionIUL3DUL.SetNumberOfThreads = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_SetNumberOfThreads,None,itkBSplineInterpolateImageFunctionIUL3DUL)
itkBSplineInterpolateImageFunctionIUL3DUL.GetNumberOfThreads = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_GetNumberOfThreads,None,itkBSplineInterpolateImageFunctionIUL3DUL)
itkBSplineInterpolateImageFunctionIUL3DUL.SetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_SetUseImageDirection,None,itkBSplineInterpolateImageFunctionIUL3DUL)
itkBSplineInterpolateImageFunctionIUL3DUL.GetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_GetUseImageDirection,None,itkBSplineInterpolateImageFunctionIUL3DUL)
itkBSplineInterpolateImageFunctionIUL3DUL.UseImageDirectionOn = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_UseImageDirectionOn,None,itkBSplineInterpolateImageFunctionIUL3DUL)
itkBSplineInterpolateImageFunctionIUL3DUL.UseImageDirectionOff = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_UseImageDirectionOff,None,itkBSplineInterpolateImageFunctionIUL3DUL)
itkBSplineInterpolateImageFunctionIUL3DUL.GetPointer = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_GetPointer,None,itkBSplineInterpolateImageFunctionIUL3DUL)
itkBSplineInterpolateImageFunctionIUL3DUL_swigregister = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_swigregister
itkBSplineInterpolateImageFunctionIUL3DUL_swigregister(itkBSplineInterpolateImageFunctionIUL3DUL)

def itkBSplineInterpolateImageFunctionIUL3DUL___New_orig__():
  """itkBSplineInterpolateImageFunctionIUL3DUL___New_orig__()"""
  return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL___New_orig__()

def itkBSplineInterpolateImageFunctionIUL3DUL_cast(*args):
  """itkBSplineInterpolateImageFunctionIUL3DUL_cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIUL3DUL"""
  return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUL3DUL_cast(*args)

class itkBSplineInterpolateImageFunctionIUS2DUS(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D):
    """Proxy of C++ itkBSplineInterpolateImageFunctionIUS2DUS class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Evaluate(self, *args):
        """
        Evaluate(self, itkPointD2 point) -> double
        Evaluate(self, itkPointD2 point, unsigned int threadID) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        """
        EvaluateAtContinuousIndex(self, itkContinuousIndexD2 index) -> double
        EvaluateAtContinuousIndex(self, itkContinuousIndexD2 index, unsigned int threadID) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        """
        EvaluateDerivative(self, itkPointD2 point) -> itkCovariantVectorD2
        EvaluateDerivative(self, itkPointD2 point, unsigned int threadID) -> itkCovariantVectorD2
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        """
        EvaluateDerivativeAtContinuousIndex(self, itkContinuousIndexD2 x) -> itkCovariantVectorD2
        EvaluateDerivativeAtContinuousIndex(self, itkContinuousIndexD2 x, unsigned int threadID) -> itkCovariantVectorD2
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        """
        EvaluateValueAndDerivative(self, itkPointD2 point, double value, itkCovariantVectorD2 deriv)
        EvaluateValueAndDerivative(self, itkPointD2 point, double value, itkCovariantVectorD2 deriv, 
            unsigned int threadID)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        """
        EvaluateValueAndDerivativeAtContinuousIndex(self, itkContinuousIndexD2 x, double value, itkCovariantVectorD2 deriv)
        EvaluateValueAndDerivativeAtContinuousIndex(self, itkContinuousIndexD2 x, double value, itkCovariantVectorD2 deriv, 
            unsigned int threadID)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, *args):
        """SetSplineOrder(self, unsigned int SplineOrder)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_SetSplineOrder(self, *args)

    def GetSplineOrder(self):
        """GetSplineOrder(self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_GetSplineOrder(self)

    def SetNumberOfThreads(self, *args):
        """SetNumberOfThreads(self, unsigned int numThreads)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_SetNumberOfThreads(self, *args)

    def GetNumberOfThreads(self):
        """GetNumberOfThreads(self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_GetNumberOfThreads(self)

    def SetUseImageDirection(self, *args):
        """SetUseImageDirection(self, bool _arg)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_SetUseImageDirection(self, *args)

    def GetUseImageDirection(self):
        """GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        """UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        """UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_UseImageDirectionOff(self)

    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIUS2DUS
    def cast(*args):
        """cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIUS2DUS"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBSplineInterpolateImageFunctionIUS2DUS"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIUS2DUS
        
        Create a new object of the class itkBSplineInterpolateImageFunctionIUS2DUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBSplineInterpolateImageFunctionIUS2DUS.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBSplineInterpolateImageFunctionIUS2DUS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineInterpolateImageFunctionIUS2DUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineInterpolateImageFunctionIUS2DUS.Evaluate = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_Evaluate,None,itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.EvaluateAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateAtContinuousIndex,None,itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.EvaluateDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateDerivative,None,itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.EvaluateDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateDerivativeAtContinuousIndex,None,itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.EvaluateValueAndDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateValueAndDerivative,None,itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.EvaluateValueAndDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_EvaluateValueAndDerivativeAtContinuousIndex,None,itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.SetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_SetSplineOrder,None,itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.GetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_GetSplineOrder,None,itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.SetNumberOfThreads = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_SetNumberOfThreads,None,itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.GetNumberOfThreads = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_GetNumberOfThreads,None,itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.SetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_SetUseImageDirection,None,itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.GetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_GetUseImageDirection,None,itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.UseImageDirectionOn = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_UseImageDirectionOn,None,itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.UseImageDirectionOff = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_UseImageDirectionOff,None,itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS.GetPointer = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_GetPointer,None,itkBSplineInterpolateImageFunctionIUS2DUS)
itkBSplineInterpolateImageFunctionIUS2DUS_swigregister = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_swigregister
itkBSplineInterpolateImageFunctionIUS2DUS_swigregister(itkBSplineInterpolateImageFunctionIUS2DUS)

def itkBSplineInterpolateImageFunctionIUS2DUS___New_orig__():
  """itkBSplineInterpolateImageFunctionIUS2DUS___New_orig__()"""
  return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS___New_orig__()

def itkBSplineInterpolateImageFunctionIUS2DUS_cast(*args):
  """itkBSplineInterpolateImageFunctionIUS2DUS_cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIUS2DUS"""
  return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS2DUS_cast(*args)

class itkBSplineInterpolateImageFunctionIUS3DUS(itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D):
    """Proxy of C++ itkBSplineInterpolateImageFunctionIUS3DUS class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def Evaluate(self, *args):
        """
        Evaluate(self, itkPointD3 point) -> double
        Evaluate(self, itkPointD3 point, unsigned int threadID) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_Evaluate(self, *args)

    def EvaluateAtContinuousIndex(self, *args):
        """
        EvaluateAtContinuousIndex(self, itkContinuousIndexD3 index) -> double
        EvaluateAtContinuousIndex(self, itkContinuousIndexD3 index, unsigned int threadID) -> double
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateAtContinuousIndex(self, *args)

    def EvaluateDerivative(self, *args):
        """
        EvaluateDerivative(self, itkPointD3 point) -> itkCovariantVectorD3
        EvaluateDerivative(self, itkPointD3 point, unsigned int threadID) -> itkCovariantVectorD3
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateDerivative(self, *args)

    def EvaluateDerivativeAtContinuousIndex(self, *args):
        """
        EvaluateDerivativeAtContinuousIndex(self, itkContinuousIndexD3 x) -> itkCovariantVectorD3
        EvaluateDerivativeAtContinuousIndex(self, itkContinuousIndexD3 x, unsigned int threadID) -> itkCovariantVectorD3
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateDerivativeAtContinuousIndex(self, *args)

    def EvaluateValueAndDerivative(self, *args):
        """
        EvaluateValueAndDerivative(self, itkPointD3 point, double value, itkCovariantVectorD3 deriv)
        EvaluateValueAndDerivative(self, itkPointD3 point, double value, itkCovariantVectorD3 deriv, 
            unsigned int threadID)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateValueAndDerivative(self, *args)

    def EvaluateValueAndDerivativeAtContinuousIndex(self, *args):
        """
        EvaluateValueAndDerivativeAtContinuousIndex(self, itkContinuousIndexD3 x, double value, itkCovariantVectorD3 deriv)
        EvaluateValueAndDerivativeAtContinuousIndex(self, itkContinuousIndexD3 x, double value, itkCovariantVectorD3 deriv, 
            unsigned int threadID)
        """
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateValueAndDerivativeAtContinuousIndex(self, *args)

    def SetSplineOrder(self, *args):
        """SetSplineOrder(self, unsigned int SplineOrder)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_SetSplineOrder(self, *args)

    def GetSplineOrder(self):
        """GetSplineOrder(self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_GetSplineOrder(self)

    def SetNumberOfThreads(self, *args):
        """SetNumberOfThreads(self, unsigned int numThreads)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_SetNumberOfThreads(self, *args)

    def GetNumberOfThreads(self):
        """GetNumberOfThreads(self) -> int"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_GetNumberOfThreads(self)

    def SetUseImageDirection(self, *args):
        """SetUseImageDirection(self, bool _arg)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_SetUseImageDirection(self, *args)

    def GetUseImageDirection(self):
        """GetUseImageDirection(self) -> bool"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_GetUseImageDirection(self)

    def UseImageDirectionOn(self):
        """UseImageDirectionOn(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_UseImageDirectionOn(self)

    def UseImageDirectionOff(self):
        """UseImageDirectionOff(self)"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_UseImageDirectionOff(self)

    __swig_destroy__ = _itkBSplineInterpolateImageFunctionPython.delete_itkBSplineInterpolateImageFunctionIUS3DUS
    def cast(*args):
        """cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIUS3DUS"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkBSplineInterpolateImageFunctionIUS3DUS"""
        return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkBSplineInterpolateImageFunctionIUS3DUS
        
        Create a new object of the class itkBSplineInterpolateImageFunctionIUS3DUS and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkBSplineInterpolateImageFunctionIUS3DUS.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkBSplineInterpolateImageFunctionIUS3DUS.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkBSplineInterpolateImageFunctionIUS3DUS.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkBSplineInterpolateImageFunctionIUS3DUS.Evaluate = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_Evaluate,None,itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.EvaluateAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateAtContinuousIndex,None,itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.EvaluateDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateDerivative,None,itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.EvaluateDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateDerivativeAtContinuousIndex,None,itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.EvaluateValueAndDerivative = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateValueAndDerivative,None,itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.EvaluateValueAndDerivativeAtContinuousIndex = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_EvaluateValueAndDerivativeAtContinuousIndex,None,itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.SetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_SetSplineOrder,None,itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.GetSplineOrder = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_GetSplineOrder,None,itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.SetNumberOfThreads = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_SetNumberOfThreads,None,itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.GetNumberOfThreads = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_GetNumberOfThreads,None,itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.SetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_SetUseImageDirection,None,itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.GetUseImageDirection = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_GetUseImageDirection,None,itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.UseImageDirectionOn = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_UseImageDirectionOn,None,itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.UseImageDirectionOff = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_UseImageDirectionOff,None,itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS.GetPointer = new_instancemethod(_itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_GetPointer,None,itkBSplineInterpolateImageFunctionIUS3DUS)
itkBSplineInterpolateImageFunctionIUS3DUS_swigregister = _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_swigregister
itkBSplineInterpolateImageFunctionIUS3DUS_swigregister(itkBSplineInterpolateImageFunctionIUS3DUS)

def itkBSplineInterpolateImageFunctionIUS3DUS___New_orig__():
  """itkBSplineInterpolateImageFunctionIUS3DUS___New_orig__()"""
  return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS___New_orig__()

def itkBSplineInterpolateImageFunctionIUS3DUS_cast(*args):
  """itkBSplineInterpolateImageFunctionIUS3DUS_cast(itkLightObject obj) -> itkBSplineInterpolateImageFunctionIUS3DUS"""
  return _itkBSplineInterpolateImageFunctionPython.itkBSplineInterpolateImageFunctionIUS3DUS_cast(*args)



