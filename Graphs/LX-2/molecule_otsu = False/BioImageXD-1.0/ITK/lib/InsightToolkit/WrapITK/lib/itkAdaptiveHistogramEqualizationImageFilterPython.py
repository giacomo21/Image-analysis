# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkAdaptiveHistogramEqualizationImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkAdaptiveHistogramEqualizationImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkAdaptiveHistogramEqualizationImageFilterPython
            return _itkAdaptiveHistogramEqualizationImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkAdaptiveHistogramEqualizationImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkAdaptiveHistogramEqualizationImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkAdaptiveHistogramEqualizationImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import itkEventObjectsPython
import pyBasePython
import itkSizePython
import itkImageToImageFilterAPython
import itkImagePython
import itkFixedArrayPython
import itkCovariantVectorPython
import vnl_vectorPython
import vcl_complexPython
import vnl_matrixPython
import itkVectorPython
import vnl_vector_refPython
import ITKRegionsPython
import itkIndexPython
import itkOffsetPython
import itkPointPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkRGBPixelPython
import itkImageSourcePython
import itkVectorImagePython
import itkVariableLengthVectorPython
def itkAdaptiveHistogramEqualizationImageFilterID3_New():
  return itkAdaptiveHistogramEqualizationImageFilterID3.New()

def itkAdaptiveHistogramEqualizationImageFilterID2_New():
  return itkAdaptiveHistogramEqualizationImageFilterID2.New()

def itkAdaptiveHistogramEqualizationImageFilterIF3_New():
  return itkAdaptiveHistogramEqualizationImageFilterIF3.New()

def itkAdaptiveHistogramEqualizationImageFilterIF2_New():
  return itkAdaptiveHistogramEqualizationImageFilterIF2.New()

def itkAdaptiveHistogramEqualizationImageFilterIUS3_New():
  return itkAdaptiveHistogramEqualizationImageFilterIUS3.New()

def itkAdaptiveHistogramEqualizationImageFilterIUS2_New():
  return itkAdaptiveHistogramEqualizationImageFilterIUS2.New()

def itkAdaptiveHistogramEqualizationImageFilterIUL3_New():
  return itkAdaptiveHistogramEqualizationImageFilterIUL3.New()

def itkAdaptiveHistogramEqualizationImageFilterIUL2_New():
  return itkAdaptiveHistogramEqualizationImageFilterIUL2.New()

def itkAdaptiveHistogramEqualizationImageFilterIUC3_New():
  return itkAdaptiveHistogramEqualizationImageFilterIUC3.New()

def itkAdaptiveHistogramEqualizationImageFilterIUC2_New():
  return itkAdaptiveHistogramEqualizationImageFilterIUC2.New()

class itkAdaptiveHistogramEqualizationImageFilterID2(itkImageToImageFilterAPython.itkImageToImageFilterID2ID2):
    """Proxy of C++ itkAdaptiveHistogramEqualizationImageFilterID2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetAlpha(self, *args):
        """SetAlpha(self, float _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_SetAlpha(self, *args)

    def GetAlpha(self):
        """GetAlpha(self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_GetAlpha(self)

    def SetBeta(self, *args):
        """SetBeta(self, float _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_SetBeta(self, *args)

    def GetBeta(self):
        """GetBeta(self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_GetBeta(self)

    def SetRadius(self, *args):
        """SetRadius(self, itkSize2 _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_SetRadius(self, *args)

    def GetRadius(self):
        """GetRadius(self) -> itkSize2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_GetRadius(self)

    def SetUseLookupTable(self, *args):
        """SetUseLookupTable(self, bool _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_SetUseLookupTable(self, *args)

    def GetUseLookupTable(self):
        """GetUseLookupTable(self) -> bool"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_GetUseLookupTable(self)

    def UseLookupTableOn(self):
        """UseLookupTableOn(self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_UseLookupTableOn(self)

    def UseLookupTableOff(self):
        """UseLookupTableOff(self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_UseLookupTableOff(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterID2
    def cast(*args):
        """cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterID2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAdaptiveHistogramEqualizationImageFilterID2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterID2
        
        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAdaptiveHistogramEqualizationImageFilterID2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAdaptiveHistogramEqualizationImageFilterID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdaptiveHistogramEqualizationImageFilterID2.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_SetAlpha,None,itkAdaptiveHistogramEqualizationImageFilterID2)
itkAdaptiveHistogramEqualizationImageFilterID2.GetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_GetAlpha,None,itkAdaptiveHistogramEqualizationImageFilterID2)
itkAdaptiveHistogramEqualizationImageFilterID2.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_SetBeta,None,itkAdaptiveHistogramEqualizationImageFilterID2)
itkAdaptiveHistogramEqualizationImageFilterID2.GetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_GetBeta,None,itkAdaptiveHistogramEqualizationImageFilterID2)
itkAdaptiveHistogramEqualizationImageFilterID2.SetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_SetRadius,None,itkAdaptiveHistogramEqualizationImageFilterID2)
itkAdaptiveHistogramEqualizationImageFilterID2.GetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_GetRadius,None,itkAdaptiveHistogramEqualizationImageFilterID2)
itkAdaptiveHistogramEqualizationImageFilterID2.SetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_SetUseLookupTable,None,itkAdaptiveHistogramEqualizationImageFilterID2)
itkAdaptiveHistogramEqualizationImageFilterID2.GetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_GetUseLookupTable,None,itkAdaptiveHistogramEqualizationImageFilterID2)
itkAdaptiveHistogramEqualizationImageFilterID2.UseLookupTableOn = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_UseLookupTableOn,None,itkAdaptiveHistogramEqualizationImageFilterID2)
itkAdaptiveHistogramEqualizationImageFilterID2.UseLookupTableOff = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_UseLookupTableOff,None,itkAdaptiveHistogramEqualizationImageFilterID2)
itkAdaptiveHistogramEqualizationImageFilterID2.GetPointer = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_GetPointer,None,itkAdaptiveHistogramEqualizationImageFilterID2)
itkAdaptiveHistogramEqualizationImageFilterID2_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_swigregister
itkAdaptiveHistogramEqualizationImageFilterID2_swigregister(itkAdaptiveHistogramEqualizationImageFilterID2)

def itkAdaptiveHistogramEqualizationImageFilterID2___New_orig__():
  """itkAdaptiveHistogramEqualizationImageFilterID2___New_orig__()"""
  return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2___New_orig__()

def itkAdaptiveHistogramEqualizationImageFilterID2_cast(*args):
  """itkAdaptiveHistogramEqualizationImageFilterID2_cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterID2"""
  return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID2_cast(*args)

class itkAdaptiveHistogramEqualizationImageFilterID3(itkImageToImageFilterAPython.itkImageToImageFilterID3ID3):
    """Proxy of C++ itkAdaptiveHistogramEqualizationImageFilterID3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetAlpha(self, *args):
        """SetAlpha(self, float _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_SetAlpha(self, *args)

    def GetAlpha(self):
        """GetAlpha(self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_GetAlpha(self)

    def SetBeta(self, *args):
        """SetBeta(self, float _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_SetBeta(self, *args)

    def GetBeta(self):
        """GetBeta(self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_GetBeta(self)

    def SetRadius(self, *args):
        """SetRadius(self, itkSize3 _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_SetRadius(self, *args)

    def GetRadius(self):
        """GetRadius(self) -> itkSize3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_GetRadius(self)

    def SetUseLookupTable(self, *args):
        """SetUseLookupTable(self, bool _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_SetUseLookupTable(self, *args)

    def GetUseLookupTable(self):
        """GetUseLookupTable(self) -> bool"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_GetUseLookupTable(self)

    def UseLookupTableOn(self):
        """UseLookupTableOn(self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_UseLookupTableOn(self)

    def UseLookupTableOff(self):
        """UseLookupTableOff(self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_UseLookupTableOff(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterID3
    def cast(*args):
        """cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterID3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAdaptiveHistogramEqualizationImageFilterID3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterID3
        
        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAdaptiveHistogramEqualizationImageFilterID3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAdaptiveHistogramEqualizationImageFilterID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdaptiveHistogramEqualizationImageFilterID3.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_SetAlpha,None,itkAdaptiveHistogramEqualizationImageFilterID3)
itkAdaptiveHistogramEqualizationImageFilterID3.GetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_GetAlpha,None,itkAdaptiveHistogramEqualizationImageFilterID3)
itkAdaptiveHistogramEqualizationImageFilterID3.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_SetBeta,None,itkAdaptiveHistogramEqualizationImageFilterID3)
itkAdaptiveHistogramEqualizationImageFilterID3.GetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_GetBeta,None,itkAdaptiveHistogramEqualizationImageFilterID3)
itkAdaptiveHistogramEqualizationImageFilterID3.SetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_SetRadius,None,itkAdaptiveHistogramEqualizationImageFilterID3)
itkAdaptiveHistogramEqualizationImageFilterID3.GetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_GetRadius,None,itkAdaptiveHistogramEqualizationImageFilterID3)
itkAdaptiveHistogramEqualizationImageFilterID3.SetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_SetUseLookupTable,None,itkAdaptiveHistogramEqualizationImageFilterID3)
itkAdaptiveHistogramEqualizationImageFilterID3.GetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_GetUseLookupTable,None,itkAdaptiveHistogramEqualizationImageFilterID3)
itkAdaptiveHistogramEqualizationImageFilterID3.UseLookupTableOn = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_UseLookupTableOn,None,itkAdaptiveHistogramEqualizationImageFilterID3)
itkAdaptiveHistogramEqualizationImageFilterID3.UseLookupTableOff = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_UseLookupTableOff,None,itkAdaptiveHistogramEqualizationImageFilterID3)
itkAdaptiveHistogramEqualizationImageFilterID3.GetPointer = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_GetPointer,None,itkAdaptiveHistogramEqualizationImageFilterID3)
itkAdaptiveHistogramEqualizationImageFilterID3_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_swigregister
itkAdaptiveHistogramEqualizationImageFilterID3_swigregister(itkAdaptiveHistogramEqualizationImageFilterID3)

def itkAdaptiveHistogramEqualizationImageFilterID3___New_orig__():
  """itkAdaptiveHistogramEqualizationImageFilterID3___New_orig__()"""
  return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3___New_orig__()

def itkAdaptiveHistogramEqualizationImageFilterID3_cast(*args):
  """itkAdaptiveHistogramEqualizationImageFilterID3_cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterID3"""
  return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterID3_cast(*args)

class itkAdaptiveHistogramEqualizationImageFilterIF2(itkImageToImageFilterAPython.itkImageToImageFilterIF2IF2):
    """Proxy of C++ itkAdaptiveHistogramEqualizationImageFilterIF2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetAlpha(self, *args):
        """SetAlpha(self, float _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_SetAlpha(self, *args)

    def GetAlpha(self):
        """GetAlpha(self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_GetAlpha(self)

    def SetBeta(self, *args):
        """SetBeta(self, float _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_SetBeta(self, *args)

    def GetBeta(self):
        """GetBeta(self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_GetBeta(self)

    def SetRadius(self, *args):
        """SetRadius(self, itkSize2 _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_SetRadius(self, *args)

    def GetRadius(self):
        """GetRadius(self) -> itkSize2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_GetRadius(self)

    def SetUseLookupTable(self, *args):
        """SetUseLookupTable(self, bool _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_SetUseLookupTable(self, *args)

    def GetUseLookupTable(self):
        """GetUseLookupTable(self) -> bool"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_GetUseLookupTable(self)

    def UseLookupTableOn(self):
        """UseLookupTableOn(self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_UseLookupTableOn(self)

    def UseLookupTableOff(self):
        """UseLookupTableOff(self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_UseLookupTableOff(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterIF2
    def cast(*args):
        """cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIF2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAdaptiveHistogramEqualizationImageFilterIF2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterIF2
        
        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAdaptiveHistogramEqualizationImageFilterIF2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAdaptiveHistogramEqualizationImageFilterIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdaptiveHistogramEqualizationImageFilterIF2.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_SetAlpha,None,itkAdaptiveHistogramEqualizationImageFilterIF2)
itkAdaptiveHistogramEqualizationImageFilterIF2.GetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_GetAlpha,None,itkAdaptiveHistogramEqualizationImageFilterIF2)
itkAdaptiveHistogramEqualizationImageFilterIF2.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_SetBeta,None,itkAdaptiveHistogramEqualizationImageFilterIF2)
itkAdaptiveHistogramEqualizationImageFilterIF2.GetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_GetBeta,None,itkAdaptiveHistogramEqualizationImageFilterIF2)
itkAdaptiveHistogramEqualizationImageFilterIF2.SetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_SetRadius,None,itkAdaptiveHistogramEqualizationImageFilterIF2)
itkAdaptiveHistogramEqualizationImageFilterIF2.GetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_GetRadius,None,itkAdaptiveHistogramEqualizationImageFilterIF2)
itkAdaptiveHistogramEqualizationImageFilterIF2.SetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_SetUseLookupTable,None,itkAdaptiveHistogramEqualizationImageFilterIF2)
itkAdaptiveHistogramEqualizationImageFilterIF2.GetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_GetUseLookupTable,None,itkAdaptiveHistogramEqualizationImageFilterIF2)
itkAdaptiveHistogramEqualizationImageFilterIF2.UseLookupTableOn = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_UseLookupTableOn,None,itkAdaptiveHistogramEqualizationImageFilterIF2)
itkAdaptiveHistogramEqualizationImageFilterIF2.UseLookupTableOff = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_UseLookupTableOff,None,itkAdaptiveHistogramEqualizationImageFilterIF2)
itkAdaptiveHistogramEqualizationImageFilterIF2.GetPointer = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_GetPointer,None,itkAdaptiveHistogramEqualizationImageFilterIF2)
itkAdaptiveHistogramEqualizationImageFilterIF2_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_swigregister
itkAdaptiveHistogramEqualizationImageFilterIF2_swigregister(itkAdaptiveHistogramEqualizationImageFilterIF2)

def itkAdaptiveHistogramEqualizationImageFilterIF2___New_orig__():
  """itkAdaptiveHistogramEqualizationImageFilterIF2___New_orig__()"""
  return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2___New_orig__()

def itkAdaptiveHistogramEqualizationImageFilterIF2_cast(*args):
  """itkAdaptiveHistogramEqualizationImageFilterIF2_cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIF2"""
  return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF2_cast(*args)

class itkAdaptiveHistogramEqualizationImageFilterIF3(itkImageToImageFilterAPython.itkImageToImageFilterIF3IF3):
    """Proxy of C++ itkAdaptiveHistogramEqualizationImageFilterIF3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetAlpha(self, *args):
        """SetAlpha(self, float _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_SetAlpha(self, *args)

    def GetAlpha(self):
        """GetAlpha(self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_GetAlpha(self)

    def SetBeta(self, *args):
        """SetBeta(self, float _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_SetBeta(self, *args)

    def GetBeta(self):
        """GetBeta(self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_GetBeta(self)

    def SetRadius(self, *args):
        """SetRadius(self, itkSize3 _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_SetRadius(self, *args)

    def GetRadius(self):
        """GetRadius(self) -> itkSize3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_GetRadius(self)

    def SetUseLookupTable(self, *args):
        """SetUseLookupTable(self, bool _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_SetUseLookupTable(self, *args)

    def GetUseLookupTable(self):
        """GetUseLookupTable(self) -> bool"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_GetUseLookupTable(self)

    def UseLookupTableOn(self):
        """UseLookupTableOn(self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_UseLookupTableOn(self)

    def UseLookupTableOff(self):
        """UseLookupTableOff(self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_UseLookupTableOff(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterIF3
    def cast(*args):
        """cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIF3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAdaptiveHistogramEqualizationImageFilterIF3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterIF3
        
        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAdaptiveHistogramEqualizationImageFilterIF3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAdaptiveHistogramEqualizationImageFilterIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdaptiveHistogramEqualizationImageFilterIF3.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_SetAlpha,None,itkAdaptiveHistogramEqualizationImageFilterIF3)
itkAdaptiveHistogramEqualizationImageFilterIF3.GetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_GetAlpha,None,itkAdaptiveHistogramEqualizationImageFilterIF3)
itkAdaptiveHistogramEqualizationImageFilterIF3.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_SetBeta,None,itkAdaptiveHistogramEqualizationImageFilterIF3)
itkAdaptiveHistogramEqualizationImageFilterIF3.GetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_GetBeta,None,itkAdaptiveHistogramEqualizationImageFilterIF3)
itkAdaptiveHistogramEqualizationImageFilterIF3.SetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_SetRadius,None,itkAdaptiveHistogramEqualizationImageFilterIF3)
itkAdaptiveHistogramEqualizationImageFilterIF3.GetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_GetRadius,None,itkAdaptiveHistogramEqualizationImageFilterIF3)
itkAdaptiveHistogramEqualizationImageFilterIF3.SetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_SetUseLookupTable,None,itkAdaptiveHistogramEqualizationImageFilterIF3)
itkAdaptiveHistogramEqualizationImageFilterIF3.GetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_GetUseLookupTable,None,itkAdaptiveHistogramEqualizationImageFilterIF3)
itkAdaptiveHistogramEqualizationImageFilterIF3.UseLookupTableOn = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_UseLookupTableOn,None,itkAdaptiveHistogramEqualizationImageFilterIF3)
itkAdaptiveHistogramEqualizationImageFilterIF3.UseLookupTableOff = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_UseLookupTableOff,None,itkAdaptiveHistogramEqualizationImageFilterIF3)
itkAdaptiveHistogramEqualizationImageFilterIF3.GetPointer = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_GetPointer,None,itkAdaptiveHistogramEqualizationImageFilterIF3)
itkAdaptiveHistogramEqualizationImageFilterIF3_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_swigregister
itkAdaptiveHistogramEqualizationImageFilterIF3_swigregister(itkAdaptiveHistogramEqualizationImageFilterIF3)

def itkAdaptiveHistogramEqualizationImageFilterIF3___New_orig__():
  """itkAdaptiveHistogramEqualizationImageFilterIF3___New_orig__()"""
  return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3___New_orig__()

def itkAdaptiveHistogramEqualizationImageFilterIF3_cast(*args):
  """itkAdaptiveHistogramEqualizationImageFilterIF3_cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIF3"""
  return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIF3_cast(*args)

class itkAdaptiveHistogramEqualizationImageFilterIUC2(itkImageToImageFilterAPython.itkImageToImageFilterIUC2IUC2):
    """Proxy of C++ itkAdaptiveHistogramEqualizationImageFilterIUC2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetAlpha(self, *args):
        """SetAlpha(self, float _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_SetAlpha(self, *args)

    def GetAlpha(self):
        """GetAlpha(self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_GetAlpha(self)

    def SetBeta(self, *args):
        """SetBeta(self, float _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_SetBeta(self, *args)

    def GetBeta(self):
        """GetBeta(self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_GetBeta(self)

    def SetRadius(self, *args):
        """SetRadius(self, itkSize2 _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_SetRadius(self, *args)

    def GetRadius(self):
        """GetRadius(self) -> itkSize2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_GetRadius(self)

    def SetUseLookupTable(self, *args):
        """SetUseLookupTable(self, bool _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_SetUseLookupTable(self, *args)

    def GetUseLookupTable(self):
        """GetUseLookupTable(self) -> bool"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_GetUseLookupTable(self)

    def UseLookupTableOn(self):
        """UseLookupTableOn(self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_UseLookupTableOn(self)

    def UseLookupTableOff(self):
        """UseLookupTableOff(self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_UseLookupTableOff(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterIUC2
    def cast(*args):
        """cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIUC2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAdaptiveHistogramEqualizationImageFilterIUC2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterIUC2
        
        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterIUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAdaptiveHistogramEqualizationImageFilterIUC2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAdaptiveHistogramEqualizationImageFilterIUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterIUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdaptiveHistogramEqualizationImageFilterIUC2.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_SetAlpha,None,itkAdaptiveHistogramEqualizationImageFilterIUC2)
itkAdaptiveHistogramEqualizationImageFilterIUC2.GetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_GetAlpha,None,itkAdaptiveHistogramEqualizationImageFilterIUC2)
itkAdaptiveHistogramEqualizationImageFilterIUC2.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_SetBeta,None,itkAdaptiveHistogramEqualizationImageFilterIUC2)
itkAdaptiveHistogramEqualizationImageFilterIUC2.GetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_GetBeta,None,itkAdaptiveHistogramEqualizationImageFilterIUC2)
itkAdaptiveHistogramEqualizationImageFilterIUC2.SetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_SetRadius,None,itkAdaptiveHistogramEqualizationImageFilterIUC2)
itkAdaptiveHistogramEqualizationImageFilterIUC2.GetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_GetRadius,None,itkAdaptiveHistogramEqualizationImageFilterIUC2)
itkAdaptiveHistogramEqualizationImageFilterIUC2.SetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_SetUseLookupTable,None,itkAdaptiveHistogramEqualizationImageFilterIUC2)
itkAdaptiveHistogramEqualizationImageFilterIUC2.GetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_GetUseLookupTable,None,itkAdaptiveHistogramEqualizationImageFilterIUC2)
itkAdaptiveHistogramEqualizationImageFilterIUC2.UseLookupTableOn = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_UseLookupTableOn,None,itkAdaptiveHistogramEqualizationImageFilterIUC2)
itkAdaptiveHistogramEqualizationImageFilterIUC2.UseLookupTableOff = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_UseLookupTableOff,None,itkAdaptiveHistogramEqualizationImageFilterIUC2)
itkAdaptiveHistogramEqualizationImageFilterIUC2.GetPointer = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_GetPointer,None,itkAdaptiveHistogramEqualizationImageFilterIUC2)
itkAdaptiveHistogramEqualizationImageFilterIUC2_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_swigregister
itkAdaptiveHistogramEqualizationImageFilterIUC2_swigregister(itkAdaptiveHistogramEqualizationImageFilterIUC2)

def itkAdaptiveHistogramEqualizationImageFilterIUC2___New_orig__():
  """itkAdaptiveHistogramEqualizationImageFilterIUC2___New_orig__()"""
  return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2___New_orig__()

def itkAdaptiveHistogramEqualizationImageFilterIUC2_cast(*args):
  """itkAdaptiveHistogramEqualizationImageFilterIUC2_cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIUC2"""
  return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC2_cast(*args)

class itkAdaptiveHistogramEqualizationImageFilterIUC3(itkImageToImageFilterAPython.itkImageToImageFilterIUC3IUC3):
    """Proxy of C++ itkAdaptiveHistogramEqualizationImageFilterIUC3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetAlpha(self, *args):
        """SetAlpha(self, float _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_SetAlpha(self, *args)

    def GetAlpha(self):
        """GetAlpha(self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_GetAlpha(self)

    def SetBeta(self, *args):
        """SetBeta(self, float _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_SetBeta(self, *args)

    def GetBeta(self):
        """GetBeta(self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_GetBeta(self)

    def SetRadius(self, *args):
        """SetRadius(self, itkSize3 _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_SetRadius(self, *args)

    def GetRadius(self):
        """GetRadius(self) -> itkSize3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_GetRadius(self)

    def SetUseLookupTable(self, *args):
        """SetUseLookupTable(self, bool _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_SetUseLookupTable(self, *args)

    def GetUseLookupTable(self):
        """GetUseLookupTable(self) -> bool"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_GetUseLookupTable(self)

    def UseLookupTableOn(self):
        """UseLookupTableOn(self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_UseLookupTableOn(self)

    def UseLookupTableOff(self):
        """UseLookupTableOff(self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_UseLookupTableOff(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterIUC3
    def cast(*args):
        """cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIUC3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAdaptiveHistogramEqualizationImageFilterIUC3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterIUC3
        
        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterIUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAdaptiveHistogramEqualizationImageFilterIUC3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAdaptiveHistogramEqualizationImageFilterIUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterIUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdaptiveHistogramEqualizationImageFilterIUC3.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_SetAlpha,None,itkAdaptiveHistogramEqualizationImageFilterIUC3)
itkAdaptiveHistogramEqualizationImageFilterIUC3.GetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_GetAlpha,None,itkAdaptiveHistogramEqualizationImageFilterIUC3)
itkAdaptiveHistogramEqualizationImageFilterIUC3.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_SetBeta,None,itkAdaptiveHistogramEqualizationImageFilterIUC3)
itkAdaptiveHistogramEqualizationImageFilterIUC3.GetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_GetBeta,None,itkAdaptiveHistogramEqualizationImageFilterIUC3)
itkAdaptiveHistogramEqualizationImageFilterIUC3.SetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_SetRadius,None,itkAdaptiveHistogramEqualizationImageFilterIUC3)
itkAdaptiveHistogramEqualizationImageFilterIUC3.GetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_GetRadius,None,itkAdaptiveHistogramEqualizationImageFilterIUC3)
itkAdaptiveHistogramEqualizationImageFilterIUC3.SetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_SetUseLookupTable,None,itkAdaptiveHistogramEqualizationImageFilterIUC3)
itkAdaptiveHistogramEqualizationImageFilterIUC3.GetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_GetUseLookupTable,None,itkAdaptiveHistogramEqualizationImageFilterIUC3)
itkAdaptiveHistogramEqualizationImageFilterIUC3.UseLookupTableOn = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_UseLookupTableOn,None,itkAdaptiveHistogramEqualizationImageFilterIUC3)
itkAdaptiveHistogramEqualizationImageFilterIUC3.UseLookupTableOff = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_UseLookupTableOff,None,itkAdaptiveHistogramEqualizationImageFilterIUC3)
itkAdaptiveHistogramEqualizationImageFilterIUC3.GetPointer = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_GetPointer,None,itkAdaptiveHistogramEqualizationImageFilterIUC3)
itkAdaptiveHistogramEqualizationImageFilterIUC3_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_swigregister
itkAdaptiveHistogramEqualizationImageFilterIUC3_swigregister(itkAdaptiveHistogramEqualizationImageFilterIUC3)

def itkAdaptiveHistogramEqualizationImageFilterIUC3___New_orig__():
  """itkAdaptiveHistogramEqualizationImageFilterIUC3___New_orig__()"""
  return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3___New_orig__()

def itkAdaptiveHistogramEqualizationImageFilterIUC3_cast(*args):
  """itkAdaptiveHistogramEqualizationImageFilterIUC3_cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIUC3"""
  return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUC3_cast(*args)

class itkAdaptiveHistogramEqualizationImageFilterIUL2(itkImageToImageFilterAPython.itkImageToImageFilterIUL2IUL2):
    """Proxy of C++ itkAdaptiveHistogramEqualizationImageFilterIUL2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetAlpha(self, *args):
        """SetAlpha(self, float _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_SetAlpha(self, *args)

    def GetAlpha(self):
        """GetAlpha(self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_GetAlpha(self)

    def SetBeta(self, *args):
        """SetBeta(self, float _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_SetBeta(self, *args)

    def GetBeta(self):
        """GetBeta(self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_GetBeta(self)

    def SetRadius(self, *args):
        """SetRadius(self, itkSize2 _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_SetRadius(self, *args)

    def GetRadius(self):
        """GetRadius(self) -> itkSize2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_GetRadius(self)

    def SetUseLookupTable(self, *args):
        """SetUseLookupTable(self, bool _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_SetUseLookupTable(self, *args)

    def GetUseLookupTable(self):
        """GetUseLookupTable(self) -> bool"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_GetUseLookupTable(self)

    def UseLookupTableOn(self):
        """UseLookupTableOn(self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_UseLookupTableOn(self)

    def UseLookupTableOff(self):
        """UseLookupTableOff(self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_UseLookupTableOff(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterIUL2
    def cast(*args):
        """cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIUL2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAdaptiveHistogramEqualizationImageFilterIUL2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterIUL2
        
        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterIUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAdaptiveHistogramEqualizationImageFilterIUL2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAdaptiveHistogramEqualizationImageFilterIUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterIUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdaptiveHistogramEqualizationImageFilterIUL2.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_SetAlpha,None,itkAdaptiveHistogramEqualizationImageFilterIUL2)
itkAdaptiveHistogramEqualizationImageFilterIUL2.GetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_GetAlpha,None,itkAdaptiveHistogramEqualizationImageFilterIUL2)
itkAdaptiveHistogramEqualizationImageFilterIUL2.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_SetBeta,None,itkAdaptiveHistogramEqualizationImageFilterIUL2)
itkAdaptiveHistogramEqualizationImageFilterIUL2.GetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_GetBeta,None,itkAdaptiveHistogramEqualizationImageFilterIUL2)
itkAdaptiveHistogramEqualizationImageFilterIUL2.SetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_SetRadius,None,itkAdaptiveHistogramEqualizationImageFilterIUL2)
itkAdaptiveHistogramEqualizationImageFilterIUL2.GetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_GetRadius,None,itkAdaptiveHistogramEqualizationImageFilterIUL2)
itkAdaptiveHistogramEqualizationImageFilterIUL2.SetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_SetUseLookupTable,None,itkAdaptiveHistogramEqualizationImageFilterIUL2)
itkAdaptiveHistogramEqualizationImageFilterIUL2.GetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_GetUseLookupTable,None,itkAdaptiveHistogramEqualizationImageFilterIUL2)
itkAdaptiveHistogramEqualizationImageFilterIUL2.UseLookupTableOn = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_UseLookupTableOn,None,itkAdaptiveHistogramEqualizationImageFilterIUL2)
itkAdaptiveHistogramEqualizationImageFilterIUL2.UseLookupTableOff = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_UseLookupTableOff,None,itkAdaptiveHistogramEqualizationImageFilterIUL2)
itkAdaptiveHistogramEqualizationImageFilterIUL2.GetPointer = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_GetPointer,None,itkAdaptiveHistogramEqualizationImageFilterIUL2)
itkAdaptiveHistogramEqualizationImageFilterIUL2_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_swigregister
itkAdaptiveHistogramEqualizationImageFilterIUL2_swigregister(itkAdaptiveHistogramEqualizationImageFilterIUL2)

def itkAdaptiveHistogramEqualizationImageFilterIUL2___New_orig__():
  """itkAdaptiveHistogramEqualizationImageFilterIUL2___New_orig__()"""
  return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2___New_orig__()

def itkAdaptiveHistogramEqualizationImageFilterIUL2_cast(*args):
  """itkAdaptiveHistogramEqualizationImageFilterIUL2_cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIUL2"""
  return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL2_cast(*args)

class itkAdaptiveHistogramEqualizationImageFilterIUL3(itkImageToImageFilterAPython.itkImageToImageFilterIUL3IUL3):
    """Proxy of C++ itkAdaptiveHistogramEqualizationImageFilterIUL3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetAlpha(self, *args):
        """SetAlpha(self, float _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_SetAlpha(self, *args)

    def GetAlpha(self):
        """GetAlpha(self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_GetAlpha(self)

    def SetBeta(self, *args):
        """SetBeta(self, float _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_SetBeta(self, *args)

    def GetBeta(self):
        """GetBeta(self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_GetBeta(self)

    def SetRadius(self, *args):
        """SetRadius(self, itkSize3 _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_SetRadius(self, *args)

    def GetRadius(self):
        """GetRadius(self) -> itkSize3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_GetRadius(self)

    def SetUseLookupTable(self, *args):
        """SetUseLookupTable(self, bool _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_SetUseLookupTable(self, *args)

    def GetUseLookupTable(self):
        """GetUseLookupTable(self) -> bool"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_GetUseLookupTable(self)

    def UseLookupTableOn(self):
        """UseLookupTableOn(self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_UseLookupTableOn(self)

    def UseLookupTableOff(self):
        """UseLookupTableOff(self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_UseLookupTableOff(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterIUL3
    def cast(*args):
        """cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIUL3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAdaptiveHistogramEqualizationImageFilterIUL3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterIUL3
        
        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterIUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAdaptiveHistogramEqualizationImageFilterIUL3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAdaptiveHistogramEqualizationImageFilterIUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterIUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdaptiveHistogramEqualizationImageFilterIUL3.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_SetAlpha,None,itkAdaptiveHistogramEqualizationImageFilterIUL3)
itkAdaptiveHistogramEqualizationImageFilterIUL3.GetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_GetAlpha,None,itkAdaptiveHistogramEqualizationImageFilterIUL3)
itkAdaptiveHistogramEqualizationImageFilterIUL3.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_SetBeta,None,itkAdaptiveHistogramEqualizationImageFilterIUL3)
itkAdaptiveHistogramEqualizationImageFilterIUL3.GetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_GetBeta,None,itkAdaptiveHistogramEqualizationImageFilterIUL3)
itkAdaptiveHistogramEqualizationImageFilterIUL3.SetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_SetRadius,None,itkAdaptiveHistogramEqualizationImageFilterIUL3)
itkAdaptiveHistogramEqualizationImageFilterIUL3.GetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_GetRadius,None,itkAdaptiveHistogramEqualizationImageFilterIUL3)
itkAdaptiveHistogramEqualizationImageFilterIUL3.SetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_SetUseLookupTable,None,itkAdaptiveHistogramEqualizationImageFilterIUL3)
itkAdaptiveHistogramEqualizationImageFilterIUL3.GetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_GetUseLookupTable,None,itkAdaptiveHistogramEqualizationImageFilterIUL3)
itkAdaptiveHistogramEqualizationImageFilterIUL3.UseLookupTableOn = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_UseLookupTableOn,None,itkAdaptiveHistogramEqualizationImageFilterIUL3)
itkAdaptiveHistogramEqualizationImageFilterIUL3.UseLookupTableOff = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_UseLookupTableOff,None,itkAdaptiveHistogramEqualizationImageFilterIUL3)
itkAdaptiveHistogramEqualizationImageFilterIUL3.GetPointer = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_GetPointer,None,itkAdaptiveHistogramEqualizationImageFilterIUL3)
itkAdaptiveHistogramEqualizationImageFilterIUL3_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_swigregister
itkAdaptiveHistogramEqualizationImageFilterIUL3_swigregister(itkAdaptiveHistogramEqualizationImageFilterIUL3)

def itkAdaptiveHistogramEqualizationImageFilterIUL3___New_orig__():
  """itkAdaptiveHistogramEqualizationImageFilterIUL3___New_orig__()"""
  return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3___New_orig__()

def itkAdaptiveHistogramEqualizationImageFilterIUL3_cast(*args):
  """itkAdaptiveHistogramEqualizationImageFilterIUL3_cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIUL3"""
  return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUL3_cast(*args)

class itkAdaptiveHistogramEqualizationImageFilterIUS2(itkImageToImageFilterAPython.itkImageToImageFilterIUS2IUS2):
    """Proxy of C++ itkAdaptiveHistogramEqualizationImageFilterIUS2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetAlpha(self, *args):
        """SetAlpha(self, float _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_SetAlpha(self, *args)

    def GetAlpha(self):
        """GetAlpha(self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_GetAlpha(self)

    def SetBeta(self, *args):
        """SetBeta(self, float _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_SetBeta(self, *args)

    def GetBeta(self):
        """GetBeta(self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_GetBeta(self)

    def SetRadius(self, *args):
        """SetRadius(self, itkSize2 _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_SetRadius(self, *args)

    def GetRadius(self):
        """GetRadius(self) -> itkSize2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_GetRadius(self)

    def SetUseLookupTable(self, *args):
        """SetUseLookupTable(self, bool _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_SetUseLookupTable(self, *args)

    def GetUseLookupTable(self):
        """GetUseLookupTable(self) -> bool"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_GetUseLookupTable(self)

    def UseLookupTableOn(self):
        """UseLookupTableOn(self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_UseLookupTableOn(self)

    def UseLookupTableOff(self):
        """UseLookupTableOff(self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_UseLookupTableOff(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterIUS2
    def cast(*args):
        """cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIUS2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAdaptiveHistogramEqualizationImageFilterIUS2"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterIUS2
        
        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterIUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAdaptiveHistogramEqualizationImageFilterIUS2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAdaptiveHistogramEqualizationImageFilterIUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterIUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdaptiveHistogramEqualizationImageFilterIUS2.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_SetAlpha,None,itkAdaptiveHistogramEqualizationImageFilterIUS2)
itkAdaptiveHistogramEqualizationImageFilterIUS2.GetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_GetAlpha,None,itkAdaptiveHistogramEqualizationImageFilterIUS2)
itkAdaptiveHistogramEqualizationImageFilterIUS2.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_SetBeta,None,itkAdaptiveHistogramEqualizationImageFilterIUS2)
itkAdaptiveHistogramEqualizationImageFilterIUS2.GetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_GetBeta,None,itkAdaptiveHistogramEqualizationImageFilterIUS2)
itkAdaptiveHistogramEqualizationImageFilterIUS2.SetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_SetRadius,None,itkAdaptiveHistogramEqualizationImageFilterIUS2)
itkAdaptiveHistogramEqualizationImageFilterIUS2.GetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_GetRadius,None,itkAdaptiveHistogramEqualizationImageFilterIUS2)
itkAdaptiveHistogramEqualizationImageFilterIUS2.SetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_SetUseLookupTable,None,itkAdaptiveHistogramEqualizationImageFilterIUS2)
itkAdaptiveHistogramEqualizationImageFilterIUS2.GetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_GetUseLookupTable,None,itkAdaptiveHistogramEqualizationImageFilterIUS2)
itkAdaptiveHistogramEqualizationImageFilterIUS2.UseLookupTableOn = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_UseLookupTableOn,None,itkAdaptiveHistogramEqualizationImageFilterIUS2)
itkAdaptiveHistogramEqualizationImageFilterIUS2.UseLookupTableOff = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_UseLookupTableOff,None,itkAdaptiveHistogramEqualizationImageFilterIUS2)
itkAdaptiveHistogramEqualizationImageFilterIUS2.GetPointer = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_GetPointer,None,itkAdaptiveHistogramEqualizationImageFilterIUS2)
itkAdaptiveHistogramEqualizationImageFilterIUS2_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_swigregister
itkAdaptiveHistogramEqualizationImageFilterIUS2_swigregister(itkAdaptiveHistogramEqualizationImageFilterIUS2)

def itkAdaptiveHistogramEqualizationImageFilterIUS2___New_orig__():
  """itkAdaptiveHistogramEqualizationImageFilterIUS2___New_orig__()"""
  return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2___New_orig__()

def itkAdaptiveHistogramEqualizationImageFilterIUS2_cast(*args):
  """itkAdaptiveHistogramEqualizationImageFilterIUS2_cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIUS2"""
  return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS2_cast(*args)

class itkAdaptiveHistogramEqualizationImageFilterIUS3(itkImageToImageFilterAPython.itkImageToImageFilterIUS3IUS3):
    """Proxy of C++ itkAdaptiveHistogramEqualizationImageFilterIUS3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetAlpha(self, *args):
        """SetAlpha(self, float _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_SetAlpha(self, *args)

    def GetAlpha(self):
        """GetAlpha(self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_GetAlpha(self)

    def SetBeta(self, *args):
        """SetBeta(self, float _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_SetBeta(self, *args)

    def GetBeta(self):
        """GetBeta(self) -> float"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_GetBeta(self)

    def SetRadius(self, *args):
        """SetRadius(self, itkSize3 _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_SetRadius(self, *args)

    def GetRadius(self):
        """GetRadius(self) -> itkSize3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_GetRadius(self)

    def SetUseLookupTable(self, *args):
        """SetUseLookupTable(self, bool _arg)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_SetUseLookupTable(self, *args)

    def GetUseLookupTable(self):
        """GetUseLookupTable(self) -> bool"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_GetUseLookupTable(self)

    def UseLookupTableOn(self):
        """UseLookupTableOn(self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_UseLookupTableOn(self)

    def UseLookupTableOff(self):
        """UseLookupTableOff(self)"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_UseLookupTableOff(self)

    __swig_destroy__ = _itkAdaptiveHistogramEqualizationImageFilterPython.delete_itkAdaptiveHistogramEqualizationImageFilterIUS3
    def cast(*args):
        """cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIUS3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkAdaptiveHistogramEqualizationImageFilterIUS3"""
        return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkAdaptiveHistogramEqualizationImageFilterIUS3
        
        Create a new object of the class itkAdaptiveHistogramEqualizationImageFilterIUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkAdaptiveHistogramEqualizationImageFilterIUS3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkAdaptiveHistogramEqualizationImageFilterIUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkAdaptiveHistogramEqualizationImageFilterIUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkAdaptiveHistogramEqualizationImageFilterIUS3.SetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_SetAlpha,None,itkAdaptiveHistogramEqualizationImageFilterIUS3)
itkAdaptiveHistogramEqualizationImageFilterIUS3.GetAlpha = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_GetAlpha,None,itkAdaptiveHistogramEqualizationImageFilterIUS3)
itkAdaptiveHistogramEqualizationImageFilterIUS3.SetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_SetBeta,None,itkAdaptiveHistogramEqualizationImageFilterIUS3)
itkAdaptiveHistogramEqualizationImageFilterIUS3.GetBeta = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_GetBeta,None,itkAdaptiveHistogramEqualizationImageFilterIUS3)
itkAdaptiveHistogramEqualizationImageFilterIUS3.SetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_SetRadius,None,itkAdaptiveHistogramEqualizationImageFilterIUS3)
itkAdaptiveHistogramEqualizationImageFilterIUS3.GetRadius = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_GetRadius,None,itkAdaptiveHistogramEqualizationImageFilterIUS3)
itkAdaptiveHistogramEqualizationImageFilterIUS3.SetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_SetUseLookupTable,None,itkAdaptiveHistogramEqualizationImageFilterIUS3)
itkAdaptiveHistogramEqualizationImageFilterIUS3.GetUseLookupTable = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_GetUseLookupTable,None,itkAdaptiveHistogramEqualizationImageFilterIUS3)
itkAdaptiveHistogramEqualizationImageFilterIUS3.UseLookupTableOn = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_UseLookupTableOn,None,itkAdaptiveHistogramEqualizationImageFilterIUS3)
itkAdaptiveHistogramEqualizationImageFilterIUS3.UseLookupTableOff = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_UseLookupTableOff,None,itkAdaptiveHistogramEqualizationImageFilterIUS3)
itkAdaptiveHistogramEqualizationImageFilterIUS3.GetPointer = new_instancemethod(_itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_GetPointer,None,itkAdaptiveHistogramEqualizationImageFilterIUS3)
itkAdaptiveHistogramEqualizationImageFilterIUS3_swigregister = _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_swigregister
itkAdaptiveHistogramEqualizationImageFilterIUS3_swigregister(itkAdaptiveHistogramEqualizationImageFilterIUS3)

def itkAdaptiveHistogramEqualizationImageFilterIUS3___New_orig__():
  """itkAdaptiveHistogramEqualizationImageFilterIUS3___New_orig__()"""
  return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3___New_orig__()

def itkAdaptiveHistogramEqualizationImageFilterIUS3_cast(*args):
  """itkAdaptiveHistogramEqualizationImageFilterIUS3_cast(itkLightObject obj) -> itkAdaptiveHistogramEqualizationImageFilterIUS3"""
  return _itkAdaptiveHistogramEqualizationImageFilterPython.itkAdaptiveHistogramEqualizationImageFilterIUS3_cast(*args)



