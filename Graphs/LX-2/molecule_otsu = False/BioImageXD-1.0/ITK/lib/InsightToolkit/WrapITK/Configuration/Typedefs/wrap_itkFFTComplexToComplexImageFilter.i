// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkFFTComplexToComplexImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkFFTComplexToComplexImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkFFTComplexToComplexImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkFFTComplexToComplexImageFilterJava
#endif
#ifdef SWIGLUA
%module itkFFTComplexToComplexImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkFFTComplexToComplexImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkFFTComplexToComplexImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkFFTComplexToComplexImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkFFTComplexToComplexImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkFFTComplexToComplexImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkFFTComplexToComplexImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkFFTComplexToComplexImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkFFTComplexToComplexImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkFFTComplexToComplexImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkFFTComplexToComplexImageFilterPython
#endif
#ifdef SWIGR
%module itkFFTComplexToComplexImageFilterR
#endif
#ifdef SWIGRUBY
%module itkFFTComplexToComplexImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkFFTComplexToComplexImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkFFTComplexToComplexImageFilterTcl
#endif
#ifdef SWIGXML
%module itkFFTComplexToComplexImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "FFT.includes"
%}


%{
%}




%import wrap_itkImageToImageFilterB.i


%include itk.i
%include wrap_itkFFTComplexToComplexImageFilter_ext.i


 class itkFFTComplexToComplexImageFilterF2 : public itkImageToImageFilterICF2ICF2 {
   public:
     enum  {  ImageDimension = 2 };
     enum TransformDirectionType {  DIRECT = 1,  INVERSE = 2 };
     virtual char const * GetNameOfClass() const;
     static itkFFTComplexToComplexImageFilterF2_Pointer New();
     virtual void SetTransformDirection(itkFFTComplexToComplexImageFilterF2::TransformDirectionType const _arg);
     virtual itkFFTComplexToComplexImageFilterF2::TransformDirectionType GetTransformDirection() const;
   private:
     itkFFTComplexToComplexImageFilterF2(itkFFTComplexToComplexImageFilterF2 const & arg0);
     void operator=(itkFFTComplexToComplexImageFilterF2 const & arg0);
   protected:
     itkFFTComplexToComplexImageFilterF2();
     ~itkFFTComplexToComplexImageFilterF2();
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual bool FullMatrix() = 0;
 };


 class itkFFTComplexToComplexImageFilterF2_Pointer {
   public:
     itkFFTComplexToComplexImageFilterF2_Pointer();
     itkFFTComplexToComplexImageFilterF2_Pointer(itkFFTComplexToComplexImageFilterF2_Pointer const & p);
     itkFFTComplexToComplexImageFilterF2_Pointer(itkFFTComplexToComplexImageFilterF2 * p);
     ~itkFFTComplexToComplexImageFilterF2_Pointer();
     itkFFTComplexToComplexImageFilterF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkFFTComplexToComplexImageFilterF2 * GetPointer() const;
     bool operator<(itkFFTComplexToComplexImageFilterF2_Pointer const & r) const;
     bool operator>(itkFFTComplexToComplexImageFilterF2_Pointer const & r) const;
     bool operator<=(itkFFTComplexToComplexImageFilterF2_Pointer const & r) const;
     bool operator>=(itkFFTComplexToComplexImageFilterF2_Pointer const & r) const;
     itkFFTComplexToComplexImageFilterF2_Pointer & operator=(itkFFTComplexToComplexImageFilterF2_Pointer const & r);
     itkFFTComplexToComplexImageFilterF2_Pointer & operator=(itkFFTComplexToComplexImageFilterF2 * r);
     itkFFTComplexToComplexImageFilterF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkFFTComplexToComplexImageFilterF3 : public itkImageToImageFilterICF3ICF3 {
   public:
     enum  {  ImageDimension = 3 };
     enum TransformDirectionType {  DIRECT = 1,  INVERSE = 2 };
     virtual char const * GetNameOfClass() const;
     static itkFFTComplexToComplexImageFilterF3_Pointer New();
     virtual void SetTransformDirection(itkFFTComplexToComplexImageFilterF3::TransformDirectionType const _arg);
     virtual itkFFTComplexToComplexImageFilterF3::TransformDirectionType GetTransformDirection() const;
   private:
     itkFFTComplexToComplexImageFilterF3(itkFFTComplexToComplexImageFilterF3 const & arg0);
     void operator=(itkFFTComplexToComplexImageFilterF3 const & arg0);
   protected:
     itkFFTComplexToComplexImageFilterF3();
     ~itkFFTComplexToComplexImageFilterF3();
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
     virtual bool FullMatrix() = 0;
 };


 class itkFFTComplexToComplexImageFilterF3_Pointer {
   public:
     itkFFTComplexToComplexImageFilterF3_Pointer();
     itkFFTComplexToComplexImageFilterF3_Pointer(itkFFTComplexToComplexImageFilterF3_Pointer const & p);
     itkFFTComplexToComplexImageFilterF3_Pointer(itkFFTComplexToComplexImageFilterF3 * p);
     ~itkFFTComplexToComplexImageFilterF3_Pointer();
     itkFFTComplexToComplexImageFilterF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkFFTComplexToComplexImageFilterF3 * GetPointer() const;
     bool operator<(itkFFTComplexToComplexImageFilterF3_Pointer const & r) const;
     bool operator>(itkFFTComplexToComplexImageFilterF3_Pointer const & r) const;
     bool operator<=(itkFFTComplexToComplexImageFilterF3_Pointer const & r) const;
     bool operator>=(itkFFTComplexToComplexImageFilterF3_Pointer const & r) const;
     itkFFTComplexToComplexImageFilterF3_Pointer & operator=(itkFFTComplexToComplexImageFilterF3_Pointer const & r);
     itkFFTComplexToComplexImageFilterF3_Pointer & operator=(itkFFTComplexToComplexImageFilterF3 * r);
     itkFFTComplexToComplexImageFilterF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


