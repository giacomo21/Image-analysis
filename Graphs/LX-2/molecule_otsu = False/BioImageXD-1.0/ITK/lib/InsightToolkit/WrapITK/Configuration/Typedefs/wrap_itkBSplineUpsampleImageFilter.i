// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkBSplineUpsampleImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkBSplineUpsampleImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkBSplineUpsampleImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkBSplineUpsampleImageFilterJava
#endif
#ifdef SWIGLUA
%module itkBSplineUpsampleImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkBSplineUpsampleImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkBSplineUpsampleImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkBSplineUpsampleImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkBSplineUpsampleImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkBSplineUpsampleImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkBSplineUpsampleImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkBSplineUpsampleImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkBSplineUpsampleImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkBSplineUpsampleImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkBSplineUpsampleImageFilterPython
#endif
#ifdef SWIGR
%module itkBSplineUpsampleImageFilterR
#endif
#ifdef SWIGRUBY
%module itkBSplineUpsampleImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkBSplineUpsampleImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkBSplineUpsampleImageFilterTcl
#endif
#ifdef SWIGXML
%module itkBSplineUpsampleImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Resize.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkBSplineDownsampleImageFilter.i


%include itk.i
%include wrap_itkBSplineUpsampleImageFilter_ext.i


 class itkBSplineUpsampleImageFilterID2ID2 : public itkBSplineDownsampleImageFilterID2ID2_Superclass {
   public:
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineUpsampleImageFilterID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
   private:
     itkBSplineUpsampleImageFilterID2ID2(itkBSplineUpsampleImageFilterID2ID2 const & arg0);
     void operator=(itkBSplineUpsampleImageFilterID2ID2 const & arg0);
   protected:
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
     itkBSplineUpsampleImageFilterID2ID2();
     ~itkBSplineUpsampleImageFilterID2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineUpsampleImageFilterID2ID2_Pointer {
   public:
     itkBSplineUpsampleImageFilterID2ID2_Pointer();
     itkBSplineUpsampleImageFilterID2ID2_Pointer(itkBSplineUpsampleImageFilterID2ID2_Pointer const & p);
     itkBSplineUpsampleImageFilterID2ID2_Pointer(itkBSplineUpsampleImageFilterID2ID2 * p);
     ~itkBSplineUpsampleImageFilterID2ID2_Pointer();
     itkBSplineUpsampleImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineUpsampleImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkBSplineUpsampleImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkBSplineUpsampleImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkBSplineUpsampleImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkBSplineUpsampleImageFilterID2ID2_Pointer const & r) const;
     itkBSplineUpsampleImageFilterID2ID2_Pointer & operator=(itkBSplineUpsampleImageFilterID2ID2_Pointer const & r);
     itkBSplineUpsampleImageFilterID2ID2_Pointer & operator=(itkBSplineUpsampleImageFilterID2ID2 * r);
     itkBSplineUpsampleImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineUpsampleImageFilterID3ID3 : public itkBSplineDownsampleImageFilterID3ID3_Superclass {
   public:
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineUpsampleImageFilterID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
   private:
     itkBSplineUpsampleImageFilterID3ID3(itkBSplineUpsampleImageFilterID3ID3 const & arg0);
     void operator=(itkBSplineUpsampleImageFilterID3ID3 const & arg0);
   protected:
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
     itkBSplineUpsampleImageFilterID3ID3();
     ~itkBSplineUpsampleImageFilterID3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineUpsampleImageFilterID3ID3_Pointer {
   public:
     itkBSplineUpsampleImageFilterID3ID3_Pointer();
     itkBSplineUpsampleImageFilterID3ID3_Pointer(itkBSplineUpsampleImageFilterID3ID3_Pointer const & p);
     itkBSplineUpsampleImageFilterID3ID3_Pointer(itkBSplineUpsampleImageFilterID3ID3 * p);
     ~itkBSplineUpsampleImageFilterID3ID3_Pointer();
     itkBSplineUpsampleImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineUpsampleImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkBSplineUpsampleImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkBSplineUpsampleImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkBSplineUpsampleImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkBSplineUpsampleImageFilterID3ID3_Pointer const & r) const;
     itkBSplineUpsampleImageFilterID3ID3_Pointer & operator=(itkBSplineUpsampleImageFilterID3ID3_Pointer const & r);
     itkBSplineUpsampleImageFilterID3ID3_Pointer & operator=(itkBSplineUpsampleImageFilterID3ID3 * r);
     itkBSplineUpsampleImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineUpsampleImageFilterIF2IF2 : public itkBSplineDownsampleImageFilterIF2IF2_Superclass {
   public:
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineUpsampleImageFilterIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
   private:
     itkBSplineUpsampleImageFilterIF2IF2(itkBSplineUpsampleImageFilterIF2IF2 const & arg0);
     void operator=(itkBSplineUpsampleImageFilterIF2IF2 const & arg0);
   protected:
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
     itkBSplineUpsampleImageFilterIF2IF2();
     ~itkBSplineUpsampleImageFilterIF2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineUpsampleImageFilterIF2IF2_Pointer {
   public:
     itkBSplineUpsampleImageFilterIF2IF2_Pointer();
     itkBSplineUpsampleImageFilterIF2IF2_Pointer(itkBSplineUpsampleImageFilterIF2IF2_Pointer const & p);
     itkBSplineUpsampleImageFilterIF2IF2_Pointer(itkBSplineUpsampleImageFilterIF2IF2 * p);
     ~itkBSplineUpsampleImageFilterIF2IF2_Pointer();
     itkBSplineUpsampleImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineUpsampleImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkBSplineUpsampleImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkBSplineUpsampleImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkBSplineUpsampleImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkBSplineUpsampleImageFilterIF2IF2_Pointer const & r) const;
     itkBSplineUpsampleImageFilterIF2IF2_Pointer & operator=(itkBSplineUpsampleImageFilterIF2IF2_Pointer const & r);
     itkBSplineUpsampleImageFilterIF2IF2_Pointer & operator=(itkBSplineUpsampleImageFilterIF2IF2 * r);
     itkBSplineUpsampleImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineUpsampleImageFilterIF3IF3 : public itkBSplineDownsampleImageFilterIF3IF3_Superclass {
   public:
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineUpsampleImageFilterIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
   private:
     itkBSplineUpsampleImageFilterIF3IF3(itkBSplineUpsampleImageFilterIF3IF3 const & arg0);
     void operator=(itkBSplineUpsampleImageFilterIF3IF3 const & arg0);
   protected:
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
     itkBSplineUpsampleImageFilterIF3IF3();
     ~itkBSplineUpsampleImageFilterIF3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineUpsampleImageFilterIF3IF3_Pointer {
   public:
     itkBSplineUpsampleImageFilterIF3IF3_Pointer();
     itkBSplineUpsampleImageFilterIF3IF3_Pointer(itkBSplineUpsampleImageFilterIF3IF3_Pointer const & p);
     itkBSplineUpsampleImageFilterIF3IF3_Pointer(itkBSplineUpsampleImageFilterIF3IF3 * p);
     ~itkBSplineUpsampleImageFilterIF3IF3_Pointer();
     itkBSplineUpsampleImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineUpsampleImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkBSplineUpsampleImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkBSplineUpsampleImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkBSplineUpsampleImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkBSplineUpsampleImageFilterIF3IF3_Pointer const & r) const;
     itkBSplineUpsampleImageFilterIF3IF3_Pointer & operator=(itkBSplineUpsampleImageFilterIF3IF3_Pointer const & r);
     itkBSplineUpsampleImageFilterIF3IF3_Pointer & operator=(itkBSplineUpsampleImageFilterIF3IF3 * r);
     itkBSplineUpsampleImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineUpsampleImageFilterIUC2IUC2 : public itkBSplineDownsampleImageFilterIUC2IUC2_Superclass {
   public:
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineUpsampleImageFilterIUC2IUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
   private:
     itkBSplineUpsampleImageFilterIUC2IUC2(itkBSplineUpsampleImageFilterIUC2IUC2 const & arg0);
     void operator=(itkBSplineUpsampleImageFilterIUC2IUC2 const & arg0);
   protected:
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
     itkBSplineUpsampleImageFilterIUC2IUC2();
     ~itkBSplineUpsampleImageFilterIUC2IUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineUpsampleImageFilterIUC2IUC2_Pointer {
   public:
     itkBSplineUpsampleImageFilterIUC2IUC2_Pointer();
     itkBSplineUpsampleImageFilterIUC2IUC2_Pointer(itkBSplineUpsampleImageFilterIUC2IUC2_Pointer const & p);
     itkBSplineUpsampleImageFilterIUC2IUC2_Pointer(itkBSplineUpsampleImageFilterIUC2IUC2 * p);
     ~itkBSplineUpsampleImageFilterIUC2IUC2_Pointer();
     itkBSplineUpsampleImageFilterIUC2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineUpsampleImageFilterIUC2IUC2 * GetPointer() const;
     bool operator<(itkBSplineUpsampleImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>(itkBSplineUpsampleImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator<=(itkBSplineUpsampleImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>=(itkBSplineUpsampleImageFilterIUC2IUC2_Pointer const & r) const;
     itkBSplineUpsampleImageFilterIUC2IUC2_Pointer & operator=(itkBSplineUpsampleImageFilterIUC2IUC2_Pointer const & r);
     itkBSplineUpsampleImageFilterIUC2IUC2_Pointer & operator=(itkBSplineUpsampleImageFilterIUC2IUC2 * r);
     itkBSplineUpsampleImageFilterIUC2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineUpsampleImageFilterIUC3IUC3 : public itkBSplineDownsampleImageFilterIUC3IUC3_Superclass {
   public:
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineUpsampleImageFilterIUC3IUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
   private:
     itkBSplineUpsampleImageFilterIUC3IUC3(itkBSplineUpsampleImageFilterIUC3IUC3 const & arg0);
     void operator=(itkBSplineUpsampleImageFilterIUC3IUC3 const & arg0);
   protected:
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
     itkBSplineUpsampleImageFilterIUC3IUC3();
     ~itkBSplineUpsampleImageFilterIUC3IUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineUpsampleImageFilterIUC3IUC3_Pointer {
   public:
     itkBSplineUpsampleImageFilterIUC3IUC3_Pointer();
     itkBSplineUpsampleImageFilterIUC3IUC3_Pointer(itkBSplineUpsampleImageFilterIUC3IUC3_Pointer const & p);
     itkBSplineUpsampleImageFilterIUC3IUC3_Pointer(itkBSplineUpsampleImageFilterIUC3IUC3 * p);
     ~itkBSplineUpsampleImageFilterIUC3IUC3_Pointer();
     itkBSplineUpsampleImageFilterIUC3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineUpsampleImageFilterIUC3IUC3 * GetPointer() const;
     bool operator<(itkBSplineUpsampleImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>(itkBSplineUpsampleImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator<=(itkBSplineUpsampleImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>=(itkBSplineUpsampleImageFilterIUC3IUC3_Pointer const & r) const;
     itkBSplineUpsampleImageFilterIUC3IUC3_Pointer & operator=(itkBSplineUpsampleImageFilterIUC3IUC3_Pointer const & r);
     itkBSplineUpsampleImageFilterIUC3IUC3_Pointer & operator=(itkBSplineUpsampleImageFilterIUC3IUC3 * r);
     itkBSplineUpsampleImageFilterIUC3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineUpsampleImageFilterIUL2IUL2 : public itkBSplineDownsampleImageFilterIUL2IUL2_Superclass {
   public:
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineUpsampleImageFilterIUL2IUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
   private:
     itkBSplineUpsampleImageFilterIUL2IUL2(itkBSplineUpsampleImageFilterIUL2IUL2 const & arg0);
     void operator=(itkBSplineUpsampleImageFilterIUL2IUL2 const & arg0);
   protected:
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
     itkBSplineUpsampleImageFilterIUL2IUL2();
     ~itkBSplineUpsampleImageFilterIUL2IUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineUpsampleImageFilterIUL2IUL2_Pointer {
   public:
     itkBSplineUpsampleImageFilterIUL2IUL2_Pointer();
     itkBSplineUpsampleImageFilterIUL2IUL2_Pointer(itkBSplineUpsampleImageFilterIUL2IUL2_Pointer const & p);
     itkBSplineUpsampleImageFilterIUL2IUL2_Pointer(itkBSplineUpsampleImageFilterIUL2IUL2 * p);
     ~itkBSplineUpsampleImageFilterIUL2IUL2_Pointer();
     itkBSplineUpsampleImageFilterIUL2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineUpsampleImageFilterIUL2IUL2 * GetPointer() const;
     bool operator<(itkBSplineUpsampleImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>(itkBSplineUpsampleImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator<=(itkBSplineUpsampleImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>=(itkBSplineUpsampleImageFilterIUL2IUL2_Pointer const & r) const;
     itkBSplineUpsampleImageFilterIUL2IUL2_Pointer & operator=(itkBSplineUpsampleImageFilterIUL2IUL2_Pointer const & r);
     itkBSplineUpsampleImageFilterIUL2IUL2_Pointer & operator=(itkBSplineUpsampleImageFilterIUL2IUL2 * r);
     itkBSplineUpsampleImageFilterIUL2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineUpsampleImageFilterIUL3IUL3 : public itkBSplineDownsampleImageFilterIUL3IUL3_Superclass {
   public:
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineUpsampleImageFilterIUL3IUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
   private:
     itkBSplineUpsampleImageFilterIUL3IUL3(itkBSplineUpsampleImageFilterIUL3IUL3 const & arg0);
     void operator=(itkBSplineUpsampleImageFilterIUL3IUL3 const & arg0);
   protected:
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
     itkBSplineUpsampleImageFilterIUL3IUL3();
     ~itkBSplineUpsampleImageFilterIUL3IUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineUpsampleImageFilterIUL3IUL3_Pointer {
   public:
     itkBSplineUpsampleImageFilterIUL3IUL3_Pointer();
     itkBSplineUpsampleImageFilterIUL3IUL3_Pointer(itkBSplineUpsampleImageFilterIUL3IUL3_Pointer const & p);
     itkBSplineUpsampleImageFilterIUL3IUL3_Pointer(itkBSplineUpsampleImageFilterIUL3IUL3 * p);
     ~itkBSplineUpsampleImageFilterIUL3IUL3_Pointer();
     itkBSplineUpsampleImageFilterIUL3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineUpsampleImageFilterIUL3IUL3 * GetPointer() const;
     bool operator<(itkBSplineUpsampleImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>(itkBSplineUpsampleImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator<=(itkBSplineUpsampleImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>=(itkBSplineUpsampleImageFilterIUL3IUL3_Pointer const & r) const;
     itkBSplineUpsampleImageFilterIUL3IUL3_Pointer & operator=(itkBSplineUpsampleImageFilterIUL3IUL3_Pointer const & r);
     itkBSplineUpsampleImageFilterIUL3IUL3_Pointer & operator=(itkBSplineUpsampleImageFilterIUL3IUL3 * r);
     itkBSplineUpsampleImageFilterIUL3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineUpsampleImageFilterIUS2IUS2 : public itkBSplineDownsampleImageFilterIUS2IUS2_Superclass {
   public:
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineUpsampleImageFilterIUS2IUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
   private:
     itkBSplineUpsampleImageFilterIUS2IUS2(itkBSplineUpsampleImageFilterIUS2IUS2 const & arg0);
     void operator=(itkBSplineUpsampleImageFilterIUS2IUS2 const & arg0);
   protected:
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
     itkBSplineUpsampleImageFilterIUS2IUS2();
     ~itkBSplineUpsampleImageFilterIUS2IUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineUpsampleImageFilterIUS2IUS2_Pointer {
   public:
     itkBSplineUpsampleImageFilterIUS2IUS2_Pointer();
     itkBSplineUpsampleImageFilterIUS2IUS2_Pointer(itkBSplineUpsampleImageFilterIUS2IUS2_Pointer const & p);
     itkBSplineUpsampleImageFilterIUS2IUS2_Pointer(itkBSplineUpsampleImageFilterIUS2IUS2 * p);
     ~itkBSplineUpsampleImageFilterIUS2IUS2_Pointer();
     itkBSplineUpsampleImageFilterIUS2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineUpsampleImageFilterIUS2IUS2 * GetPointer() const;
     bool operator<(itkBSplineUpsampleImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>(itkBSplineUpsampleImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator<=(itkBSplineUpsampleImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>=(itkBSplineUpsampleImageFilterIUS2IUS2_Pointer const & r) const;
     itkBSplineUpsampleImageFilterIUS2IUS2_Pointer & operator=(itkBSplineUpsampleImageFilterIUS2IUS2_Pointer const & r);
     itkBSplineUpsampleImageFilterIUS2IUS2_Pointer & operator=(itkBSplineUpsampleImageFilterIUS2IUS2 * r);
     itkBSplineUpsampleImageFilterIUS2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBSplineUpsampleImageFilterIUS3IUS3 : public itkBSplineDownsampleImageFilterIUS3IUS3_Superclass {
   public:
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkBSplineUpsampleImageFilterIUS3IUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void GenerateOutputInformation();
     virtual void GenerateInputRequestedRegion();
   private:
     itkBSplineUpsampleImageFilterIUS3IUS3(itkBSplineUpsampleImageFilterIUS3IUS3 const & arg0);
     void operator=(itkBSplineUpsampleImageFilterIUS3IUS3 const & arg0);
   protected:
     virtual void GenerateData();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
     itkBSplineUpsampleImageFilterIUS3IUS3();
     ~itkBSplineUpsampleImageFilterIUS3IUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkBSplineUpsampleImageFilterIUS3IUS3_Pointer {
   public:
     itkBSplineUpsampleImageFilterIUS3IUS3_Pointer();
     itkBSplineUpsampleImageFilterIUS3IUS3_Pointer(itkBSplineUpsampleImageFilterIUS3IUS3_Pointer const & p);
     itkBSplineUpsampleImageFilterIUS3IUS3_Pointer(itkBSplineUpsampleImageFilterIUS3IUS3 * p);
     ~itkBSplineUpsampleImageFilterIUS3IUS3_Pointer();
     itkBSplineUpsampleImageFilterIUS3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBSplineUpsampleImageFilterIUS3IUS3 * GetPointer() const;
     bool operator<(itkBSplineUpsampleImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>(itkBSplineUpsampleImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator<=(itkBSplineUpsampleImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>=(itkBSplineUpsampleImageFilterIUS3IUS3_Pointer const & r) const;
     itkBSplineUpsampleImageFilterIUS3IUS3_Pointer & operator=(itkBSplineUpsampleImageFilterIUS3IUS3_Pointer const & r);
     itkBSplineUpsampleImageFilterIUS3IUS3_Pointer & operator=(itkBSplineUpsampleImageFilterIUS3IUS3 * r);
     itkBSplineUpsampleImageFilterIUS3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


