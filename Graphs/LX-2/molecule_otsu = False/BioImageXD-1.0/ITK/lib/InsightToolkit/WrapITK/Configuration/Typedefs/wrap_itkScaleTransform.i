// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkScaleTransformChicken
#endif
#ifdef SWIGCSHARP
%module itkScaleTransformCsharp
#endif
#ifdef SWIGGUILE
%module itkScaleTransformGuile
#endif
#ifdef SWIGJAVA
%module itkScaleTransformJava
#endif
#ifdef SWIGLUA
%module itkScaleTransformLua
#endif
#ifdef SWIGMODULA3
%module itkScaleTransformModula3
#endif
#ifdef SWIGMZSCHEME
%module itkScaleTransformMzscheme
#endif
#ifdef SWIGOCAML
%module itkScaleTransformOcaml
#endif
#ifdef SWIGPERL
%module itkScaleTransformPerl
#endif
#ifdef SWIGPERL5
%module itkScaleTransformPerl5
#endif
#ifdef SWIGPHP
%module itkScaleTransformPhp
#endif
#ifdef SWIGPHP4
%module itkScaleTransformPhp4
#endif
#ifdef SWIGPHP5
%module itkScaleTransformPhp5
#endif
#ifdef SWIGPIKE
%module itkScaleTransformPike
#endif
#ifdef SWIGPYTHON
%module itkScaleTransformPython
#endif
#ifdef SWIGR
%module itkScaleTransformR
#endif
#ifdef SWIGRUBY
%module itkScaleTransformRuby
#endif
#ifdef SWIGSEXP
%module itkScaleTransformSexp
#endif
#ifdef SWIGTCL
%module itkScaleTransformTcl
#endif
#ifdef SWIGXML
%module itkScaleTransformXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
%}


%{
%}




%import wrap_itkFixedArray.i
%import wrap_itkPoint.i
%import wrap_itkTransform.i
%import wrap_itkArray2D.i
%import wrap_itkCovariantVector.i
%import wrap_itkVector.i
%import wrap_itkArray.i
%import wrap_ITKCommonBase.i


%include itk.i
%include wrap_itkScaleTransform_ext.i


 class itkScaleTransformD2 : public itkTransformD22 {
   public:
     enum  {  SpaceDimension = 2 };
     enum  {  ParametersDimension = 2 };
     static itkScaleTransformD2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetParameters(itkArrayD const & parameters);
     virtual itkArrayD const & GetParameters() const;
     virtual itkArray2DD const & GetJacobian(itkPointD2 const & point) const;
     void SetScale(itkFixedArrayD2 const & scale);
     void Compose(itkScaleTransformD2 const * other, bool pre = false);
     void Scale(itkFixedArrayD2 const & scale, bool pre = false);
     virtual itkPointD2 TransformPoint(itkPointD2 const & point) const;
     virtual itkVectorD2 TransformVector(itkVectorD2 const & vector) const;
     virtual vnl_vector_fixed< double, 2u > TransformVector(vnl_vector_fixed< double, 2u > const & vector) const;
     virtual itkCovariantVectorD2 TransformCovariantVector(itkCovariantVectorD2 const & vector) const;
     itkPointD2 BackTransform(itkPointD2 const & point) const;
     itkVectorD2 BackTransform(itkVectorD2 const & vect) const;
     vnl_vector_fixed< double, 2u > BackTransform(vnl_vector_fixed< double, 2u > const & vect) const;
     itkCovariantVectorD2 BackTransform(itkCovariantVectorD2 const & vect) const;
     bool GetInverse(itkScaleTransformD2 * inverse) const;
     virtual itkTransformBase_Pointer GetInverseTransform() const;
     void SetIdentity();
     virtual void SetCenter(itkPointD2 const _arg);
     virtual itkPointD2 const & GetCenter() const;
     virtual itkFixedArrayD2 const & GetScale() const;
     virtual bool IsLinear() const;
   private:
     itkScaleTransformD2(itkScaleTransformD2 const & other);
     itkScaleTransformD2 const & operator=(itkScaleTransformD2 const & arg0);
   protected:
     itkScaleTransformD2();
     ~itkScaleTransformD2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkScaleTransformD2_Pointer {
   public:
     itkScaleTransformD2_Pointer();
     itkScaleTransformD2_Pointer(itkScaleTransformD2_Pointer const & p);
     itkScaleTransformD2_Pointer(itkScaleTransformD2 * p);
     ~itkScaleTransformD2_Pointer();
     itkScaleTransformD2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkScaleTransformD2 * GetPointer() const;
     bool operator<(itkScaleTransformD2_Pointer const & r) const;
     bool operator>(itkScaleTransformD2_Pointer const & r) const;
     bool operator<=(itkScaleTransformD2_Pointer const & r) const;
     bool operator>=(itkScaleTransformD2_Pointer const & r) const;
     itkScaleTransformD2_Pointer & operator=(itkScaleTransformD2_Pointer const & r);
     itkScaleTransformD2_Pointer & operator=(itkScaleTransformD2 * r);
     itkScaleTransformD2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkScaleTransformD3 : public itkTransformD33 {
   public:
     enum  {  SpaceDimension = 3 };
     enum  {  ParametersDimension = 3 };
     static itkScaleTransformD3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetParameters(itkArrayD const & parameters);
     virtual itkArrayD const & GetParameters() const;
     virtual itkArray2DD const & GetJacobian(itkPointD3 const & point) const;
     void SetScale(itkFixedArrayD3 const & scale);
     void Compose(itkScaleTransformD3 const * other, bool pre = false);
     void Scale(itkFixedArrayD3 const & scale, bool pre = false);
     virtual itkPointD3 TransformPoint(itkPointD3 const & point) const;
     virtual itkVectorD3 TransformVector(itkVectorD3 const & vector) const;
     virtual vnl_vector_fixed< double, 3u > TransformVector(vnl_vector_fixed< double, 3u > const & vector) const;
     virtual itkCovariantVectorD3 TransformCovariantVector(itkCovariantVectorD3 const & vector) const;
     itkPointD3 BackTransform(itkPointD3 const & point) const;
     itkVectorD3 BackTransform(itkVectorD3 const & vect) const;
     vnl_vector_fixed< double, 3u > BackTransform(vnl_vector_fixed< double, 3u > const & vect) const;
     itkCovariantVectorD3 BackTransform(itkCovariantVectorD3 const & vect) const;
     bool GetInverse(itkScaleTransformD3 * inverse) const;
     virtual itkTransformBase_Pointer GetInverseTransform() const;
     void SetIdentity();
     virtual void SetCenter(itkPointD3 const _arg);
     virtual itkPointD3 const & GetCenter() const;
     virtual itkFixedArrayD3 const & GetScale() const;
     virtual bool IsLinear() const;
   private:
     itkScaleTransformD3(itkScaleTransformD3 const & other);
     itkScaleTransformD3 const & operator=(itkScaleTransformD3 const & arg0);
   protected:
     itkScaleTransformD3();
     ~itkScaleTransformD3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkScaleTransformD3_Pointer {
   public:
     itkScaleTransformD3_Pointer();
     itkScaleTransformD3_Pointer(itkScaleTransformD3_Pointer const & p);
     itkScaleTransformD3_Pointer(itkScaleTransformD3 * p);
     ~itkScaleTransformD3_Pointer();
     itkScaleTransformD3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkScaleTransformD3 * GetPointer() const;
     bool operator<(itkScaleTransformD3_Pointer const & r) const;
     bool operator>(itkScaleTransformD3_Pointer const & r) const;
     bool operator<=(itkScaleTransformD3_Pointer const & r) const;
     bool operator>=(itkScaleTransformD3_Pointer const & r) const;
     itkScaleTransformD3_Pointer & operator=(itkScaleTransformD3_Pointer const & r);
     itkScaleTransformD3_Pointer & operator=(itkScaleTransformD3 * r);
     itkScaleTransformD3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


