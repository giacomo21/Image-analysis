// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkOtsuThresholdImageCalculatorChicken
#endif
#ifdef SWIGCSHARP
%module itkOtsuThresholdImageCalculatorCsharp
#endif
#ifdef SWIGGUILE
%module itkOtsuThresholdImageCalculatorGuile
#endif
#ifdef SWIGJAVA
%module itkOtsuThresholdImageCalculatorJava
#endif
#ifdef SWIGLUA
%module itkOtsuThresholdImageCalculatorLua
#endif
#ifdef SWIGMODULA3
%module itkOtsuThresholdImageCalculatorModula3
#endif
#ifdef SWIGMZSCHEME
%module itkOtsuThresholdImageCalculatorMzscheme
#endif
#ifdef SWIGOCAML
%module itkOtsuThresholdImageCalculatorOcaml
#endif
#ifdef SWIGPERL
%module itkOtsuThresholdImageCalculatorPerl
#endif
#ifdef SWIGPERL5
%module itkOtsuThresholdImageCalculatorPerl5
#endif
#ifdef SWIGPHP
%module itkOtsuThresholdImageCalculatorPhp
#endif
#ifdef SWIGPHP4
%module itkOtsuThresholdImageCalculatorPhp4
#endif
#ifdef SWIGPHP5
%module itkOtsuThresholdImageCalculatorPhp5
#endif
#ifdef SWIGPIKE
%module itkOtsuThresholdImageCalculatorPike
#endif
#ifdef SWIGPYTHON
%module itkOtsuThresholdImageCalculatorPython
#endif
#ifdef SWIGR
%module itkOtsuThresholdImageCalculatorR
#endif
#ifdef SWIGRUBY
%module itkOtsuThresholdImageCalculatorRuby
#endif
#ifdef SWIGSEXP
%module itkOtsuThresholdImageCalculatorSexp
#endif
#ifdef SWIGTCL
%module itkOtsuThresholdImageCalculatorTcl
#endif
#ifdef SWIGXML
%module itkOtsuThresholdImageCalculatorXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "SegmentationAndThreshold.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkImage.i
%import wrap_ITKRegions.i


%include itk.i
%include wrap_itkOtsuThresholdImageCalculator_ext.i


 class itkOtsuThresholdImageCalculatorID2 : public itkObject {
   public:
     static itkOtsuThresholdImageCalculatorID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetImage(itkImageD2 const * _arg);
     void Compute();
     virtual double GetThreshold() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     void SetRegion(itkImageRegion2 const & region);
   private:
     itkOtsuThresholdImageCalculatorID2(itkOtsuThresholdImageCalculatorID2 const & arg0);
     void operator=(itkOtsuThresholdImageCalculatorID2 const & arg0);
   protected:
     itkOtsuThresholdImageCalculatorID2();
     ~itkOtsuThresholdImageCalculatorID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkOtsuThresholdImageCalculatorID2_Pointer {
   public:
     itkOtsuThresholdImageCalculatorID2_Pointer();
     itkOtsuThresholdImageCalculatorID2_Pointer(itkOtsuThresholdImageCalculatorID2_Pointer const & p);
     itkOtsuThresholdImageCalculatorID2_Pointer(itkOtsuThresholdImageCalculatorID2 * p);
     ~itkOtsuThresholdImageCalculatorID2_Pointer();
     itkOtsuThresholdImageCalculatorID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuThresholdImageCalculatorID2 * GetPointer() const;
     bool operator<(itkOtsuThresholdImageCalculatorID2_Pointer const & r) const;
     bool operator>(itkOtsuThresholdImageCalculatorID2_Pointer const & r) const;
     bool operator<=(itkOtsuThresholdImageCalculatorID2_Pointer const & r) const;
     bool operator>=(itkOtsuThresholdImageCalculatorID2_Pointer const & r) const;
     itkOtsuThresholdImageCalculatorID2_Pointer & operator=(itkOtsuThresholdImageCalculatorID2_Pointer const & r);
     itkOtsuThresholdImageCalculatorID2_Pointer & operator=(itkOtsuThresholdImageCalculatorID2 * r);
     itkOtsuThresholdImageCalculatorID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuThresholdImageCalculatorID3 : public itkObject {
   public:
     static itkOtsuThresholdImageCalculatorID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetImage(itkImageD3 const * _arg);
     void Compute();
     virtual double GetThreshold() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     void SetRegion(itkImageRegion3 const & region);
   private:
     itkOtsuThresholdImageCalculatorID3(itkOtsuThresholdImageCalculatorID3 const & arg0);
     void operator=(itkOtsuThresholdImageCalculatorID3 const & arg0);
   protected:
     itkOtsuThresholdImageCalculatorID3();
     ~itkOtsuThresholdImageCalculatorID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkOtsuThresholdImageCalculatorID3_Pointer {
   public:
     itkOtsuThresholdImageCalculatorID3_Pointer();
     itkOtsuThresholdImageCalculatorID3_Pointer(itkOtsuThresholdImageCalculatorID3_Pointer const & p);
     itkOtsuThresholdImageCalculatorID3_Pointer(itkOtsuThresholdImageCalculatorID3 * p);
     ~itkOtsuThresholdImageCalculatorID3_Pointer();
     itkOtsuThresholdImageCalculatorID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuThresholdImageCalculatorID3 * GetPointer() const;
     bool operator<(itkOtsuThresholdImageCalculatorID3_Pointer const & r) const;
     bool operator>(itkOtsuThresholdImageCalculatorID3_Pointer const & r) const;
     bool operator<=(itkOtsuThresholdImageCalculatorID3_Pointer const & r) const;
     bool operator>=(itkOtsuThresholdImageCalculatorID3_Pointer const & r) const;
     itkOtsuThresholdImageCalculatorID3_Pointer & operator=(itkOtsuThresholdImageCalculatorID3_Pointer const & r);
     itkOtsuThresholdImageCalculatorID3_Pointer & operator=(itkOtsuThresholdImageCalculatorID3 * r);
     itkOtsuThresholdImageCalculatorID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuThresholdImageCalculatorIF2 : public itkObject {
   public:
     static itkOtsuThresholdImageCalculatorIF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetImage(itkImageF2 const * _arg);
     void Compute();
     virtual float GetThreshold() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     void SetRegion(itkImageRegion2 const & region);
   private:
     itkOtsuThresholdImageCalculatorIF2(itkOtsuThresholdImageCalculatorIF2 const & arg0);
     void operator=(itkOtsuThresholdImageCalculatorIF2 const & arg0);
   protected:
     itkOtsuThresholdImageCalculatorIF2();
     ~itkOtsuThresholdImageCalculatorIF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkOtsuThresholdImageCalculatorIF2_Pointer {
   public:
     itkOtsuThresholdImageCalculatorIF2_Pointer();
     itkOtsuThresholdImageCalculatorIF2_Pointer(itkOtsuThresholdImageCalculatorIF2_Pointer const & p);
     itkOtsuThresholdImageCalculatorIF2_Pointer(itkOtsuThresholdImageCalculatorIF2 * p);
     ~itkOtsuThresholdImageCalculatorIF2_Pointer();
     itkOtsuThresholdImageCalculatorIF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuThresholdImageCalculatorIF2 * GetPointer() const;
     bool operator<(itkOtsuThresholdImageCalculatorIF2_Pointer const & r) const;
     bool operator>(itkOtsuThresholdImageCalculatorIF2_Pointer const & r) const;
     bool operator<=(itkOtsuThresholdImageCalculatorIF2_Pointer const & r) const;
     bool operator>=(itkOtsuThresholdImageCalculatorIF2_Pointer const & r) const;
     itkOtsuThresholdImageCalculatorIF2_Pointer & operator=(itkOtsuThresholdImageCalculatorIF2_Pointer const & r);
     itkOtsuThresholdImageCalculatorIF2_Pointer & operator=(itkOtsuThresholdImageCalculatorIF2 * r);
     itkOtsuThresholdImageCalculatorIF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuThresholdImageCalculatorIF3 : public itkObject {
   public:
     static itkOtsuThresholdImageCalculatorIF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetImage(itkImageF3 const * _arg);
     void Compute();
     virtual float GetThreshold() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     void SetRegion(itkImageRegion3 const & region);
   private:
     itkOtsuThresholdImageCalculatorIF3(itkOtsuThresholdImageCalculatorIF3 const & arg0);
     void operator=(itkOtsuThresholdImageCalculatorIF3 const & arg0);
   protected:
     itkOtsuThresholdImageCalculatorIF3();
     ~itkOtsuThresholdImageCalculatorIF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkOtsuThresholdImageCalculatorIF3_Pointer {
   public:
     itkOtsuThresholdImageCalculatorIF3_Pointer();
     itkOtsuThresholdImageCalculatorIF3_Pointer(itkOtsuThresholdImageCalculatorIF3_Pointer const & p);
     itkOtsuThresholdImageCalculatorIF3_Pointer(itkOtsuThresholdImageCalculatorIF3 * p);
     ~itkOtsuThresholdImageCalculatorIF3_Pointer();
     itkOtsuThresholdImageCalculatorIF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuThresholdImageCalculatorIF3 * GetPointer() const;
     bool operator<(itkOtsuThresholdImageCalculatorIF3_Pointer const & r) const;
     bool operator>(itkOtsuThresholdImageCalculatorIF3_Pointer const & r) const;
     bool operator<=(itkOtsuThresholdImageCalculatorIF3_Pointer const & r) const;
     bool operator>=(itkOtsuThresholdImageCalculatorIF3_Pointer const & r) const;
     itkOtsuThresholdImageCalculatorIF3_Pointer & operator=(itkOtsuThresholdImageCalculatorIF3_Pointer const & r);
     itkOtsuThresholdImageCalculatorIF3_Pointer & operator=(itkOtsuThresholdImageCalculatorIF3 * r);
     itkOtsuThresholdImageCalculatorIF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuThresholdImageCalculatorIUC2 : public itkObject {
   public:
     static itkOtsuThresholdImageCalculatorIUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetImage(itkImageUC2 const * _arg);
     void Compute();
     virtual unsigned char GetThreshold() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     void SetRegion(itkImageRegion2 const & region);
   private:
     itkOtsuThresholdImageCalculatorIUC2(itkOtsuThresholdImageCalculatorIUC2 const & arg0);
     void operator=(itkOtsuThresholdImageCalculatorIUC2 const & arg0);
   protected:
     itkOtsuThresholdImageCalculatorIUC2();
     ~itkOtsuThresholdImageCalculatorIUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkOtsuThresholdImageCalculatorIUC2_Pointer {
   public:
     itkOtsuThresholdImageCalculatorIUC2_Pointer();
     itkOtsuThresholdImageCalculatorIUC2_Pointer(itkOtsuThresholdImageCalculatorIUC2_Pointer const & p);
     itkOtsuThresholdImageCalculatorIUC2_Pointer(itkOtsuThresholdImageCalculatorIUC2 * p);
     ~itkOtsuThresholdImageCalculatorIUC2_Pointer();
     itkOtsuThresholdImageCalculatorIUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuThresholdImageCalculatorIUC2 * GetPointer() const;
     bool operator<(itkOtsuThresholdImageCalculatorIUC2_Pointer const & r) const;
     bool operator>(itkOtsuThresholdImageCalculatorIUC2_Pointer const & r) const;
     bool operator<=(itkOtsuThresholdImageCalculatorIUC2_Pointer const & r) const;
     bool operator>=(itkOtsuThresholdImageCalculatorIUC2_Pointer const & r) const;
     itkOtsuThresholdImageCalculatorIUC2_Pointer & operator=(itkOtsuThresholdImageCalculatorIUC2_Pointer const & r);
     itkOtsuThresholdImageCalculatorIUC2_Pointer & operator=(itkOtsuThresholdImageCalculatorIUC2 * r);
     itkOtsuThresholdImageCalculatorIUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuThresholdImageCalculatorIUC3 : public itkObject {
   public:
     static itkOtsuThresholdImageCalculatorIUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetImage(itkImageUC3 const * _arg);
     void Compute();
     virtual unsigned char GetThreshold() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     void SetRegion(itkImageRegion3 const & region);
   private:
     itkOtsuThresholdImageCalculatorIUC3(itkOtsuThresholdImageCalculatorIUC3 const & arg0);
     void operator=(itkOtsuThresholdImageCalculatorIUC3 const & arg0);
   protected:
     itkOtsuThresholdImageCalculatorIUC3();
     ~itkOtsuThresholdImageCalculatorIUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkOtsuThresholdImageCalculatorIUC3_Pointer {
   public:
     itkOtsuThresholdImageCalculatorIUC3_Pointer();
     itkOtsuThresholdImageCalculatorIUC3_Pointer(itkOtsuThresholdImageCalculatorIUC3_Pointer const & p);
     itkOtsuThresholdImageCalculatorIUC3_Pointer(itkOtsuThresholdImageCalculatorIUC3 * p);
     ~itkOtsuThresholdImageCalculatorIUC3_Pointer();
     itkOtsuThresholdImageCalculatorIUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuThresholdImageCalculatorIUC3 * GetPointer() const;
     bool operator<(itkOtsuThresholdImageCalculatorIUC3_Pointer const & r) const;
     bool operator>(itkOtsuThresholdImageCalculatorIUC3_Pointer const & r) const;
     bool operator<=(itkOtsuThresholdImageCalculatorIUC3_Pointer const & r) const;
     bool operator>=(itkOtsuThresholdImageCalculatorIUC3_Pointer const & r) const;
     itkOtsuThresholdImageCalculatorIUC3_Pointer & operator=(itkOtsuThresholdImageCalculatorIUC3_Pointer const & r);
     itkOtsuThresholdImageCalculatorIUC3_Pointer & operator=(itkOtsuThresholdImageCalculatorIUC3 * r);
     itkOtsuThresholdImageCalculatorIUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuThresholdImageCalculatorIUL2 : public itkObject {
   public:
     static itkOtsuThresholdImageCalculatorIUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetImage(itkImageUL2 const * _arg);
     void Compute();
     virtual unsigned long GetThreshold() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     void SetRegion(itkImageRegion2 const & region);
   private:
     itkOtsuThresholdImageCalculatorIUL2(itkOtsuThresholdImageCalculatorIUL2 const & arg0);
     void operator=(itkOtsuThresholdImageCalculatorIUL2 const & arg0);
   protected:
     itkOtsuThresholdImageCalculatorIUL2();
     ~itkOtsuThresholdImageCalculatorIUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkOtsuThresholdImageCalculatorIUL2_Pointer {
   public:
     itkOtsuThresholdImageCalculatorIUL2_Pointer();
     itkOtsuThresholdImageCalculatorIUL2_Pointer(itkOtsuThresholdImageCalculatorIUL2_Pointer const & p);
     itkOtsuThresholdImageCalculatorIUL2_Pointer(itkOtsuThresholdImageCalculatorIUL2 * p);
     ~itkOtsuThresholdImageCalculatorIUL2_Pointer();
     itkOtsuThresholdImageCalculatorIUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuThresholdImageCalculatorIUL2 * GetPointer() const;
     bool operator<(itkOtsuThresholdImageCalculatorIUL2_Pointer const & r) const;
     bool operator>(itkOtsuThresholdImageCalculatorIUL2_Pointer const & r) const;
     bool operator<=(itkOtsuThresholdImageCalculatorIUL2_Pointer const & r) const;
     bool operator>=(itkOtsuThresholdImageCalculatorIUL2_Pointer const & r) const;
     itkOtsuThresholdImageCalculatorIUL2_Pointer & operator=(itkOtsuThresholdImageCalculatorIUL2_Pointer const & r);
     itkOtsuThresholdImageCalculatorIUL2_Pointer & operator=(itkOtsuThresholdImageCalculatorIUL2 * r);
     itkOtsuThresholdImageCalculatorIUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuThresholdImageCalculatorIUL3 : public itkObject {
   public:
     static itkOtsuThresholdImageCalculatorIUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetImage(itkImageUL3 const * _arg);
     void Compute();
     virtual unsigned long GetThreshold() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     void SetRegion(itkImageRegion3 const & region);
   private:
     itkOtsuThresholdImageCalculatorIUL3(itkOtsuThresholdImageCalculatorIUL3 const & arg0);
     void operator=(itkOtsuThresholdImageCalculatorIUL3 const & arg0);
   protected:
     itkOtsuThresholdImageCalculatorIUL3();
     ~itkOtsuThresholdImageCalculatorIUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkOtsuThresholdImageCalculatorIUL3_Pointer {
   public:
     itkOtsuThresholdImageCalculatorIUL3_Pointer();
     itkOtsuThresholdImageCalculatorIUL3_Pointer(itkOtsuThresholdImageCalculatorIUL3_Pointer const & p);
     itkOtsuThresholdImageCalculatorIUL3_Pointer(itkOtsuThresholdImageCalculatorIUL3 * p);
     ~itkOtsuThresholdImageCalculatorIUL3_Pointer();
     itkOtsuThresholdImageCalculatorIUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuThresholdImageCalculatorIUL3 * GetPointer() const;
     bool operator<(itkOtsuThresholdImageCalculatorIUL3_Pointer const & r) const;
     bool operator>(itkOtsuThresholdImageCalculatorIUL3_Pointer const & r) const;
     bool operator<=(itkOtsuThresholdImageCalculatorIUL3_Pointer const & r) const;
     bool operator>=(itkOtsuThresholdImageCalculatorIUL3_Pointer const & r) const;
     itkOtsuThresholdImageCalculatorIUL3_Pointer & operator=(itkOtsuThresholdImageCalculatorIUL3_Pointer const & r);
     itkOtsuThresholdImageCalculatorIUL3_Pointer & operator=(itkOtsuThresholdImageCalculatorIUL3 * r);
     itkOtsuThresholdImageCalculatorIUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuThresholdImageCalculatorIUS2 : public itkObject {
   public:
     static itkOtsuThresholdImageCalculatorIUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetImage(itkImageUS2 const * _arg);
     void Compute();
     virtual unsigned short GetThreshold() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     void SetRegion(itkImageRegion2 const & region);
   private:
     itkOtsuThresholdImageCalculatorIUS2(itkOtsuThresholdImageCalculatorIUS2 const & arg0);
     void operator=(itkOtsuThresholdImageCalculatorIUS2 const & arg0);
   protected:
     itkOtsuThresholdImageCalculatorIUS2();
     ~itkOtsuThresholdImageCalculatorIUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkOtsuThresholdImageCalculatorIUS2_Pointer {
   public:
     itkOtsuThresholdImageCalculatorIUS2_Pointer();
     itkOtsuThresholdImageCalculatorIUS2_Pointer(itkOtsuThresholdImageCalculatorIUS2_Pointer const & p);
     itkOtsuThresholdImageCalculatorIUS2_Pointer(itkOtsuThresholdImageCalculatorIUS2 * p);
     ~itkOtsuThresholdImageCalculatorIUS2_Pointer();
     itkOtsuThresholdImageCalculatorIUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuThresholdImageCalculatorIUS2 * GetPointer() const;
     bool operator<(itkOtsuThresholdImageCalculatorIUS2_Pointer const & r) const;
     bool operator>(itkOtsuThresholdImageCalculatorIUS2_Pointer const & r) const;
     bool operator<=(itkOtsuThresholdImageCalculatorIUS2_Pointer const & r) const;
     bool operator>=(itkOtsuThresholdImageCalculatorIUS2_Pointer const & r) const;
     itkOtsuThresholdImageCalculatorIUS2_Pointer & operator=(itkOtsuThresholdImageCalculatorIUS2_Pointer const & r);
     itkOtsuThresholdImageCalculatorIUS2_Pointer & operator=(itkOtsuThresholdImageCalculatorIUS2 * r);
     itkOtsuThresholdImageCalculatorIUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkOtsuThresholdImageCalculatorIUS3 : public itkObject {
   public:
     static itkOtsuThresholdImageCalculatorIUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetImage(itkImageUS3 const * _arg);
     void Compute();
     virtual unsigned short GetThreshold() const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long GetNumberOfHistogramBins() const;
     void SetRegion(itkImageRegion3 const & region);
   private:
     itkOtsuThresholdImageCalculatorIUS3(itkOtsuThresholdImageCalculatorIUS3 const & arg0);
     void operator=(itkOtsuThresholdImageCalculatorIUS3 const & arg0);
   protected:
     itkOtsuThresholdImageCalculatorIUS3();
     ~itkOtsuThresholdImageCalculatorIUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkOtsuThresholdImageCalculatorIUS3_Pointer {
   public:
     itkOtsuThresholdImageCalculatorIUS3_Pointer();
     itkOtsuThresholdImageCalculatorIUS3_Pointer(itkOtsuThresholdImageCalculatorIUS3_Pointer const & p);
     itkOtsuThresholdImageCalculatorIUS3_Pointer(itkOtsuThresholdImageCalculatorIUS3 * p);
     ~itkOtsuThresholdImageCalculatorIUS3_Pointer();
     itkOtsuThresholdImageCalculatorIUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkOtsuThresholdImageCalculatorIUS3 * GetPointer() const;
     bool operator<(itkOtsuThresholdImageCalculatorIUS3_Pointer const & r) const;
     bool operator>(itkOtsuThresholdImageCalculatorIUS3_Pointer const & r) const;
     bool operator<=(itkOtsuThresholdImageCalculatorIUS3_Pointer const & r) const;
     bool operator>=(itkOtsuThresholdImageCalculatorIUS3_Pointer const & r) const;
     itkOtsuThresholdImageCalculatorIUS3_Pointer & operator=(itkOtsuThresholdImageCalculatorIUS3_Pointer const & r);
     itkOtsuThresholdImageCalculatorIUS3_Pointer & operator=(itkOtsuThresholdImageCalculatorIUS3 * r);
     itkOtsuThresholdImageCalculatorIUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


