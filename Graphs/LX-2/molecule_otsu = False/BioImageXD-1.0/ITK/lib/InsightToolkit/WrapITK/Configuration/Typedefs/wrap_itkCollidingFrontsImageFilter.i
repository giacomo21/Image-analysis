// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkCollidingFrontsImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkCollidingFrontsImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkCollidingFrontsImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkCollidingFrontsImageFilterJava
#endif
#ifdef SWIGLUA
%module itkCollidingFrontsImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkCollidingFrontsImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkCollidingFrontsImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkCollidingFrontsImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkCollidingFrontsImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkCollidingFrontsImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkCollidingFrontsImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkCollidingFrontsImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkCollidingFrontsImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkCollidingFrontsImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkCollidingFrontsImageFilterPython
#endif
#ifdef SWIGR
%module itkCollidingFrontsImageFilterR
#endif
#ifdef SWIGRUBY
%module itkCollidingFrontsImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkCollidingFrontsImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkCollidingFrontsImageFilterTcl
#endif
#ifdef SWIGXML
%module itkCollidingFrontsImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Numerics.includes"
#include "LevelSet.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkVectorContainer.i
%import wrap_itkImageToImageFilterA.i


%include itk.i
%include wrap_itkCollidingFrontsImageFilter_ext.i


 class itkCollidingFrontsImageFilterID2ID2 : public itkImageToImageFilterID2ID2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     static itkCollidingFrontsImageFilterID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSeedPoints1(itkVectorContainerUILSND2 * points);
     itkVectorContainerUILSND2_Pointer GetSeedPoints1();
     void SetSeedPoints2(itkVectorContainerUILSND2 * points);
     itkVectorContainerUILSND2_Pointer GetSeedPoints2();
     virtual void SetNegativeEpsilon(double const _arg);
     virtual double GetNegativeEpsilon() const;
     virtual void SetApplyConnectivity(bool const _arg);
     virtual bool GetApplyConnectivity() const;
     virtual void ApplyConnectivityOn();
     virtual void ApplyConnectivityOff();
     virtual void SetStopOnTargets(bool const _arg);
     virtual bool GetStopOnTargets() const;
     virtual void StopOnTargetsOn();
     virtual void StopOnTargetsOff();
   private:
     itkCollidingFrontsImageFilterID2ID2(itkCollidingFrontsImageFilterID2ID2 const & arg0);
     void operator=(itkCollidingFrontsImageFilterID2ID2 const & arg0);
   protected:
     itkCollidingFrontsImageFilterID2ID2();
     ~itkCollidingFrontsImageFilterID2ID2();
     virtual void GenerateData();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
 };


 class itkCollidingFrontsImageFilterID2ID2_Pointer {
   public:
     itkCollidingFrontsImageFilterID2ID2_Pointer();
     itkCollidingFrontsImageFilterID2ID2_Pointer(itkCollidingFrontsImageFilterID2ID2_Pointer const & p);
     itkCollidingFrontsImageFilterID2ID2_Pointer(itkCollidingFrontsImageFilterID2ID2 * p);
     ~itkCollidingFrontsImageFilterID2ID2_Pointer();
     itkCollidingFrontsImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkCollidingFrontsImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkCollidingFrontsImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkCollidingFrontsImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkCollidingFrontsImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkCollidingFrontsImageFilterID2ID2_Pointer const & r) const;
     itkCollidingFrontsImageFilterID2ID2_Pointer & operator=(itkCollidingFrontsImageFilterID2ID2_Pointer const & r);
     itkCollidingFrontsImageFilterID2ID2_Pointer & operator=(itkCollidingFrontsImageFilterID2ID2 * r);
     itkCollidingFrontsImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkCollidingFrontsImageFilterID3ID3 : public itkImageToImageFilterID3ID3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     static itkCollidingFrontsImageFilterID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSeedPoints1(itkVectorContainerUILSND3 * points);
     itkVectorContainerUILSND3_Pointer GetSeedPoints1();
     void SetSeedPoints2(itkVectorContainerUILSND3 * points);
     itkVectorContainerUILSND3_Pointer GetSeedPoints2();
     virtual void SetNegativeEpsilon(double const _arg);
     virtual double GetNegativeEpsilon() const;
     virtual void SetApplyConnectivity(bool const _arg);
     virtual bool GetApplyConnectivity() const;
     virtual void ApplyConnectivityOn();
     virtual void ApplyConnectivityOff();
     virtual void SetStopOnTargets(bool const _arg);
     virtual bool GetStopOnTargets() const;
     virtual void StopOnTargetsOn();
     virtual void StopOnTargetsOff();
   private:
     itkCollidingFrontsImageFilterID3ID3(itkCollidingFrontsImageFilterID3ID3 const & arg0);
     void operator=(itkCollidingFrontsImageFilterID3ID3 const & arg0);
   protected:
     itkCollidingFrontsImageFilterID3ID3();
     ~itkCollidingFrontsImageFilterID3ID3();
     virtual void GenerateData();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
 };


 class itkCollidingFrontsImageFilterID3ID3_Pointer {
   public:
     itkCollidingFrontsImageFilterID3ID3_Pointer();
     itkCollidingFrontsImageFilterID3ID3_Pointer(itkCollidingFrontsImageFilterID3ID3_Pointer const & p);
     itkCollidingFrontsImageFilterID3ID3_Pointer(itkCollidingFrontsImageFilterID3ID3 * p);
     ~itkCollidingFrontsImageFilterID3ID3_Pointer();
     itkCollidingFrontsImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkCollidingFrontsImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkCollidingFrontsImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkCollidingFrontsImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkCollidingFrontsImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkCollidingFrontsImageFilterID3ID3_Pointer const & r) const;
     itkCollidingFrontsImageFilterID3ID3_Pointer & operator=(itkCollidingFrontsImageFilterID3ID3_Pointer const & r);
     itkCollidingFrontsImageFilterID3ID3_Pointer & operator=(itkCollidingFrontsImageFilterID3ID3 * r);
     itkCollidingFrontsImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkCollidingFrontsImageFilterIF2IF2 : public itkImageToImageFilterIF2IF2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     static itkCollidingFrontsImageFilterIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSeedPoints1(itkVectorContainerUILSNF2 * points);
     itkVectorContainerUILSNF2_Pointer GetSeedPoints1();
     void SetSeedPoints2(itkVectorContainerUILSNF2 * points);
     itkVectorContainerUILSNF2_Pointer GetSeedPoints2();
     virtual void SetNegativeEpsilon(double const _arg);
     virtual double GetNegativeEpsilon() const;
     virtual void SetApplyConnectivity(bool const _arg);
     virtual bool GetApplyConnectivity() const;
     virtual void ApplyConnectivityOn();
     virtual void ApplyConnectivityOff();
     virtual void SetStopOnTargets(bool const _arg);
     virtual bool GetStopOnTargets() const;
     virtual void StopOnTargetsOn();
     virtual void StopOnTargetsOff();
   private:
     itkCollidingFrontsImageFilterIF2IF2(itkCollidingFrontsImageFilterIF2IF2 const & arg0);
     void operator=(itkCollidingFrontsImageFilterIF2IF2 const & arg0);
   protected:
     itkCollidingFrontsImageFilterIF2IF2();
     ~itkCollidingFrontsImageFilterIF2IF2();
     virtual void GenerateData();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
 };


 class itkCollidingFrontsImageFilterIF2IF2_Pointer {
   public:
     itkCollidingFrontsImageFilterIF2IF2_Pointer();
     itkCollidingFrontsImageFilterIF2IF2_Pointer(itkCollidingFrontsImageFilterIF2IF2_Pointer const & p);
     itkCollidingFrontsImageFilterIF2IF2_Pointer(itkCollidingFrontsImageFilterIF2IF2 * p);
     ~itkCollidingFrontsImageFilterIF2IF2_Pointer();
     itkCollidingFrontsImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkCollidingFrontsImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkCollidingFrontsImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkCollidingFrontsImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkCollidingFrontsImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkCollidingFrontsImageFilterIF2IF2_Pointer const & r) const;
     itkCollidingFrontsImageFilterIF2IF2_Pointer & operator=(itkCollidingFrontsImageFilterIF2IF2_Pointer const & r);
     itkCollidingFrontsImageFilterIF2IF2_Pointer & operator=(itkCollidingFrontsImageFilterIF2IF2 * r);
     itkCollidingFrontsImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkCollidingFrontsImageFilterIF3IF3 : public itkImageToImageFilterIF3IF3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     static itkCollidingFrontsImageFilterIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetSeedPoints1(itkVectorContainerUILSNF3 * points);
     itkVectorContainerUILSNF3_Pointer GetSeedPoints1();
     void SetSeedPoints2(itkVectorContainerUILSNF3 * points);
     itkVectorContainerUILSNF3_Pointer GetSeedPoints2();
     virtual void SetNegativeEpsilon(double const _arg);
     virtual double GetNegativeEpsilon() const;
     virtual void SetApplyConnectivity(bool const _arg);
     virtual bool GetApplyConnectivity() const;
     virtual void ApplyConnectivityOn();
     virtual void ApplyConnectivityOff();
     virtual void SetStopOnTargets(bool const _arg);
     virtual bool GetStopOnTargets() const;
     virtual void StopOnTargetsOn();
     virtual void StopOnTargetsOff();
   private:
     itkCollidingFrontsImageFilterIF3IF3(itkCollidingFrontsImageFilterIF3IF3 const & arg0);
     void operator=(itkCollidingFrontsImageFilterIF3IF3 const & arg0);
   protected:
     itkCollidingFrontsImageFilterIF3IF3();
     ~itkCollidingFrontsImageFilterIF3IF3();
     virtual void GenerateData();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
 };


 class itkCollidingFrontsImageFilterIF3IF3_Pointer {
   public:
     itkCollidingFrontsImageFilterIF3IF3_Pointer();
     itkCollidingFrontsImageFilterIF3IF3_Pointer(itkCollidingFrontsImageFilterIF3IF3_Pointer const & p);
     itkCollidingFrontsImageFilterIF3IF3_Pointer(itkCollidingFrontsImageFilterIF3IF3 * p);
     ~itkCollidingFrontsImageFilterIF3IF3_Pointer();
     itkCollidingFrontsImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkCollidingFrontsImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkCollidingFrontsImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkCollidingFrontsImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkCollidingFrontsImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkCollidingFrontsImageFilterIF3IF3_Pointer const & r) const;
     itkCollidingFrontsImageFilterIF3IF3_Pointer & operator=(itkCollidingFrontsImageFilterIF3IF3_Pointer const & r);
     itkCollidingFrontsImageFilterIF3IF3_Pointer & operator=(itkCollidingFrontsImageFilterIF3IF3 * r);
     itkCollidingFrontsImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


