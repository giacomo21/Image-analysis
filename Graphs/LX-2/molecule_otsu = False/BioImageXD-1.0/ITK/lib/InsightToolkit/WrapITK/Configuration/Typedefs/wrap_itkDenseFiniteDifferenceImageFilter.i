// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkDenseFiniteDifferenceImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkDenseFiniteDifferenceImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkDenseFiniteDifferenceImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkDenseFiniteDifferenceImageFilterJava
#endif
#ifdef SWIGLUA
%module itkDenseFiniteDifferenceImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkDenseFiniteDifferenceImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkDenseFiniteDifferenceImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkDenseFiniteDifferenceImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkDenseFiniteDifferenceImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkDenseFiniteDifferenceImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkDenseFiniteDifferenceImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkDenseFiniteDifferenceImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkDenseFiniteDifferenceImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkDenseFiniteDifferenceImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkDenseFiniteDifferenceImageFilterPython
#endif
#ifdef SWIGR
%module itkDenseFiniteDifferenceImageFilterR
#endif
#ifdef SWIGRUBY
%module itkDenseFiniteDifferenceImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkDenseFiniteDifferenceImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkDenseFiniteDifferenceImageFilterTcl
#endif
#ifdef SWIGXML
%module itkDenseFiniteDifferenceImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkFiniteDifferenceImageFilter.i
%import wrap_ITKRegions.i
%import wrap_itkImage.i


%include itk.i
%include wrap_itkDenseFiniteDifferenceImageFilter_ext.i


 class itkDenseFiniteDifferenceImageFilterICVF22ICVF22 : public itkFiniteDifferenceImageFilterICVF22ICVF22 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  OutputTimesDoubleCheck = 1 };
     enum  {  OutputAdditiveOperatorsCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
   private:
     itkDenseFiniteDifferenceImageFilterICVF22ICVF22(itkDenseFiniteDifferenceImageFilterICVF22ICVF22 const & arg0);
     void operator=(itkDenseFiniteDifferenceImageFilterICVF22ICVF22 const & arg0);
     static void * ApplyUpdateThreaderCallback(void * arg);
     static void * CalculateChangeThreaderCallback(void * arg);
   protected:
     itkDenseFiniteDifferenceImageFilterICVF22ICVF22();
     ~itkDenseFiniteDifferenceImageFilterICVF22ICVF22();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void CopyInputToOutput();
     virtual void ApplyUpdate(double dt);
     virtual itkImageCVF22 * GetUpdateBuffer();
     virtual double CalculateChange();
     virtual void AllocateUpdateBuffer();
     virtual void ThreadedApplyUpdate(double dt, itkImageRegion2 const & regionToProcess, int threadId);
     virtual double ThreadedCalculateChange(itkImageRegion2 const & regionToProcess, int threadId);
 };


 class itkDenseFiniteDifferenceImageFilterICVF22ICVF22_Pointer {
   public:
     itkDenseFiniteDifferenceImageFilterICVF22ICVF22_Pointer();
     itkDenseFiniteDifferenceImageFilterICVF22ICVF22_Pointer(itkDenseFiniteDifferenceImageFilterICVF22ICVF22_Pointer const & p);
     itkDenseFiniteDifferenceImageFilterICVF22ICVF22_Pointer(itkDenseFiniteDifferenceImageFilterICVF22ICVF22 * p);
     ~itkDenseFiniteDifferenceImageFilterICVF22ICVF22_Pointer();
     itkDenseFiniteDifferenceImageFilterICVF22ICVF22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDenseFiniteDifferenceImageFilterICVF22ICVF22 * GetPointer() const;
     bool operator<(itkDenseFiniteDifferenceImageFilterICVF22ICVF22_Pointer const & r) const;
     bool operator>(itkDenseFiniteDifferenceImageFilterICVF22ICVF22_Pointer const & r) const;
     bool operator<=(itkDenseFiniteDifferenceImageFilterICVF22ICVF22_Pointer const & r) const;
     bool operator>=(itkDenseFiniteDifferenceImageFilterICVF22ICVF22_Pointer const & r) const;
     itkDenseFiniteDifferenceImageFilterICVF22ICVF22_Pointer & operator=(itkDenseFiniteDifferenceImageFilterICVF22ICVF22_Pointer const & r);
     itkDenseFiniteDifferenceImageFilterICVF22ICVF22_Pointer & operator=(itkDenseFiniteDifferenceImageFilterICVF22ICVF22 * r);
     itkDenseFiniteDifferenceImageFilterICVF22ICVF22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDenseFiniteDifferenceImageFilterICVF33ICVF33 : public itkFiniteDifferenceImageFilterICVF33ICVF33 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  OutputTimesDoubleCheck = 1 };
     enum  {  OutputAdditiveOperatorsCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
   private:
     itkDenseFiniteDifferenceImageFilterICVF33ICVF33(itkDenseFiniteDifferenceImageFilterICVF33ICVF33 const & arg0);
     void operator=(itkDenseFiniteDifferenceImageFilterICVF33ICVF33 const & arg0);
     static void * ApplyUpdateThreaderCallback(void * arg);
     static void * CalculateChangeThreaderCallback(void * arg);
   protected:
     itkDenseFiniteDifferenceImageFilterICVF33ICVF33();
     ~itkDenseFiniteDifferenceImageFilterICVF33ICVF33();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void CopyInputToOutput();
     virtual void ApplyUpdate(double dt);
     virtual itkImageCVF33 * GetUpdateBuffer();
     virtual double CalculateChange();
     virtual void AllocateUpdateBuffer();
     virtual void ThreadedApplyUpdate(double dt, itkImageRegion3 const & regionToProcess, int threadId);
     virtual double ThreadedCalculateChange(itkImageRegion3 const & regionToProcess, int threadId);
 };


 class itkDenseFiniteDifferenceImageFilterICVF33ICVF33_Pointer {
   public:
     itkDenseFiniteDifferenceImageFilterICVF33ICVF33_Pointer();
     itkDenseFiniteDifferenceImageFilterICVF33ICVF33_Pointer(itkDenseFiniteDifferenceImageFilterICVF33ICVF33_Pointer const & p);
     itkDenseFiniteDifferenceImageFilterICVF33ICVF33_Pointer(itkDenseFiniteDifferenceImageFilterICVF33ICVF33 * p);
     ~itkDenseFiniteDifferenceImageFilterICVF33ICVF33_Pointer();
     itkDenseFiniteDifferenceImageFilterICVF33ICVF33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDenseFiniteDifferenceImageFilterICVF33ICVF33 * GetPointer() const;
     bool operator<(itkDenseFiniteDifferenceImageFilterICVF33ICVF33_Pointer const & r) const;
     bool operator>(itkDenseFiniteDifferenceImageFilterICVF33ICVF33_Pointer const & r) const;
     bool operator<=(itkDenseFiniteDifferenceImageFilterICVF33ICVF33_Pointer const & r) const;
     bool operator>=(itkDenseFiniteDifferenceImageFilterICVF33ICVF33_Pointer const & r) const;
     itkDenseFiniteDifferenceImageFilterICVF33ICVF33_Pointer & operator=(itkDenseFiniteDifferenceImageFilterICVF33ICVF33_Pointer const & r);
     itkDenseFiniteDifferenceImageFilterICVF33ICVF33_Pointer & operator=(itkDenseFiniteDifferenceImageFilterICVF33ICVF33 * r);
     itkDenseFiniteDifferenceImageFilterICVF33ICVF33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDenseFiniteDifferenceImageFilterID2ID2 : public itkFiniteDifferenceImageFilterID2ID2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  OutputTimesDoubleCheck = 1 };
     enum  {  OutputAdditiveOperatorsCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
   private:
     itkDenseFiniteDifferenceImageFilterID2ID2(itkDenseFiniteDifferenceImageFilterID2ID2 const & arg0);
     void operator=(itkDenseFiniteDifferenceImageFilterID2ID2 const & arg0);
     static void * ApplyUpdateThreaderCallback(void * arg);
     static void * CalculateChangeThreaderCallback(void * arg);
   protected:
     itkDenseFiniteDifferenceImageFilterID2ID2();
     ~itkDenseFiniteDifferenceImageFilterID2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void CopyInputToOutput();
     virtual void ApplyUpdate(double dt);
     virtual itkImageD2 * GetUpdateBuffer();
     virtual double CalculateChange();
     virtual void AllocateUpdateBuffer();
     virtual void ThreadedApplyUpdate(double dt, itkImageRegion2 const & regionToProcess, int threadId);
     virtual double ThreadedCalculateChange(itkImageRegion2 const & regionToProcess, int threadId);
 };


 class itkDenseFiniteDifferenceImageFilterID2ID2_Pointer {
   public:
     itkDenseFiniteDifferenceImageFilterID2ID2_Pointer();
     itkDenseFiniteDifferenceImageFilterID2ID2_Pointer(itkDenseFiniteDifferenceImageFilterID2ID2_Pointer const & p);
     itkDenseFiniteDifferenceImageFilterID2ID2_Pointer(itkDenseFiniteDifferenceImageFilterID2ID2 * p);
     ~itkDenseFiniteDifferenceImageFilterID2ID2_Pointer();
     itkDenseFiniteDifferenceImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDenseFiniteDifferenceImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkDenseFiniteDifferenceImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkDenseFiniteDifferenceImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkDenseFiniteDifferenceImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkDenseFiniteDifferenceImageFilterID2ID2_Pointer const & r) const;
     itkDenseFiniteDifferenceImageFilterID2ID2_Pointer & operator=(itkDenseFiniteDifferenceImageFilterID2ID2_Pointer const & r);
     itkDenseFiniteDifferenceImageFilterID2ID2_Pointer & operator=(itkDenseFiniteDifferenceImageFilterID2ID2 * r);
     itkDenseFiniteDifferenceImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDenseFiniteDifferenceImageFilterID3ID3 : public itkFiniteDifferenceImageFilterID3ID3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  OutputTimesDoubleCheck = 1 };
     enum  {  OutputAdditiveOperatorsCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
   private:
     itkDenseFiniteDifferenceImageFilterID3ID3(itkDenseFiniteDifferenceImageFilterID3ID3 const & arg0);
     void operator=(itkDenseFiniteDifferenceImageFilterID3ID3 const & arg0);
     static void * ApplyUpdateThreaderCallback(void * arg);
     static void * CalculateChangeThreaderCallback(void * arg);
   protected:
     itkDenseFiniteDifferenceImageFilterID3ID3();
     ~itkDenseFiniteDifferenceImageFilterID3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void CopyInputToOutput();
     virtual void ApplyUpdate(double dt);
     virtual itkImageD3 * GetUpdateBuffer();
     virtual double CalculateChange();
     virtual void AllocateUpdateBuffer();
     virtual void ThreadedApplyUpdate(double dt, itkImageRegion3 const & regionToProcess, int threadId);
     virtual double ThreadedCalculateChange(itkImageRegion3 const & regionToProcess, int threadId);
 };


 class itkDenseFiniteDifferenceImageFilterID3ID3_Pointer {
   public:
     itkDenseFiniteDifferenceImageFilterID3ID3_Pointer();
     itkDenseFiniteDifferenceImageFilterID3ID3_Pointer(itkDenseFiniteDifferenceImageFilterID3ID3_Pointer const & p);
     itkDenseFiniteDifferenceImageFilterID3ID3_Pointer(itkDenseFiniteDifferenceImageFilterID3ID3 * p);
     ~itkDenseFiniteDifferenceImageFilterID3ID3_Pointer();
     itkDenseFiniteDifferenceImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDenseFiniteDifferenceImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkDenseFiniteDifferenceImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkDenseFiniteDifferenceImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkDenseFiniteDifferenceImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkDenseFiniteDifferenceImageFilterID3ID3_Pointer const & r) const;
     itkDenseFiniteDifferenceImageFilterID3ID3_Pointer & operator=(itkDenseFiniteDifferenceImageFilterID3ID3_Pointer const & r);
     itkDenseFiniteDifferenceImageFilterID3ID3_Pointer & operator=(itkDenseFiniteDifferenceImageFilterID3ID3 * r);
     itkDenseFiniteDifferenceImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDenseFiniteDifferenceImageFilterIF2IF2 : public itkFiniteDifferenceImageFilterIF2IF2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  OutputTimesDoubleCheck = 1 };
     enum  {  OutputAdditiveOperatorsCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
   private:
     itkDenseFiniteDifferenceImageFilterIF2IF2(itkDenseFiniteDifferenceImageFilterIF2IF2 const & arg0);
     void operator=(itkDenseFiniteDifferenceImageFilterIF2IF2 const & arg0);
     static void * ApplyUpdateThreaderCallback(void * arg);
     static void * CalculateChangeThreaderCallback(void * arg);
   protected:
     itkDenseFiniteDifferenceImageFilterIF2IF2();
     ~itkDenseFiniteDifferenceImageFilterIF2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void CopyInputToOutput();
     virtual void ApplyUpdate(double dt);
     virtual itkImageF2 * GetUpdateBuffer();
     virtual double CalculateChange();
     virtual void AllocateUpdateBuffer();
     virtual void ThreadedApplyUpdate(double dt, itkImageRegion2 const & regionToProcess, int threadId);
     virtual double ThreadedCalculateChange(itkImageRegion2 const & regionToProcess, int threadId);
 };


 class itkDenseFiniteDifferenceImageFilterIF2IF2_Pointer {
   public:
     itkDenseFiniteDifferenceImageFilterIF2IF2_Pointer();
     itkDenseFiniteDifferenceImageFilterIF2IF2_Pointer(itkDenseFiniteDifferenceImageFilterIF2IF2_Pointer const & p);
     itkDenseFiniteDifferenceImageFilterIF2IF2_Pointer(itkDenseFiniteDifferenceImageFilterIF2IF2 * p);
     ~itkDenseFiniteDifferenceImageFilterIF2IF2_Pointer();
     itkDenseFiniteDifferenceImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDenseFiniteDifferenceImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkDenseFiniteDifferenceImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkDenseFiniteDifferenceImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkDenseFiniteDifferenceImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkDenseFiniteDifferenceImageFilterIF2IF2_Pointer const & r) const;
     itkDenseFiniteDifferenceImageFilterIF2IF2_Pointer & operator=(itkDenseFiniteDifferenceImageFilterIF2IF2_Pointer const & r);
     itkDenseFiniteDifferenceImageFilterIF2IF2_Pointer & operator=(itkDenseFiniteDifferenceImageFilterIF2IF2 * r);
     itkDenseFiniteDifferenceImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDenseFiniteDifferenceImageFilterIF3IF3 : public itkFiniteDifferenceImageFilterIF3IF3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  OutputTimesDoubleCheck = 1 };
     enum  {  OutputAdditiveOperatorsCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
   private:
     itkDenseFiniteDifferenceImageFilterIF3IF3(itkDenseFiniteDifferenceImageFilterIF3IF3 const & arg0);
     void operator=(itkDenseFiniteDifferenceImageFilterIF3IF3 const & arg0);
     static void * ApplyUpdateThreaderCallback(void * arg);
     static void * CalculateChangeThreaderCallback(void * arg);
   protected:
     itkDenseFiniteDifferenceImageFilterIF3IF3();
     ~itkDenseFiniteDifferenceImageFilterIF3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void CopyInputToOutput();
     virtual void ApplyUpdate(double dt);
     virtual itkImageF3 * GetUpdateBuffer();
     virtual double CalculateChange();
     virtual void AllocateUpdateBuffer();
     virtual void ThreadedApplyUpdate(double dt, itkImageRegion3 const & regionToProcess, int threadId);
     virtual double ThreadedCalculateChange(itkImageRegion3 const & regionToProcess, int threadId);
 };


 class itkDenseFiniteDifferenceImageFilterIF3IF3_Pointer {
   public:
     itkDenseFiniteDifferenceImageFilterIF3IF3_Pointer();
     itkDenseFiniteDifferenceImageFilterIF3IF3_Pointer(itkDenseFiniteDifferenceImageFilterIF3IF3_Pointer const & p);
     itkDenseFiniteDifferenceImageFilterIF3IF3_Pointer(itkDenseFiniteDifferenceImageFilterIF3IF3 * p);
     ~itkDenseFiniteDifferenceImageFilterIF3IF3_Pointer();
     itkDenseFiniteDifferenceImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDenseFiniteDifferenceImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkDenseFiniteDifferenceImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkDenseFiniteDifferenceImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkDenseFiniteDifferenceImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkDenseFiniteDifferenceImageFilterIF3IF3_Pointer const & r) const;
     itkDenseFiniteDifferenceImageFilterIF3IF3_Pointer & operator=(itkDenseFiniteDifferenceImageFilterIF3IF3_Pointer const & r);
     itkDenseFiniteDifferenceImageFilterIF3IF3_Pointer & operator=(itkDenseFiniteDifferenceImageFilterIF3IF3 * r);
     itkDenseFiniteDifferenceImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDenseFiniteDifferenceImageFilterIVF22IVF22 : public itkFiniteDifferenceImageFilterIVF22IVF22 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  OutputTimesDoubleCheck = 1 };
     enum  {  OutputAdditiveOperatorsCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
   private:
     itkDenseFiniteDifferenceImageFilterIVF22IVF22(itkDenseFiniteDifferenceImageFilterIVF22IVF22 const & arg0);
     void operator=(itkDenseFiniteDifferenceImageFilterIVF22IVF22 const & arg0);
     static void * ApplyUpdateThreaderCallback(void * arg);
     static void * CalculateChangeThreaderCallback(void * arg);
   protected:
     itkDenseFiniteDifferenceImageFilterIVF22IVF22();
     ~itkDenseFiniteDifferenceImageFilterIVF22IVF22();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void CopyInputToOutput();
     virtual void ApplyUpdate(double dt);
     virtual itkImageVF22 * GetUpdateBuffer();
     virtual double CalculateChange();
     virtual void AllocateUpdateBuffer();
     virtual void ThreadedApplyUpdate(double dt, itkImageRegion2 const & regionToProcess, int threadId);
     virtual double ThreadedCalculateChange(itkImageRegion2 const & regionToProcess, int threadId);
 };


 class itkDenseFiniteDifferenceImageFilterIVF22IVF22_Pointer {
   public:
     itkDenseFiniteDifferenceImageFilterIVF22IVF22_Pointer();
     itkDenseFiniteDifferenceImageFilterIVF22IVF22_Pointer(itkDenseFiniteDifferenceImageFilterIVF22IVF22_Pointer const & p);
     itkDenseFiniteDifferenceImageFilterIVF22IVF22_Pointer(itkDenseFiniteDifferenceImageFilterIVF22IVF22 * p);
     ~itkDenseFiniteDifferenceImageFilterIVF22IVF22_Pointer();
     itkDenseFiniteDifferenceImageFilterIVF22IVF22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDenseFiniteDifferenceImageFilterIVF22IVF22 * GetPointer() const;
     bool operator<(itkDenseFiniteDifferenceImageFilterIVF22IVF22_Pointer const & r) const;
     bool operator>(itkDenseFiniteDifferenceImageFilterIVF22IVF22_Pointer const & r) const;
     bool operator<=(itkDenseFiniteDifferenceImageFilterIVF22IVF22_Pointer const & r) const;
     bool operator>=(itkDenseFiniteDifferenceImageFilterIVF22IVF22_Pointer const & r) const;
     itkDenseFiniteDifferenceImageFilterIVF22IVF22_Pointer & operator=(itkDenseFiniteDifferenceImageFilterIVF22IVF22_Pointer const & r);
     itkDenseFiniteDifferenceImageFilterIVF22IVF22_Pointer & operator=(itkDenseFiniteDifferenceImageFilterIVF22IVF22 * r);
     itkDenseFiniteDifferenceImageFilterIVF22IVF22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDenseFiniteDifferenceImageFilterIVF33IVF33 : public itkFiniteDifferenceImageFilterIVF33IVF33 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  OutputTimesDoubleCheck = 1 };
     enum  {  OutputAdditiveOperatorsCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     virtual char const * GetNameOfClass() const;
   private:
     itkDenseFiniteDifferenceImageFilterIVF33IVF33(itkDenseFiniteDifferenceImageFilterIVF33IVF33 const & arg0);
     void operator=(itkDenseFiniteDifferenceImageFilterIVF33IVF33 const & arg0);
     static void * ApplyUpdateThreaderCallback(void * arg);
     static void * CalculateChangeThreaderCallback(void * arg);
   protected:
     itkDenseFiniteDifferenceImageFilterIVF33IVF33();
     ~itkDenseFiniteDifferenceImageFilterIVF33IVF33();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void CopyInputToOutput();
     virtual void ApplyUpdate(double dt);
     virtual itkImageVF33 * GetUpdateBuffer();
     virtual double CalculateChange();
     virtual void AllocateUpdateBuffer();
     virtual void ThreadedApplyUpdate(double dt, itkImageRegion3 const & regionToProcess, int threadId);
     virtual double ThreadedCalculateChange(itkImageRegion3 const & regionToProcess, int threadId);
 };


 class itkDenseFiniteDifferenceImageFilterIVF33IVF33_Pointer {
   public:
     itkDenseFiniteDifferenceImageFilterIVF33IVF33_Pointer();
     itkDenseFiniteDifferenceImageFilterIVF33IVF33_Pointer(itkDenseFiniteDifferenceImageFilterIVF33IVF33_Pointer const & p);
     itkDenseFiniteDifferenceImageFilterIVF33IVF33_Pointer(itkDenseFiniteDifferenceImageFilterIVF33IVF33 * p);
     ~itkDenseFiniteDifferenceImageFilterIVF33IVF33_Pointer();
     itkDenseFiniteDifferenceImageFilterIVF33IVF33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDenseFiniteDifferenceImageFilterIVF33IVF33 * GetPointer() const;
     bool operator<(itkDenseFiniteDifferenceImageFilterIVF33IVF33_Pointer const & r) const;
     bool operator>(itkDenseFiniteDifferenceImageFilterIVF33IVF33_Pointer const & r) const;
     bool operator<=(itkDenseFiniteDifferenceImageFilterIVF33IVF33_Pointer const & r) const;
     bool operator>=(itkDenseFiniteDifferenceImageFilterIVF33IVF33_Pointer const & r) const;
     itkDenseFiniteDifferenceImageFilterIVF33IVF33_Pointer & operator=(itkDenseFiniteDifferenceImageFilterIVF33IVF33_Pointer const & r);
     itkDenseFiniteDifferenceImageFilterIVF33IVF33_Pointer & operator=(itkDenseFiniteDifferenceImageFilterIVF33IVF33 * r);
     itkDenseFiniteDifferenceImageFilterIVF33IVF33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


