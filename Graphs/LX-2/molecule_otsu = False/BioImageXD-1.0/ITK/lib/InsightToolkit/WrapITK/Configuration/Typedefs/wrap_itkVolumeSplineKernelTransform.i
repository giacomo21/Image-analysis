// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkVolumeSplineKernelTransformChicken
#endif
#ifdef SWIGCSHARP
%module itkVolumeSplineKernelTransformCsharp
#endif
#ifdef SWIGGUILE
%module itkVolumeSplineKernelTransformGuile
#endif
#ifdef SWIGJAVA
%module itkVolumeSplineKernelTransformJava
#endif
#ifdef SWIGLUA
%module itkVolumeSplineKernelTransformLua
#endif
#ifdef SWIGMODULA3
%module itkVolumeSplineKernelTransformModula3
#endif
#ifdef SWIGMZSCHEME
%module itkVolumeSplineKernelTransformMzscheme
#endif
#ifdef SWIGOCAML
%module itkVolumeSplineKernelTransformOcaml
#endif
#ifdef SWIGPERL
%module itkVolumeSplineKernelTransformPerl
#endif
#ifdef SWIGPERL5
%module itkVolumeSplineKernelTransformPerl5
#endif
#ifdef SWIGPHP
%module itkVolumeSplineKernelTransformPhp
#endif
#ifdef SWIGPHP4
%module itkVolumeSplineKernelTransformPhp4
#endif
#ifdef SWIGPHP5
%module itkVolumeSplineKernelTransformPhp5
#endif
#ifdef SWIGPIKE
%module itkVolumeSplineKernelTransformPike
#endif
#ifdef SWIGPYTHON
%module itkVolumeSplineKernelTransformPython
#endif
#ifdef SWIGR
%module itkVolumeSplineKernelTransformR
#endif
#ifdef SWIGRUBY
%module itkVolumeSplineKernelTransformRuby
#endif
#ifdef SWIGSEXP
%module itkVolumeSplineKernelTransformSexp
#endif
#ifdef SWIGTCL
%module itkVolumeSplineKernelTransformTcl
#endif
#ifdef SWIGXML
%module itkVolumeSplineKernelTransformXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
#include "Interpolators.includes"
#include "Mesh.includes"
#include "DeformableTransforms.includes"
%}


%{
%}




%import wrap_itkPoint.i
%import wrap_vnl_matrix_fixed.i
%import wrap_itkVector.i
%import wrap_itkKernelTransform.i
%import wrap_ITKCommonBase.i


%include itk.i
%include wrap_itkVolumeSplineKernelTransform_ext.i


 class itkVolumeSplineKernelTransformD2 : public itkKernelTransformD2 {
   public:
     enum  {  SpaceDimension = 2 };
     static itkVolumeSplineKernelTransformD2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkVolumeSplineKernelTransformD2(itkVolumeSplineKernelTransformD2 const & arg0);
     void operator=(itkVolumeSplineKernelTransformD2 const & arg0);
   protected:
     itkVolumeSplineKernelTransformD2();
     ~itkVolumeSplineKernelTransformD2();
     virtual void ComputeG(itkVectorD2 const & landmarkVector, vnl_matrix_fixedD_2_2 & gmatrix) const;
     virtual vnl_matrix_fixedD_2_2 const & ComputeG(itkVectorD2 const & landmarkVector) const;
     virtual void ComputeDeformationContribution(itkPointD2 const & inputPoint, itkPointD2 & result) const;
 };


 class itkVolumeSplineKernelTransformD2_Pointer {
   public:
     itkVolumeSplineKernelTransformD2_Pointer();
     itkVolumeSplineKernelTransformD2_Pointer(itkVolumeSplineKernelTransformD2_Pointer const & p);
     itkVolumeSplineKernelTransformD2_Pointer(itkVolumeSplineKernelTransformD2 * p);
     ~itkVolumeSplineKernelTransformD2_Pointer();
     itkVolumeSplineKernelTransformD2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVolumeSplineKernelTransformD2 * GetPointer() const;
     bool operator<(itkVolumeSplineKernelTransformD2_Pointer const & r) const;
     bool operator>(itkVolumeSplineKernelTransformD2_Pointer const & r) const;
     bool operator<=(itkVolumeSplineKernelTransformD2_Pointer const & r) const;
     bool operator>=(itkVolumeSplineKernelTransformD2_Pointer const & r) const;
     itkVolumeSplineKernelTransformD2_Pointer & operator=(itkVolumeSplineKernelTransformD2_Pointer const & r);
     itkVolumeSplineKernelTransformD2_Pointer & operator=(itkVolumeSplineKernelTransformD2 * r);
     itkVolumeSplineKernelTransformD2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVolumeSplineKernelTransformD3 : public itkKernelTransformD3 {
   public:
     enum  {  SpaceDimension = 3 };
     static itkVolumeSplineKernelTransformD3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkVolumeSplineKernelTransformD3(itkVolumeSplineKernelTransformD3 const & arg0);
     void operator=(itkVolumeSplineKernelTransformD3 const & arg0);
   protected:
     itkVolumeSplineKernelTransformD3();
     ~itkVolumeSplineKernelTransformD3();
     virtual void ComputeG(itkVectorD3 const & landmarkVector, vnl_matrix_fixedD_3_3 & gmatrix) const;
     virtual vnl_matrix_fixedD_3_3 const & ComputeG(itkVectorD3 const & landmarkVector) const;
     virtual void ComputeDeformationContribution(itkPointD3 const & inputPoint, itkPointD3 & result) const;
 };


 class itkVolumeSplineKernelTransformD3_Pointer {
   public:
     itkVolumeSplineKernelTransformD3_Pointer();
     itkVolumeSplineKernelTransformD3_Pointer(itkVolumeSplineKernelTransformD3_Pointer const & p);
     itkVolumeSplineKernelTransformD3_Pointer(itkVolumeSplineKernelTransformD3 * p);
     ~itkVolumeSplineKernelTransformD3_Pointer();
     itkVolumeSplineKernelTransformD3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVolumeSplineKernelTransformD3 * GetPointer() const;
     bool operator<(itkVolumeSplineKernelTransformD3_Pointer const & r) const;
     bool operator>(itkVolumeSplineKernelTransformD3_Pointer const & r) const;
     bool operator<=(itkVolumeSplineKernelTransformD3_Pointer const & r) const;
     bool operator>=(itkVolumeSplineKernelTransformD3_Pointer const & r) const;
     itkVolumeSplineKernelTransformD3_Pointer & operator=(itkVolumeSplineKernelTransformD3_Pointer const & r);
     itkVolumeSplineKernelTransformD3_Pointer & operator=(itkVolumeSplineKernelTransformD3 * r);
     itkVolumeSplineKernelTransformD3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


