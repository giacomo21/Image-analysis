// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkZeroCrossingImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkZeroCrossingImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkZeroCrossingImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkZeroCrossingImageFilterJava
#endif
#ifdef SWIGLUA
%module itkZeroCrossingImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkZeroCrossingImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkZeroCrossingImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkZeroCrossingImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkZeroCrossingImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkZeroCrossingImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkZeroCrossingImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkZeroCrossingImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkZeroCrossingImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkZeroCrossingImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkZeroCrossingImageFilterPython
#endif
#ifdef SWIGR
%module itkZeroCrossingImageFilterR
#endif
#ifdef SWIGRUBY
%module itkZeroCrossingImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkZeroCrossingImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkZeroCrossingImageFilterTcl
#endif
#ifdef SWIGXML
%module itkZeroCrossingImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "EdgesAndContours.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_ITKRegions.i
%import wrap_itkImageToImageFilterA.i


%include itk.i
%include wrap_itkZeroCrossingImageFilter_ext.i


 class itkZeroCrossingImageFilterID2ID2 : public itkImageToImageFilterID2ID2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  OutputEqualityComparableCheck = 1 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  InputComparableCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     static itkZeroCrossingImageFilterID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void GenerateInputRequestedRegion();
     virtual void SetForegroundValue(double const _arg);
     virtual double GetForegroundValue() const;
     virtual void SetBackgroundValue(double const _arg);
     virtual double GetBackgroundValue() const;
   private:
   protected:
     itkZeroCrossingImageFilterID2ID2();
     ~itkZeroCrossingImageFilterID2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     itkZeroCrossingImageFilterID2ID2(itkZeroCrossingImageFilterID2ID2 const & arg0);
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkZeroCrossingImageFilterID2ID2_Pointer {
   public:
     itkZeroCrossingImageFilterID2ID2_Pointer();
     itkZeroCrossingImageFilterID2ID2_Pointer(itkZeroCrossingImageFilterID2ID2_Pointer const & p);
     itkZeroCrossingImageFilterID2ID2_Pointer(itkZeroCrossingImageFilterID2ID2 * p);
     ~itkZeroCrossingImageFilterID2ID2_Pointer();
     itkZeroCrossingImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkZeroCrossingImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkZeroCrossingImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkZeroCrossingImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkZeroCrossingImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkZeroCrossingImageFilterID2ID2_Pointer const & r) const;
     itkZeroCrossingImageFilterID2ID2_Pointer & operator=(itkZeroCrossingImageFilterID2ID2_Pointer const & r);
     itkZeroCrossingImageFilterID2ID2_Pointer & operator=(itkZeroCrossingImageFilterID2ID2 * r);
     itkZeroCrossingImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkZeroCrossingImageFilterID3ID3 : public itkImageToImageFilterID3ID3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  OutputEqualityComparableCheck = 1 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  InputComparableCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     static itkZeroCrossingImageFilterID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void GenerateInputRequestedRegion();
     virtual void SetForegroundValue(double const _arg);
     virtual double GetForegroundValue() const;
     virtual void SetBackgroundValue(double const _arg);
     virtual double GetBackgroundValue() const;
   private:
   protected:
     itkZeroCrossingImageFilterID3ID3();
     ~itkZeroCrossingImageFilterID3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     itkZeroCrossingImageFilterID3ID3(itkZeroCrossingImageFilterID3ID3 const & arg0);
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkZeroCrossingImageFilterID3ID3_Pointer {
   public:
     itkZeroCrossingImageFilterID3ID3_Pointer();
     itkZeroCrossingImageFilterID3ID3_Pointer(itkZeroCrossingImageFilterID3ID3_Pointer const & p);
     itkZeroCrossingImageFilterID3ID3_Pointer(itkZeroCrossingImageFilterID3ID3 * p);
     ~itkZeroCrossingImageFilterID3ID3_Pointer();
     itkZeroCrossingImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkZeroCrossingImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkZeroCrossingImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkZeroCrossingImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkZeroCrossingImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkZeroCrossingImageFilterID3ID3_Pointer const & r) const;
     itkZeroCrossingImageFilterID3ID3_Pointer & operator=(itkZeroCrossingImageFilterID3ID3_Pointer const & r);
     itkZeroCrossingImageFilterID3ID3_Pointer & operator=(itkZeroCrossingImageFilterID3ID3 * r);
     itkZeroCrossingImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkZeroCrossingImageFilterIF2IF2 : public itkImageToImageFilterIF2IF2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  OutputEqualityComparableCheck = 1 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  InputComparableCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     static itkZeroCrossingImageFilterIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void GenerateInputRequestedRegion();
     virtual void SetForegroundValue(float const _arg);
     virtual float GetForegroundValue() const;
     virtual void SetBackgroundValue(float const _arg);
     virtual float GetBackgroundValue() const;
   private:
   protected:
     itkZeroCrossingImageFilterIF2IF2();
     ~itkZeroCrossingImageFilterIF2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     itkZeroCrossingImageFilterIF2IF2(itkZeroCrossingImageFilterIF2IF2 const & arg0);
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkZeroCrossingImageFilterIF2IF2_Pointer {
   public:
     itkZeroCrossingImageFilterIF2IF2_Pointer();
     itkZeroCrossingImageFilterIF2IF2_Pointer(itkZeroCrossingImageFilterIF2IF2_Pointer const & p);
     itkZeroCrossingImageFilterIF2IF2_Pointer(itkZeroCrossingImageFilterIF2IF2 * p);
     ~itkZeroCrossingImageFilterIF2IF2_Pointer();
     itkZeroCrossingImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkZeroCrossingImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkZeroCrossingImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkZeroCrossingImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkZeroCrossingImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkZeroCrossingImageFilterIF2IF2_Pointer const & r) const;
     itkZeroCrossingImageFilterIF2IF2_Pointer & operator=(itkZeroCrossingImageFilterIF2IF2_Pointer const & r);
     itkZeroCrossingImageFilterIF2IF2_Pointer & operator=(itkZeroCrossingImageFilterIF2IF2 * r);
     itkZeroCrossingImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkZeroCrossingImageFilterIF3IF3 : public itkImageToImageFilterIF3IF3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  OutputEqualityComparableCheck = 1 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  InputComparableCheck = 1 };
     enum  {  OutputOStreamWritableCheck = 1 };
     static itkZeroCrossingImageFilterIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void GenerateInputRequestedRegion();
     virtual void SetForegroundValue(float const _arg);
     virtual float GetForegroundValue() const;
     virtual void SetBackgroundValue(float const _arg);
     virtual float GetBackgroundValue() const;
   private:
   protected:
     itkZeroCrossingImageFilterIF3IF3();
     ~itkZeroCrossingImageFilterIF3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     itkZeroCrossingImageFilterIF3IF3(itkZeroCrossingImageFilterIF3IF3 const & arg0);
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkZeroCrossingImageFilterIF3IF3_Pointer {
   public:
     itkZeroCrossingImageFilterIF3IF3_Pointer();
     itkZeroCrossingImageFilterIF3IF3_Pointer(itkZeroCrossingImageFilterIF3IF3_Pointer const & p);
     itkZeroCrossingImageFilterIF3IF3_Pointer(itkZeroCrossingImageFilterIF3IF3 * p);
     ~itkZeroCrossingImageFilterIF3IF3_Pointer();
     itkZeroCrossingImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkZeroCrossingImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkZeroCrossingImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkZeroCrossingImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkZeroCrossingImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkZeroCrossingImageFilterIF3IF3_Pointer const & r) const;
     itkZeroCrossingImageFilterIF3IF3_Pointer & operator=(itkZeroCrossingImageFilterIF3IF3_Pointer const & r);
     itkZeroCrossingImageFilterIF3IF3_Pointer & operator=(itkZeroCrossingImageFilterIF3IF3 * r);
     itkZeroCrossingImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


