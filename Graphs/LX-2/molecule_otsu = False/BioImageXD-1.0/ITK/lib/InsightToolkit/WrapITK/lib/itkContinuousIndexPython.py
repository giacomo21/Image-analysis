# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkContinuousIndexPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkContinuousIndexPython', [dirname(__file__)])
        except ImportError:
            import _itkContinuousIndexPython
            return _itkContinuousIndexPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkContinuousIndexPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkContinuousIndexPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkContinuousIndexPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkIndexPython
import itkSizePython
import pyBasePython
import itkOffsetPython
import itkPointPython
import vnl_vectorPython
import vcl_complexPython
import vnl_matrixPython
import itkFixedArrayPython
import itkVectorPython
import vnl_vector_refPython
class itkContinuousIndexD2(itkPointPython.itkPointD2):
    """Proxy of C++ itkContinuousIndexD2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    IndexDimension = _itkContinuousIndexPython.itkContinuousIndexD2_IndexDimension
    __swig_destroy__ = _itkContinuousIndexPython.delete_itkContinuousIndexD2
    def __init__(self, *args): 
        """
        __init__(self) -> itkContinuousIndexD2
        __init__(self, itkContinuousIndexD2 r) -> itkContinuousIndexD2
        __init__(self, double r) -> itkContinuousIndexD2
        __init__(self, itkIndex2 index) -> itkContinuousIndexD2
        """
        _itkContinuousIndexPython.itkContinuousIndexD2_swiginit(self,_itkContinuousIndexPython.new_itkContinuousIndexD2(*args))
    def __getitem__(self, *args):
        """__getitem__(self, unsigned long dim) -> double"""
        return _itkContinuousIndexPython.itkContinuousIndexD2___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, unsigned long dim, double v)"""
        return _itkContinuousIndexPython.itkContinuousIndexD2___setitem__(self, *args)

    def __len__(self):
        """__len__(self) -> unsigned int"""
        return _itkContinuousIndexPython.itkContinuousIndexD2___len__(self)

    def __repr__(self):
        """__repr__(self) -> string"""
        return _itkContinuousIndexPython.itkContinuousIndexD2___repr__(self)

itkContinuousIndexD2.__getitem__ = new_instancemethod(_itkContinuousIndexPython.itkContinuousIndexD2___getitem__,None,itkContinuousIndexD2)
itkContinuousIndexD2.__setitem__ = new_instancemethod(_itkContinuousIndexPython.itkContinuousIndexD2___setitem__,None,itkContinuousIndexD2)
itkContinuousIndexD2.__len__ = new_instancemethod(_itkContinuousIndexPython.itkContinuousIndexD2___len__,None,itkContinuousIndexD2)
itkContinuousIndexD2.__repr__ = new_instancemethod(_itkContinuousIndexPython.itkContinuousIndexD2___repr__,None,itkContinuousIndexD2)
itkContinuousIndexD2_swigregister = _itkContinuousIndexPython.itkContinuousIndexD2_swigregister
itkContinuousIndexD2_swigregister(itkContinuousIndexD2)

class itkContinuousIndexD3(itkPointPython.itkPointD3):
    """Proxy of C++ itkContinuousIndexD3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    IndexDimension = _itkContinuousIndexPython.itkContinuousIndexD3_IndexDimension
    __swig_destroy__ = _itkContinuousIndexPython.delete_itkContinuousIndexD3
    def __init__(self, *args): 
        """
        __init__(self) -> itkContinuousIndexD3
        __init__(self, itkContinuousIndexD3 r) -> itkContinuousIndexD3
        __init__(self, double r) -> itkContinuousIndexD3
        __init__(self, itkIndex3 index) -> itkContinuousIndexD3
        """
        _itkContinuousIndexPython.itkContinuousIndexD3_swiginit(self,_itkContinuousIndexPython.new_itkContinuousIndexD3(*args))
    def __getitem__(self, *args):
        """__getitem__(self, unsigned long dim) -> double"""
        return _itkContinuousIndexPython.itkContinuousIndexD3___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, unsigned long dim, double v)"""
        return _itkContinuousIndexPython.itkContinuousIndexD3___setitem__(self, *args)

    def __len__(self):
        """__len__(self) -> unsigned int"""
        return _itkContinuousIndexPython.itkContinuousIndexD3___len__(self)

    def __repr__(self):
        """__repr__(self) -> string"""
        return _itkContinuousIndexPython.itkContinuousIndexD3___repr__(self)

itkContinuousIndexD3.__getitem__ = new_instancemethod(_itkContinuousIndexPython.itkContinuousIndexD3___getitem__,None,itkContinuousIndexD3)
itkContinuousIndexD3.__setitem__ = new_instancemethod(_itkContinuousIndexPython.itkContinuousIndexD3___setitem__,None,itkContinuousIndexD3)
itkContinuousIndexD3.__len__ = new_instancemethod(_itkContinuousIndexPython.itkContinuousIndexD3___len__,None,itkContinuousIndexD3)
itkContinuousIndexD3.__repr__ = new_instancemethod(_itkContinuousIndexPython.itkContinuousIndexD3___repr__,None,itkContinuousIndexD3)
itkContinuousIndexD3_swigregister = _itkContinuousIndexPython.itkContinuousIndexD3_swigregister
itkContinuousIndexD3_swigregister(itkContinuousIndexD3)

class itkContinuousIndexF2(itkPointPython.itkPointF2):
    """Proxy of C++ itkContinuousIndexF2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    IndexDimension = _itkContinuousIndexPython.itkContinuousIndexF2_IndexDimension
    __swig_destroy__ = _itkContinuousIndexPython.delete_itkContinuousIndexF2
    def __init__(self, *args): 
        """
        __init__(self) -> itkContinuousIndexF2
        __init__(self, itkContinuousIndexF2 r) -> itkContinuousIndexF2
        __init__(self, float r) -> itkContinuousIndexF2
        __init__(self, itkIndex2 index) -> itkContinuousIndexF2
        """
        _itkContinuousIndexPython.itkContinuousIndexF2_swiginit(self,_itkContinuousIndexPython.new_itkContinuousIndexF2(*args))
    def __getitem__(self, *args):
        """__getitem__(self, unsigned long dim) -> float"""
        return _itkContinuousIndexPython.itkContinuousIndexF2___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, unsigned long dim, float v)"""
        return _itkContinuousIndexPython.itkContinuousIndexF2___setitem__(self, *args)

    def __len__(self):
        """__len__(self) -> unsigned int"""
        return _itkContinuousIndexPython.itkContinuousIndexF2___len__(self)

    def __repr__(self):
        """__repr__(self) -> string"""
        return _itkContinuousIndexPython.itkContinuousIndexF2___repr__(self)

itkContinuousIndexF2.__getitem__ = new_instancemethod(_itkContinuousIndexPython.itkContinuousIndexF2___getitem__,None,itkContinuousIndexF2)
itkContinuousIndexF2.__setitem__ = new_instancemethod(_itkContinuousIndexPython.itkContinuousIndexF2___setitem__,None,itkContinuousIndexF2)
itkContinuousIndexF2.__len__ = new_instancemethod(_itkContinuousIndexPython.itkContinuousIndexF2___len__,None,itkContinuousIndexF2)
itkContinuousIndexF2.__repr__ = new_instancemethod(_itkContinuousIndexPython.itkContinuousIndexF2___repr__,None,itkContinuousIndexF2)
itkContinuousIndexF2_swigregister = _itkContinuousIndexPython.itkContinuousIndexF2_swigregister
itkContinuousIndexF2_swigregister(itkContinuousIndexF2)

class itkContinuousIndexF3(itkPointPython.itkPointF3):
    """Proxy of C++ itkContinuousIndexF3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    IndexDimension = _itkContinuousIndexPython.itkContinuousIndexF3_IndexDimension
    __swig_destroy__ = _itkContinuousIndexPython.delete_itkContinuousIndexF3
    def __init__(self, *args): 
        """
        __init__(self) -> itkContinuousIndexF3
        __init__(self, itkContinuousIndexF3 r) -> itkContinuousIndexF3
        __init__(self, float r) -> itkContinuousIndexF3
        __init__(self, itkIndex3 index) -> itkContinuousIndexF3
        """
        _itkContinuousIndexPython.itkContinuousIndexF3_swiginit(self,_itkContinuousIndexPython.new_itkContinuousIndexF3(*args))
    def __getitem__(self, *args):
        """__getitem__(self, unsigned long dim) -> float"""
        return _itkContinuousIndexPython.itkContinuousIndexF3___getitem__(self, *args)

    def __setitem__(self, *args):
        """__setitem__(self, unsigned long dim, float v)"""
        return _itkContinuousIndexPython.itkContinuousIndexF3___setitem__(self, *args)

    def __len__(self):
        """__len__(self) -> unsigned int"""
        return _itkContinuousIndexPython.itkContinuousIndexF3___len__(self)

    def __repr__(self):
        """__repr__(self) -> string"""
        return _itkContinuousIndexPython.itkContinuousIndexF3___repr__(self)

itkContinuousIndexF3.__getitem__ = new_instancemethod(_itkContinuousIndexPython.itkContinuousIndexF3___getitem__,None,itkContinuousIndexF3)
itkContinuousIndexF3.__setitem__ = new_instancemethod(_itkContinuousIndexPython.itkContinuousIndexF3___setitem__,None,itkContinuousIndexF3)
itkContinuousIndexF3.__len__ = new_instancemethod(_itkContinuousIndexPython.itkContinuousIndexF3___len__,None,itkContinuousIndexF3)
itkContinuousIndexF3.__repr__ = new_instancemethod(_itkContinuousIndexPython.itkContinuousIndexF3___repr__,None,itkContinuousIndexF3)
itkContinuousIndexF3_swigregister = _itkContinuousIndexPython.itkContinuousIndexF3_swigregister
itkContinuousIndexF3_swigregister(itkContinuousIndexF3)



