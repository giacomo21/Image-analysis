// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkCenteredVersorTransformInitializerChicken
#endif
#ifdef SWIGCSHARP
%module itkCenteredVersorTransformInitializerCsharp
#endif
#ifdef SWIGGUILE
%module itkCenteredVersorTransformInitializerGuile
#endif
#ifdef SWIGJAVA
%module itkCenteredVersorTransformInitializerJava
#endif
#ifdef SWIGLUA
%module itkCenteredVersorTransformInitializerLua
#endif
#ifdef SWIGMODULA3
%module itkCenteredVersorTransformInitializerModula3
#endif
#ifdef SWIGMZSCHEME
%module itkCenteredVersorTransformInitializerMzscheme
#endif
#ifdef SWIGOCAML
%module itkCenteredVersorTransformInitializerOcaml
#endif
#ifdef SWIGPERL
%module itkCenteredVersorTransformInitializerPerl
#endif
#ifdef SWIGPERL5
%module itkCenteredVersorTransformInitializerPerl5
#endif
#ifdef SWIGPHP
%module itkCenteredVersorTransformInitializerPhp
#endif
#ifdef SWIGPHP4
%module itkCenteredVersorTransformInitializerPhp4
#endif
#ifdef SWIGPHP5
%module itkCenteredVersorTransformInitializerPhp5
#endif
#ifdef SWIGPIKE
%module itkCenteredVersorTransformInitializerPike
#endif
#ifdef SWIGPYTHON
%module itkCenteredVersorTransformInitializerPython
#endif
#ifdef SWIGR
%module itkCenteredVersorTransformInitializerR
#endif
#ifdef SWIGRUBY
%module itkCenteredVersorTransformInitializerRuby
#endif
#ifdef SWIGSEXP
%module itkCenteredVersorTransformInitializerSexp
#endif
#ifdef SWIGTCL
%module itkCenteredVersorTransformInitializerTcl
#endif
#ifdef SWIGXML
%module itkCenteredVersorTransformInitializerXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
#include "Calculators.includes"
#include "SpatialObject.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkCenteredTransformInitializer.i


%include itk.i
%include wrap_itkCenteredVersorTransformInitializer_ext.i


 class itkCenteredVersorTransformInitializerID3ID3 : public itkCenteredTransformInitializerVR3DTDID3ID3 {
   public:
     enum  {  InputSpaceDimension = 3 };
     enum  {  OutputSpaceDimension = 3 };
     static itkCenteredVersorTransformInitializerID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void InitializeTransform();
     virtual void SetComputeRotation(bool const _arg);
     virtual bool GetComputeRotation();
     virtual void ComputeRotationOn();
     virtual void ComputeRotationOff();
   private:
     itkCenteredVersorTransformInitializerID3ID3(itkCenteredVersorTransformInitializerID3ID3 const & arg0);
     void operator=(itkCenteredVersorTransformInitializerID3ID3 const & arg0);
   protected:
     itkCenteredVersorTransformInitializerID3ID3();
     ~itkCenteredVersorTransformInitializerID3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkCenteredVersorTransformInitializerID3ID3_Pointer {
   public:
     itkCenteredVersorTransformInitializerID3ID3_Pointer();
     itkCenteredVersorTransformInitializerID3ID3_Pointer(itkCenteredVersorTransformInitializerID3ID3_Pointer const & p);
     itkCenteredVersorTransformInitializerID3ID3_Pointer(itkCenteredVersorTransformInitializerID3ID3 * p);
     ~itkCenteredVersorTransformInitializerID3ID3_Pointer();
     itkCenteredVersorTransformInitializerID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkCenteredVersorTransformInitializerID3ID3 * GetPointer() const;
     bool operator<(itkCenteredVersorTransformInitializerID3ID3_Pointer const & r) const;
     bool operator>(itkCenteredVersorTransformInitializerID3ID3_Pointer const & r) const;
     bool operator<=(itkCenteredVersorTransformInitializerID3ID3_Pointer const & r) const;
     bool operator>=(itkCenteredVersorTransformInitializerID3ID3_Pointer const & r) const;
     itkCenteredVersorTransformInitializerID3ID3_Pointer & operator=(itkCenteredVersorTransformInitializerID3ID3_Pointer const & r);
     itkCenteredVersorTransformInitializerID3ID3_Pointer & operator=(itkCenteredVersorTransformInitializerID3ID3 * r);
     itkCenteredVersorTransformInitializerID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkCenteredVersorTransformInitializerIF3IF3 : public itkCenteredTransformInitializerVR3DTDIF3IF3 {
   public:
     enum  {  InputSpaceDimension = 3 };
     enum  {  OutputSpaceDimension = 3 };
     static itkCenteredVersorTransformInitializerIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void InitializeTransform();
     virtual void SetComputeRotation(bool const _arg);
     virtual bool GetComputeRotation();
     virtual void ComputeRotationOn();
     virtual void ComputeRotationOff();
   private:
     itkCenteredVersorTransformInitializerIF3IF3(itkCenteredVersorTransformInitializerIF3IF3 const & arg0);
     void operator=(itkCenteredVersorTransformInitializerIF3IF3 const & arg0);
   protected:
     itkCenteredVersorTransformInitializerIF3IF3();
     ~itkCenteredVersorTransformInitializerIF3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkCenteredVersorTransformInitializerIF3IF3_Pointer {
   public:
     itkCenteredVersorTransformInitializerIF3IF3_Pointer();
     itkCenteredVersorTransformInitializerIF3IF3_Pointer(itkCenteredVersorTransformInitializerIF3IF3_Pointer const & p);
     itkCenteredVersorTransformInitializerIF3IF3_Pointer(itkCenteredVersorTransformInitializerIF3IF3 * p);
     ~itkCenteredVersorTransformInitializerIF3IF3_Pointer();
     itkCenteredVersorTransformInitializerIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkCenteredVersorTransformInitializerIF3IF3 * GetPointer() const;
     bool operator<(itkCenteredVersorTransformInitializerIF3IF3_Pointer const & r) const;
     bool operator>(itkCenteredVersorTransformInitializerIF3IF3_Pointer const & r) const;
     bool operator<=(itkCenteredVersorTransformInitializerIF3IF3_Pointer const & r) const;
     bool operator>=(itkCenteredVersorTransformInitializerIF3IF3_Pointer const & r) const;
     itkCenteredVersorTransformInitializerIF3IF3_Pointer & operator=(itkCenteredVersorTransformInitializerIF3IF3_Pointer const & r);
     itkCenteredVersorTransformInitializerIF3IF3_Pointer & operator=(itkCenteredVersorTransformInitializerIF3IF3 * r);
     itkCenteredVersorTransformInitializerIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkCenteredVersorTransformInitializerIUC3IUC3 : public itkCenteredTransformInitializerVR3DTDIUC3IUC3 {
   public:
     enum  {  InputSpaceDimension = 3 };
     enum  {  OutputSpaceDimension = 3 };
     static itkCenteredVersorTransformInitializerIUC3IUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void InitializeTransform();
     virtual void SetComputeRotation(bool const _arg);
     virtual bool GetComputeRotation();
     virtual void ComputeRotationOn();
     virtual void ComputeRotationOff();
   private:
     itkCenteredVersorTransformInitializerIUC3IUC3(itkCenteredVersorTransformInitializerIUC3IUC3 const & arg0);
     void operator=(itkCenteredVersorTransformInitializerIUC3IUC3 const & arg0);
   protected:
     itkCenteredVersorTransformInitializerIUC3IUC3();
     ~itkCenteredVersorTransformInitializerIUC3IUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkCenteredVersorTransformInitializerIUC3IUC3_Pointer {
   public:
     itkCenteredVersorTransformInitializerIUC3IUC3_Pointer();
     itkCenteredVersorTransformInitializerIUC3IUC3_Pointer(itkCenteredVersorTransformInitializerIUC3IUC3_Pointer const & p);
     itkCenteredVersorTransformInitializerIUC3IUC3_Pointer(itkCenteredVersorTransformInitializerIUC3IUC3 * p);
     ~itkCenteredVersorTransformInitializerIUC3IUC3_Pointer();
     itkCenteredVersorTransformInitializerIUC3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkCenteredVersorTransformInitializerIUC3IUC3 * GetPointer() const;
     bool operator<(itkCenteredVersorTransformInitializerIUC3IUC3_Pointer const & r) const;
     bool operator>(itkCenteredVersorTransformInitializerIUC3IUC3_Pointer const & r) const;
     bool operator<=(itkCenteredVersorTransformInitializerIUC3IUC3_Pointer const & r) const;
     bool operator>=(itkCenteredVersorTransformInitializerIUC3IUC3_Pointer const & r) const;
     itkCenteredVersorTransformInitializerIUC3IUC3_Pointer & operator=(itkCenteredVersorTransformInitializerIUC3IUC3_Pointer const & r);
     itkCenteredVersorTransformInitializerIUC3IUC3_Pointer & operator=(itkCenteredVersorTransformInitializerIUC3IUC3 * r);
     itkCenteredVersorTransformInitializerIUC3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkCenteredVersorTransformInitializerIUL3IUL3 : public itkCenteredTransformInitializerVR3DTDIUL3IUL3 {
   public:
     enum  {  InputSpaceDimension = 3 };
     enum  {  OutputSpaceDimension = 3 };
     static itkCenteredVersorTransformInitializerIUL3IUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void InitializeTransform();
     virtual void SetComputeRotation(bool const _arg);
     virtual bool GetComputeRotation();
     virtual void ComputeRotationOn();
     virtual void ComputeRotationOff();
   private:
     itkCenteredVersorTransformInitializerIUL3IUL3(itkCenteredVersorTransformInitializerIUL3IUL3 const & arg0);
     void operator=(itkCenteredVersorTransformInitializerIUL3IUL3 const & arg0);
   protected:
     itkCenteredVersorTransformInitializerIUL3IUL3();
     ~itkCenteredVersorTransformInitializerIUL3IUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkCenteredVersorTransformInitializerIUL3IUL3_Pointer {
   public:
     itkCenteredVersorTransformInitializerIUL3IUL3_Pointer();
     itkCenteredVersorTransformInitializerIUL3IUL3_Pointer(itkCenteredVersorTransformInitializerIUL3IUL3_Pointer const & p);
     itkCenteredVersorTransformInitializerIUL3IUL3_Pointer(itkCenteredVersorTransformInitializerIUL3IUL3 * p);
     ~itkCenteredVersorTransformInitializerIUL3IUL3_Pointer();
     itkCenteredVersorTransformInitializerIUL3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkCenteredVersorTransformInitializerIUL3IUL3 * GetPointer() const;
     bool operator<(itkCenteredVersorTransformInitializerIUL3IUL3_Pointer const & r) const;
     bool operator>(itkCenteredVersorTransformInitializerIUL3IUL3_Pointer const & r) const;
     bool operator<=(itkCenteredVersorTransformInitializerIUL3IUL3_Pointer const & r) const;
     bool operator>=(itkCenteredVersorTransformInitializerIUL3IUL3_Pointer const & r) const;
     itkCenteredVersorTransformInitializerIUL3IUL3_Pointer & operator=(itkCenteredVersorTransformInitializerIUL3IUL3_Pointer const & r);
     itkCenteredVersorTransformInitializerIUL3IUL3_Pointer & operator=(itkCenteredVersorTransformInitializerIUL3IUL3 * r);
     itkCenteredVersorTransformInitializerIUL3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkCenteredVersorTransformInitializerIUS3IUS3 : public itkCenteredTransformInitializerVR3DTDIUS3IUS3 {
   public:
     enum  {  InputSpaceDimension = 3 };
     enum  {  OutputSpaceDimension = 3 };
     static itkCenteredVersorTransformInitializerIUS3IUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void InitializeTransform();
     virtual void SetComputeRotation(bool const _arg);
     virtual bool GetComputeRotation();
     virtual void ComputeRotationOn();
     virtual void ComputeRotationOff();
   private:
     itkCenteredVersorTransformInitializerIUS3IUS3(itkCenteredVersorTransformInitializerIUS3IUS3 const & arg0);
     void operator=(itkCenteredVersorTransformInitializerIUS3IUS3 const & arg0);
   protected:
     itkCenteredVersorTransformInitializerIUS3IUS3();
     ~itkCenteredVersorTransformInitializerIUS3IUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkCenteredVersorTransformInitializerIUS3IUS3_Pointer {
   public:
     itkCenteredVersorTransformInitializerIUS3IUS3_Pointer();
     itkCenteredVersorTransformInitializerIUS3IUS3_Pointer(itkCenteredVersorTransformInitializerIUS3IUS3_Pointer const & p);
     itkCenteredVersorTransformInitializerIUS3IUS3_Pointer(itkCenteredVersorTransformInitializerIUS3IUS3 * p);
     ~itkCenteredVersorTransformInitializerIUS3IUS3_Pointer();
     itkCenteredVersorTransformInitializerIUS3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkCenteredVersorTransformInitializerIUS3IUS3 * GetPointer() const;
     bool operator<(itkCenteredVersorTransformInitializerIUS3IUS3_Pointer const & r) const;
     bool operator>(itkCenteredVersorTransformInitializerIUS3IUS3_Pointer const & r) const;
     bool operator<=(itkCenteredVersorTransformInitializerIUS3IUS3_Pointer const & r) const;
     bool operator>=(itkCenteredVersorTransformInitializerIUS3IUS3_Pointer const & r) const;
     itkCenteredVersorTransformInitializerIUS3IUS3_Pointer & operator=(itkCenteredVersorTransformInitializerIUS3IUS3_Pointer const & r);
     itkCenteredVersorTransformInitializerIUS3IUS3_Pointer & operator=(itkCenteredVersorTransformInitializerIUS3IUS3 * r);
     itkCenteredVersorTransformInitializerIUS3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


