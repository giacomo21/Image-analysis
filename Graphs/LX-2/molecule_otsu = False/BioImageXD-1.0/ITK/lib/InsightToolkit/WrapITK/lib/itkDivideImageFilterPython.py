# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkDivideImageFilterPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkDivideImageFilterPython', [dirname(__file__)])
        except ImportError:
            import _itkDivideImageFilterPython
            return _itkDivideImageFilterPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkDivideImageFilterPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkDivideImageFilterPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkDivideImageFilterPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKRegionsPython
import ITKCommonBasePython
import itkEventObjectsPython
import pyBasePython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkImagePython
import itkFixedArrayPython
import itkCovariantVectorPython
import vnl_vectorPython
import vcl_complexPython
import vnl_matrixPython
import itkVectorPython
import vnl_vector_refPython
import itkPointPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkRGBPixelPython
import itkInPlaceImageFilterBPython
import itkImageToImageFilterBPython
import itkImageSourcePython
import itkVectorImagePython
import itkVariableLengthVectorPython
import itkInPlaceImageFilterAPython
import itkImageToImageFilterAPython
def itkDivideImageFilterICF3IF3ICF3_New():
  return itkDivideImageFilterICF3IF3ICF3.New()

def itkDivideImageFilterICF3IF3ICF3_Superclass_New():
  return itkDivideImageFilterICF3IF3ICF3_Superclass.New()

def itkDivideImageFilterICF2IF2ICF2_New():
  return itkDivideImageFilterICF2IF2ICF2.New()

def itkDivideImageFilterICF2IF2ICF2_Superclass_New():
  return itkDivideImageFilterICF2IF2ICF2_Superclass.New()

def itkDivideImageFilterICF3ICF3ICF3_New():
  return itkDivideImageFilterICF3ICF3ICF3.New()

def itkDivideImageFilterICF3ICF3ICF3_Superclass_New():
  return itkDivideImageFilterICF3ICF3ICF3_Superclass.New()

def itkDivideImageFilterICF2ICF2ICF2_New():
  return itkDivideImageFilterICF2ICF2ICF2.New()

def itkDivideImageFilterICF2ICF2ICF2_Superclass_New():
  return itkDivideImageFilterICF2ICF2ICF2_Superclass.New()

def itkDivideImageFilterID3ID3ID3_New():
  return itkDivideImageFilterID3ID3ID3.New()

def itkDivideImageFilterID3ID3ID3_Superclass_New():
  return itkDivideImageFilterID3ID3ID3_Superclass.New()

def itkDivideImageFilterID2ID2ID2_New():
  return itkDivideImageFilterID2ID2ID2.New()

def itkDivideImageFilterID2ID2ID2_Superclass_New():
  return itkDivideImageFilterID2ID2ID2_Superclass.New()

def itkDivideImageFilterIF3IF3IF3_New():
  return itkDivideImageFilterIF3IF3IF3.New()

def itkDivideImageFilterIF3IF3IF3_Superclass_New():
  return itkDivideImageFilterIF3IF3IF3_Superclass.New()

def itkDivideImageFilterIF2IF2IF2_New():
  return itkDivideImageFilterIF2IF2IF2.New()

def itkDivideImageFilterIF2IF2IF2_Superclass_New():
  return itkDivideImageFilterIF2IF2IF2_Superclass.New()

def itkDivideImageFilterIUS3IUS3IUS3_New():
  return itkDivideImageFilterIUS3IUS3IUS3.New()

def itkDivideImageFilterIUS3IUS3IUS3_Superclass_New():
  return itkDivideImageFilterIUS3IUS3IUS3_Superclass.New()

def itkDivideImageFilterIUS2IUS2IUS2_New():
  return itkDivideImageFilterIUS2IUS2IUS2.New()

def itkDivideImageFilterIUS2IUS2IUS2_Superclass_New():
  return itkDivideImageFilterIUS2IUS2IUS2_Superclass.New()

def itkDivideImageFilterIUL3IUL3IUL3_New():
  return itkDivideImageFilterIUL3IUL3IUL3.New()

def itkDivideImageFilterIUL3IUL3IUL3_Superclass_New():
  return itkDivideImageFilterIUL3IUL3IUL3_Superclass.New()

def itkDivideImageFilterIUL2IUL2IUL2_New():
  return itkDivideImageFilterIUL2IUL2IUL2.New()

def itkDivideImageFilterIUL2IUL2IUL2_Superclass_New():
  return itkDivideImageFilterIUL2IUL2IUL2_Superclass.New()

def itkDivideImageFilterIUC3IUC3IUC3_New():
  return itkDivideImageFilterIUC3IUC3IUC3.New()

def itkDivideImageFilterIUC3IUC3IUC3_Superclass_New():
  return itkDivideImageFilterIUC3IUC3IUC3_Superclass.New()

def itkDivideImageFilterIUC2IUC2IUC2_New():
  return itkDivideImageFilterIUC2IUC2IUC2.New()

def itkDivideImageFilterIUC2IUC2IUC2_Superclass_New():
  return itkDivideImageFilterIUC2IUC2IUC2_Superclass.New()

class itkDivideImageFilterICF2ICF2ICF2_Superclass(itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ICF2):
    """Proxy of C++ itkDivideImageFilterICF2ICF2ICF2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImage1Dimension = _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Superclass_InputImage1Dimension
    InputImage2Dimension = _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Superclass_InputImage2Dimension
    OutputImageDimension = _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Superclass_OutputImageDimension
    SameDimensionCheck1 = _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Superclass_SameDimensionCheck1
    SameDimensionCheck2 = _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Superclass_SameDimensionCheck2
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetInput1(self, *args):
        """SetInput1(self, itkImageCF2 image1)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Superclass_SetInput1(self, *args)

    def SetInput2(self, *args):
        """SetInput2(self, itkImageCF2 image2)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Superclass_SetInput2(self, *args)

    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Function::Div<(std::complex<(float)>,std::complex<(float)>,std::complex<(float)>)>
        GetFunctor(self) -> itk::Function::Div<(std::complex<(float)>,std::complex<(float)>,std::complex<(float)>)>
        """
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Function::Div<(std::complex<(float)>,std::complex<(float)>,std::complex<(float)>)> functor)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICF2ICF2ICF2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterICF2ICF2ICF2_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterICF2ICF2ICF2_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICF2ICF2ICF2_Superclass
        
        Create a new object of the class itkDivideImageFilterICF2ICF2ICF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterICF2ICF2ICF2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterICF2ICF2ICF2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterICF2ICF2ICF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterICF2ICF2ICF2_Superclass.SetInput1 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Superclass_SetInput1,None,itkDivideImageFilterICF2ICF2ICF2_Superclass)
itkDivideImageFilterICF2ICF2ICF2_Superclass.SetInput2 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Superclass_SetInput2,None,itkDivideImageFilterICF2ICF2ICF2_Superclass)
itkDivideImageFilterICF2ICF2ICF2_Superclass.GetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Superclass_GetFunctor,None,itkDivideImageFilterICF2ICF2ICF2_Superclass)
itkDivideImageFilterICF2ICF2ICF2_Superclass.SetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Superclass_SetFunctor,None,itkDivideImageFilterICF2ICF2ICF2_Superclass)
itkDivideImageFilterICF2ICF2ICF2_Superclass.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Superclass_GetPointer,None,itkDivideImageFilterICF2ICF2ICF2_Superclass)
itkDivideImageFilterICF2ICF2ICF2_Superclass_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Superclass_swigregister
itkDivideImageFilterICF2ICF2ICF2_Superclass_swigregister(itkDivideImageFilterICF2ICF2ICF2_Superclass)

def itkDivideImageFilterICF2ICF2ICF2_Superclass___New_orig__():
  """itkDivideImageFilterICF2ICF2ICF2_Superclass___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Superclass___New_orig__()

def itkDivideImageFilterICF2ICF2ICF2_Superclass_cast(*args):
  """itkDivideImageFilterICF2ICF2ICF2_Superclass_cast(itkLightObject obj) -> itkDivideImageFilterICF2ICF2ICF2_Superclass"""
  return _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Superclass_cast(*args)

class itkDivideImageFilterICF2IF2ICF2_Superclass(itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF2ICF2):
    """Proxy of C++ itkDivideImageFilterICF2IF2ICF2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImage1Dimension = _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Superclass_InputImage1Dimension
    InputImage2Dimension = _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Superclass_InputImage2Dimension
    OutputImageDimension = _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Superclass_OutputImageDimension
    SameDimensionCheck1 = _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Superclass_SameDimensionCheck1
    SameDimensionCheck2 = _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Superclass_SameDimensionCheck2
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetInput1(self, *args):
        """SetInput1(self, itkImageCF2 image1)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Superclass_SetInput1(self, *args)

    def SetInput2(self, *args):
        """SetInput2(self, itkImageF2 image2)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Superclass_SetInput2(self, *args)

    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Function::Div<(std::complex<(float)>,float,std::complex<(float)>)>
        GetFunctor(self) -> itk::Function::Div<(std::complex<(float)>,float,std::complex<(float)>)>
        """
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Function::Div<(std::complex<(float)>,float,std::complex<(float)>)> functor)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICF2IF2ICF2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterICF2IF2ICF2_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterICF2IF2ICF2_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICF2IF2ICF2_Superclass
        
        Create a new object of the class itkDivideImageFilterICF2IF2ICF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterICF2IF2ICF2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterICF2IF2ICF2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterICF2IF2ICF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterICF2IF2ICF2_Superclass.SetInput1 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Superclass_SetInput1,None,itkDivideImageFilterICF2IF2ICF2_Superclass)
itkDivideImageFilterICF2IF2ICF2_Superclass.SetInput2 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Superclass_SetInput2,None,itkDivideImageFilterICF2IF2ICF2_Superclass)
itkDivideImageFilterICF2IF2ICF2_Superclass.GetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Superclass_GetFunctor,None,itkDivideImageFilterICF2IF2ICF2_Superclass)
itkDivideImageFilterICF2IF2ICF2_Superclass.SetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Superclass_SetFunctor,None,itkDivideImageFilterICF2IF2ICF2_Superclass)
itkDivideImageFilterICF2IF2ICF2_Superclass.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Superclass_GetPointer,None,itkDivideImageFilterICF2IF2ICF2_Superclass)
itkDivideImageFilterICF2IF2ICF2_Superclass_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Superclass_swigregister
itkDivideImageFilterICF2IF2ICF2_Superclass_swigregister(itkDivideImageFilterICF2IF2ICF2_Superclass)

def itkDivideImageFilterICF2IF2ICF2_Superclass___New_orig__():
  """itkDivideImageFilterICF2IF2ICF2_Superclass___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Superclass___New_orig__()

def itkDivideImageFilterICF2IF2ICF2_Superclass_cast(*args):
  """itkDivideImageFilterICF2IF2ICF2_Superclass_cast(itkLightObject obj) -> itkDivideImageFilterICF2IF2ICF2_Superclass"""
  return _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Superclass_cast(*args)

class itkDivideImageFilterICF3ICF3ICF3_Superclass(itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF3):
    """Proxy of C++ itkDivideImageFilterICF3ICF3ICF3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImage1Dimension = _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Superclass_InputImage1Dimension
    InputImage2Dimension = _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Superclass_InputImage2Dimension
    OutputImageDimension = _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Superclass_OutputImageDimension
    SameDimensionCheck1 = _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Superclass_SameDimensionCheck1
    SameDimensionCheck2 = _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Superclass_SameDimensionCheck2
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetInput1(self, *args):
        """SetInput1(self, itkImageCF3 image1)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Superclass_SetInput1(self, *args)

    def SetInput2(self, *args):
        """SetInput2(self, itkImageCF3 image2)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Superclass_SetInput2(self, *args)

    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Function::Div<(std::complex<(float)>,std::complex<(float)>,std::complex<(float)>)>
        GetFunctor(self) -> itk::Function::Div<(std::complex<(float)>,std::complex<(float)>,std::complex<(float)>)>
        """
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Function::Div<(std::complex<(float)>,std::complex<(float)>,std::complex<(float)>)> functor)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICF3ICF3ICF3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterICF3ICF3ICF3_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterICF3ICF3ICF3_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICF3ICF3ICF3_Superclass
        
        Create a new object of the class itkDivideImageFilterICF3ICF3ICF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterICF3ICF3ICF3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterICF3ICF3ICF3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterICF3ICF3ICF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterICF3ICF3ICF3_Superclass.SetInput1 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Superclass_SetInput1,None,itkDivideImageFilterICF3ICF3ICF3_Superclass)
itkDivideImageFilterICF3ICF3ICF3_Superclass.SetInput2 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Superclass_SetInput2,None,itkDivideImageFilterICF3ICF3ICF3_Superclass)
itkDivideImageFilterICF3ICF3ICF3_Superclass.GetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Superclass_GetFunctor,None,itkDivideImageFilterICF3ICF3ICF3_Superclass)
itkDivideImageFilterICF3ICF3ICF3_Superclass.SetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Superclass_SetFunctor,None,itkDivideImageFilterICF3ICF3ICF3_Superclass)
itkDivideImageFilterICF3ICF3ICF3_Superclass.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Superclass_GetPointer,None,itkDivideImageFilterICF3ICF3ICF3_Superclass)
itkDivideImageFilterICF3ICF3ICF3_Superclass_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Superclass_swigregister
itkDivideImageFilterICF3ICF3ICF3_Superclass_swigregister(itkDivideImageFilterICF3ICF3ICF3_Superclass)

def itkDivideImageFilterICF3ICF3ICF3_Superclass___New_orig__():
  """itkDivideImageFilterICF3ICF3ICF3_Superclass___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Superclass___New_orig__()

def itkDivideImageFilterICF3ICF3ICF3_Superclass_cast(*args):
  """itkDivideImageFilterICF3ICF3ICF3_Superclass_cast(itkLightObject obj) -> itkDivideImageFilterICF3ICF3ICF3_Superclass"""
  return _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Superclass_cast(*args)

class itkDivideImageFilterICF3IF3ICF3_Superclass(itkInPlaceImageFilterBPython.itkInPlaceImageFilterICF3ICF3):
    """Proxy of C++ itkDivideImageFilterICF3IF3ICF3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImage1Dimension = _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Superclass_InputImage1Dimension
    InputImage2Dimension = _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Superclass_InputImage2Dimension
    OutputImageDimension = _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Superclass_OutputImageDimension
    SameDimensionCheck1 = _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Superclass_SameDimensionCheck1
    SameDimensionCheck2 = _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Superclass_SameDimensionCheck2
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetInput1(self, *args):
        """SetInput1(self, itkImageCF3 image1)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Superclass_SetInput1(self, *args)

    def SetInput2(self, *args):
        """SetInput2(self, itkImageF3 image2)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Superclass_SetInput2(self, *args)

    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Function::Div<(std::complex<(float)>,float,std::complex<(float)>)>
        GetFunctor(self) -> itk::Function::Div<(std::complex<(float)>,float,std::complex<(float)>)>
        """
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Function::Div<(std::complex<(float)>,float,std::complex<(float)>)> functor)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICF3IF3ICF3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterICF3IF3ICF3_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterICF3IF3ICF3_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICF3IF3ICF3_Superclass
        
        Create a new object of the class itkDivideImageFilterICF3IF3ICF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterICF3IF3ICF3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterICF3IF3ICF3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterICF3IF3ICF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterICF3IF3ICF3_Superclass.SetInput1 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Superclass_SetInput1,None,itkDivideImageFilterICF3IF3ICF3_Superclass)
itkDivideImageFilterICF3IF3ICF3_Superclass.SetInput2 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Superclass_SetInput2,None,itkDivideImageFilterICF3IF3ICF3_Superclass)
itkDivideImageFilterICF3IF3ICF3_Superclass.GetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Superclass_GetFunctor,None,itkDivideImageFilterICF3IF3ICF3_Superclass)
itkDivideImageFilterICF3IF3ICF3_Superclass.SetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Superclass_SetFunctor,None,itkDivideImageFilterICF3IF3ICF3_Superclass)
itkDivideImageFilterICF3IF3ICF3_Superclass.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Superclass_GetPointer,None,itkDivideImageFilterICF3IF3ICF3_Superclass)
itkDivideImageFilterICF3IF3ICF3_Superclass_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Superclass_swigregister
itkDivideImageFilterICF3IF3ICF3_Superclass_swigregister(itkDivideImageFilterICF3IF3ICF3_Superclass)

def itkDivideImageFilterICF3IF3ICF3_Superclass___New_orig__():
  """itkDivideImageFilterICF3IF3ICF3_Superclass___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Superclass___New_orig__()

def itkDivideImageFilterICF3IF3ICF3_Superclass_cast(*args):
  """itkDivideImageFilterICF3IF3ICF3_Superclass_cast(itkLightObject obj) -> itkDivideImageFilterICF3IF3ICF3_Superclass"""
  return _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Superclass_cast(*args)

class itkDivideImageFilterID2ID2ID2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterID2ID2):
    """Proxy of C++ itkDivideImageFilterID2ID2ID2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImage1Dimension = _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Superclass_InputImage1Dimension
    InputImage2Dimension = _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Superclass_InputImage2Dimension
    OutputImageDimension = _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Superclass_OutputImageDimension
    SameDimensionCheck1 = _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Superclass_SameDimensionCheck1
    SameDimensionCheck2 = _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Superclass_SameDimensionCheck2
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetInput1(self, *args):
        """SetInput1(self, itkImageD2 image1)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Superclass_SetInput1(self, *args)

    def SetInput2(self, *args):
        """SetInput2(self, itkImageD2 image2)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Superclass_SetInput2(self, *args)

    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Function::Div<(double,double,double)>
        GetFunctor(self) -> itk::Function::Div<(double,double,double)>
        """
        return _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Function::Div<(double,double,double)> functor)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterID2ID2ID2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterID2ID2ID2_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterID2ID2ID2_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterID2ID2ID2_Superclass
        
        Create a new object of the class itkDivideImageFilterID2ID2ID2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterID2ID2ID2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterID2ID2ID2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterID2ID2ID2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterID2ID2ID2_Superclass.SetInput1 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Superclass_SetInput1,None,itkDivideImageFilterID2ID2ID2_Superclass)
itkDivideImageFilterID2ID2ID2_Superclass.SetInput2 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Superclass_SetInput2,None,itkDivideImageFilterID2ID2ID2_Superclass)
itkDivideImageFilterID2ID2ID2_Superclass.GetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Superclass_GetFunctor,None,itkDivideImageFilterID2ID2ID2_Superclass)
itkDivideImageFilterID2ID2ID2_Superclass.SetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Superclass_SetFunctor,None,itkDivideImageFilterID2ID2ID2_Superclass)
itkDivideImageFilterID2ID2ID2_Superclass.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Superclass_GetPointer,None,itkDivideImageFilterID2ID2ID2_Superclass)
itkDivideImageFilterID2ID2ID2_Superclass_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Superclass_swigregister
itkDivideImageFilterID2ID2ID2_Superclass_swigregister(itkDivideImageFilterID2ID2ID2_Superclass)

def itkDivideImageFilterID2ID2ID2_Superclass___New_orig__():
  """itkDivideImageFilterID2ID2ID2_Superclass___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Superclass___New_orig__()

def itkDivideImageFilterID2ID2ID2_Superclass_cast(*args):
  """itkDivideImageFilterID2ID2ID2_Superclass_cast(itkLightObject obj) -> itkDivideImageFilterID2ID2ID2_Superclass"""
  return _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Superclass_cast(*args)

class itkDivideImageFilterID3ID3ID3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterID3ID3):
    """Proxy of C++ itkDivideImageFilterID3ID3ID3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImage1Dimension = _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Superclass_InputImage1Dimension
    InputImage2Dimension = _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Superclass_InputImage2Dimension
    OutputImageDimension = _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Superclass_OutputImageDimension
    SameDimensionCheck1 = _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Superclass_SameDimensionCheck1
    SameDimensionCheck2 = _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Superclass_SameDimensionCheck2
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetInput1(self, *args):
        """SetInput1(self, itkImageD3 image1)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Superclass_SetInput1(self, *args)

    def SetInput2(self, *args):
        """SetInput2(self, itkImageD3 image2)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Superclass_SetInput2(self, *args)

    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Function::Div<(double,double,double)>
        GetFunctor(self) -> itk::Function::Div<(double,double,double)>
        """
        return _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Function::Div<(double,double,double)> functor)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterID3ID3ID3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterID3ID3ID3_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterID3ID3ID3_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterID3ID3ID3_Superclass
        
        Create a new object of the class itkDivideImageFilterID3ID3ID3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterID3ID3ID3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterID3ID3ID3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterID3ID3ID3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterID3ID3ID3_Superclass.SetInput1 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Superclass_SetInput1,None,itkDivideImageFilterID3ID3ID3_Superclass)
itkDivideImageFilterID3ID3ID3_Superclass.SetInput2 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Superclass_SetInput2,None,itkDivideImageFilterID3ID3ID3_Superclass)
itkDivideImageFilterID3ID3ID3_Superclass.GetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Superclass_GetFunctor,None,itkDivideImageFilterID3ID3ID3_Superclass)
itkDivideImageFilterID3ID3ID3_Superclass.SetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Superclass_SetFunctor,None,itkDivideImageFilterID3ID3ID3_Superclass)
itkDivideImageFilterID3ID3ID3_Superclass.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Superclass_GetPointer,None,itkDivideImageFilterID3ID3ID3_Superclass)
itkDivideImageFilterID3ID3ID3_Superclass_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Superclass_swigregister
itkDivideImageFilterID3ID3ID3_Superclass_swigregister(itkDivideImageFilterID3ID3ID3_Superclass)

def itkDivideImageFilterID3ID3ID3_Superclass___New_orig__():
  """itkDivideImageFilterID3ID3ID3_Superclass___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Superclass___New_orig__()

def itkDivideImageFilterID3ID3ID3_Superclass_cast(*args):
  """itkDivideImageFilterID3ID3ID3_Superclass_cast(itkLightObject obj) -> itkDivideImageFilterID3ID3ID3_Superclass"""
  return _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Superclass_cast(*args)

class itkDivideImageFilterIF2IF2IF2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF2IF2):
    """Proxy of C++ itkDivideImageFilterIF2IF2IF2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImage1Dimension = _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Superclass_InputImage1Dimension
    InputImage2Dimension = _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Superclass_InputImage2Dimension
    OutputImageDimension = _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Superclass_OutputImageDimension
    SameDimensionCheck1 = _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Superclass_SameDimensionCheck1
    SameDimensionCheck2 = _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Superclass_SameDimensionCheck2
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetInput1(self, *args):
        """SetInput1(self, itkImageF2 image1)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Superclass_SetInput1(self, *args)

    def SetInput2(self, *args):
        """SetInput2(self, itkImageF2 image2)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Superclass_SetInput2(self, *args)

    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Function::Div<(float,float,float)>
        GetFunctor(self) -> itk::Function::Div<(float,float,float)>
        """
        return _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Function::Div<(float,float,float)> functor)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIF2IF2IF2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterIF2IF2IF2_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterIF2IF2IF2_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIF2IF2IF2_Superclass
        
        Create a new object of the class itkDivideImageFilterIF2IF2IF2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterIF2IF2IF2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterIF2IF2IF2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIF2IF2IF2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterIF2IF2IF2_Superclass.SetInput1 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Superclass_SetInput1,None,itkDivideImageFilterIF2IF2IF2_Superclass)
itkDivideImageFilterIF2IF2IF2_Superclass.SetInput2 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Superclass_SetInput2,None,itkDivideImageFilterIF2IF2IF2_Superclass)
itkDivideImageFilterIF2IF2IF2_Superclass.GetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Superclass_GetFunctor,None,itkDivideImageFilterIF2IF2IF2_Superclass)
itkDivideImageFilterIF2IF2IF2_Superclass.SetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Superclass_SetFunctor,None,itkDivideImageFilterIF2IF2IF2_Superclass)
itkDivideImageFilterIF2IF2IF2_Superclass.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Superclass_GetPointer,None,itkDivideImageFilterIF2IF2IF2_Superclass)
itkDivideImageFilterIF2IF2IF2_Superclass_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Superclass_swigregister
itkDivideImageFilterIF2IF2IF2_Superclass_swigregister(itkDivideImageFilterIF2IF2IF2_Superclass)

def itkDivideImageFilterIF2IF2IF2_Superclass___New_orig__():
  """itkDivideImageFilterIF2IF2IF2_Superclass___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Superclass___New_orig__()

def itkDivideImageFilterIF2IF2IF2_Superclass_cast(*args):
  """itkDivideImageFilterIF2IF2IF2_Superclass_cast(itkLightObject obj) -> itkDivideImageFilterIF2IF2IF2_Superclass"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Superclass_cast(*args)

class itkDivideImageFilterIF3IF3IF3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIF3IF3):
    """Proxy of C++ itkDivideImageFilterIF3IF3IF3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImage1Dimension = _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Superclass_InputImage1Dimension
    InputImage2Dimension = _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Superclass_InputImage2Dimension
    OutputImageDimension = _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Superclass_OutputImageDimension
    SameDimensionCheck1 = _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Superclass_SameDimensionCheck1
    SameDimensionCheck2 = _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Superclass_SameDimensionCheck2
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetInput1(self, *args):
        """SetInput1(self, itkImageF3 image1)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Superclass_SetInput1(self, *args)

    def SetInput2(self, *args):
        """SetInput2(self, itkImageF3 image2)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Superclass_SetInput2(self, *args)

    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Function::Div<(float,float,float)>
        GetFunctor(self) -> itk::Function::Div<(float,float,float)>
        """
        return _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Function::Div<(float,float,float)> functor)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIF3IF3IF3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterIF3IF3IF3_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterIF3IF3IF3_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIF3IF3IF3_Superclass
        
        Create a new object of the class itkDivideImageFilterIF3IF3IF3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterIF3IF3IF3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterIF3IF3IF3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIF3IF3IF3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterIF3IF3IF3_Superclass.SetInput1 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Superclass_SetInput1,None,itkDivideImageFilterIF3IF3IF3_Superclass)
itkDivideImageFilterIF3IF3IF3_Superclass.SetInput2 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Superclass_SetInput2,None,itkDivideImageFilterIF3IF3IF3_Superclass)
itkDivideImageFilterIF3IF3IF3_Superclass.GetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Superclass_GetFunctor,None,itkDivideImageFilterIF3IF3IF3_Superclass)
itkDivideImageFilterIF3IF3IF3_Superclass.SetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Superclass_SetFunctor,None,itkDivideImageFilterIF3IF3IF3_Superclass)
itkDivideImageFilterIF3IF3IF3_Superclass.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Superclass_GetPointer,None,itkDivideImageFilterIF3IF3IF3_Superclass)
itkDivideImageFilterIF3IF3IF3_Superclass_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Superclass_swigregister
itkDivideImageFilterIF3IF3IF3_Superclass_swigregister(itkDivideImageFilterIF3IF3IF3_Superclass)

def itkDivideImageFilterIF3IF3IF3_Superclass___New_orig__():
  """itkDivideImageFilterIF3IF3IF3_Superclass___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Superclass___New_orig__()

def itkDivideImageFilterIF3IF3IF3_Superclass_cast(*args):
  """itkDivideImageFilterIF3IF3IF3_Superclass_cast(itkLightObject obj) -> itkDivideImageFilterIF3IF3IF3_Superclass"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Superclass_cast(*args)

class itkDivideImageFilterIUC2IUC2IUC2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC2IUC2):
    """Proxy of C++ itkDivideImageFilterIUC2IUC2IUC2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImage1Dimension = _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Superclass_InputImage1Dimension
    InputImage2Dimension = _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Superclass_InputImage2Dimension
    OutputImageDimension = _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Superclass_OutputImageDimension
    SameDimensionCheck1 = _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Superclass_SameDimensionCheck1
    SameDimensionCheck2 = _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Superclass_SameDimensionCheck2
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetInput1(self, *args):
        """SetInput1(self, itkImageUC2 image1)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Superclass_SetInput1(self, *args)

    def SetInput2(self, *args):
        """SetInput2(self, itkImageUC2 image2)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Superclass_SetInput2(self, *args)

    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Function::Div<(unsigned char,unsigned char,unsigned char)>
        GetFunctor(self) -> itk::Function::Div<(unsigned char,unsigned char,unsigned char)>
        """
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Function::Div<(unsigned char,unsigned char,unsigned char)> functor)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUC2IUC2IUC2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterIUC2IUC2IUC2_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterIUC2IUC2IUC2_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUC2IUC2IUC2_Superclass
        
        Create a new object of the class itkDivideImageFilterIUC2IUC2IUC2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterIUC2IUC2IUC2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterIUC2IUC2IUC2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIUC2IUC2IUC2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterIUC2IUC2IUC2_Superclass.SetInput1 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Superclass_SetInput1,None,itkDivideImageFilterIUC2IUC2IUC2_Superclass)
itkDivideImageFilterIUC2IUC2IUC2_Superclass.SetInput2 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Superclass_SetInput2,None,itkDivideImageFilterIUC2IUC2IUC2_Superclass)
itkDivideImageFilterIUC2IUC2IUC2_Superclass.GetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Superclass_GetFunctor,None,itkDivideImageFilterIUC2IUC2IUC2_Superclass)
itkDivideImageFilterIUC2IUC2IUC2_Superclass.SetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Superclass_SetFunctor,None,itkDivideImageFilterIUC2IUC2IUC2_Superclass)
itkDivideImageFilterIUC2IUC2IUC2_Superclass.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Superclass_GetPointer,None,itkDivideImageFilterIUC2IUC2IUC2_Superclass)
itkDivideImageFilterIUC2IUC2IUC2_Superclass_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Superclass_swigregister
itkDivideImageFilterIUC2IUC2IUC2_Superclass_swigregister(itkDivideImageFilterIUC2IUC2IUC2_Superclass)

def itkDivideImageFilterIUC2IUC2IUC2_Superclass___New_orig__():
  """itkDivideImageFilterIUC2IUC2IUC2_Superclass___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Superclass___New_orig__()

def itkDivideImageFilterIUC2IUC2IUC2_Superclass_cast(*args):
  """itkDivideImageFilterIUC2IUC2IUC2_Superclass_cast(itkLightObject obj) -> itkDivideImageFilterIUC2IUC2IUC2_Superclass"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Superclass_cast(*args)

class itkDivideImageFilterIUC3IUC3IUC3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUC3IUC3):
    """Proxy of C++ itkDivideImageFilterIUC3IUC3IUC3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImage1Dimension = _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Superclass_InputImage1Dimension
    InputImage2Dimension = _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Superclass_InputImage2Dimension
    OutputImageDimension = _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Superclass_OutputImageDimension
    SameDimensionCheck1 = _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Superclass_SameDimensionCheck1
    SameDimensionCheck2 = _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Superclass_SameDimensionCheck2
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetInput1(self, *args):
        """SetInput1(self, itkImageUC3 image1)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Superclass_SetInput1(self, *args)

    def SetInput2(self, *args):
        """SetInput2(self, itkImageUC3 image2)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Superclass_SetInput2(self, *args)

    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Function::Div<(unsigned char,unsigned char,unsigned char)>
        GetFunctor(self) -> itk::Function::Div<(unsigned char,unsigned char,unsigned char)>
        """
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Function::Div<(unsigned char,unsigned char,unsigned char)> functor)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUC3IUC3IUC3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterIUC3IUC3IUC3_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterIUC3IUC3IUC3_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUC3IUC3IUC3_Superclass
        
        Create a new object of the class itkDivideImageFilterIUC3IUC3IUC3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterIUC3IUC3IUC3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterIUC3IUC3IUC3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIUC3IUC3IUC3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterIUC3IUC3IUC3_Superclass.SetInput1 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Superclass_SetInput1,None,itkDivideImageFilterIUC3IUC3IUC3_Superclass)
itkDivideImageFilterIUC3IUC3IUC3_Superclass.SetInput2 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Superclass_SetInput2,None,itkDivideImageFilterIUC3IUC3IUC3_Superclass)
itkDivideImageFilterIUC3IUC3IUC3_Superclass.GetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Superclass_GetFunctor,None,itkDivideImageFilterIUC3IUC3IUC3_Superclass)
itkDivideImageFilterIUC3IUC3IUC3_Superclass.SetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Superclass_SetFunctor,None,itkDivideImageFilterIUC3IUC3IUC3_Superclass)
itkDivideImageFilterIUC3IUC3IUC3_Superclass.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Superclass_GetPointer,None,itkDivideImageFilterIUC3IUC3IUC3_Superclass)
itkDivideImageFilterIUC3IUC3IUC3_Superclass_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Superclass_swigregister
itkDivideImageFilterIUC3IUC3IUC3_Superclass_swigregister(itkDivideImageFilterIUC3IUC3IUC3_Superclass)

def itkDivideImageFilterIUC3IUC3IUC3_Superclass___New_orig__():
  """itkDivideImageFilterIUC3IUC3IUC3_Superclass___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Superclass___New_orig__()

def itkDivideImageFilterIUC3IUC3IUC3_Superclass_cast(*args):
  """itkDivideImageFilterIUC3IUC3IUC3_Superclass_cast(itkLightObject obj) -> itkDivideImageFilterIUC3IUC3IUC3_Superclass"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Superclass_cast(*args)

class itkDivideImageFilterIUL2IUL2IUL2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL2IUL2):
    """Proxy of C++ itkDivideImageFilterIUL2IUL2IUL2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImage1Dimension = _itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_Superclass_InputImage1Dimension
    InputImage2Dimension = _itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_Superclass_InputImage2Dimension
    OutputImageDimension = _itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_Superclass_OutputImageDimension
    SameDimensionCheck1 = _itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_Superclass_SameDimensionCheck1
    SameDimensionCheck2 = _itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_Superclass_SameDimensionCheck2
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetInput1(self, *args):
        """SetInput1(self, itkImageUL2 image1)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_Superclass_SetInput1(self, *args)

    def SetInput2(self, *args):
        """SetInput2(self, itkImageUL2 image2)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_Superclass_SetInput2(self, *args)

    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Function::Div<(unsigned long,unsigned long,unsigned long)>
        GetFunctor(self) -> itk::Function::Div<(unsigned long,unsigned long,unsigned long)>
        """
        return _itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Function::Div<(unsigned long,unsigned long,unsigned long)> functor)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUL2IUL2IUL2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterIUL2IUL2IUL2_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterIUL2IUL2IUL2_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUL2IUL2IUL2_Superclass
        
        Create a new object of the class itkDivideImageFilterIUL2IUL2IUL2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterIUL2IUL2IUL2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterIUL2IUL2IUL2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIUL2IUL2IUL2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterIUL2IUL2IUL2_Superclass.SetInput1 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_Superclass_SetInput1,None,itkDivideImageFilterIUL2IUL2IUL2_Superclass)
itkDivideImageFilterIUL2IUL2IUL2_Superclass.SetInput2 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_Superclass_SetInput2,None,itkDivideImageFilterIUL2IUL2IUL2_Superclass)
itkDivideImageFilterIUL2IUL2IUL2_Superclass.GetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_Superclass_GetFunctor,None,itkDivideImageFilterIUL2IUL2IUL2_Superclass)
itkDivideImageFilterIUL2IUL2IUL2_Superclass.SetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_Superclass_SetFunctor,None,itkDivideImageFilterIUL2IUL2IUL2_Superclass)
itkDivideImageFilterIUL2IUL2IUL2_Superclass.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_Superclass_GetPointer,None,itkDivideImageFilterIUL2IUL2IUL2_Superclass)
itkDivideImageFilterIUL2IUL2IUL2_Superclass_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_Superclass_swigregister
itkDivideImageFilterIUL2IUL2IUL2_Superclass_swigregister(itkDivideImageFilterIUL2IUL2IUL2_Superclass)

def itkDivideImageFilterIUL2IUL2IUL2_Superclass___New_orig__():
  """itkDivideImageFilterIUL2IUL2IUL2_Superclass___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_Superclass___New_orig__()

def itkDivideImageFilterIUL2IUL2IUL2_Superclass_cast(*args):
  """itkDivideImageFilterIUL2IUL2IUL2_Superclass_cast(itkLightObject obj) -> itkDivideImageFilterIUL2IUL2IUL2_Superclass"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_Superclass_cast(*args)

class itkDivideImageFilterIUL3IUL3IUL3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUL3IUL3):
    """Proxy of C++ itkDivideImageFilterIUL3IUL3IUL3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImage1Dimension = _itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_Superclass_InputImage1Dimension
    InputImage2Dimension = _itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_Superclass_InputImage2Dimension
    OutputImageDimension = _itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_Superclass_OutputImageDimension
    SameDimensionCheck1 = _itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_Superclass_SameDimensionCheck1
    SameDimensionCheck2 = _itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_Superclass_SameDimensionCheck2
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetInput1(self, *args):
        """SetInput1(self, itkImageUL3 image1)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_Superclass_SetInput1(self, *args)

    def SetInput2(self, *args):
        """SetInput2(self, itkImageUL3 image2)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_Superclass_SetInput2(self, *args)

    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Function::Div<(unsigned long,unsigned long,unsigned long)>
        GetFunctor(self) -> itk::Function::Div<(unsigned long,unsigned long,unsigned long)>
        """
        return _itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Function::Div<(unsigned long,unsigned long,unsigned long)> functor)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUL3IUL3IUL3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterIUL3IUL3IUL3_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterIUL3IUL3IUL3_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUL3IUL3IUL3_Superclass
        
        Create a new object of the class itkDivideImageFilterIUL3IUL3IUL3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterIUL3IUL3IUL3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterIUL3IUL3IUL3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIUL3IUL3IUL3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterIUL3IUL3IUL3_Superclass.SetInput1 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_Superclass_SetInput1,None,itkDivideImageFilterIUL3IUL3IUL3_Superclass)
itkDivideImageFilterIUL3IUL3IUL3_Superclass.SetInput2 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_Superclass_SetInput2,None,itkDivideImageFilterIUL3IUL3IUL3_Superclass)
itkDivideImageFilterIUL3IUL3IUL3_Superclass.GetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_Superclass_GetFunctor,None,itkDivideImageFilterIUL3IUL3IUL3_Superclass)
itkDivideImageFilterIUL3IUL3IUL3_Superclass.SetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_Superclass_SetFunctor,None,itkDivideImageFilterIUL3IUL3IUL3_Superclass)
itkDivideImageFilterIUL3IUL3IUL3_Superclass.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_Superclass_GetPointer,None,itkDivideImageFilterIUL3IUL3IUL3_Superclass)
itkDivideImageFilterIUL3IUL3IUL3_Superclass_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_Superclass_swigregister
itkDivideImageFilterIUL3IUL3IUL3_Superclass_swigregister(itkDivideImageFilterIUL3IUL3IUL3_Superclass)

def itkDivideImageFilterIUL3IUL3IUL3_Superclass___New_orig__():
  """itkDivideImageFilterIUL3IUL3IUL3_Superclass___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_Superclass___New_orig__()

def itkDivideImageFilterIUL3IUL3IUL3_Superclass_cast(*args):
  """itkDivideImageFilterIUL3IUL3IUL3_Superclass_cast(itkLightObject obj) -> itkDivideImageFilterIUL3IUL3IUL3_Superclass"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_Superclass_cast(*args)

class itkDivideImageFilterIUS2IUS2IUS2_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS2IUS2):
    """Proxy of C++ itkDivideImageFilterIUS2IUS2IUS2_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImage1Dimension = _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Superclass_InputImage1Dimension
    InputImage2Dimension = _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Superclass_InputImage2Dimension
    OutputImageDimension = _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Superclass_OutputImageDimension
    SameDimensionCheck1 = _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Superclass_SameDimensionCheck1
    SameDimensionCheck2 = _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Superclass_SameDimensionCheck2
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetInput1(self, *args):
        """SetInput1(self, itkImageUS2 image1)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Superclass_SetInput1(self, *args)

    def SetInput2(self, *args):
        """SetInput2(self, itkImageUS2 image2)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Superclass_SetInput2(self, *args)

    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Function::Div<(unsigned short,unsigned short,unsigned short)>
        GetFunctor(self) -> itk::Function::Div<(unsigned short,unsigned short,unsigned short)>
        """
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Function::Div<(unsigned short,unsigned short,unsigned short)> functor)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUS2IUS2IUS2_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterIUS2IUS2IUS2_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterIUS2IUS2IUS2_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUS2IUS2IUS2_Superclass
        
        Create a new object of the class itkDivideImageFilterIUS2IUS2IUS2_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterIUS2IUS2IUS2_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterIUS2IUS2IUS2_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIUS2IUS2IUS2_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterIUS2IUS2IUS2_Superclass.SetInput1 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Superclass_SetInput1,None,itkDivideImageFilterIUS2IUS2IUS2_Superclass)
itkDivideImageFilterIUS2IUS2IUS2_Superclass.SetInput2 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Superclass_SetInput2,None,itkDivideImageFilterIUS2IUS2IUS2_Superclass)
itkDivideImageFilterIUS2IUS2IUS2_Superclass.GetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Superclass_GetFunctor,None,itkDivideImageFilterIUS2IUS2IUS2_Superclass)
itkDivideImageFilterIUS2IUS2IUS2_Superclass.SetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Superclass_SetFunctor,None,itkDivideImageFilterIUS2IUS2IUS2_Superclass)
itkDivideImageFilterIUS2IUS2IUS2_Superclass.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Superclass_GetPointer,None,itkDivideImageFilterIUS2IUS2IUS2_Superclass)
itkDivideImageFilterIUS2IUS2IUS2_Superclass_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Superclass_swigregister
itkDivideImageFilterIUS2IUS2IUS2_Superclass_swigregister(itkDivideImageFilterIUS2IUS2IUS2_Superclass)

def itkDivideImageFilterIUS2IUS2IUS2_Superclass___New_orig__():
  """itkDivideImageFilterIUS2IUS2IUS2_Superclass___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Superclass___New_orig__()

def itkDivideImageFilterIUS2IUS2IUS2_Superclass_cast(*args):
  """itkDivideImageFilterIUS2IUS2IUS2_Superclass_cast(itkLightObject obj) -> itkDivideImageFilterIUS2IUS2IUS2_Superclass"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Superclass_cast(*args)

class itkDivideImageFilterIUS3IUS3IUS3_Superclass(itkInPlaceImageFilterAPython.itkInPlaceImageFilterIUS3IUS3):
    """Proxy of C++ itkDivideImageFilterIUS3IUS3IUS3_Superclass class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputImage1Dimension = _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Superclass_InputImage1Dimension
    InputImage2Dimension = _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Superclass_InputImage2Dimension
    OutputImageDimension = _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Superclass_OutputImageDimension
    SameDimensionCheck1 = _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Superclass_SameDimensionCheck1
    SameDimensionCheck2 = _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Superclass_SameDimensionCheck2
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Superclass___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetInput1(self, *args):
        """SetInput1(self, itkImageUS3 image1)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Superclass_SetInput1(self, *args)

    def SetInput2(self, *args):
        """SetInput2(self, itkImageUS3 image2)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Superclass_SetInput2(self, *args)

    def GetFunctor(self, *args):
        """
        GetFunctor(self) -> itk::Function::Div<(unsigned short,unsigned short,unsigned short)>
        GetFunctor(self) -> itk::Function::Div<(unsigned short,unsigned short,unsigned short)>
        """
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Superclass_GetFunctor(self, *args)

    def SetFunctor(self, *args):
        """SetFunctor(self, itk::Function::Div<(unsigned short,unsigned short,unsigned short)> functor)"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Superclass_SetFunctor(self, *args)

    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUS3IUS3IUS3_Superclass
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterIUS3IUS3IUS3_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Superclass_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterIUS3IUS3IUS3_Superclass"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Superclass_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUS3IUS3IUS3_Superclass
        
        Create a new object of the class itkDivideImageFilterIUS3IUS3IUS3_Superclass and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterIUS3IUS3IUS3_Superclass.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterIUS3IUS3IUS3_Superclass.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIUS3IUS3IUS3_Superclass.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterIUS3IUS3IUS3_Superclass.SetInput1 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Superclass_SetInput1,None,itkDivideImageFilterIUS3IUS3IUS3_Superclass)
itkDivideImageFilterIUS3IUS3IUS3_Superclass.SetInput2 = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Superclass_SetInput2,None,itkDivideImageFilterIUS3IUS3IUS3_Superclass)
itkDivideImageFilterIUS3IUS3IUS3_Superclass.GetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Superclass_GetFunctor,None,itkDivideImageFilterIUS3IUS3IUS3_Superclass)
itkDivideImageFilterIUS3IUS3IUS3_Superclass.SetFunctor = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Superclass_SetFunctor,None,itkDivideImageFilterIUS3IUS3IUS3_Superclass)
itkDivideImageFilterIUS3IUS3IUS3_Superclass.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Superclass_GetPointer,None,itkDivideImageFilterIUS3IUS3IUS3_Superclass)
itkDivideImageFilterIUS3IUS3IUS3_Superclass_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Superclass_swigregister
itkDivideImageFilterIUS3IUS3IUS3_Superclass_swigregister(itkDivideImageFilterIUS3IUS3IUS3_Superclass)

def itkDivideImageFilterIUS3IUS3IUS3_Superclass___New_orig__():
  """itkDivideImageFilterIUS3IUS3IUS3_Superclass___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Superclass___New_orig__()

def itkDivideImageFilterIUS3IUS3IUS3_Superclass_cast(*args):
  """itkDivideImageFilterIUS3IUS3IUS3_Superclass_cast(itkLightObject obj) -> itkDivideImageFilterIUS3IUS3IUS3_Superclass"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Superclass_cast(*args)

class itkDivideImageFilterICF2ICF2ICF2(itkDivideImageFilterICF2ICF2ICF2_Superclass):
    """Proxy of C++ itkDivideImageFilterICF2ICF2ICF2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_Input1Input2OutputDivisionOperatorsCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICF2ICF2ICF2
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterICF2ICF2ICF2"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterICF2ICF2ICF2"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICF2ICF2ICF2
        
        Create a new object of the class itkDivideImageFilterICF2ICF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterICF2ICF2ICF2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterICF2ICF2ICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterICF2ICF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterICF2ICF2ICF2.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_GetPointer,None,itkDivideImageFilterICF2ICF2ICF2)
itkDivideImageFilterICF2ICF2ICF2_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_swigregister
itkDivideImageFilterICF2ICF2ICF2_swigregister(itkDivideImageFilterICF2ICF2ICF2)

def itkDivideImageFilterICF2ICF2ICF2___New_orig__():
  """itkDivideImageFilterICF2ICF2ICF2___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2___New_orig__()

def itkDivideImageFilterICF2ICF2ICF2_cast(*args):
  """itkDivideImageFilterICF2ICF2ICF2_cast(itkLightObject obj) -> itkDivideImageFilterICF2ICF2ICF2"""
  return _itkDivideImageFilterPython.itkDivideImageFilterICF2ICF2ICF2_cast(*args)

class itkDivideImageFilterICF2IF2ICF2(itkDivideImageFilterICF2IF2ICF2_Superclass):
    """Proxy of C++ itkDivideImageFilterICF2IF2ICF2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_Input1Input2OutputDivisionOperatorsCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICF2IF2ICF2
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterICF2IF2ICF2"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterICF2IF2ICF2"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICF2IF2ICF2
        
        Create a new object of the class itkDivideImageFilterICF2IF2ICF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterICF2IF2ICF2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterICF2IF2ICF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterICF2IF2ICF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterICF2IF2ICF2.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_GetPointer,None,itkDivideImageFilterICF2IF2ICF2)
itkDivideImageFilterICF2IF2ICF2_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_swigregister
itkDivideImageFilterICF2IF2ICF2_swigregister(itkDivideImageFilterICF2IF2ICF2)

def itkDivideImageFilterICF2IF2ICF2___New_orig__():
  """itkDivideImageFilterICF2IF2ICF2___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2___New_orig__()

def itkDivideImageFilterICF2IF2ICF2_cast(*args):
  """itkDivideImageFilterICF2IF2ICF2_cast(itkLightObject obj) -> itkDivideImageFilterICF2IF2ICF2"""
  return _itkDivideImageFilterPython.itkDivideImageFilterICF2IF2ICF2_cast(*args)

class itkDivideImageFilterICF3ICF3ICF3(itkDivideImageFilterICF3ICF3ICF3_Superclass):
    """Proxy of C++ itkDivideImageFilterICF3ICF3ICF3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_Input1Input2OutputDivisionOperatorsCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICF3ICF3ICF3
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterICF3ICF3ICF3"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterICF3ICF3ICF3"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICF3ICF3ICF3
        
        Create a new object of the class itkDivideImageFilterICF3ICF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterICF3ICF3ICF3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterICF3ICF3ICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterICF3ICF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterICF3ICF3ICF3.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_GetPointer,None,itkDivideImageFilterICF3ICF3ICF3)
itkDivideImageFilterICF3ICF3ICF3_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_swigregister
itkDivideImageFilterICF3ICF3ICF3_swigregister(itkDivideImageFilterICF3ICF3ICF3)

def itkDivideImageFilterICF3ICF3ICF3___New_orig__():
  """itkDivideImageFilterICF3ICF3ICF3___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3___New_orig__()

def itkDivideImageFilterICF3ICF3ICF3_cast(*args):
  """itkDivideImageFilterICF3ICF3ICF3_cast(itkLightObject obj) -> itkDivideImageFilterICF3ICF3ICF3"""
  return _itkDivideImageFilterPython.itkDivideImageFilterICF3ICF3ICF3_cast(*args)

class itkDivideImageFilterICF3IF3ICF3(itkDivideImageFilterICF3IF3ICF3_Superclass):
    """Proxy of C++ itkDivideImageFilterICF3IF3ICF3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_Input1Input2OutputDivisionOperatorsCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterICF3IF3ICF3
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterICF3IF3ICF3"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterICF3IF3ICF3"""
        return _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterICF3IF3ICF3
        
        Create a new object of the class itkDivideImageFilterICF3IF3ICF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterICF3IF3ICF3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterICF3IF3ICF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterICF3IF3ICF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterICF3IF3ICF3.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_GetPointer,None,itkDivideImageFilterICF3IF3ICF3)
itkDivideImageFilterICF3IF3ICF3_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_swigregister
itkDivideImageFilterICF3IF3ICF3_swigregister(itkDivideImageFilterICF3IF3ICF3)

def itkDivideImageFilterICF3IF3ICF3___New_orig__():
  """itkDivideImageFilterICF3IF3ICF3___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3___New_orig__()

def itkDivideImageFilterICF3IF3ICF3_cast(*args):
  """itkDivideImageFilterICF3IF3ICF3_cast(itkLightObject obj) -> itkDivideImageFilterICF3IF3ICF3"""
  return _itkDivideImageFilterPython.itkDivideImageFilterICF3IF3ICF3_cast(*args)

class itkDivideImageFilterID2ID2ID2(itkDivideImageFilterID2ID2ID2_Superclass):
    """Proxy of C++ itkDivideImageFilterID2ID2ID2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_Input1Input2OutputDivisionOperatorsCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterID2ID2ID2
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterID2ID2ID2"""
        return _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterID2ID2ID2"""
        return _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterID2ID2ID2
        
        Create a new object of the class itkDivideImageFilterID2ID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterID2ID2ID2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterID2ID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterID2ID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterID2ID2ID2.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_GetPointer,None,itkDivideImageFilterID2ID2ID2)
itkDivideImageFilterID2ID2ID2_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_swigregister
itkDivideImageFilterID2ID2ID2_swigregister(itkDivideImageFilterID2ID2ID2)

def itkDivideImageFilterID2ID2ID2___New_orig__():
  """itkDivideImageFilterID2ID2ID2___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2___New_orig__()

def itkDivideImageFilterID2ID2ID2_cast(*args):
  """itkDivideImageFilterID2ID2ID2_cast(itkLightObject obj) -> itkDivideImageFilterID2ID2ID2"""
  return _itkDivideImageFilterPython.itkDivideImageFilterID2ID2ID2_cast(*args)

class itkDivideImageFilterID3ID3ID3(itkDivideImageFilterID3ID3ID3_Superclass):
    """Proxy of C++ itkDivideImageFilterID3ID3ID3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_Input1Input2OutputDivisionOperatorsCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterID3ID3ID3
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterID3ID3ID3"""
        return _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterID3ID3ID3"""
        return _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterID3ID3ID3
        
        Create a new object of the class itkDivideImageFilterID3ID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterID3ID3ID3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterID3ID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterID3ID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterID3ID3ID3.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_GetPointer,None,itkDivideImageFilterID3ID3ID3)
itkDivideImageFilterID3ID3ID3_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_swigregister
itkDivideImageFilterID3ID3ID3_swigregister(itkDivideImageFilterID3ID3ID3)

def itkDivideImageFilterID3ID3ID3___New_orig__():
  """itkDivideImageFilterID3ID3ID3___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3___New_orig__()

def itkDivideImageFilterID3ID3ID3_cast(*args):
  """itkDivideImageFilterID3ID3ID3_cast(itkLightObject obj) -> itkDivideImageFilterID3ID3ID3"""
  return _itkDivideImageFilterPython.itkDivideImageFilterID3ID3ID3_cast(*args)

class itkDivideImageFilterIF2IF2IF2(itkDivideImageFilterIF2IF2IF2_Superclass):
    """Proxy of C++ itkDivideImageFilterIF2IF2IF2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_Input1Input2OutputDivisionOperatorsCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIF2IF2IF2
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterIF2IF2IF2"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterIF2IF2IF2"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIF2IF2IF2
        
        Create a new object of the class itkDivideImageFilterIF2IF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterIF2IF2IF2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterIF2IF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIF2IF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterIF2IF2IF2.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_GetPointer,None,itkDivideImageFilterIF2IF2IF2)
itkDivideImageFilterIF2IF2IF2_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_swigregister
itkDivideImageFilterIF2IF2IF2_swigregister(itkDivideImageFilterIF2IF2IF2)

def itkDivideImageFilterIF2IF2IF2___New_orig__():
  """itkDivideImageFilterIF2IF2IF2___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2___New_orig__()

def itkDivideImageFilterIF2IF2IF2_cast(*args):
  """itkDivideImageFilterIF2IF2IF2_cast(itkLightObject obj) -> itkDivideImageFilterIF2IF2IF2"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIF2IF2IF2_cast(*args)

class itkDivideImageFilterIF3IF3IF3(itkDivideImageFilterIF3IF3IF3_Superclass):
    """Proxy of C++ itkDivideImageFilterIF3IF3IF3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_Input1Input2OutputDivisionOperatorsCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIF3IF3IF3
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterIF3IF3IF3"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterIF3IF3IF3"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIF3IF3IF3
        
        Create a new object of the class itkDivideImageFilterIF3IF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterIF3IF3IF3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterIF3IF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIF3IF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterIF3IF3IF3.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_GetPointer,None,itkDivideImageFilterIF3IF3IF3)
itkDivideImageFilterIF3IF3IF3_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_swigregister
itkDivideImageFilterIF3IF3IF3_swigregister(itkDivideImageFilterIF3IF3IF3)

def itkDivideImageFilterIF3IF3IF3___New_orig__():
  """itkDivideImageFilterIF3IF3IF3___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3___New_orig__()

def itkDivideImageFilterIF3IF3IF3_cast(*args):
  """itkDivideImageFilterIF3IF3IF3_cast(itkLightObject obj) -> itkDivideImageFilterIF3IF3IF3"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIF3IF3IF3_cast(*args)

class itkDivideImageFilterIUC2IUC2IUC2(itkDivideImageFilterIUC2IUC2IUC2_Superclass):
    """Proxy of C++ itkDivideImageFilterIUC2IUC2IUC2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_Input1Input2OutputDivisionOperatorsCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUC2IUC2IUC2
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterIUC2IUC2IUC2"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterIUC2IUC2IUC2"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUC2IUC2IUC2
        
        Create a new object of the class itkDivideImageFilterIUC2IUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterIUC2IUC2IUC2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterIUC2IUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIUC2IUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterIUC2IUC2IUC2.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_GetPointer,None,itkDivideImageFilterIUC2IUC2IUC2)
itkDivideImageFilterIUC2IUC2IUC2_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_swigregister
itkDivideImageFilterIUC2IUC2IUC2_swigregister(itkDivideImageFilterIUC2IUC2IUC2)

def itkDivideImageFilterIUC2IUC2IUC2___New_orig__():
  """itkDivideImageFilterIUC2IUC2IUC2___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2___New_orig__()

def itkDivideImageFilterIUC2IUC2IUC2_cast(*args):
  """itkDivideImageFilterIUC2IUC2IUC2_cast(itkLightObject obj) -> itkDivideImageFilterIUC2IUC2IUC2"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIUC2IUC2IUC2_cast(*args)

class itkDivideImageFilterIUC3IUC3IUC3(itkDivideImageFilterIUC3IUC3IUC3_Superclass):
    """Proxy of C++ itkDivideImageFilterIUC3IUC3IUC3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_Input1Input2OutputDivisionOperatorsCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUC3IUC3IUC3
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterIUC3IUC3IUC3"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterIUC3IUC3IUC3"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUC3IUC3IUC3
        
        Create a new object of the class itkDivideImageFilterIUC3IUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterIUC3IUC3IUC3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterIUC3IUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIUC3IUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterIUC3IUC3IUC3.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_GetPointer,None,itkDivideImageFilterIUC3IUC3IUC3)
itkDivideImageFilterIUC3IUC3IUC3_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_swigregister
itkDivideImageFilterIUC3IUC3IUC3_swigregister(itkDivideImageFilterIUC3IUC3IUC3)

def itkDivideImageFilterIUC3IUC3IUC3___New_orig__():
  """itkDivideImageFilterIUC3IUC3IUC3___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3___New_orig__()

def itkDivideImageFilterIUC3IUC3IUC3_cast(*args):
  """itkDivideImageFilterIUC3IUC3IUC3_cast(itkLightObject obj) -> itkDivideImageFilterIUC3IUC3IUC3"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIUC3IUC3IUC3_cast(*args)

class itkDivideImageFilterIUL2IUL2IUL2(itkDivideImageFilterIUL2IUL2IUL2_Superclass):
    """Proxy of C++ itkDivideImageFilterIUL2IUL2IUL2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_Input1Input2OutputDivisionOperatorsCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUL2IUL2IUL2
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterIUL2IUL2IUL2"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterIUL2IUL2IUL2"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUL2IUL2IUL2
        
        Create a new object of the class itkDivideImageFilterIUL2IUL2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterIUL2IUL2IUL2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterIUL2IUL2IUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIUL2IUL2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterIUL2IUL2IUL2.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_GetPointer,None,itkDivideImageFilterIUL2IUL2IUL2)
itkDivideImageFilterIUL2IUL2IUL2_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_swigregister
itkDivideImageFilterIUL2IUL2IUL2_swigregister(itkDivideImageFilterIUL2IUL2IUL2)

def itkDivideImageFilterIUL2IUL2IUL2___New_orig__():
  """itkDivideImageFilterIUL2IUL2IUL2___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2___New_orig__()

def itkDivideImageFilterIUL2IUL2IUL2_cast(*args):
  """itkDivideImageFilterIUL2IUL2IUL2_cast(itkLightObject obj) -> itkDivideImageFilterIUL2IUL2IUL2"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIUL2IUL2IUL2_cast(*args)

class itkDivideImageFilterIUL3IUL3IUL3(itkDivideImageFilterIUL3IUL3IUL3_Superclass):
    """Proxy of C++ itkDivideImageFilterIUL3IUL3IUL3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_Input1Input2OutputDivisionOperatorsCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUL3IUL3IUL3
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterIUL3IUL3IUL3"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterIUL3IUL3IUL3"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUL3IUL3IUL3
        
        Create a new object of the class itkDivideImageFilterIUL3IUL3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterIUL3IUL3IUL3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterIUL3IUL3IUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIUL3IUL3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterIUL3IUL3IUL3.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_GetPointer,None,itkDivideImageFilterIUL3IUL3IUL3)
itkDivideImageFilterIUL3IUL3IUL3_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_swigregister
itkDivideImageFilterIUL3IUL3IUL3_swigregister(itkDivideImageFilterIUL3IUL3IUL3)

def itkDivideImageFilterIUL3IUL3IUL3___New_orig__():
  """itkDivideImageFilterIUL3IUL3IUL3___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3___New_orig__()

def itkDivideImageFilterIUL3IUL3IUL3_cast(*args):
  """itkDivideImageFilterIUL3IUL3IUL3_cast(itkLightObject obj) -> itkDivideImageFilterIUL3IUL3IUL3"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIUL3IUL3IUL3_cast(*args)

class itkDivideImageFilterIUS2IUS2IUS2(itkDivideImageFilterIUS2IUS2IUS2_Superclass):
    """Proxy of C++ itkDivideImageFilterIUS2IUS2IUS2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_Input1Input2OutputDivisionOperatorsCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUS2IUS2IUS2
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterIUS2IUS2IUS2"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterIUS2IUS2IUS2"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUS2IUS2IUS2
        
        Create a new object of the class itkDivideImageFilterIUS2IUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterIUS2IUS2IUS2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterIUS2IUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIUS2IUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterIUS2IUS2IUS2.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_GetPointer,None,itkDivideImageFilterIUS2IUS2IUS2)
itkDivideImageFilterIUS2IUS2IUS2_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_swigregister
itkDivideImageFilterIUS2IUS2IUS2_swigregister(itkDivideImageFilterIUS2IUS2IUS2)

def itkDivideImageFilterIUS2IUS2IUS2___New_orig__():
  """itkDivideImageFilterIUS2IUS2IUS2___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2___New_orig__()

def itkDivideImageFilterIUS2IUS2IUS2_cast(*args):
  """itkDivideImageFilterIUS2IUS2IUS2_cast(itkLightObject obj) -> itkDivideImageFilterIUS2IUS2IUS2"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIUS2IUS2IUS2_cast(*args)

class itkDivideImageFilterIUS3IUS3IUS3(itkDivideImageFilterIUS3IUS3IUS3_Superclass):
    """Proxy of C++ itkDivideImageFilterIUS3IUS3IUS3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    IntConvertibleToInput2Check = _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_IntConvertibleToInput2Check
    Input1Input2OutputDivisionOperatorsCheck = _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_Input1Input2OutputDivisionOperatorsCheck
    def __New_orig__():
        """__New_orig__()"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    __swig_destroy__ = _itkDivideImageFilterPython.delete_itkDivideImageFilterIUS3IUS3IUS3
    def cast(*args):
        """cast(itkLightObject obj) -> itkDivideImageFilterIUS3IUS3IUS3"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkDivideImageFilterIUS3IUS3IUS3"""
        return _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkDivideImageFilterIUS3IUS3IUS3
        
        Create a new object of the class itkDivideImageFilterIUS3IUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkDivideImageFilterIUS3IUS3IUS3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkDivideImageFilterIUS3IUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkDivideImageFilterIUS3IUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkDivideImageFilterIUS3IUS3IUS3.GetPointer = new_instancemethod(_itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_GetPointer,None,itkDivideImageFilterIUS3IUS3IUS3)
itkDivideImageFilterIUS3IUS3IUS3_swigregister = _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_swigregister
itkDivideImageFilterIUS3IUS3IUS3_swigregister(itkDivideImageFilterIUS3IUS3IUS3)

def itkDivideImageFilterIUS3IUS3IUS3___New_orig__():
  """itkDivideImageFilterIUS3IUS3IUS3___New_orig__()"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3___New_orig__()

def itkDivideImageFilterIUS3IUS3IUS3_cast(*args):
  """itkDivideImageFilterIUS3IUS3IUS3_cast(itkLightObject obj) -> itkDivideImageFilterIUS3IUS3IUS3"""
  return _itkDivideImageFilterPython.itkDivideImageFilterIUS3IUS3IUS3_cast(*args)



