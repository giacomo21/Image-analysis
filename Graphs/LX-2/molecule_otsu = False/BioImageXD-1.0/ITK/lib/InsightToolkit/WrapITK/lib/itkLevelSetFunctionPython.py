# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkLevelSetFunctionPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkLevelSetFunctionPython', [dirname(__file__)])
        except ImportError:
            import _itkLevelSetFunctionPython
            return _itkLevelSetFunctionPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkLevelSetFunctionPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkLevelSetFunctionPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkLevelSetFunctionPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkFixedArrayPython
import pyBasePython
import itkVectorPython
import vnl_vectorPython
import vcl_complexPython
import vnl_matrixPython
import vnl_vector_refPython
import itkFiniteDifferenceFunctionPython
import ITKCommonBasePython
import itkEventObjectsPython
import itkSizePython
def itkLevelSetFunctionID3_New():
  return itkLevelSetFunctionID3.New()

def itkLevelSetFunctionID2_New():
  return itkLevelSetFunctionID2.New()

def itkLevelSetFunctionIF3_New():
  return itkLevelSetFunctionIF3.New()

def itkLevelSetFunctionIF2_New():
  return itkLevelSetFunctionIF2.New()

class itkLevelSetFunctionID2(itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID2):
    """Proxy of C++ itkLevelSetFunctionID2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkLevelSetFunctionPython.itkLevelSetFunctionID2_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def AdvectionField(self, *args):
        """
        AdvectionField(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,2u)>)>)> arg0, 
            itkVectorF2 arg1, 
            itkLevelSetFunctionID2::GlobalDataStruct arg2 = None) -> itkFixedArrayD2
        AdvectionField(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,2u)>)>)> arg0, 
            itkVectorF2 arg1) -> itkFixedArrayD2
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_AdvectionField(self, *args)

    def PropagationSpeed(self, *args):
        """
        PropagationSpeed(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,2u)>)>)> arg0, 
            itkVectorF2 arg1, 
            itkLevelSetFunctionID2::GlobalDataStruct arg2 = None) -> double
        PropagationSpeed(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,2u)>)>)> arg0, 
            itkVectorF2 arg1) -> double
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_PropagationSpeed(self, *args)

    def CurvatureSpeed(self, *args):
        """
        CurvatureSpeed(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,2u)>)>)> arg0, 
            itkVectorF2 arg1, 
            itkLevelSetFunctionID2::GlobalDataStruct arg2 = None) -> double
        CurvatureSpeed(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,2u)>)>)> arg0, 
            itkVectorF2 arg1) -> double
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_CurvatureSpeed(self, *args)

    def LaplacianSmoothingSpeed(self, *args):
        """
        LaplacianSmoothingSpeed(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,2u)>)>)> arg0, 
            itkVectorF2 arg1, 
            itkLevelSetFunctionID2::GlobalDataStruct arg2 = None) -> double
        LaplacianSmoothingSpeed(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,2u)>)>)> arg0, 
            itkVectorF2 arg1) -> double
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_LaplacianSmoothingSpeed(self, *args)

    def SetAdvectionWeight(self, *args):
        """SetAdvectionWeight(self, double a)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetAdvectionWeight(self, *args)

    def GetAdvectionWeight(self):
        """GetAdvectionWeight(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetAdvectionWeight(self)

    def SetPropagationWeight(self, *args):
        """SetPropagationWeight(self, double p)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetPropagationWeight(self, *args)

    def GetPropagationWeight(self):
        """GetPropagationWeight(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetPropagationWeight(self)

    def SetCurvatureWeight(self, *args):
        """SetCurvatureWeight(self, double c)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetCurvatureWeight(self, *args)

    def GetCurvatureWeight(self):
        """GetCurvatureWeight(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetCurvatureWeight(self)

    def SetLaplacianSmoothingWeight(self, *args):
        """SetLaplacianSmoothingWeight(self, double c)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetLaplacianSmoothingWeight(self, *args)

    def GetLaplacianSmoothingWeight(self):
        """GetLaplacianSmoothingWeight(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetLaplacianSmoothingWeight(self)

    def SetEpsilonMagnitude(self, *args):
        """SetEpsilonMagnitude(self, double e)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetEpsilonMagnitude(self, *args)

    def GetEpsilonMagnitude(self):
        """GetEpsilonMagnitude(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetEpsilonMagnitude(self)

    def ComputeUpdate(self, *args):
        """
        ComputeUpdate(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,2u)>)>)> neighborhood, 
            void globalData, 
            itkVectorF2 arg2 = (0.0)) -> double
        ComputeUpdate(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,2u)>)>)> neighborhood, 
            void globalData) -> double
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_ComputeUpdate(self, *args)

    def Initialize(self, *args):
        """Initialize(self, itkSize2 r)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_Initialize(self, *args)

    def ComputeCurvatureTerm(self, *args):
        """
        ComputeCurvatureTerm(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,2u)>)>)> arg0, 
            itkVectorF2 arg1, 
            itkLevelSetFunctionID2::GlobalDataStruct gd = None) -> double
        ComputeCurvatureTerm(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,2u)>)>)> arg0, 
            itkVectorF2 arg1) -> double
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_ComputeCurvatureTerm(self, *args)

    def ComputeMeanCurvature(self, *args):
        """
        ComputeMeanCurvature(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,2u)>)>)> arg0, 
            itkVectorF2 arg1, 
            itkLevelSetFunctionID2::GlobalDataStruct gd = None) -> double
        ComputeMeanCurvature(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,2u)>)>)> arg0, 
            itkVectorF2 arg1) -> double
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_ComputeMeanCurvature(self, *args)

    def ComputeMinimalCurvature(self, *args):
        """
        ComputeMinimalCurvature(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,2u)>)>)> arg0, 
            itkVectorF2 arg1, 
            itkLevelSetFunctionID2::GlobalDataStruct gd = None) -> double
        ComputeMinimalCurvature(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,2u)>)>)> arg0, 
            itkVectorF2 arg1) -> double
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_ComputeMinimalCurvature(self, *args)

    def Compute3DMinimalCurvature(self, *args):
        """
        Compute3DMinimalCurvature(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,2u)>)>)> arg0, 
            itkVectorF2 arg1, 
            itkLevelSetFunctionID2::GlobalDataStruct gd = None) -> double
        Compute3DMinimalCurvature(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,2u)>)>)> arg0, 
            itkVectorF2 arg1) -> double
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_Compute3DMinimalCurvature(self, *args)

    def SetUseMinimalCurvature(self, *args):
        """SetUseMinimalCurvature(self, bool b)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetUseMinimalCurvature(self, *args)

    def GetUseMinimalCurvature(self):
        """GetUseMinimalCurvature(self) -> bool"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetUseMinimalCurvature(self)

    def UseMinimalCurvatureOn(self):
        """UseMinimalCurvatureOn(self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_UseMinimalCurvatureOn(self)

    def UseMinimalCurvatureOff(self):
        """UseMinimalCurvatureOff(self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_UseMinimalCurvatureOff(self)

    def SetMaximumCurvatureTimeStep(*args):
        """SetMaximumCurvatureTimeStep(double n)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetMaximumCurvatureTimeStep(*args)

    SetMaximumCurvatureTimeStep = staticmethod(SetMaximumCurvatureTimeStep)
    def GetMaximumCurvatureTimeStep():
        """GetMaximumCurvatureTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetMaximumCurvatureTimeStep()

    GetMaximumCurvatureTimeStep = staticmethod(GetMaximumCurvatureTimeStep)
    def SetMaximumPropagationTimeStep(*args):
        """SetMaximumPropagationTimeStep(double n)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetMaximumPropagationTimeStep(*args)

    SetMaximumPropagationTimeStep = staticmethod(SetMaximumPropagationTimeStep)
    def GetMaximumPropagationTimeStep():
        """GetMaximumPropagationTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetMaximumPropagationTimeStep()

    GetMaximumPropagationTimeStep = staticmethod(GetMaximumPropagationTimeStep)
    __swig_destroy__ = _itkLevelSetFunctionPython.delete_itkLevelSetFunctionID2
    def cast(*args):
        """cast(itkLightObject obj) -> itkLevelSetFunctionID2"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkLevelSetFunctionID2"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionID2
        
        Create a new object of the class itkLevelSetFunctionID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkLevelSetFunctionID2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkLevelSetFunctionID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLevelSetFunctionID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLevelSetFunctionID2.AdvectionField = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_AdvectionField,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2.PropagationSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_PropagationSpeed,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2.CurvatureSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_CurvatureSpeed,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2.LaplacianSmoothingSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_LaplacianSmoothingSpeed,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2.SetAdvectionWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetAdvectionWeight,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2.GetAdvectionWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetAdvectionWeight,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2.SetPropagationWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetPropagationWeight,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2.GetPropagationWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetPropagationWeight,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2.SetCurvatureWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetCurvatureWeight,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2.GetCurvatureWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetCurvatureWeight,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2.SetLaplacianSmoothingWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetLaplacianSmoothingWeight,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2.GetLaplacianSmoothingWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetLaplacianSmoothingWeight,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2.SetEpsilonMagnitude = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetEpsilonMagnitude,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2.GetEpsilonMagnitude = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetEpsilonMagnitude,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2.ComputeUpdate = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_ComputeUpdate,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2.Initialize = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_Initialize,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2.ComputeCurvatureTerm = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_ComputeCurvatureTerm,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2.ComputeMeanCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_ComputeMeanCurvature,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2.ComputeMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_ComputeMinimalCurvature,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2.Compute3DMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_Compute3DMinimalCurvature,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2.SetUseMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetUseMinimalCurvature,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2.GetUseMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetUseMinimalCurvature,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2.UseMinimalCurvatureOn = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_UseMinimalCurvatureOn,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2.UseMinimalCurvatureOff = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_UseMinimalCurvatureOff,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2.GetPointer = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetPointer,None,itkLevelSetFunctionID2)
itkLevelSetFunctionID2_swigregister = _itkLevelSetFunctionPython.itkLevelSetFunctionID2_swigregister
itkLevelSetFunctionID2_swigregister(itkLevelSetFunctionID2)

def itkLevelSetFunctionID2___New_orig__():
  """itkLevelSetFunctionID2___New_orig__()"""
  return _itkLevelSetFunctionPython.itkLevelSetFunctionID2___New_orig__()

def itkLevelSetFunctionID2_SetMaximumCurvatureTimeStep(*args):
  """itkLevelSetFunctionID2_SetMaximumCurvatureTimeStep(double n)"""
  return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetMaximumCurvatureTimeStep(*args)

def itkLevelSetFunctionID2_GetMaximumCurvatureTimeStep():
  """itkLevelSetFunctionID2_GetMaximumCurvatureTimeStep() -> double"""
  return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetMaximumCurvatureTimeStep()

def itkLevelSetFunctionID2_SetMaximumPropagationTimeStep(*args):
  """itkLevelSetFunctionID2_SetMaximumPropagationTimeStep(double n)"""
  return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_SetMaximumPropagationTimeStep(*args)

def itkLevelSetFunctionID2_GetMaximumPropagationTimeStep():
  """itkLevelSetFunctionID2_GetMaximumPropagationTimeStep() -> double"""
  return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_GetMaximumPropagationTimeStep()

def itkLevelSetFunctionID2_cast(*args):
  """itkLevelSetFunctionID2_cast(itkLightObject obj) -> itkLevelSetFunctionID2"""
  return _itkLevelSetFunctionPython.itkLevelSetFunctionID2_cast(*args)

class itkLevelSetFunctionID3(itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionID3):
    """Proxy of C++ itkLevelSetFunctionID3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkLevelSetFunctionPython.itkLevelSetFunctionID3_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def AdvectionField(self, *args):
        """
        AdvectionField(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,3u)>)>)> arg0, 
            itkVectorF3 arg1, 
            itkLevelSetFunctionID3::GlobalDataStruct arg2 = None) -> itkFixedArrayD3
        AdvectionField(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,3u)>)>)> arg0, 
            itkVectorF3 arg1) -> itkFixedArrayD3
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_AdvectionField(self, *args)

    def PropagationSpeed(self, *args):
        """
        PropagationSpeed(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,3u)>)>)> arg0, 
            itkVectorF3 arg1, 
            itkLevelSetFunctionID3::GlobalDataStruct arg2 = None) -> double
        PropagationSpeed(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,3u)>)>)> arg0, 
            itkVectorF3 arg1) -> double
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_PropagationSpeed(self, *args)

    def CurvatureSpeed(self, *args):
        """
        CurvatureSpeed(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,3u)>)>)> arg0, 
            itkVectorF3 arg1, 
            itkLevelSetFunctionID3::GlobalDataStruct arg2 = None) -> double
        CurvatureSpeed(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,3u)>)>)> arg0, 
            itkVectorF3 arg1) -> double
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_CurvatureSpeed(self, *args)

    def LaplacianSmoothingSpeed(self, *args):
        """
        LaplacianSmoothingSpeed(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,3u)>)>)> arg0, 
            itkVectorF3 arg1, 
            itkLevelSetFunctionID3::GlobalDataStruct arg2 = None) -> double
        LaplacianSmoothingSpeed(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,3u)>)>)> arg0, 
            itkVectorF3 arg1) -> double
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_LaplacianSmoothingSpeed(self, *args)

    def SetAdvectionWeight(self, *args):
        """SetAdvectionWeight(self, double a)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetAdvectionWeight(self, *args)

    def GetAdvectionWeight(self):
        """GetAdvectionWeight(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetAdvectionWeight(self)

    def SetPropagationWeight(self, *args):
        """SetPropagationWeight(self, double p)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetPropagationWeight(self, *args)

    def GetPropagationWeight(self):
        """GetPropagationWeight(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetPropagationWeight(self)

    def SetCurvatureWeight(self, *args):
        """SetCurvatureWeight(self, double c)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetCurvatureWeight(self, *args)

    def GetCurvatureWeight(self):
        """GetCurvatureWeight(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetCurvatureWeight(self)

    def SetLaplacianSmoothingWeight(self, *args):
        """SetLaplacianSmoothingWeight(self, double c)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetLaplacianSmoothingWeight(self, *args)

    def GetLaplacianSmoothingWeight(self):
        """GetLaplacianSmoothingWeight(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetLaplacianSmoothingWeight(self)

    def SetEpsilonMagnitude(self, *args):
        """SetEpsilonMagnitude(self, double e)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetEpsilonMagnitude(self, *args)

    def GetEpsilonMagnitude(self):
        """GetEpsilonMagnitude(self) -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetEpsilonMagnitude(self)

    def ComputeUpdate(self, *args):
        """
        ComputeUpdate(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,3u)>)>)> neighborhood, 
            void globalData, 
            itkVectorF3 arg2 = (0.0)) -> double
        ComputeUpdate(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,3u)>)>)> neighborhood, 
            void globalData) -> double
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_ComputeUpdate(self, *args)

    def Initialize(self, *args):
        """Initialize(self, itkSize3 r)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_Initialize(self, *args)

    def ComputeCurvatureTerm(self, *args):
        """
        ComputeCurvatureTerm(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,3u)>)>)> arg0, 
            itkVectorF3 arg1, 
            itkLevelSetFunctionID3::GlobalDataStruct gd = None) -> double
        ComputeCurvatureTerm(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,3u)>)>)> arg0, 
            itkVectorF3 arg1) -> double
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_ComputeCurvatureTerm(self, *args)

    def ComputeMeanCurvature(self, *args):
        """
        ComputeMeanCurvature(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,3u)>)>)> arg0, 
            itkVectorF3 arg1, 
            itkLevelSetFunctionID3::GlobalDataStruct gd = None) -> double
        ComputeMeanCurvature(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,3u)>)>)> arg0, 
            itkVectorF3 arg1) -> double
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_ComputeMeanCurvature(self, *args)

    def ComputeMinimalCurvature(self, *args):
        """
        ComputeMinimalCurvature(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,3u)>)>)> arg0, 
            itkVectorF3 arg1, 
            itkLevelSetFunctionID3::GlobalDataStruct gd = None) -> double
        ComputeMinimalCurvature(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,3u)>)>)> arg0, 
            itkVectorF3 arg1) -> double
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_ComputeMinimalCurvature(self, *args)

    def Compute3DMinimalCurvature(self, *args):
        """
        Compute3DMinimalCurvature(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,3u)>)>)> arg0, 
            itkVectorF3 arg1, 
            itkLevelSetFunctionID3::GlobalDataStruct gd = None) -> double
        Compute3DMinimalCurvature(self, itk::ConstNeighborhoodIterator<(itk::Image<(double,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(double,3u)>)>)> arg0, 
            itkVectorF3 arg1) -> double
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_Compute3DMinimalCurvature(self, *args)

    def SetUseMinimalCurvature(self, *args):
        """SetUseMinimalCurvature(self, bool b)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetUseMinimalCurvature(self, *args)

    def GetUseMinimalCurvature(self):
        """GetUseMinimalCurvature(self) -> bool"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetUseMinimalCurvature(self)

    def UseMinimalCurvatureOn(self):
        """UseMinimalCurvatureOn(self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_UseMinimalCurvatureOn(self)

    def UseMinimalCurvatureOff(self):
        """UseMinimalCurvatureOff(self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_UseMinimalCurvatureOff(self)

    def SetMaximumCurvatureTimeStep(*args):
        """SetMaximumCurvatureTimeStep(double n)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetMaximumCurvatureTimeStep(*args)

    SetMaximumCurvatureTimeStep = staticmethod(SetMaximumCurvatureTimeStep)
    def GetMaximumCurvatureTimeStep():
        """GetMaximumCurvatureTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetMaximumCurvatureTimeStep()

    GetMaximumCurvatureTimeStep = staticmethod(GetMaximumCurvatureTimeStep)
    def SetMaximumPropagationTimeStep(*args):
        """SetMaximumPropagationTimeStep(double n)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetMaximumPropagationTimeStep(*args)

    SetMaximumPropagationTimeStep = staticmethod(SetMaximumPropagationTimeStep)
    def GetMaximumPropagationTimeStep():
        """GetMaximumPropagationTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetMaximumPropagationTimeStep()

    GetMaximumPropagationTimeStep = staticmethod(GetMaximumPropagationTimeStep)
    __swig_destroy__ = _itkLevelSetFunctionPython.delete_itkLevelSetFunctionID3
    def cast(*args):
        """cast(itkLightObject obj) -> itkLevelSetFunctionID3"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkLevelSetFunctionID3"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionID3
        
        Create a new object of the class itkLevelSetFunctionID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkLevelSetFunctionID3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkLevelSetFunctionID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLevelSetFunctionID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLevelSetFunctionID3.AdvectionField = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_AdvectionField,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3.PropagationSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_PropagationSpeed,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3.CurvatureSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_CurvatureSpeed,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3.LaplacianSmoothingSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_LaplacianSmoothingSpeed,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3.SetAdvectionWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetAdvectionWeight,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3.GetAdvectionWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetAdvectionWeight,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3.SetPropagationWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetPropagationWeight,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3.GetPropagationWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetPropagationWeight,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3.SetCurvatureWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetCurvatureWeight,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3.GetCurvatureWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetCurvatureWeight,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3.SetLaplacianSmoothingWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetLaplacianSmoothingWeight,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3.GetLaplacianSmoothingWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetLaplacianSmoothingWeight,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3.SetEpsilonMagnitude = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetEpsilonMagnitude,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3.GetEpsilonMagnitude = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetEpsilonMagnitude,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3.ComputeUpdate = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_ComputeUpdate,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3.Initialize = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_Initialize,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3.ComputeCurvatureTerm = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_ComputeCurvatureTerm,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3.ComputeMeanCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_ComputeMeanCurvature,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3.ComputeMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_ComputeMinimalCurvature,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3.Compute3DMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_Compute3DMinimalCurvature,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3.SetUseMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetUseMinimalCurvature,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3.GetUseMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetUseMinimalCurvature,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3.UseMinimalCurvatureOn = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_UseMinimalCurvatureOn,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3.UseMinimalCurvatureOff = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_UseMinimalCurvatureOff,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3.GetPointer = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetPointer,None,itkLevelSetFunctionID3)
itkLevelSetFunctionID3_swigregister = _itkLevelSetFunctionPython.itkLevelSetFunctionID3_swigregister
itkLevelSetFunctionID3_swigregister(itkLevelSetFunctionID3)

def itkLevelSetFunctionID3___New_orig__():
  """itkLevelSetFunctionID3___New_orig__()"""
  return _itkLevelSetFunctionPython.itkLevelSetFunctionID3___New_orig__()

def itkLevelSetFunctionID3_SetMaximumCurvatureTimeStep(*args):
  """itkLevelSetFunctionID3_SetMaximumCurvatureTimeStep(double n)"""
  return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetMaximumCurvatureTimeStep(*args)

def itkLevelSetFunctionID3_GetMaximumCurvatureTimeStep():
  """itkLevelSetFunctionID3_GetMaximumCurvatureTimeStep() -> double"""
  return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetMaximumCurvatureTimeStep()

def itkLevelSetFunctionID3_SetMaximumPropagationTimeStep(*args):
  """itkLevelSetFunctionID3_SetMaximumPropagationTimeStep(double n)"""
  return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_SetMaximumPropagationTimeStep(*args)

def itkLevelSetFunctionID3_GetMaximumPropagationTimeStep():
  """itkLevelSetFunctionID3_GetMaximumPropagationTimeStep() -> double"""
  return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_GetMaximumPropagationTimeStep()

def itkLevelSetFunctionID3_cast(*args):
  """itkLevelSetFunctionID3_cast(itkLightObject obj) -> itkLevelSetFunctionID3"""
  return _itkLevelSetFunctionPython.itkLevelSetFunctionID3_cast(*args)

class itkLevelSetFunctionIF2(itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF2):
    """Proxy of C++ itkLevelSetFunctionIF2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def AdvectionField(self, *args):
        """
        AdvectionField(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,2u)>)>)> arg0, 
            itkVectorF2 arg1, 
            itkLevelSetFunctionIF2::GlobalDataStruct arg2 = None) -> itkFixedArrayF2
        AdvectionField(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,2u)>)>)> arg0, 
            itkVectorF2 arg1) -> itkFixedArrayF2
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_AdvectionField(self, *args)

    def PropagationSpeed(self, *args):
        """
        PropagationSpeed(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,2u)>)>)> arg0, 
            itkVectorF2 arg1, 
            itkLevelSetFunctionIF2::GlobalDataStruct arg2 = None) -> float
        PropagationSpeed(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,2u)>)>)> arg0, 
            itkVectorF2 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_PropagationSpeed(self, *args)

    def CurvatureSpeed(self, *args):
        """
        CurvatureSpeed(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,2u)>)>)> arg0, 
            itkVectorF2 arg1, 
            itkLevelSetFunctionIF2::GlobalDataStruct arg2 = None) -> float
        CurvatureSpeed(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,2u)>)>)> arg0, 
            itkVectorF2 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_CurvatureSpeed(self, *args)

    def LaplacianSmoothingSpeed(self, *args):
        """
        LaplacianSmoothingSpeed(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,2u)>)>)> arg0, 
            itkVectorF2 arg1, 
            itkLevelSetFunctionIF2::GlobalDataStruct arg2 = None) -> float
        LaplacianSmoothingSpeed(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,2u)>)>)> arg0, 
            itkVectorF2 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_LaplacianSmoothingSpeed(self, *args)

    def SetAdvectionWeight(self, *args):
        """SetAdvectionWeight(self, float a)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetAdvectionWeight(self, *args)

    def GetAdvectionWeight(self):
        """GetAdvectionWeight(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetAdvectionWeight(self)

    def SetPropagationWeight(self, *args):
        """SetPropagationWeight(self, float p)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetPropagationWeight(self, *args)

    def GetPropagationWeight(self):
        """GetPropagationWeight(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetPropagationWeight(self)

    def SetCurvatureWeight(self, *args):
        """SetCurvatureWeight(self, float c)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetCurvatureWeight(self, *args)

    def GetCurvatureWeight(self):
        """GetCurvatureWeight(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetCurvatureWeight(self)

    def SetLaplacianSmoothingWeight(self, *args):
        """SetLaplacianSmoothingWeight(self, float c)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetLaplacianSmoothingWeight(self, *args)

    def GetLaplacianSmoothingWeight(self):
        """GetLaplacianSmoothingWeight(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetLaplacianSmoothingWeight(self)

    def SetEpsilonMagnitude(self, *args):
        """SetEpsilonMagnitude(self, float e)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetEpsilonMagnitude(self, *args)

    def GetEpsilonMagnitude(self):
        """GetEpsilonMagnitude(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetEpsilonMagnitude(self)

    def ComputeUpdate(self, *args):
        """
        ComputeUpdate(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,2u)>)>)> neighborhood, 
            void globalData, 
            itkVectorF2 arg2 = (0.0)) -> float
        ComputeUpdate(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,2u)>)>)> neighborhood, 
            void globalData) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeUpdate(self, *args)

    def Initialize(self, *args):
        """Initialize(self, itkSize2 r)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_Initialize(self, *args)

    def ComputeCurvatureTerm(self, *args):
        """
        ComputeCurvatureTerm(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,2u)>)>)> arg0, 
            itkVectorF2 arg1, 
            itkLevelSetFunctionIF2::GlobalDataStruct gd = None) -> float
        ComputeCurvatureTerm(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,2u)>)>)> arg0, 
            itkVectorF2 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeCurvatureTerm(self, *args)

    def ComputeMeanCurvature(self, *args):
        """
        ComputeMeanCurvature(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,2u)>)>)> arg0, 
            itkVectorF2 arg1, 
            itkLevelSetFunctionIF2::GlobalDataStruct gd = None) -> float
        ComputeMeanCurvature(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,2u)>)>)> arg0, 
            itkVectorF2 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeMeanCurvature(self, *args)

    def ComputeMinimalCurvature(self, *args):
        """
        ComputeMinimalCurvature(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,2u)>)>)> arg0, 
            itkVectorF2 arg1, 
            itkLevelSetFunctionIF2::GlobalDataStruct gd = None) -> float
        ComputeMinimalCurvature(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,2u)>)>)> arg0, 
            itkVectorF2 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeMinimalCurvature(self, *args)

    def Compute3DMinimalCurvature(self, *args):
        """
        Compute3DMinimalCurvature(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,2u)>)>)> arg0, 
            itkVectorF2 arg1, 
            itkLevelSetFunctionIF2::GlobalDataStruct gd = None) -> float
        Compute3DMinimalCurvature(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,2u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,2u)>)>)> arg0, 
            itkVectorF2 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_Compute3DMinimalCurvature(self, *args)

    def SetUseMinimalCurvature(self, *args):
        """SetUseMinimalCurvature(self, bool b)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetUseMinimalCurvature(self, *args)

    def GetUseMinimalCurvature(self):
        """GetUseMinimalCurvature(self) -> bool"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetUseMinimalCurvature(self)

    def UseMinimalCurvatureOn(self):
        """UseMinimalCurvatureOn(self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_UseMinimalCurvatureOn(self)

    def UseMinimalCurvatureOff(self):
        """UseMinimalCurvatureOff(self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_UseMinimalCurvatureOff(self)

    def SetMaximumCurvatureTimeStep(*args):
        """SetMaximumCurvatureTimeStep(double n)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetMaximumCurvatureTimeStep(*args)

    SetMaximumCurvatureTimeStep = staticmethod(SetMaximumCurvatureTimeStep)
    def GetMaximumCurvatureTimeStep():
        """GetMaximumCurvatureTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetMaximumCurvatureTimeStep()

    GetMaximumCurvatureTimeStep = staticmethod(GetMaximumCurvatureTimeStep)
    def SetMaximumPropagationTimeStep(*args):
        """SetMaximumPropagationTimeStep(double n)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetMaximumPropagationTimeStep(*args)

    SetMaximumPropagationTimeStep = staticmethod(SetMaximumPropagationTimeStep)
    def GetMaximumPropagationTimeStep():
        """GetMaximumPropagationTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetMaximumPropagationTimeStep()

    GetMaximumPropagationTimeStep = staticmethod(GetMaximumPropagationTimeStep)
    __swig_destroy__ = _itkLevelSetFunctionPython.delete_itkLevelSetFunctionIF2
    def cast(*args):
        """cast(itkLightObject obj) -> itkLevelSetFunctionIF2"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkLevelSetFunctionIF2"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionIF2
        
        Create a new object of the class itkLevelSetFunctionIF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkLevelSetFunctionIF2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkLevelSetFunctionIF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLevelSetFunctionIF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLevelSetFunctionIF2.AdvectionField = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_AdvectionField,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.PropagationSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_PropagationSpeed,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.CurvatureSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_CurvatureSpeed,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.LaplacianSmoothingSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_LaplacianSmoothingSpeed,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.SetAdvectionWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetAdvectionWeight,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.GetAdvectionWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetAdvectionWeight,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.SetPropagationWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetPropagationWeight,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.GetPropagationWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetPropagationWeight,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.SetCurvatureWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetCurvatureWeight,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.GetCurvatureWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetCurvatureWeight,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.SetLaplacianSmoothingWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetLaplacianSmoothingWeight,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.GetLaplacianSmoothingWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetLaplacianSmoothingWeight,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.SetEpsilonMagnitude = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetEpsilonMagnitude,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.GetEpsilonMagnitude = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetEpsilonMagnitude,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.ComputeUpdate = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeUpdate,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.Initialize = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_Initialize,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.ComputeCurvatureTerm = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeCurvatureTerm,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.ComputeMeanCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeMeanCurvature,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.ComputeMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_ComputeMinimalCurvature,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.Compute3DMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_Compute3DMinimalCurvature,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.SetUseMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetUseMinimalCurvature,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.GetUseMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetUseMinimalCurvature,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.UseMinimalCurvatureOn = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_UseMinimalCurvatureOn,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.UseMinimalCurvatureOff = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_UseMinimalCurvatureOff,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2.GetPointer = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetPointer,None,itkLevelSetFunctionIF2)
itkLevelSetFunctionIF2_swigregister = _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_swigregister
itkLevelSetFunctionIF2_swigregister(itkLevelSetFunctionIF2)

def itkLevelSetFunctionIF2___New_orig__():
  """itkLevelSetFunctionIF2___New_orig__()"""
  return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2___New_orig__()

def itkLevelSetFunctionIF2_SetMaximumCurvatureTimeStep(*args):
  """itkLevelSetFunctionIF2_SetMaximumCurvatureTimeStep(double n)"""
  return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetMaximumCurvatureTimeStep(*args)

def itkLevelSetFunctionIF2_GetMaximumCurvatureTimeStep():
  """itkLevelSetFunctionIF2_GetMaximumCurvatureTimeStep() -> double"""
  return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetMaximumCurvatureTimeStep()

def itkLevelSetFunctionIF2_SetMaximumPropagationTimeStep(*args):
  """itkLevelSetFunctionIF2_SetMaximumPropagationTimeStep(double n)"""
  return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_SetMaximumPropagationTimeStep(*args)

def itkLevelSetFunctionIF2_GetMaximumPropagationTimeStep():
  """itkLevelSetFunctionIF2_GetMaximumPropagationTimeStep() -> double"""
  return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_GetMaximumPropagationTimeStep()

def itkLevelSetFunctionIF2_cast(*args):
  """itkLevelSetFunctionIF2_cast(itkLightObject obj) -> itkLevelSetFunctionIF2"""
  return _itkLevelSetFunctionPython.itkLevelSetFunctionIF2_cast(*args)

class itkLevelSetFunctionIF3(itkFiniteDifferenceFunctionPython.itkFiniteDifferenceFunctionIF3):
    """Proxy of C++ itkLevelSetFunctionIF3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    ImageDimension = _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ImageDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def AdvectionField(self, *args):
        """
        AdvectionField(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,3u)>)>)> arg0, 
            itkVectorF3 arg1, 
            itkLevelSetFunctionIF3::GlobalDataStruct arg2 = None) -> itkFixedArrayF3
        AdvectionField(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,3u)>)>)> arg0, 
            itkVectorF3 arg1) -> itkFixedArrayF3
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_AdvectionField(self, *args)

    def PropagationSpeed(self, *args):
        """
        PropagationSpeed(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,3u)>)>)> arg0, 
            itkVectorF3 arg1, 
            itkLevelSetFunctionIF3::GlobalDataStruct arg2 = None) -> float
        PropagationSpeed(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,3u)>)>)> arg0, 
            itkVectorF3 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_PropagationSpeed(self, *args)

    def CurvatureSpeed(self, *args):
        """
        CurvatureSpeed(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,3u)>)>)> arg0, 
            itkVectorF3 arg1, 
            itkLevelSetFunctionIF3::GlobalDataStruct arg2 = None) -> float
        CurvatureSpeed(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,3u)>)>)> arg0, 
            itkVectorF3 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_CurvatureSpeed(self, *args)

    def LaplacianSmoothingSpeed(self, *args):
        """
        LaplacianSmoothingSpeed(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,3u)>)>)> arg0, 
            itkVectorF3 arg1, 
            itkLevelSetFunctionIF3::GlobalDataStruct arg2 = None) -> float
        LaplacianSmoothingSpeed(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,3u)>)>)> arg0, 
            itkVectorF3 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_LaplacianSmoothingSpeed(self, *args)

    def SetAdvectionWeight(self, *args):
        """SetAdvectionWeight(self, float a)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetAdvectionWeight(self, *args)

    def GetAdvectionWeight(self):
        """GetAdvectionWeight(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetAdvectionWeight(self)

    def SetPropagationWeight(self, *args):
        """SetPropagationWeight(self, float p)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetPropagationWeight(self, *args)

    def GetPropagationWeight(self):
        """GetPropagationWeight(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetPropagationWeight(self)

    def SetCurvatureWeight(self, *args):
        """SetCurvatureWeight(self, float c)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetCurvatureWeight(self, *args)

    def GetCurvatureWeight(self):
        """GetCurvatureWeight(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetCurvatureWeight(self)

    def SetLaplacianSmoothingWeight(self, *args):
        """SetLaplacianSmoothingWeight(self, float c)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetLaplacianSmoothingWeight(self, *args)

    def GetLaplacianSmoothingWeight(self):
        """GetLaplacianSmoothingWeight(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetLaplacianSmoothingWeight(self)

    def SetEpsilonMagnitude(self, *args):
        """SetEpsilonMagnitude(self, float e)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetEpsilonMagnitude(self, *args)

    def GetEpsilonMagnitude(self):
        """GetEpsilonMagnitude(self) -> float"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetEpsilonMagnitude(self)

    def ComputeUpdate(self, *args):
        """
        ComputeUpdate(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,3u)>)>)> neighborhood, 
            void globalData, 
            itkVectorF3 arg2 = (0.0)) -> float
        ComputeUpdate(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,3u)>)>)> neighborhood, 
            void globalData) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeUpdate(self, *args)

    def Initialize(self, *args):
        """Initialize(self, itkSize3 r)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_Initialize(self, *args)

    def ComputeCurvatureTerm(self, *args):
        """
        ComputeCurvatureTerm(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,3u)>)>)> arg0, 
            itkVectorF3 arg1, 
            itkLevelSetFunctionIF3::GlobalDataStruct gd = None) -> float
        ComputeCurvatureTerm(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,3u)>)>)> arg0, 
            itkVectorF3 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeCurvatureTerm(self, *args)

    def ComputeMeanCurvature(self, *args):
        """
        ComputeMeanCurvature(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,3u)>)>)> arg0, 
            itkVectorF3 arg1, 
            itkLevelSetFunctionIF3::GlobalDataStruct gd = None) -> float
        ComputeMeanCurvature(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,3u)>)>)> arg0, 
            itkVectorF3 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeMeanCurvature(self, *args)

    def ComputeMinimalCurvature(self, *args):
        """
        ComputeMinimalCurvature(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,3u)>)>)> arg0, 
            itkVectorF3 arg1, 
            itkLevelSetFunctionIF3::GlobalDataStruct gd = None) -> float
        ComputeMinimalCurvature(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,3u)>)>)> arg0, 
            itkVectorF3 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeMinimalCurvature(self, *args)

    def Compute3DMinimalCurvature(self, *args):
        """
        Compute3DMinimalCurvature(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,3u)>)>)> arg0, 
            itkVectorF3 arg1, 
            itkLevelSetFunctionIF3::GlobalDataStruct gd = None) -> float
        Compute3DMinimalCurvature(self, itk::ConstNeighborhoodIterator<(itk::Image<(float,3u)>,itk::ZeroFluxNeumannBoundaryCondition<(itk::Image<(float,3u)>)>)> arg0, 
            itkVectorF3 arg1) -> float
        """
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_Compute3DMinimalCurvature(self, *args)

    def SetUseMinimalCurvature(self, *args):
        """SetUseMinimalCurvature(self, bool b)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetUseMinimalCurvature(self, *args)

    def GetUseMinimalCurvature(self):
        """GetUseMinimalCurvature(self) -> bool"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetUseMinimalCurvature(self)

    def UseMinimalCurvatureOn(self):
        """UseMinimalCurvatureOn(self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_UseMinimalCurvatureOn(self)

    def UseMinimalCurvatureOff(self):
        """UseMinimalCurvatureOff(self)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_UseMinimalCurvatureOff(self)

    def SetMaximumCurvatureTimeStep(*args):
        """SetMaximumCurvatureTimeStep(double n)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetMaximumCurvatureTimeStep(*args)

    SetMaximumCurvatureTimeStep = staticmethod(SetMaximumCurvatureTimeStep)
    def GetMaximumCurvatureTimeStep():
        """GetMaximumCurvatureTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetMaximumCurvatureTimeStep()

    GetMaximumCurvatureTimeStep = staticmethod(GetMaximumCurvatureTimeStep)
    def SetMaximumPropagationTimeStep(*args):
        """SetMaximumPropagationTimeStep(double n)"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetMaximumPropagationTimeStep(*args)

    SetMaximumPropagationTimeStep = staticmethod(SetMaximumPropagationTimeStep)
    def GetMaximumPropagationTimeStep():
        """GetMaximumPropagationTimeStep() -> double"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetMaximumPropagationTimeStep()

    GetMaximumPropagationTimeStep = staticmethod(GetMaximumPropagationTimeStep)
    __swig_destroy__ = _itkLevelSetFunctionPython.delete_itkLevelSetFunctionIF3
    def cast(*args):
        """cast(itkLightObject obj) -> itkLevelSetFunctionIF3"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkLevelSetFunctionIF3"""
        return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkLevelSetFunctionIF3
        
        Create a new object of the class itkLevelSetFunctionIF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkLevelSetFunctionIF3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkLevelSetFunctionIF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkLevelSetFunctionIF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkLevelSetFunctionIF3.AdvectionField = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_AdvectionField,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.PropagationSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_PropagationSpeed,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.CurvatureSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_CurvatureSpeed,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.LaplacianSmoothingSpeed = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_LaplacianSmoothingSpeed,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.SetAdvectionWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetAdvectionWeight,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.GetAdvectionWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetAdvectionWeight,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.SetPropagationWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetPropagationWeight,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.GetPropagationWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetPropagationWeight,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.SetCurvatureWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetCurvatureWeight,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.GetCurvatureWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetCurvatureWeight,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.SetLaplacianSmoothingWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetLaplacianSmoothingWeight,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.GetLaplacianSmoothingWeight = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetLaplacianSmoothingWeight,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.SetEpsilonMagnitude = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetEpsilonMagnitude,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.GetEpsilonMagnitude = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetEpsilonMagnitude,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.ComputeUpdate = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeUpdate,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.Initialize = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_Initialize,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.ComputeCurvatureTerm = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeCurvatureTerm,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.ComputeMeanCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeMeanCurvature,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.ComputeMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_ComputeMinimalCurvature,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.Compute3DMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_Compute3DMinimalCurvature,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.SetUseMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetUseMinimalCurvature,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.GetUseMinimalCurvature = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetUseMinimalCurvature,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.UseMinimalCurvatureOn = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_UseMinimalCurvatureOn,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.UseMinimalCurvatureOff = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_UseMinimalCurvatureOff,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3.GetPointer = new_instancemethod(_itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetPointer,None,itkLevelSetFunctionIF3)
itkLevelSetFunctionIF3_swigregister = _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_swigregister
itkLevelSetFunctionIF3_swigregister(itkLevelSetFunctionIF3)

def itkLevelSetFunctionIF3___New_orig__():
  """itkLevelSetFunctionIF3___New_orig__()"""
  return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3___New_orig__()

def itkLevelSetFunctionIF3_SetMaximumCurvatureTimeStep(*args):
  """itkLevelSetFunctionIF3_SetMaximumCurvatureTimeStep(double n)"""
  return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetMaximumCurvatureTimeStep(*args)

def itkLevelSetFunctionIF3_GetMaximumCurvatureTimeStep():
  """itkLevelSetFunctionIF3_GetMaximumCurvatureTimeStep() -> double"""
  return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetMaximumCurvatureTimeStep()

def itkLevelSetFunctionIF3_SetMaximumPropagationTimeStep(*args):
  """itkLevelSetFunctionIF3_SetMaximumPropagationTimeStep(double n)"""
  return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_SetMaximumPropagationTimeStep(*args)

def itkLevelSetFunctionIF3_GetMaximumPropagationTimeStep():
  """itkLevelSetFunctionIF3_GetMaximumPropagationTimeStep() -> double"""
  return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_GetMaximumPropagationTimeStep()

def itkLevelSetFunctionIF3_cast(*args):
  """itkLevelSetFunctionIF3_cast(itkLightObject obj) -> itkLevelSetFunctionIF3"""
  return _itkLevelSetFunctionPython.itkLevelSetFunctionIF3_cast(*args)



