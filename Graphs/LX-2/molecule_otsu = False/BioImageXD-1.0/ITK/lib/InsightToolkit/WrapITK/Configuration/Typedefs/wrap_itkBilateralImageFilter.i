// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkBilateralImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkBilateralImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkBilateralImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkBilateralImageFilterJava
#endif
#ifdef SWIGLUA
%module itkBilateralImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkBilateralImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkBilateralImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkBilateralImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkBilateralImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkBilateralImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkBilateralImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkBilateralImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkBilateralImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkBilateralImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkBilateralImageFilterPython
#endif
#ifdef SWIGR
%module itkBilateralImageFilterR
#endif
#ifdef SWIGRUBY
%module itkBilateralImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkBilateralImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkBilateralImageFilterTcl
#endif
#ifdef SWIGXML
%module itkBilateralImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Denoising.includes"
%}


%{
%}




%import wrap_itkFixedArray.i
%import wrap_ITKRegions.i
%import wrap_itkImageToImageFilterA.i
%import wrap_ITKCommonBase.i
%import wrap_itkSize.i


%include itk.i
%include wrap_itkBilateralImageFilter_ext.i


 class itkBilateralImageFilterID2ID2 : public itkImageToImageFilterID2ID2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  OutputHasNumericTraitsCheck = 1 };
     static itkBilateralImageFilterID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetDomainSigma(itkFixedArrayD2 const _arg);
     virtual itkFixedArrayD2 const GetDomainSigma() const;
     virtual void SetRangeSigma(double const _arg);
     virtual double GetRangeSigma() const;
     virtual unsigned int GetFilterDimensionality() const;
     virtual void SetFilterDimensionality(unsigned int const _arg);
     void SetDomainSigma(double const v);
     virtual void AutomaticKernelSizeOn();
     virtual void AutomaticKernelSizeOff();
     virtual bool GetAutomaticKernelSize() const;
     virtual void SetAutomaticKernelSize(bool const _arg);
     void SetRadius(unsigned long const arg0);
     virtual void SetRadius(itkSize2 const _arg);
     virtual itkSize2 const & GetRadius() const;
     virtual void SetNumberOfRangeGaussianSamples(unsigned long const _arg);
     virtual unsigned long GetNumberOfRangeGaussianSamples() const;
   private:
     itkBilateralImageFilterID2ID2(itkBilateralImageFilterID2ID2 const & arg0);
     void operator=(itkBilateralImageFilterID2ID2 const & arg0);
   protected:
     itkBilateralImageFilterID2ID2();
     ~itkBilateralImageFilterID2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void BeforeThreadedGenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void GenerateInputRequestedRegion();
 };


 class itkBilateralImageFilterID2ID2_Pointer {
   public:
     itkBilateralImageFilterID2ID2_Pointer();
     itkBilateralImageFilterID2ID2_Pointer(itkBilateralImageFilterID2ID2_Pointer const & p);
     itkBilateralImageFilterID2ID2_Pointer(itkBilateralImageFilterID2ID2 * p);
     ~itkBilateralImageFilterID2ID2_Pointer();
     itkBilateralImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBilateralImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkBilateralImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkBilateralImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkBilateralImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkBilateralImageFilterID2ID2_Pointer const & r) const;
     itkBilateralImageFilterID2ID2_Pointer & operator=(itkBilateralImageFilterID2ID2_Pointer const & r);
     itkBilateralImageFilterID2ID2_Pointer & operator=(itkBilateralImageFilterID2ID2 * r);
     itkBilateralImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBilateralImageFilterID3ID3 : public itkImageToImageFilterID3ID3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  OutputHasNumericTraitsCheck = 1 };
     static itkBilateralImageFilterID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetDomainSigma(itkFixedArrayD3 const _arg);
     virtual itkFixedArrayD3 const GetDomainSigma() const;
     virtual void SetRangeSigma(double const _arg);
     virtual double GetRangeSigma() const;
     virtual unsigned int GetFilterDimensionality() const;
     virtual void SetFilterDimensionality(unsigned int const _arg);
     void SetDomainSigma(double const v);
     virtual void AutomaticKernelSizeOn();
     virtual void AutomaticKernelSizeOff();
     virtual bool GetAutomaticKernelSize() const;
     virtual void SetAutomaticKernelSize(bool const _arg);
     void SetRadius(unsigned long const arg0);
     virtual void SetRadius(itkSize3 const _arg);
     virtual itkSize3 const & GetRadius() const;
     virtual void SetNumberOfRangeGaussianSamples(unsigned long const _arg);
     virtual unsigned long GetNumberOfRangeGaussianSamples() const;
   private:
     itkBilateralImageFilterID3ID3(itkBilateralImageFilterID3ID3 const & arg0);
     void operator=(itkBilateralImageFilterID3ID3 const & arg0);
   protected:
     itkBilateralImageFilterID3ID3();
     ~itkBilateralImageFilterID3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void BeforeThreadedGenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void GenerateInputRequestedRegion();
 };


 class itkBilateralImageFilterID3ID3_Pointer {
   public:
     itkBilateralImageFilterID3ID3_Pointer();
     itkBilateralImageFilterID3ID3_Pointer(itkBilateralImageFilterID3ID3_Pointer const & p);
     itkBilateralImageFilterID3ID3_Pointer(itkBilateralImageFilterID3ID3 * p);
     ~itkBilateralImageFilterID3ID3_Pointer();
     itkBilateralImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBilateralImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkBilateralImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkBilateralImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkBilateralImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkBilateralImageFilterID3ID3_Pointer const & r) const;
     itkBilateralImageFilterID3ID3_Pointer & operator=(itkBilateralImageFilterID3ID3_Pointer const & r);
     itkBilateralImageFilterID3ID3_Pointer & operator=(itkBilateralImageFilterID3ID3 * r);
     itkBilateralImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBilateralImageFilterIF2IF2 : public itkImageToImageFilterIF2IF2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  OutputHasNumericTraitsCheck = 1 };
     static itkBilateralImageFilterIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetDomainSigma(itkFixedArrayD2 const _arg);
     virtual itkFixedArrayD2 const GetDomainSigma() const;
     virtual void SetRangeSigma(double const _arg);
     virtual double GetRangeSigma() const;
     virtual unsigned int GetFilterDimensionality() const;
     virtual void SetFilterDimensionality(unsigned int const _arg);
     void SetDomainSigma(double const v);
     virtual void AutomaticKernelSizeOn();
     virtual void AutomaticKernelSizeOff();
     virtual bool GetAutomaticKernelSize() const;
     virtual void SetAutomaticKernelSize(bool const _arg);
     void SetRadius(unsigned long const arg0);
     virtual void SetRadius(itkSize2 const _arg);
     virtual itkSize2 const & GetRadius() const;
     virtual void SetNumberOfRangeGaussianSamples(unsigned long const _arg);
     virtual unsigned long GetNumberOfRangeGaussianSamples() const;
   private:
     itkBilateralImageFilterIF2IF2(itkBilateralImageFilterIF2IF2 const & arg0);
     void operator=(itkBilateralImageFilterIF2IF2 const & arg0);
   protected:
     itkBilateralImageFilterIF2IF2();
     ~itkBilateralImageFilterIF2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void BeforeThreadedGenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void GenerateInputRequestedRegion();
 };


 class itkBilateralImageFilterIF2IF2_Pointer {
   public:
     itkBilateralImageFilterIF2IF2_Pointer();
     itkBilateralImageFilterIF2IF2_Pointer(itkBilateralImageFilterIF2IF2_Pointer const & p);
     itkBilateralImageFilterIF2IF2_Pointer(itkBilateralImageFilterIF2IF2 * p);
     ~itkBilateralImageFilterIF2IF2_Pointer();
     itkBilateralImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBilateralImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkBilateralImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkBilateralImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkBilateralImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkBilateralImageFilterIF2IF2_Pointer const & r) const;
     itkBilateralImageFilterIF2IF2_Pointer & operator=(itkBilateralImageFilterIF2IF2_Pointer const & r);
     itkBilateralImageFilterIF2IF2_Pointer & operator=(itkBilateralImageFilterIF2IF2 * r);
     itkBilateralImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBilateralImageFilterIF3IF3 : public itkImageToImageFilterIF3IF3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  OutputHasNumericTraitsCheck = 1 };
     static itkBilateralImageFilterIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetDomainSigma(itkFixedArrayD3 const _arg);
     virtual itkFixedArrayD3 const GetDomainSigma() const;
     virtual void SetRangeSigma(double const _arg);
     virtual double GetRangeSigma() const;
     virtual unsigned int GetFilterDimensionality() const;
     virtual void SetFilterDimensionality(unsigned int const _arg);
     void SetDomainSigma(double const v);
     virtual void AutomaticKernelSizeOn();
     virtual void AutomaticKernelSizeOff();
     virtual bool GetAutomaticKernelSize() const;
     virtual void SetAutomaticKernelSize(bool const _arg);
     void SetRadius(unsigned long const arg0);
     virtual void SetRadius(itkSize3 const _arg);
     virtual itkSize3 const & GetRadius() const;
     virtual void SetNumberOfRangeGaussianSamples(unsigned long const _arg);
     virtual unsigned long GetNumberOfRangeGaussianSamples() const;
   private:
     itkBilateralImageFilterIF3IF3(itkBilateralImageFilterIF3IF3 const & arg0);
     void operator=(itkBilateralImageFilterIF3IF3 const & arg0);
   protected:
     itkBilateralImageFilterIF3IF3();
     ~itkBilateralImageFilterIF3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void BeforeThreadedGenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void GenerateInputRequestedRegion();
 };


 class itkBilateralImageFilterIF3IF3_Pointer {
   public:
     itkBilateralImageFilterIF3IF3_Pointer();
     itkBilateralImageFilterIF3IF3_Pointer(itkBilateralImageFilterIF3IF3_Pointer const & p);
     itkBilateralImageFilterIF3IF3_Pointer(itkBilateralImageFilterIF3IF3 * p);
     ~itkBilateralImageFilterIF3IF3_Pointer();
     itkBilateralImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBilateralImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkBilateralImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkBilateralImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkBilateralImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkBilateralImageFilterIF3IF3_Pointer const & r) const;
     itkBilateralImageFilterIF3IF3_Pointer & operator=(itkBilateralImageFilterIF3IF3_Pointer const & r);
     itkBilateralImageFilterIF3IF3_Pointer & operator=(itkBilateralImageFilterIF3IF3 * r);
     itkBilateralImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBilateralImageFilterIUC2IUC2 : public itkImageToImageFilterIUC2IUC2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  OutputHasNumericTraitsCheck = 1 };
     static itkBilateralImageFilterIUC2IUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetDomainSigma(itkFixedArrayD2 const _arg);
     virtual itkFixedArrayD2 const GetDomainSigma() const;
     virtual void SetRangeSigma(double const _arg);
     virtual double GetRangeSigma() const;
     virtual unsigned int GetFilterDimensionality() const;
     virtual void SetFilterDimensionality(unsigned int const _arg);
     void SetDomainSigma(double const v);
     virtual void AutomaticKernelSizeOn();
     virtual void AutomaticKernelSizeOff();
     virtual bool GetAutomaticKernelSize() const;
     virtual void SetAutomaticKernelSize(bool const _arg);
     void SetRadius(unsigned long const arg0);
     virtual void SetRadius(itkSize2 const _arg);
     virtual itkSize2 const & GetRadius() const;
     virtual void SetNumberOfRangeGaussianSamples(unsigned long const _arg);
     virtual unsigned long GetNumberOfRangeGaussianSamples() const;
   private:
     itkBilateralImageFilterIUC2IUC2(itkBilateralImageFilterIUC2IUC2 const & arg0);
     void operator=(itkBilateralImageFilterIUC2IUC2 const & arg0);
   protected:
     itkBilateralImageFilterIUC2IUC2();
     ~itkBilateralImageFilterIUC2IUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void BeforeThreadedGenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void GenerateInputRequestedRegion();
 };


 class itkBilateralImageFilterIUC2IUC2_Pointer {
   public:
     itkBilateralImageFilterIUC2IUC2_Pointer();
     itkBilateralImageFilterIUC2IUC2_Pointer(itkBilateralImageFilterIUC2IUC2_Pointer const & p);
     itkBilateralImageFilterIUC2IUC2_Pointer(itkBilateralImageFilterIUC2IUC2 * p);
     ~itkBilateralImageFilterIUC2IUC2_Pointer();
     itkBilateralImageFilterIUC2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBilateralImageFilterIUC2IUC2 * GetPointer() const;
     bool operator<(itkBilateralImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>(itkBilateralImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator<=(itkBilateralImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>=(itkBilateralImageFilterIUC2IUC2_Pointer const & r) const;
     itkBilateralImageFilterIUC2IUC2_Pointer & operator=(itkBilateralImageFilterIUC2IUC2_Pointer const & r);
     itkBilateralImageFilterIUC2IUC2_Pointer & operator=(itkBilateralImageFilterIUC2IUC2 * r);
     itkBilateralImageFilterIUC2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBilateralImageFilterIUC3IUC3 : public itkImageToImageFilterIUC3IUC3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  OutputHasNumericTraitsCheck = 1 };
     static itkBilateralImageFilterIUC3IUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetDomainSigma(itkFixedArrayD3 const _arg);
     virtual itkFixedArrayD3 const GetDomainSigma() const;
     virtual void SetRangeSigma(double const _arg);
     virtual double GetRangeSigma() const;
     virtual unsigned int GetFilterDimensionality() const;
     virtual void SetFilterDimensionality(unsigned int const _arg);
     void SetDomainSigma(double const v);
     virtual void AutomaticKernelSizeOn();
     virtual void AutomaticKernelSizeOff();
     virtual bool GetAutomaticKernelSize() const;
     virtual void SetAutomaticKernelSize(bool const _arg);
     void SetRadius(unsigned long const arg0);
     virtual void SetRadius(itkSize3 const _arg);
     virtual itkSize3 const & GetRadius() const;
     virtual void SetNumberOfRangeGaussianSamples(unsigned long const _arg);
     virtual unsigned long GetNumberOfRangeGaussianSamples() const;
   private:
     itkBilateralImageFilterIUC3IUC3(itkBilateralImageFilterIUC3IUC3 const & arg0);
     void operator=(itkBilateralImageFilterIUC3IUC3 const & arg0);
   protected:
     itkBilateralImageFilterIUC3IUC3();
     ~itkBilateralImageFilterIUC3IUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void BeforeThreadedGenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void GenerateInputRequestedRegion();
 };


 class itkBilateralImageFilterIUC3IUC3_Pointer {
   public:
     itkBilateralImageFilterIUC3IUC3_Pointer();
     itkBilateralImageFilterIUC3IUC3_Pointer(itkBilateralImageFilterIUC3IUC3_Pointer const & p);
     itkBilateralImageFilterIUC3IUC3_Pointer(itkBilateralImageFilterIUC3IUC3 * p);
     ~itkBilateralImageFilterIUC3IUC3_Pointer();
     itkBilateralImageFilterIUC3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBilateralImageFilterIUC3IUC3 * GetPointer() const;
     bool operator<(itkBilateralImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>(itkBilateralImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator<=(itkBilateralImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>=(itkBilateralImageFilterIUC3IUC3_Pointer const & r) const;
     itkBilateralImageFilterIUC3IUC3_Pointer & operator=(itkBilateralImageFilterIUC3IUC3_Pointer const & r);
     itkBilateralImageFilterIUC3IUC3_Pointer & operator=(itkBilateralImageFilterIUC3IUC3 * r);
     itkBilateralImageFilterIUC3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBilateralImageFilterIUL2IUL2 : public itkImageToImageFilterIUL2IUL2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  OutputHasNumericTraitsCheck = 1 };
     static itkBilateralImageFilterIUL2IUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetDomainSigma(itkFixedArrayD2 const _arg);
     virtual itkFixedArrayD2 const GetDomainSigma() const;
     virtual void SetRangeSigma(double const _arg);
     virtual double GetRangeSigma() const;
     virtual unsigned int GetFilterDimensionality() const;
     virtual void SetFilterDimensionality(unsigned int const _arg);
     void SetDomainSigma(double const v);
     virtual void AutomaticKernelSizeOn();
     virtual void AutomaticKernelSizeOff();
     virtual bool GetAutomaticKernelSize() const;
     virtual void SetAutomaticKernelSize(bool const _arg);
     void SetRadius(unsigned long const arg0);
     virtual void SetRadius(itkSize2 const _arg);
     virtual itkSize2 const & GetRadius() const;
     virtual void SetNumberOfRangeGaussianSamples(unsigned long const _arg);
     virtual unsigned long GetNumberOfRangeGaussianSamples() const;
   private:
     itkBilateralImageFilterIUL2IUL2(itkBilateralImageFilterIUL2IUL2 const & arg0);
     void operator=(itkBilateralImageFilterIUL2IUL2 const & arg0);
   protected:
     itkBilateralImageFilterIUL2IUL2();
     ~itkBilateralImageFilterIUL2IUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void BeforeThreadedGenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void GenerateInputRequestedRegion();
 };


 class itkBilateralImageFilterIUL2IUL2_Pointer {
   public:
     itkBilateralImageFilterIUL2IUL2_Pointer();
     itkBilateralImageFilterIUL2IUL2_Pointer(itkBilateralImageFilterIUL2IUL2_Pointer const & p);
     itkBilateralImageFilterIUL2IUL2_Pointer(itkBilateralImageFilterIUL2IUL2 * p);
     ~itkBilateralImageFilterIUL2IUL2_Pointer();
     itkBilateralImageFilterIUL2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBilateralImageFilterIUL2IUL2 * GetPointer() const;
     bool operator<(itkBilateralImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>(itkBilateralImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator<=(itkBilateralImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>=(itkBilateralImageFilterIUL2IUL2_Pointer const & r) const;
     itkBilateralImageFilterIUL2IUL2_Pointer & operator=(itkBilateralImageFilterIUL2IUL2_Pointer const & r);
     itkBilateralImageFilterIUL2IUL2_Pointer & operator=(itkBilateralImageFilterIUL2IUL2 * r);
     itkBilateralImageFilterIUL2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBilateralImageFilterIUL3IUL3 : public itkImageToImageFilterIUL3IUL3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  OutputHasNumericTraitsCheck = 1 };
     static itkBilateralImageFilterIUL3IUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetDomainSigma(itkFixedArrayD3 const _arg);
     virtual itkFixedArrayD3 const GetDomainSigma() const;
     virtual void SetRangeSigma(double const _arg);
     virtual double GetRangeSigma() const;
     virtual unsigned int GetFilterDimensionality() const;
     virtual void SetFilterDimensionality(unsigned int const _arg);
     void SetDomainSigma(double const v);
     virtual void AutomaticKernelSizeOn();
     virtual void AutomaticKernelSizeOff();
     virtual bool GetAutomaticKernelSize() const;
     virtual void SetAutomaticKernelSize(bool const _arg);
     void SetRadius(unsigned long const arg0);
     virtual void SetRadius(itkSize3 const _arg);
     virtual itkSize3 const & GetRadius() const;
     virtual void SetNumberOfRangeGaussianSamples(unsigned long const _arg);
     virtual unsigned long GetNumberOfRangeGaussianSamples() const;
   private:
     itkBilateralImageFilterIUL3IUL3(itkBilateralImageFilterIUL3IUL3 const & arg0);
     void operator=(itkBilateralImageFilterIUL3IUL3 const & arg0);
   protected:
     itkBilateralImageFilterIUL3IUL3();
     ~itkBilateralImageFilterIUL3IUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void BeforeThreadedGenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void GenerateInputRequestedRegion();
 };


 class itkBilateralImageFilterIUL3IUL3_Pointer {
   public:
     itkBilateralImageFilterIUL3IUL3_Pointer();
     itkBilateralImageFilterIUL3IUL3_Pointer(itkBilateralImageFilterIUL3IUL3_Pointer const & p);
     itkBilateralImageFilterIUL3IUL3_Pointer(itkBilateralImageFilterIUL3IUL3 * p);
     ~itkBilateralImageFilterIUL3IUL3_Pointer();
     itkBilateralImageFilterIUL3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBilateralImageFilterIUL3IUL3 * GetPointer() const;
     bool operator<(itkBilateralImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>(itkBilateralImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator<=(itkBilateralImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>=(itkBilateralImageFilterIUL3IUL3_Pointer const & r) const;
     itkBilateralImageFilterIUL3IUL3_Pointer & operator=(itkBilateralImageFilterIUL3IUL3_Pointer const & r);
     itkBilateralImageFilterIUL3IUL3_Pointer & operator=(itkBilateralImageFilterIUL3IUL3 * r);
     itkBilateralImageFilterIUL3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBilateralImageFilterIUS2IUS2 : public itkImageToImageFilterIUS2IUS2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  OutputHasNumericTraitsCheck = 1 };
     static itkBilateralImageFilterIUS2IUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetDomainSigma(itkFixedArrayD2 const _arg);
     virtual itkFixedArrayD2 const GetDomainSigma() const;
     virtual void SetRangeSigma(double const _arg);
     virtual double GetRangeSigma() const;
     virtual unsigned int GetFilterDimensionality() const;
     virtual void SetFilterDimensionality(unsigned int const _arg);
     void SetDomainSigma(double const v);
     virtual void AutomaticKernelSizeOn();
     virtual void AutomaticKernelSizeOff();
     virtual bool GetAutomaticKernelSize() const;
     virtual void SetAutomaticKernelSize(bool const _arg);
     void SetRadius(unsigned long const arg0);
     virtual void SetRadius(itkSize2 const _arg);
     virtual itkSize2 const & GetRadius() const;
     virtual void SetNumberOfRangeGaussianSamples(unsigned long const _arg);
     virtual unsigned long GetNumberOfRangeGaussianSamples() const;
   private:
     itkBilateralImageFilterIUS2IUS2(itkBilateralImageFilterIUS2IUS2 const & arg0);
     void operator=(itkBilateralImageFilterIUS2IUS2 const & arg0);
   protected:
     itkBilateralImageFilterIUS2IUS2();
     ~itkBilateralImageFilterIUS2IUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void BeforeThreadedGenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void GenerateInputRequestedRegion();
 };


 class itkBilateralImageFilterIUS2IUS2_Pointer {
   public:
     itkBilateralImageFilterIUS2IUS2_Pointer();
     itkBilateralImageFilterIUS2IUS2_Pointer(itkBilateralImageFilterIUS2IUS2_Pointer const & p);
     itkBilateralImageFilterIUS2IUS2_Pointer(itkBilateralImageFilterIUS2IUS2 * p);
     ~itkBilateralImageFilterIUS2IUS2_Pointer();
     itkBilateralImageFilterIUS2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBilateralImageFilterIUS2IUS2 * GetPointer() const;
     bool operator<(itkBilateralImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>(itkBilateralImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator<=(itkBilateralImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>=(itkBilateralImageFilterIUS2IUS2_Pointer const & r) const;
     itkBilateralImageFilterIUS2IUS2_Pointer & operator=(itkBilateralImageFilterIUS2IUS2_Pointer const & r);
     itkBilateralImageFilterIUS2IUS2_Pointer & operator=(itkBilateralImageFilterIUS2IUS2 * r);
     itkBilateralImageFilterIUS2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBilateralImageFilterIUS3IUS3 : public itkImageToImageFilterIUS3IUS3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  OutputHasNumericTraitsCheck = 1 };
     static itkBilateralImageFilterIUS3IUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetDomainSigma(itkFixedArrayD3 const _arg);
     virtual itkFixedArrayD3 const GetDomainSigma() const;
     virtual void SetRangeSigma(double const _arg);
     virtual double GetRangeSigma() const;
     virtual unsigned int GetFilterDimensionality() const;
     virtual void SetFilterDimensionality(unsigned int const _arg);
     void SetDomainSigma(double const v);
     virtual void AutomaticKernelSizeOn();
     virtual void AutomaticKernelSizeOff();
     virtual bool GetAutomaticKernelSize() const;
     virtual void SetAutomaticKernelSize(bool const _arg);
     void SetRadius(unsigned long const arg0);
     virtual void SetRadius(itkSize3 const _arg);
     virtual itkSize3 const & GetRadius() const;
     virtual void SetNumberOfRangeGaussianSamples(unsigned long const _arg);
     virtual unsigned long GetNumberOfRangeGaussianSamples() const;
   private:
     itkBilateralImageFilterIUS3IUS3(itkBilateralImageFilterIUS3IUS3 const & arg0);
     void operator=(itkBilateralImageFilterIUS3IUS3 const & arg0);
   protected:
     itkBilateralImageFilterIUS3IUS3();
     ~itkBilateralImageFilterIUS3IUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void BeforeThreadedGenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void GenerateInputRequestedRegion();
 };


 class itkBilateralImageFilterIUS3IUS3_Pointer {
   public:
     itkBilateralImageFilterIUS3IUS3_Pointer();
     itkBilateralImageFilterIUS3IUS3_Pointer(itkBilateralImageFilterIUS3IUS3_Pointer const & p);
     itkBilateralImageFilterIUS3IUS3_Pointer(itkBilateralImageFilterIUS3IUS3 * p);
     ~itkBilateralImageFilterIUS3IUS3_Pointer();
     itkBilateralImageFilterIUS3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBilateralImageFilterIUS3IUS3 * GetPointer() const;
     bool operator<(itkBilateralImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>(itkBilateralImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator<=(itkBilateralImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>=(itkBilateralImageFilterIUS3IUS3_Pointer const & r) const;
     itkBilateralImageFilterIUS3IUS3_Pointer & operator=(itkBilateralImageFilterIUS3IUS3_Pointer const & r);
     itkBilateralImageFilterIUS3IUS3_Pointer & operator=(itkBilateralImageFilterIUS3IUS3 * r);
     itkBilateralImageFilterIUS3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


