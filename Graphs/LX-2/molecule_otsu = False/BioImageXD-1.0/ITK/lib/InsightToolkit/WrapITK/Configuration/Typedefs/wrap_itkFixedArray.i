// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkFixedArrayChicken
#endif
#ifdef SWIGCSHARP
%module itkFixedArrayCsharp
#endif
#ifdef SWIGGUILE
%module itkFixedArrayGuile
#endif
#ifdef SWIGJAVA
%module itkFixedArrayJava
#endif
#ifdef SWIGLUA
%module itkFixedArrayLua
#endif
#ifdef SWIGMODULA3
%module itkFixedArrayModula3
#endif
#ifdef SWIGMZSCHEME
%module itkFixedArrayMzscheme
#endif
#ifdef SWIGOCAML
%module itkFixedArrayOcaml
#endif
#ifdef SWIGPERL
%module itkFixedArrayPerl
#endif
#ifdef SWIGPERL5
%module itkFixedArrayPerl5
#endif
#ifdef SWIGPHP
%module itkFixedArrayPhp
#endif
#ifdef SWIGPHP4
%module itkFixedArrayPhp4
#endif
#ifdef SWIGPHP5
%module itkFixedArrayPhp5
#endif
#ifdef SWIGPIKE
%module itkFixedArrayPike
#endif
#ifdef SWIGPYTHON
%module itkFixedArrayPython
#endif
#ifdef SWIGR
%module itkFixedArrayR
#endif
#ifdef SWIGRUBY
%module itkFixedArrayRuby
#endif
#ifdef SWIGSEXP
%module itkFixedArraySexp
#endif
#ifdef SWIGTCL
%module itkFixedArrayTcl
#endif
#ifdef SWIGXML
%module itkFixedArrayXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
%}


%{
%}






%include itk.i
%include wrap_itkFixedArray_ext.i


 class itkFixedArrayB1 {
   public:
     enum  {  Length = 1 };
     enum  {  Dimension = 1 };
     ~itkFixedArrayB1();
     itkFixedArrayB1 & operator=(itkFixedArrayB1 const & arg0);
     itkFixedArrayB1(itkFixedArrayB1 const & arg0);
     itkFixedArrayB1();
     itkFixedArrayB1(bool const * r);
     itkFixedArrayB1(bool const & r);
     itkFixedArrayB1 & operator=(bool const * r);
     bool operator==(itkFixedArrayB1 const & r) const;
     bool operator!=(itkFixedArrayB1 const & r) const;
     bool & operator[](short index);
     bool const & operator[](short index) const;
     bool & operator[](unsigned short index);
     bool const & operator[](unsigned short index) const;
     bool & operator[](int index);
     bool const & operator[](int index) const;
     bool & operator[](unsigned int index);
     bool const & operator[](unsigned int index) const;
     bool & operator[](long index);
     bool const & operator[](long index) const;
     bool & operator[](unsigned long index);
     bool const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, bool const & value);
     bool const & GetElement(unsigned short index) const;
     bool * GetDataPointer();
     bool const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(bool const & arg0);
     static itkFixedArrayB1 Filled(bool const & arg0);
   private:
   protected:
 };


 class itkFixedArrayB2 {
   public:
     enum  {  Length = 2 };
     enum  {  Dimension = 2 };
     ~itkFixedArrayB2();
     itkFixedArrayB2 & operator=(itkFixedArrayB2 const & arg0);
     itkFixedArrayB2(itkFixedArrayB2 const & arg0);
     itkFixedArrayB2();
     itkFixedArrayB2(bool const * r);
     itkFixedArrayB2(bool const & r);
     itkFixedArrayB2 & operator=(bool const * r);
     bool operator==(itkFixedArrayB2 const & r) const;
     bool operator!=(itkFixedArrayB2 const & r) const;
     bool & operator[](short index);
     bool const & operator[](short index) const;
     bool & operator[](unsigned short index);
     bool const & operator[](unsigned short index) const;
     bool & operator[](int index);
     bool const & operator[](int index) const;
     bool & operator[](unsigned int index);
     bool const & operator[](unsigned int index) const;
     bool & operator[](long index);
     bool const & operator[](long index) const;
     bool & operator[](unsigned long index);
     bool const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, bool const & value);
     bool const & GetElement(unsigned short index) const;
     bool * GetDataPointer();
     bool const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(bool const & arg0);
     static itkFixedArrayB2 Filled(bool const & arg0);
   private:
   protected:
 };


 class itkFixedArrayB3 {
   public:
     enum  {  Length = 3 };
     enum  {  Dimension = 3 };
     ~itkFixedArrayB3();
     itkFixedArrayB3 & operator=(itkFixedArrayB3 const & arg0);
     itkFixedArrayB3(itkFixedArrayB3 const & arg0);
     itkFixedArrayB3();
     itkFixedArrayB3(bool const * r);
     itkFixedArrayB3(bool const & r);
     itkFixedArrayB3 & operator=(bool const * r);
     bool operator==(itkFixedArrayB3 const & r) const;
     bool operator!=(itkFixedArrayB3 const & r) const;
     bool & operator[](short index);
     bool const & operator[](short index) const;
     bool & operator[](unsigned short index);
     bool const & operator[](unsigned short index) const;
     bool & operator[](int index);
     bool const & operator[](int index) const;
     bool & operator[](unsigned int index);
     bool const & operator[](unsigned int index) const;
     bool & operator[](long index);
     bool const & operator[](long index) const;
     bool & operator[](unsigned long index);
     bool const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, bool const & value);
     bool const & GetElement(unsigned short index) const;
     bool * GetDataPointer();
     bool const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(bool const & arg0);
     static itkFixedArrayB3 Filled(bool const & arg0);
   private:
   protected:
 };


 class itkFixedArrayB4 {
   public:
     enum  {  Length = 4 };
     enum  {  Dimension = 4 };
     ~itkFixedArrayB4();
     itkFixedArrayB4 & operator=(itkFixedArrayB4 const & arg0);
     itkFixedArrayB4(itkFixedArrayB4 const & arg0);
     itkFixedArrayB4();
     itkFixedArrayB4(bool const * r);
     itkFixedArrayB4(bool const & r);
     itkFixedArrayB4 & operator=(bool const * r);
     bool operator==(itkFixedArrayB4 const & r) const;
     bool operator!=(itkFixedArrayB4 const & r) const;
     bool & operator[](short index);
     bool const & operator[](short index) const;
     bool & operator[](unsigned short index);
     bool const & operator[](unsigned short index) const;
     bool & operator[](int index);
     bool const & operator[](int index) const;
     bool & operator[](unsigned int index);
     bool const & operator[](unsigned int index) const;
     bool & operator[](long index);
     bool const & operator[](long index) const;
     bool & operator[](unsigned long index);
     bool const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, bool const & value);
     bool const & GetElement(unsigned short index) const;
     bool * GetDataPointer();
     bool const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(bool const & arg0);
     static itkFixedArrayB4 Filled(bool const & arg0);
   private:
   protected:
 };


 class itkFixedArrayB6 {
   public:
     enum  {  Length = 6 };
     enum  {  Dimension = 6 };
     ~itkFixedArrayB6();
     itkFixedArrayB6 & operator=(itkFixedArrayB6 const & arg0);
     itkFixedArrayB6(itkFixedArrayB6 const & arg0);
     itkFixedArrayB6();
     itkFixedArrayB6(bool const * r);
     itkFixedArrayB6(bool const & r);
     itkFixedArrayB6 & operator=(bool const * r);
     bool operator==(itkFixedArrayB6 const & r) const;
     bool operator!=(itkFixedArrayB6 const & r) const;
     bool & operator[](short index);
     bool const & operator[](short index) const;
     bool & operator[](unsigned short index);
     bool const & operator[](unsigned short index) const;
     bool & operator[](int index);
     bool const & operator[](int index) const;
     bool & operator[](unsigned int index);
     bool const & operator[](unsigned int index) const;
     bool & operator[](long index);
     bool const & operator[](long index) const;
     bool & operator[](unsigned long index);
     bool const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, bool const & value);
     bool const & GetElement(unsigned short index) const;
     bool * GetDataPointer();
     bool const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(bool const & arg0);
     static itkFixedArrayB6 Filled(bool const & arg0);
   private:
   protected:
 };


 class itkFixedArrayD1 {
   public:
     enum  {  Length = 1 };
     enum  {  Dimension = 1 };
     ~itkFixedArrayD1();
     itkFixedArrayD1 & operator=(itkFixedArrayD1 const & arg0);
     itkFixedArrayD1(itkFixedArrayD1 const & arg0);
     itkFixedArrayD1();
     itkFixedArrayD1(double const * r);
     itkFixedArrayD1(double const & r);
     itkFixedArrayD1 & operator=(double const * r);
     bool operator==(itkFixedArrayD1 const & r) const;
     bool operator!=(itkFixedArrayD1 const & r) const;
     double & operator[](short index);
     double const & operator[](short index) const;
     double & operator[](unsigned short index);
     double const & operator[](unsigned short index) const;
     double & operator[](int index);
     double const & operator[](int index) const;
     double & operator[](unsigned int index);
     double const & operator[](unsigned int index) const;
     double & operator[](long index);
     double const & operator[](long index) const;
     double & operator[](unsigned long index);
     double const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, double const & value);
     double const & GetElement(unsigned short index) const;
     double * GetDataPointer();
     double const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(double const & arg0);
     static itkFixedArrayD1 Filled(double const & arg0);
   private:
   protected:
 };


 class itkFixedArrayD2 {
   public:
     enum  {  Length = 2 };
     enum  {  Dimension = 2 };
     ~itkFixedArrayD2();
     itkFixedArrayD2 & operator=(itkFixedArrayD2 const & arg0);
     itkFixedArrayD2(itkFixedArrayD2 const & arg0);
     itkFixedArrayD2();
     itkFixedArrayD2(double const * r);
     itkFixedArrayD2(double const & r);
     itkFixedArrayD2 & operator=(double const * r);
     bool operator==(itkFixedArrayD2 const & r) const;
     bool operator!=(itkFixedArrayD2 const & r) const;
     double & operator[](short index);
     double const & operator[](short index) const;
     double & operator[](unsigned short index);
     double const & operator[](unsigned short index) const;
     double & operator[](int index);
     double const & operator[](int index) const;
     double & operator[](unsigned int index);
     double const & operator[](unsigned int index) const;
     double & operator[](long index);
     double const & operator[](long index) const;
     double & operator[](unsigned long index);
     double const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, double const & value);
     double const & GetElement(unsigned short index) const;
     double * GetDataPointer();
     double const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(double const & arg0);
     static itkFixedArrayD2 Filled(double const & arg0);
   private:
   protected:
 };


 class itkFixedArrayD3 {
   public:
     enum  {  Length = 3 };
     enum  {  Dimension = 3 };
     ~itkFixedArrayD3();
     itkFixedArrayD3 & operator=(itkFixedArrayD3 const & arg0);
     itkFixedArrayD3(itkFixedArrayD3 const & arg0);
     itkFixedArrayD3();
     itkFixedArrayD3(double const * r);
     itkFixedArrayD3(double const & r);
     itkFixedArrayD3 & operator=(double const * r);
     bool operator==(itkFixedArrayD3 const & r) const;
     bool operator!=(itkFixedArrayD3 const & r) const;
     double & operator[](short index);
     double const & operator[](short index) const;
     double & operator[](unsigned short index);
     double const & operator[](unsigned short index) const;
     double & operator[](int index);
     double const & operator[](int index) const;
     double & operator[](unsigned int index);
     double const & operator[](unsigned int index) const;
     double & operator[](long index);
     double const & operator[](long index) const;
     double & operator[](unsigned long index);
     double const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, double const & value);
     double const & GetElement(unsigned short index) const;
     double * GetDataPointer();
     double const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(double const & arg0);
     static itkFixedArrayD3 Filled(double const & arg0);
   private:
   protected:
 };


 class itkFixedArrayD4 {
   public:
     enum  {  Length = 4 };
     enum  {  Dimension = 4 };
     ~itkFixedArrayD4();
     itkFixedArrayD4 & operator=(itkFixedArrayD4 const & arg0);
     itkFixedArrayD4(itkFixedArrayD4 const & arg0);
     itkFixedArrayD4();
     itkFixedArrayD4(double const * r);
     itkFixedArrayD4(double const & r);
     itkFixedArrayD4 & operator=(double const * r);
     bool operator==(itkFixedArrayD4 const & r) const;
     bool operator!=(itkFixedArrayD4 const & r) const;
     double & operator[](short index);
     double const & operator[](short index) const;
     double & operator[](unsigned short index);
     double const & operator[](unsigned short index) const;
     double & operator[](int index);
     double const & operator[](int index) const;
     double & operator[](unsigned int index);
     double const & operator[](unsigned int index) const;
     double & operator[](long index);
     double const & operator[](long index) const;
     double & operator[](unsigned long index);
     double const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, double const & value);
     double const & GetElement(unsigned short index) const;
     double * GetDataPointer();
     double const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(double const & arg0);
     static itkFixedArrayD4 Filled(double const & arg0);
   private:
   protected:
 };


 class itkFixedArrayD6 {
   public:
     enum  {  Length = 6 };
     enum  {  Dimension = 6 };
     ~itkFixedArrayD6();
     itkFixedArrayD6 & operator=(itkFixedArrayD6 const & arg0);
     itkFixedArrayD6(itkFixedArrayD6 const & arg0);
     itkFixedArrayD6();
     itkFixedArrayD6(double const * r);
     itkFixedArrayD6(double const & r);
     itkFixedArrayD6 & operator=(double const * r);
     bool operator==(itkFixedArrayD6 const & r) const;
     bool operator!=(itkFixedArrayD6 const & r) const;
     double & operator[](short index);
     double const & operator[](short index) const;
     double & operator[](unsigned short index);
     double const & operator[](unsigned short index) const;
     double & operator[](int index);
     double const & operator[](int index) const;
     double & operator[](unsigned int index);
     double const & operator[](unsigned int index) const;
     double & operator[](long index);
     double const & operator[](long index) const;
     double & operator[](unsigned long index);
     double const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, double const & value);
     double const & GetElement(unsigned short index) const;
     double * GetDataPointer();
     double const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(double const & arg0);
     static itkFixedArrayD6 Filled(double const & arg0);
   private:
   protected:
 };


 class itkFixedArrayF1 {
   public:
     enum  {  Length = 1 };
     enum  {  Dimension = 1 };
     ~itkFixedArrayF1();
     itkFixedArrayF1 & operator=(itkFixedArrayF1 const & arg0);
     itkFixedArrayF1(itkFixedArrayF1 const & arg0);
     itkFixedArrayF1();
     itkFixedArrayF1(float const * r);
     itkFixedArrayF1(float const & r);
     itkFixedArrayF1 & operator=(float const * r);
     bool operator==(itkFixedArrayF1 const & r) const;
     bool operator!=(itkFixedArrayF1 const & r) const;
     float & operator[](short index);
     float const & operator[](short index) const;
     float & operator[](unsigned short index);
     float const & operator[](unsigned short index) const;
     float & operator[](int index);
     float const & operator[](int index) const;
     float & operator[](unsigned int index);
     float const & operator[](unsigned int index) const;
     float & operator[](long index);
     float const & operator[](long index) const;
     float & operator[](unsigned long index);
     float const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, float const & value);
     float const & GetElement(unsigned short index) const;
     float * GetDataPointer();
     float const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(float const & arg0);
     static itkFixedArrayF1 Filled(float const & arg0);
   private:
   protected:
 };


 class itkFixedArrayF2 {
   public:
     enum  {  Length = 2 };
     enum  {  Dimension = 2 };
     ~itkFixedArrayF2();
     itkFixedArrayF2 & operator=(itkFixedArrayF2 const & arg0);
     itkFixedArrayF2(itkFixedArrayF2 const & arg0);
     itkFixedArrayF2();
     itkFixedArrayF2(float const * r);
     itkFixedArrayF2(float const & r);
     itkFixedArrayF2 & operator=(float const * r);
     bool operator==(itkFixedArrayF2 const & r) const;
     bool operator!=(itkFixedArrayF2 const & r) const;
     float & operator[](short index);
     float const & operator[](short index) const;
     float & operator[](unsigned short index);
     float const & operator[](unsigned short index) const;
     float & operator[](int index);
     float const & operator[](int index) const;
     float & operator[](unsigned int index);
     float const & operator[](unsigned int index) const;
     float & operator[](long index);
     float const & operator[](long index) const;
     float & operator[](unsigned long index);
     float const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, float const & value);
     float const & GetElement(unsigned short index) const;
     float * GetDataPointer();
     float const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(float const & arg0);
     static itkFixedArrayF2 Filled(float const & arg0);
   private:
   protected:
 };


 class itkFixedArrayF3 {
   public:
     enum  {  Length = 3 };
     enum  {  Dimension = 3 };
     ~itkFixedArrayF3();
     itkFixedArrayF3 & operator=(itkFixedArrayF3 const & arg0);
     itkFixedArrayF3(itkFixedArrayF3 const & arg0);
     itkFixedArrayF3();
     itkFixedArrayF3(float const * r);
     itkFixedArrayF3(float const & r);
     itkFixedArrayF3 & operator=(float const * r);
     bool operator==(itkFixedArrayF3 const & r) const;
     bool operator!=(itkFixedArrayF3 const & r) const;
     float & operator[](short index);
     float const & operator[](short index) const;
     float & operator[](unsigned short index);
     float const & operator[](unsigned short index) const;
     float & operator[](int index);
     float const & operator[](int index) const;
     float & operator[](unsigned int index);
     float const & operator[](unsigned int index) const;
     float & operator[](long index);
     float const & operator[](long index) const;
     float & operator[](unsigned long index);
     float const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, float const & value);
     float const & GetElement(unsigned short index) const;
     float * GetDataPointer();
     float const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(float const & arg0);
     static itkFixedArrayF3 Filled(float const & arg0);
   private:
   protected:
 };


 class itkFixedArrayF4 {
   public:
     enum  {  Length = 4 };
     enum  {  Dimension = 4 };
     ~itkFixedArrayF4();
     itkFixedArrayF4 & operator=(itkFixedArrayF4 const & arg0);
     itkFixedArrayF4(itkFixedArrayF4 const & arg0);
     itkFixedArrayF4();
     itkFixedArrayF4(float const * r);
     itkFixedArrayF4(float const & r);
     itkFixedArrayF4 & operator=(float const * r);
     bool operator==(itkFixedArrayF4 const & r) const;
     bool operator!=(itkFixedArrayF4 const & r) const;
     float & operator[](short index);
     float const & operator[](short index) const;
     float & operator[](unsigned short index);
     float const & operator[](unsigned short index) const;
     float & operator[](int index);
     float const & operator[](int index) const;
     float & operator[](unsigned int index);
     float const & operator[](unsigned int index) const;
     float & operator[](long index);
     float const & operator[](long index) const;
     float & operator[](unsigned long index);
     float const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, float const & value);
     float const & GetElement(unsigned short index) const;
     float * GetDataPointer();
     float const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(float const & arg0);
     static itkFixedArrayF4 Filled(float const & arg0);
   private:
   protected:
 };


 class itkFixedArrayF6 {
   public:
     enum  {  Length = 6 };
     enum  {  Dimension = 6 };
     ~itkFixedArrayF6();
     itkFixedArrayF6 & operator=(itkFixedArrayF6 const & arg0);
     itkFixedArrayF6(itkFixedArrayF6 const & arg0);
     itkFixedArrayF6();
     itkFixedArrayF6(float const * r);
     itkFixedArrayF6(float const & r);
     itkFixedArrayF6 & operator=(float const * r);
     bool operator==(itkFixedArrayF6 const & r) const;
     bool operator!=(itkFixedArrayF6 const & r) const;
     float & operator[](short index);
     float const & operator[](short index) const;
     float & operator[](unsigned short index);
     float const & operator[](unsigned short index) const;
     float & operator[](int index);
     float const & operator[](int index) const;
     float & operator[](unsigned int index);
     float const & operator[](unsigned int index) const;
     float & operator[](long index);
     float const & operator[](long index) const;
     float & operator[](unsigned long index);
     float const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, float const & value);
     float const & GetElement(unsigned short index) const;
     float * GetDataPointer();
     float const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(float const & arg0);
     static itkFixedArrayF6 Filled(float const & arg0);
   private:
   protected:
 };


 class itkFixedArraySC1 {
   public:
     enum  {  Length = 1 };
     enum  {  Dimension = 1 };
     ~itkFixedArraySC1();
     itkFixedArraySC1 & operator=(itkFixedArraySC1 const & arg0);
     itkFixedArraySC1(itkFixedArraySC1 const & arg0);
     itkFixedArraySC1();
     itkFixedArraySC1(signed char const * r);
     itkFixedArraySC1(signed char const & r);
     itkFixedArraySC1 & operator=(signed char const * r);
     bool operator==(itkFixedArraySC1 const & r) const;
     bool operator!=(itkFixedArraySC1 const & r) const;
     signed char & operator[](short index);
     signed char const & operator[](short index) const;
     signed char & operator[](unsigned short index);
     signed char const & operator[](unsigned short index) const;
     signed char & operator[](int index);
     signed char const & operator[](int index) const;
     signed char & operator[](unsigned int index);
     signed char const & operator[](unsigned int index) const;
     signed char & operator[](long index);
     signed char const & operator[](long index) const;
     signed char & operator[](unsigned long index);
     signed char const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, signed char const & value);
     signed char const & GetElement(unsigned short index) const;
     signed char * GetDataPointer();
     signed char const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(signed char const & arg0);
     static itkFixedArraySC1 Filled(signed char const & arg0);
   private:
   protected:
 };


 class itkFixedArraySC2 {
   public:
     enum  {  Length = 2 };
     enum  {  Dimension = 2 };
     ~itkFixedArraySC2();
     itkFixedArraySC2 & operator=(itkFixedArraySC2 const & arg0);
     itkFixedArraySC2(itkFixedArraySC2 const & arg0);
     itkFixedArraySC2();
     itkFixedArraySC2(signed char const * r);
     itkFixedArraySC2(signed char const & r);
     itkFixedArraySC2 & operator=(signed char const * r);
     bool operator==(itkFixedArraySC2 const & r) const;
     bool operator!=(itkFixedArraySC2 const & r) const;
     signed char & operator[](short index);
     signed char const & operator[](short index) const;
     signed char & operator[](unsigned short index);
     signed char const & operator[](unsigned short index) const;
     signed char & operator[](int index);
     signed char const & operator[](int index) const;
     signed char & operator[](unsigned int index);
     signed char const & operator[](unsigned int index) const;
     signed char & operator[](long index);
     signed char const & operator[](long index) const;
     signed char & operator[](unsigned long index);
     signed char const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, signed char const & value);
     signed char const & GetElement(unsigned short index) const;
     signed char * GetDataPointer();
     signed char const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(signed char const & arg0);
     static itkFixedArraySC2 Filled(signed char const & arg0);
   private:
   protected:
 };


 class itkFixedArraySC3 {
   public:
     enum  {  Length = 3 };
     enum  {  Dimension = 3 };
     ~itkFixedArraySC3();
     itkFixedArraySC3 & operator=(itkFixedArraySC3 const & arg0);
     itkFixedArraySC3(itkFixedArraySC3 const & arg0);
     itkFixedArraySC3();
     itkFixedArraySC3(signed char const * r);
     itkFixedArraySC3(signed char const & r);
     itkFixedArraySC3 & operator=(signed char const * r);
     bool operator==(itkFixedArraySC3 const & r) const;
     bool operator!=(itkFixedArraySC3 const & r) const;
     signed char & operator[](short index);
     signed char const & operator[](short index) const;
     signed char & operator[](unsigned short index);
     signed char const & operator[](unsigned short index) const;
     signed char & operator[](int index);
     signed char const & operator[](int index) const;
     signed char & operator[](unsigned int index);
     signed char const & operator[](unsigned int index) const;
     signed char & operator[](long index);
     signed char const & operator[](long index) const;
     signed char & operator[](unsigned long index);
     signed char const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, signed char const & value);
     signed char const & GetElement(unsigned short index) const;
     signed char * GetDataPointer();
     signed char const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(signed char const & arg0);
     static itkFixedArraySC3 Filled(signed char const & arg0);
   private:
   protected:
 };


 class itkFixedArraySC4 {
   public:
     enum  {  Length = 4 };
     enum  {  Dimension = 4 };
     ~itkFixedArraySC4();
     itkFixedArraySC4 & operator=(itkFixedArraySC4 const & arg0);
     itkFixedArraySC4(itkFixedArraySC4 const & arg0);
     itkFixedArraySC4();
     itkFixedArraySC4(signed char const * r);
     itkFixedArraySC4(signed char const & r);
     itkFixedArraySC4 & operator=(signed char const * r);
     bool operator==(itkFixedArraySC4 const & r) const;
     bool operator!=(itkFixedArraySC4 const & r) const;
     signed char & operator[](short index);
     signed char const & operator[](short index) const;
     signed char & operator[](unsigned short index);
     signed char const & operator[](unsigned short index) const;
     signed char & operator[](int index);
     signed char const & operator[](int index) const;
     signed char & operator[](unsigned int index);
     signed char const & operator[](unsigned int index) const;
     signed char & operator[](long index);
     signed char const & operator[](long index) const;
     signed char & operator[](unsigned long index);
     signed char const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, signed char const & value);
     signed char const & GetElement(unsigned short index) const;
     signed char * GetDataPointer();
     signed char const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(signed char const & arg0);
     static itkFixedArraySC4 Filled(signed char const & arg0);
   private:
   protected:
 };


 class itkFixedArraySC6 {
   public:
     enum  {  Length = 6 };
     enum  {  Dimension = 6 };
     ~itkFixedArraySC6();
     itkFixedArraySC6 & operator=(itkFixedArraySC6 const & arg0);
     itkFixedArraySC6(itkFixedArraySC6 const & arg0);
     itkFixedArraySC6();
     itkFixedArraySC6(signed char const * r);
     itkFixedArraySC6(signed char const & r);
     itkFixedArraySC6 & operator=(signed char const * r);
     bool operator==(itkFixedArraySC6 const & r) const;
     bool operator!=(itkFixedArraySC6 const & r) const;
     signed char & operator[](short index);
     signed char const & operator[](short index) const;
     signed char & operator[](unsigned short index);
     signed char const & operator[](unsigned short index) const;
     signed char & operator[](int index);
     signed char const & operator[](int index) const;
     signed char & operator[](unsigned int index);
     signed char const & operator[](unsigned int index) const;
     signed char & operator[](long index);
     signed char const & operator[](long index) const;
     signed char & operator[](unsigned long index);
     signed char const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, signed char const & value);
     signed char const & GetElement(unsigned short index) const;
     signed char * GetDataPointer();
     signed char const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(signed char const & arg0);
     static itkFixedArraySC6 Filled(signed char const & arg0);
   private:
   protected:
 };


 class itkFixedArraySL1 {
   public:
     enum  {  Length = 1 };
     enum  {  Dimension = 1 };
     ~itkFixedArraySL1();
     itkFixedArraySL1 & operator=(itkFixedArraySL1 const & arg0);
     itkFixedArraySL1(itkFixedArraySL1 const & arg0);
     itkFixedArraySL1();
     itkFixedArraySL1(long const * r);
     itkFixedArraySL1(long const & r);
     itkFixedArraySL1 & operator=(long const * r);
     bool operator==(itkFixedArraySL1 const & r) const;
     bool operator!=(itkFixedArraySL1 const & r) const;
     long & operator[](short index);
     long const & operator[](short index) const;
     long & operator[](unsigned short index);
     long const & operator[](unsigned short index) const;
     long & operator[](int index);
     long const & operator[](int index) const;
     long & operator[](unsigned int index);
     long const & operator[](unsigned int index) const;
     long & operator[](long index);
     long const & operator[](long index) const;
     long & operator[](unsigned long index);
     long const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, long const & value);
     long const & GetElement(unsigned short index) const;
     long * GetDataPointer();
     long const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(long const & arg0);
     static itkFixedArraySL1 Filled(long const & arg0);
   private:
   protected:
 };


 class itkFixedArraySL2 {
   public:
     enum  {  Length = 2 };
     enum  {  Dimension = 2 };
     ~itkFixedArraySL2();
     itkFixedArraySL2 & operator=(itkFixedArraySL2 const & arg0);
     itkFixedArraySL2(itkFixedArraySL2 const & arg0);
     itkFixedArraySL2();
     itkFixedArraySL2(long const * r);
     itkFixedArraySL2(long const & r);
     itkFixedArraySL2 & operator=(long const * r);
     bool operator==(itkFixedArraySL2 const & r) const;
     bool operator!=(itkFixedArraySL2 const & r) const;
     long & operator[](short index);
     long const & operator[](short index) const;
     long & operator[](unsigned short index);
     long const & operator[](unsigned short index) const;
     long & operator[](int index);
     long const & operator[](int index) const;
     long & operator[](unsigned int index);
     long const & operator[](unsigned int index) const;
     long & operator[](long index);
     long const & operator[](long index) const;
     long & operator[](unsigned long index);
     long const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, long const & value);
     long const & GetElement(unsigned short index) const;
     long * GetDataPointer();
     long const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(long const & arg0);
     static itkFixedArraySL2 Filled(long const & arg0);
   private:
   protected:
 };


 class itkFixedArraySL3 {
   public:
     enum  {  Length = 3 };
     enum  {  Dimension = 3 };
     ~itkFixedArraySL3();
     itkFixedArraySL3 & operator=(itkFixedArraySL3 const & arg0);
     itkFixedArraySL3(itkFixedArraySL3 const & arg0);
     itkFixedArraySL3();
     itkFixedArraySL3(long const * r);
     itkFixedArraySL3(long const & r);
     itkFixedArraySL3 & operator=(long const * r);
     bool operator==(itkFixedArraySL3 const & r) const;
     bool operator!=(itkFixedArraySL3 const & r) const;
     long & operator[](short index);
     long const & operator[](short index) const;
     long & operator[](unsigned short index);
     long const & operator[](unsigned short index) const;
     long & operator[](int index);
     long const & operator[](int index) const;
     long & operator[](unsigned int index);
     long const & operator[](unsigned int index) const;
     long & operator[](long index);
     long const & operator[](long index) const;
     long & operator[](unsigned long index);
     long const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, long const & value);
     long const & GetElement(unsigned short index) const;
     long * GetDataPointer();
     long const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(long const & arg0);
     static itkFixedArraySL3 Filled(long const & arg0);
   private:
   protected:
 };


 class itkFixedArraySL4 {
   public:
     enum  {  Length = 4 };
     enum  {  Dimension = 4 };
     ~itkFixedArraySL4();
     itkFixedArraySL4 & operator=(itkFixedArraySL4 const & arg0);
     itkFixedArraySL4(itkFixedArraySL4 const & arg0);
     itkFixedArraySL4();
     itkFixedArraySL4(long const * r);
     itkFixedArraySL4(long const & r);
     itkFixedArraySL4 & operator=(long const * r);
     bool operator==(itkFixedArraySL4 const & r) const;
     bool operator!=(itkFixedArraySL4 const & r) const;
     long & operator[](short index);
     long const & operator[](short index) const;
     long & operator[](unsigned short index);
     long const & operator[](unsigned short index) const;
     long & operator[](int index);
     long const & operator[](int index) const;
     long & operator[](unsigned int index);
     long const & operator[](unsigned int index) const;
     long & operator[](long index);
     long const & operator[](long index) const;
     long & operator[](unsigned long index);
     long const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, long const & value);
     long const & GetElement(unsigned short index) const;
     long * GetDataPointer();
     long const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(long const & arg0);
     static itkFixedArraySL4 Filled(long const & arg0);
   private:
   protected:
 };


 class itkFixedArraySL6 {
   public:
     enum  {  Length = 6 };
     enum  {  Dimension = 6 };
     ~itkFixedArraySL6();
     itkFixedArraySL6 & operator=(itkFixedArraySL6 const & arg0);
     itkFixedArraySL6(itkFixedArraySL6 const & arg0);
     itkFixedArraySL6();
     itkFixedArraySL6(long const * r);
     itkFixedArraySL6(long const & r);
     itkFixedArraySL6 & operator=(long const * r);
     bool operator==(itkFixedArraySL6 const & r) const;
     bool operator!=(itkFixedArraySL6 const & r) const;
     long & operator[](short index);
     long const & operator[](short index) const;
     long & operator[](unsigned short index);
     long const & operator[](unsigned short index) const;
     long & operator[](int index);
     long const & operator[](int index) const;
     long & operator[](unsigned int index);
     long const & operator[](unsigned int index) const;
     long & operator[](long index);
     long const & operator[](long index) const;
     long & operator[](unsigned long index);
     long const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, long const & value);
     long const & GetElement(unsigned short index) const;
     long * GetDataPointer();
     long const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(long const & arg0);
     static itkFixedArraySL6 Filled(long const & arg0);
   private:
   protected:
 };


 class itkFixedArraySS1 {
   public:
     enum  {  Length = 1 };
     enum  {  Dimension = 1 };
     ~itkFixedArraySS1();
     itkFixedArraySS1 & operator=(itkFixedArraySS1 const & arg0);
     itkFixedArraySS1(itkFixedArraySS1 const & arg0);
     itkFixedArraySS1();
     itkFixedArraySS1(short const * r);
     itkFixedArraySS1(short const & r);
     itkFixedArraySS1 & operator=(short const * r);
     bool operator==(itkFixedArraySS1 const & r) const;
     bool operator!=(itkFixedArraySS1 const & r) const;
     short & operator[](short index);
     short const & operator[](short index) const;
     short & operator[](unsigned short index);
     short const & operator[](unsigned short index) const;
     short & operator[](int index);
     short const & operator[](int index) const;
     short & operator[](unsigned int index);
     short const & operator[](unsigned int index) const;
     short & operator[](long index);
     short const & operator[](long index) const;
     short & operator[](unsigned long index);
     short const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, short const & value);
     short const & GetElement(unsigned short index) const;
     short * GetDataPointer();
     short const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(short const & arg0);
     static itkFixedArraySS1 Filled(short const & arg0);
   private:
   protected:
 };


 class itkFixedArraySS2 {
   public:
     enum  {  Length = 2 };
     enum  {  Dimension = 2 };
     ~itkFixedArraySS2();
     itkFixedArraySS2 & operator=(itkFixedArraySS2 const & arg0);
     itkFixedArraySS2(itkFixedArraySS2 const & arg0);
     itkFixedArraySS2();
     itkFixedArraySS2(short const * r);
     itkFixedArraySS2(short const & r);
     itkFixedArraySS2 & operator=(short const * r);
     bool operator==(itkFixedArraySS2 const & r) const;
     bool operator!=(itkFixedArraySS2 const & r) const;
     short & operator[](short index);
     short const & operator[](short index) const;
     short & operator[](unsigned short index);
     short const & operator[](unsigned short index) const;
     short & operator[](int index);
     short const & operator[](int index) const;
     short & operator[](unsigned int index);
     short const & operator[](unsigned int index) const;
     short & operator[](long index);
     short const & operator[](long index) const;
     short & operator[](unsigned long index);
     short const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, short const & value);
     short const & GetElement(unsigned short index) const;
     short * GetDataPointer();
     short const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(short const & arg0);
     static itkFixedArraySS2 Filled(short const & arg0);
   private:
   protected:
 };


 class itkFixedArraySS3 {
   public:
     enum  {  Length = 3 };
     enum  {  Dimension = 3 };
     ~itkFixedArraySS3();
     itkFixedArraySS3 & operator=(itkFixedArraySS3 const & arg0);
     itkFixedArraySS3(itkFixedArraySS3 const & arg0);
     itkFixedArraySS3();
     itkFixedArraySS3(short const * r);
     itkFixedArraySS3(short const & r);
     itkFixedArraySS3 & operator=(short const * r);
     bool operator==(itkFixedArraySS3 const & r) const;
     bool operator!=(itkFixedArraySS3 const & r) const;
     short & operator[](short index);
     short const & operator[](short index) const;
     short & operator[](unsigned short index);
     short const & operator[](unsigned short index) const;
     short & operator[](int index);
     short const & operator[](int index) const;
     short & operator[](unsigned int index);
     short const & operator[](unsigned int index) const;
     short & operator[](long index);
     short const & operator[](long index) const;
     short & operator[](unsigned long index);
     short const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, short const & value);
     short const & GetElement(unsigned short index) const;
     short * GetDataPointer();
     short const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(short const & arg0);
     static itkFixedArraySS3 Filled(short const & arg0);
   private:
   protected:
 };


 class itkFixedArraySS4 {
   public:
     enum  {  Length = 4 };
     enum  {  Dimension = 4 };
     ~itkFixedArraySS4();
     itkFixedArraySS4 & operator=(itkFixedArraySS4 const & arg0);
     itkFixedArraySS4(itkFixedArraySS4 const & arg0);
     itkFixedArraySS4();
     itkFixedArraySS4(short const * r);
     itkFixedArraySS4(short const & r);
     itkFixedArraySS4 & operator=(short const * r);
     bool operator==(itkFixedArraySS4 const & r) const;
     bool operator!=(itkFixedArraySS4 const & r) const;
     short & operator[](short index);
     short const & operator[](short index) const;
     short & operator[](unsigned short index);
     short const & operator[](unsigned short index) const;
     short & operator[](int index);
     short const & operator[](int index) const;
     short & operator[](unsigned int index);
     short const & operator[](unsigned int index) const;
     short & operator[](long index);
     short const & operator[](long index) const;
     short & operator[](unsigned long index);
     short const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, short const & value);
     short const & GetElement(unsigned short index) const;
     short * GetDataPointer();
     short const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(short const & arg0);
     static itkFixedArraySS4 Filled(short const & arg0);
   private:
   protected:
 };


 class itkFixedArraySS6 {
   public:
     enum  {  Length = 6 };
     enum  {  Dimension = 6 };
     ~itkFixedArraySS6();
     itkFixedArraySS6 & operator=(itkFixedArraySS6 const & arg0);
     itkFixedArraySS6(itkFixedArraySS6 const & arg0);
     itkFixedArraySS6();
     itkFixedArraySS6(short const * r);
     itkFixedArraySS6(short const & r);
     itkFixedArraySS6 & operator=(short const * r);
     bool operator==(itkFixedArraySS6 const & r) const;
     bool operator!=(itkFixedArraySS6 const & r) const;
     short & operator[](short index);
     short const & operator[](short index) const;
     short & operator[](unsigned short index);
     short const & operator[](unsigned short index) const;
     short & operator[](int index);
     short const & operator[](int index) const;
     short & operator[](unsigned int index);
     short const & operator[](unsigned int index) const;
     short & operator[](long index);
     short const & operator[](long index) const;
     short & operator[](unsigned long index);
     short const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, short const & value);
     short const & GetElement(unsigned short index) const;
     short * GetDataPointer();
     short const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(short const & arg0);
     static itkFixedArraySS6 Filled(short const & arg0);
   private:
   protected:
 };


 class itkFixedArrayUC1 {
   public:
     enum  {  Length = 1 };
     enum  {  Dimension = 1 };
     ~itkFixedArrayUC1();
     itkFixedArrayUC1 & operator=(itkFixedArrayUC1 const & arg0);
     itkFixedArrayUC1(itkFixedArrayUC1 const & arg0);
     itkFixedArrayUC1();
     itkFixedArrayUC1(unsigned char const * r);
     itkFixedArrayUC1(unsigned char const & r);
     itkFixedArrayUC1 & operator=(unsigned char const * r);
     bool operator==(itkFixedArrayUC1 const & r) const;
     bool operator!=(itkFixedArrayUC1 const & r) const;
     unsigned char & operator[](short index);
     unsigned char const & operator[](short index) const;
     unsigned char & operator[](unsigned short index);
     unsigned char const & operator[](unsigned short index) const;
     unsigned char & operator[](int index);
     unsigned char const & operator[](int index) const;
     unsigned char & operator[](unsigned int index);
     unsigned char const & operator[](unsigned int index) const;
     unsigned char & operator[](long index);
     unsigned char const & operator[](long index) const;
     unsigned char & operator[](unsigned long index);
     unsigned char const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, unsigned char const & value);
     unsigned char const & GetElement(unsigned short index) const;
     unsigned char * GetDataPointer();
     unsigned char const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(unsigned char const & arg0);
     static itkFixedArrayUC1 Filled(unsigned char const & arg0);
   private:
   protected:
 };


 class itkFixedArrayUC2 {
   public:
     enum  {  Length = 2 };
     enum  {  Dimension = 2 };
     ~itkFixedArrayUC2();
     itkFixedArrayUC2 & operator=(itkFixedArrayUC2 const & arg0);
     itkFixedArrayUC2(itkFixedArrayUC2 const & arg0);
     itkFixedArrayUC2();
     itkFixedArrayUC2(unsigned char const * r);
     itkFixedArrayUC2(unsigned char const & r);
     itkFixedArrayUC2 & operator=(unsigned char const * r);
     bool operator==(itkFixedArrayUC2 const & r) const;
     bool operator!=(itkFixedArrayUC2 const & r) const;
     unsigned char & operator[](short index);
     unsigned char const & operator[](short index) const;
     unsigned char & operator[](unsigned short index);
     unsigned char const & operator[](unsigned short index) const;
     unsigned char & operator[](int index);
     unsigned char const & operator[](int index) const;
     unsigned char & operator[](unsigned int index);
     unsigned char const & operator[](unsigned int index) const;
     unsigned char & operator[](long index);
     unsigned char const & operator[](long index) const;
     unsigned char & operator[](unsigned long index);
     unsigned char const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, unsigned char const & value);
     unsigned char const & GetElement(unsigned short index) const;
     unsigned char * GetDataPointer();
     unsigned char const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(unsigned char const & arg0);
     static itkFixedArrayUC2 Filled(unsigned char const & arg0);
   private:
   protected:
 };


 class itkFixedArrayUC3 {
   public:
     enum  {  Length = 3 };
     enum  {  Dimension = 3 };
     ~itkFixedArrayUC3();
     itkFixedArrayUC3 & operator=(itkFixedArrayUC3 const & arg0);
     itkFixedArrayUC3(itkFixedArrayUC3 const & arg0);
     itkFixedArrayUC3();
     itkFixedArrayUC3(unsigned char const * r);
     itkFixedArrayUC3(unsigned char const & r);
     itkFixedArrayUC3 & operator=(unsigned char const * r);
     bool operator==(itkFixedArrayUC3 const & r) const;
     bool operator!=(itkFixedArrayUC3 const & r) const;
     unsigned char & operator[](short index);
     unsigned char const & operator[](short index) const;
     unsigned char & operator[](unsigned short index);
     unsigned char const & operator[](unsigned short index) const;
     unsigned char & operator[](int index);
     unsigned char const & operator[](int index) const;
     unsigned char & operator[](unsigned int index);
     unsigned char const & operator[](unsigned int index) const;
     unsigned char & operator[](long index);
     unsigned char const & operator[](long index) const;
     unsigned char & operator[](unsigned long index);
     unsigned char const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, unsigned char const & value);
     unsigned char const & GetElement(unsigned short index) const;
     unsigned char * GetDataPointer();
     unsigned char const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(unsigned char const & arg0);
     static itkFixedArrayUC3 Filled(unsigned char const & arg0);
   private:
   protected:
 };


 class itkFixedArrayUC4 {
   public:
     enum  {  Length = 4 };
     enum  {  Dimension = 4 };
     ~itkFixedArrayUC4();
     itkFixedArrayUC4 & operator=(itkFixedArrayUC4 const & arg0);
     itkFixedArrayUC4(itkFixedArrayUC4 const & arg0);
     itkFixedArrayUC4();
     itkFixedArrayUC4(unsigned char const * r);
     itkFixedArrayUC4(unsigned char const & r);
     itkFixedArrayUC4 & operator=(unsigned char const * r);
     bool operator==(itkFixedArrayUC4 const & r) const;
     bool operator!=(itkFixedArrayUC4 const & r) const;
     unsigned char & operator[](short index);
     unsigned char const & operator[](short index) const;
     unsigned char & operator[](unsigned short index);
     unsigned char const & operator[](unsigned short index) const;
     unsigned char & operator[](int index);
     unsigned char const & operator[](int index) const;
     unsigned char & operator[](unsigned int index);
     unsigned char const & operator[](unsigned int index) const;
     unsigned char & operator[](long index);
     unsigned char const & operator[](long index) const;
     unsigned char & operator[](unsigned long index);
     unsigned char const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, unsigned char const & value);
     unsigned char const & GetElement(unsigned short index) const;
     unsigned char * GetDataPointer();
     unsigned char const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(unsigned char const & arg0);
     static itkFixedArrayUC4 Filled(unsigned char const & arg0);
   private:
   protected:
 };


 class itkFixedArrayUC6 {
   public:
     enum  {  Length = 6 };
     enum  {  Dimension = 6 };
     ~itkFixedArrayUC6();
     itkFixedArrayUC6 & operator=(itkFixedArrayUC6 const & arg0);
     itkFixedArrayUC6(itkFixedArrayUC6 const & arg0);
     itkFixedArrayUC6();
     itkFixedArrayUC6(unsigned char const * r);
     itkFixedArrayUC6(unsigned char const & r);
     itkFixedArrayUC6 & operator=(unsigned char const * r);
     bool operator==(itkFixedArrayUC6 const & r) const;
     bool operator!=(itkFixedArrayUC6 const & r) const;
     unsigned char & operator[](short index);
     unsigned char const & operator[](short index) const;
     unsigned char & operator[](unsigned short index);
     unsigned char const & operator[](unsigned short index) const;
     unsigned char & operator[](int index);
     unsigned char const & operator[](int index) const;
     unsigned char & operator[](unsigned int index);
     unsigned char const & operator[](unsigned int index) const;
     unsigned char & operator[](long index);
     unsigned char const & operator[](long index) const;
     unsigned char & operator[](unsigned long index);
     unsigned char const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, unsigned char const & value);
     unsigned char const & GetElement(unsigned short index) const;
     unsigned char * GetDataPointer();
     unsigned char const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(unsigned char const & arg0);
     static itkFixedArrayUC6 Filled(unsigned char const & arg0);
   private:
   protected:
 };


 class itkFixedArrayUI1 {
   public:
     enum  {  Length = 1 };
     enum  {  Dimension = 1 };
     ~itkFixedArrayUI1();
     itkFixedArrayUI1 & operator=(itkFixedArrayUI1 const & arg0);
     itkFixedArrayUI1(itkFixedArrayUI1 const & arg0);
     itkFixedArrayUI1();
     itkFixedArrayUI1(unsigned int const * r);
     itkFixedArrayUI1(unsigned int const & r);
     itkFixedArrayUI1 & operator=(unsigned int const * r);
     bool operator==(itkFixedArrayUI1 const & r) const;
     bool operator!=(itkFixedArrayUI1 const & r) const;
     unsigned int & operator[](short index);
     unsigned int const & operator[](short index) const;
     unsigned int & operator[](unsigned short index);
     unsigned int const & operator[](unsigned short index) const;
     unsigned int & operator[](int index);
     unsigned int const & operator[](int index) const;
     unsigned int & operator[](unsigned int index);
     unsigned int const & operator[](unsigned int index) const;
     unsigned int & operator[](long index);
     unsigned int const & operator[](long index) const;
     unsigned int & operator[](unsigned long index);
     unsigned int const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, unsigned int const & value);
     unsigned int const & GetElement(unsigned short index) const;
     unsigned int * GetDataPointer();
     unsigned int const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(unsigned int const & arg0);
     static itkFixedArrayUI1 Filled(unsigned int const & arg0);
   private:
   protected:
 };


 class itkFixedArrayUI2 {
   public:
     enum  {  Length = 2 };
     enum  {  Dimension = 2 };
     ~itkFixedArrayUI2();
     itkFixedArrayUI2 & operator=(itkFixedArrayUI2 const & arg0);
     itkFixedArrayUI2(itkFixedArrayUI2 const & arg0);
     itkFixedArrayUI2();
     itkFixedArrayUI2(unsigned int const * r);
     itkFixedArrayUI2(unsigned int const & r);
     itkFixedArrayUI2 & operator=(unsigned int const * r);
     bool operator==(itkFixedArrayUI2 const & r) const;
     bool operator!=(itkFixedArrayUI2 const & r) const;
     unsigned int & operator[](short index);
     unsigned int const & operator[](short index) const;
     unsigned int & operator[](unsigned short index);
     unsigned int const & operator[](unsigned short index) const;
     unsigned int & operator[](int index);
     unsigned int const & operator[](int index) const;
     unsigned int & operator[](unsigned int index);
     unsigned int const & operator[](unsigned int index) const;
     unsigned int & operator[](long index);
     unsigned int const & operator[](long index) const;
     unsigned int & operator[](unsigned long index);
     unsigned int const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, unsigned int const & value);
     unsigned int const & GetElement(unsigned short index) const;
     unsigned int * GetDataPointer();
     unsigned int const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(unsigned int const & arg0);
     static itkFixedArrayUI2 Filled(unsigned int const & arg0);
   private:
   protected:
 };


 class itkFixedArrayUI3 {
   public:
     enum  {  Length = 3 };
     enum  {  Dimension = 3 };
     ~itkFixedArrayUI3();
     itkFixedArrayUI3 & operator=(itkFixedArrayUI3 const & arg0);
     itkFixedArrayUI3(itkFixedArrayUI3 const & arg0);
     itkFixedArrayUI3();
     itkFixedArrayUI3(unsigned int const * r);
     itkFixedArrayUI3(unsigned int const & r);
     itkFixedArrayUI3 & operator=(unsigned int const * r);
     bool operator==(itkFixedArrayUI3 const & r) const;
     bool operator!=(itkFixedArrayUI3 const & r) const;
     unsigned int & operator[](short index);
     unsigned int const & operator[](short index) const;
     unsigned int & operator[](unsigned short index);
     unsigned int const & operator[](unsigned short index) const;
     unsigned int & operator[](int index);
     unsigned int const & operator[](int index) const;
     unsigned int & operator[](unsigned int index);
     unsigned int const & operator[](unsigned int index) const;
     unsigned int & operator[](long index);
     unsigned int const & operator[](long index) const;
     unsigned int & operator[](unsigned long index);
     unsigned int const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, unsigned int const & value);
     unsigned int const & GetElement(unsigned short index) const;
     unsigned int * GetDataPointer();
     unsigned int const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(unsigned int const & arg0);
     static itkFixedArrayUI3 Filled(unsigned int const & arg0);
   private:
   protected:
 };


 class itkFixedArrayUI4 {
   public:
     enum  {  Length = 4 };
     enum  {  Dimension = 4 };
     ~itkFixedArrayUI4();
     itkFixedArrayUI4 & operator=(itkFixedArrayUI4 const & arg0);
     itkFixedArrayUI4(itkFixedArrayUI4 const & arg0);
     itkFixedArrayUI4();
     itkFixedArrayUI4(unsigned int const * r);
     itkFixedArrayUI4(unsigned int const & r);
     itkFixedArrayUI4 & operator=(unsigned int const * r);
     bool operator==(itkFixedArrayUI4 const & r) const;
     bool operator!=(itkFixedArrayUI4 const & r) const;
     unsigned int & operator[](short index);
     unsigned int const & operator[](short index) const;
     unsigned int & operator[](unsigned short index);
     unsigned int const & operator[](unsigned short index) const;
     unsigned int & operator[](int index);
     unsigned int const & operator[](int index) const;
     unsigned int & operator[](unsigned int index);
     unsigned int const & operator[](unsigned int index) const;
     unsigned int & operator[](long index);
     unsigned int const & operator[](long index) const;
     unsigned int & operator[](unsigned long index);
     unsigned int const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, unsigned int const & value);
     unsigned int const & GetElement(unsigned short index) const;
     unsigned int * GetDataPointer();
     unsigned int const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(unsigned int const & arg0);
     static itkFixedArrayUI4 Filled(unsigned int const & arg0);
   private:
   protected:
 };


 class itkFixedArrayUI6 {
   public:
     enum  {  Length = 6 };
     enum  {  Dimension = 6 };
     ~itkFixedArrayUI6();
     itkFixedArrayUI6 & operator=(itkFixedArrayUI6 const & arg0);
     itkFixedArrayUI6(itkFixedArrayUI6 const & arg0);
     itkFixedArrayUI6();
     itkFixedArrayUI6(unsigned int const * r);
     itkFixedArrayUI6(unsigned int const & r);
     itkFixedArrayUI6 & operator=(unsigned int const * r);
     bool operator==(itkFixedArrayUI6 const & r) const;
     bool operator!=(itkFixedArrayUI6 const & r) const;
     unsigned int & operator[](short index);
     unsigned int const & operator[](short index) const;
     unsigned int & operator[](unsigned short index);
     unsigned int const & operator[](unsigned short index) const;
     unsigned int & operator[](int index);
     unsigned int const & operator[](int index) const;
     unsigned int & operator[](unsigned int index);
     unsigned int const & operator[](unsigned int index) const;
     unsigned int & operator[](long index);
     unsigned int const & operator[](long index) const;
     unsigned int & operator[](unsigned long index);
     unsigned int const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, unsigned int const & value);
     unsigned int const & GetElement(unsigned short index) const;
     unsigned int * GetDataPointer();
     unsigned int const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(unsigned int const & arg0);
     static itkFixedArrayUI6 Filled(unsigned int const & arg0);
   private:
   protected:
 };


 class itkFixedArrayUL1 {
   public:
     enum  {  Length = 1 };
     enum  {  Dimension = 1 };
     ~itkFixedArrayUL1();
     itkFixedArrayUL1 & operator=(itkFixedArrayUL1 const & arg0);
     itkFixedArrayUL1(itkFixedArrayUL1 const & arg0);
     itkFixedArrayUL1();
     itkFixedArrayUL1(unsigned long const * r);
     itkFixedArrayUL1(unsigned long const & r);
     itkFixedArrayUL1 & operator=(unsigned long const * r);
     bool operator==(itkFixedArrayUL1 const & r) const;
     bool operator!=(itkFixedArrayUL1 const & r) const;
     unsigned long & operator[](short index);
     unsigned long const & operator[](short index) const;
     unsigned long & operator[](unsigned short index);
     unsigned long const & operator[](unsigned short index) const;
     unsigned long & operator[](int index);
     unsigned long const & operator[](int index) const;
     unsigned long & operator[](unsigned int index);
     unsigned long const & operator[](unsigned int index) const;
     unsigned long & operator[](long index);
     unsigned long const & operator[](long index) const;
     unsigned long & operator[](unsigned long index);
     unsigned long const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, unsigned long const & value);
     unsigned long const & GetElement(unsigned short index) const;
     unsigned long * GetDataPointer();
     unsigned long const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(unsigned long const & arg0);
     static itkFixedArrayUL1 Filled(unsigned long const & arg0);
   private:
   protected:
 };


 class itkFixedArrayUL2 {
   public:
     enum  {  Length = 2 };
     enum  {  Dimension = 2 };
     ~itkFixedArrayUL2();
     itkFixedArrayUL2 & operator=(itkFixedArrayUL2 const & arg0);
     itkFixedArrayUL2(itkFixedArrayUL2 const & arg0);
     itkFixedArrayUL2();
     itkFixedArrayUL2(unsigned long const * r);
     itkFixedArrayUL2(unsigned long const & r);
     itkFixedArrayUL2 & operator=(unsigned long const * r);
     bool operator==(itkFixedArrayUL2 const & r) const;
     bool operator!=(itkFixedArrayUL2 const & r) const;
     unsigned long & operator[](short index);
     unsigned long const & operator[](short index) const;
     unsigned long & operator[](unsigned short index);
     unsigned long const & operator[](unsigned short index) const;
     unsigned long & operator[](int index);
     unsigned long const & operator[](int index) const;
     unsigned long & operator[](unsigned int index);
     unsigned long const & operator[](unsigned int index) const;
     unsigned long & operator[](long index);
     unsigned long const & operator[](long index) const;
     unsigned long & operator[](unsigned long index);
     unsigned long const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, unsigned long const & value);
     unsigned long const & GetElement(unsigned short index) const;
     unsigned long * GetDataPointer();
     unsigned long const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(unsigned long const & arg0);
     static itkFixedArrayUL2 Filled(unsigned long const & arg0);
   private:
   protected:
 };


 class itkFixedArrayUL3 {
   public:
     enum  {  Length = 3 };
     enum  {  Dimension = 3 };
     ~itkFixedArrayUL3();
     itkFixedArrayUL3 & operator=(itkFixedArrayUL3 const & arg0);
     itkFixedArrayUL3(itkFixedArrayUL3 const & arg0);
     itkFixedArrayUL3();
     itkFixedArrayUL3(unsigned long const * r);
     itkFixedArrayUL3(unsigned long const & r);
     itkFixedArrayUL3 & operator=(unsigned long const * r);
     bool operator==(itkFixedArrayUL3 const & r) const;
     bool operator!=(itkFixedArrayUL3 const & r) const;
     unsigned long & operator[](short index);
     unsigned long const & operator[](short index) const;
     unsigned long & operator[](unsigned short index);
     unsigned long const & operator[](unsigned short index) const;
     unsigned long & operator[](int index);
     unsigned long const & operator[](int index) const;
     unsigned long & operator[](unsigned int index);
     unsigned long const & operator[](unsigned int index) const;
     unsigned long & operator[](long index);
     unsigned long const & operator[](long index) const;
     unsigned long & operator[](unsigned long index);
     unsigned long const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, unsigned long const & value);
     unsigned long const & GetElement(unsigned short index) const;
     unsigned long * GetDataPointer();
     unsigned long const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(unsigned long const & arg0);
     static itkFixedArrayUL3 Filled(unsigned long const & arg0);
   private:
   protected:
 };


 class itkFixedArrayUL4 {
   public:
     enum  {  Length = 4 };
     enum  {  Dimension = 4 };
     ~itkFixedArrayUL4();
     itkFixedArrayUL4 & operator=(itkFixedArrayUL4 const & arg0);
     itkFixedArrayUL4(itkFixedArrayUL4 const & arg0);
     itkFixedArrayUL4();
     itkFixedArrayUL4(unsigned long const * r);
     itkFixedArrayUL4(unsigned long const & r);
     itkFixedArrayUL4 & operator=(unsigned long const * r);
     bool operator==(itkFixedArrayUL4 const & r) const;
     bool operator!=(itkFixedArrayUL4 const & r) const;
     unsigned long & operator[](short index);
     unsigned long const & operator[](short index) const;
     unsigned long & operator[](unsigned short index);
     unsigned long const & operator[](unsigned short index) const;
     unsigned long & operator[](int index);
     unsigned long const & operator[](int index) const;
     unsigned long & operator[](unsigned int index);
     unsigned long const & operator[](unsigned int index) const;
     unsigned long & operator[](long index);
     unsigned long const & operator[](long index) const;
     unsigned long & operator[](unsigned long index);
     unsigned long const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, unsigned long const & value);
     unsigned long const & GetElement(unsigned short index) const;
     unsigned long * GetDataPointer();
     unsigned long const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(unsigned long const & arg0);
     static itkFixedArrayUL4 Filled(unsigned long const & arg0);
   private:
   protected:
 };


 class itkFixedArrayUL6 {
   public:
     enum  {  Length = 6 };
     enum  {  Dimension = 6 };
     ~itkFixedArrayUL6();
     itkFixedArrayUL6 & operator=(itkFixedArrayUL6 const & arg0);
     itkFixedArrayUL6(itkFixedArrayUL6 const & arg0);
     itkFixedArrayUL6();
     itkFixedArrayUL6(unsigned long const * r);
     itkFixedArrayUL6(unsigned long const & r);
     itkFixedArrayUL6 & operator=(unsigned long const * r);
     bool operator==(itkFixedArrayUL6 const & r) const;
     bool operator!=(itkFixedArrayUL6 const & r) const;
     unsigned long & operator[](short index);
     unsigned long const & operator[](short index) const;
     unsigned long & operator[](unsigned short index);
     unsigned long const & operator[](unsigned short index) const;
     unsigned long & operator[](int index);
     unsigned long const & operator[](int index) const;
     unsigned long & operator[](unsigned int index);
     unsigned long const & operator[](unsigned int index) const;
     unsigned long & operator[](long index);
     unsigned long const & operator[](long index) const;
     unsigned long & operator[](unsigned long index);
     unsigned long const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, unsigned long const & value);
     unsigned long const & GetElement(unsigned short index) const;
     unsigned long * GetDataPointer();
     unsigned long const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(unsigned long const & arg0);
     static itkFixedArrayUL6 Filled(unsigned long const & arg0);
   private:
   protected:
 };


 class itkFixedArrayUS1 {
   public:
     enum  {  Length = 1 };
     enum  {  Dimension = 1 };
     ~itkFixedArrayUS1();
     itkFixedArrayUS1 & operator=(itkFixedArrayUS1 const & arg0);
     itkFixedArrayUS1(itkFixedArrayUS1 const & arg0);
     itkFixedArrayUS1();
     itkFixedArrayUS1(unsigned short const * r);
     itkFixedArrayUS1(unsigned short const & r);
     itkFixedArrayUS1 & operator=(unsigned short const * r);
     bool operator==(itkFixedArrayUS1 const & r) const;
     bool operator!=(itkFixedArrayUS1 const & r) const;
     unsigned short & operator[](short index);
     unsigned short const & operator[](short index) const;
     unsigned short & operator[](unsigned short index);
     unsigned short const & operator[](unsigned short index) const;
     unsigned short & operator[](int index);
     unsigned short const & operator[](int index) const;
     unsigned short & operator[](unsigned int index);
     unsigned short const & operator[](unsigned int index) const;
     unsigned short & operator[](long index);
     unsigned short const & operator[](long index) const;
     unsigned short & operator[](unsigned long index);
     unsigned short const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, unsigned short const & value);
     unsigned short const & GetElement(unsigned short index) const;
     unsigned short * GetDataPointer();
     unsigned short const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(unsigned short const & arg0);
     static itkFixedArrayUS1 Filled(unsigned short const & arg0);
   private:
   protected:
 };


 class itkFixedArrayUS2 {
   public:
     enum  {  Length = 2 };
     enum  {  Dimension = 2 };
     ~itkFixedArrayUS2();
     itkFixedArrayUS2 & operator=(itkFixedArrayUS2 const & arg0);
     itkFixedArrayUS2(itkFixedArrayUS2 const & arg0);
     itkFixedArrayUS2();
     itkFixedArrayUS2(unsigned short const * r);
     itkFixedArrayUS2(unsigned short const & r);
     itkFixedArrayUS2 & operator=(unsigned short const * r);
     bool operator==(itkFixedArrayUS2 const & r) const;
     bool operator!=(itkFixedArrayUS2 const & r) const;
     unsigned short & operator[](short index);
     unsigned short const & operator[](short index) const;
     unsigned short & operator[](unsigned short index);
     unsigned short const & operator[](unsigned short index) const;
     unsigned short & operator[](int index);
     unsigned short const & operator[](int index) const;
     unsigned short & operator[](unsigned int index);
     unsigned short const & operator[](unsigned int index) const;
     unsigned short & operator[](long index);
     unsigned short const & operator[](long index) const;
     unsigned short & operator[](unsigned long index);
     unsigned short const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, unsigned short const & value);
     unsigned short const & GetElement(unsigned short index) const;
     unsigned short * GetDataPointer();
     unsigned short const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(unsigned short const & arg0);
     static itkFixedArrayUS2 Filled(unsigned short const & arg0);
   private:
   protected:
 };


 class itkFixedArrayUS3 {
   public:
     enum  {  Length = 3 };
     enum  {  Dimension = 3 };
     ~itkFixedArrayUS3();
     itkFixedArrayUS3 & operator=(itkFixedArrayUS3 const & arg0);
     itkFixedArrayUS3(itkFixedArrayUS3 const & arg0);
     itkFixedArrayUS3();
     itkFixedArrayUS3(unsigned short const * r);
     itkFixedArrayUS3(unsigned short const & r);
     itkFixedArrayUS3 & operator=(unsigned short const * r);
     bool operator==(itkFixedArrayUS3 const & r) const;
     bool operator!=(itkFixedArrayUS3 const & r) const;
     unsigned short & operator[](short index);
     unsigned short const & operator[](short index) const;
     unsigned short & operator[](unsigned short index);
     unsigned short const & operator[](unsigned short index) const;
     unsigned short & operator[](int index);
     unsigned short const & operator[](int index) const;
     unsigned short & operator[](unsigned int index);
     unsigned short const & operator[](unsigned int index) const;
     unsigned short & operator[](long index);
     unsigned short const & operator[](long index) const;
     unsigned short & operator[](unsigned long index);
     unsigned short const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, unsigned short const & value);
     unsigned short const & GetElement(unsigned short index) const;
     unsigned short * GetDataPointer();
     unsigned short const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(unsigned short const & arg0);
     static itkFixedArrayUS3 Filled(unsigned short const & arg0);
   private:
   protected:
 };


 class itkFixedArrayUS4 {
   public:
     enum  {  Length = 4 };
     enum  {  Dimension = 4 };
     ~itkFixedArrayUS4();
     itkFixedArrayUS4 & operator=(itkFixedArrayUS4 const & arg0);
     itkFixedArrayUS4(itkFixedArrayUS4 const & arg0);
     itkFixedArrayUS4();
     itkFixedArrayUS4(unsigned short const * r);
     itkFixedArrayUS4(unsigned short const & r);
     itkFixedArrayUS4 & operator=(unsigned short const * r);
     bool operator==(itkFixedArrayUS4 const & r) const;
     bool operator!=(itkFixedArrayUS4 const & r) const;
     unsigned short & operator[](short index);
     unsigned short const & operator[](short index) const;
     unsigned short & operator[](unsigned short index);
     unsigned short const & operator[](unsigned short index) const;
     unsigned short & operator[](int index);
     unsigned short const & operator[](int index) const;
     unsigned short & operator[](unsigned int index);
     unsigned short const & operator[](unsigned int index) const;
     unsigned short & operator[](long index);
     unsigned short const & operator[](long index) const;
     unsigned short & operator[](unsigned long index);
     unsigned short const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, unsigned short const & value);
     unsigned short const & GetElement(unsigned short index) const;
     unsigned short * GetDataPointer();
     unsigned short const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(unsigned short const & arg0);
     static itkFixedArrayUS4 Filled(unsigned short const & arg0);
   private:
   protected:
 };


 class itkFixedArrayUS6 {
   public:
     enum  {  Length = 6 };
     enum  {  Dimension = 6 };
     ~itkFixedArrayUS6();
     itkFixedArrayUS6 & operator=(itkFixedArrayUS6 const & arg0);
     itkFixedArrayUS6(itkFixedArrayUS6 const & arg0);
     itkFixedArrayUS6();
     itkFixedArrayUS6(unsigned short const * r);
     itkFixedArrayUS6(unsigned short const & r);
     itkFixedArrayUS6 & operator=(unsigned short const * r);
     bool operator==(itkFixedArrayUS6 const & r) const;
     bool operator!=(itkFixedArrayUS6 const & r) const;
     unsigned short & operator[](short index);
     unsigned short const & operator[](short index) const;
     unsigned short & operator[](unsigned short index);
     unsigned short const & operator[](unsigned short index) const;
     unsigned short & operator[](int index);
     unsigned short const & operator[](int index) const;
     unsigned short & operator[](unsigned int index);
     unsigned short const & operator[](unsigned int index) const;
     unsigned short & operator[](long index);
     unsigned short const & operator[](long index) const;
     unsigned short & operator[](unsigned long index);
     unsigned short const & operator[](unsigned long index) const;
     void SetElement(unsigned short index, unsigned short const & value);
     unsigned short const & GetElement(unsigned short index) const;
     unsigned short * GetDataPointer();
     unsigned short const * GetDataPointer() const;
     unsigned int Size() const;
     void Fill(unsigned short const & arg0);
     static itkFixedArrayUS6 Filled(unsigned short const & arg0);
   private:
   protected:
 };


