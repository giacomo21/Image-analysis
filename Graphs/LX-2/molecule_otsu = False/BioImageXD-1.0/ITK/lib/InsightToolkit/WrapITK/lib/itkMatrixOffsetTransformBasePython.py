# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkMatrixOffsetTransformBasePython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkMatrixOffsetTransformBasePython', [dirname(__file__)])
        except ImportError:
            import _itkMatrixOffsetTransformBasePython
            return _itkMatrixOffsetTransformBasePython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkMatrixOffsetTransformBasePython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkMatrixOffsetTransformBasePython = swig_import_helper()
    del swig_import_helper
else:
    import _itkMatrixOffsetTransformBasePython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkPointPython
import vnl_vectorPython
import vcl_complexPython
import pyBasePython
import vnl_matrixPython
import itkFixedArrayPython
import itkVectorPython
import vnl_vector_refPython
import itkTransformPython
import itkCovariantVectorPython
import itkArray2DPython
import itkArrayPython
import ITKCommonBasePython
import itkEventObjectsPython
import itkMatrixPython
import vnl_matrix_fixedPython
def itkMatrixOffsetTransformBaseD33_New():
  return itkMatrixOffsetTransformBaseD33.New()

def itkMatrixOffsetTransformBaseD22_New():
  return itkMatrixOffsetTransformBaseD22.New()

class itkMatrixOffsetTransformBaseD22(itkTransformPython.itkTransformD22):
    """Proxy of C++ itkMatrixOffsetTransformBaseD22 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputSpaceDimension = _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_InputSpaceDimension
    OutputSpaceDimension = _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_OutputSpaceDimension
    ParametersDimension = _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_ParametersDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetIdentity(self):
        """SetIdentity(self)"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetIdentity(self)

    def SetMatrix(self, *args):
        """SetMatrix(self, itkMatrixD22 matrix)"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetMatrix(self, *args)

    def GetMatrix(self):
        """GetMatrix(self) -> itkMatrixD22"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetMatrix(self)

    def SetOffset(self, *args):
        """SetOffset(self, itkVectorD2 offset)"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetOffset(self, *args)

    def GetOffset(self):
        """GetOffset(self) -> itkVectorD2"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetOffset(self)

    def SetCenter(self, *args):
        """SetCenter(self, itkPointD2 center)"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetCenter(self, *args)

    def GetCenter(self):
        """GetCenter(self) -> itkPointD2"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetCenter(self)

    def SetTranslation(self, *args):
        """SetTranslation(self, itkVectorD2 translation)"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetTranslation(self, *args)

    def GetTranslation(self):
        """GetTranslation(self) -> itkVectorD2"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetTranslation(self)

    def Compose(self, *args):
        """
        Compose(self, itkMatrixOffsetTransformBaseD22 other, bool pre = 0)
        Compose(self, itkMatrixOffsetTransformBaseD22 other)
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_Compose(self, *args)

    def TransformVector(self, *args):
        """
        TransformVector(self, itkVectorD2 vector) -> itkVectorD2
        TransformVector(self, vnl_vector_fixed<(double,2u)> vector) -> vnl_vector_fixed<(double,2u)>
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_TransformVector(self, *args)

    def GetInverse(self, *args):
        """GetInverse(self, itkMatrixOffsetTransformBaseD22 inverse) -> bool"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetInverse(self, *args)

    def GetInverseMatrix(self):
        """GetInverseMatrix(self) -> itkMatrixD22"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetInverseMatrix(self)

    __swig_destroy__ = _itkMatrixOffsetTransformBasePython.delete_itkMatrixOffsetTransformBaseD22
    def cast(*args):
        """cast(itkLightObject obj) -> itkMatrixOffsetTransformBaseD22"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMatrixOffsetTransformBaseD22"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMatrixOffsetTransformBaseD22
        
        Create a new object of the class itkMatrixOffsetTransformBaseD22 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMatrixOffsetTransformBaseD22.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMatrixOffsetTransformBaseD22.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMatrixOffsetTransformBaseD22.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMatrixOffsetTransformBaseD22.SetIdentity = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetIdentity,None,itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.SetMatrix = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetMatrix,None,itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.GetMatrix = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetMatrix,None,itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.SetOffset = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetOffset,None,itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.GetOffset = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetOffset,None,itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.SetCenter = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetCenter,None,itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.GetCenter = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetCenter,None,itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.SetTranslation = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_SetTranslation,None,itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.GetTranslation = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetTranslation,None,itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.Compose = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_Compose,None,itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.TransformVector = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_TransformVector,None,itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.GetInverse = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetInverse,None,itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.GetInverseMatrix = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetInverseMatrix,None,itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22.GetPointer = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_GetPointer,None,itkMatrixOffsetTransformBaseD22)
itkMatrixOffsetTransformBaseD22_swigregister = _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_swigregister
itkMatrixOffsetTransformBaseD22_swigregister(itkMatrixOffsetTransformBaseD22)

def itkMatrixOffsetTransformBaseD22___New_orig__():
  """itkMatrixOffsetTransformBaseD22___New_orig__()"""
  return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22___New_orig__()

def itkMatrixOffsetTransformBaseD22_cast(*args):
  """itkMatrixOffsetTransformBaseD22_cast(itkLightObject obj) -> itkMatrixOffsetTransformBaseD22"""
  return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD22_cast(*args)

class itkMatrixOffsetTransformBaseD33(itkTransformPython.itkTransformD33):
    """Proxy of C++ itkMatrixOffsetTransformBaseD33 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputSpaceDimension = _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_InputSpaceDimension
    OutputSpaceDimension = _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_OutputSpaceDimension
    ParametersDimension = _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_ParametersDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetIdentity(self):
        """SetIdentity(self)"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetIdentity(self)

    def SetMatrix(self, *args):
        """SetMatrix(self, itkMatrixD33 matrix)"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetMatrix(self, *args)

    def GetMatrix(self):
        """GetMatrix(self) -> itkMatrixD33"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetMatrix(self)

    def SetOffset(self, *args):
        """SetOffset(self, itkVectorD3 offset)"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetOffset(self, *args)

    def GetOffset(self):
        """GetOffset(self) -> itkVectorD3"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetOffset(self)

    def SetCenter(self, *args):
        """SetCenter(self, itkPointD3 center)"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetCenter(self, *args)

    def GetCenter(self):
        """GetCenter(self) -> itkPointD3"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetCenter(self)

    def SetTranslation(self, *args):
        """SetTranslation(self, itkVectorD3 translation)"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetTranslation(self, *args)

    def GetTranslation(self):
        """GetTranslation(self) -> itkVectorD3"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetTranslation(self)

    def Compose(self, *args):
        """
        Compose(self, itkMatrixOffsetTransformBaseD33 other, bool pre = 0)
        Compose(self, itkMatrixOffsetTransformBaseD33 other)
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_Compose(self, *args)

    def TransformVector(self, *args):
        """
        TransformVector(self, itkVectorD3 vector) -> itkVectorD3
        TransformVector(self, vnl_vector_fixed<(double,3u)> vector) -> vnl_vector_fixed<(double,3u)>
        """
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_TransformVector(self, *args)

    def GetInverse(self, *args):
        """GetInverse(self, itkMatrixOffsetTransformBaseD33 inverse) -> bool"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetInverse(self, *args)

    def GetInverseMatrix(self):
        """GetInverseMatrix(self) -> itkMatrixD33"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetInverseMatrix(self)

    __swig_destroy__ = _itkMatrixOffsetTransformBasePython.delete_itkMatrixOffsetTransformBaseD33
    def cast(*args):
        """cast(itkLightObject obj) -> itkMatrixOffsetTransformBaseD33"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMatrixOffsetTransformBaseD33"""
        return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMatrixOffsetTransformBaseD33
        
        Create a new object of the class itkMatrixOffsetTransformBaseD33 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMatrixOffsetTransformBaseD33.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMatrixOffsetTransformBaseD33.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMatrixOffsetTransformBaseD33.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMatrixOffsetTransformBaseD33.SetIdentity = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetIdentity,None,itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.SetMatrix = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetMatrix,None,itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.GetMatrix = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetMatrix,None,itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.SetOffset = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetOffset,None,itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.GetOffset = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetOffset,None,itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.SetCenter = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetCenter,None,itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.GetCenter = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetCenter,None,itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.SetTranslation = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_SetTranslation,None,itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.GetTranslation = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetTranslation,None,itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.Compose = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_Compose,None,itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.TransformVector = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_TransformVector,None,itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.GetInverse = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetInverse,None,itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.GetInverseMatrix = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetInverseMatrix,None,itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33.GetPointer = new_instancemethod(_itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_GetPointer,None,itkMatrixOffsetTransformBaseD33)
itkMatrixOffsetTransformBaseD33_swigregister = _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_swigregister
itkMatrixOffsetTransformBaseD33_swigregister(itkMatrixOffsetTransformBaseD33)

def itkMatrixOffsetTransformBaseD33___New_orig__():
  """itkMatrixOffsetTransformBaseD33___New_orig__()"""
  return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33___New_orig__()

def itkMatrixOffsetTransformBaseD33_cast(*args):
  """itkMatrixOffsetTransformBaseD33_cast(itkLightObject obj) -> itkMatrixOffsetTransformBaseD33"""
  return _itkMatrixOffsetTransformBasePython.itkMatrixOffsetTransformBaseD33_cast(*args)



