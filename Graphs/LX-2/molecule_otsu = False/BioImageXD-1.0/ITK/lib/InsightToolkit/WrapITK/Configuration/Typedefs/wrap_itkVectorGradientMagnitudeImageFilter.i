// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkVectorGradientMagnitudeImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkVectorGradientMagnitudeImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkVectorGradientMagnitudeImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkVectorGradientMagnitudeImageFilterJava
#endif
#ifdef SWIGLUA
%module itkVectorGradientMagnitudeImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkVectorGradientMagnitudeImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkVectorGradientMagnitudeImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkVectorGradientMagnitudeImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkVectorGradientMagnitudeImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkVectorGradientMagnitudeImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkVectorGradientMagnitudeImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkVectorGradientMagnitudeImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkVectorGradientMagnitudeImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkVectorGradientMagnitudeImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkVectorGradientMagnitudeImageFilterPython
#endif
#ifdef SWIGR
%module itkVectorGradientMagnitudeImageFilterR
#endif
#ifdef SWIGRUBY
%module itkVectorGradientMagnitudeImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkVectorGradientMagnitudeImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkVectorGradientMagnitudeImageFilterTcl
#endif
#ifdef SWIGXML
%module itkVectorGradientMagnitudeImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Filtering.includes"
%}


%{
%}




%import wrap_ITKRegions.i
%import wrap_itkImage.i
%import wrap_ITKCommonBase.i
%import wrap_itkSize.i
%import wrap_itkImageToImageFilterB.i


%include itk.i
%include wrap_itkVectorGradientMagnitudeImageFilter_ext.i


 class itkVectorGradientMagnitudeImageFilterIVF22D : public itkImageToImageFilterIVF22ID2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  VectorDimension = 2 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  RealTypeHasNumericTraitsCheck = 1 };
     static itkVectorGradientMagnitudeImageFilterIVF22D_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void GenerateInputRequestedRegion();
     void SetUseImageSpacingOn();
     void SetUseImageSpacingOff();
     void SetUseImageSpacing(bool arg0);
     virtual bool GetUseImageSpacing() const;
     void SetDerivativeWeights(double * data);
     virtual double const * GetDerivativeWeights() const;
     virtual void SetComponentWeights(double * data);
     virtual double const * GetComponentWeights() const;
     virtual void SetUsePrincipleComponents(bool const _arg);
     virtual bool GetUsePrincipleComponents() const;
     void SetUsePrincipleComponentsOn();
     void SetUsePrincipleComponentsOff();
     static int CubicSolver(double * arg0, double * arg1);
   private:
     itkVectorGradientMagnitudeImageFilterIVF22D(itkVectorGradientMagnitudeImageFilterIVF22D const & arg0);
     void operator=(itkVectorGradientMagnitudeImageFilterIVF22D const & arg0);
   protected:
     itkVectorGradientMagnitudeImageFilterIVF22D();
     ~itkVectorGradientMagnitudeImageFilterIVF22D();
     virtual void BeforeThreadedGenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual itkImageBase2 const * GetRealValuedInputImage() const;
     virtual itkSize2 const & GetNeighborhoodRadius() const;
     virtual void SetNeighborhoodRadius(itkSize2 const _arg);
     double NonPCEvaluateAtNeighborhood(itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< double, 2u >, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::Vector< double, 2u >, 2u > > > const & it) const;
     double EvaluateAtNeighborhood3D(itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< double, 2u >, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::Vector< double, 2u >, 2u > > > const & it) const;
     double EvaluateAtNeighborhood(itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< double, 2u >, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::Vector< double, 2u >, 2u > > > const & it) const;
 };


 class itkVectorGradientMagnitudeImageFilterIVF22D_Pointer {
   public:
     itkVectorGradientMagnitudeImageFilterIVF22D_Pointer();
     itkVectorGradientMagnitudeImageFilterIVF22D_Pointer(itkVectorGradientMagnitudeImageFilterIVF22D_Pointer const & p);
     itkVectorGradientMagnitudeImageFilterIVF22D_Pointer(itkVectorGradientMagnitudeImageFilterIVF22D * p);
     ~itkVectorGradientMagnitudeImageFilterIVF22D_Pointer();
     itkVectorGradientMagnitudeImageFilterIVF22D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorGradientMagnitudeImageFilterIVF22D * GetPointer() const;
     bool operator<(itkVectorGradientMagnitudeImageFilterIVF22D_Pointer const & r) const;
     bool operator>(itkVectorGradientMagnitudeImageFilterIVF22D_Pointer const & r) const;
     bool operator<=(itkVectorGradientMagnitudeImageFilterIVF22D_Pointer const & r) const;
     bool operator>=(itkVectorGradientMagnitudeImageFilterIVF22D_Pointer const & r) const;
     itkVectorGradientMagnitudeImageFilterIVF22D_Pointer & operator=(itkVectorGradientMagnitudeImageFilterIVF22D_Pointer const & r);
     itkVectorGradientMagnitudeImageFilterIVF22D_Pointer & operator=(itkVectorGradientMagnitudeImageFilterIVF22D * r);
     itkVectorGradientMagnitudeImageFilterIVF22D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorGradientMagnitudeImageFilterIVF22F : public itkImageToImageFilterIVF22IF2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  VectorDimension = 2 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  RealTypeHasNumericTraitsCheck = 1 };
     static itkVectorGradientMagnitudeImageFilterIVF22F_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void GenerateInputRequestedRegion();
     void SetUseImageSpacingOn();
     void SetUseImageSpacingOff();
     void SetUseImageSpacing(bool arg0);
     virtual bool GetUseImageSpacing() const;
     void SetDerivativeWeights(float * data);
     virtual float const * GetDerivativeWeights() const;
     virtual void SetComponentWeights(float * data);
     virtual float const * GetComponentWeights() const;
     virtual void SetUsePrincipleComponents(bool const _arg);
     virtual bool GetUsePrincipleComponents() const;
     void SetUsePrincipleComponentsOn();
     void SetUsePrincipleComponentsOff();
     static int CubicSolver(double * arg0, double * arg1);
   private:
     itkVectorGradientMagnitudeImageFilterIVF22F(itkVectorGradientMagnitudeImageFilterIVF22F const & arg0);
     void operator=(itkVectorGradientMagnitudeImageFilterIVF22F const & arg0);
   protected:
     itkVectorGradientMagnitudeImageFilterIVF22F();
     ~itkVectorGradientMagnitudeImageFilterIVF22F();
     virtual void BeforeThreadedGenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual itkImageBase2 const * GetRealValuedInputImage() const;
     virtual itkSize2 const & GetNeighborhoodRadius() const;
     virtual void SetNeighborhoodRadius(itkSize2 const _arg);
     float NonPCEvaluateAtNeighborhood(itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float, 2u >, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::Vector< float, 2u >, 2u > > > const & it) const;
     float EvaluateAtNeighborhood3D(itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float, 2u >, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::Vector< float, 2u >, 2u > > > const & it) const;
     float EvaluateAtNeighborhood(itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float, 2u >, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::Vector< float, 2u >, 2u > > > const & it) const;
 };


 class itkVectorGradientMagnitudeImageFilterIVF22F_Pointer {
   public:
     itkVectorGradientMagnitudeImageFilterIVF22F_Pointer();
     itkVectorGradientMagnitudeImageFilterIVF22F_Pointer(itkVectorGradientMagnitudeImageFilterIVF22F_Pointer const & p);
     itkVectorGradientMagnitudeImageFilterIVF22F_Pointer(itkVectorGradientMagnitudeImageFilterIVF22F * p);
     ~itkVectorGradientMagnitudeImageFilterIVF22F_Pointer();
     itkVectorGradientMagnitudeImageFilterIVF22F * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorGradientMagnitudeImageFilterIVF22F * GetPointer() const;
     bool operator<(itkVectorGradientMagnitudeImageFilterIVF22F_Pointer const & r) const;
     bool operator>(itkVectorGradientMagnitudeImageFilterIVF22F_Pointer const & r) const;
     bool operator<=(itkVectorGradientMagnitudeImageFilterIVF22F_Pointer const & r) const;
     bool operator>=(itkVectorGradientMagnitudeImageFilterIVF22F_Pointer const & r) const;
     itkVectorGradientMagnitudeImageFilterIVF22F_Pointer & operator=(itkVectorGradientMagnitudeImageFilterIVF22F_Pointer const & r);
     itkVectorGradientMagnitudeImageFilterIVF22F_Pointer & operator=(itkVectorGradientMagnitudeImageFilterIVF22F * r);
     itkVectorGradientMagnitudeImageFilterIVF22F * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorGradientMagnitudeImageFilterIVF33D : public itkImageToImageFilterIVF33ID3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  VectorDimension = 3 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  RealTypeHasNumericTraitsCheck = 1 };
     static itkVectorGradientMagnitudeImageFilterIVF33D_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void GenerateInputRequestedRegion();
     void SetUseImageSpacingOn();
     void SetUseImageSpacingOff();
     void SetUseImageSpacing(bool arg0);
     virtual bool GetUseImageSpacing() const;
     void SetDerivativeWeights(double * data);
     virtual double const * GetDerivativeWeights() const;
     virtual void SetComponentWeights(double * data);
     virtual double const * GetComponentWeights() const;
     virtual void SetUsePrincipleComponents(bool const _arg);
     virtual bool GetUsePrincipleComponents() const;
     void SetUsePrincipleComponentsOn();
     void SetUsePrincipleComponentsOff();
     static int CubicSolver(double * arg0, double * arg1);
   private:
     itkVectorGradientMagnitudeImageFilterIVF33D(itkVectorGradientMagnitudeImageFilterIVF33D const & arg0);
     void operator=(itkVectorGradientMagnitudeImageFilterIVF33D const & arg0);
   protected:
     itkVectorGradientMagnitudeImageFilterIVF33D();
     ~itkVectorGradientMagnitudeImageFilterIVF33D();
     virtual void BeforeThreadedGenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual itkImageBase3 const * GetRealValuedInputImage() const;
     virtual itkSize3 const & GetNeighborhoodRadius() const;
     virtual void SetNeighborhoodRadius(itkSize3 const _arg);
     double NonPCEvaluateAtNeighborhood(itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< double, 3u >, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::Vector< double, 3u >, 3u > > > const & it) const;
     double EvaluateAtNeighborhood3D(itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< double, 3u >, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::Vector< double, 3u >, 3u > > > const & it) const;
     double EvaluateAtNeighborhood(itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< double, 3u >, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::Vector< double, 3u >, 3u > > > const & it) const;
 };


 class itkVectorGradientMagnitudeImageFilterIVF33D_Pointer {
   public:
     itkVectorGradientMagnitudeImageFilterIVF33D_Pointer();
     itkVectorGradientMagnitudeImageFilterIVF33D_Pointer(itkVectorGradientMagnitudeImageFilterIVF33D_Pointer const & p);
     itkVectorGradientMagnitudeImageFilterIVF33D_Pointer(itkVectorGradientMagnitudeImageFilterIVF33D * p);
     ~itkVectorGradientMagnitudeImageFilterIVF33D_Pointer();
     itkVectorGradientMagnitudeImageFilterIVF33D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorGradientMagnitudeImageFilterIVF33D * GetPointer() const;
     bool operator<(itkVectorGradientMagnitudeImageFilterIVF33D_Pointer const & r) const;
     bool operator>(itkVectorGradientMagnitudeImageFilterIVF33D_Pointer const & r) const;
     bool operator<=(itkVectorGradientMagnitudeImageFilterIVF33D_Pointer const & r) const;
     bool operator>=(itkVectorGradientMagnitudeImageFilterIVF33D_Pointer const & r) const;
     itkVectorGradientMagnitudeImageFilterIVF33D_Pointer & operator=(itkVectorGradientMagnitudeImageFilterIVF33D_Pointer const & r);
     itkVectorGradientMagnitudeImageFilterIVF33D_Pointer & operator=(itkVectorGradientMagnitudeImageFilterIVF33D * r);
     itkVectorGradientMagnitudeImageFilterIVF33D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVectorGradientMagnitudeImageFilterIVF33F : public itkImageToImageFilterIVF33IF3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  VectorDimension = 3 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  RealTypeHasNumericTraitsCheck = 1 };
     static itkVectorGradientMagnitudeImageFilterIVF33F_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void GenerateInputRequestedRegion();
     void SetUseImageSpacingOn();
     void SetUseImageSpacingOff();
     void SetUseImageSpacing(bool arg0);
     virtual bool GetUseImageSpacing() const;
     void SetDerivativeWeights(float * data);
     virtual float const * GetDerivativeWeights() const;
     virtual void SetComponentWeights(float * data);
     virtual float const * GetComponentWeights() const;
     virtual void SetUsePrincipleComponents(bool const _arg);
     virtual bool GetUsePrincipleComponents() const;
     void SetUsePrincipleComponentsOn();
     void SetUsePrincipleComponentsOff();
     static int CubicSolver(double * arg0, double * arg1);
   private:
     itkVectorGradientMagnitudeImageFilterIVF33F(itkVectorGradientMagnitudeImageFilterIVF33F const & arg0);
     void operator=(itkVectorGradientMagnitudeImageFilterIVF33F const & arg0);
   protected:
     itkVectorGradientMagnitudeImageFilterIVF33F();
     ~itkVectorGradientMagnitudeImageFilterIVF33F();
     virtual void BeforeThreadedGenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual itkImageBase3 const * GetRealValuedInputImage() const;
     virtual itkSize3 const & GetNeighborhoodRadius() const;
     virtual void SetNeighborhoodRadius(itkSize3 const _arg);
     float NonPCEvaluateAtNeighborhood(itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float, 3u >, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::Vector< float, 3u >, 3u > > > const & it) const;
     float EvaluateAtNeighborhood3D(itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float, 3u >, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::Vector< float, 3u >, 3u > > > const & it) const;
     float EvaluateAtNeighborhood(itk::ConstNeighborhoodIterator< itk::Image< itk::Vector< float, 3u >, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< itk::Vector< float, 3u >, 3u > > > const & it) const;
 };


 class itkVectorGradientMagnitudeImageFilterIVF33F_Pointer {
   public:
     itkVectorGradientMagnitudeImageFilterIVF33F_Pointer();
     itkVectorGradientMagnitudeImageFilterIVF33F_Pointer(itkVectorGradientMagnitudeImageFilterIVF33F_Pointer const & p);
     itkVectorGradientMagnitudeImageFilterIVF33F_Pointer(itkVectorGradientMagnitudeImageFilterIVF33F * p);
     ~itkVectorGradientMagnitudeImageFilterIVF33F_Pointer();
     itkVectorGradientMagnitudeImageFilterIVF33F * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVectorGradientMagnitudeImageFilterIVF33F * GetPointer() const;
     bool operator<(itkVectorGradientMagnitudeImageFilterIVF33F_Pointer const & r) const;
     bool operator>(itkVectorGradientMagnitudeImageFilterIVF33F_Pointer const & r) const;
     bool operator<=(itkVectorGradientMagnitudeImageFilterIVF33F_Pointer const & r) const;
     bool operator>=(itkVectorGradientMagnitudeImageFilterIVF33F_Pointer const & r) const;
     itkVectorGradientMagnitudeImageFilterIVF33F_Pointer & operator=(itkVectorGradientMagnitudeImageFilterIVF33F_Pointer const & r);
     itkVectorGradientMagnitudeImageFilterIVF33F_Pointer & operator=(itkVectorGradientMagnitudeImageFilterIVF33F * r);
     itkVectorGradientMagnitudeImageFilterIVF33F * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


