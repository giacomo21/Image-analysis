// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkHistogramChicken
#endif
#ifdef SWIGCSHARP
%module itkHistogramCsharp
#endif
#ifdef SWIGGUILE
%module itkHistogramGuile
#endif
#ifdef SWIGJAVA
%module itkHistogramJava
#endif
#ifdef SWIGLUA
%module itkHistogramLua
#endif
#ifdef SWIGMODULA3
%module itkHistogramModula3
#endif
#ifdef SWIGMZSCHEME
%module itkHistogramMzscheme
#endif
#ifdef SWIGOCAML
%module itkHistogramOcaml
#endif
#ifdef SWIGPERL
%module itkHistogramPerl
#endif
#ifdef SWIGPERL5
%module itkHistogramPerl5
#endif
#ifdef SWIGPHP
%module itkHistogramPhp
#endif
#ifdef SWIGPHP4
%module itkHistogramPhp4
#endif
#ifdef SWIGPHP5
%module itkHistogramPhp5
#endif
#ifdef SWIGPIKE
%module itkHistogramPike
#endif
#ifdef SWIGPYTHON
%module itkHistogramPython
#endif
#ifdef SWIGR
%module itkHistogramR
#endif
#ifdef SWIGRUBY
%module itkHistogramRuby
#endif
#ifdef SWIGSEXP
%module itkHistogramSexp
#endif
#ifdef SWIGTCL
%module itkHistogramTcl
#endif
#ifdef SWIGXML
%module itkHistogramXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Numerics.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkSample.i
%import wrap_itkArray.i


%include itk.i
%include wrap_itkHistogram_ext.i


 class itkHistogramD : public itkSampleAD {
   public:
     virtual char const * GetNameOfClass() const;
     static itkHistogramD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void Initialize(itkArrayUL const & size);
     void Initialize(itkArrayUL const & size, itkArrayD & lowerBound, itkArrayD & upperBound);
     void SetToZero();
     itkArraySL const & GetIndex(itkArrayD const & measurement) const;
     bool GetIndex(itkArrayD const & measurement, itkArraySL & index) const;
     itkArraySL const & GetIndex(size_t id) const;
     virtual bool GetClipBinsAtEnds() const;
     virtual void SetClipBinsAtEnds(bool const _arg);
     bool IsIndexOutOfBounds(itkArraySL const & index) const;
     size_t GetInstanceIdentifier(itkArraySL const & index) const;
     virtual size_t Size() const;
     itkArrayUL const & GetSize() const;
     unsigned long GetSize(unsigned int dimension) const;
     double const & GetBinMin(unsigned int dimension, size_t nbin) const;
     double const & GetBinMax(unsigned int dimension, size_t nbin) const;
     void SetBinMin(unsigned int dimension, size_t nbin, double min);
     void SetBinMax(unsigned int dimension, size_t nbin, double max);
     double const & GetBinMinFromValue(unsigned int dimension, float value) const;
     double const & GetBinMaxFromValue(unsigned int dimension, float value) const;
     std::vector< double > const & GetDimensionMins(unsigned int dimension) const;
     std::vector< double > const & GetDimensionMaxs(unsigned int dimension) const;
     std::vector< std::vector< double > > const & GetMins() const;
     std::vector< std::vector< double > > const & GetMaxs() const;
     itkArrayD const & GetHistogramMinFromIndex(itkArraySL const & index) const;
     itkArrayD const & GetHistogramMaxFromIndex(itkArraySL const & index) const;
     virtual size_t GetFrequency(size_t id) const;
     size_t GetFrequency(itkArraySL const & index) const;
     void SetFrequency(size_t value);
     bool SetFrequency(size_t id, size_t value);
     bool SetFrequency(itkArraySL const & index, size_t value);
     bool SetFrequency(itkArrayD const & measurement, size_t value);
     bool IncreaseFrequency(size_t id, size_t value);
     bool IncreaseFrequency(itkArraySL const & index, size_t value);
     bool IncreaseFrequency(itkArrayD const & measurement, size_t value);
     virtual itkArrayD const & GetMeasurementVector(size_t id) const;
     itkArrayD const & GetMeasurementVector(itkArraySL const & index) const;
     double GetMeasurement(size_t n, unsigned int dimension) const;
     virtual unsigned long GetTotalFrequency() const;
     size_t GetFrequency(size_t n, unsigned int dimension) const;
     double Quantile(unsigned int dimension, double p) const;
     virtual void Graft(itkDataObject const * arg0);
   private:
     itkHistogramD(itkHistogramD const & arg0);
     void operator=(itkHistogramD const & arg0);
     virtual void Initialize();
   protected:
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     itkHistogramD();
     ~itkHistogramD();
 };


 class itkHistogramD_Pointer {
   public:
     itkHistogramD_Pointer();
     itkHistogramD_Pointer(itkHistogramD_Pointer const & p);
     itkHistogramD_Pointer(itkHistogramD * p);
     ~itkHistogramD_Pointer();
     itkHistogramD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkHistogramD * GetPointer() const;
     bool operator<(itkHistogramD_Pointer const & r) const;
     bool operator>(itkHistogramD_Pointer const & r) const;
     bool operator<=(itkHistogramD_Pointer const & r) const;
     bool operator>=(itkHistogramD_Pointer const & r) const;
     itkHistogramD_Pointer & operator=(itkHistogramD_Pointer const & r);
     itkHistogramD_Pointer & operator=(itkHistogramD * r);
     itkHistogramD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkHistogramF : public itkSampleAF {
   public:
     virtual char const * GetNameOfClass() const;
     static itkHistogramF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void Initialize(itkArrayUL const & size);
     void Initialize(itkArrayUL const & size, itkArrayF & lowerBound, itkArrayF & upperBound);
     void SetToZero();
     itkArraySL const & GetIndex(itkArrayF const & measurement) const;
     bool GetIndex(itkArrayF const & measurement, itkArraySL & index) const;
     itkArraySL const & GetIndex(size_t id) const;
     virtual bool GetClipBinsAtEnds() const;
     virtual void SetClipBinsAtEnds(bool const _arg);
     bool IsIndexOutOfBounds(itkArraySL const & index) const;
     size_t GetInstanceIdentifier(itkArraySL const & index) const;
     virtual size_t Size() const;
     itkArrayUL const & GetSize() const;
     unsigned long GetSize(unsigned int dimension) const;
     float const & GetBinMin(unsigned int dimension, size_t nbin) const;
     float const & GetBinMax(unsigned int dimension, size_t nbin) const;
     void SetBinMin(unsigned int dimension, size_t nbin, float min);
     void SetBinMax(unsigned int dimension, size_t nbin, float max);
     float const & GetBinMinFromValue(unsigned int dimension, float value) const;
     float const & GetBinMaxFromValue(unsigned int dimension, float value) const;
     std::vector< float > const & GetDimensionMins(unsigned int dimension) const;
     std::vector< float > const & GetDimensionMaxs(unsigned int dimension) const;
     std::vector< std::vector< float > > const & GetMins() const;
     std::vector< std::vector< float > > const & GetMaxs() const;
     itkArrayF const & GetHistogramMinFromIndex(itkArraySL const & index) const;
     itkArrayF const & GetHistogramMaxFromIndex(itkArraySL const & index) const;
     virtual size_t GetFrequency(size_t id) const;
     size_t GetFrequency(itkArraySL const & index) const;
     void SetFrequency(size_t value);
     bool SetFrequency(size_t id, size_t value);
     bool SetFrequency(itkArraySL const & index, size_t value);
     bool SetFrequency(itkArrayF const & measurement, size_t value);
     bool IncreaseFrequency(size_t id, size_t value);
     bool IncreaseFrequency(itkArraySL const & index, size_t value);
     bool IncreaseFrequency(itkArrayF const & measurement, size_t value);
     virtual itkArrayF const & GetMeasurementVector(size_t id) const;
     itkArrayF const & GetMeasurementVector(itkArraySL const & index) const;
     float GetMeasurement(size_t n, unsigned int dimension) const;
     virtual unsigned long GetTotalFrequency() const;
     size_t GetFrequency(size_t n, unsigned int dimension) const;
     double Quantile(unsigned int dimension, double p) const;
     virtual void Graft(itkDataObject const * arg0);
   private:
     itkHistogramF(itkHistogramF const & arg0);
     void operator=(itkHistogramF const & arg0);
     virtual void Initialize();
   protected:
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     itkHistogramF();
     ~itkHistogramF();
 };


 class itkHistogramF_Pointer {
   public:
     itkHistogramF_Pointer();
     itkHistogramF_Pointer(itkHistogramF_Pointer const & p);
     itkHistogramF_Pointer(itkHistogramF * p);
     ~itkHistogramF_Pointer();
     itkHistogramF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkHistogramF * GetPointer() const;
     bool operator<(itkHistogramF_Pointer const & r) const;
     bool operator>(itkHistogramF_Pointer const & r) const;
     bool operator<=(itkHistogramF_Pointer const & r) const;
     bool operator>=(itkHistogramF_Pointer const & r) const;
     itkHistogramF_Pointer & operator=(itkHistogramF_Pointer const & r);
     itkHistogramF_Pointer & operator=(itkHistogramF * r);
     itkHistogramF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkSimpleDataObjectDecoratorHD : public itkDataObject {
   public:
     static itkSimpleDataObjectDecoratorHD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Set(itkHistogramD * const & val);
     virtual itkHistogramD * & Get();
     virtual itkHistogramD * const & Get() const;
   private:
     itkSimpleDataObjectDecoratorHD(itkSimpleDataObjectDecoratorHD const & arg0);
     void operator=(itkSimpleDataObjectDecoratorHD const & arg0);
   protected:
     itkSimpleDataObjectDecoratorHD();
     ~itkSimpleDataObjectDecoratorHD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkSimpleDataObjectDecoratorHD_Pointer {
   public:
     itkSimpleDataObjectDecoratorHD_Pointer();
     itkSimpleDataObjectDecoratorHD_Pointer(itkSimpleDataObjectDecoratorHD_Pointer const & p);
     itkSimpleDataObjectDecoratorHD_Pointer(itkSimpleDataObjectDecoratorHD * p);
     ~itkSimpleDataObjectDecoratorHD_Pointer();
     itkSimpleDataObjectDecoratorHD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkSimpleDataObjectDecoratorHD * GetPointer() const;
     bool operator<(itkSimpleDataObjectDecoratorHD_Pointer const & r) const;
     bool operator>(itkSimpleDataObjectDecoratorHD_Pointer const & r) const;
     bool operator<=(itkSimpleDataObjectDecoratorHD_Pointer const & r) const;
     bool operator>=(itkSimpleDataObjectDecoratorHD_Pointer const & r) const;
     itkSimpleDataObjectDecoratorHD_Pointer & operator=(itkSimpleDataObjectDecoratorHD_Pointer const & r);
     itkSimpleDataObjectDecoratorHD_Pointer & operator=(itkSimpleDataObjectDecoratorHD * r);
     itkSimpleDataObjectDecoratorHD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkSimpleDataObjectDecoratorHF : public itkDataObject {
   public:
     static itkSimpleDataObjectDecoratorHF_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Set(itkHistogramF * const & val);
     virtual itkHistogramF * & Get();
     virtual itkHistogramF * const & Get() const;
   private:
     itkSimpleDataObjectDecoratorHF(itkSimpleDataObjectDecoratorHF const & arg0);
     void operator=(itkSimpleDataObjectDecoratorHF const & arg0);
   protected:
     itkSimpleDataObjectDecoratorHF();
     ~itkSimpleDataObjectDecoratorHF();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkSimpleDataObjectDecoratorHF_Pointer {
   public:
     itkSimpleDataObjectDecoratorHF_Pointer();
     itkSimpleDataObjectDecoratorHF_Pointer(itkSimpleDataObjectDecoratorHF_Pointer const & p);
     itkSimpleDataObjectDecoratorHF_Pointer(itkSimpleDataObjectDecoratorHF * p);
     ~itkSimpleDataObjectDecoratorHF_Pointer();
     itkSimpleDataObjectDecoratorHF * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkSimpleDataObjectDecoratorHF * GetPointer() const;
     bool operator<(itkSimpleDataObjectDecoratorHF_Pointer const & r) const;
     bool operator>(itkSimpleDataObjectDecoratorHF_Pointer const & r) const;
     bool operator<=(itkSimpleDataObjectDecoratorHF_Pointer const & r) const;
     bool operator>=(itkSimpleDataObjectDecoratorHF_Pointer const & r) const;
     itkSimpleDataObjectDecoratorHF_Pointer & operator=(itkSimpleDataObjectDecoratorHF_Pointer const & r);
     itkSimpleDataObjectDecoratorHF_Pointer & operator=(itkSimpleDataObjectDecoratorHF * r);
     itkSimpleDataObjectDecoratorHF * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


