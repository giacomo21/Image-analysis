// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module ITKSimilarityTransformsChicken
#endif
#ifdef SWIGCSHARP
%module ITKSimilarityTransformsCsharp
#endif
#ifdef SWIGGUILE
%module ITKSimilarityTransformsGuile
#endif
#ifdef SWIGJAVA
%module ITKSimilarityTransformsJava
#endif
#ifdef SWIGLUA
%module ITKSimilarityTransformsLua
#endif
#ifdef SWIGMODULA3
%module ITKSimilarityTransformsModula3
#endif
#ifdef SWIGMZSCHEME
%module ITKSimilarityTransformsMzscheme
#endif
#ifdef SWIGOCAML
%module ITKSimilarityTransformsOcaml
#endif
#ifdef SWIGPERL
%module ITKSimilarityTransformsPerl
#endif
#ifdef SWIGPERL5
%module ITKSimilarityTransformsPerl5
#endif
#ifdef SWIGPHP
%module ITKSimilarityTransformsPhp
#endif
#ifdef SWIGPHP4
%module ITKSimilarityTransformsPhp4
#endif
#ifdef SWIGPHP5
%module ITKSimilarityTransformsPhp5
#endif
#ifdef SWIGPIKE
%module ITKSimilarityTransformsPike
#endif
#ifdef SWIGPYTHON
%module ITKSimilarityTransformsPython
#endif
#ifdef SWIGR
%module ITKSimilarityTransformsR
#endif
#ifdef SWIGRUBY
%module ITKSimilarityTransformsRuby
#endif
#ifdef SWIGSEXP
%module ITKSimilarityTransformsSexp
#endif
#ifdef SWIGTCL
%module ITKSimilarityTransformsTcl
#endif
#ifdef SWIGXML
%module ITKSimilarityTransformsXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
%}


%{
%}




%import wrap_itkPoint.i
%import wrap_ITKRigidTransforms.i
%import wrap_ITKVersorRigidTransform.i
%import wrap_itkTransform.i
%import wrap_itkArray2D.i
%import wrap_itkVector.i
%import wrap_itkArray.i
%import wrap_itkMatrix.i
%import wrap_ITKCommonBase.i


%include itk.i
%include wrap_ITKSimilarityTransforms_ext.i


 class itkSimilarity2DTransformD : public itkRigid2DTransformD {
   public:
     enum  {  SpaceDimension = 2 };
     enum  {  InputSpaceDimension = 2 };
     enum  {  OutputSpaceDimension = 2 };
     enum  {  ParametersDimension = 4 };
     static itkSimilarity2DTransformD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetScale(double scale);
     virtual double const & GetScale() const;
     virtual void SetParameters(itkArrayD const & parameters);
     virtual itkArrayD const & GetParameters() const;
     virtual itkArray2DD const & GetJacobian(itkPointD2 const & point) const;
     virtual void SetIdentity();
     void CloneInverseTo(itkSimilarity2DTransformD_Pointer & newinverse) const;
     bool GetInverse(itkSimilarity2DTransformD * inverse) const;
     virtual itkTransformBase_Pointer GetInverseTransform() const;
     void CloneTo(itkSimilarity2DTransformD_Pointer & clone) const;
     virtual void SetMatrix(itkMatrixD22 const & matrix);
   private:
     itkSimilarity2DTransformD(itkSimilarity2DTransformD const & arg0);
     void operator=(itkSimilarity2DTransformD const & arg0);
   protected:
     itkSimilarity2DTransformD();
     itkSimilarity2DTransformD(unsigned int spaceDimension, unsigned int parametersDimension);
     ~itkSimilarity2DTransformD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ComputeMatrix();
     virtual void ComputeMatrixParameters();
     void SetVarScale(double scale);
 };


 class itkSimilarity2DTransformD_Pointer {
   public:
     itkSimilarity2DTransformD_Pointer();
     itkSimilarity2DTransformD_Pointer(itkSimilarity2DTransformD_Pointer const & p);
     itkSimilarity2DTransformD_Pointer(itkSimilarity2DTransformD * p);
     ~itkSimilarity2DTransformD_Pointer();
     itkSimilarity2DTransformD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkSimilarity2DTransformD * GetPointer() const;
     bool operator<(itkSimilarity2DTransformD_Pointer const & r) const;
     bool operator>(itkSimilarity2DTransformD_Pointer const & r) const;
     bool operator<=(itkSimilarity2DTransformD_Pointer const & r) const;
     bool operator>=(itkSimilarity2DTransformD_Pointer const & r) const;
     itkSimilarity2DTransformD_Pointer & operator=(itkSimilarity2DTransformD_Pointer const & r);
     itkSimilarity2DTransformD_Pointer & operator=(itkSimilarity2DTransformD * r);
     itkSimilarity2DTransformD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkSimilarity3DTransformD : public itkVersorRigid3DTransformD {
   public:
     enum  {  SpaceDimension = 3 };
     enum  {  InputSpaceDimension = 3 };
     enum  {  OutputSpaceDimension = 3 };
     enum  {  ParametersDimension = 7 };
     static itkSimilarity3DTransformD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetMatrix(itkMatrixD33 const & matrix);
     virtual void SetParameters(itkArrayD const & parameters);
     virtual itkArrayD const & GetParameters() const;
     void SetScale(double scale);
     virtual double const & GetScale() const;
     virtual itkArray2DD const & GetJacobian(itkPointD3 const & point) const;
   private:
     itkSimilarity3DTransformD(itkSimilarity3DTransformD const & arg0);
     void operator=(itkSimilarity3DTransformD const & arg0);
   protected:
     itkSimilarity3DTransformD(unsigned int outputSpaceDim, unsigned int paramDim);
     itkSimilarity3DTransformD(itkMatrixD33 const & matrix, itkVectorD3 const & offset);
     itkSimilarity3DTransformD();
     ~itkSimilarity3DTransformD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ComputeMatrix();
     virtual void ComputeMatrixParameters();
 };


 class itkSimilarity3DTransformD_Pointer {
   public:
     itkSimilarity3DTransformD_Pointer();
     itkSimilarity3DTransformD_Pointer(itkSimilarity3DTransformD_Pointer const & p);
     itkSimilarity3DTransformD_Pointer(itkSimilarity3DTransformD * p);
     ~itkSimilarity3DTransformD_Pointer();
     itkSimilarity3DTransformD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkSimilarity3DTransformD * GetPointer() const;
     bool operator<(itkSimilarity3DTransformD_Pointer const & r) const;
     bool operator>(itkSimilarity3DTransformD_Pointer const & r) const;
     bool operator<=(itkSimilarity3DTransformD_Pointer const & r) const;
     bool operator>=(itkSimilarity3DTransformD_Pointer const & r) const;
     itkSimilarity3DTransformD_Pointer & operator=(itkSimilarity3DTransformD_Pointer const & r);
     itkSimilarity3DTransformD_Pointer & operator=(itkSimilarity3DTransformD * r);
     itkSimilarity3DTransformD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


