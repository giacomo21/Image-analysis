// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module ITKRigidTransformsChicken
#endif
#ifdef SWIGCSHARP
%module ITKRigidTransformsCsharp
#endif
#ifdef SWIGGUILE
%module ITKRigidTransformsGuile
#endif
#ifdef SWIGJAVA
%module ITKRigidTransformsJava
#endif
#ifdef SWIGLUA
%module ITKRigidTransformsLua
#endif
#ifdef SWIGMODULA3
%module ITKRigidTransformsModula3
#endif
#ifdef SWIGMZSCHEME
%module ITKRigidTransformsMzscheme
#endif
#ifdef SWIGOCAML
%module ITKRigidTransformsOcaml
#endif
#ifdef SWIGPERL
%module ITKRigidTransformsPerl
#endif
#ifdef SWIGPERL5
%module ITKRigidTransformsPerl5
#endif
#ifdef SWIGPHP
%module ITKRigidTransformsPhp
#endif
#ifdef SWIGPHP4
%module ITKRigidTransformsPhp4
#endif
#ifdef SWIGPHP5
%module ITKRigidTransformsPhp5
#endif
#ifdef SWIGPIKE
%module ITKRigidTransformsPike
#endif
#ifdef SWIGPYTHON
%module ITKRigidTransformsPython
#endif
#ifdef SWIGR
%module ITKRigidTransformsR
#endif
#ifdef SWIGRUBY
%module ITKRigidTransformsRuby
#endif
#ifdef SWIGSEXP
%module ITKRigidTransformsSexp
#endif
#ifdef SWIGTCL
%module ITKRigidTransformsTcl
#endif
#ifdef SWIGXML
%module ITKRigidTransformsXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
%}


%{
%}




%import wrap_itkPoint.i
%import wrap_itkTransform.i
%import wrap_itkArray2D.i
%import wrap_itkCovariantVector.i
%import wrap_itkVector.i
%import wrap_itkArray.i
%import wrap_itkMatrix.i
%import wrap_ITKCommonBase.i
%import wrap_itkMatrixOffsetTransformBase.i


%include itk.i
%include wrap_ITKRigidTransforms_ext.i


 class itkRigid2DTransformD : public itkMatrixOffsetTransformBaseD22 {
   public:
     enum  {  InputSpaceDimension = 2 };
     enum  {  OutputSpaceDimension = 2 };
     enum  {  ParametersDimension = 3 };
     virtual char const * GetNameOfClass() const;
     static itkRigid2DTransformD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void SetMatrix(itkMatrixD22 const & matrix);
     virtual void SetRotationMatrix(itkMatrixD22 const & matrix);
     itkMatrixD22 const & GetRotationMatrix() const;
     void Translate(itkVectorD2 const & offset, bool pre = false);
     itkPointD2 BackTransform(itkPointD2 const & point) const;
     itkVectorD2 BackTransform(itkVectorD2 const & vect) const;
     vnl_vector_fixed< double, 2u > BackTransform(vnl_vector_fixed< double, 2u > const & vect) const;
     itkCovariantVectorD2 BackTransform(itkCovariantVectorD2 const & vect) const;
     void SetAngle(double angle);
     virtual double const & GetAngle() const;
     void SetAngleInDegrees(double angle);
     void SetRotation(double angle);
     virtual double const & GetRotation() const;
     virtual void SetParameters(itkArrayD const & parameters);
     virtual itkArrayD const & GetParameters() const;
     virtual itkArray2DD const & GetJacobian(itkPointD2 const & point) const;
     void CloneInverseTo(itkRigid2DTransformD_Pointer & newinverse) const;
     bool GetInverse(itkRigid2DTransformD * inverse) const;
     virtual itkTransformBase_Pointer GetInverseTransform() const;
     void CloneTo(itkRigid2DTransformD_Pointer & clone) const;
     virtual void SetIdentity();
   private:
     itkRigid2DTransformD(itkRigid2DTransformD const & arg0);
     void operator=(itkRigid2DTransformD const & arg0);
   protected:
     itkRigid2DTransformD();
     itkRigid2DTransformD(unsigned int outputSpaceDimension, unsigned int parametersDimension);
     ~itkRigid2DTransformD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ComputeMatrix();
     virtual void ComputeMatrixParameters();
     void SetVarAngle(double angle);
 };


 class itkRigid2DTransformD_Pointer {
   public:
     itkRigid2DTransformD_Pointer();
     itkRigid2DTransformD_Pointer(itkRigid2DTransformD_Pointer const & p);
     itkRigid2DTransformD_Pointer(itkRigid2DTransformD * p);
     ~itkRigid2DTransformD_Pointer();
     itkRigid2DTransformD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkRigid2DTransformD * GetPointer() const;
     bool operator<(itkRigid2DTransformD_Pointer const & r) const;
     bool operator>(itkRigid2DTransformD_Pointer const & r) const;
     bool operator<=(itkRigid2DTransformD_Pointer const & r) const;
     bool operator>=(itkRigid2DTransformD_Pointer const & r) const;
     itkRigid2DTransformD_Pointer & operator=(itkRigid2DTransformD_Pointer const & r);
     itkRigid2DTransformD_Pointer & operator=(itkRigid2DTransformD * r);
     itkRigid2DTransformD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkRigid3DTransformD : public itkMatrixOffsetTransformBaseD33 {
   public:
     enum  {  SpaceDimension = 3 };
     enum  {  InputSpaceDimension = 3 };
     enum  {  OutputSpaceDimension = 3 };
     enum  {  ParametersDimension = 12 };
     virtual char const * GetNameOfClass() const;
     static itkRigid3DTransformD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void SetParameters(itkArrayD const & parameters);
     virtual void SetMatrix(itkMatrixD33 const & matrix);
     itkMatrixD33 const & GetRotationMatrix();
     virtual void SetRotationMatrix(itkMatrixD33 const & matrix);
     void Translate(itkVectorD3 const & offset, bool pre = false);
     bool GetInverse(itkRigid3DTransformD * inverse) const;
     virtual itkTransformBase_Pointer GetInverseTransform() const;
     itkPointD3 BackTransform(itkPointD3 const & point) const;
     itkVectorD3 BackTransform(itkVectorD3 const & vector) const;
     vnl_vector_fixed< double, 3u > BackTransform(vnl_vector_fixed< double, 3u > const & vector) const;
     itkCovariantVectorD3 BackTransform(itkCovariantVectorD3 const & vector) const;
     bool MatrixIsOrthogonal(itkMatrixD33 const & matrix, double tol = 1.00000000000000003643219731549774157916554706559963960899e-10);
   private:
     itkRigid3DTransformD(itkRigid3DTransformD const & arg0);
     void operator=(itkRigid3DTransformD const & arg0);
   protected:
     itkRigid3DTransformD(unsigned int spaceDim, unsigned int paramDim);
     itkRigid3DTransformD(itkMatrixD33 const & matrix, itkVectorD3 const & offset);
     itkRigid3DTransformD();
     ~itkRigid3DTransformD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkRigid3DTransformD_Pointer {
   public:
     itkRigid3DTransformD_Pointer();
     itkRigid3DTransformD_Pointer(itkRigid3DTransformD_Pointer const & p);
     itkRigid3DTransformD_Pointer(itkRigid3DTransformD * p);
     ~itkRigid3DTransformD_Pointer();
     itkRigid3DTransformD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkRigid3DTransformD * GetPointer() const;
     bool operator<(itkRigid3DTransformD_Pointer const & r) const;
     bool operator>(itkRigid3DTransformD_Pointer const & r) const;
     bool operator<=(itkRigid3DTransformD_Pointer const & r) const;
     bool operator>=(itkRigid3DTransformD_Pointer const & r) const;
     itkRigid3DTransformD_Pointer & operator=(itkRigid3DTransformD_Pointer const & r);
     itkRigid3DTransformD_Pointer & operator=(itkRigid3DTransformD * r);
     itkRigid3DTransformD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


