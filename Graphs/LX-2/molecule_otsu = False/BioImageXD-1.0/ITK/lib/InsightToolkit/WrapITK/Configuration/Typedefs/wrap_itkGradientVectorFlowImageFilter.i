// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkGradientVectorFlowImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkGradientVectorFlowImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkGradientVectorFlowImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkGradientVectorFlowImageFilterJava
#endif
#ifdef SWIGLUA
%module itkGradientVectorFlowImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkGradientVectorFlowImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkGradientVectorFlowImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkGradientVectorFlowImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkGradientVectorFlowImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkGradientVectorFlowImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkGradientVectorFlowImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkGradientVectorFlowImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkGradientVectorFlowImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkGradientVectorFlowImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkGradientVectorFlowImageFilterPython
#endif
#ifdef SWIGR
%module itkGradientVectorFlowImageFilterR
#endif
#ifdef SWIGRUBY
%module itkGradientVectorFlowImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkGradientVectorFlowImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkGradientVectorFlowImageFilterTcl
#endif
#ifdef SWIGXML
%module itkGradientVectorFlowImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Filtering.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkImageToImageFilterA.i
%import wrap_itkLaplacianImageFilter.i


%include itk.i
%include wrap_itkGradientVectorFlowImageFilter_ext.i


 class itkGradientVectorFlowImageFilterIVF22IVF22F : public itkImageToImageFilterIVF22IVF22 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  OutputHasNumericTraitsCheck = 1 };
     static itkGradientVectorFlowImageFilterIVF22IVF22F_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetLaplacianFilter(itkLaplacianImageFilterIF2IF2_Pointer const _arg);
     virtual void SetTimeStep(double const _arg);
     virtual double GetTimeStep() const;
     virtual void SetNoiseLevel(double const _arg);
     virtual double GetNoiseLevel() const;
     virtual void SetIterationNum(int const _arg);
     virtual int GetIterationNum() const;
   private:
   protected:
     itkGradientVectorFlowImageFilterIVF22IVF22F();
     ~itkGradientVectorFlowImageFilterIVF22IVF22F();
     itkGradientVectorFlowImageFilterIVF22IVF22F(itkGradientVectorFlowImageFilterIVF22IVF22F const & arg0);
     void operator=(itkGradientVectorFlowImageFilterIVF22IVF22F const & arg0);
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     void InitInterImage();
     void UpdateInterImage();
     void UpdatePixels();
 };


 class itkGradientVectorFlowImageFilterIVF22IVF22F_Pointer {
   public:
     itkGradientVectorFlowImageFilterIVF22IVF22F_Pointer();
     itkGradientVectorFlowImageFilterIVF22IVF22F_Pointer(itkGradientVectorFlowImageFilterIVF22IVF22F_Pointer const & p);
     itkGradientVectorFlowImageFilterIVF22IVF22F_Pointer(itkGradientVectorFlowImageFilterIVF22IVF22F * p);
     ~itkGradientVectorFlowImageFilterIVF22IVF22F_Pointer();
     itkGradientVectorFlowImageFilterIVF22IVF22F * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkGradientVectorFlowImageFilterIVF22IVF22F * GetPointer() const;
     bool operator<(itkGradientVectorFlowImageFilterIVF22IVF22F_Pointer const & r) const;
     bool operator>(itkGradientVectorFlowImageFilterIVF22IVF22F_Pointer const & r) const;
     bool operator<=(itkGradientVectorFlowImageFilterIVF22IVF22F_Pointer const & r) const;
     bool operator>=(itkGradientVectorFlowImageFilterIVF22IVF22F_Pointer const & r) const;
     itkGradientVectorFlowImageFilterIVF22IVF22F_Pointer & operator=(itkGradientVectorFlowImageFilterIVF22IVF22F_Pointer const & r);
     itkGradientVectorFlowImageFilterIVF22IVF22F_Pointer & operator=(itkGradientVectorFlowImageFilterIVF22IVF22F * r);
     itkGradientVectorFlowImageFilterIVF22IVF22F * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkGradientVectorFlowImageFilterIVF33IVF33F : public itkImageToImageFilterIVF33IVF33 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  InputHasNumericTraitsCheck = 1 };
     enum  {  OutputHasNumericTraitsCheck = 1 };
     static itkGradientVectorFlowImageFilterIVF33IVF33F_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetLaplacianFilter(itkLaplacianImageFilterIF3IF3_Pointer const _arg);
     virtual void SetTimeStep(double const _arg);
     virtual double GetTimeStep() const;
     virtual void SetNoiseLevel(double const _arg);
     virtual double GetNoiseLevel() const;
     virtual void SetIterationNum(int const _arg);
     virtual int GetIterationNum() const;
   private:
   protected:
     itkGradientVectorFlowImageFilterIVF33IVF33F();
     ~itkGradientVectorFlowImageFilterIVF33IVF33F();
     itkGradientVectorFlowImageFilterIVF33IVF33F(itkGradientVectorFlowImageFilterIVF33IVF33F const & arg0);
     void operator=(itkGradientVectorFlowImageFilterIVF33IVF33F const & arg0);
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     void InitInterImage();
     void UpdateInterImage();
     void UpdatePixels();
 };


 class itkGradientVectorFlowImageFilterIVF33IVF33F_Pointer {
   public:
     itkGradientVectorFlowImageFilterIVF33IVF33F_Pointer();
     itkGradientVectorFlowImageFilterIVF33IVF33F_Pointer(itkGradientVectorFlowImageFilterIVF33IVF33F_Pointer const & p);
     itkGradientVectorFlowImageFilterIVF33IVF33F_Pointer(itkGradientVectorFlowImageFilterIVF33IVF33F * p);
     ~itkGradientVectorFlowImageFilterIVF33IVF33F_Pointer();
     itkGradientVectorFlowImageFilterIVF33IVF33F * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkGradientVectorFlowImageFilterIVF33IVF33F * GetPointer() const;
     bool operator<(itkGradientVectorFlowImageFilterIVF33IVF33F_Pointer const & r) const;
     bool operator>(itkGradientVectorFlowImageFilterIVF33IVF33F_Pointer const & r) const;
     bool operator<=(itkGradientVectorFlowImageFilterIVF33IVF33F_Pointer const & r) const;
     bool operator>=(itkGradientVectorFlowImageFilterIVF33IVF33F_Pointer const & r) const;
     itkGradientVectorFlowImageFilterIVF33IVF33F_Pointer & operator=(itkGradientVectorFlowImageFilterIVF33IVF33F_Pointer const & r);
     itkGradientVectorFlowImageFilterIVF33IVF33F_Pointer & operator=(itkGradientVectorFlowImageFilterIVF33IVF33F * r);
     itkGradientVectorFlowImageFilterIVF33IVF33F * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


