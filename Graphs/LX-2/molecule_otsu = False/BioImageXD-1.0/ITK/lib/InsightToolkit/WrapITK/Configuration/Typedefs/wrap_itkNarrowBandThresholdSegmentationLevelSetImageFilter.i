// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkNarrowBandThresholdSegmentationLevelSetImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkNarrowBandThresholdSegmentationLevelSetImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkNarrowBandThresholdSegmentationLevelSetImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkNarrowBandThresholdSegmentationLevelSetImageFilterJava
#endif
#ifdef SWIGLUA
%module itkNarrowBandThresholdSegmentationLevelSetImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkNarrowBandThresholdSegmentationLevelSetImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkNarrowBandThresholdSegmentationLevelSetImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkNarrowBandThresholdSegmentationLevelSetImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkNarrowBandThresholdSegmentationLevelSetImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkNarrowBandThresholdSegmentationLevelSetImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkNarrowBandThresholdSegmentationLevelSetImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkNarrowBandThresholdSegmentationLevelSetImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkNarrowBandThresholdSegmentationLevelSetImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkNarrowBandThresholdSegmentationLevelSetImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkNarrowBandThresholdSegmentationLevelSetImageFilterPython
#endif
#ifdef SWIGR
%module itkNarrowBandThresholdSegmentationLevelSetImageFilterR
#endif
#ifdef SWIGRUBY
%module itkNarrowBandThresholdSegmentationLevelSetImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkNarrowBandThresholdSegmentationLevelSetImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkNarrowBandThresholdSegmentationLevelSetImageFilterTcl
#endif
#ifdef SWIGXML
%module itkNarrowBandThresholdSegmentationLevelSetImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Numerics.includes"
#include "LevelSet.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkNarrowBandLevelSetImageFilter.i


%include itk.i
%include wrap_itkNarrowBandThresholdSegmentationLevelSetImageFilter_ext.i


 class itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D : public itkNarrowBandLevelSetImageFilterID2ID2D {
   public:
     enum  {  OutputHasNumericTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void SetUpperThreshold(double v);
     void SetLowerThreshold(double v);
     double GetUpperThreshold() const;
     double GetLowerThreshold() const;
     void SetEdgeWeight(double v);
     double GetEdgeWeight() const;
     void SetSmoothingIterations(int v);
     int GetSmoothingIterations() const;
     void SetSmoothingTimeStep(double v);
     double GetSmoothingTimeStep() const;
     void SetSmoothingConductance(double v);
     double GetSmoothingConductance() const;
   private:
   protected:
     ~itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D();
     itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D const & arg0);
     void operator=(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D const & arg0);
 };


 class itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer {
   public:
     itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer();
     itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer const & p);
     itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D * p);
     ~itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer();
     itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D * GetPointer() const;
     bool operator<(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer const & r) const;
     bool operator>(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer const & r) const;
     bool operator<=(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer const & r) const;
     bool operator>=(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer const & r) const;
     itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer & operator=(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer const & r);
     itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D_Pointer & operator=(itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D * r);
     itkNarrowBandThresholdSegmentationLevelSetImageFilterID2ID2D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D : public itkNarrowBandLevelSetImageFilterID3ID3D {
   public:
     enum  {  OutputHasNumericTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void SetUpperThreshold(double v);
     void SetLowerThreshold(double v);
     double GetUpperThreshold() const;
     double GetLowerThreshold() const;
     void SetEdgeWeight(double v);
     double GetEdgeWeight() const;
     void SetSmoothingIterations(int v);
     int GetSmoothingIterations() const;
     void SetSmoothingTimeStep(double v);
     double GetSmoothingTimeStep() const;
     void SetSmoothingConductance(double v);
     double GetSmoothingConductance() const;
   private:
   protected:
     ~itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D();
     itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D const & arg0);
     void operator=(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D const & arg0);
 };


 class itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer {
   public:
     itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer();
     itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer const & p);
     itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D * p);
     ~itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer();
     itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D * GetPointer() const;
     bool operator<(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer const & r) const;
     bool operator>(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer const & r) const;
     bool operator<=(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer const & r) const;
     bool operator>=(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer const & r) const;
     itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer & operator=(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer const & r);
     itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D_Pointer & operator=(itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D * r);
     itkNarrowBandThresholdSegmentationLevelSetImageFilterID3ID3D * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F : public itkNarrowBandLevelSetImageFilterIF2IF2F {
   public:
     enum  {  OutputHasNumericTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void SetUpperThreshold(float v);
     void SetLowerThreshold(float v);
     float GetUpperThreshold() const;
     float GetLowerThreshold() const;
     void SetEdgeWeight(float v);
     float GetEdgeWeight() const;
     void SetSmoothingIterations(int v);
     int GetSmoothingIterations() const;
     void SetSmoothingTimeStep(float v);
     float GetSmoothingTimeStep() const;
     void SetSmoothingConductance(float v);
     float GetSmoothingConductance() const;
   private:
   protected:
     ~itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F();
     itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F const & arg0);
     void operator=(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F const & arg0);
 };


 class itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer {
   public:
     itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer();
     itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer const & p);
     itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F * p);
     ~itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer();
     itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F * GetPointer() const;
     bool operator<(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer const & r) const;
     bool operator>(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer const & r) const;
     bool operator<=(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer const & r) const;
     bool operator>=(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer const & r) const;
     itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer & operator=(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer const & r);
     itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F_Pointer & operator=(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F * r);
     itkNarrowBandThresholdSegmentationLevelSetImageFilterIF2IF2F * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F : public itkNarrowBandLevelSetImageFilterIF3IF3F {
   public:
     enum  {  OutputHasNumericTraitsCheck = 1 };
     virtual char const * GetNameOfClass() const;
     static itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void SetUpperThreshold(float v);
     void SetLowerThreshold(float v);
     float GetUpperThreshold() const;
     float GetLowerThreshold() const;
     void SetEdgeWeight(float v);
     float GetEdgeWeight() const;
     void SetSmoothingIterations(int v);
     int GetSmoothingIterations() const;
     void SetSmoothingTimeStep(float v);
     float GetSmoothingTimeStep() const;
     void SetSmoothingConductance(float v);
     float GetSmoothingConductance() const;
   private:
   protected:
     ~itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F();
     itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F const & arg0);
     void operator=(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F const & arg0);
 };


 class itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer {
   public:
     itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer();
     itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer const & p);
     itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F * p);
     ~itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer();
     itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F * GetPointer() const;
     bool operator<(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer const & r) const;
     bool operator>(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer const & r) const;
     bool operator<=(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer const & r) const;
     bool operator>=(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer const & r) const;
     itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer & operator=(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer const & r);
     itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F_Pointer & operator=(itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F * r);
     itkNarrowBandThresholdSegmentationLevelSetImageFilterIF3IF3F * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


