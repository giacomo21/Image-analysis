// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkMultiScaleHessianBasedMeasureImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkMultiScaleHessianBasedMeasureImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkMultiScaleHessianBasedMeasureImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkMultiScaleHessianBasedMeasureImageFilterJava
#endif
#ifdef SWIGLUA
%module itkMultiScaleHessianBasedMeasureImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkMultiScaleHessianBasedMeasureImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkMultiScaleHessianBasedMeasureImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkMultiScaleHessianBasedMeasureImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkMultiScaleHessianBasedMeasureImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkMultiScaleHessianBasedMeasureImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkMultiScaleHessianBasedMeasureImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkMultiScaleHessianBasedMeasureImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkMultiScaleHessianBasedMeasureImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkMultiScaleHessianBasedMeasureImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkMultiScaleHessianBasedMeasureImageFilterPython
#endif
#ifdef SWIGR
%module itkMultiScaleHessianBasedMeasureImageFilterR
#endif
#ifdef SWIGRUBY
%module itkMultiScaleHessianBasedMeasureImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkMultiScaleHessianBasedMeasureImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkMultiScaleHessianBasedMeasureImageFilterTcl
#endif
#ifdef SWIGXML
%module itkMultiScaleHessianBasedMeasureImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Filtering.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkImageToImageFilterB.i
%import wrap_itkImage.i
%import wrap_itkImageToImageFilterA.i


%include itk.i
%include wrap_itkMultiScaleHessianBasedMeasureImageFilter_ext.i


 class itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2 : public itkImageToImageFilterID2ID2 {
   public:
     enum  {  ImageDimension = 2 };
     enum SigmaStepMethodType {  EquispacedSigmaSteps = 0,  LogarithmicSigmaSteps = 1 };
     static itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSigmaMinimum(double const _arg);
     virtual double GetSigmaMinimum() const;
     virtual void SetSigmaMaximum(double const _arg);
     virtual double GetSigmaMaximum() const;
     virtual void SetNumberOfSigmaSteps(unsigned int const _arg);
     virtual unsigned int GetNumberOfSigmaSteps() const;
     virtual void SetHessianToMeasureFilter(itkImageToImageFilterISSRTD22ID2 * _arg);
     virtual itkImageToImageFilterISSRTD22ID2 * GetHessianToMeasureFilter();
     virtual void SetNonNegativeHessianBasedMeasure(bool const _arg);
     virtual bool GetNonNegativeHessianBasedMeasure() const;
     virtual void NonNegativeHessianBasedMeasureOn();
     virtual void NonNegativeHessianBasedMeasureOff();
     virtual void SetSigmaStepMethod(itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2::SigmaStepMethodType const _arg);
     virtual itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2::SigmaStepMethodType GetSigmaStepMethod() const;
     void SetSigmaStepMethodToEquispaced();
     void SetSigmaStepMethodToLogarithmic();
     itkImageSSRTD22 const * GetHessianOutput() const;
     itkImageF2 const * GetScalesOutput() const;
     virtual void EnlargeOutputRequestedRegion(itkDataObject * arg0);
     virtual void SetGenerateScalesOutput(bool const _arg);
     virtual bool GetGenerateScalesOutput() const;
     virtual void GenerateScalesOutputOn();
     virtual void GenerateScalesOutputOff();
     virtual void SetGenerateHessianOutput(bool const _arg);
     virtual bool GetGenerateHessianOutput() const;
     virtual void GenerateHessianOutputOn();
     virtual void GenerateHessianOutputOff();
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     void UpdateMaximumResponse(double sigma);
     double ComputeSigmaValue(int scaleLevel);
     void AllocateUpdateBuffer();
     itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2(itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2 const & arg0);
     void operator=(itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2 const & arg0);
   protected:
     itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2();
     ~itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2_Pointer {
   public:
     itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2_Pointer();
     itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2_Pointer(itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2_Pointer const & p);
     itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2_Pointer(itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2 * p);
     ~itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2_Pointer();
     itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2 * GetPointer() const;
     bool operator<(itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2_Pointer const & r) const;
     bool operator>(itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2_Pointer const & r) const;
     bool operator<=(itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2_Pointer const & r) const;
     bool operator>=(itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2_Pointer const & r) const;
     itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2_Pointer & operator=(itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2_Pointer const & r);
     itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2_Pointer & operator=(itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2 * r);
     itkMultiScaleHessianBasedMeasureImageFilterID2ISSRTD22ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3 : public itkImageToImageFilterID3ID3 {
   public:
     enum  {  ImageDimension = 3 };
     enum SigmaStepMethodType {  EquispacedSigmaSteps = 0,  LogarithmicSigmaSteps = 1 };
     static itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSigmaMinimum(double const _arg);
     virtual double GetSigmaMinimum() const;
     virtual void SetSigmaMaximum(double const _arg);
     virtual double GetSigmaMaximum() const;
     virtual void SetNumberOfSigmaSteps(unsigned int const _arg);
     virtual unsigned int GetNumberOfSigmaSteps() const;
     virtual void SetHessianToMeasureFilter(itkImageToImageFilterISSRTD33ID3 * _arg);
     virtual itkImageToImageFilterISSRTD33ID3 * GetHessianToMeasureFilter();
     virtual void SetNonNegativeHessianBasedMeasure(bool const _arg);
     virtual bool GetNonNegativeHessianBasedMeasure() const;
     virtual void NonNegativeHessianBasedMeasureOn();
     virtual void NonNegativeHessianBasedMeasureOff();
     virtual void SetSigmaStepMethod(itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3::SigmaStepMethodType const _arg);
     virtual itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3::SigmaStepMethodType GetSigmaStepMethod() const;
     void SetSigmaStepMethodToEquispaced();
     void SetSigmaStepMethodToLogarithmic();
     itkImageSSRTD33 const * GetHessianOutput() const;
     itkImageF3 const * GetScalesOutput() const;
     virtual void EnlargeOutputRequestedRegion(itkDataObject * arg0);
     virtual void SetGenerateScalesOutput(bool const _arg);
     virtual bool GetGenerateScalesOutput() const;
     virtual void GenerateScalesOutputOn();
     virtual void GenerateScalesOutputOff();
     virtual void SetGenerateHessianOutput(bool const _arg);
     virtual bool GetGenerateHessianOutput() const;
     virtual void GenerateHessianOutputOn();
     virtual void GenerateHessianOutputOff();
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     void UpdateMaximumResponse(double sigma);
     double ComputeSigmaValue(int scaleLevel);
     void AllocateUpdateBuffer();
     itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3(itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3 const & arg0);
     void operator=(itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3 const & arg0);
   protected:
     itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3();
     ~itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3_Pointer {
   public:
     itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3_Pointer();
     itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3_Pointer(itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3_Pointer const & p);
     itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3_Pointer(itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3 * p);
     ~itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3_Pointer();
     itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3 * GetPointer() const;
     bool operator<(itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3_Pointer const & r) const;
     bool operator>(itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3_Pointer const & r) const;
     bool operator<=(itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3_Pointer const & r) const;
     bool operator>=(itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3_Pointer const & r) const;
     itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3_Pointer & operator=(itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3_Pointer const & r);
     itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3_Pointer & operator=(itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3 * r);
     itkMultiScaleHessianBasedMeasureImageFilterID3ISSRTD33ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2 : public itkImageToImageFilterIF2IF2 {
   public:
     enum  {  ImageDimension = 2 };
     enum SigmaStepMethodType {  EquispacedSigmaSteps = 0,  LogarithmicSigmaSteps = 1 };
     static itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSigmaMinimum(double const _arg);
     virtual double GetSigmaMinimum() const;
     virtual void SetSigmaMaximum(double const _arg);
     virtual double GetSigmaMaximum() const;
     virtual void SetNumberOfSigmaSteps(unsigned int const _arg);
     virtual unsigned int GetNumberOfSigmaSteps() const;
     virtual void SetHessianToMeasureFilter(itkImageToImageFilterISSRTD22IF2 * _arg);
     virtual itkImageToImageFilterISSRTD22IF2 * GetHessianToMeasureFilter();
     virtual void SetNonNegativeHessianBasedMeasure(bool const _arg);
     virtual bool GetNonNegativeHessianBasedMeasure() const;
     virtual void NonNegativeHessianBasedMeasureOn();
     virtual void NonNegativeHessianBasedMeasureOff();
     virtual void SetSigmaStepMethod(itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2::SigmaStepMethodType const _arg);
     virtual itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2::SigmaStepMethodType GetSigmaStepMethod() const;
     void SetSigmaStepMethodToEquispaced();
     void SetSigmaStepMethodToLogarithmic();
     itkImageSSRTD22 const * GetHessianOutput() const;
     itkImageF2 const * GetScalesOutput() const;
     virtual void EnlargeOutputRequestedRegion(itkDataObject * arg0);
     virtual void SetGenerateScalesOutput(bool const _arg);
     virtual bool GetGenerateScalesOutput() const;
     virtual void GenerateScalesOutputOn();
     virtual void GenerateScalesOutputOff();
     virtual void SetGenerateHessianOutput(bool const _arg);
     virtual bool GetGenerateHessianOutput() const;
     virtual void GenerateHessianOutputOn();
     virtual void GenerateHessianOutputOff();
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     void UpdateMaximumResponse(double sigma);
     double ComputeSigmaValue(int scaleLevel);
     void AllocateUpdateBuffer();
     itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2(itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2 const & arg0);
     void operator=(itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2 const & arg0);
   protected:
     itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2();
     ~itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2_Pointer {
   public:
     itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2_Pointer();
     itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2_Pointer(itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2_Pointer const & p);
     itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2_Pointer(itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2 * p);
     ~itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2_Pointer();
     itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2 * GetPointer() const;
     bool operator<(itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2_Pointer const & r) const;
     bool operator>(itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2_Pointer const & r) const;
     bool operator<=(itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2_Pointer const & r) const;
     bool operator>=(itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2_Pointer const & r) const;
     itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2_Pointer & operator=(itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2_Pointer const & r);
     itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2_Pointer & operator=(itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2 * r);
     itkMultiScaleHessianBasedMeasureImageFilterIF2ISSRTD22IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3 : public itkImageToImageFilterIF3IF3 {
   public:
     enum  {  ImageDimension = 3 };
     enum SigmaStepMethodType {  EquispacedSigmaSteps = 0,  LogarithmicSigmaSteps = 1 };
     static itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSigmaMinimum(double const _arg);
     virtual double GetSigmaMinimum() const;
     virtual void SetSigmaMaximum(double const _arg);
     virtual double GetSigmaMaximum() const;
     virtual void SetNumberOfSigmaSteps(unsigned int const _arg);
     virtual unsigned int GetNumberOfSigmaSteps() const;
     virtual void SetHessianToMeasureFilter(itkImageToImageFilterISSRTD33IF3 * _arg);
     virtual itkImageToImageFilterISSRTD33IF3 * GetHessianToMeasureFilter();
     virtual void SetNonNegativeHessianBasedMeasure(bool const _arg);
     virtual bool GetNonNegativeHessianBasedMeasure() const;
     virtual void NonNegativeHessianBasedMeasureOn();
     virtual void NonNegativeHessianBasedMeasureOff();
     virtual void SetSigmaStepMethod(itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3::SigmaStepMethodType const _arg);
     virtual itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3::SigmaStepMethodType GetSigmaStepMethod() const;
     void SetSigmaStepMethodToEquispaced();
     void SetSigmaStepMethodToLogarithmic();
     itkImageSSRTD33 const * GetHessianOutput() const;
     itkImageF3 const * GetScalesOutput() const;
     virtual void EnlargeOutputRequestedRegion(itkDataObject * arg0);
     virtual void SetGenerateScalesOutput(bool const _arg);
     virtual bool GetGenerateScalesOutput() const;
     virtual void GenerateScalesOutputOn();
     virtual void GenerateScalesOutputOff();
     virtual void SetGenerateHessianOutput(bool const _arg);
     virtual bool GetGenerateHessianOutput() const;
     virtual void GenerateHessianOutputOn();
     virtual void GenerateHessianOutputOff();
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     void UpdateMaximumResponse(double sigma);
     double ComputeSigmaValue(int scaleLevel);
     void AllocateUpdateBuffer();
     itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3(itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3 const & arg0);
     void operator=(itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3 const & arg0);
   protected:
     itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3();
     ~itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3_Pointer {
   public:
     itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3_Pointer();
     itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3_Pointer(itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3_Pointer const & p);
     itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3_Pointer(itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3 * p);
     ~itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3_Pointer();
     itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3 * GetPointer() const;
     bool operator<(itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3_Pointer const & r) const;
     bool operator>(itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3_Pointer const & r) const;
     bool operator<=(itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3_Pointer const & r) const;
     bool operator>=(itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3_Pointer const & r) const;
     itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3_Pointer & operator=(itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3_Pointer const & r);
     itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3_Pointer & operator=(itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3 * r);
     itkMultiScaleHessianBasedMeasureImageFilterIF3ISSRTD33IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2 : public itkImageToImageFilterIUC2IUC2 {
   public:
     enum  {  ImageDimension = 2 };
     enum SigmaStepMethodType {  EquispacedSigmaSteps = 0,  LogarithmicSigmaSteps = 1 };
     static itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSigmaMinimum(double const _arg);
     virtual double GetSigmaMinimum() const;
     virtual void SetSigmaMaximum(double const _arg);
     virtual double GetSigmaMaximum() const;
     virtual void SetNumberOfSigmaSteps(unsigned int const _arg);
     virtual unsigned int GetNumberOfSigmaSteps() const;
     virtual void SetHessianToMeasureFilter(itkImageToImageFilterISSRTD22IUC2 * _arg);
     virtual itkImageToImageFilterISSRTD22IUC2 * GetHessianToMeasureFilter();
     virtual void SetNonNegativeHessianBasedMeasure(bool const _arg);
     virtual bool GetNonNegativeHessianBasedMeasure() const;
     virtual void NonNegativeHessianBasedMeasureOn();
     virtual void NonNegativeHessianBasedMeasureOff();
     virtual void SetSigmaStepMethod(itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2::SigmaStepMethodType const _arg);
     virtual itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2::SigmaStepMethodType GetSigmaStepMethod() const;
     void SetSigmaStepMethodToEquispaced();
     void SetSigmaStepMethodToLogarithmic();
     itkImageSSRTD22 const * GetHessianOutput() const;
     itkImageF2 const * GetScalesOutput() const;
     virtual void EnlargeOutputRequestedRegion(itkDataObject * arg0);
     virtual void SetGenerateScalesOutput(bool const _arg);
     virtual bool GetGenerateScalesOutput() const;
     virtual void GenerateScalesOutputOn();
     virtual void GenerateScalesOutputOff();
     virtual void SetGenerateHessianOutput(bool const _arg);
     virtual bool GetGenerateHessianOutput() const;
     virtual void GenerateHessianOutputOn();
     virtual void GenerateHessianOutputOff();
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     void UpdateMaximumResponse(double sigma);
     double ComputeSigmaValue(int scaleLevel);
     void AllocateUpdateBuffer();
     itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2(itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2 const & arg0);
     void operator=(itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2 const & arg0);
   protected:
     itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2();
     ~itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2_Pointer {
   public:
     itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2_Pointer();
     itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2_Pointer(itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2_Pointer const & p);
     itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2_Pointer(itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2 * p);
     ~itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2_Pointer();
     itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2 * GetPointer() const;
     bool operator<(itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2_Pointer const & r) const;
     bool operator>(itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2_Pointer const & r) const;
     bool operator<=(itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2_Pointer const & r) const;
     bool operator>=(itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2_Pointer const & r) const;
     itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2_Pointer & operator=(itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2_Pointer const & r);
     itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2_Pointer & operator=(itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2 * r);
     itkMultiScaleHessianBasedMeasureImageFilterIUC2ISSRTD22IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3 : public itkImageToImageFilterIUC3IUC3 {
   public:
     enum  {  ImageDimension = 3 };
     enum SigmaStepMethodType {  EquispacedSigmaSteps = 0,  LogarithmicSigmaSteps = 1 };
     static itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSigmaMinimum(double const _arg);
     virtual double GetSigmaMinimum() const;
     virtual void SetSigmaMaximum(double const _arg);
     virtual double GetSigmaMaximum() const;
     virtual void SetNumberOfSigmaSteps(unsigned int const _arg);
     virtual unsigned int GetNumberOfSigmaSteps() const;
     virtual void SetHessianToMeasureFilter(itkImageToImageFilterISSRTD33IUC3 * _arg);
     virtual itkImageToImageFilterISSRTD33IUC3 * GetHessianToMeasureFilter();
     virtual void SetNonNegativeHessianBasedMeasure(bool const _arg);
     virtual bool GetNonNegativeHessianBasedMeasure() const;
     virtual void NonNegativeHessianBasedMeasureOn();
     virtual void NonNegativeHessianBasedMeasureOff();
     virtual void SetSigmaStepMethod(itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3::SigmaStepMethodType const _arg);
     virtual itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3::SigmaStepMethodType GetSigmaStepMethod() const;
     void SetSigmaStepMethodToEquispaced();
     void SetSigmaStepMethodToLogarithmic();
     itkImageSSRTD33 const * GetHessianOutput() const;
     itkImageF3 const * GetScalesOutput() const;
     virtual void EnlargeOutputRequestedRegion(itkDataObject * arg0);
     virtual void SetGenerateScalesOutput(bool const _arg);
     virtual bool GetGenerateScalesOutput() const;
     virtual void GenerateScalesOutputOn();
     virtual void GenerateScalesOutputOff();
     virtual void SetGenerateHessianOutput(bool const _arg);
     virtual bool GetGenerateHessianOutput() const;
     virtual void GenerateHessianOutputOn();
     virtual void GenerateHessianOutputOff();
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     void UpdateMaximumResponse(double sigma);
     double ComputeSigmaValue(int scaleLevel);
     void AllocateUpdateBuffer();
     itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3(itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3 const & arg0);
     void operator=(itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3 const & arg0);
   protected:
     itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3();
     ~itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3_Pointer {
   public:
     itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3_Pointer();
     itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3_Pointer(itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3_Pointer const & p);
     itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3_Pointer(itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3 * p);
     ~itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3_Pointer();
     itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3 * GetPointer() const;
     bool operator<(itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3_Pointer const & r) const;
     bool operator>(itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3_Pointer const & r) const;
     bool operator<=(itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3_Pointer const & r) const;
     bool operator>=(itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3_Pointer const & r) const;
     itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3_Pointer & operator=(itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3_Pointer const & r);
     itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3_Pointer & operator=(itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3 * r);
     itkMultiScaleHessianBasedMeasureImageFilterIUC3ISSRTD33IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2 : public itkImageToImageFilterIUL2IUL2 {
   public:
     enum  {  ImageDimension = 2 };
     enum SigmaStepMethodType {  EquispacedSigmaSteps = 0,  LogarithmicSigmaSteps = 1 };
     static itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSigmaMinimum(double const _arg);
     virtual double GetSigmaMinimum() const;
     virtual void SetSigmaMaximum(double const _arg);
     virtual double GetSigmaMaximum() const;
     virtual void SetNumberOfSigmaSteps(unsigned int const _arg);
     virtual unsigned int GetNumberOfSigmaSteps() const;
     virtual void SetHessianToMeasureFilter(itkImageToImageFilterISSRTD22IUL2 * _arg);
     virtual itkImageToImageFilterISSRTD22IUL2 * GetHessianToMeasureFilter();
     virtual void SetNonNegativeHessianBasedMeasure(bool const _arg);
     virtual bool GetNonNegativeHessianBasedMeasure() const;
     virtual void NonNegativeHessianBasedMeasureOn();
     virtual void NonNegativeHessianBasedMeasureOff();
     virtual void SetSigmaStepMethod(itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2::SigmaStepMethodType const _arg);
     virtual itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2::SigmaStepMethodType GetSigmaStepMethod() const;
     void SetSigmaStepMethodToEquispaced();
     void SetSigmaStepMethodToLogarithmic();
     itkImageSSRTD22 const * GetHessianOutput() const;
     itkImageF2 const * GetScalesOutput() const;
     virtual void EnlargeOutputRequestedRegion(itkDataObject * arg0);
     virtual void SetGenerateScalesOutput(bool const _arg);
     virtual bool GetGenerateScalesOutput() const;
     virtual void GenerateScalesOutputOn();
     virtual void GenerateScalesOutputOff();
     virtual void SetGenerateHessianOutput(bool const _arg);
     virtual bool GetGenerateHessianOutput() const;
     virtual void GenerateHessianOutputOn();
     virtual void GenerateHessianOutputOff();
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     void UpdateMaximumResponse(double sigma);
     double ComputeSigmaValue(int scaleLevel);
     void AllocateUpdateBuffer();
     itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2(itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2 const & arg0);
     void operator=(itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2 const & arg0);
   protected:
     itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2();
     ~itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2_Pointer {
   public:
     itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2_Pointer();
     itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2_Pointer(itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2_Pointer const & p);
     itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2_Pointer(itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2 * p);
     ~itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2_Pointer();
     itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2 * GetPointer() const;
     bool operator<(itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2_Pointer const & r) const;
     bool operator>(itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2_Pointer const & r) const;
     bool operator<=(itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2_Pointer const & r) const;
     bool operator>=(itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2_Pointer const & r) const;
     itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2_Pointer & operator=(itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2_Pointer const & r);
     itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2_Pointer & operator=(itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2 * r);
     itkMultiScaleHessianBasedMeasureImageFilterIUL2ISSRTD22IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3 : public itkImageToImageFilterIUL3IUL3 {
   public:
     enum  {  ImageDimension = 3 };
     enum SigmaStepMethodType {  EquispacedSigmaSteps = 0,  LogarithmicSigmaSteps = 1 };
     static itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSigmaMinimum(double const _arg);
     virtual double GetSigmaMinimum() const;
     virtual void SetSigmaMaximum(double const _arg);
     virtual double GetSigmaMaximum() const;
     virtual void SetNumberOfSigmaSteps(unsigned int const _arg);
     virtual unsigned int GetNumberOfSigmaSteps() const;
     virtual void SetHessianToMeasureFilter(itkImageToImageFilterISSRTD33IUL3 * _arg);
     virtual itkImageToImageFilterISSRTD33IUL3 * GetHessianToMeasureFilter();
     virtual void SetNonNegativeHessianBasedMeasure(bool const _arg);
     virtual bool GetNonNegativeHessianBasedMeasure() const;
     virtual void NonNegativeHessianBasedMeasureOn();
     virtual void NonNegativeHessianBasedMeasureOff();
     virtual void SetSigmaStepMethod(itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3::SigmaStepMethodType const _arg);
     virtual itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3::SigmaStepMethodType GetSigmaStepMethod() const;
     void SetSigmaStepMethodToEquispaced();
     void SetSigmaStepMethodToLogarithmic();
     itkImageSSRTD33 const * GetHessianOutput() const;
     itkImageF3 const * GetScalesOutput() const;
     virtual void EnlargeOutputRequestedRegion(itkDataObject * arg0);
     virtual void SetGenerateScalesOutput(bool const _arg);
     virtual bool GetGenerateScalesOutput() const;
     virtual void GenerateScalesOutputOn();
     virtual void GenerateScalesOutputOff();
     virtual void SetGenerateHessianOutput(bool const _arg);
     virtual bool GetGenerateHessianOutput() const;
     virtual void GenerateHessianOutputOn();
     virtual void GenerateHessianOutputOff();
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     void UpdateMaximumResponse(double sigma);
     double ComputeSigmaValue(int scaleLevel);
     void AllocateUpdateBuffer();
     itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3(itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3 const & arg0);
     void operator=(itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3 const & arg0);
   protected:
     itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3();
     ~itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3_Pointer {
   public:
     itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3_Pointer();
     itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3_Pointer(itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3_Pointer const & p);
     itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3_Pointer(itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3 * p);
     ~itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3_Pointer();
     itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3 * GetPointer() const;
     bool operator<(itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3_Pointer const & r) const;
     bool operator>(itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3_Pointer const & r) const;
     bool operator<=(itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3_Pointer const & r) const;
     bool operator>=(itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3_Pointer const & r) const;
     itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3_Pointer & operator=(itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3_Pointer const & r);
     itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3_Pointer & operator=(itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3 * r);
     itkMultiScaleHessianBasedMeasureImageFilterIUL3ISSRTD33IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2 : public itkImageToImageFilterIUS2IUS2 {
   public:
     enum  {  ImageDimension = 2 };
     enum SigmaStepMethodType {  EquispacedSigmaSteps = 0,  LogarithmicSigmaSteps = 1 };
     static itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSigmaMinimum(double const _arg);
     virtual double GetSigmaMinimum() const;
     virtual void SetSigmaMaximum(double const _arg);
     virtual double GetSigmaMaximum() const;
     virtual void SetNumberOfSigmaSteps(unsigned int const _arg);
     virtual unsigned int GetNumberOfSigmaSteps() const;
     virtual void SetHessianToMeasureFilter(itkImageToImageFilterISSRTD22IUS2 * _arg);
     virtual itkImageToImageFilterISSRTD22IUS2 * GetHessianToMeasureFilter();
     virtual void SetNonNegativeHessianBasedMeasure(bool const _arg);
     virtual bool GetNonNegativeHessianBasedMeasure() const;
     virtual void NonNegativeHessianBasedMeasureOn();
     virtual void NonNegativeHessianBasedMeasureOff();
     virtual void SetSigmaStepMethod(itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2::SigmaStepMethodType const _arg);
     virtual itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2::SigmaStepMethodType GetSigmaStepMethod() const;
     void SetSigmaStepMethodToEquispaced();
     void SetSigmaStepMethodToLogarithmic();
     itkImageSSRTD22 const * GetHessianOutput() const;
     itkImageF2 const * GetScalesOutput() const;
     virtual void EnlargeOutputRequestedRegion(itkDataObject * arg0);
     virtual void SetGenerateScalesOutput(bool const _arg);
     virtual bool GetGenerateScalesOutput() const;
     virtual void GenerateScalesOutputOn();
     virtual void GenerateScalesOutputOff();
     virtual void SetGenerateHessianOutput(bool const _arg);
     virtual bool GetGenerateHessianOutput() const;
     virtual void GenerateHessianOutputOn();
     virtual void GenerateHessianOutputOff();
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     void UpdateMaximumResponse(double sigma);
     double ComputeSigmaValue(int scaleLevel);
     void AllocateUpdateBuffer();
     itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2(itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2 const & arg0);
     void operator=(itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2 const & arg0);
   protected:
     itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2();
     ~itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2_Pointer {
   public:
     itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2_Pointer();
     itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2_Pointer(itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2_Pointer const & p);
     itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2_Pointer(itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2 * p);
     ~itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2_Pointer();
     itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2 * GetPointer() const;
     bool operator<(itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2_Pointer const & r) const;
     bool operator>(itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2_Pointer const & r) const;
     bool operator<=(itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2_Pointer const & r) const;
     bool operator>=(itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2_Pointer const & r) const;
     itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2_Pointer & operator=(itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2_Pointer const & r);
     itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2_Pointer & operator=(itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2 * r);
     itkMultiScaleHessianBasedMeasureImageFilterIUS2ISSRTD22IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3 : public itkImageToImageFilterIUS3IUS3 {
   public:
     enum  {  ImageDimension = 3 };
     enum SigmaStepMethodType {  EquispacedSigmaSteps = 0,  LogarithmicSigmaSteps = 1 };
     static itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSigmaMinimum(double const _arg);
     virtual double GetSigmaMinimum() const;
     virtual void SetSigmaMaximum(double const _arg);
     virtual double GetSigmaMaximum() const;
     virtual void SetNumberOfSigmaSteps(unsigned int const _arg);
     virtual unsigned int GetNumberOfSigmaSteps() const;
     virtual void SetHessianToMeasureFilter(itkImageToImageFilterISSRTD33IUS3 * _arg);
     virtual itkImageToImageFilterISSRTD33IUS3 * GetHessianToMeasureFilter();
     virtual void SetNonNegativeHessianBasedMeasure(bool const _arg);
     virtual bool GetNonNegativeHessianBasedMeasure() const;
     virtual void NonNegativeHessianBasedMeasureOn();
     virtual void NonNegativeHessianBasedMeasureOff();
     virtual void SetSigmaStepMethod(itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3::SigmaStepMethodType const _arg);
     virtual itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3::SigmaStepMethodType GetSigmaStepMethod() const;
     void SetSigmaStepMethodToEquispaced();
     void SetSigmaStepMethodToLogarithmic();
     itkImageSSRTD33 const * GetHessianOutput() const;
     itkImageF3 const * GetScalesOutput() const;
     virtual void EnlargeOutputRequestedRegion(itkDataObject * arg0);
     virtual void SetGenerateScalesOutput(bool const _arg);
     virtual bool GetGenerateScalesOutput() const;
     virtual void GenerateScalesOutputOn();
     virtual void GenerateScalesOutputOff();
     virtual void SetGenerateHessianOutput(bool const _arg);
     virtual bool GetGenerateHessianOutput() const;
     virtual void GenerateHessianOutputOn();
     virtual void GenerateHessianOutputOff();
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     void UpdateMaximumResponse(double sigma);
     double ComputeSigmaValue(int scaleLevel);
     void AllocateUpdateBuffer();
     itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3(itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3 const & arg0);
     void operator=(itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3 const & arg0);
   protected:
     itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3();
     ~itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
 };


 class itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3_Pointer {
   public:
     itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3_Pointer();
     itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3_Pointer(itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3_Pointer const & p);
     itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3_Pointer(itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3 * p);
     ~itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3_Pointer();
     itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3 * GetPointer() const;
     bool operator<(itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3_Pointer const & r) const;
     bool operator>(itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3_Pointer const & r) const;
     bool operator<=(itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3_Pointer const & r) const;
     bool operator>=(itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3_Pointer const & r) const;
     itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3_Pointer & operator=(itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3_Pointer const & r);
     itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3_Pointer & operator=(itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3 * r);
     itkMultiScaleHessianBasedMeasureImageFilterIUS3ISSRTD33IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


