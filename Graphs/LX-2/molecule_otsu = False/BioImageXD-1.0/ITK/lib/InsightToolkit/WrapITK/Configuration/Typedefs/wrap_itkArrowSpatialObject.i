// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkArrowSpatialObjectChicken
#endif
#ifdef SWIGCSHARP
%module itkArrowSpatialObjectCsharp
#endif
#ifdef SWIGGUILE
%module itkArrowSpatialObjectGuile
#endif
#ifdef SWIGJAVA
%module itkArrowSpatialObjectJava
#endif
#ifdef SWIGLUA
%module itkArrowSpatialObjectLua
#endif
#ifdef SWIGMODULA3
%module itkArrowSpatialObjectModula3
#endif
#ifdef SWIGMZSCHEME
%module itkArrowSpatialObjectMzscheme
#endif
#ifdef SWIGOCAML
%module itkArrowSpatialObjectOcaml
#endif
#ifdef SWIGPERL
%module itkArrowSpatialObjectPerl
#endif
#ifdef SWIGPERL5
%module itkArrowSpatialObjectPerl5
#endif
#ifdef SWIGPHP
%module itkArrowSpatialObjectPhp
#endif
#ifdef SWIGPHP4
%module itkArrowSpatialObjectPhp4
#endif
#ifdef SWIGPHP5
%module itkArrowSpatialObjectPhp5
#endif
#ifdef SWIGPIKE
%module itkArrowSpatialObjectPike
#endif
#ifdef SWIGPYTHON
%module itkArrowSpatialObjectPython
#endif
#ifdef SWIGR
%module itkArrowSpatialObjectR
#endif
#ifdef SWIGRUBY
%module itkArrowSpatialObjectRuby
#endif
#ifdef SWIGSEXP
%module itkArrowSpatialObjectSexp
#endif
#ifdef SWIGTCL
%module itkArrowSpatialObjectTcl
#endif
#ifdef SWIGXML
%module itkArrowSpatialObjectXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
#include "Calculators.includes"
#include "SpatialObject.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkSpatialObjectBase.i
%import wrap_itkPoint.i
%import wrap_itkVector.i


%include itk.i
%include wrap_itkArrowSpatialObject_ext.i


 class itkArrowSpatialObject2 : public itkSpatialObject2 {
   public:
     static itkArrowSpatialObject2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetPosition(itkPointD2 const & p);
     virtual itkPointD2 GetPosition() const;
     void SetPosition(float x, float y);
     void SetPosition(float x, float y, float z);
     void SetDirection(itkVectorD2 const & d);
     virtual itkVectorD2 GetDirection() const;
     void SetDirection(float x, float y);
     void SetDirection(float x, float y, float z);
     void SetLength(double length);
     void SetLenght(double length);
     virtual double GetLength();
     double GetLenght();
     virtual bool ComputeLocalBoundingBox() const;
     virtual bool IsInside(itkPointD2 const & point, unsigned int depth, char * name) const;
     virtual bool IsInside(itkPointD2 const & point) const;
   private:
     itkArrowSpatialObject2(itkArrowSpatialObject2 const & arg0);
     void operator=(itkArrowSpatialObject2 const & arg0);
   protected:
     itkArrowSpatialObject2();
     ~itkArrowSpatialObject2();
     void UpdateTransform();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkArrowSpatialObject2_Pointer {
   public:
     itkArrowSpatialObject2_Pointer();
     itkArrowSpatialObject2_Pointer(itkArrowSpatialObject2_Pointer const & p);
     itkArrowSpatialObject2_Pointer(itkArrowSpatialObject2 * p);
     ~itkArrowSpatialObject2_Pointer();
     itkArrowSpatialObject2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkArrowSpatialObject2 * GetPointer() const;
     bool operator<(itkArrowSpatialObject2_Pointer const & r) const;
     bool operator>(itkArrowSpatialObject2_Pointer const & r) const;
     bool operator<=(itkArrowSpatialObject2_Pointer const & r) const;
     bool operator>=(itkArrowSpatialObject2_Pointer const & r) const;
     itkArrowSpatialObject2_Pointer & operator=(itkArrowSpatialObject2_Pointer const & r);
     itkArrowSpatialObject2_Pointer & operator=(itkArrowSpatialObject2 * r);
     itkArrowSpatialObject2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkArrowSpatialObject3 : public itkSpatialObject3 {
   public:
     static itkArrowSpatialObject3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetPosition(itkPointD3 const & p);
     virtual itkPointD3 GetPosition() const;
     void SetPosition(float x, float y);
     void SetPosition(float x, float y, float z);
     void SetDirection(itkVectorD3 const & d);
     virtual itkVectorD3 GetDirection() const;
     void SetDirection(float x, float y);
     void SetDirection(float x, float y, float z);
     void SetLength(double length);
     void SetLenght(double length);
     virtual double GetLength();
     double GetLenght();
     virtual bool ComputeLocalBoundingBox() const;
     virtual bool IsInside(itkPointD3 const & point, unsigned int depth, char * name) const;
     virtual bool IsInside(itkPointD3 const & point) const;
   private:
     itkArrowSpatialObject3(itkArrowSpatialObject3 const & arg0);
     void operator=(itkArrowSpatialObject3 const & arg0);
   protected:
     itkArrowSpatialObject3();
     ~itkArrowSpatialObject3();
     void UpdateTransform();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkArrowSpatialObject3_Pointer {
   public:
     itkArrowSpatialObject3_Pointer();
     itkArrowSpatialObject3_Pointer(itkArrowSpatialObject3_Pointer const & p);
     itkArrowSpatialObject3_Pointer(itkArrowSpatialObject3 * p);
     ~itkArrowSpatialObject3_Pointer();
     itkArrowSpatialObject3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkArrowSpatialObject3 * GetPointer() const;
     bool operator<(itkArrowSpatialObject3_Pointer const & r) const;
     bool operator>(itkArrowSpatialObject3_Pointer const & r) const;
     bool operator<=(itkArrowSpatialObject3_Pointer const & r) const;
     bool operator>=(itkArrowSpatialObject3_Pointer const & r) const;
     itkArrowSpatialObject3_Pointer & operator=(itkArrowSpatialObject3_Pointer const & r);
     itkArrowSpatialObject3_Pointer & operator=(itkArrowSpatialObject3 * r);
     itkArrowSpatialObject3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


