// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module vnl_matrix_refChicken
#endif
#ifdef SWIGCSHARP
%module vnl_matrix_refCsharp
#endif
#ifdef SWIGGUILE
%module vnl_matrix_refGuile
#endif
#ifdef SWIGJAVA
%module vnl_matrix_refJava
#endif
#ifdef SWIGLUA
%module vnl_matrix_refLua
#endif
#ifdef SWIGMODULA3
%module vnl_matrix_refModula3
#endif
#ifdef SWIGMZSCHEME
%module vnl_matrix_refMzscheme
#endif
#ifdef SWIGOCAML
%module vnl_matrix_refOcaml
#endif
#ifdef SWIGPERL
%module vnl_matrix_refPerl
#endif
#ifdef SWIGPERL5
%module vnl_matrix_refPerl5
#endif
#ifdef SWIGPHP
%module vnl_matrix_refPhp
#endif
#ifdef SWIGPHP4
%module vnl_matrix_refPhp4
#endif
#ifdef SWIGPHP5
%module vnl_matrix_refPhp5
#endif
#ifdef SWIGPIKE
%module vnl_matrix_refPike
#endif
#ifdef SWIGPYTHON
%module vnl_matrix_refPython
#endif
#ifdef SWIGR
%module vnl_matrix_refR
#endif
#ifdef SWIGRUBY
%module vnl_matrix_refRuby
#endif
#ifdef SWIGSEXP
%module vnl_matrix_refSexp
#endif
#ifdef SWIGTCL
%module vnl_matrix_refTcl
#endif
#ifdef SWIGXML
%module vnl_matrix_refXml
#endif

%{
#include "VXLNumerics.includes"
%}


%{
%}




%import wrap_vnl_matrix.i


%include itk.i
%include wrap_vnl_matrix_ref_ext.i


 class vnl_matrix_refD : public vnl_matrixD {
   public:
     vnl_matrix_refD & operator=(vnl_matrix_refD const & arg0);
     vnl_matrix_refD(unsigned int m, unsigned int n, double * datablck);
     vnl_matrix_refD(vnl_matrix_refD const & other);
     ~vnl_matrix_refD();
     vnl_matrix_refD & non_const();
   private:
     bool resize(unsigned int arg0, unsigned int arg1);
     bool make_size(unsigned int arg0, unsigned int arg1);
     bool set_size(unsigned int arg0, unsigned int arg1);
     vnl_matrix_refD(vnl_matrixD const & arg0);
   protected:
 };


 class vnl_matrix_refF : public vnl_matrixF {
   public:
     vnl_matrix_refF & operator=(vnl_matrix_refF const & arg0);
     vnl_matrix_refF(unsigned int m, unsigned int n, float * datablck);
     vnl_matrix_refF(vnl_matrix_refF const & other);
     ~vnl_matrix_refF();
     vnl_matrix_refF & non_const();
   private:
     bool resize(unsigned int arg0, unsigned int arg1);
     bool make_size(unsigned int arg0, unsigned int arg1);
     bool set_size(unsigned int arg0, unsigned int arg1);
     vnl_matrix_refF(vnl_matrixF const & arg0);
   protected:
 };


