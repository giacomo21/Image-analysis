// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkNumericTraitsChicken
#endif
#ifdef SWIGCSHARP
%module itkNumericTraitsCsharp
#endif
#ifdef SWIGGUILE
%module itkNumericTraitsGuile
#endif
#ifdef SWIGJAVA
%module itkNumericTraitsJava
#endif
#ifdef SWIGLUA
%module itkNumericTraitsLua
#endif
#ifdef SWIGMODULA3
%module itkNumericTraitsModula3
#endif
#ifdef SWIGMZSCHEME
%module itkNumericTraitsMzscheme
#endif
#ifdef SWIGOCAML
%module itkNumericTraitsOcaml
#endif
#ifdef SWIGPERL
%module itkNumericTraitsPerl
#endif
#ifdef SWIGPERL5
%module itkNumericTraitsPerl5
#endif
#ifdef SWIGPHP
%module itkNumericTraitsPhp
#endif
#ifdef SWIGPHP4
%module itkNumericTraitsPhp4
#endif
#ifdef SWIGPHP5
%module itkNumericTraitsPhp5
#endif
#ifdef SWIGPIKE
%module itkNumericTraitsPike
#endif
#ifdef SWIGPYTHON
%module itkNumericTraitsPython
#endif
#ifdef SWIGR
%module itkNumericTraitsR
#endif
#ifdef SWIGRUBY
%module itkNumericTraitsRuby
#endif
#ifdef SWIGSEXP
%module itkNumericTraitsSexp
#endif
#ifdef SWIGTCL
%module itkNumericTraitsTcl
#endif
#ifdef SWIGXML
%module itkNumericTraitsXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
%}


%{
%}




%import wrap_itkFixedArray.i
%import wrap_itkVariableLengthVector.i
%import wrap_itkCovariantVector.i
%import wrap_itkVector.i
%import wrap_itkRGBAPixel.i
%import wrap_itkRGBPixel.i


%include itk.i
%include wrap_itkNumericTraits_ext.i


 class itkNumericTraitsCVF2 {
   public:
     ~itkNumericTraitsCVF2();
     itkNumericTraitsCVF2 & operator=(itkNumericTraitsCVF2 const & arg0);
     itkNumericTraitsCVF2(itkNumericTraitsCVF2 const & arg0);
     itkNumericTraitsCVF2();
     static itkCovariantVectorF2 const max();
     static itkCovariantVectorF2 const min();
     static itkCovariantVectorF2 const NonpositiveMin();
     static itkCovariantVectorF2 const ZeroValue();
     static itkCovariantVectorF2 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsCVF3 {
   public:
     ~itkNumericTraitsCVF3();
     itkNumericTraitsCVF3 & operator=(itkNumericTraitsCVF3 const & arg0);
     itkNumericTraitsCVF3(itkNumericTraitsCVF3 const & arg0);
     itkNumericTraitsCVF3();
     static itkCovariantVectorF3 const max();
     static itkCovariantVectorF3 const min();
     static itkCovariantVectorF3 const NonpositiveMin();
     static itkCovariantVectorF3 const ZeroValue();
     static itkCovariantVectorF3 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAD1 {
   public:
     ~itkNumericTraitsFAD1();
     itkNumericTraitsFAD1 & operator=(itkNumericTraitsFAD1 const & arg0);
     itkNumericTraitsFAD1(itkNumericTraitsFAD1 const & arg0);
     itkNumericTraitsFAD1();
     static itkFixedArrayD1 const max();
     static itkFixedArrayD1 const min();
     static itkFixedArrayD1 const NonpositiveMin();
     static itkFixedArrayD1 const ZeroValue();
     static itkFixedArrayD1 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAD2 {
   public:
     ~itkNumericTraitsFAD2();
     itkNumericTraitsFAD2 & operator=(itkNumericTraitsFAD2 const & arg0);
     itkNumericTraitsFAD2(itkNumericTraitsFAD2 const & arg0);
     itkNumericTraitsFAD2();
     static itkFixedArrayD2 const max();
     static itkFixedArrayD2 const min();
     static itkFixedArrayD2 const NonpositiveMin();
     static itkFixedArrayD2 const ZeroValue();
     static itkFixedArrayD2 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAD3 {
   public:
     ~itkNumericTraitsFAD3();
     itkNumericTraitsFAD3 & operator=(itkNumericTraitsFAD3 const & arg0);
     itkNumericTraitsFAD3(itkNumericTraitsFAD3 const & arg0);
     itkNumericTraitsFAD3();
     static itkFixedArrayD3 const max();
     static itkFixedArrayD3 const min();
     static itkFixedArrayD3 const NonpositiveMin();
     static itkFixedArrayD3 const ZeroValue();
     static itkFixedArrayD3 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAD4 {
   public:
     ~itkNumericTraitsFAD4();
     itkNumericTraitsFAD4 & operator=(itkNumericTraitsFAD4 const & arg0);
     itkNumericTraitsFAD4(itkNumericTraitsFAD4 const & arg0);
     itkNumericTraitsFAD4();
     static itkFixedArrayD4 const max();
     static itkFixedArrayD4 const min();
     static itkFixedArrayD4 const NonpositiveMin();
     static itkFixedArrayD4 const ZeroValue();
     static itkFixedArrayD4 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAD6 {
   public:
     ~itkNumericTraitsFAD6();
     itkNumericTraitsFAD6 & operator=(itkNumericTraitsFAD6 const & arg0);
     itkNumericTraitsFAD6(itkNumericTraitsFAD6 const & arg0);
     itkNumericTraitsFAD6();
     static itkFixedArrayD6 const max();
     static itkFixedArrayD6 const min();
     static itkFixedArrayD6 const NonpositiveMin();
     static itkFixedArrayD6 const ZeroValue();
     static itkFixedArrayD6 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAF1 {
   public:
     ~itkNumericTraitsFAF1();
     itkNumericTraitsFAF1 & operator=(itkNumericTraitsFAF1 const & arg0);
     itkNumericTraitsFAF1(itkNumericTraitsFAF1 const & arg0);
     itkNumericTraitsFAF1();
     static itkFixedArrayF1 const max();
     static itkFixedArrayF1 const min();
     static itkFixedArrayF1 const NonpositiveMin();
     static itkFixedArrayF1 const ZeroValue();
     static itkFixedArrayF1 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAF2 {
   public:
     ~itkNumericTraitsFAF2();
     itkNumericTraitsFAF2 & operator=(itkNumericTraitsFAF2 const & arg0);
     itkNumericTraitsFAF2(itkNumericTraitsFAF2 const & arg0);
     itkNumericTraitsFAF2();
     static itkFixedArrayF2 const max();
     static itkFixedArrayF2 const min();
     static itkFixedArrayF2 const NonpositiveMin();
     static itkFixedArrayF2 const ZeroValue();
     static itkFixedArrayF2 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAF3 {
   public:
     ~itkNumericTraitsFAF3();
     itkNumericTraitsFAF3 & operator=(itkNumericTraitsFAF3 const & arg0);
     itkNumericTraitsFAF3(itkNumericTraitsFAF3 const & arg0);
     itkNumericTraitsFAF3();
     static itkFixedArrayF3 const max();
     static itkFixedArrayF3 const min();
     static itkFixedArrayF3 const NonpositiveMin();
     static itkFixedArrayF3 const ZeroValue();
     static itkFixedArrayF3 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAF4 {
   public:
     ~itkNumericTraitsFAF4();
     itkNumericTraitsFAF4 & operator=(itkNumericTraitsFAF4 const & arg0);
     itkNumericTraitsFAF4(itkNumericTraitsFAF4 const & arg0);
     itkNumericTraitsFAF4();
     static itkFixedArrayF4 const max();
     static itkFixedArrayF4 const min();
     static itkFixedArrayF4 const NonpositiveMin();
     static itkFixedArrayF4 const ZeroValue();
     static itkFixedArrayF4 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAF6 {
   public:
     ~itkNumericTraitsFAF6();
     itkNumericTraitsFAF6 & operator=(itkNumericTraitsFAF6 const & arg0);
     itkNumericTraitsFAF6(itkNumericTraitsFAF6 const & arg0);
     itkNumericTraitsFAF6();
     static itkFixedArrayF6 const max();
     static itkFixedArrayF6 const min();
     static itkFixedArrayF6 const NonpositiveMin();
     static itkFixedArrayF6 const ZeroValue();
     static itkFixedArrayF6 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFASC1 {
   public:
     ~itkNumericTraitsFASC1();
     itkNumericTraitsFASC1 & operator=(itkNumericTraitsFASC1 const & arg0);
     itkNumericTraitsFASC1(itkNumericTraitsFASC1 const & arg0);
     itkNumericTraitsFASC1();
     static itkFixedArraySC1 const max();
     static itkFixedArraySC1 const min();
     static itkFixedArraySC1 const NonpositiveMin();
     static itkFixedArraySC1 const ZeroValue();
     static itkFixedArraySC1 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFASC2 {
   public:
     ~itkNumericTraitsFASC2();
     itkNumericTraitsFASC2 & operator=(itkNumericTraitsFASC2 const & arg0);
     itkNumericTraitsFASC2(itkNumericTraitsFASC2 const & arg0);
     itkNumericTraitsFASC2();
     static itkFixedArraySC2 const max();
     static itkFixedArraySC2 const min();
     static itkFixedArraySC2 const NonpositiveMin();
     static itkFixedArraySC2 const ZeroValue();
     static itkFixedArraySC2 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFASC3 {
   public:
     ~itkNumericTraitsFASC3();
     itkNumericTraitsFASC3 & operator=(itkNumericTraitsFASC3 const & arg0);
     itkNumericTraitsFASC3(itkNumericTraitsFASC3 const & arg0);
     itkNumericTraitsFASC3();
     static itkFixedArraySC3 const max();
     static itkFixedArraySC3 const min();
     static itkFixedArraySC3 const NonpositiveMin();
     static itkFixedArraySC3 const ZeroValue();
     static itkFixedArraySC3 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFASC4 {
   public:
     ~itkNumericTraitsFASC4();
     itkNumericTraitsFASC4 & operator=(itkNumericTraitsFASC4 const & arg0);
     itkNumericTraitsFASC4(itkNumericTraitsFASC4 const & arg0);
     itkNumericTraitsFASC4();
     static itkFixedArraySC4 const max();
     static itkFixedArraySC4 const min();
     static itkFixedArraySC4 const NonpositiveMin();
     static itkFixedArraySC4 const ZeroValue();
     static itkFixedArraySC4 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFASC6 {
   public:
     ~itkNumericTraitsFASC6();
     itkNumericTraitsFASC6 & operator=(itkNumericTraitsFASC6 const & arg0);
     itkNumericTraitsFASC6(itkNumericTraitsFASC6 const & arg0);
     itkNumericTraitsFASC6();
     static itkFixedArraySC6 const max();
     static itkFixedArraySC6 const min();
     static itkFixedArraySC6 const NonpositiveMin();
     static itkFixedArraySC6 const ZeroValue();
     static itkFixedArraySC6 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFASL1 {
   public:
     ~itkNumericTraitsFASL1();
     itkNumericTraitsFASL1 & operator=(itkNumericTraitsFASL1 const & arg0);
     itkNumericTraitsFASL1(itkNumericTraitsFASL1 const & arg0);
     itkNumericTraitsFASL1();
     static itkFixedArraySL1 const max();
     static itkFixedArraySL1 const min();
     static itkFixedArraySL1 const NonpositiveMin();
     static itkFixedArraySL1 const ZeroValue();
     static itkFixedArraySL1 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFASL2 {
   public:
     ~itkNumericTraitsFASL2();
     itkNumericTraitsFASL2 & operator=(itkNumericTraitsFASL2 const & arg0);
     itkNumericTraitsFASL2(itkNumericTraitsFASL2 const & arg0);
     itkNumericTraitsFASL2();
     static itkFixedArraySL2 const max();
     static itkFixedArraySL2 const min();
     static itkFixedArraySL2 const NonpositiveMin();
     static itkFixedArraySL2 const ZeroValue();
     static itkFixedArraySL2 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFASL3 {
   public:
     ~itkNumericTraitsFASL3();
     itkNumericTraitsFASL3 & operator=(itkNumericTraitsFASL3 const & arg0);
     itkNumericTraitsFASL3(itkNumericTraitsFASL3 const & arg0);
     itkNumericTraitsFASL3();
     static itkFixedArraySL3 const max();
     static itkFixedArraySL3 const min();
     static itkFixedArraySL3 const NonpositiveMin();
     static itkFixedArraySL3 const ZeroValue();
     static itkFixedArraySL3 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFASL4 {
   public:
     ~itkNumericTraitsFASL4();
     itkNumericTraitsFASL4 & operator=(itkNumericTraitsFASL4 const & arg0);
     itkNumericTraitsFASL4(itkNumericTraitsFASL4 const & arg0);
     itkNumericTraitsFASL4();
     static itkFixedArraySL4 const max();
     static itkFixedArraySL4 const min();
     static itkFixedArraySL4 const NonpositiveMin();
     static itkFixedArraySL4 const ZeroValue();
     static itkFixedArraySL4 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFASL6 {
   public:
     ~itkNumericTraitsFASL6();
     itkNumericTraitsFASL6 & operator=(itkNumericTraitsFASL6 const & arg0);
     itkNumericTraitsFASL6(itkNumericTraitsFASL6 const & arg0);
     itkNumericTraitsFASL6();
     static itkFixedArraySL6 const max();
     static itkFixedArraySL6 const min();
     static itkFixedArraySL6 const NonpositiveMin();
     static itkFixedArraySL6 const ZeroValue();
     static itkFixedArraySL6 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFASS1 {
   public:
     ~itkNumericTraitsFASS1();
     itkNumericTraitsFASS1 & operator=(itkNumericTraitsFASS1 const & arg0);
     itkNumericTraitsFASS1(itkNumericTraitsFASS1 const & arg0);
     itkNumericTraitsFASS1();
     static itkFixedArraySS1 const max();
     static itkFixedArraySS1 const min();
     static itkFixedArraySS1 const NonpositiveMin();
     static itkFixedArraySS1 const ZeroValue();
     static itkFixedArraySS1 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFASS2 {
   public:
     ~itkNumericTraitsFASS2();
     itkNumericTraitsFASS2 & operator=(itkNumericTraitsFASS2 const & arg0);
     itkNumericTraitsFASS2(itkNumericTraitsFASS2 const & arg0);
     itkNumericTraitsFASS2();
     static itkFixedArraySS2 const max();
     static itkFixedArraySS2 const min();
     static itkFixedArraySS2 const NonpositiveMin();
     static itkFixedArraySS2 const ZeroValue();
     static itkFixedArraySS2 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFASS3 {
   public:
     ~itkNumericTraitsFASS3();
     itkNumericTraitsFASS3 & operator=(itkNumericTraitsFASS3 const & arg0);
     itkNumericTraitsFASS3(itkNumericTraitsFASS3 const & arg0);
     itkNumericTraitsFASS3();
     static itkFixedArraySS3 const max();
     static itkFixedArraySS3 const min();
     static itkFixedArraySS3 const NonpositiveMin();
     static itkFixedArraySS3 const ZeroValue();
     static itkFixedArraySS3 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFASS4 {
   public:
     ~itkNumericTraitsFASS4();
     itkNumericTraitsFASS4 & operator=(itkNumericTraitsFASS4 const & arg0);
     itkNumericTraitsFASS4(itkNumericTraitsFASS4 const & arg0);
     itkNumericTraitsFASS4();
     static itkFixedArraySS4 const max();
     static itkFixedArraySS4 const min();
     static itkFixedArraySS4 const NonpositiveMin();
     static itkFixedArraySS4 const ZeroValue();
     static itkFixedArraySS4 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFASS6 {
   public:
     ~itkNumericTraitsFASS6();
     itkNumericTraitsFASS6 & operator=(itkNumericTraitsFASS6 const & arg0);
     itkNumericTraitsFASS6(itkNumericTraitsFASS6 const & arg0);
     itkNumericTraitsFASS6();
     static itkFixedArraySS6 const max();
     static itkFixedArraySS6 const min();
     static itkFixedArraySS6 const NonpositiveMin();
     static itkFixedArraySS6 const ZeroValue();
     static itkFixedArraySS6 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAUC1 {
   public:
     ~itkNumericTraitsFAUC1();
     itkNumericTraitsFAUC1 & operator=(itkNumericTraitsFAUC1 const & arg0);
     itkNumericTraitsFAUC1(itkNumericTraitsFAUC1 const & arg0);
     itkNumericTraitsFAUC1();
     static itkFixedArrayUC1 const max();
     static itkFixedArrayUC1 const min();
     static itkFixedArrayUC1 const NonpositiveMin();
     static itkFixedArrayUC1 const ZeroValue();
     static itkFixedArrayUC1 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAUC2 {
   public:
     ~itkNumericTraitsFAUC2();
     itkNumericTraitsFAUC2 & operator=(itkNumericTraitsFAUC2 const & arg0);
     itkNumericTraitsFAUC2(itkNumericTraitsFAUC2 const & arg0);
     itkNumericTraitsFAUC2();
     static itkFixedArrayUC2 const max();
     static itkFixedArrayUC2 const min();
     static itkFixedArrayUC2 const NonpositiveMin();
     static itkFixedArrayUC2 const ZeroValue();
     static itkFixedArrayUC2 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAUC3 {
   public:
     ~itkNumericTraitsFAUC3();
     itkNumericTraitsFAUC3 & operator=(itkNumericTraitsFAUC3 const & arg0);
     itkNumericTraitsFAUC3(itkNumericTraitsFAUC3 const & arg0);
     itkNumericTraitsFAUC3();
     static itkFixedArrayUC3 const max();
     static itkFixedArrayUC3 const min();
     static itkFixedArrayUC3 const NonpositiveMin();
     static itkFixedArrayUC3 const ZeroValue();
     static itkFixedArrayUC3 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAUC4 {
   public:
     ~itkNumericTraitsFAUC4();
     itkNumericTraitsFAUC4 & operator=(itkNumericTraitsFAUC4 const & arg0);
     itkNumericTraitsFAUC4(itkNumericTraitsFAUC4 const & arg0);
     itkNumericTraitsFAUC4();
     static itkFixedArrayUC4 const max();
     static itkFixedArrayUC4 const min();
     static itkFixedArrayUC4 const NonpositiveMin();
     static itkFixedArrayUC4 const ZeroValue();
     static itkFixedArrayUC4 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAUC6 {
   public:
     ~itkNumericTraitsFAUC6();
     itkNumericTraitsFAUC6 & operator=(itkNumericTraitsFAUC6 const & arg0);
     itkNumericTraitsFAUC6(itkNumericTraitsFAUC6 const & arg0);
     itkNumericTraitsFAUC6();
     static itkFixedArrayUC6 const max();
     static itkFixedArrayUC6 const min();
     static itkFixedArrayUC6 const NonpositiveMin();
     static itkFixedArrayUC6 const ZeroValue();
     static itkFixedArrayUC6 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAUI1 {
   public:
     ~itkNumericTraitsFAUI1();
     itkNumericTraitsFAUI1 & operator=(itkNumericTraitsFAUI1 const & arg0);
     itkNumericTraitsFAUI1(itkNumericTraitsFAUI1 const & arg0);
     itkNumericTraitsFAUI1();
     static itkFixedArrayUI1 const max();
     static itkFixedArrayUI1 const min();
     static itkFixedArrayUI1 const NonpositiveMin();
     static itkFixedArrayUI1 const ZeroValue();
     static itkFixedArrayUI1 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAUI2 {
   public:
     ~itkNumericTraitsFAUI2();
     itkNumericTraitsFAUI2 & operator=(itkNumericTraitsFAUI2 const & arg0);
     itkNumericTraitsFAUI2(itkNumericTraitsFAUI2 const & arg0);
     itkNumericTraitsFAUI2();
     static itkFixedArrayUI2 const max();
     static itkFixedArrayUI2 const min();
     static itkFixedArrayUI2 const NonpositiveMin();
     static itkFixedArrayUI2 const ZeroValue();
     static itkFixedArrayUI2 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAUI3 {
   public:
     ~itkNumericTraitsFAUI3();
     itkNumericTraitsFAUI3 & operator=(itkNumericTraitsFAUI3 const & arg0);
     itkNumericTraitsFAUI3(itkNumericTraitsFAUI3 const & arg0);
     itkNumericTraitsFAUI3();
     static itkFixedArrayUI3 const max();
     static itkFixedArrayUI3 const min();
     static itkFixedArrayUI3 const NonpositiveMin();
     static itkFixedArrayUI3 const ZeroValue();
     static itkFixedArrayUI3 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAUI4 {
   public:
     ~itkNumericTraitsFAUI4();
     itkNumericTraitsFAUI4 & operator=(itkNumericTraitsFAUI4 const & arg0);
     itkNumericTraitsFAUI4(itkNumericTraitsFAUI4 const & arg0);
     itkNumericTraitsFAUI4();
     static itkFixedArrayUI4 const max();
     static itkFixedArrayUI4 const min();
     static itkFixedArrayUI4 const NonpositiveMin();
     static itkFixedArrayUI4 const ZeroValue();
     static itkFixedArrayUI4 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAUI6 {
   public:
     ~itkNumericTraitsFAUI6();
     itkNumericTraitsFAUI6 & operator=(itkNumericTraitsFAUI6 const & arg0);
     itkNumericTraitsFAUI6(itkNumericTraitsFAUI6 const & arg0);
     itkNumericTraitsFAUI6();
     static itkFixedArrayUI6 const max();
     static itkFixedArrayUI6 const min();
     static itkFixedArrayUI6 const NonpositiveMin();
     static itkFixedArrayUI6 const ZeroValue();
     static itkFixedArrayUI6 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAUL1 {
   public:
     ~itkNumericTraitsFAUL1();
     itkNumericTraitsFAUL1 & operator=(itkNumericTraitsFAUL1 const & arg0);
     itkNumericTraitsFAUL1(itkNumericTraitsFAUL1 const & arg0);
     itkNumericTraitsFAUL1();
     static itkFixedArrayUL1 const max();
     static itkFixedArrayUL1 const min();
     static itkFixedArrayUL1 const NonpositiveMin();
     static itkFixedArrayUL1 const ZeroValue();
     static itkFixedArrayUL1 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAUL2 {
   public:
     ~itkNumericTraitsFAUL2();
     itkNumericTraitsFAUL2 & operator=(itkNumericTraitsFAUL2 const & arg0);
     itkNumericTraitsFAUL2(itkNumericTraitsFAUL2 const & arg0);
     itkNumericTraitsFAUL2();
     static itkFixedArrayUL2 const max();
     static itkFixedArrayUL2 const min();
     static itkFixedArrayUL2 const NonpositiveMin();
     static itkFixedArrayUL2 const ZeroValue();
     static itkFixedArrayUL2 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAUL3 {
   public:
     ~itkNumericTraitsFAUL3();
     itkNumericTraitsFAUL3 & operator=(itkNumericTraitsFAUL3 const & arg0);
     itkNumericTraitsFAUL3(itkNumericTraitsFAUL3 const & arg0);
     itkNumericTraitsFAUL3();
     static itkFixedArrayUL3 const max();
     static itkFixedArrayUL3 const min();
     static itkFixedArrayUL3 const NonpositiveMin();
     static itkFixedArrayUL3 const ZeroValue();
     static itkFixedArrayUL3 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAUL4 {
   public:
     ~itkNumericTraitsFAUL4();
     itkNumericTraitsFAUL4 & operator=(itkNumericTraitsFAUL4 const & arg0);
     itkNumericTraitsFAUL4(itkNumericTraitsFAUL4 const & arg0);
     itkNumericTraitsFAUL4();
     static itkFixedArrayUL4 const max();
     static itkFixedArrayUL4 const min();
     static itkFixedArrayUL4 const NonpositiveMin();
     static itkFixedArrayUL4 const ZeroValue();
     static itkFixedArrayUL4 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAUL6 {
   public:
     ~itkNumericTraitsFAUL6();
     itkNumericTraitsFAUL6 & operator=(itkNumericTraitsFAUL6 const & arg0);
     itkNumericTraitsFAUL6(itkNumericTraitsFAUL6 const & arg0);
     itkNumericTraitsFAUL6();
     static itkFixedArrayUL6 const max();
     static itkFixedArrayUL6 const min();
     static itkFixedArrayUL6 const NonpositiveMin();
     static itkFixedArrayUL6 const ZeroValue();
     static itkFixedArrayUL6 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAUS1 {
   public:
     ~itkNumericTraitsFAUS1();
     itkNumericTraitsFAUS1 & operator=(itkNumericTraitsFAUS1 const & arg0);
     itkNumericTraitsFAUS1(itkNumericTraitsFAUS1 const & arg0);
     itkNumericTraitsFAUS1();
     static itkFixedArrayUS1 const max();
     static itkFixedArrayUS1 const min();
     static itkFixedArrayUS1 const NonpositiveMin();
     static itkFixedArrayUS1 const ZeroValue();
     static itkFixedArrayUS1 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAUS2 {
   public:
     ~itkNumericTraitsFAUS2();
     itkNumericTraitsFAUS2 & operator=(itkNumericTraitsFAUS2 const & arg0);
     itkNumericTraitsFAUS2(itkNumericTraitsFAUS2 const & arg0);
     itkNumericTraitsFAUS2();
     static itkFixedArrayUS2 const max();
     static itkFixedArrayUS2 const min();
     static itkFixedArrayUS2 const NonpositiveMin();
     static itkFixedArrayUS2 const ZeroValue();
     static itkFixedArrayUS2 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAUS3 {
   public:
     ~itkNumericTraitsFAUS3();
     itkNumericTraitsFAUS3 & operator=(itkNumericTraitsFAUS3 const & arg0);
     itkNumericTraitsFAUS3(itkNumericTraitsFAUS3 const & arg0);
     itkNumericTraitsFAUS3();
     static itkFixedArrayUS3 const max();
     static itkFixedArrayUS3 const min();
     static itkFixedArrayUS3 const NonpositiveMin();
     static itkFixedArrayUS3 const ZeroValue();
     static itkFixedArrayUS3 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAUS4 {
   public:
     ~itkNumericTraitsFAUS4();
     itkNumericTraitsFAUS4 & operator=(itkNumericTraitsFAUS4 const & arg0);
     itkNumericTraitsFAUS4(itkNumericTraitsFAUS4 const & arg0);
     itkNumericTraitsFAUS4();
     static itkFixedArrayUS4 const max();
     static itkFixedArrayUS4 const min();
     static itkFixedArrayUS4 const NonpositiveMin();
     static itkFixedArrayUS4 const ZeroValue();
     static itkFixedArrayUS4 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsFAUS6 {
   public:
     ~itkNumericTraitsFAUS6();
     itkNumericTraitsFAUS6 & operator=(itkNumericTraitsFAUS6 const & arg0);
     itkNumericTraitsFAUS6(itkNumericTraitsFAUS6 const & arg0);
     itkNumericTraitsFAUS6();
     static itkFixedArrayUS6 const max();
     static itkFixedArrayUS6 const min();
     static itkFixedArrayUS6 const NonpositiveMin();
     static itkFixedArrayUS6 const ZeroValue();
     static itkFixedArrayUS6 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsRGBAUS {
   public:
     ~itkNumericTraitsRGBAUS();
     itkNumericTraitsRGBAUS & operator=(itkNumericTraitsRGBAUS const & arg0);
     itkNumericTraitsRGBAUS(itkNumericTraitsRGBAUS const & arg0);
     itkNumericTraitsRGBAUS();
     static itkRGBAPixelUS const max(itkRGBAPixelUS const & arg0);
     static itkRGBAPixelUS const min(itkRGBAPixelUS const & arg0);
     static itkRGBAPixelUS const max();
     static itkRGBAPixelUS const min();
     static itkRGBAPixelUS const NonpositiveMin();
     static itkRGBAPixelUS const ZeroValue();
     static itkRGBAPixelUS const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsRGBUS {
   public:
     ~itkNumericTraitsRGBUS();
     itkNumericTraitsRGBUS & operator=(itkNumericTraitsRGBUS const & arg0);
     itkNumericTraitsRGBUS(itkNumericTraitsRGBUS const & arg0);
     itkNumericTraitsRGBUS();
     static itkRGBPixelUS const max(itkRGBPixelUS const & arg0);
     static itkRGBPixelUS const min(itkRGBPixelUS const & arg0);
     static itkRGBPixelUS const max();
     static itkRGBPixelUS const min();
     static itkRGBPixelUS const NonpositiveMin();
     static itkRGBPixelUS const ZeroValue();
     static itkRGBPixelUS const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsVD1 {
   public:
     ~itkNumericTraitsVD1();
     itkNumericTraitsVD1 & operator=(itkNumericTraitsVD1 const & arg0);
     itkNumericTraitsVD1(itkNumericTraitsVD1 const & arg0);
     itkNumericTraitsVD1();
     static itkVectorD1 const max();
     static itkVectorD1 const min();
     static itkVectorD1 const NonpositiveMin();
     static itkVectorD1 const ZeroValue();
     static itkVectorD1 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsVD2 {
   public:
     ~itkNumericTraitsVD2();
     itkNumericTraitsVD2 & operator=(itkNumericTraitsVD2 const & arg0);
     itkNumericTraitsVD2(itkNumericTraitsVD2 const & arg0);
     itkNumericTraitsVD2();
     static itkVectorD2 const max();
     static itkVectorD2 const min();
     static itkVectorD2 const NonpositiveMin();
     static itkVectorD2 const ZeroValue();
     static itkVectorD2 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsVD3 {
   public:
     ~itkNumericTraitsVD3();
     itkNumericTraitsVD3 & operator=(itkNumericTraitsVD3 const & arg0);
     itkNumericTraitsVD3(itkNumericTraitsVD3 const & arg0);
     itkNumericTraitsVD3();
     static itkVectorD3 const max();
     static itkVectorD3 const min();
     static itkVectorD3 const NonpositiveMin();
     static itkVectorD3 const ZeroValue();
     static itkVectorD3 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsVD6 {
   public:
     ~itkNumericTraitsVD6();
     itkNumericTraitsVD6 & operator=(itkNumericTraitsVD6 const & arg0);
     itkNumericTraitsVD6(itkNumericTraitsVD6 const & arg0);
     itkNumericTraitsVD6();
     static itkVectorD6 const max();
     static itkVectorD6 const min();
     static itkVectorD6 const NonpositiveMin();
     static itkVectorD6 const ZeroValue();
     static itkVectorD6 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsVF1 {
   public:
     ~itkNumericTraitsVF1();
     itkNumericTraitsVF1 & operator=(itkNumericTraitsVF1 const & arg0);
     itkNumericTraitsVF1(itkNumericTraitsVF1 const & arg0);
     itkNumericTraitsVF1();
     static itkVectorF1 const max();
     static itkVectorF1 const min();
     static itkVectorF1 const NonpositiveMin();
     static itkVectorF1 const ZeroValue();
     static itkVectorF1 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsVF2 {
   public:
     ~itkNumericTraitsVF2();
     itkNumericTraitsVF2 & operator=(itkNumericTraitsVF2 const & arg0);
     itkNumericTraitsVF2(itkNumericTraitsVF2 const & arg0);
     itkNumericTraitsVF2();
     static itkVectorF2 const max();
     static itkVectorF2 const min();
     static itkVectorF2 const NonpositiveMin();
     static itkVectorF2 const ZeroValue();
     static itkVectorF2 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsVF3 {
   public:
     ~itkNumericTraitsVF3();
     itkNumericTraitsVF3 & operator=(itkNumericTraitsVF3 const & arg0);
     itkNumericTraitsVF3(itkNumericTraitsVF3 const & arg0);
     itkNumericTraitsVF3();
     static itkVectorF3 const max();
     static itkVectorF3 const min();
     static itkVectorF3 const NonpositiveMin();
     static itkVectorF3 const ZeroValue();
     static itkVectorF3 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsVF6 {
   public:
     ~itkNumericTraitsVF6();
     itkNumericTraitsVF6 & operator=(itkNumericTraitsVF6 const & arg0);
     itkNumericTraitsVF6(itkNumericTraitsVF6 const & arg0);
     itkNumericTraitsVF6();
     static itkVectorF6 const max();
     static itkVectorF6 const min();
     static itkVectorF6 const NonpositiveMin();
     static itkVectorF6 const ZeroValue();
     static itkVectorF6 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsVLVD {
   public:
     ~itkNumericTraitsVLVD();
     itkNumericTraitsVLVD & operator=(itkNumericTraitsVLVD const & arg0);
     itkNumericTraitsVLVD(itkNumericTraitsVLVD const & arg0);
     itkNumericTraitsVLVD();
     static itkVariableLengthVectorD const max(itkVariableLengthVectorD const & a);
     static itkVariableLengthVectorD const min(itkVariableLengthVectorD const & a);
     static itkVariableLengthVectorD const Zero(itkVariableLengthVectorD const & a);
     static itkVariableLengthVectorD const One(itkVariableLengthVectorD const & a);
   private:
   protected:
 };


 class itkNumericTraitsVLVF {
   public:
     ~itkNumericTraitsVLVF();
     itkNumericTraitsVLVF & operator=(itkNumericTraitsVLVF const & arg0);
     itkNumericTraitsVLVF(itkNumericTraitsVLVF const & arg0);
     itkNumericTraitsVLVF();
     static itkVariableLengthVectorF const max(itkVariableLengthVectorF const & a);
     static itkVariableLengthVectorF const min(itkVariableLengthVectorF const & a);
     static itkVariableLengthVectorF const Zero(itkVariableLengthVectorF const & a);
     static itkVariableLengthVectorF const One(itkVariableLengthVectorF const & a);
   private:
   protected:
 };


 class itkNumericTraitsVLVUC {
   public:
     ~itkNumericTraitsVLVUC();
     itkNumericTraitsVLVUC & operator=(itkNumericTraitsVLVUC const & arg0);
     itkNumericTraitsVLVUC(itkNumericTraitsVLVUC const & arg0);
     itkNumericTraitsVLVUC();
     static itkVariableLengthVectorUC const max(itkVariableLengthVectorUC const & a);
     static itkVariableLengthVectorUC const min(itkVariableLengthVectorUC const & a);
     static itkVariableLengthVectorUC const Zero(itkVariableLengthVectorUC const & a);
     static itkVariableLengthVectorUC const One(itkVariableLengthVectorUC const & a);
   private:
   protected:
 };


 class itkNumericTraitsVLVUL {
   public:
     ~itkNumericTraitsVLVUL();
     itkNumericTraitsVLVUL & operator=(itkNumericTraitsVLVUL const & arg0);
     itkNumericTraitsVLVUL(itkNumericTraitsVLVUL const & arg0);
     itkNumericTraitsVLVUL();
     static itkVariableLengthVectorUL const max(itkVariableLengthVectorUL const & a);
     static itkVariableLengthVectorUL const min(itkVariableLengthVectorUL const & a);
     static itkVariableLengthVectorUL const Zero(itkVariableLengthVectorUL const & a);
     static itkVariableLengthVectorUL const One(itkVariableLengthVectorUL const & a);
   private:
   protected:
 };


 class itkNumericTraitsVLVUS {
   public:
     ~itkNumericTraitsVLVUS();
     itkNumericTraitsVLVUS & operator=(itkNumericTraitsVLVUS const & arg0);
     itkNumericTraitsVLVUS(itkNumericTraitsVLVUS const & arg0);
     itkNumericTraitsVLVUS();
     static itkVariableLengthVectorUS const max(itkVariableLengthVectorUS const & a);
     static itkVariableLengthVectorUS const min(itkVariableLengthVectorUS const & a);
     static itkVariableLengthVectorUS const Zero(itkVariableLengthVectorUS const & a);
     static itkVariableLengthVectorUS const One(itkVariableLengthVectorUS const & a);
   private:
   protected:
 };


 class itkNumericTraitsVUC1 {
   public:
     ~itkNumericTraitsVUC1();
     itkNumericTraitsVUC1 & operator=(itkNumericTraitsVUC1 const & arg0);
     itkNumericTraitsVUC1(itkNumericTraitsVUC1 const & arg0);
     itkNumericTraitsVUC1();
     static itkVectorUC1 const max();
     static itkVectorUC1 const min();
     static itkVectorUC1 const NonpositiveMin();
     static itkVectorUC1 const ZeroValue();
     static itkVectorUC1 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsVUC2 {
   public:
     ~itkNumericTraitsVUC2();
     itkNumericTraitsVUC2 & operator=(itkNumericTraitsVUC2 const & arg0);
     itkNumericTraitsVUC2(itkNumericTraitsVUC2 const & arg0);
     itkNumericTraitsVUC2();
     static itkVectorUC2 const max();
     static itkVectorUC2 const min();
     static itkVectorUC2 const NonpositiveMin();
     static itkVectorUC2 const ZeroValue();
     static itkVectorUC2 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsVUC3 {
   public:
     ~itkNumericTraitsVUC3();
     itkNumericTraitsVUC3 & operator=(itkNumericTraitsVUC3 const & arg0);
     itkNumericTraitsVUC3(itkNumericTraitsVUC3 const & arg0);
     itkNumericTraitsVUC3();
     static itkVectorUC3 const max();
     static itkVectorUC3 const min();
     static itkVectorUC3 const NonpositiveMin();
     static itkVectorUC3 const ZeroValue();
     static itkVectorUC3 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsVUC6 {
   public:
     ~itkNumericTraitsVUC6();
     itkNumericTraitsVUC6 & operator=(itkNumericTraitsVUC6 const & arg0);
     itkNumericTraitsVUC6(itkNumericTraitsVUC6 const & arg0);
     itkNumericTraitsVUC6();
     static itkVectorUC6 const max();
     static itkVectorUC6 const min();
     static itkVectorUC6 const NonpositiveMin();
     static itkVectorUC6 const ZeroValue();
     static itkVectorUC6 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsVUL1 {
   public:
     ~itkNumericTraitsVUL1();
     itkNumericTraitsVUL1 & operator=(itkNumericTraitsVUL1 const & arg0);
     itkNumericTraitsVUL1(itkNumericTraitsVUL1 const & arg0);
     itkNumericTraitsVUL1();
     static itkVectorUL1 const max();
     static itkVectorUL1 const min();
     static itkVectorUL1 const NonpositiveMin();
     static itkVectorUL1 const ZeroValue();
     static itkVectorUL1 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsVUL2 {
   public:
     ~itkNumericTraitsVUL2();
     itkNumericTraitsVUL2 & operator=(itkNumericTraitsVUL2 const & arg0);
     itkNumericTraitsVUL2(itkNumericTraitsVUL2 const & arg0);
     itkNumericTraitsVUL2();
     static itkVectorUL2 const max();
     static itkVectorUL2 const min();
     static itkVectorUL2 const NonpositiveMin();
     static itkVectorUL2 const ZeroValue();
     static itkVectorUL2 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsVUL3 {
   public:
     ~itkNumericTraitsVUL3();
     itkNumericTraitsVUL3 & operator=(itkNumericTraitsVUL3 const & arg0);
     itkNumericTraitsVUL3(itkNumericTraitsVUL3 const & arg0);
     itkNumericTraitsVUL3();
     static itkVectorUL3 const max();
     static itkVectorUL3 const min();
     static itkVectorUL3 const NonpositiveMin();
     static itkVectorUL3 const ZeroValue();
     static itkVectorUL3 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsVUL6 {
   public:
     ~itkNumericTraitsVUL6();
     itkNumericTraitsVUL6 & operator=(itkNumericTraitsVUL6 const & arg0);
     itkNumericTraitsVUL6(itkNumericTraitsVUL6 const & arg0);
     itkNumericTraitsVUL6();
     static itkVectorUL6 const max();
     static itkVectorUL6 const min();
     static itkVectorUL6 const NonpositiveMin();
     static itkVectorUL6 const ZeroValue();
     static itkVectorUL6 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsVUS1 {
   public:
     ~itkNumericTraitsVUS1();
     itkNumericTraitsVUS1 & operator=(itkNumericTraitsVUS1 const & arg0);
     itkNumericTraitsVUS1(itkNumericTraitsVUS1 const & arg0);
     itkNumericTraitsVUS1();
     static itkVectorUS1 const max();
     static itkVectorUS1 const min();
     static itkVectorUS1 const NonpositiveMin();
     static itkVectorUS1 const ZeroValue();
     static itkVectorUS1 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsVUS2 {
   public:
     ~itkNumericTraitsVUS2();
     itkNumericTraitsVUS2 & operator=(itkNumericTraitsVUS2 const & arg0);
     itkNumericTraitsVUS2(itkNumericTraitsVUS2 const & arg0);
     itkNumericTraitsVUS2();
     static itkVectorUS2 const max();
     static itkVectorUS2 const min();
     static itkVectorUS2 const NonpositiveMin();
     static itkVectorUS2 const ZeroValue();
     static itkVectorUS2 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsVUS3 {
   public:
     ~itkNumericTraitsVUS3();
     itkNumericTraitsVUS3 & operator=(itkNumericTraitsVUS3 const & arg0);
     itkNumericTraitsVUS3(itkNumericTraitsVUS3 const & arg0);
     itkNumericTraitsVUS3();
     static itkVectorUS3 const max();
     static itkVectorUS3 const min();
     static itkVectorUS3 const NonpositiveMin();
     static itkVectorUS3 const ZeroValue();
     static itkVectorUS3 const OneValue();
   private:
   protected:
 };


 class itkNumericTraitsVUS6 {
   public:
     ~itkNumericTraitsVUS6();
     itkNumericTraitsVUS6 & operator=(itkNumericTraitsVUS6 const & arg0);
     itkNumericTraitsVUS6(itkNumericTraitsVUS6 const & arg0);
     itkNumericTraitsVUS6();
     static itkVectorUS6 const max();
     static itkVectorUS6 const min();
     static itkVectorUS6 const NonpositiveMin();
     static itkVectorUS6 const ZeroValue();
     static itkVectorUS6 const OneValue();
   private:
   protected:
 };


 class vcl_numeric_limitsB {
   public:
     ~vcl_numeric_limitsB();
     vcl_numeric_limitsB & operator=(vcl_numeric_limitsB const & arg0);
     vcl_numeric_limitsB(vcl_numeric_limitsB const & arg0);
     vcl_numeric_limitsB();
     static bool min();
     static bool max();
     static bool epsilon();
     static bool round_error();
     static bool infinity();
     static bool quiet_NaN();
     static bool signaling_NaN();
     static bool denorm_min();
   private:
   protected:
 };


 class vcl_numeric_limitsD {
   public:
     ~vcl_numeric_limitsD();
     vcl_numeric_limitsD & operator=(vcl_numeric_limitsD const & arg0);
     vcl_numeric_limitsD(vcl_numeric_limitsD const & arg0);
     vcl_numeric_limitsD();
     static double min();
     static double max();
     static double epsilon();
     static double round_error();
     static double infinity();
     static double quiet_NaN();
     static double signaling_NaN();
     static double denorm_min();
   private:
   protected:
 };


 class vcl_numeric_limitsF {
   public:
     ~vcl_numeric_limitsF();
     vcl_numeric_limitsF & operator=(vcl_numeric_limitsF const & arg0);
     vcl_numeric_limitsF(vcl_numeric_limitsF const & arg0);
     vcl_numeric_limitsF();
     static float min();
     static float max();
     static float epsilon();
     static float round_error();
     static float infinity();
     static float quiet_NaN();
     static float signaling_NaN();
     static float denorm_min();
   private:
   protected:
 };


 class vcl_numeric_limitsLD {
   public:
     ~vcl_numeric_limitsLD();
     vcl_numeric_limitsLD & operator=(vcl_numeric_limitsLD const & arg0);
     vcl_numeric_limitsLD(vcl_numeric_limitsLD const & arg0);
     vcl_numeric_limitsLD();
     static long double min();
     static long double max();
     static long double epsilon();
     static long double round_error();
     static long double infinity();
     static long double quiet_NaN();
     static long double signaling_NaN();
     static long double denorm_min();
   private:
   protected:
 };


 class vcl_numeric_limitsSC {
   public:
     ~vcl_numeric_limitsSC();
     vcl_numeric_limitsSC & operator=(vcl_numeric_limitsSC const & arg0);
     vcl_numeric_limitsSC(vcl_numeric_limitsSC const & arg0);
     vcl_numeric_limitsSC();
     static signed char min();
     static signed char max();
     static signed char epsilon();
     static signed char round_error();
     static signed char infinity();
     static signed char quiet_NaN();
     static signed char signaling_NaN();
     static signed char denorm_min();
   private:
   protected:
 };


 class vcl_numeric_limitsSI {
   public:
     ~vcl_numeric_limitsSI();
     vcl_numeric_limitsSI & operator=(vcl_numeric_limitsSI const & arg0);
     vcl_numeric_limitsSI(vcl_numeric_limitsSI const & arg0);
     vcl_numeric_limitsSI();
     static int min();
     static int max();
     static int epsilon();
     static int round_error();
     static int infinity();
     static int quiet_NaN();
     static int signaling_NaN();
     static int denorm_min();
   private:
   protected:
 };


 class vcl_numeric_limitsSL {
   public:
     ~vcl_numeric_limitsSL();
     vcl_numeric_limitsSL & operator=(vcl_numeric_limitsSL const & arg0);
     vcl_numeric_limitsSL(vcl_numeric_limitsSL const & arg0);
     vcl_numeric_limitsSL();
     static long min();
     static long max();
     static long epsilon();
     static long round_error();
     static long infinity();
     static long quiet_NaN();
     static long signaling_NaN();
     static long denorm_min();
   private:
   protected:
 };


 class vcl_numeric_limitsSS {
   public:
     ~vcl_numeric_limitsSS();
     vcl_numeric_limitsSS & operator=(vcl_numeric_limitsSS const & arg0);
     vcl_numeric_limitsSS(vcl_numeric_limitsSS const & arg0);
     vcl_numeric_limitsSS();
     static short min();
     static short max();
     static short epsilon();
     static short round_error();
     static short infinity();
     static short quiet_NaN();
     static short signaling_NaN();
     static short denorm_min();
   private:
   protected:
 };


 class vcl_numeric_limitsUC {
   public:
     ~vcl_numeric_limitsUC();
     vcl_numeric_limitsUC & operator=(vcl_numeric_limitsUC const & arg0);
     vcl_numeric_limitsUC(vcl_numeric_limitsUC const & arg0);
     vcl_numeric_limitsUC();
     static unsigned char min();
     static unsigned char max();
     static unsigned char epsilon();
     static unsigned char round_error();
     static unsigned char infinity();
     static unsigned char quiet_NaN();
     static unsigned char signaling_NaN();
     static unsigned char denorm_min();
   private:
   protected:
 };


 class vcl_numeric_limitsUI {
   public:
     ~vcl_numeric_limitsUI();
     vcl_numeric_limitsUI & operator=(vcl_numeric_limitsUI const & arg0);
     vcl_numeric_limitsUI(vcl_numeric_limitsUI const & arg0);
     vcl_numeric_limitsUI();
     static unsigned int min();
     static unsigned int max();
     static unsigned int epsilon();
     static unsigned int round_error();
     static unsigned int infinity();
     static unsigned int quiet_NaN();
     static unsigned int signaling_NaN();
     static unsigned int denorm_min();
   private:
   protected:
 };


 class vcl_numeric_limitsUL {
   public:
     ~vcl_numeric_limitsUL();
     vcl_numeric_limitsUL & operator=(vcl_numeric_limitsUL const & arg0);
     vcl_numeric_limitsUL(vcl_numeric_limitsUL const & arg0);
     vcl_numeric_limitsUL();
     static unsigned long min();
     static unsigned long max();
     static unsigned long epsilon();
     static unsigned long round_error();
     static unsigned long infinity();
     static unsigned long quiet_NaN();
     static unsigned long signaling_NaN();
     static unsigned long denorm_min();
   private:
   protected:
 };


 class vcl_numeric_limitsUS {
   public:
     ~vcl_numeric_limitsUS();
     vcl_numeric_limitsUS & operator=(vcl_numeric_limitsUS const & arg0);
     vcl_numeric_limitsUS(vcl_numeric_limitsUS const & arg0);
     vcl_numeric_limitsUS();
     static unsigned short min();
     static unsigned short max();
     static unsigned short epsilon();
     static unsigned short round_error();
     static unsigned short infinity();
     static unsigned short quiet_NaN();
     static unsigned short signaling_NaN();
     static unsigned short denorm_min();
   private:
   protected:
 };


 class itkNumericTraitsB : public vcl_numeric_limitsB {
   public:
     ~itkNumericTraitsB();
     itkNumericTraitsB & operator=(itkNumericTraitsB const & arg0);
     itkNumericTraitsB(itkNumericTraitsB const & arg0);
     itkNumericTraitsB();
     static bool min();
     static bool max();
     static bool min(bool arg0);
     static bool max(bool arg0);
     static bool NonpositiveMin();
     static bool IsPositive(bool val);
     static bool IsNonpositive(bool val);
     static bool IsNegative(bool val);
     static bool IsNonnegative(bool val);
     static bool ZeroValue();
     static bool OneValue();
   private:
   protected:
 };


 class itkNumericTraitsD : public vcl_numeric_limitsD {
   public:
     ~itkNumericTraitsD();
     itkNumericTraitsD & operator=(itkNumericTraitsD const & arg0);
     itkNumericTraitsD(itkNumericTraitsD const & arg0);
     itkNumericTraitsD();
     static double min();
     static double max();
     static double min(double arg0);
     static double max(double arg0);
     static double NonpositiveMin();
     static bool IsPositive(double val);
     static bool IsNonpositive(double val);
     static bool IsNegative(double val);
     static bool IsNonnegative(double val);
     static double ZeroValue();
     static double OneValue();
   private:
   protected:
 };


 class itkNumericTraitsF : public vcl_numeric_limitsF {
   public:
     ~itkNumericTraitsF();
     itkNumericTraitsF & operator=(itkNumericTraitsF const & arg0);
     itkNumericTraitsF(itkNumericTraitsF const & arg0);
     itkNumericTraitsF();
     static float min();
     static float max();
     static float min(float arg0);
     static float max(float arg0);
     static float NonpositiveMin();
     static bool IsPositive(float val);
     static bool IsNonpositive(float val);
     static bool IsNegative(float val);
     static bool IsNonnegative(float val);
     static float ZeroValue();
     static float OneValue();
   private:
   protected:
 };


 class itkNumericTraitsLD : public vcl_numeric_limitsLD {
   public:
     ~itkNumericTraitsLD();
     itkNumericTraitsLD & operator=(itkNumericTraitsLD const & arg0);
     itkNumericTraitsLD(itkNumericTraitsLD const & arg0);
     itkNumericTraitsLD();
     static long double min();
     static long double max();
     static long double min(long double arg0);
     static long double max(long double arg0);
     static long double NonpositiveMin();
     static bool IsPositive(long double val);
     static bool IsNonpositive(long double val);
     static bool IsNegative(long double val);
     static bool IsNonnegative(long double val);
     static long double ZeroValue();
     static long double OneValue();
   private:
   protected:
 };


 class itkNumericTraitsSC : public vcl_numeric_limitsSC {
   public:
     ~itkNumericTraitsSC();
     itkNumericTraitsSC & operator=(itkNumericTraitsSC const & arg0);
     itkNumericTraitsSC(itkNumericTraitsSC const & arg0);
     itkNumericTraitsSC();
     static signed char min();
     static signed char max();
     static signed char min(signed char arg0);
     static signed char max(signed char arg0);
     static signed char NonpositiveMin();
     static bool IsPositive(signed char val);
     static bool IsNonpositive(signed char val);
     static bool IsNegative(signed char val);
     static bool IsNonnegative(signed char val);
     static signed char ZeroValue();
     static signed char OneValue();
   private:
   protected:
 };


 class itkNumericTraitsSI : public vcl_numeric_limitsSI {
   public:
     ~itkNumericTraitsSI();
     itkNumericTraitsSI & operator=(itkNumericTraitsSI const & arg0);
     itkNumericTraitsSI(itkNumericTraitsSI const & arg0);
     itkNumericTraitsSI();
     static int min();
     static int max();
     static int min(int arg0);
     static int max(int arg0);
     static int NonpositiveMin();
     static bool IsPositive(int val);
     static bool IsNonpositive(int val);
     static bool IsNegative(int val);
     static bool IsNonnegative(int val);
     static int ZeroValue();
     static int OneValue();
   private:
   protected:
 };


 class itkNumericTraitsSL : public vcl_numeric_limitsSL {
   public:
     ~itkNumericTraitsSL();
     itkNumericTraitsSL & operator=(itkNumericTraitsSL const & arg0);
     itkNumericTraitsSL(itkNumericTraitsSL const & arg0);
     itkNumericTraitsSL();
     static long min();
     static long max();
     static long min(long arg0);
     static long max(long arg0);
     static long NonpositiveMin();
     static bool IsPositive(long val);
     static bool IsNonpositive(long val);
     static bool IsNegative(long val);
     static bool IsNonnegative(long val);
     static long ZeroValue();
     static long OneValue();
   private:
   protected:
 };


 class itkNumericTraitsSS : public vcl_numeric_limitsSS {
   public:
     ~itkNumericTraitsSS();
     itkNumericTraitsSS & operator=(itkNumericTraitsSS const & arg0);
     itkNumericTraitsSS(itkNumericTraitsSS const & arg0);
     itkNumericTraitsSS();
     static short min();
     static short max();
     static short min(short arg0);
     static short max(short arg0);
     static short NonpositiveMin();
     static bool IsPositive(short val);
     static bool IsNonpositive(short val);
     static bool IsNegative(short val);
     static bool IsNonnegative(short val);
     static short ZeroValue();
     static short OneValue();
   private:
   protected:
 };


 class itkNumericTraitsUC : public vcl_numeric_limitsUC {
   public:
     ~itkNumericTraitsUC();
     itkNumericTraitsUC & operator=(itkNumericTraitsUC const & arg0);
     itkNumericTraitsUC(itkNumericTraitsUC const & arg0);
     itkNumericTraitsUC();
     static unsigned char min();
     static unsigned char max();
     static unsigned char min(unsigned char arg0);
     static unsigned char max(unsigned char arg0);
     static unsigned char NonpositiveMin();
     static bool IsPositive(unsigned char val);
     static bool IsNonpositive(unsigned char val);
     static bool IsNegative(unsigned char val);
     static bool IsNonnegative(unsigned char val);
     static unsigned char ZeroValue();
     static unsigned char OneValue();
   private:
   protected:
 };


 class itkNumericTraitsUI : public vcl_numeric_limitsUI {
   public:
     ~itkNumericTraitsUI();
     itkNumericTraitsUI & operator=(itkNumericTraitsUI const & arg0);
     itkNumericTraitsUI(itkNumericTraitsUI const & arg0);
     itkNumericTraitsUI();
     static unsigned int min();
     static unsigned int max();
     static unsigned int min(unsigned int arg0);
     static unsigned int max(unsigned int arg0);
     static unsigned int NonpositiveMin();
     static bool IsPositive(unsigned int val);
     static bool IsNonpositive(unsigned int val);
     static bool IsNegative(unsigned int val);
     static bool IsNonnegative(unsigned int val);
     static unsigned int ZeroValue();
     static unsigned int OneValue();
   private:
   protected:
 };


 class itkNumericTraitsUL : public vcl_numeric_limitsUL {
   public:
     ~itkNumericTraitsUL();
     itkNumericTraitsUL & operator=(itkNumericTraitsUL const & arg0);
     itkNumericTraitsUL(itkNumericTraitsUL const & arg0);
     itkNumericTraitsUL();
     static unsigned long min();
     static unsigned long max();
     static unsigned long min(unsigned long arg0);
     static unsigned long max(unsigned long arg0);
     static unsigned long NonpositiveMin();
     static bool IsPositive(unsigned long val);
     static bool IsNonpositive(unsigned long val);
     static bool IsNegative(unsigned long arg0);
     static bool IsNonnegative(unsigned long arg0);
     static unsigned long ZeroValue();
     static unsigned long OneValue();
   private:
   protected:
 };


 class itkNumericTraitsUS : public vcl_numeric_limitsUS {
   public:
     ~itkNumericTraitsUS();
     itkNumericTraitsUS & operator=(itkNumericTraitsUS const & arg0);
     itkNumericTraitsUS(itkNumericTraitsUS const & arg0);
     itkNumericTraitsUS();
     static unsigned short min();
     static unsigned short max();
     static unsigned short min(unsigned short arg0);
     static unsigned short max(unsigned short arg0);
     static unsigned short NonpositiveMin();
     static bool IsPositive(unsigned short val);
     static bool IsNonpositive(unsigned short val);
     static bool IsNegative(unsigned short val);
     static bool IsNonnegative(unsigned short val);
     static unsigned short ZeroValue();
     static unsigned short OneValue();
   private:
   protected:
 };


