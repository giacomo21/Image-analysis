// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkScaleVersor3DTransformChicken
#endif
#ifdef SWIGCSHARP
%module itkScaleVersor3DTransformCsharp
#endif
#ifdef SWIGGUILE
%module itkScaleVersor3DTransformGuile
#endif
#ifdef SWIGJAVA
%module itkScaleVersor3DTransformJava
#endif
#ifdef SWIGLUA
%module itkScaleVersor3DTransformLua
#endif
#ifdef SWIGMODULA3
%module itkScaleVersor3DTransformModula3
#endif
#ifdef SWIGMZSCHEME
%module itkScaleVersor3DTransformMzscheme
#endif
#ifdef SWIGOCAML
%module itkScaleVersor3DTransformOcaml
#endif
#ifdef SWIGPERL
%module itkScaleVersor3DTransformPerl
#endif
#ifdef SWIGPERL5
%module itkScaleVersor3DTransformPerl5
#endif
#ifdef SWIGPHP
%module itkScaleVersor3DTransformPhp
#endif
#ifdef SWIGPHP4
%module itkScaleVersor3DTransformPhp4
#endif
#ifdef SWIGPHP5
%module itkScaleVersor3DTransformPhp5
#endif
#ifdef SWIGPIKE
%module itkScaleVersor3DTransformPike
#endif
#ifdef SWIGPYTHON
%module itkScaleVersor3DTransformPython
#endif
#ifdef SWIGR
%module itkScaleVersor3DTransformR
#endif
#ifdef SWIGRUBY
%module itkScaleVersor3DTransformRuby
#endif
#ifdef SWIGSEXP
%module itkScaleVersor3DTransformSexp
#endif
#ifdef SWIGTCL
%module itkScaleVersor3DTransformTcl
#endif
#ifdef SWIGXML
%module itkScaleVersor3DTransformXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
%}


%{
%}




%import wrap_itkPoint.i
%import wrap_ITKVersorRigidTransform.i
%import wrap_itkArray2D.i
%import wrap_itkVector.i
%import wrap_itkArray.i
%import wrap_itkMatrix.i
%import wrap_ITKCommonBase.i


%include itk.i
%include wrap_itkScaleVersor3DTransform_ext.i


 class itkScaleVersor3DTransformD : public itkVersorRigid3DTransformD {
   public:
     enum  {  InputSpaceDimension = 3 };
     enum  {  OutputSpaceDimension = 3 };
     enum  {  ParametersDimension = 9 };
     static itkScaleVersor3DTransformD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetMatrix(itkMatrixD33 const & matrix);
     virtual void SetParameters(itkArrayD const & parameters);
     virtual itkArrayD const & GetParameters() const;
     void SetScale(itkVectorD3 const & scale);
     virtual itkVectorD3 const & GetScale() const;
     virtual void SetIdentity();
     virtual itkArray2DD const & GetJacobian(itkPointD3 const & point) const;
   private:
     itkScaleVersor3DTransformD(itkScaleVersor3DTransformD const & arg0);
     void operator=(itkScaleVersor3DTransformD const & arg0);
   protected:
     itkScaleVersor3DTransformD();
     itkScaleVersor3DTransformD(itkMatrixD33 const & matrix, itkVectorD3 const & offset);
     itkScaleVersor3DTransformD(unsigned int outputDims, unsigned int paramDims);
     ~itkScaleVersor3DTransformD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     void SetVarScale(itkVectorD3 const & scale);
     virtual void ComputeMatrix();
     virtual void ComputeMatrixParameters();
 };


 class itkScaleVersor3DTransformD_Pointer {
   public:
     itkScaleVersor3DTransformD_Pointer();
     itkScaleVersor3DTransformD_Pointer(itkScaleVersor3DTransformD_Pointer const & p);
     itkScaleVersor3DTransformD_Pointer(itkScaleVersor3DTransformD * p);
     ~itkScaleVersor3DTransformD_Pointer();
     itkScaleVersor3DTransformD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkScaleVersor3DTransformD * GetPointer() const;
     bool operator<(itkScaleVersor3DTransformD_Pointer const & r) const;
     bool operator>(itkScaleVersor3DTransformD_Pointer const & r) const;
     bool operator<=(itkScaleVersor3DTransformD_Pointer const & r) const;
     bool operator>=(itkScaleVersor3DTransformD_Pointer const & r) const;
     itkScaleVersor3DTransformD_Pointer & operator=(itkScaleVersor3DTransformD_Pointer const & r);
     itkScaleVersor3DTransformD_Pointer & operator=(itkScaleVersor3DTransformD * r);
     itkScaleVersor3DTransformD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


