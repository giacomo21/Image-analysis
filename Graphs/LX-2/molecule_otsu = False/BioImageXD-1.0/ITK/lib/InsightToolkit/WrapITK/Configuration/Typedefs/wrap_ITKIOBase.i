// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module ITKIOBaseChicken
#endif
#ifdef SWIGCSHARP
%module ITKIOBaseCsharp
#endif
#ifdef SWIGGUILE
%module ITKIOBaseGuile
#endif
#ifdef SWIGJAVA
%module ITKIOBaseJava
#endif
#ifdef SWIGLUA
%module ITKIOBaseLua
#endif
#ifdef SWIGMODULA3
%module ITKIOBaseModula3
#endif
#ifdef SWIGMZSCHEME
%module ITKIOBaseMzscheme
#endif
#ifdef SWIGOCAML
%module ITKIOBaseOcaml
#endif
#ifdef SWIGPERL
%module ITKIOBasePerl
#endif
#ifdef SWIGPERL5
%module ITKIOBasePerl5
#endif
#ifdef SWIGPHP
%module ITKIOBasePhp
#endif
#ifdef SWIGPHP4
%module ITKIOBasePhp4
#endif
#ifdef SWIGPHP5
%module ITKIOBasePhp5
#endif
#ifdef SWIGPIKE
%module ITKIOBasePike
#endif
#ifdef SWIGPYTHON
%module ITKIOBasePython
#endif
#ifdef SWIGR
%module ITKIOBaseR
#endif
#ifdef SWIGRUBY
%module ITKIOBaseRuby
#endif
#ifdef SWIGSEXP
%module ITKIOBaseSexp
#endif
#ifdef SWIGTCL
%module ITKIOBaseTcl
#endif
#ifdef SWIGXML
%module ITKIOBaseXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
#include "IO.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_vnl_vector.i
%import wrap_ITKRegions.i
%import wrap_itkTransform.i


%include itk.i
%include wrap_ITKIOBase_ext.i


 class itkAnalyzeImageIOFactory : public itkObjectFactoryBase {
   public:
     virtual char const * GetITKSourceVersion() const;
     virtual char const * GetDescription() const;
     static itkAnalyzeImageIOFactory_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     static void RegisterOneFactory();
   private:
     itkAnalyzeImageIOFactory(itkAnalyzeImageIOFactory const & arg0);
     void operator=(itkAnalyzeImageIOFactory const & arg0);
   protected:
     itkAnalyzeImageIOFactory();
     ~itkAnalyzeImageIOFactory();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkAnalyzeImageIOFactory_Pointer {
   public:
     itkAnalyzeImageIOFactory_Pointer();
     itkAnalyzeImageIOFactory_Pointer(itkAnalyzeImageIOFactory_Pointer const & p);
     itkAnalyzeImageIOFactory_Pointer(itkAnalyzeImageIOFactory * p);
     ~itkAnalyzeImageIOFactory_Pointer();
     itkAnalyzeImageIOFactory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkAnalyzeImageIOFactory * GetPointer() const;
     bool operator<(itkAnalyzeImageIOFactory_Pointer const & r) const;
     bool operator>(itkAnalyzeImageIOFactory_Pointer const & r) const;
     bool operator<=(itkAnalyzeImageIOFactory_Pointer const & r) const;
     bool operator>=(itkAnalyzeImageIOFactory_Pointer const & r) const;
     itkAnalyzeImageIOFactory_Pointer & operator=(itkAnalyzeImageIOFactory_Pointer const & r);
     itkAnalyzeImageIOFactory_Pointer & operator=(itkAnalyzeImageIOFactory * r);
     itkAnalyzeImageIOFactory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkAnalyzeImageIO_Pointer {
   public:
     itkAnalyzeImageIO_Pointer();
     itkAnalyzeImageIO_Pointer(itkAnalyzeImageIO_Pointer const & p);
     itkAnalyzeImageIO_Pointer(itkAnalyzeImageIO * p);
     ~itkAnalyzeImageIO_Pointer();
     itkAnalyzeImageIO * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkAnalyzeImageIO * GetPointer() const;
     bool operator<(itkAnalyzeImageIO_Pointer const & r) const;
     bool operator>(itkAnalyzeImageIO_Pointer const & r) const;
     bool operator<=(itkAnalyzeImageIO_Pointer const & r) const;
     bool operator>=(itkAnalyzeImageIO_Pointer const & r) const;
     itkAnalyzeImageIO_Pointer & operator=(itkAnalyzeImageIO_Pointer const & r);
     itkAnalyzeImageIO_Pointer & operator=(itkAnalyzeImageIO * r);
     itkAnalyzeImageIO * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkArchetypeSeriesFileNames : public itkObject {
   public:
     static itkArchetypeSeriesFileNames_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetArchetype(std::string const & archetype);
     virtual char const * GetArchetype() const;
     size_t GetNumberOfGroupings();
     std::vector< std::string > const & GetFileNames(size_t group = 0);
   private:
     itkArchetypeSeriesFileNames(itkArchetypeSeriesFileNames const & arg0);
     void operator=(itkArchetypeSeriesFileNames const & arg0);
   protected:
     itkArchetypeSeriesFileNames();
     ~itkArchetypeSeriesFileNames();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     void Scan();
 };


 class itkArchetypeSeriesFileNames_Pointer {
   public:
     itkArchetypeSeriesFileNames_Pointer();
     itkArchetypeSeriesFileNames_Pointer(itkArchetypeSeriesFileNames_Pointer const & p);
     itkArchetypeSeriesFileNames_Pointer(itkArchetypeSeriesFileNames * p);
     ~itkArchetypeSeriesFileNames_Pointer();
     itkArchetypeSeriesFileNames * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkArchetypeSeriesFileNames * GetPointer() const;
     bool operator<(itkArchetypeSeriesFileNames_Pointer const & r) const;
     bool operator>(itkArchetypeSeriesFileNames_Pointer const & r) const;
     bool operator<=(itkArchetypeSeriesFileNames_Pointer const & r) const;
     bool operator>=(itkArchetypeSeriesFileNames_Pointer const & r) const;
     itkArchetypeSeriesFileNames_Pointer & operator=(itkArchetypeSeriesFileNames_Pointer const & r);
     itkArchetypeSeriesFileNames_Pointer & operator=(itkArchetypeSeriesFileNames * r);
     itkArchetypeSeriesFileNames * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBMPImageIOFactory : public itkObjectFactoryBase {
   public:
     virtual char const * GetITKSourceVersion() const;
     virtual char const * GetDescription() const;
     static itkBMPImageIOFactory_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     static void RegisterOneFactory();
   private:
     itkBMPImageIOFactory(itkBMPImageIOFactory const & arg0);
     void operator=(itkBMPImageIOFactory const & arg0);
   protected:
     itkBMPImageIOFactory();
     ~itkBMPImageIOFactory();
 };


 class itkBMPImageIOFactory_Pointer {
   public:
     itkBMPImageIOFactory_Pointer();
     itkBMPImageIOFactory_Pointer(itkBMPImageIOFactory_Pointer const & p);
     itkBMPImageIOFactory_Pointer(itkBMPImageIOFactory * p);
     ~itkBMPImageIOFactory_Pointer();
     itkBMPImageIOFactory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBMPImageIOFactory * GetPointer() const;
     bool operator<(itkBMPImageIOFactory_Pointer const & r) const;
     bool operator>(itkBMPImageIOFactory_Pointer const & r) const;
     bool operator<=(itkBMPImageIOFactory_Pointer const & r) const;
     bool operator>=(itkBMPImageIOFactory_Pointer const & r) const;
     itkBMPImageIOFactory_Pointer & operator=(itkBMPImageIOFactory_Pointer const & r);
     itkBMPImageIOFactory_Pointer & operator=(itkBMPImageIOFactory * r);
     itkBMPImageIOFactory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBMPImageIO_Pointer {
   public:
     itkBMPImageIO_Pointer();
     itkBMPImageIO_Pointer(itkBMPImageIO_Pointer const & p);
     itkBMPImageIO_Pointer(itkBMPImageIO * p);
     ~itkBMPImageIO_Pointer();
     itkBMPImageIO * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBMPImageIO * GetPointer() const;
     bool operator<(itkBMPImageIO_Pointer const & r) const;
     bool operator>(itkBMPImageIO_Pointer const & r) const;
     bool operator<=(itkBMPImageIO_Pointer const & r) const;
     bool operator>=(itkBMPImageIO_Pointer const & r) const;
     itkBMPImageIO_Pointer & operator=(itkBMPImageIO_Pointer const & r);
     itkBMPImageIO_Pointer & operator=(itkBMPImageIO * r);
     itkBMPImageIO * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBioRadImageIOFactory : public itkObjectFactoryBase {
   public:
     virtual char const * GetITKSourceVersion() const;
     virtual char const * GetDescription() const;
     static itkBioRadImageIOFactory_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     static void RegisterOneFactory();
   private:
     itkBioRadImageIOFactory(itkBioRadImageIOFactory const & arg0);
     void operator=(itkBioRadImageIOFactory const & arg0);
   protected:
     itkBioRadImageIOFactory();
     ~itkBioRadImageIOFactory();
 };


 class itkBioRadImageIOFactory_Pointer {
   public:
     itkBioRadImageIOFactory_Pointer();
     itkBioRadImageIOFactory_Pointer(itkBioRadImageIOFactory_Pointer const & p);
     itkBioRadImageIOFactory_Pointer(itkBioRadImageIOFactory * p);
     ~itkBioRadImageIOFactory_Pointer();
     itkBioRadImageIOFactory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBioRadImageIOFactory * GetPointer() const;
     bool operator<(itkBioRadImageIOFactory_Pointer const & r) const;
     bool operator>(itkBioRadImageIOFactory_Pointer const & r) const;
     bool operator<=(itkBioRadImageIOFactory_Pointer const & r) const;
     bool operator>=(itkBioRadImageIOFactory_Pointer const & r) const;
     itkBioRadImageIOFactory_Pointer & operator=(itkBioRadImageIOFactory_Pointer const & r);
     itkBioRadImageIOFactory_Pointer & operator=(itkBioRadImageIOFactory * r);
     itkBioRadImageIOFactory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBioRadImageIO_Pointer {
   public:
     itkBioRadImageIO_Pointer();
     itkBioRadImageIO_Pointer(itkBioRadImageIO_Pointer const & p);
     itkBioRadImageIO_Pointer(itkBioRadImageIO * p);
     ~itkBioRadImageIO_Pointer();
     itkBioRadImageIO * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBioRadImageIO * GetPointer() const;
     bool operator<(itkBioRadImageIO_Pointer const & r) const;
     bool operator>(itkBioRadImageIO_Pointer const & r) const;
     bool operator<=(itkBioRadImageIO_Pointer const & r) const;
     bool operator>=(itkBioRadImageIO_Pointer const & r) const;
     itkBioRadImageIO_Pointer & operator=(itkBioRadImageIO_Pointer const & r);
     itkBioRadImageIO_Pointer & operator=(itkBioRadImageIO * r);
     itkBioRadImageIO * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBruker2DSEQImageIOFactory : public itkObjectFactoryBase {
   public:
     virtual char const * GetITKSourceVersion() const;
     virtual char const * GetDescription() const;
     static itkBruker2DSEQImageIOFactory_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     static void RegisterOneFactory();
   private:
     itkBruker2DSEQImageIOFactory(itkBruker2DSEQImageIOFactory const & arg0);
     void operator=(itkBruker2DSEQImageIOFactory const & arg0);
   protected:
     itkBruker2DSEQImageIOFactory();
     ~itkBruker2DSEQImageIOFactory();
 };


 class itkBruker2DSEQImageIOFactory_Pointer {
   public:
     itkBruker2DSEQImageIOFactory_Pointer();
     itkBruker2DSEQImageIOFactory_Pointer(itkBruker2DSEQImageIOFactory_Pointer const & p);
     itkBruker2DSEQImageIOFactory_Pointer(itkBruker2DSEQImageIOFactory * p);
     ~itkBruker2DSEQImageIOFactory_Pointer();
     itkBruker2DSEQImageIOFactory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBruker2DSEQImageIOFactory * GetPointer() const;
     bool operator<(itkBruker2DSEQImageIOFactory_Pointer const & r) const;
     bool operator>(itkBruker2DSEQImageIOFactory_Pointer const & r) const;
     bool operator<=(itkBruker2DSEQImageIOFactory_Pointer const & r) const;
     bool operator>=(itkBruker2DSEQImageIOFactory_Pointer const & r) const;
     itkBruker2DSEQImageIOFactory_Pointer & operator=(itkBruker2DSEQImageIOFactory_Pointer const & r);
     itkBruker2DSEQImageIOFactory_Pointer & operator=(itkBruker2DSEQImageIOFactory * r);
     itkBruker2DSEQImageIOFactory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBruker2DSEQImageIO_Pointer {
   public:
     itkBruker2DSEQImageIO_Pointer();
     itkBruker2DSEQImageIO_Pointer(itkBruker2DSEQImageIO_Pointer const & p);
     itkBruker2DSEQImageIO_Pointer(itkBruker2DSEQImageIO * p);
     ~itkBruker2DSEQImageIO_Pointer();
     itkBruker2DSEQImageIO * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBruker2DSEQImageIO * GetPointer() const;
     bool operator<(itkBruker2DSEQImageIO_Pointer const & r) const;
     bool operator>(itkBruker2DSEQImageIO_Pointer const & r) const;
     bool operator<=(itkBruker2DSEQImageIO_Pointer const & r) const;
     bool operator>=(itkBruker2DSEQImageIO_Pointer const & r) const;
     itkBruker2DSEQImageIO_Pointer & operator=(itkBruker2DSEQImageIO_Pointer const & r);
     itkBruker2DSEQImageIO_Pointer & operator=(itkBruker2DSEQImageIO * r);
     itkBruker2DSEQImageIO * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDICOMImageIO2Factory : public itkObjectFactoryBase {
   public:
     virtual char const * GetITKSourceVersion() const;
     virtual char const * GetDescription() const;
     static itkDICOMImageIO2Factory_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     static void RegisterOneFactory();
   private:
     itkDICOMImageIO2Factory(itkDICOMImageIO2Factory const & arg0);
     void operator=(itkDICOMImageIO2Factory const & arg0);
   protected:
     itkDICOMImageIO2Factory();
     ~itkDICOMImageIO2Factory();
 };


 class itkDICOMImageIO2Factory_Pointer {
   public:
     itkDICOMImageIO2Factory_Pointer();
     itkDICOMImageIO2Factory_Pointer(itkDICOMImageIO2Factory_Pointer const & p);
     itkDICOMImageIO2Factory_Pointer(itkDICOMImageIO2Factory * p);
     ~itkDICOMImageIO2Factory_Pointer();
     itkDICOMImageIO2Factory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDICOMImageIO2Factory * GetPointer() const;
     bool operator<(itkDICOMImageIO2Factory_Pointer const & r) const;
     bool operator>(itkDICOMImageIO2Factory_Pointer const & r) const;
     bool operator<=(itkDICOMImageIO2Factory_Pointer const & r) const;
     bool operator>=(itkDICOMImageIO2Factory_Pointer const & r) const;
     itkDICOMImageIO2Factory_Pointer & operator=(itkDICOMImageIO2Factory_Pointer const & r);
     itkDICOMImageIO2Factory_Pointer & operator=(itkDICOMImageIO2Factory * r);
     itkDICOMImageIO2Factory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDICOMImageIO2_Pointer {
   public:
     itkDICOMImageIO2_Pointer();
     itkDICOMImageIO2_Pointer(itkDICOMImageIO2_Pointer const & p);
     itkDICOMImageIO2_Pointer(itkDICOMImageIO2 * p);
     ~itkDICOMImageIO2_Pointer();
     itkDICOMImageIO2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDICOMImageIO2 * GetPointer() const;
     bool operator<(itkDICOMImageIO2_Pointer const & r) const;
     bool operator>(itkDICOMImageIO2_Pointer const & r) const;
     bool operator<=(itkDICOMImageIO2_Pointer const & r) const;
     bool operator>=(itkDICOMImageIO2_Pointer const & r) const;
     itkDICOMImageIO2_Pointer & operator=(itkDICOMImageIO2_Pointer const & r);
     itkDICOMImageIO2_Pointer & operator=(itkDICOMImageIO2 * r);
     itkDICOMImageIO2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDICOMSeriesFileNames : public itkObject {
   public:
     enum FileNameSortingOrderType {  SortByImageNumber = 0,  SortBySliceLocation = 1,  SortByImagePositionPatient = 2 };
     static itkDICOMSeriesFileNames_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetDirectory(std::string const & dir);
     virtual char const * GetDirectory() const;
     virtual void SetAscending(bool const _arg);
     virtual bool GetAscending() const;
     virtual void AscendingOn();
     virtual void AscendingOff();
     std::vector< std::string > const & GetSeriesUIDs(bool recursive = false);
     std::vector< std::string > const & GetSeriesDescriptions();
     std::vector< std::string > const & GetSeriesBodyParts();
     std::vector< std::string > const & GetSeriesScanOptions();
     std::vector< std::string > const & GetFileNames(bool recursive = false);
     std::vector< std::string > const & GetFileNames(std::string const & seriesUID, bool recursive = false);
     virtual void SetFileNameSortingOrder(itkDICOMSeriesFileNames::FileNameSortingOrderType const _arg);
     virtual itkDICOMSeriesFileNames::FileNameSortingOrderType GetFileNameSortingOrder() const;
     void SetFileNameSortingOrderToSortByImageNumber();
     void SetFileNameSortingOrderToSortBySliceLocation();
     void SetFileNameSortingOrderToSortByImagePositionPatient();
     std::string GetFileName(std::string const & instanceUID);
   private:
     itkDICOMSeriesFileNames(itkDICOMSeriesFileNames const & arg0);
     void operator=(itkDICOMSeriesFileNames const & arg0);
     int CanReadFile(char const * fname);
     void RecurseDirectory(std::string directory, std::vector< std::string > & filenames);
   protected:
     itkDICOMSeriesFileNames();
     ~itkDICOMSeriesFileNames();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkDICOMSeriesFileNames_Pointer {
   public:
     itkDICOMSeriesFileNames_Pointer();
     itkDICOMSeriesFileNames_Pointer(itkDICOMSeriesFileNames_Pointer const & p);
     itkDICOMSeriesFileNames_Pointer(itkDICOMSeriesFileNames * p);
     ~itkDICOMSeriesFileNames_Pointer();
     itkDICOMSeriesFileNames * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDICOMSeriesFileNames * GetPointer() const;
     bool operator<(itkDICOMSeriesFileNames_Pointer const & r) const;
     bool operator>(itkDICOMSeriesFileNames_Pointer const & r) const;
     bool operator<=(itkDICOMSeriesFileNames_Pointer const & r) const;
     bool operator>=(itkDICOMSeriesFileNames_Pointer const & r) const;
     itkDICOMSeriesFileNames_Pointer & operator=(itkDICOMSeriesFileNames_Pointer const & r);
     itkDICOMSeriesFileNames_Pointer & operator=(itkDICOMSeriesFileNames * r);
     itkDICOMSeriesFileNames * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDicomImageIOFactory : public itkObjectFactoryBase {
   public:
     virtual char const * GetITKSourceVersion() const;
     virtual char const * GetDescription() const;
     static itkDicomImageIOFactory_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     static void RegisterOneFactory();
   private:
     itkDicomImageIOFactory(itkDicomImageIOFactory const & arg0);
     void operator=(itkDicomImageIOFactory const & arg0);
   protected:
     itkDicomImageIOFactory();
     ~itkDicomImageIOFactory();
 };


 class itkDicomImageIOFactory_Pointer {
   public:
     itkDicomImageIOFactory_Pointer();
     itkDicomImageIOFactory_Pointer(itkDicomImageIOFactory_Pointer const & p);
     itkDicomImageIOFactory_Pointer(itkDicomImageIOFactory * p);
     ~itkDicomImageIOFactory_Pointer();
     itkDicomImageIOFactory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDicomImageIOFactory * GetPointer() const;
     bool operator<(itkDicomImageIOFactory_Pointer const & r) const;
     bool operator>(itkDicomImageIOFactory_Pointer const & r) const;
     bool operator<=(itkDicomImageIOFactory_Pointer const & r) const;
     bool operator>=(itkDicomImageIOFactory_Pointer const & r) const;
     itkDicomImageIOFactory_Pointer & operator=(itkDicomImageIOFactory_Pointer const & r);
     itkDicomImageIOFactory_Pointer & operator=(itkDicomImageIOFactory * r);
     itkDicomImageIOFactory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDicomImageIO_Pointer {
   public:
     itkDicomImageIO_Pointer();
     itkDicomImageIO_Pointer(itkDicomImageIO_Pointer const & p);
     itkDicomImageIO_Pointer(itkDicomImageIO * p);
     ~itkDicomImageIO_Pointer();
     itkDicomImageIO * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDicomImageIO * GetPointer() const;
     bool operator<(itkDicomImageIO_Pointer const & r) const;
     bool operator>(itkDicomImageIO_Pointer const & r) const;
     bool operator<=(itkDicomImageIO_Pointer const & r) const;
     bool operator>=(itkDicomImageIO_Pointer const & r) const;
     itkDicomImageIO_Pointer & operator=(itkDicomImageIO_Pointer const & r);
     itkDicomImageIO_Pointer & operator=(itkDicomImageIO * r);
     itkDicomImageIO * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkGDCMImageIOFactory : public itkObjectFactoryBase {
   public:
     virtual char const * GetITKSourceVersion() const;
     virtual char const * GetDescription() const;
     static itkGDCMImageIOFactory_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     static void RegisterOneFactory();
   private:
     itkGDCMImageIOFactory(itkGDCMImageIOFactory const & arg0);
     void operator=(itkGDCMImageIOFactory const & arg0);
   protected:
     itkGDCMImageIOFactory();
     ~itkGDCMImageIOFactory();
 };


 class itkGDCMImageIOFactory_Pointer {
   public:
     itkGDCMImageIOFactory_Pointer();
     itkGDCMImageIOFactory_Pointer(itkGDCMImageIOFactory_Pointer const & p);
     itkGDCMImageIOFactory_Pointer(itkGDCMImageIOFactory * p);
     ~itkGDCMImageIOFactory_Pointer();
     itkGDCMImageIOFactory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkGDCMImageIOFactory * GetPointer() const;
     bool operator<(itkGDCMImageIOFactory_Pointer const & r) const;
     bool operator>(itkGDCMImageIOFactory_Pointer const & r) const;
     bool operator<=(itkGDCMImageIOFactory_Pointer const & r) const;
     bool operator>=(itkGDCMImageIOFactory_Pointer const & r) const;
     itkGDCMImageIOFactory_Pointer & operator=(itkGDCMImageIOFactory_Pointer const & r);
     itkGDCMImageIOFactory_Pointer & operator=(itkGDCMImageIOFactory * r);
     itkGDCMImageIOFactory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkGDCMImageIO_Pointer {
   public:
     itkGDCMImageIO_Pointer();
     itkGDCMImageIO_Pointer(itkGDCMImageIO_Pointer const & p);
     itkGDCMImageIO_Pointer(itkGDCMImageIO * p);
     ~itkGDCMImageIO_Pointer();
     itkGDCMImageIO * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkGDCMImageIO * GetPointer() const;
     bool operator<(itkGDCMImageIO_Pointer const & r) const;
     bool operator>(itkGDCMImageIO_Pointer const & r) const;
     bool operator<=(itkGDCMImageIO_Pointer const & r) const;
     bool operator>=(itkGDCMImageIO_Pointer const & r) const;
     itkGDCMImageIO_Pointer & operator=(itkGDCMImageIO_Pointer const & r);
     itkGDCMImageIO_Pointer & operator=(itkGDCMImageIO * r);
     itkGDCMImageIO * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkGDCMSeriesFileNames : public itkObject {
   public:
     static itkGDCMSeriesFileNames_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetInputDirectory(char const * name);
     void SetInputDirectory(std::string const & name);
     void SetDirectory(std::string const & name);
     std::vector< std::string > const & GetInputFileNames();
     void SetOutputDirectory(std::string const & name);
     std::vector< std::string > const & GetOutputFileNames();
     std::vector< std::string > const & GetFileNames(std::string const serie);
     std::vector< std::string > const & GetSeriesUIDs();
     virtual void SetRecursive(bool const _arg);
     virtual bool GetRecursive() const;
     virtual void RecursiveOn();
     virtual void RecursiveOff();
     void SetUseSeriesDetails(bool useSeriesDetails);
     bool GetUseSeriesDetails();
     gdcm::SerieHelper * GetSeriesHelper();
     void AddSeriesRestriction(std::string const & tag);
     virtual void SetLoadSequences(bool const _arg);
     virtual bool GetLoadSequences() const;
     virtual void LoadSequencesOn();
     virtual void LoadSequencesOff();
     virtual void SetLoadPrivateTags(bool const _arg);
     virtual bool GetLoadPrivateTags() const;
     virtual void LoadPrivateTagsOn();
     virtual void LoadPrivateTagsOff();
   private:
     itkGDCMSeriesFileNames(itkGDCMSeriesFileNames const & arg0);
     void operator=(itkGDCMSeriesFileNames const & arg0);
   protected:
     itkGDCMSeriesFileNames();
     ~itkGDCMSeriesFileNames();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkGDCMSeriesFileNames_Pointer {
   public:
     itkGDCMSeriesFileNames_Pointer();
     itkGDCMSeriesFileNames_Pointer(itkGDCMSeriesFileNames_Pointer const & p);
     itkGDCMSeriesFileNames_Pointer(itkGDCMSeriesFileNames * p);
     ~itkGDCMSeriesFileNames_Pointer();
     itkGDCMSeriesFileNames * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkGDCMSeriesFileNames * GetPointer() const;
     bool operator<(itkGDCMSeriesFileNames_Pointer const & r) const;
     bool operator>(itkGDCMSeriesFileNames_Pointer const & r) const;
     bool operator<=(itkGDCMSeriesFileNames_Pointer const & r) const;
     bool operator>=(itkGDCMSeriesFileNames_Pointer const & r) const;
     itkGDCMSeriesFileNames_Pointer & operator=(itkGDCMSeriesFileNames_Pointer const & r);
     itkGDCMSeriesFileNames_Pointer & operator=(itkGDCMSeriesFileNames * r);
     itkGDCMSeriesFileNames * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkGE4ImageIOFactory : public itkObjectFactoryBase {
   public:
     virtual char const * GetITKSourceVersion() const;
     virtual char const * GetDescription() const;
     static itkGE4ImageIOFactory_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     static void RegisterOneFactory();
   private:
     itkGE4ImageIOFactory(itkGE4ImageIOFactory const & arg0);
     void operator=(itkGE4ImageIOFactory const & arg0);
   protected:
     itkGE4ImageIOFactory();
     ~itkGE4ImageIOFactory();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkGE4ImageIOFactory_Pointer {
   public:
     itkGE4ImageIOFactory_Pointer();
     itkGE4ImageIOFactory_Pointer(itkGE4ImageIOFactory_Pointer const & p);
     itkGE4ImageIOFactory_Pointer(itkGE4ImageIOFactory * p);
     ~itkGE4ImageIOFactory_Pointer();
     itkGE4ImageIOFactory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkGE4ImageIOFactory * GetPointer() const;
     bool operator<(itkGE4ImageIOFactory_Pointer const & r) const;
     bool operator>(itkGE4ImageIOFactory_Pointer const & r) const;
     bool operator<=(itkGE4ImageIOFactory_Pointer const & r) const;
     bool operator>=(itkGE4ImageIOFactory_Pointer const & r) const;
     itkGE4ImageIOFactory_Pointer & operator=(itkGE4ImageIOFactory_Pointer const & r);
     itkGE4ImageIOFactory_Pointer & operator=(itkGE4ImageIOFactory * r);
     itkGE4ImageIOFactory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkGE4ImageIO_Pointer {
   public:
     itkGE4ImageIO_Pointer();
     itkGE4ImageIO_Pointer(itkGE4ImageIO_Pointer const & p);
     itkGE4ImageIO_Pointer(itkGE4ImageIO * p);
     ~itkGE4ImageIO_Pointer();
     itkGE4ImageIO * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkGE4ImageIO * GetPointer() const;
     bool operator<(itkGE4ImageIO_Pointer const & r) const;
     bool operator>(itkGE4ImageIO_Pointer const & r) const;
     bool operator<=(itkGE4ImageIO_Pointer const & r) const;
     bool operator>=(itkGE4ImageIO_Pointer const & r) const;
     itkGE4ImageIO_Pointer & operator=(itkGE4ImageIO_Pointer const & r);
     itkGE4ImageIO_Pointer & operator=(itkGE4ImageIO * r);
     itkGE4ImageIO * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkGE5ImageIOFactory : public itkObjectFactoryBase {
   public:
     virtual char const * GetITKSourceVersion() const;
     virtual char const * GetDescription() const;
     static itkGE5ImageIOFactory_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     static void RegisterOneFactory();
   private:
     itkGE5ImageIOFactory(itkGE5ImageIOFactory const & arg0);
     void operator=(itkGE5ImageIOFactory const & arg0);
   protected:
     itkGE5ImageIOFactory();
     ~itkGE5ImageIOFactory();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkGE5ImageIOFactory_Pointer {
   public:
     itkGE5ImageIOFactory_Pointer();
     itkGE5ImageIOFactory_Pointer(itkGE5ImageIOFactory_Pointer const & p);
     itkGE5ImageIOFactory_Pointer(itkGE5ImageIOFactory * p);
     ~itkGE5ImageIOFactory_Pointer();
     itkGE5ImageIOFactory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkGE5ImageIOFactory * GetPointer() const;
     bool operator<(itkGE5ImageIOFactory_Pointer const & r) const;
     bool operator>(itkGE5ImageIOFactory_Pointer const & r) const;
     bool operator<=(itkGE5ImageIOFactory_Pointer const & r) const;
     bool operator>=(itkGE5ImageIOFactory_Pointer const & r) const;
     itkGE5ImageIOFactory_Pointer & operator=(itkGE5ImageIOFactory_Pointer const & r);
     itkGE5ImageIOFactory_Pointer & operator=(itkGE5ImageIOFactory * r);
     itkGE5ImageIOFactory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkGE5ImageIO_Pointer {
   public:
     itkGE5ImageIO_Pointer();
     itkGE5ImageIO_Pointer(itkGE5ImageIO_Pointer const & p);
     itkGE5ImageIO_Pointer(itkGE5ImageIO * p);
     ~itkGE5ImageIO_Pointer();
     itkGE5ImageIO * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkGE5ImageIO * GetPointer() const;
     bool operator<(itkGE5ImageIO_Pointer const & r) const;
     bool operator>(itkGE5ImageIO_Pointer const & r) const;
     bool operator<=(itkGE5ImageIO_Pointer const & r) const;
     bool operator>=(itkGE5ImageIO_Pointer const & r) const;
     itkGE5ImageIO_Pointer & operator=(itkGE5ImageIO_Pointer const & r);
     itkGE5ImageIO_Pointer & operator=(itkGE5ImageIO * r);
     itkGE5ImageIO * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkGEAdwImageIOFactory : public itkObjectFactoryBase {
   public:
     virtual char const * GetITKSourceVersion() const;
     virtual char const * GetDescription() const;
     static itkGEAdwImageIOFactory_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     static void RegisterOneFactory();
   private:
     itkGEAdwImageIOFactory(itkGEAdwImageIOFactory const & arg0);
     void operator=(itkGEAdwImageIOFactory const & arg0);
   protected:
     itkGEAdwImageIOFactory();
     ~itkGEAdwImageIOFactory();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkGEAdwImageIOFactory_Pointer {
   public:
     itkGEAdwImageIOFactory_Pointer();
     itkGEAdwImageIOFactory_Pointer(itkGEAdwImageIOFactory_Pointer const & p);
     itkGEAdwImageIOFactory_Pointer(itkGEAdwImageIOFactory * p);
     ~itkGEAdwImageIOFactory_Pointer();
     itkGEAdwImageIOFactory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkGEAdwImageIOFactory * GetPointer() const;
     bool operator<(itkGEAdwImageIOFactory_Pointer const & r) const;
     bool operator>(itkGEAdwImageIOFactory_Pointer const & r) const;
     bool operator<=(itkGEAdwImageIOFactory_Pointer const & r) const;
     bool operator>=(itkGEAdwImageIOFactory_Pointer const & r) const;
     itkGEAdwImageIOFactory_Pointer & operator=(itkGEAdwImageIOFactory_Pointer const & r);
     itkGEAdwImageIOFactory_Pointer & operator=(itkGEAdwImageIOFactory * r);
     itkGEAdwImageIOFactory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkGEAdwImageIO_Pointer {
   public:
     itkGEAdwImageIO_Pointer();
     itkGEAdwImageIO_Pointer(itkGEAdwImageIO_Pointer const & p);
     itkGEAdwImageIO_Pointer(itkGEAdwImageIO * p);
     ~itkGEAdwImageIO_Pointer();
     itkGEAdwImageIO * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkGEAdwImageIO * GetPointer() const;
     bool operator<(itkGEAdwImageIO_Pointer const & r) const;
     bool operator>(itkGEAdwImageIO_Pointer const & r) const;
     bool operator<=(itkGEAdwImageIO_Pointer const & r) const;
     bool operator>=(itkGEAdwImageIO_Pointer const & r) const;
     itkGEAdwImageIO_Pointer & operator=(itkGEAdwImageIO_Pointer const & r);
     itkGEAdwImageIO_Pointer & operator=(itkGEAdwImageIO * r);
     itkGEAdwImageIO * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkGiplImageIOFactory : public itkObjectFactoryBase {
   public:
     virtual char const * GetITKSourceVersion() const;
     virtual char const * GetDescription() const;
     static itkGiplImageIOFactory_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     static void RegisterOneFactory();
   private:
     itkGiplImageIOFactory(itkGiplImageIOFactory const & arg0);
     void operator=(itkGiplImageIOFactory const & arg0);
   protected:
     itkGiplImageIOFactory();
     ~itkGiplImageIOFactory();
 };


 class itkGiplImageIOFactory_Pointer {
   public:
     itkGiplImageIOFactory_Pointer();
     itkGiplImageIOFactory_Pointer(itkGiplImageIOFactory_Pointer const & p);
     itkGiplImageIOFactory_Pointer(itkGiplImageIOFactory * p);
     ~itkGiplImageIOFactory_Pointer();
     itkGiplImageIOFactory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkGiplImageIOFactory * GetPointer() const;
     bool operator<(itkGiplImageIOFactory_Pointer const & r) const;
     bool operator>(itkGiplImageIOFactory_Pointer const & r) const;
     bool operator<=(itkGiplImageIOFactory_Pointer const & r) const;
     bool operator>=(itkGiplImageIOFactory_Pointer const & r) const;
     itkGiplImageIOFactory_Pointer & operator=(itkGiplImageIOFactory_Pointer const & r);
     itkGiplImageIOFactory_Pointer & operator=(itkGiplImageIOFactory * r);
     itkGiplImageIOFactory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkGiplImageIO_Pointer {
   public:
     itkGiplImageIO_Pointer();
     itkGiplImageIO_Pointer(itkGiplImageIO_Pointer const & p);
     itkGiplImageIO_Pointer(itkGiplImageIO * p);
     ~itkGiplImageIO_Pointer();
     itkGiplImageIO * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkGiplImageIO * GetPointer() const;
     bool operator<(itkGiplImageIO_Pointer const & r) const;
     bool operator>(itkGiplImageIO_Pointer const & r) const;
     bool operator<=(itkGiplImageIO_Pointer const & r) const;
     bool operator>=(itkGiplImageIO_Pointer const & r) const;
     itkGiplImageIO_Pointer & operator=(itkGiplImageIO_Pointer const & r);
     itkGiplImageIO_Pointer & operator=(itkGiplImageIO * r);
     itkGiplImageIO * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkIPLCommonImageIO_Pointer {
   public:
     itkIPLCommonImageIO_Pointer();
     itkIPLCommonImageIO_Pointer(itkIPLCommonImageIO_Pointer const & p);
     itkIPLCommonImageIO_Pointer(itkIPLCommonImageIO * p);
     ~itkIPLCommonImageIO_Pointer();
     itkIPLCommonImageIO * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkIPLCommonImageIO * GetPointer() const;
     bool operator<(itkIPLCommonImageIO_Pointer const & r) const;
     bool operator>(itkIPLCommonImageIO_Pointer const & r) const;
     bool operator<=(itkIPLCommonImageIO_Pointer const & r) const;
     bool operator>=(itkIPLCommonImageIO_Pointer const & r) const;
     itkIPLCommonImageIO_Pointer & operator=(itkIPLCommonImageIO_Pointer const & r);
     itkIPLCommonImageIO_Pointer & operator=(itkIPLCommonImageIO * r);
     itkIPLCommonImageIO * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageIOBase : public itkLightProcessObject {
   public:
     enum IOPixelType {  UNKNOWNPIXELTYPE = 0,  SCALAR = 1,  RGB = 2,  RGBA = 3,  OFFSET = 4,  VECTOR = 5,  POINT = 6,  COVARIANTVECTOR = 7,  SYMMETRICSECONDRANKTENSOR = 8,  DIFFUSIONTENSOR3D = 9,  COMPLEX = 10,  FIXEDARRAY = 11,  MATRIX = 12 };
     enum IOComponentType {  UNKNOWNCOMPONENTTYPE = 0,  UCHAR = 1,  CHAR = 2,  USHORT = 3,  SHORT = 4,  UINT = 5,  INT = 6,  ULONG = 7,  LONG = 8,  FLOAT = 9,  DOUBLE = 10 };
     enum FileType {  ASCII = 0,  Binary = 1,  TypeNotApplicable = 2 };
     enum ByteOrder {  BigEndian = 0,  LittleEndian = 1,  OrderNotApplicable = 2 };
     virtual char const * GetNameOfClass() const;
     virtual void SetFileName(char const * _arg);
     virtual void SetFileName(std::string const & _arg);
     virtual char const * GetFileName() const;
     void SetNumberOfDimensions(unsigned int arg0);
     virtual unsigned int GetNumberOfDimensions() const;
     virtual void SetDimensions(unsigned int i, unsigned int dim);
     virtual unsigned int GetDimensions(unsigned int i) const;
     virtual void SetOrigin(unsigned int i, double origin);
     virtual double GetOrigin(unsigned int i) const;
     virtual void SetSpacing(unsigned int i, double spacing);
     virtual double GetSpacing(unsigned int i) const;
     virtual void SetDirection(unsigned int i, std::vector< double > & direction);
     virtual void SetDirection(unsigned int i, vnl_vectorD & direction);
     virtual std::vector< double > GetDirection(unsigned int i) const;
     virtual std::vector< double > GetDefaultDirection(unsigned int i) const;
     virtual void SetIORegion(itkImageIORegion const _arg);
     virtual itkImageIORegion const & GetIORegion() const;
     virtual void SetPixelType(itkImageIOBase::IOPixelType const _arg);
     virtual itkImageIOBase::IOPixelType GetPixelType() const;
     virtual bool SetPixelTypeInfo(std::type_info const & ptype);
     virtual void SetComponentType(itkImageIOBase::IOComponentType const _arg);
     virtual itkImageIOBase::IOComponentType GetComponentType() const;
     virtual std::type_info const & GetComponentTypeInfo() const;
     virtual void SetNumberOfComponents(unsigned int const _arg);
     virtual unsigned int const & GetNumberOfComponents() const;
     virtual void SetUseCompression(bool const _arg);
     virtual bool GetUseCompression() const;
     virtual void UseCompressionOn();
     virtual void UseCompressionOff();
     virtual void SetUseStreamedReading(bool const _arg);
     virtual bool GetUseStreamedReading() const;
     virtual void UseStreamedReadingOn();
     virtual void UseStreamedReadingOff();
     virtual void SetUseStreamedWriting(bool const _arg);
     virtual bool GetUseStreamedWriting() const;
     virtual void UseStreamedWritingOn();
     virtual void UseStreamedWritingOff();
     std::string GetComponentTypeAsString(itkImageIOBase::IOComponentType arg0) const;
     std::string GetPixelTypeAsString(itkImageIOBase::IOPixelType arg0) const;
     virtual void SetFileType(itkImageIOBase::FileType const _arg);
     virtual itkImageIOBase::FileType GetFileType() const;
     void SetFileTypeToASCII();
     void SetFileTypeToBinary();
     virtual void SetByteOrder(itkImageIOBase::ByteOrder const _arg);
     virtual itkImageIOBase::ByteOrder GetByteOrder() const;
     void SetByteOrderToBigEndian();
     void SetByteOrderToLittleEndian();
     std::string GetFileTypeAsString(itkImageIOBase::FileType arg0) const;
     std::string GetByteOrderAsString(itkImageIOBase::ByteOrder arg0) const;
     virtual std::streamoff GetPixelStride() const;
     std::streamoff GetImageSizeInPixels() const;
     std::streamoff GetImageSizeInBytes() const;
     std::streamoff GetImageSizeInComponents() const;
     virtual unsigned int GetComponentSize() const;
     virtual bool CanReadFile(char const * arg0) = 0;
     virtual bool CanStreamRead();
     virtual void ReadImageInformation() = 0;
     virtual void Read(void * buffer) = 0;
     virtual bool CanWriteFile(char const * arg0) = 0;
     virtual bool CanStreamWrite();
     virtual void WriteImageInformation() = 0;
     virtual void Write(void const * buffer) = 0;
     virtual bool SupportsDimension(unsigned long dim);
     virtual itkImageIORegion GenerateStreamableReadRegionFromRequestedRegion(itkImageIORegion const & requested) const;
     virtual unsigned int GetActualNumberOfSplitsForWriting(unsigned int numberOfRequestedSplits, itkImageIORegion const & pasteRegion, itkImageIORegion const & largestPossibleRegion);
     virtual itkImageIORegion GetSplitRegionForWriting(unsigned int ithPiece, unsigned int numberOfActualSplits, itkImageIORegion const & pasteRegion, itkImageIORegion const & largestPossibleRegion);
     std::vector< std::string > const & GetSupportedReadExtensions() const;
     std::vector< std::string > const & GetSupportedWriteExtensions() const;
   private:
     itkImageIOBase(itkImageIOBase const & arg0);
     void operator=(itkImageIOBase const & arg0);
   protected:
     itkImageIOBase();
     ~itkImageIOBase();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     virtual void Reset(bool const freeDynamic = true);
     void Resize(unsigned int const numDimensions, unsigned int const * dimensions);
     virtual unsigned int GetPixelSize() const;
     void ComputeStrides();
     std::streamoff GetComponentStride() const;
     std::streamoff GetRowStride() const;
     std::streamoff GetSliceStride() const;
     void WriteBufferAsASCII(std::ostream & os, void const * buffer, itkImageIOBase::IOComponentType ctype, std::streamoff numberOfBytesToWrite);
     void ReadBufferAsASCII(std::istream & os, void * buffer, itkImageIOBase::IOComponentType ctype, std::streamoff numberOfBytesToBeRead);
     bool ReadBufferAsBinary(std::istream & os, void * buffer, std::streamoff numberOfBytesToBeRead);
     void AddSupportedReadExtension(char const * extension);
     void AddSupportedWriteExtension(char const * extension);
     virtual unsigned int GetActualNumberOfSplitsForWritingCanStreamWrite(unsigned int numberOfRequestedSplits, itkImageIORegion const & pasteRegion) const;
     virtual itkImageIORegion GetSplitRegionForWritingCanStreamWrite(unsigned int ithPiece, unsigned int numberOfActualSplits, itkImageIORegion const & pasteRegion) const;
 };


 class itkImageIOBase_Pointer {
   public:
     itkImageIOBase_Pointer();
     itkImageIOBase_Pointer(itkImageIOBase_Pointer const & p);
     itkImageIOBase_Pointer(itkImageIOBase * p);
     ~itkImageIOBase_Pointer();
     itkImageIOBase * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageIOBase * GetPointer() const;
     bool operator<(itkImageIOBase_Pointer const & r) const;
     bool operator>(itkImageIOBase_Pointer const & r) const;
     bool operator<=(itkImageIOBase_Pointer const & r) const;
     bool operator>=(itkImageIOBase_Pointer const & r) const;
     itkImageIOBase_Pointer & operator=(itkImageIOBase_Pointer const & r);
     itkImageIOBase_Pointer & operator=(itkImageIOBase * r);
     itkImageIOBase * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageIOFactory : public itkObject {
   public:
     enum FileModeType {  ReadMode = 0,  WriteMode = 1 };
     virtual char const * GetNameOfClass() const;
     static itkImageIOBase_Pointer CreateImageIO(char const * path, itkImageIOFactory::FileModeType mode);
     static void RegisterBuiltInFactories();
   private:
     itkImageIOFactory(itkImageIOFactory const & arg0);
     void operator=(itkImageIOFactory const & arg0);
   protected:
     itkImageIOFactory();
     ~itkImageIOFactory();
 };


 class itkImageIORegion : public itkRegion {
   public:
     virtual char const * GetNameOfClass() const;
     unsigned int GetImageDimension() const;
     unsigned int GetRegionDimension() const;
     virtual itkRegion::RegionType GetRegionType() const;
     itkImageIORegion(unsigned int dimension);
     itkImageIORegion();
     ~itkImageIORegion();
     itkImageIORegion(itkImageIORegion const & region);
     void operator=(itkImageIORegion const & region);
     void SetIndex(std::vector< long > const & index);
     std::vector< long > const & GetIndex() const;
     void SetSize(std::vector< unsigned long > const & size);
     std::vector< unsigned long > const & GetSize() const;
     size_t GetSize(unsigned long i) const;
     ptrdiff_t GetIndex(unsigned long i) const;
     void SetSize(unsigned long const i, size_t size);
     void SetIndex(unsigned long const i, ptrdiff_t idx);
     bool operator==(itkImageIORegion const & region) const;
     bool operator!=(itkImageIORegion const & region) const;
     bool IsInside(std::vector< long > const & index) const;
     bool IsInside(itkImageIORegion const & region) const;
     size_t GetNumberOfPixels() const;
   private:
   protected:
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkJPEGImageIO : public itkImageIOBase {
   public:
     static itkJPEGImageIO_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetQuality(int const _arg);
     virtual int GetQuality() const;
     virtual void SetProgressive(bool const _arg);
     virtual bool GetProgressive() const;
     virtual bool CanReadFile(char const * arg0);
     virtual void ReadImageInformation();
     virtual void Read(void * buffer);
     virtual void ReadVolume(void * buffer);
     virtual bool CanWriteFile(char const * arg0);
     virtual void WriteImageInformation();
     virtual void Write(void const * buffer);
   private:
     itkJPEGImageIO(itkJPEGImageIO const & arg0);
     void operator=(itkJPEGImageIO const & arg0);
   protected:
     itkJPEGImageIO();
     ~itkJPEGImageIO();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     void WriteSlice(std::string & fileName, void const * buffer);
 };


 class itkJPEGImageIOFactory : public itkObjectFactoryBase {
   public:
     virtual char const * GetITKSourceVersion() const;
     virtual char const * GetDescription() const;
     static itkJPEGImageIOFactory_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     static itkJPEGImageIOFactory * FactoryNew();
     virtual char const * GetNameOfClass() const;
     static void RegisterOneFactory();
   private:
     itkJPEGImageIOFactory(itkJPEGImageIOFactory const & arg0);
     void operator=(itkJPEGImageIOFactory const & arg0);
   protected:
     itkJPEGImageIOFactory();
     ~itkJPEGImageIOFactory();
 };


 class itkJPEGImageIOFactory_Pointer {
   public:
     itkJPEGImageIOFactory_Pointer();
     itkJPEGImageIOFactory_Pointer(itkJPEGImageIOFactory_Pointer const & p);
     itkJPEGImageIOFactory_Pointer(itkJPEGImageIOFactory * p);
     ~itkJPEGImageIOFactory_Pointer();
     itkJPEGImageIOFactory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkJPEGImageIOFactory * GetPointer() const;
     bool operator<(itkJPEGImageIOFactory_Pointer const & r) const;
     bool operator>(itkJPEGImageIOFactory_Pointer const & r) const;
     bool operator<=(itkJPEGImageIOFactory_Pointer const & r) const;
     bool operator>=(itkJPEGImageIOFactory_Pointer const & r) const;
     itkJPEGImageIOFactory_Pointer & operator=(itkJPEGImageIOFactory_Pointer const & r);
     itkJPEGImageIOFactory_Pointer & operator=(itkJPEGImageIOFactory * r);
     itkJPEGImageIOFactory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkJPEGImageIO_Pointer {
   public:
     itkJPEGImageIO_Pointer();
     itkJPEGImageIO_Pointer(itkJPEGImageIO_Pointer const & p);
     itkJPEGImageIO_Pointer(itkJPEGImageIO * p);
     ~itkJPEGImageIO_Pointer();
     itkJPEGImageIO * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkJPEGImageIO * GetPointer() const;
     bool operator<(itkJPEGImageIO_Pointer const & r) const;
     bool operator>(itkJPEGImageIO_Pointer const & r) const;
     bool operator<=(itkJPEGImageIO_Pointer const & r) const;
     bool operator>=(itkJPEGImageIO_Pointer const & r) const;
     itkJPEGImageIO_Pointer & operator=(itkJPEGImageIO_Pointer const & r);
     itkJPEGImageIO_Pointer & operator=(itkJPEGImageIO * r);
     itkJPEGImageIO * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkLSMImageIOFactory : public itkObjectFactoryBase {
   public:
     virtual char const * GetITKSourceVersion() const;
     virtual char const * GetDescription() const;
     static itkLSMImageIOFactory_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     static void RegisterOneFactory();
   private:
     itkLSMImageIOFactory(itkLSMImageIOFactory const & arg0);
     void operator=(itkLSMImageIOFactory const & arg0);
   protected:
     itkLSMImageIOFactory();
     ~itkLSMImageIOFactory();
 };


 class itkLSMImageIOFactory_Pointer {
   public:
     itkLSMImageIOFactory_Pointer();
     itkLSMImageIOFactory_Pointer(itkLSMImageIOFactory_Pointer const & p);
     itkLSMImageIOFactory_Pointer(itkLSMImageIOFactory * p);
     ~itkLSMImageIOFactory_Pointer();
     itkLSMImageIOFactory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkLSMImageIOFactory * GetPointer() const;
     bool operator<(itkLSMImageIOFactory_Pointer const & r) const;
     bool operator>(itkLSMImageIOFactory_Pointer const & r) const;
     bool operator<=(itkLSMImageIOFactory_Pointer const & r) const;
     bool operator>=(itkLSMImageIOFactory_Pointer const & r) const;
     itkLSMImageIOFactory_Pointer & operator=(itkLSMImageIOFactory_Pointer const & r);
     itkLSMImageIOFactory_Pointer & operator=(itkLSMImageIOFactory * r);
     itkLSMImageIOFactory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkLSMImageIO_Pointer {
   public:
     itkLSMImageIO_Pointer();
     itkLSMImageIO_Pointer(itkLSMImageIO_Pointer const & p);
     itkLSMImageIO_Pointer(itkLSMImageIO * p);
     ~itkLSMImageIO_Pointer();
     itkLSMImageIO * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkLSMImageIO * GetPointer() const;
     bool operator<(itkLSMImageIO_Pointer const & r) const;
     bool operator>(itkLSMImageIO_Pointer const & r) const;
     bool operator<=(itkLSMImageIO_Pointer const & r) const;
     bool operator>=(itkLSMImageIO_Pointer const & r) const;
     itkLSMImageIO_Pointer & operator=(itkLSMImageIO_Pointer const & r);
     itkLSMImageIO_Pointer & operator=(itkLSMImageIO * r);
     itkLSMImageIO * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMRCImageIOFactory : public itkObjectFactoryBase {
   public:
     virtual char const * GetITKSourceVersion() const;
     virtual char const * GetDescription() const;
     static itkMRCImageIOFactory_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     static void RegisterOneFactory();
   private:
     itkMRCImageIOFactory(itkMRCImageIOFactory const & arg0);
     void operator=(itkMRCImageIOFactory const & arg0);
   protected:
     itkMRCImageIOFactory();
     ~itkMRCImageIOFactory();
 };


 class itkMRCImageIOFactory_Pointer {
   public:
     itkMRCImageIOFactory_Pointer();
     itkMRCImageIOFactory_Pointer(itkMRCImageIOFactory_Pointer const & p);
     itkMRCImageIOFactory_Pointer(itkMRCImageIOFactory * p);
     ~itkMRCImageIOFactory_Pointer();
     itkMRCImageIOFactory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMRCImageIOFactory * GetPointer() const;
     bool operator<(itkMRCImageIOFactory_Pointer const & r) const;
     bool operator>(itkMRCImageIOFactory_Pointer const & r) const;
     bool operator<=(itkMRCImageIOFactory_Pointer const & r) const;
     bool operator>=(itkMRCImageIOFactory_Pointer const & r) const;
     itkMRCImageIOFactory_Pointer & operator=(itkMRCImageIOFactory_Pointer const & r);
     itkMRCImageIOFactory_Pointer & operator=(itkMRCImageIOFactory * r);
     itkMRCImageIOFactory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMRCImageIO_Pointer {
   public:
     itkMRCImageIO_Pointer();
     itkMRCImageIO_Pointer(itkMRCImageIO_Pointer const & p);
     itkMRCImageIO_Pointer(itkMRCImageIO * p);
     ~itkMRCImageIO_Pointer();
     itkMRCImageIO * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMRCImageIO * GetPointer() const;
     bool operator<(itkMRCImageIO_Pointer const & r) const;
     bool operator>(itkMRCImageIO_Pointer const & r) const;
     bool operator<=(itkMRCImageIO_Pointer const & r) const;
     bool operator>=(itkMRCImageIO_Pointer const & r) const;
     itkMRCImageIO_Pointer & operator=(itkMRCImageIO_Pointer const & r);
     itkMRCImageIO_Pointer & operator=(itkMRCImageIO * r);
     itkMRCImageIO * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMetaImageIO : public itkImageIOBase {
   public:
     static itkMetaImageIO_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool SupportsDimension(unsigned long arg0);
     virtual bool CanReadFile(char const * arg0);
     virtual void ReadImageInformation();
     virtual void Read(void * buffer);
     MetaImage * GetMetaImagePointer();
     virtual bool CanWriteFile(char const * arg0);
     virtual void WriteImageInformation();
     virtual void Write(void const * buffer);
     virtual void SetDataFileName(char const * filename);
     virtual void SetDoublePrecision(unsigned int precision);
     virtual itkImageIORegion GenerateStreamableReadRegionFromRequestedRegion(itkImageIORegion const & requested) const;
     virtual unsigned int GetActualNumberOfSplitsForWriting(unsigned int numberOfRequestedSplits, itkImageIORegion const & pasteRegion, itkImageIORegion const & largestPossibleRegion);
     virtual itkImageIORegion GetSplitRegionForWriting(unsigned int ithPiece, unsigned int numberOfActualSplits, itkImageIORegion const & pasteRegion, itkImageIORegion const & largestPossibleRegion);
     virtual bool CanStreamRead();
     virtual bool CanStreamWrite();
     virtual void SetSubSamplingFactor(unsigned int const _arg);
     virtual unsigned int GetSubSamplingFactor() const;
   private:
     itkMetaImageIO(itkMetaImageIO const & arg0);
     void operator=(itkMetaImageIO const & arg0);
   protected:
     itkMetaImageIO();
     ~itkMetaImageIO();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkMetaImageIOFactory : public itkObjectFactoryBase {
   public:
     virtual char const * GetITKSourceVersion() const;
     virtual char const * GetDescription() const;
     static itkMetaImageIOFactory_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     static void RegisterOneFactory();
   private:
     itkMetaImageIOFactory(itkMetaImageIOFactory const & arg0);
     void operator=(itkMetaImageIOFactory const & arg0);
   protected:
     itkMetaImageIOFactory();
     ~itkMetaImageIOFactory();
 };


 class itkMetaImageIOFactory_Pointer {
   public:
     itkMetaImageIOFactory_Pointer();
     itkMetaImageIOFactory_Pointer(itkMetaImageIOFactory_Pointer const & p);
     itkMetaImageIOFactory_Pointer(itkMetaImageIOFactory * p);
     ~itkMetaImageIOFactory_Pointer();
     itkMetaImageIOFactory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMetaImageIOFactory * GetPointer() const;
     bool operator<(itkMetaImageIOFactory_Pointer const & r) const;
     bool operator>(itkMetaImageIOFactory_Pointer const & r) const;
     bool operator<=(itkMetaImageIOFactory_Pointer const & r) const;
     bool operator>=(itkMetaImageIOFactory_Pointer const & r) const;
     itkMetaImageIOFactory_Pointer & operator=(itkMetaImageIOFactory_Pointer const & r);
     itkMetaImageIOFactory_Pointer & operator=(itkMetaImageIOFactory * r);
     itkMetaImageIOFactory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMetaImageIO_Pointer {
   public:
     itkMetaImageIO_Pointer();
     itkMetaImageIO_Pointer(itkMetaImageIO_Pointer const & p);
     itkMetaImageIO_Pointer(itkMetaImageIO * p);
     ~itkMetaImageIO_Pointer();
     itkMetaImageIO * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMetaImageIO * GetPointer() const;
     bool operator<(itkMetaImageIO_Pointer const & r) const;
     bool operator>(itkMetaImageIO_Pointer const & r) const;
     bool operator<=(itkMetaImageIO_Pointer const & r) const;
     bool operator>=(itkMetaImageIO_Pointer const & r) const;
     itkMetaImageIO_Pointer & operator=(itkMetaImageIO_Pointer const & r);
     itkMetaImageIO_Pointer & operator=(itkMetaImageIO * r);
     itkMetaImageIO * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkNiftiImageIO : public itkImageIOBase {
   public:
     static itkNiftiImageIO_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool CanReadFile(char const * FileNameToRead);
     virtual void ReadImageInformation();
     virtual void Read(void * buffer);
     virtual bool CanWriteFile(char const * FileNameToWrite);
     virtual void WriteImageInformation();
     virtual void Write(void const * buffer);
     virtual itkImageIORegion GenerateStreamableReadRegionFromRequestedRegion(itkImageIORegion const & requestedRegion) const;
     virtual void SetLegacyAnalyze75Mode(bool const _arg);
     virtual bool GetLegacyAnalyze75Mode() const;
   private:
     bool MustRescale();
     void DefineHeaderObjectDataType();
     void SetNIfTIOrientationFromImageIO(unsigned short origdims, unsigned short dims);
     void SetImageIOOrientationFromNIfTI(unsigned short dims);
     void SetImageIOMetadataFromNIfTI();
     itkNiftiImageIO(itkNiftiImageIO const & arg0);
     void operator=(itkNiftiImageIO const & arg0);
   protected:
     itkNiftiImageIO();
     ~itkNiftiImageIO();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     virtual bool GetUseLegacyModeForTwoFileWriting() const;
 };


 class itkNiftiImageIOFactory : public itkObjectFactoryBase {
   public:
     virtual char const * GetITKSourceVersion() const;
     virtual char const * GetDescription() const;
     static itkNiftiImageIOFactory_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     static void RegisterOneFactory();
   private:
     itkNiftiImageIOFactory(itkNiftiImageIOFactory const & arg0);
     void operator=(itkNiftiImageIOFactory const & arg0);
   protected:
     itkNiftiImageIOFactory();
     ~itkNiftiImageIOFactory();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkNiftiImageIOFactory_Pointer {
   public:
     itkNiftiImageIOFactory_Pointer();
     itkNiftiImageIOFactory_Pointer(itkNiftiImageIOFactory_Pointer const & p);
     itkNiftiImageIOFactory_Pointer(itkNiftiImageIOFactory * p);
     ~itkNiftiImageIOFactory_Pointer();
     itkNiftiImageIOFactory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkNiftiImageIOFactory * GetPointer() const;
     bool operator<(itkNiftiImageIOFactory_Pointer const & r) const;
     bool operator>(itkNiftiImageIOFactory_Pointer const & r) const;
     bool operator<=(itkNiftiImageIOFactory_Pointer const & r) const;
     bool operator>=(itkNiftiImageIOFactory_Pointer const & r) const;
     itkNiftiImageIOFactory_Pointer & operator=(itkNiftiImageIOFactory_Pointer const & r);
     itkNiftiImageIOFactory_Pointer & operator=(itkNiftiImageIOFactory * r);
     itkNiftiImageIOFactory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkNiftiImageIO_Pointer {
   public:
     itkNiftiImageIO_Pointer();
     itkNiftiImageIO_Pointer(itkNiftiImageIO_Pointer const & p);
     itkNiftiImageIO_Pointer(itkNiftiImageIO * p);
     ~itkNiftiImageIO_Pointer();
     itkNiftiImageIO * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkNiftiImageIO * GetPointer() const;
     bool operator<(itkNiftiImageIO_Pointer const & r) const;
     bool operator>(itkNiftiImageIO_Pointer const & r) const;
     bool operator<=(itkNiftiImageIO_Pointer const & r) const;
     bool operator>=(itkNiftiImageIO_Pointer const & r) const;
     itkNiftiImageIO_Pointer & operator=(itkNiftiImageIO_Pointer const & r);
     itkNiftiImageIO_Pointer & operator=(itkNiftiImageIO * r);
     itkNiftiImageIO * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkNrrdImageIO : public itkImageIOBase {
   public:
     static itkNrrdImageIO_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool SupportsDimension(unsigned long arg0);
     virtual bool CanReadFile(char const * arg0);
     virtual void ReadImageInformation();
     virtual void Read(void * buffer);
     virtual bool CanWriteFile(char const * arg0);
     virtual void WriteImageInformation();
     virtual void Write(void const * buffer);
   private:
     itkNrrdImageIO(itkNrrdImageIO const & arg0);
     void operator=(itkNrrdImageIO const & arg0);
   protected:
     itkNrrdImageIO();
     ~itkNrrdImageIO();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     int ITKToNrrdComponentType(itkImageIOBase::IOComponentType const arg0) const;
     itkImageIOBase::IOComponentType NrrdToITKComponentType(int const arg0) const;
 };


 class itkNrrdImageIOFactory : public itkObjectFactoryBase {
   public:
     virtual char const * GetITKSourceVersion() const;
     virtual char const * GetDescription() const;
     static itkNrrdImageIOFactory_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     static void RegisterOneFactory();
   private:
     itkNrrdImageIOFactory(itkNrrdImageIOFactory const & arg0);
     void operator=(itkNrrdImageIOFactory const & arg0);
   protected:
     itkNrrdImageIOFactory();
     ~itkNrrdImageIOFactory();
 };


 class itkNrrdImageIOFactory_Pointer {
   public:
     itkNrrdImageIOFactory_Pointer();
     itkNrrdImageIOFactory_Pointer(itkNrrdImageIOFactory_Pointer const & p);
     itkNrrdImageIOFactory_Pointer(itkNrrdImageIOFactory * p);
     ~itkNrrdImageIOFactory_Pointer();
     itkNrrdImageIOFactory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkNrrdImageIOFactory * GetPointer() const;
     bool operator<(itkNrrdImageIOFactory_Pointer const & r) const;
     bool operator>(itkNrrdImageIOFactory_Pointer const & r) const;
     bool operator<=(itkNrrdImageIOFactory_Pointer const & r) const;
     bool operator>=(itkNrrdImageIOFactory_Pointer const & r) const;
     itkNrrdImageIOFactory_Pointer & operator=(itkNrrdImageIOFactory_Pointer const & r);
     itkNrrdImageIOFactory_Pointer & operator=(itkNrrdImageIOFactory * r);
     itkNrrdImageIOFactory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkNrrdImageIO_Pointer {
   public:
     itkNrrdImageIO_Pointer();
     itkNrrdImageIO_Pointer(itkNrrdImageIO_Pointer const & p);
     itkNrrdImageIO_Pointer(itkNrrdImageIO * p);
     ~itkNrrdImageIO_Pointer();
     itkNrrdImageIO * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkNrrdImageIO * GetPointer() const;
     bool operator<(itkNrrdImageIO_Pointer const & r) const;
     bool operator>(itkNrrdImageIO_Pointer const & r) const;
     bool operator<=(itkNrrdImageIO_Pointer const & r) const;
     bool operator>=(itkNrrdImageIO_Pointer const & r) const;
     itkNrrdImageIO_Pointer & operator=(itkNrrdImageIO_Pointer const & r);
     itkNrrdImageIO_Pointer & operator=(itkNrrdImageIO * r);
     itkNrrdImageIO * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkNumericSeriesFileNames : public itkObject {
   public:
     static itkNumericSeriesFileNames_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetStartIndex(unsigned long const _arg);
     virtual unsigned long GetStartIndex() const;
     virtual void SetEndIndex(unsigned long const _arg);
     virtual unsigned long GetEndIndex() const;
     virtual void SetIncrementIndex(unsigned long const _arg);
     virtual unsigned long GetIncrementIndex() const;
     virtual void SetSeriesFormat(char const * _arg);
     virtual void SetSeriesFormat(std::string const & _arg);
     virtual char const * GetSeriesFormat() const;
     std::vector< std::string > const & GetFileNames();
   private:
     itkNumericSeriesFileNames(itkNumericSeriesFileNames const & arg0);
     void operator=(itkNumericSeriesFileNames const & arg0);
   protected:
     itkNumericSeriesFileNames();
     ~itkNumericSeriesFileNames();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkNumericSeriesFileNames_Pointer {
   public:
     itkNumericSeriesFileNames_Pointer();
     itkNumericSeriesFileNames_Pointer(itkNumericSeriesFileNames_Pointer const & p);
     itkNumericSeriesFileNames_Pointer(itkNumericSeriesFileNames * p);
     ~itkNumericSeriesFileNames_Pointer();
     itkNumericSeriesFileNames * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkNumericSeriesFileNames * GetPointer() const;
     bool operator<(itkNumericSeriesFileNames_Pointer const & r) const;
     bool operator>(itkNumericSeriesFileNames_Pointer const & r) const;
     bool operator<=(itkNumericSeriesFileNames_Pointer const & r) const;
     bool operator>=(itkNumericSeriesFileNames_Pointer const & r) const;
     itkNumericSeriesFileNames_Pointer & operator=(itkNumericSeriesFileNames_Pointer const & r);
     itkNumericSeriesFileNames_Pointer & operator=(itkNumericSeriesFileNames * r);
     itkNumericSeriesFileNames * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkPNGImageIO : public itkImageIOBase {
   public:
     static itkPNGImageIO_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetCompressionLevel(int const _arg);
     virtual int GetCompressionLevel() const;
     virtual bool CanReadFile(char const * arg0);
     virtual void ReadImageInformation();
     virtual void Read(void * buffer);
     virtual void ReadVolume(void * buffer);
     virtual bool CanWriteFile(char const * arg0);
     virtual void WriteImageInformation();
     virtual void Write(void const * buffer);
   private:
     itkPNGImageIO(itkPNGImageIO const & arg0);
     void operator=(itkPNGImageIO const & arg0);
   protected:
     itkPNGImageIO();
     ~itkPNGImageIO();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     void WriteSlice(std::string const & fileName, void const * buffer);
 };


 class itkPNGImageIOFactory : public itkObjectFactoryBase {
   public:
     virtual char const * GetITKSourceVersion() const;
     virtual char const * GetDescription() const;
     static itkPNGImageIOFactory_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     static itkPNGImageIOFactory * FactoryNew();
     virtual char const * GetNameOfClass() const;
     static void RegisterOneFactory();
   private:
     itkPNGImageIOFactory(itkPNGImageIOFactory const & arg0);
     void operator=(itkPNGImageIOFactory const & arg0);
   protected:
     itkPNGImageIOFactory();
     ~itkPNGImageIOFactory();
 };


 class itkPNGImageIOFactory_Pointer {
   public:
     itkPNGImageIOFactory_Pointer();
     itkPNGImageIOFactory_Pointer(itkPNGImageIOFactory_Pointer const & p);
     itkPNGImageIOFactory_Pointer(itkPNGImageIOFactory * p);
     ~itkPNGImageIOFactory_Pointer();
     itkPNGImageIOFactory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkPNGImageIOFactory * GetPointer() const;
     bool operator<(itkPNGImageIOFactory_Pointer const & r) const;
     bool operator>(itkPNGImageIOFactory_Pointer const & r) const;
     bool operator<=(itkPNGImageIOFactory_Pointer const & r) const;
     bool operator>=(itkPNGImageIOFactory_Pointer const & r) const;
     itkPNGImageIOFactory_Pointer & operator=(itkPNGImageIOFactory_Pointer const & r);
     itkPNGImageIOFactory_Pointer & operator=(itkPNGImageIOFactory * r);
     itkPNGImageIOFactory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkPNGImageIO_Pointer {
   public:
     itkPNGImageIO_Pointer();
     itkPNGImageIO_Pointer(itkPNGImageIO_Pointer const & p);
     itkPNGImageIO_Pointer(itkPNGImageIO * p);
     ~itkPNGImageIO_Pointer();
     itkPNGImageIO * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkPNGImageIO * GetPointer() const;
     bool operator<(itkPNGImageIO_Pointer const & r) const;
     bool operator>(itkPNGImageIO_Pointer const & r) const;
     bool operator<=(itkPNGImageIO_Pointer const & r) const;
     bool operator>=(itkPNGImageIO_Pointer const & r) const;
     itkPNGImageIO_Pointer & operator=(itkPNGImageIO_Pointer const & r);
     itkPNGImageIO_Pointer & operator=(itkPNGImageIO * r);
     itkPNGImageIO * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkPhilipsRECImageIO : public itkImageIOBase {
   public:
     static itkPhilipsRECImageIO_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool CanReadFile(char const * FileNameToRead);
     virtual void ReadImageInformation();
     virtual void Read(void * buffer);
     virtual bool CanWriteFile(char const * arg0);
     virtual void WriteImageInformation();
     virtual void Write(void const * arg0);
   private:
     itkPhilipsRECImageIO(itkPhilipsRECImageIO const & arg0);
     void operator=(itkPhilipsRECImageIO const & arg0);
     void SwapBytesIfNecessary(void * buffer, unsigned long numberOfPixels);
     long GetSliceIndex(long index) const;
   protected:
     itkPhilipsRECImageIO();
     ~itkPhilipsRECImageIO();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkPhilipsRECImageIOFactory : public itkObjectFactoryBase {
   public:
     virtual char const * GetITKSourceVersion() const;
     virtual char const * GetDescription() const;
     static itkPhilipsRECImageIOFactory_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     static itkPhilipsRECImageIOFactory * FactoryNew();
     virtual char const * GetNameOfClass() const;
     static void RegisterOneFactory();
   private:
     itkPhilipsRECImageIOFactory(itkPhilipsRECImageIOFactory const & arg0);
     void operator=(itkPhilipsRECImageIOFactory const & arg0);
   protected:
     itkPhilipsRECImageIOFactory();
     ~itkPhilipsRECImageIOFactory();
 };


 class itkPhilipsRECImageIOFactory_Pointer {
   public:
     itkPhilipsRECImageIOFactory_Pointer();
     itkPhilipsRECImageIOFactory_Pointer(itkPhilipsRECImageIOFactory_Pointer const & p);
     itkPhilipsRECImageIOFactory_Pointer(itkPhilipsRECImageIOFactory * p);
     ~itkPhilipsRECImageIOFactory_Pointer();
     itkPhilipsRECImageIOFactory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkPhilipsRECImageIOFactory * GetPointer() const;
     bool operator<(itkPhilipsRECImageIOFactory_Pointer const & r) const;
     bool operator>(itkPhilipsRECImageIOFactory_Pointer const & r) const;
     bool operator<=(itkPhilipsRECImageIOFactory_Pointer const & r) const;
     bool operator>=(itkPhilipsRECImageIOFactory_Pointer const & r) const;
     itkPhilipsRECImageIOFactory_Pointer & operator=(itkPhilipsRECImageIOFactory_Pointer const & r);
     itkPhilipsRECImageIOFactory_Pointer & operator=(itkPhilipsRECImageIOFactory * r);
     itkPhilipsRECImageIOFactory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkPhilipsRECImageIO_Pointer {
   public:
     itkPhilipsRECImageIO_Pointer();
     itkPhilipsRECImageIO_Pointer(itkPhilipsRECImageIO_Pointer const & p);
     itkPhilipsRECImageIO_Pointer(itkPhilipsRECImageIO * p);
     ~itkPhilipsRECImageIO_Pointer();
     itkPhilipsRECImageIO * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkPhilipsRECImageIO * GetPointer() const;
     bool operator<(itkPhilipsRECImageIO_Pointer const & r) const;
     bool operator>(itkPhilipsRECImageIO_Pointer const & r) const;
     bool operator<=(itkPhilipsRECImageIO_Pointer const & r) const;
     bool operator>=(itkPhilipsRECImageIO_Pointer const & r) const;
     itkPhilipsRECImageIO_Pointer & operator=(itkPhilipsRECImageIO_Pointer const & r);
     itkPhilipsRECImageIO_Pointer & operator=(itkPhilipsRECImageIO * r);
     itkPhilipsRECImageIO * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkRawImageIOF2 : public itkImageIOBase {
   public:
     static itkRawImageIOF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetHeaderSize(unsigned long size);
     unsigned long GetHeaderSize();
     virtual void SetFileDimensionality(unsigned long const _arg);
     virtual unsigned long GetFileDimensionality() const;
     virtual bool SupportsDimension(unsigned long dim);
     virtual bool CanReadFile(char const * arg0);
     virtual void ReadImageInformation();
     virtual void Read(void * buffer);
     virtual unsigned short const & GetImageMask() const;
     void SetImageMask(unsigned long val);
     virtual void ReadHeader(std::string const arg0 = std::string());
     virtual bool CanWriteFile(char const * arg0);
     virtual void WriteImageInformation();
     virtual void Write(void const * buffer);
   private:
     itkRawImageIOF2(itkRawImageIOF2 const & arg0);
     void operator=(itkRawImageIOF2 const & arg0);
   protected:
     itkRawImageIOF2();
     ~itkRawImageIOF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     void OpenFileForReading(std::basic_ifstream< char, std::char_traits< char > > & is);
     void OpenFileForWriting(std::basic_ofstream< char, std::char_traits< char > > & os);
 };


 class itkRawImageIOF2_Pointer {
   public:
     itkRawImageIOF2_Pointer();
     itkRawImageIOF2_Pointer(itkRawImageIOF2_Pointer const & p);
     itkRawImageIOF2_Pointer(itkRawImageIOF2 * p);
     ~itkRawImageIOF2_Pointer();
     itkRawImageIOF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkRawImageIOF2 * GetPointer() const;
     bool operator<(itkRawImageIOF2_Pointer const & r) const;
     bool operator>(itkRawImageIOF2_Pointer const & r) const;
     bool operator<=(itkRawImageIOF2_Pointer const & r) const;
     bool operator>=(itkRawImageIOF2_Pointer const & r) const;
     itkRawImageIOF2_Pointer & operator=(itkRawImageIOF2_Pointer const & r);
     itkRawImageIOF2_Pointer & operator=(itkRawImageIOF2 * r);
     itkRawImageIOF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkRawImageIOF3 : public itkImageIOBase {
   public:
     static itkRawImageIOF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetHeaderSize(unsigned long size);
     unsigned long GetHeaderSize();
     virtual void SetFileDimensionality(unsigned long const _arg);
     virtual unsigned long GetFileDimensionality() const;
     virtual bool SupportsDimension(unsigned long dim);
     virtual bool CanReadFile(char const * arg0);
     virtual void ReadImageInformation();
     virtual void Read(void * buffer);
     virtual unsigned short const & GetImageMask() const;
     void SetImageMask(unsigned long val);
     virtual void ReadHeader(std::string const arg0 = std::string());
     virtual bool CanWriteFile(char const * arg0);
     virtual void WriteImageInformation();
     virtual void Write(void const * buffer);
   private:
     itkRawImageIOF3(itkRawImageIOF3 const & arg0);
     void operator=(itkRawImageIOF3 const & arg0);
   protected:
     itkRawImageIOF3();
     ~itkRawImageIOF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     void OpenFileForReading(std::basic_ifstream< char, std::char_traits< char > > & is);
     void OpenFileForWriting(std::basic_ofstream< char, std::char_traits< char > > & os);
 };


 class itkRawImageIOF3_Pointer {
   public:
     itkRawImageIOF3_Pointer();
     itkRawImageIOF3_Pointer(itkRawImageIOF3_Pointer const & p);
     itkRawImageIOF3_Pointer(itkRawImageIOF3 * p);
     ~itkRawImageIOF3_Pointer();
     itkRawImageIOF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkRawImageIOF3 * GetPointer() const;
     bool operator<(itkRawImageIOF3_Pointer const & r) const;
     bool operator>(itkRawImageIOF3_Pointer const & r) const;
     bool operator<=(itkRawImageIOF3_Pointer const & r) const;
     bool operator>=(itkRawImageIOF3_Pointer const & r) const;
     itkRawImageIOF3_Pointer & operator=(itkRawImageIOF3_Pointer const & r);
     itkRawImageIOF3_Pointer & operator=(itkRawImageIOF3 * r);
     itkRawImageIOF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkRegularExpressionSeriesFileNames : public itkObject {
   public:
     static itkRegularExpressionSeriesFileNames_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetDirectory(char const * _arg);
     virtual void SetDirectory(std::string const & _arg);
     virtual char const * GetDirectory() const;
     virtual void SetRegularExpression(char const * _arg);
     virtual void SetRegularExpression(std::string const & _arg);
     virtual char const * GetRegularExpression() const;
     virtual void SetSubMatch(unsigned int const _arg);
     virtual unsigned int GetSubMatch() const;
     virtual void SetNumericSort(bool const _arg);
     virtual bool GetNumericSort() const;
     virtual void NumericSortOn();
     virtual void NumericSortOff();
     std::vector< std::string > const & GetFileNames();
   private:
     itkRegularExpressionSeriesFileNames(itkRegularExpressionSeriesFileNames const & arg0);
     void operator=(itkRegularExpressionSeriesFileNames const & arg0);
   protected:
     itkRegularExpressionSeriesFileNames();
     ~itkRegularExpressionSeriesFileNames();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkRegularExpressionSeriesFileNames_Pointer {
   public:
     itkRegularExpressionSeriesFileNames_Pointer();
     itkRegularExpressionSeriesFileNames_Pointer(itkRegularExpressionSeriesFileNames_Pointer const & p);
     itkRegularExpressionSeriesFileNames_Pointer(itkRegularExpressionSeriesFileNames * p);
     ~itkRegularExpressionSeriesFileNames_Pointer();
     itkRegularExpressionSeriesFileNames * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkRegularExpressionSeriesFileNames * GetPointer() const;
     bool operator<(itkRegularExpressionSeriesFileNames_Pointer const & r) const;
     bool operator>(itkRegularExpressionSeriesFileNames_Pointer const & r) const;
     bool operator<=(itkRegularExpressionSeriesFileNames_Pointer const & r) const;
     bool operator>=(itkRegularExpressionSeriesFileNames_Pointer const & r) const;
     itkRegularExpressionSeriesFileNames_Pointer & operator=(itkRegularExpressionSeriesFileNames_Pointer const & r);
     itkRegularExpressionSeriesFileNames_Pointer & operator=(itkRegularExpressionSeriesFileNames * r);
     itkRegularExpressionSeriesFileNames * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkSiemensVisionImageIOFactory : public itkObjectFactoryBase {
   public:
     virtual char const * GetITKSourceVersion() const;
     virtual char const * GetDescription() const;
     static itkSiemensVisionImageIOFactory_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     static void RegisterOneFactory();
   private:
     itkSiemensVisionImageIOFactory(itkSiemensVisionImageIOFactory const & arg0);
     void operator=(itkSiemensVisionImageIOFactory const & arg0);
   protected:
     itkSiemensVisionImageIOFactory();
     ~itkSiemensVisionImageIOFactory();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkSiemensVisionImageIOFactory_Pointer {
   public:
     itkSiemensVisionImageIOFactory_Pointer();
     itkSiemensVisionImageIOFactory_Pointer(itkSiemensVisionImageIOFactory_Pointer const & p);
     itkSiemensVisionImageIOFactory_Pointer(itkSiemensVisionImageIOFactory * p);
     ~itkSiemensVisionImageIOFactory_Pointer();
     itkSiemensVisionImageIOFactory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkSiemensVisionImageIOFactory * GetPointer() const;
     bool operator<(itkSiemensVisionImageIOFactory_Pointer const & r) const;
     bool operator>(itkSiemensVisionImageIOFactory_Pointer const & r) const;
     bool operator<=(itkSiemensVisionImageIOFactory_Pointer const & r) const;
     bool operator>=(itkSiemensVisionImageIOFactory_Pointer const & r) const;
     itkSiemensVisionImageIOFactory_Pointer & operator=(itkSiemensVisionImageIOFactory_Pointer const & r);
     itkSiemensVisionImageIOFactory_Pointer & operator=(itkSiemensVisionImageIOFactory * r);
     itkSiemensVisionImageIOFactory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkSiemensVisionImageIO_Pointer {
   public:
     itkSiemensVisionImageIO_Pointer();
     itkSiemensVisionImageIO_Pointer(itkSiemensVisionImageIO_Pointer const & p);
     itkSiemensVisionImageIO_Pointer(itkSiemensVisionImageIO * p);
     ~itkSiemensVisionImageIO_Pointer();
     itkSiemensVisionImageIO * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkSiemensVisionImageIO * GetPointer() const;
     bool operator<(itkSiemensVisionImageIO_Pointer const & r) const;
     bool operator>(itkSiemensVisionImageIO_Pointer const & r) const;
     bool operator<=(itkSiemensVisionImageIO_Pointer const & r) const;
     bool operator>=(itkSiemensVisionImageIO_Pointer const & r) const;
     itkSiemensVisionImageIO_Pointer & operator=(itkSiemensVisionImageIO_Pointer const & r);
     itkSiemensVisionImageIO_Pointer & operator=(itkSiemensVisionImageIO * r);
     itkSiemensVisionImageIO * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkStimulateImageIO : public itkImageIOBase {
   public:
     static itkStimulateImageIO_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool CanReadFile(char const * arg0);
     virtual void ReadImageInformation();
     virtual void Read(void * buffer);
     virtual bool CanWriteFile(char const * arg0);
     virtual void WriteImageInformation();
     virtual void Write(void const * buffer);
     virtual float const * GetDisplayRange() const;
   private:
     itkStimulateImageIO(itkStimulateImageIO const & arg0);
     void operator=(itkStimulateImageIO const & arg0);
   protected:
     itkStimulateImageIO();
     ~itkStimulateImageIO();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     bool OpenStimulateFileForReading(std::ifstream & os, char const * filename);
     bool OpenStimulateFileForWriting(std::ofstream & os, char const * filename);
     void InternalReadImageInformation(std::ifstream & file);
 };


 class itkStimulateImageIOFactory : public itkObjectFactoryBase {
   public:
     virtual char const * GetITKSourceVersion() const;
     virtual char const * GetDescription() const;
     static itkStimulateImageIOFactory_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     static void RegisterOneFactory();
   private:
     itkStimulateImageIOFactory(itkStimulateImageIOFactory const & arg0);
     void operator=(itkStimulateImageIOFactory const & arg0);
   protected:
     itkStimulateImageIOFactory();
     ~itkStimulateImageIOFactory();
 };


 class itkStimulateImageIOFactory_Pointer {
   public:
     itkStimulateImageIOFactory_Pointer();
     itkStimulateImageIOFactory_Pointer(itkStimulateImageIOFactory_Pointer const & p);
     itkStimulateImageIOFactory_Pointer(itkStimulateImageIOFactory * p);
     ~itkStimulateImageIOFactory_Pointer();
     itkStimulateImageIOFactory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkStimulateImageIOFactory * GetPointer() const;
     bool operator<(itkStimulateImageIOFactory_Pointer const & r) const;
     bool operator>(itkStimulateImageIOFactory_Pointer const & r) const;
     bool operator<=(itkStimulateImageIOFactory_Pointer const & r) const;
     bool operator>=(itkStimulateImageIOFactory_Pointer const & r) const;
     itkStimulateImageIOFactory_Pointer & operator=(itkStimulateImageIOFactory_Pointer const & r);
     itkStimulateImageIOFactory_Pointer & operator=(itkStimulateImageIOFactory * r);
     itkStimulateImageIOFactory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkStimulateImageIO_Pointer {
   public:
     itkStimulateImageIO_Pointer();
     itkStimulateImageIO_Pointer(itkStimulateImageIO_Pointer const & p);
     itkStimulateImageIO_Pointer(itkStimulateImageIO * p);
     ~itkStimulateImageIO_Pointer();
     itkStimulateImageIO * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkStimulateImageIO * GetPointer() const;
     bool operator<(itkStimulateImageIO_Pointer const & r) const;
     bool operator>(itkStimulateImageIO_Pointer const & r) const;
     bool operator<=(itkStimulateImageIO_Pointer const & r) const;
     bool operator>=(itkStimulateImageIO_Pointer const & r) const;
     itkStimulateImageIO_Pointer & operator=(itkStimulateImageIO_Pointer const & r);
     itkStimulateImageIO_Pointer & operator=(itkStimulateImageIO * r);
     itkStimulateImageIO * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkStreamingImageIOBase : public itkImageIOBase {
   public:
     virtual char const * GetNameOfClass() const;
     virtual bool CanStreamWrite();
     virtual bool CanStreamRead();
     virtual itkImageIORegion GenerateStreamableReadRegionFromRequestedRegion(itkImageIORegion const & requested) const;
     virtual unsigned int GetActualNumberOfSplitsForWriting(unsigned int numberOfRequestedSplits, itkImageIORegion const & pasteRegion, itkImageIORegion const & largestPossibleRegion);
     ~itkStreamingImageIOBase();
   private:
     itkStreamingImageIOBase(itkStreamingImageIOBase const & arg0);
     void operator=(itkStreamingImageIOBase const & arg0);
   protected:
     itkStreamingImageIOBase();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     virtual bool RequestedToStream() const;
     virtual bool ReadBufferAsBinary(std::istream & is, void * buffer, std::streamoff num);
     virtual bool WriteBufferAsBinary(std::ostream & is, void const * buffer, std::streamoff num);
     virtual bool StreamReadBufferAsBinary(std::istream & os, void * buffer);
     virtual bool StreamWriteBufferAsBinary(std::ostream & os, void const * buffer);
     virtual std::streamoff GetHeaderSize() const = 0;
     virtual std::streamoff GetDataPosition() const;
     virtual void OpenFileForReading(std::ifstream & os, char const * filename);
     virtual void OpenFileForWriting(std::ofstream & os, char const * filename, bool truncate);
 };


 class itkStreamingImageIOBase_Pointer {
   public:
     itkStreamingImageIOBase_Pointer();
     itkStreamingImageIOBase_Pointer(itkStreamingImageIOBase_Pointer const & p);
     itkStreamingImageIOBase_Pointer(itkStreamingImageIOBase * p);
     ~itkStreamingImageIOBase_Pointer();
     itkStreamingImageIOBase * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkStreamingImageIOBase * GetPointer() const;
     bool operator<(itkStreamingImageIOBase_Pointer const & r) const;
     bool operator>(itkStreamingImageIOBase_Pointer const & r) const;
     bool operator<=(itkStreamingImageIOBase_Pointer const & r) const;
     bool operator>=(itkStreamingImageIOBase_Pointer const & r) const;
     itkStreamingImageIOBase_Pointer & operator=(itkStreamingImageIOBase_Pointer const & r);
     itkStreamingImageIOBase_Pointer & operator=(itkStreamingImageIOBase * r);
     itkStreamingImageIOBase * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkTIFFImageIO : public itkImageIOBase {
   public:
     enum  {  NOFORMAT = 0,  RGB_ = 1,  GRAYSCALE = 2,  PALETTE_RGB = 3,  PALETTE_GRAYSCALE = 4,  OTHER = 5 };
     enum  {  NoCompression = 0,  PackBits = 1,  JPEG = 2,  Deflate = 3,  LZW = 4 };
     static itkTIFFImageIO_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool CanReadFile(char const * arg0);
     virtual void ReadImageInformation();
     virtual void Read(void * buffer);
     virtual void ReadVolume(void * buffer);
     virtual void ReadTiles(void * buffer);
     virtual bool CanWriteFile(char const * arg0);
     virtual void WriteImageInformation();
     virtual void Write(void const * buffer);
     void SetCompressionToNoCompression();
     void SetCompressionToPackBits();
     void SetCompressionToJPEG();
     void SetCompressionToDeflate();
     void SetCompressionToLZW();
     void SetCompression(int compression);
   private:
     itkTIFFImageIO(itkTIFFImageIO const & arg0);
     void operator=(itkTIFFImageIO const & arg0);
   protected:
     itkTIFFImageIO();
     ~itkTIFFImageIO();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     void InternalWrite(void const * buffer);
     void InitializeColors();
     void ReadGenericImage(void * out, unsigned int arg1, unsigned int height);
     void ReadTwoSamplesPerPixelImage(void * out, unsigned int arg1, unsigned int height);
     int EvaluateImageAt(void * out, void * in);
     unsigned int GetFormat();
     void GetColor(int index, unsigned short * red, unsigned short * green, unsigned short * blue);
     bool CanFindTIFFTag(unsigned int t);
     void * ReadRawByteFromTag(unsigned int t, short & value_count);
 };


 class itkTIFFImageIOFactory : public itkObjectFactoryBase {
   public:
     virtual char const * GetITKSourceVersion() const;
     virtual char const * GetDescription() const;
     static itkTIFFImageIOFactory_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     static itkTIFFImageIOFactory * FactoryNew();
     virtual char const * GetNameOfClass() const;
     static void RegisterOneFactory();
   private:
     itkTIFFImageIOFactory(itkTIFFImageIOFactory const & arg0);
     void operator=(itkTIFFImageIOFactory const & arg0);
   protected:
     itkTIFFImageIOFactory();
     ~itkTIFFImageIOFactory();
 };


 class itkTIFFImageIOFactory_Pointer {
   public:
     itkTIFFImageIOFactory_Pointer();
     itkTIFFImageIOFactory_Pointer(itkTIFFImageIOFactory_Pointer const & p);
     itkTIFFImageIOFactory_Pointer(itkTIFFImageIOFactory * p);
     ~itkTIFFImageIOFactory_Pointer();
     itkTIFFImageIOFactory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkTIFFImageIOFactory * GetPointer() const;
     bool operator<(itkTIFFImageIOFactory_Pointer const & r) const;
     bool operator>(itkTIFFImageIOFactory_Pointer const & r) const;
     bool operator<=(itkTIFFImageIOFactory_Pointer const & r) const;
     bool operator>=(itkTIFFImageIOFactory_Pointer const & r) const;
     itkTIFFImageIOFactory_Pointer & operator=(itkTIFFImageIOFactory_Pointer const & r);
     itkTIFFImageIOFactory_Pointer & operator=(itkTIFFImageIOFactory * r);
     itkTIFFImageIOFactory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkTIFFImageIO_Pointer {
   public:
     itkTIFFImageIO_Pointer();
     itkTIFFImageIO_Pointer(itkTIFFImageIO_Pointer const & p);
     itkTIFFImageIO_Pointer(itkTIFFImageIO * p);
     ~itkTIFFImageIO_Pointer();
     itkTIFFImageIO * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkTIFFImageIO * GetPointer() const;
     bool operator<(itkTIFFImageIO_Pointer const & r) const;
     bool operator>(itkTIFFImageIO_Pointer const & r) const;
     bool operator<=(itkTIFFImageIO_Pointer const & r) const;
     bool operator>=(itkTIFFImageIO_Pointer const & r) const;
     itkTIFFImageIO_Pointer & operator=(itkTIFFImageIO_Pointer const & r);
     itkTIFFImageIO_Pointer & operator=(itkTIFFImageIO * r);
     itkTIFFImageIO * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkTransformFileReader : public itkLightProcessObject {
   public:
     static itkTransformFileReader_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetFileName(char const * _arg);
     virtual void SetFileName(std::string const & _arg);
     virtual char const * GetFileName() const;
     void Update();
     std::list< itkTransformBase_Pointer > * GetTransformList();
   private:
   protected:
     itkTransformFileReader(itkTransformFileReader const & arg0);
     void operator=(itkTransformFileReader const & arg0);
     itkTransformFileReader();
     ~itkTransformFileReader();
 };


 class itkTransformFileReader_Pointer {
   public:
     itkTransformFileReader_Pointer();
     itkTransformFileReader_Pointer(itkTransformFileReader_Pointer const & p);
     itkTransformFileReader_Pointer(itkTransformFileReader * p);
     ~itkTransformFileReader_Pointer();
     itkTransformFileReader * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkTransformFileReader * GetPointer() const;
     bool operator<(itkTransformFileReader_Pointer const & r) const;
     bool operator>(itkTransformFileReader_Pointer const & r) const;
     bool operator<=(itkTransformFileReader_Pointer const & r) const;
     bool operator>=(itkTransformFileReader_Pointer const & r) const;
     itkTransformFileReader_Pointer & operator=(itkTransformFileReader_Pointer const & r);
     itkTransformFileReader_Pointer & operator=(itkTransformFileReader * r);
     itkTransformFileReader * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkTransformFileWriter : public itkLightProcessObject {
   public:
     static itkTransformFileWriter_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetFileName(char const * _arg);
     virtual void SetFileName(std::string const & _arg);
     virtual char const * GetFileName() const;
     void SetAppendOff();
     void SetAppendOn();
     void SetAppendMode(bool mode);
     bool GetAppendMode();
     void SetInput(itkTransformBase const * transform);
     itkTransformBase const * GetInput();
     void AddTransform(itkTransformBase const * transform);
     virtual void SetPrecision(unsigned int const _arg);
     virtual unsigned int GetPrecision() const;
     void Update();
   private:
   protected:
     itkTransformFileWriter(itkTransformFileWriter const & arg0);
     void operator=(itkTransformFileWriter const & arg0);
     itkTransformFileWriter();
     ~itkTransformFileWriter();
 };


 class itkTransformFileWriter_Pointer {
   public:
     itkTransformFileWriter_Pointer();
     itkTransformFileWriter_Pointer(itkTransformFileWriter_Pointer const & p);
     itkTransformFileWriter_Pointer(itkTransformFileWriter * p);
     ~itkTransformFileWriter_Pointer();
     itkTransformFileWriter * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkTransformFileWriter * GetPointer() const;
     bool operator<(itkTransformFileWriter_Pointer const & r) const;
     bool operator>(itkTransformFileWriter_Pointer const & r) const;
     bool operator<=(itkTransformFileWriter_Pointer const & r) const;
     bool operator>=(itkTransformFileWriter_Pointer const & r) const;
     itkTransformFileWriter_Pointer & operator=(itkTransformFileWriter_Pointer const & r);
     itkTransformFileWriter_Pointer & operator=(itkTransformFileWriter * r);
     itkTransformFileWriter * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVTKImageIO : public itkImageIOBase {
   public:
     static itkVTKImageIO_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool CanReadFile(char const * arg0);
     virtual void ReadImageInformation();
     virtual void Read(void * buffer);
     virtual bool CanWriteFile(char const * arg0);
     virtual void WriteImageInformation();
     virtual void Write(void const * buffer);
   private:
     itkVTKImageIO(itkVTKImageIO const & arg0);
     void operator=(itkVTKImageIO const & arg0);
   protected:
     itkVTKImageIO();
     ~itkVTKImageIO();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     bool OpenVTKFileForReading(std::ifstream & os, char const * filename);
     bool OpenVTKFileForWriting(std::ofstream & os, char const * filename);
     void InternalReadImageInformation(std::ifstream & file);
 };


 class itkVTKImageIOFactory : public itkObjectFactoryBase {
   public:
     virtual char const * GetITKSourceVersion() const;
     virtual char const * GetDescription() const;
     static itkVTKImageIOFactory_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     static void RegisterOneFactory();
   private:
     itkVTKImageIOFactory(itkVTKImageIOFactory const & arg0);
     void operator=(itkVTKImageIOFactory const & arg0);
   protected:
     itkVTKImageIOFactory();
     ~itkVTKImageIOFactory();
 };


 class itkVTKImageIOFactory_Pointer {
   public:
     itkVTKImageIOFactory_Pointer();
     itkVTKImageIOFactory_Pointer(itkVTKImageIOFactory_Pointer const & p);
     itkVTKImageIOFactory_Pointer(itkVTKImageIOFactory * p);
     ~itkVTKImageIOFactory_Pointer();
     itkVTKImageIOFactory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVTKImageIOFactory * GetPointer() const;
     bool operator<(itkVTKImageIOFactory_Pointer const & r) const;
     bool operator>(itkVTKImageIOFactory_Pointer const & r) const;
     bool operator<=(itkVTKImageIOFactory_Pointer const & r) const;
     bool operator>=(itkVTKImageIOFactory_Pointer const & r) const;
     itkVTKImageIOFactory_Pointer & operator=(itkVTKImageIOFactory_Pointer const & r);
     itkVTKImageIOFactory_Pointer & operator=(itkVTKImageIOFactory * r);
     itkVTKImageIOFactory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVTKImageIO_Pointer {
   public:
     itkVTKImageIO_Pointer();
     itkVTKImageIO_Pointer(itkVTKImageIO_Pointer const & p);
     itkVTKImageIO_Pointer(itkVTKImageIO * p);
     ~itkVTKImageIO_Pointer();
     itkVTKImageIO * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVTKImageIO * GetPointer() const;
     bool operator<(itkVTKImageIO_Pointer const & r) const;
     bool operator>(itkVTKImageIO_Pointer const & r) const;
     bool operator<=(itkVTKImageIO_Pointer const & r) const;
     bool operator>=(itkVTKImageIO_Pointer const & r) const;
     itkVTKImageIO_Pointer & operator=(itkVTKImageIO_Pointer const & r);
     itkVTKImageIO_Pointer & operator=(itkVTKImageIO * r);
     itkVTKImageIO * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVoxBoCUBImageIO : public itkImageIOBase {
   public:
     static itkVoxBoCUBImageIO_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool CanReadFile(char const * arg0);
     virtual void ReadImageInformation();
     virtual void Read(void * buffer);
     virtual bool CanWriteFile(char const * arg0);
     virtual void WriteImageInformation();
     virtual void Write(void const * buffer);
     itkVoxBoCUBImageIO();
     ~itkVoxBoCUBImageIO();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
   private:
     itkVoxBoCUBImageIO(itkVoxBoCUBImageIO const & arg0);
     void operator=(itkVoxBoCUBImageIO const & arg0);
     bool CheckExtension(char const * arg0, bool & isCompressed);
     itk::GenericCUBFileAdaptor * CreateReader(char const * filename);
     itk::GenericCUBFileAdaptor * CreateWriter(char const * filename);
     void InitializeOrientationMap();
     void SwapBytesIfNecessary(void * buffer, size_t numberOfBytes);
   protected:
 };


 class itkVoxBoCUBImageIOFactory : public itkObjectFactoryBase {
   public:
     virtual char const * GetITKSourceVersion() const;
     virtual char const * GetDescription() const;
     static itkVoxBoCUBImageIOFactory_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     static void RegisterOneFactory();
   private:
     itkVoxBoCUBImageIOFactory(itkVoxBoCUBImageIOFactory const & arg0);
     void operator=(itkVoxBoCUBImageIOFactory const & arg0);
   protected:
     itkVoxBoCUBImageIOFactory();
     ~itkVoxBoCUBImageIOFactory();
 };


 class itkVoxBoCUBImageIOFactory_Pointer {
   public:
     itkVoxBoCUBImageIOFactory_Pointer();
     itkVoxBoCUBImageIOFactory_Pointer(itkVoxBoCUBImageIOFactory_Pointer const & p);
     itkVoxBoCUBImageIOFactory_Pointer(itkVoxBoCUBImageIOFactory * p);
     ~itkVoxBoCUBImageIOFactory_Pointer();
     itkVoxBoCUBImageIOFactory * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVoxBoCUBImageIOFactory * GetPointer() const;
     bool operator<(itkVoxBoCUBImageIOFactory_Pointer const & r) const;
     bool operator>(itkVoxBoCUBImageIOFactory_Pointer const & r) const;
     bool operator<=(itkVoxBoCUBImageIOFactory_Pointer const & r) const;
     bool operator>=(itkVoxBoCUBImageIOFactory_Pointer const & r) const;
     itkVoxBoCUBImageIOFactory_Pointer & operator=(itkVoxBoCUBImageIOFactory_Pointer const & r);
     itkVoxBoCUBImageIOFactory_Pointer & operator=(itkVoxBoCUBImageIOFactory * r);
     itkVoxBoCUBImageIOFactory * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkVoxBoCUBImageIO_Pointer {
   public:
     itkVoxBoCUBImageIO_Pointer();
     itkVoxBoCUBImageIO_Pointer(itkVoxBoCUBImageIO_Pointer const & p);
     itkVoxBoCUBImageIO_Pointer(itkVoxBoCUBImageIO * p);
     ~itkVoxBoCUBImageIO_Pointer();
     itkVoxBoCUBImageIO * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVoxBoCUBImageIO * GetPointer() const;
     bool operator<(itkVoxBoCUBImageIO_Pointer const & r) const;
     bool operator>(itkVoxBoCUBImageIO_Pointer const & r) const;
     bool operator<=(itkVoxBoCUBImageIO_Pointer const & r) const;
     bool operator>=(itkVoxBoCUBImageIO_Pointer const & r) const;
     itkVoxBoCUBImageIO_Pointer & operator=(itkVoxBoCUBImageIO_Pointer const & r);
     itkVoxBoCUBImageIO_Pointer & operator=(itkVoxBoCUBImageIO * r);
     itkVoxBoCUBImageIO * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkAnalyzeImageIO : public itkImageIOBase {
   public:
     static itkAnalyzeImageIO_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool CanReadFile(char const * FileNameToRead);
     virtual void ReadImageInformation();
     virtual void Read(void * buffer);
     virtual bool CanWriteFile(char const * FileNameToWrite);
     virtual void WriteImageInformation();
     virtual void Write(void const * buffer);
     virtual std::vector< double > GetDirection(unsigned int i) const;
     virtual std::vector< double > GetDefaultDirection(unsigned int i) const;
   private:
     enum ValidAnalyzeOrientationFlags {  ITK_ANALYZE_ORIENTATION_RPI_TRANSVERSE = 0,  ITK_ANALYZE_ORIENTATION_RIP_CORONAL = 1,  ITK_ANALYZE_ORIENTATION_PIR_SAGITTAL = 2,  ITK_ANALYZE_ORIENTATION_RAI_TRANSVERSE_FLIPPED = 3,  ITK_ANALYZE_ORIENTATION_RSP_CORONAL_FLIPPED = 4,  ITK_ANALYZE_ORIENTATION_PIL_SAGITTAL_FLIPPED = 5 };
     itkAnalyzeImageIO(itkAnalyzeImageIO const & arg0);
     void operator=(itkAnalyzeImageIO const & arg0);
     void SwapBytesIfNecessary(void * buffer, std::streamoff numberOfPixels);
     void SwapHeaderBytesIfNecessary(itk::dsr * const imageheader);
     void DefineHeaderObjectDataType();
     itkImageIOBase::ByteOrder CheckAnalyzeEndian(itk::dsr const & temphdr);
   protected:
     itkAnalyzeImageIO();
     ~itkAnalyzeImageIO();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkBMPImageIO : public itkImageIOBase {
   public:
     static itkBMPImageIO_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool CanReadFile(char const * arg0);
     virtual void ReadImageInformation();
     virtual void Read(void * buffer);
     virtual bool CanWriteFile(char const * arg0);
     virtual void WriteImageInformation();
     virtual void Write(void const * buffer);
     itkBMPImageIO();
     ~itkBMPImageIO();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
   private:
     itkBMPImageIO(itkBMPImageIO const & arg0);
     void operator=(itkBMPImageIO const & arg0);
     void SwapBytesIfNecessary(void * buffer, unsigned long numberOfPixels);
     void Write32BitsInteger(unsigned int value);
     void Write16BitsInteger(unsigned short value);
   protected:
 };


 class itkBioRadImageIO : public itkImageIOBase {
   public:
     static itkBioRadImageIO_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool CanReadFile(char const * arg0);
     virtual void ReadImageInformation();
     virtual void Read(void * buffer);
     virtual bool CanWriteFile(char const * arg0);
     virtual void WriteImageInformation();
     virtual void Write(void const * buffer);
   private:
     itkBioRadImageIO(itkBioRadImageIO const & arg0);
     void operator=(itkBioRadImageIO const & arg0);
   protected:
     itkBioRadImageIO();
     ~itkBioRadImageIO();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     bool OpenBioRadFileForReading(std::ifstream & os, char const * filename);
     bool OpenBioRadFileForWriting(std::ofstream & os, char const * filename);
     void InternalReadImageInformation(std::ifstream & file);
 };


 class itkBruker2DSEQImageIO : public itkImageIOBase {
   public:
     static itkBruker2DSEQImageIO_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool CanReadFile(char const * FileNameToRead);
     virtual void ReadImageInformation();
     virtual void Read(void * buffer);
     virtual bool CanWriteFile(char const * arg0);
     virtual void WriteImageInformation();
     virtual void Write(void const * arg0);
   private:
     itkBruker2DSEQImageIO(itkBruker2DSEQImageIO const & arg0);
     void operator=(itkBruker2DSEQImageIO const & arg0);
     void SwapBytesIfNecessary(void * buffer, unsigned long numberOfPixels);
   protected:
     itkBruker2DSEQImageIO();
     ~itkBruker2DSEQImageIO();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkDICOMImageIO2 : public itkImageIOBase {
   public:
     static itkDICOMImageIO2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool CanReadFile(char const * arg0);
     virtual void ReadImageInformation();
     virtual void Read(void * buffer);
     virtual bool CanWriteFile(char const * arg0);
     virtual void WriteImageInformation();
     virtual void Write(void const * arg0);
     void GetPatientName(char * name);
     void GetPatientID(char * id);
     void GetPatientSex(char * sex);
     void GetPatientAge(char * age);
     void GetStudyID(char * id);
     void GetPatientDOB(char * dob);
     void GetStudyDescription(char * desc);
     void GetBodyPart(char * part);
     void GetNumberOfSeriesInStudy(char * series);
     void GetNumberOfStudyRelatedSeries(char * series);
     void GetStudyDate(char * date);
     void GetModality(char * modality);
     void GetManufacturer(char * manu);
     void GetInstitution(char * ins);
     void GetModel(char * model);
   private:
     itkDICOMImageIO2(itkDICOMImageIO2 const & arg0);
     void operator=(itkDICOMImageIO2 const & arg0);
   protected:
     itkDICOMImageIO2();
     ~itkDICOMImageIO2();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     void ReadDataCallback(doublebyte group, doublebyte element, itkdicomparser::DICOMParser::VRTypes type, unsigned char * val, quadbyte len);
 };


 class itkGDCMImageIO : public itkImageIOBase {
   public:
     enum TCompressionType {  JPEG = 0,  JPEG2000 = 1 };
     static itkGDCMImageIO_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool CanReadFile(char const * arg0);
     virtual void ReadImageInformation();
     virtual void Read(void * buffer);
     virtual itkImageIOBase::IOComponentType GetInternalComponentType() const;
     virtual bool CanWriteFile(char const * arg0);
     virtual void WriteImageInformation();
     virtual void Write(void const * buffer);
     virtual double GetRescaleSlope() const;
     virtual double GetRescaleIntercept() const;
     virtual char const * GetUIDPrefix() const;
     virtual void SetUIDPrefix(char const * _arg);
     virtual void SetUIDPrefix(std::string const & _arg);
     virtual char const * GetStudyInstanceUID() const;
     virtual char const * GetSeriesInstanceUID() const;
     virtual char const * GetFrameOfReferenceInstanceUID() const;
     virtual void SetKeepOriginalUID(bool const _arg);
     virtual bool GetKeepOriginalUID() const;
     virtual void KeepOriginalUIDOn();
     virtual void KeepOriginalUIDOff();
     void GetPatientName(char * name);
     void GetPatientID(char * id);
     void GetPatientSex(char * sex);
     void GetPatientAge(char * age);
     void GetStudyID(char * id);
     void GetPatientDOB(char * dob);
     void GetStudyDescription(char * desc);
     void GetBodyPart(char * part);
     void GetNumberOfSeriesInStudy(char * series);
     void GetNumberOfStudyRelatedSeries(char * series);
     void GetStudyDate(char * date);
     void GetModality(char * modality);
     void GetManufacturer(char * manu);
     void GetInstitution(char * ins);
     void GetModel(char * model);
     void GetScanOptions(char * options);
     bool GetValueFromTag(std::string const & tag, std::string & value);
     static bool GetLabelFromTag(std::string const & tag, std::string & labelId);
     virtual void SetMaxSizeLoadEntry(long const _arg);
     virtual void SetLoadSequences(bool const _arg);
     virtual bool GetLoadSequences() const;
     virtual void LoadSequencesOn();
     virtual void LoadSequencesOff();
     virtual void SetLoadPrivateTags(bool const _arg);
     virtual bool GetLoadPrivateTags() const;
     virtual void LoadPrivateTagsOn();
     virtual void LoadPrivateTagsOff();
     static void SetLoadSequencesDefault(bool b);
     static void LoadSequencesDefaultOn();
     static void LoadSequencesDefaultOff();
     static bool GetLoadSequencesDefault();
     static void SetLoadPrivateTagsDefault(bool b);
     static void LoadPrivateTagsDefaultOn();
     static void LoadPrivateTagsDefaultOff();
     static bool GetLoadPrivateTagsDefault();
     virtual void SetCompressionType(itkGDCMImageIO::TCompressionType const _arg);
     virtual itkGDCMImageIO::TCompressionType GetCompressionType() const;
   private:
     itkGDCMImageIO(itkGDCMImageIO const & arg0);
     void operator=(itkGDCMImageIO const & arg0);
   protected:
     itkGDCMImageIO();
     ~itkGDCMImageIO();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     bool OpenGDCMFileForReading(std::ifstream & os, char const * filename);
     bool OpenGDCMFileForWriting(std::ofstream & os, char const * filename);
     void InternalReadImageInformation(std::ifstream & file);
 };


 class itkGiplImageIO : public itkImageIOBase {
   public:
     static itkGiplImageIO_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool CanReadFile(char const * arg0);
     virtual void ReadImageInformation();
     virtual void Read(void * buffer);
     virtual bool CanWriteFile(char const * arg0);
     virtual void WriteImageInformation();
     virtual void Write(void const * buffer);
     itkGiplImageIO();
     ~itkGiplImageIO();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
   private:
     itkGiplImageIO(itkGiplImageIO const & arg0);
     void operator=(itkGiplImageIO const & arg0);
     void SwapBytesIfNecessary(void * buffer, unsigned long numberOfPixels);
     bool CheckExtension(char const * arg0);
   protected:
 };


 class itkIPLCommonImageIO : public itkImageIOBase {
   public:
     static itkIPLCommonImageIO_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool CanReadFile(char const * FileNameToRead);
     virtual void ReadImageInformation();
     virtual void ModifyImageInformation();
     virtual std::type_info const & GetPixelTypeInfo() const;
     virtual std::type_info const & GetComponentTypeInfo() const;
     virtual void Read(void * buffer);
     virtual unsigned int GetComponentSize() const;
     virtual bool CanWriteFile(char const * FileNameToWrite);
     virtual void WriteImageInformation();
     virtual void Write(void const * buffer);
     virtual void SortImageListByNameAscend();
     virtual void SortImageListByNameDescend();
   private:
     itkIPLCommonImageIO(itkIPLCommonImageIO const & arg0);
     void operator=(itkIPLCommonImageIO const & arg0);
   protected:
     itkIPLCommonImageIO();
     ~itkIPLCommonImageIO();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     int AddElementToList(char const * const filename, float const sliceLocation, int const offset, int const XDim, int const YDim, int const Key1, int const Key2);
     void sortImageListAscend();
     void sortImageListDescend();
     int statTimeToAscii(void * clock, char * timeString);
     virtual GEImageHeader * ReadHeader(char const * FileNameToRead);
     int GetStringAt(std::ifstream & f, std::streamoff Offset, char * buf, size_t amount, bool throw_exception = true);
     int GetIntAt(std::ifstream & f, std::streamoff Offset, int * ip, bool throw_exception = true);
     int GetShortAt(std::ifstream & f, std::streamoff Offset, short * ip, bool throw_exception = true);
     int GetFloatAt(std::ifstream & f, std::streamoff Offset, float * ip, bool throw_exception = true);
     int GetDoubleAt(std::ifstream & f, std::streamoff Offset, double * ip, bool throw_exception = true);
     short hdr2Short(char * hdr);
     int hdr2Int(char * hdr);
     float hdr2Float(char * hdr);
     double hdr2Double(char * hdr);
 };


 class itkLSMImageIO : public itkTIFFImageIO {
   public:
     static itkLSMImageIO_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool CanReadFile(char const * arg0);
     virtual void ReadImageInformation();
     virtual void Read(void * buffer);
     virtual bool CanWriteFile(char const * arg0);
     virtual void WriteImageInformation();
     virtual void Write(void const * buffer);
   private:
     itkLSMImageIO(itkLSMImageIO const & arg0);
     void operator=(itkLSMImageIO const & arg0);
     void FillZeissStruct(char * z);
   protected:
     itkLSMImageIO();
     ~itkLSMImageIO();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
 };


 class itkMRCImageIO : public itkStreamingImageIOBase {
   public:
     static itkMRCImageIO_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void WriteImageInformation();
     virtual bool CanReadFile(char const * arg0);
     virtual void ReadImageInformation();
     virtual void Read(void * buffer);
     virtual bool CanWriteFile(char const * arg0);
     virtual void Write(void const * buffer);
     ~itkMRCImageIO();
   private:
     itkMRCImageIO(itkMRCImageIO const & arg0);
     void operator=(itkMRCImageIO const & arg0);
     void UpdateHeaderWithMinMaxMean(void const * bufferBegin);
     void UpdateHeaderFromImageIO();
     void InternalReadImageInformation(std::ifstream & is);
     virtual void WriteImageInformation(void const * bufferBegin);
   protected:
     itkMRCImageIO();
     virtual void PrintSelf(std::ostream & os, itkIndent indent) const;
     virtual std::streamoff GetHeaderSize() const;
 };


 class itkSiemensVisionImageIO : public itkIPLCommonImageIO {
   public:
     static itkSiemensVisionImageIO_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool CanReadFile(char const * FileNameToRead);
   private:
     enum SiemensVisionHeaderInfo {  HDR_STUDY_YEAR = 0,  HDR_STUDY_YEAR_LEN = 4,  HDR_STUDY_MONTH = 4,  HDR_STUDY_MONTH_LEN = 4,  HDR_STUDY_DAY = 8,  HDR_STUDY_DAY_LEN = 4,  HDR_ACQ_YEAR = 12,  HDR_ACQ_YEAR_LEN = 4,  HDR_ACQ_MONTH = 16,  HDR_ACQ_MONTH_LEN = 4,  HDR_ACQ_DAY = 20,  HDR_ACQ_DAY_LEN = 4,  HDR_IMAGE_YEAR = 24,  HDR_IMAGE_YEAR_LEN = 4,  HDR_IMAGE_MONTH = 28,  HDR_IMAGE_MONTH_LEN = 4,  HDR_IMAGE_DAY = 32,  HDR_IMAGE_DAY_LEN = 4,  HDR_STUDY_HOUR = 36,  HDR_STUDY_HOUR_LEN = 4,  HDR_STUDY_MIN = 40,  HDR_STUDY_MIN_LEN = 4,  HDR_STUDY_SEC = 44,  HDR_STUDY_SEC_LEN = 4,  HDR_ACQ_HOUR = 52,  HDR_ACQ_HOUR_LEN = 4,  HDR_ACQ_MIN = 56,  HDR_ACQ_MIN_LEN = 4,  HDR_ACQ_SEC = 60,  HDR_ACQ_SEC_LEN = 4,  HDR_IMAGE_HOUR = 68,  HDR_IMAGE_HOUR_LEN = 4,  HDR_IMAGE_MIN = 72,  HDR_IMAGE_MIN_LEN = 4,  HDR_IMAGE_SEC = 76,  HDR_IMAGE_SEC_LEN = 4,  HDR_MANUFAC = 96,  HDR_MANUFAC_LEN = 7,  HDR_INSTUTE_NAME = 105,  HDR_INSTUTE_NAME_LEN = 25,  HDR_ANNOTATION = 186,  HDR_ANNOTATION_LEN = 32,  HDR_MODEL_NAME = 281,  HDR_MODEL_NAME_LEN = 12,  HDR_LMOVE_YEAR = 412,  HDR_LMOVE_YEAR_LEN = 4,  HDR_LMOVE_MONTH = 416,  HDR_LMOVE_MONTH_LEN = 4,  HDR_LMOVE_DAY = 420,  HDR_LMOVE_DAY_LEN = 4,  HDR_LMOVE_HOUR = 424,  HDR_LMOVE_HOUR_LEN = 4,  HDR_LMOVE_MIN = 428,  HDR_LMOVE_MIN_LEN = 4,  HDR_LMOVE_SEC = 432,  HDR_LMOVE_SEC_LEN = 4,  HDR_PAT_NAME = 768,  HDR_PAT_NAME_LEN = 25,  HDR_PAT_ID = 795,  HDR_PAT_ID_LEN = 12,  HDR_DOB_YEAR = 808,  HDR_DOB_YEAR_LEN = 4,  HDR_DOB_MONTH = 812,  HDR_DOB_MONTH_LEN = 4,  HDR_DOB_DAY = 816,  HDR_DOB_DAY_LEN = 4,  HDR_PAT_AGE = 851,  HDR_PAT_AGE_LEN = 3,  HDR_AGE_UNIT = 854,  HDR_AGE_UNIT_LEN = 1,  HDR_REG_YEAR = 1052,  HDR_REG_YEAR_LEN = 4,  HDR_REG_MONTH = 1056,  HDR_REG_MONTH_LEN = 4,  HDR_REG_DAY = 1060,  HDR_REG_DAY_LEN = 4,  HDR_REG_HOUR = 1064,  HDR_REG_HOUR_LEN = 4,  HDR_REG_MIN = 1068,  HDR_REG_MIN_LEN = 4,  HDR_REG_SEC = 1072,  HDR_REG_SEC_LEN = 4,  HDR_SLICE_THCK = 1544,  HDR_SLICE_THCK_LEN = 8,  HDR_TR = 1560,  HDR_TR_LEN = 8,  HDR_TE = 1568,  HDR_TE_LEN = 8,  HDR_FREQ = 1592,  HDR_FREQ_LEN = 8,  HDR_STATION = 1639,  HDR_STATION_LEN = 5,  HDR_CAL_YEAR = 1712,  HDR_CAL_YEAR_LEN = 4,  HDR_CAL_MONTH = 1716,  HDR_CAL_MONTH_LEN = 4,  HDR_CAL_DAY = 1720,  HDR_CAL_DAY_LEN = 4,  HDR_CAL_HOUR = 1724,  HDR_CAL_HOUR_LEN = 4,  HDR_CAL_MIN = 1728,  HDR_CAL_MIN_LEN = 4,  HDR_CAL_SEC = 1732,  HDR_CAL_SEC_LEN = 4,  HDR_COIL = 1767,  HDR_COIL_LEN = 16,  HDR_IMAGE_NUC = 1828,  HDR_IMAGE_NUC_LEN = 4,  HDR_FLIP_ANGLE = 2112,  HDR_FLIP_ANGLE_LEN = 8,  HDR_FIELD = 2560,  HDR_FIELD_LEN = 8,  HDR_DISPLAY_SIZE = 2864,  HDR_DISPLAY_SIZE_LEN = 4,  HDR_SEQPROG_NAME = 2944,  HDR_SEQPROG_NAME_LEN = 65,  HDR_WKC_NAME = 3009,  HDR_WKC_NAME_LEN = 65,  HDR_AUTHOR = 3074,  HDR_AUTHOR_LEN = 9,  HDR_SEQUENCE_TYPE = 3083,  HDR_SEQUENCE_TYPE_LEN = 8,  HDR_FOV_ROW = 3744,  HDR_FOV_ROW_LEN = 8,  HDR_FOV_COLUMN = 3752,  HDR_FOV_COLUMN_LEN = 8,  HDR_CENTER_X = 3768,  HDR_CENTER_X_LEN = 8,  HDR_CENTER_Y = 3776,  HDR_CENTER_Y_LEN = 8,  HDR_CENTER_Z = 3784,  HDR_CENTER_Z_LEN = 8,  HDR_NORMV_X = 3792,  HDR_NORMV_X_LEN = 8,  HDR_NORMV_Y = 3800,  HDR_NORMV_Y_LEN = 8,  HDR_NORMV_Z = 3808,  HDR_NORMV_Z_LEN = 8,  HDR_DIST_ISO = 3816,  HDR_DIST_ISO_LEN = 8,  HDR_ROWV_X = 3832,  HDR_ROWV_X_LEN = 8,  HDR_ROWV_Y = 3840,  HDR_ROWV_Y_LEN = 8,  HDR_ROWV_Z = 3848,  HDR_ROWV_Z_LEN = 8,  HDR_COLMNV_X = 3856,  HDR_COLMNV_X_LEN = 8,  HDR_COLMNV_Y = 3864,  HDR_COLMNV_Y_LEN = 8,  HDR_COLMNV_Z = 3872,  HDR_COLMNV_Z_LEN = 8,  HDR_ORNT_SET1X = 3880,  HDR_ORNT_SET1X_LEN = 3,  HDR_ORNT_SET1Y = 3884,  HDR_ORNT_SET1Y_LEN = 3,  HDR_ORNT_SET1Z = 3888,  HDR_ORNT_SET1Z_LEN = 3,  HDR_ORNT_SET2X = 3892,  HDR_ORNT_SET2X_LEN = 3,  HDR_ORNT_SET2Y = 3896,  HDR_ORNT_SET2Y_LEN = 3,  HDR_ORNT_SET2Z = 3900,  HDR_ORNT_SET2Z_LEN = 3,  HDR_PROTOCOL_NAME = 2944,  HDR_PROTOCOL_NAME_LEN = 64,  HDR_PIXELSIZE_ROW = 5000,  HDR_PIXELSIZE_ROW_LEN = 8,  HDR_PIXELSIZE_CLMN = 5008,  HDR_PIXELSIZE_CLMN_LEN = 8,  TEXT_PAT_ID = 5504,  TEXT_PAT_ID_LEN = 12,  TEXT_PAT_SEX = 5517,  TEXT_PAT_SEX_LEN = 1,  TEXT_PAT_AGE = 5518,  TEXT_PAT_AGE_LEN = 3,  TEXT_AGE_UNIT = 5521,  TEXT_AGE_UNIT_LEN = 1,  TEXT_PAT_POS = 5529,  TEXT_PAT_POS_LEN = 7,  TEXT_IMG_FLAG = 5541,  TEXT_IMG_FLAG_LEN = 5,  TEXT_IMG_NUMBER = 5546,  TEXT_IMG_NUMBER_LEN = 4,  TEXT_IMG_DAY = 5559,  TEXT_IMG_DAY_LEN = 2,  TEXT_IMG_MONTH = 5562,  TEXT_IMG_MONTH_LEN = 3,  TEXT_IMG_YEAR = 5566,  TEXT_IMG_YEAR_LEN = 4,  TEXT_IMG_HOUR = 5571,  TEXT_IMG_HOUR_LEN = 2,  TEXT_IMG_MIN = 5574,  TEXT_IMG_MIN_LEN = 2,  TEXT_ACQ_FLAG = 5577,  TEXT_ACQ_FLAG_LEN = 2,  TEXT_ACQ_MIN = 5583,  TEXT_ACQ_MIN_LEN = 2,  TEXT_ACQ_SEC = 5586,  TEXT_ACQ_SEC_LEN = 2,  TEXT_ANNOTATION = 5601,  TEXT_ANNOTATION_LEN = 32,  TEXT_ORGANIZATION = 5655,  TEXT_ORGANIZATION_LEN = 25,  TEXT_STATION = 5682,  TEXT_STATION_LEN = 5,  TEXT_ACQ_MTRX_PHASE = 5695,  TEXT_ACQ_MTRX_PHASE_LEN = 3,  TEXT_ACQ_PHASE_DIR = 5698,  TEXT_ACQ_PHASE_DIR_LEN = 1,  TEXT_ACQ_MTRX_FREQ = 5700,  TEXT_ACQ_MTRX_FREQ_LEN = 3,  TEXT_ACQ_MTRX_FREQO = 5703,  TEXT_ACQ_MTRX_FREQO_LEN = 1,  TEXT_ACQ_MTRX_FREQS = 5704,  TEXT_ACQ_MTRX_FREQS_LEN = 1,  TEXT_SEQUENCE = 5706,  TEXT_SEQUENCE_LEN = 8,  TEXT_FLIP_ANGLE = 5714,  TEXT_FLIP_ANGLE_LEN = 3,  TEXT_SCAN_FLAG = 5718,  TEXT_SCAN_FLAG_LEN = 4,  TEXT_SCANA_NUM = 5723,  TEXT_SCANA_NUM_LEN = 3,  TEXT_SCANB_NUM = 5726,  TEXT_SCANB_NUM_LEN = 3,  TEXT_TR_FLAG = 5730,  TEXT_TR_FLAG_LEN = 2,  TEXT_TR = 5734,  TEXT_TR_LEN = 7,  TEXT_TE_FLAG = 5742,  TEXT_TE_FLAG_LEN = 2,  TEXT_TE = 5746,  TEXT_TE_LEN = 5,  TEXT_ECHO_NUM = 5752,  TEXT_ECHO_NUM_LEN = 1,  TEXT_THCK_FLAG = 5790,  TEXT_THCK_FLAG_LEN = 2,  TEXT_SLICE_THCK = 5794,  TEXT_SLICE_THCK_LEN = 7,  TEXT_POS_FLAG = 5802,  TEXT_POS_FLAG_LEN = 2,  TEXT_SLICE_POS = 5806,  TEXT_SLICE_POS_LEN = 7,  TEXT_ANGLE_FLAG1 = 5814,  TEXT_ANGLE_FLAG1_LEN = 3,  TEXT_ANGLE_FLAG2 = 5817,  TEXT_ANGLE_FLAG2_LEN = 1,  TEXT_ANGLE_FLAG3 = 5818,  TEXT_ANGLE_FLAG3_LEN = 3,  TEXT_ANGLE = 5821,  TEXT_ANGLE_LEN = 4,  TEXT_FOV_FLAG = 5838,  TEXT_FOV_FLAG_LEN = 3,  TEXT_FOVH = 5842,  TEXT_FOVH_LEN = 3,  TEXT_FOVV = 5846,  TEXT_FOVV_LEN = 3,  TEXT_TABLEPOS_FLAG = 5874,  TEXT_TABLEPOS_FLAG_LEN = 2,  TEXT_TABLE_POS = 5878,  TEXT_TABLE_POS_LEN = 7,  TEXT_STUDY_FLAG = 5938,  TEXT_STUDY_FLAG_LEN = 5,  TEXT_STUDY_NUM = 5943,  TEXT_STUDY_NUM_LEN = 2,  TEXT_DOB_DAY = 5956,  TEXT_DOB_DAY_LEN = 2,  TEXT_DOB_MONTH = 5959,  TEXT_DOB_MONTH_LEN = 3,  TEXT_DOB_YEAR = 5963,  TEXT_DOB_YEAR_LEN = 4,  TEXT_STUDY_FLAG2 = 5992,  TEXT_STUDY_FLAG2_LEN = 3,  TEXT_IMAGE_FLAG2 = 5996,  TEXT_IMAGE_FLAG2_LEN = 3,  TEXT_STUDY_NUM2 = 5999,  TEXT_STUDY_NUM2_LEN = 2,  TEXT_IMAGE_NUM2 = 6002,  TEXT_IMAGE_NUM2_LEN = 2,  TEXT_IMAGE_NUM3 = 6013,  TEXT_IMAGE_NUM3_LEN = 5,  TEXT_MODEL_NAME = 6031,  TEXT_MODEL_NAME_LEN = 15,  TEXT_PAT_NAME = 6058,  TEXT_PAT_NAME_LEN = 25,  TEXT_START_HOUR = 6085,  TEXT_START_HOUR_LEN = 2,  TEXT_START_MIN = 6088,  TEXT_START_MIN_LEN = 2,  TEXT_START_SEC = 6091,  TEXT_START_SEC_LEN = 2,  HDR_TOTAL_LENGTH = 6144 };
     itkSiemensVisionImageIO(itkSiemensVisionImageIO const & arg0);
     void operator=(itkSiemensVisionImageIO const & arg0);
   protected:
     itkSiemensVisionImageIO();
     ~itkSiemensVisionImageIO();
     virtual GEImageHeader * ReadHeader(char const * FileNameToRead);
 };


 class itkDicomImageIO : public itkGDCMImageIO {
   public:
     static itkDicomImageIO_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     ~itkDicomImageIO();
   private:
     itkDicomImageIO(itkDicomImageIO const & arg0);
     void operator=(itkDicomImageIO const & arg0);
   protected:
     itkDicomImageIO();
 };


 class itkGE4ImageIO : public itkIPLCommonImageIO {
   public:
     static itkGE4ImageIO_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool CanReadFile(char const * FileNameToRead);
   private:
     itkGE4ImageIO(itkGE4ImageIO const & arg0);
     float MvtSunf(int numb);
     void operator=(itkGE4ImageIO const & arg0);
   protected:
     itkGE4ImageIO();
     ~itkGE4ImageIO();
     virtual GEImageHeader * ReadHeader(char const * FileNameToRead);
 };


 class itkGE5ImageIO : public itkIPLCommonImageIO {
   public:
     static itkGE5ImageIO_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool CanReadFile(char const * FileNameToRead);
     virtual void ModifyImageInformation();
   private:
     void SwapPixHdr(Ge5xPixelHeader * hdr);
     int CheckGE5xImages(char const * const imageFileTemplate, std::string & reason);
     itkGE5ImageIO(itkGE5ImageIO const & arg0);
     void operator=(itkGE5ImageIO const & arg0);
   protected:
     itkGE5ImageIO();
     ~itkGE5ImageIO();
     virtual GEImageHeader * ReadHeader(char const * FileNameToRead);
 };


 class itkGEAdwImageIO : public itkIPLCommonImageIO {
   public:
     static itkGEAdwImageIO_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual bool CanReadFile(char const * FileNameToRead);
   private:
     enum GE_ADW_DEFINES {  GE_ADW_SU_ID = 0,  GE_ADW_SU_ID_LEN = 4,  GE_ADW_SU_PRODID = 7,  GE_ADW_SU_PRODID_LEN = 13,  GE_ADW_EX_SUID = 116,  GE_ADW_EX_SUID_LEN = 4,  GE_ADW_EX_NO = 124,  GE_ADW_EX_NO_LEN = 2,  GE_ADW_EX_HOSPNAME = 126,  GE_ADW_EX_HOSPNAME_LEN = 33,  GE_ADW_EX_MAGSTRENGTH = 200,  GE_ADW_EX_MAGSTRENGTH_LEN = 4,  GE_ADW_EX_PATID = 204,  GE_ADW_EX_PATID_LEN = 13,  GE_ADW_EX_PATNAME = 217,  GE_ADW_EX_PATNAME_LEN = 25,  GE_ADW_EX_PATAGE = 242,  GE_ADW_EX_PATAGE_LEN = 2,  GE_ADW_EX_PATIAN = 244,  GE_ADW_EX_PATIAN_LEN = 2,  GE_ADW_EX_PATSEX = 246,  GE_ADW_EX_PATSEX_LEN = 2,  GE_ADW_EX_PATWEIGHT = 248,  GE_ADW_EX_PATWEIGHT_LEN = 4,  GE_ADW_EX_HIST = 254,  GE_ADW_EX_HIST_LEN = 61,  GE_ADW_EX_DATETIME = 328,  GE_ADW_EX_DATETIME_LEN = 4,  GE_ADW_EX_REFPHY = 332,  GE_ADW_EX_REFPHY_LEN = 33,  GE_ADW_EX_DIAGRAD = 365,  GE_ADW_EX_DIAGRAD_LEN = 33,  GE_ADW_EX_OP = 398,  GE_ADW_EX_OP_LEN = 4,  GE_ADW_EX_DESC = 402,  GE_ADW_EX_DESC_LEN = 23,  GE_ADW_EX_TYP = 425,  GE_ADW_EX_TYP_LEN = 3,  GE_ADW_EX_FORMAT = 428,  GE_ADW_EX_FORMAT_LEN = 2,  GE_ADW_EX_SYSID = 444,  GE_ADW_EX_SYSID_LEN = 9,  GE_ADW_SE_SUID = 1156,  GE_ADW_SE_SUID_LEN = 4,  GE_ADW_SE_UNIQ = 1160,  GE_ADW_SE_UNIQ_LEN = 2,  GE_ADW_SE_EXNO = 1164,  GE_ADW_SE_EXNO_LEN = 2,  GE_ADW_SE_NO = 1166,  GE_ADW_SE_NO_LEN = 2,  GE_ADW_SE_DATETIME = 1168,  GE_ADW_SE_DATETIME_LEN = 4,  GE_ADW_SE_DESC = 1176,  GE_ADW_SE_DESC_LEN = 30,  GE_ADW_SE_TYP = 1224,  GE_ADW_SE_TYP_LEN = 2,  GE_ADW_SE_PLANE = 1228,  GE_ADW_SE_PLANE_LEN = 2,  GE_ADW_SE_POSITION = 1232,  GE_ADW_SE_POSITION_LEN = 4,  GE_ADW_SE_ENTRY = 1236,  GE_ADW_SE_ENTRY_LEN = 4,  GE_ADW_SE_ANREF = 1240,  GE_ADW_SE_ANREF_LEN = 3,  GE_ADW_SE_CONTRAST = 1274,  GE_ADW_SE_CONTRAST_LEN = 2,  GE_ADW_SE_START_RAS = 1276,  GE_ADW_SE_START_RAS_LEN = 1,  GE_ADW_SE_START_LOC = 1280,  GE_ADW_SE_START_LOC_LEN = 4,  GE_ADW_SE_END_RAS = 1284,  GE_ADW_SE_END_RAS_LEN = 1,  GE_ADW_SE_END_LOC = 1288,  GE_ADW_SE_END_LOC_LEN = 4,  GE_ADW_SE_NUMIMAGES = 1368,  GE_ADW_SE_NUMIMAGES_LEN = 4,  GE_ADW_IM_SUID = 2184,  GE_ADW_IM_SUID_LEN = 4,  GE_ADW_IM_UNIQ = 2188,  GE_ADW_IM_UNIQ_LEN = 2,  GE_ADW_IM_EXNO = 2192,  GE_ADW_IM_EXNO_LEN = 2,  GE_ADW_IM_SENO = 2194,  GE_ADW_IM_SENO_LEN = 2,  GE_ADW_IM_NO = 2196,  GE_ADW_IM_NO_LEN = 2,  GE_ADW_IM_DATETIME = 2200,  GE_ADW_IM_DATETIME_LEN = 4,  GE_ADW_IM_ACTUAL_DT = 2204,  GE_ADW_IM_ACTUAL_DT_LEN = 4,  GE_ADW_IM_SCTIME = 2208,  GE_ADW_IM_SCTIME_LEN = 4,  GE_ADW_IM_SLTHICK = 2212,  GE_ADW_IM_SLTHICK_LEN = 4,  GE_ADW_IM_IMATRIX_X = 2216,  GE_ADW_IM_IMATRIX_X_LEN = 2,  GE_ADW_IM_IMATRIX_Y = 2218,  GE_ADW_IM_IMATRIX_Y_LEN = 2,  GE_ADW_IM_DFOV = 2220,  GE_ADW_IM_DFOV_LEN = 4,  GE_ADW_IM_DFOV_RECT = 2224,  GE_ADW_IM_DFOV_RECT_LEN = 4,  GE_ADW_IM_DIM_X = 2228,  GE_ADW_IM_DIM_X_LEN = 4,  GE_ADW_IM_DIM_Y = 2232,  GE_ADW_IM_DIM_Y_LEN = 4,  GE_ADW_IM_PIXSIZE_X = 2236,  GE_ADW_IM_PIXSIZE_X_LEN = 4,  GE_ADW_IM_PIXSIZE_Y = 2240,  GE_ADW_IM_PIXSIZE_Y_LEN = 4,  GE_ADW_IM_CONTMODE = 2292,  GE_ADW_IM_CONTMODE_LEN = 2,  GE_ADW_IM_PLANE = 2300,  GE_ADW_IM_PLANE_LEN = 2,  GE_ADW_IM_SCANSPACING = 2304,  GE_ADW_IM_SCANSPACING_LEN = 4,  GE_ADW_IM_LOC_RAS = 2312,  GE_ADW_IM_LOC_RAS_LEN = 1,  GE_ADW_IM_LOC = 2316,  GE_ADW_IM_LOC_LEN = 4,  GE_ADW_IM_ULHC_R = 2344,  GE_ADW_IM_ULHC_R_LEN = 4,  GE_ADW_IM_ULHC_A = 2348,  GE_ADW_IM_ULHC_A_LEN = 4,  GE_ADW_IM_ULHC_S = 2352,  GE_ADW_IM_ULHC_S_LEN = 4,  GE_ADW_IM_URHC_R = 2356,  GE_ADW_IM_URHC_R_LEN = 4,  GE_ADW_IM_URHC_A = 2360,  GE_ADW_IM_URHC_A_LEN = 4,  GE_ADW_IM_URHC_S = 2364,  GE_ADW_IM_URHC_S_LEN = 4,  GE_ADW_IM_BRHC_R = 2368,  GE_ADW_IM_BRHC_R_LEN = 4,  GE_ADW_IM_BRHC_A = 2372,  GE_ADW_IM_BRHC_A_LEN = 4,  GE_ADW_IM_BRHC_S = 2376,  GE_ADW_IM_BRHC_S_LEN = 4,  GE_ADW_IM_TR = 2384,  GE_ADW_IM_TR_LEN = 4,  GE_ADW_IM_TI = 2388,  GE_ADW_IM_TI_LEN = 4,  GE_ADW_IM_TE = 2392,  GE_ADW_IM_TE_LEN = 4,  GE_ADW_IM_NUMECHO = 2400,  GE_ADW_IM_NUMECHO_LEN = 2,  GE_ADW_IM_ECHONUM = 2402,  GE_ADW_IM_ECHONUM_LEN = 2,  GE_ADW_IM_NEX = 2408,  GE_ADW_IM_NEX_LEN = 4,  GE_ADW_IM_CONTIG = 2412,  GE_ADW_IM_CONTIG_LEN = 2,  GE_ADW_IM_HRTRATE = 2414,  GE_ADW_IM_HRTRATE_LEN = 2,  GE_ADW_IM_TDEL = 2416,  GE_ADW_IM_TDEL_LEN = 4,  GE_ADW_IM_XMTGAIN = 2438,  GE_ADW_IM_XMTGAIN_LEN = 2,  GE_ADW_IM_MR_FLIP = 2444,  GE_ADW_IM_MR_FLIP_LEN = 2,  GE_ADW_IM_CPHASE = 2452,  GE_ADW_IM_CPHASE_LEN = 2,  GE_ADW_IM_SWAPPF = 2454,  GE_ADW_IM_SWAPPF_LEN = 2,  GE_ADW_IM_OBPLANE = 2464,  GE_ADW_IM_OBPLANE_LEN = 4,  GE_ADW_IM_XMTFREQ = 2472,  GE_ADW_IM_XMTFREQ_LEN = 4,  GE_ADW_IM_PRESCAN_R1 = 2482,  GE_ADW_IM_PRESCAN_R1_LEN = 2,  GE_ADW_IM_PRESCAN_R2 = 2484,  GE_ADW_IM_PRESCAN_R2_LEN = 2,  GE_ADW_IM_IMODE = 2494,  GE_ADW_IM_IMODE_LEN = 2,  GE_ADW_IM_IOPT = 2496,  GE_ADW_IM_IOPT_LEN = 4,  GE_ADW_IM_PSEQ = 2500,  GE_ADW_IM_PSEQ_LEN = 2,  GE_ADW_IM_PSDNAME = 2504,  GE_ADW_IM_PSDNAME_LEN = 33,  GE_ADW_IM_CTYP = 2558,  GE_ADW_IM_CTYP_LEN = 2,  GE_ADW_IM_CNAME = 2560,  GE_ADW_IM_CNAME_LEN = 17,  GE_ADW_IM_SUPP_TECH = 2592,  GE_ADW_IM_SUPP_TECH_LEN = 2,  GE_ADW_IM_VBW = 2596,  GE_ADW_IM_VBW_LEN = 4,  GE_ADW_IM_SLQUANT = 2600,  GE_ADW_IM_SLQUANT_LEN = 2,  GE_ADW_IM_USER0 = 2608,  GE_ADW_IM_USER0_LEN = 4,  GE_ADW_IM_USER1 = 2612,  GE_ADW_IM_USER1_LEN = 4,  GE_ADW_IM_USER2 = 2616,  GE_ADW_IM_USER2_LEN = 4,  GE_ADW_IM_USER3 = 2620,  GE_ADW_IM_USER3_LEN = 4,  GE_ADW_IM_USER4 = 2624,  GE_ADW_IM_USER4_LEN = 4,  GE_ADW_IM_USER5 = 2628,  GE_ADW_IM_USER5_LEN = 4,  GE_ADW_IM_USER6 = 2632,  GE_ADW_IM_USER6_LEN = 4,  GE_ADW_IM_USER7 = 2636,  GE_ADW_IM_USER7_LEN = 4,  GE_ADW_IM_USER8 = 2640,  GE_ADW_IM_USER8_LEN = 4,  GE_ADW_IM_USER9 = 2644,  GE_ADW_IM_USER9_LEN = 4,  GE_ADW_IM_USER10 = 2648,  GE_ADW_IM_USER10_LEN = 4,  GE_ADW_IM_USER11 = 2652,  GE_ADW_IM_USER11_LEN = 4,  GE_ADW_IM_USER12 = 2656,  GE_ADW_IM_USER12_LEN = 4,  GE_ADW_IM_USER13 = 2660,  GE_ADW_IM_USER13_LEN = 4,  GE_ADW_IM_USER14 = 2664,  GE_ADW_IM_USER14_LEN = 4,  GE_ADW_IM_USER15 = 2668,  GE_ADW_IM_USER15_LEN = 4,  GE_ADW_IM_USER16 = 2672,  GE_ADW_IM_USER16_LEN = 4,  GE_ADW_IM_USER17 = 2676,  GE_ADW_IM_USER17_LEN = 4,  GE_ADW_IM_USER18 = 2680,  GE_ADW_IM_USER18_LEN = 4,  GE_ADW_IM_USER19 = 2684,  GE_ADW_IM_USER19_LEN = 4,  GE_ADW_IM_USER20 = 2688,  GE_ADW_IM_USER20_LEN = 4,  GE_ADW_IM_USER21 = 2692,  GE_ADW_IM_USER21_LEN = 4,  GE_ADW_IM_USER22 = 2696,  GE_ADW_IM_USER22_LEN = 4,  GE_ADW_IM_USER23 = 2700,  GE_ADW_IM_USER23_LEN = 4,  GE_ADW_IM_USER24 = 2704,  GE_ADW_IM_USER24_LEN = 4,  GE_ADW_IM_SATBITS = 2756,  GE_ADW_IM_SATBITS_LEN = 2,  GE_ADW_IM_SCIC = 2758,  GE_ADW_IM_SCIC_LEN = 2,  GE_ADW_IM_FLAX = 2778,  GE_ADW_IM_FLAX_LEN = 2,  GE_ADW_IM_VENC = 2780,  GE_ADW_IM_VENC_LEN = 2,  GE_ADW_IM_THK_DISCLMR = 2782,  GE_ADW_IM_THK_DISCLMR_LEN = 2,  GE_ADW_IM_VAS_COLLAPSE = 2790,  GE_ADW_IM_VAS_COLLAPSE_LEN = 2,  GE_ADW_IM_X_AXIS_ROT = 2816,  GE_ADW_IM_X_AXIS_ROT_LEN = 4,  GE_ADW_IM_Y_AXIS_ROT = 2820,  GE_ADW_IM_Y_AXIS_ROT_LEN = 4,  GE_ADW_IM_Z_AXIS_ROT = 2824,  GE_ADW_IM_Z_AXIS_ROT_LEN = 4,  GE_ADW_IM_ECHO_TRN = 2844,  GE_ADW_IM_ECHO_TRN_LEN = 2,  GE_ADW_IM_FRAC_ECHO = 2846,  GE_ADW_IM_FRAC_ECHO_LEN = 2,  GE_ADW_IM_PREP_PULSE = 2848,  GE_ADW_IM_PREP_PULSE_LEN = 2,  GE_ADW_IM_CPHASENUM = 2850,  GE_ADW_IM_CPHASENUM_LEN = 2,  GE_ADW_IM_VAR_ECHO = 2852,  GE_ADW_IM_VAR_ECHO_LEN = 2,  GE_ADW_IM_FREQ_DIR = 2948,  GE_ADW_IM_FREQ_DIR_LEN = 2,  GE_ADW_IM_VMODE = 2950,  GE_ADW_IM_VMODE_LEN = 2,  GE_ADW_FIXED_HDR_LENGTH = 3228,  GE_ADW_VARIABLE_HDR_LENGTH_LEN = 4,  GE_ADW_VARIABLE_HDR_LENGTH = 3232 };
     itkGEAdwImageIO(itkGEAdwImageIO const & arg0);
     void operator=(itkGEAdwImageIO const & arg0);
   protected:
     itkGEAdwImageIO();
     ~itkGEAdwImageIO();
     virtual GEImageHeader * ReadHeader(char const * FileNameToRead);
 };


