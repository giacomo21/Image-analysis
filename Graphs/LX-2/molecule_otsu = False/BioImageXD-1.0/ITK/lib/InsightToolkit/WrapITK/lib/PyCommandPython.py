# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _PyCommandPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PyCommandPython', [dirname(__file__)])
        except ImportError:
            import _PyCommandPython
            return _PyCommandPython
        if fp is not None:
            try:
                _mod = imp.load_module('_PyCommandPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _PyCommandPython = swig_import_helper()
    del swig_import_helper
else:
    import _PyCommandPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import itkEventObjectsPython
import pyBasePython
def itkPyCommand_New():
  return itkPyCommand.New()

class itkPyCommand(ITKCommonBasePython.itkCommand):
    """Proxy of C++ itkPyCommand class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _PyCommandPython.itkPyCommand___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def SetCommandCallable(self, *args):
        """SetCommandCallable(self, PyObject obj)"""
        return _PyCommandPython.itkPyCommand_SetCommandCallable(self, *args)

    def GetCommandCallable(self):
        """GetCommandCallable(self) -> PyObject"""
        return _PyCommandPython.itkPyCommand_GetCommandCallable(self)

    def Execute(self, *args):
        """
        Execute(self, itkObject arg0, itkEventObject arg1)
        Execute(self, itkObject arg0, itkEventObject arg1)
        """
        return _PyCommandPython.itkPyCommand_Execute(self, *args)

    __swig_destroy__ = _PyCommandPython.delete_itkPyCommand
    def cast(*args):
        """cast(itkLightObject obj) -> itkPyCommand"""
        return _PyCommandPython.itkPyCommand_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkPyCommand"""
        return _PyCommandPython.itkPyCommand_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkPyCommand
        
        Create a new object of the class itkPyCommand and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkPyCommand.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkPyCommand.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkPyCommand.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkPyCommand.SetCommandCallable = new_instancemethod(_PyCommandPython.itkPyCommand_SetCommandCallable,None,itkPyCommand)
itkPyCommand.GetCommandCallable = new_instancemethod(_PyCommandPython.itkPyCommand_GetCommandCallable,None,itkPyCommand)
itkPyCommand.Execute = new_instancemethod(_PyCommandPython.itkPyCommand_Execute,None,itkPyCommand)
itkPyCommand.GetPointer = new_instancemethod(_PyCommandPython.itkPyCommand_GetPointer,None,itkPyCommand)
itkPyCommand_swigregister = _PyCommandPython.itkPyCommand_swigregister
itkPyCommand_swigregister(itkPyCommand)

def itkPyCommand___New_orig__():
  """itkPyCommand___New_orig__()"""
  return _PyCommandPython.itkPyCommand___New_orig__()

def itkPyCommand_cast(*args):
  """itkPyCommand_cast(itkLightObject obj) -> itkPyCommand"""
  return _PyCommandPython.itkPyCommand_cast(*args)



