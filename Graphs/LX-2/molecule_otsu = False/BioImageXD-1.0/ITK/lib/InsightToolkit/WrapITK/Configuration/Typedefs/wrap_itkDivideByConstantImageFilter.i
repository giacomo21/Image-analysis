// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkDivideByConstantImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkDivideByConstantImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkDivideByConstantImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkDivideByConstantImageFilterJava
#endif
#ifdef SWIGLUA
%module itkDivideByConstantImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkDivideByConstantImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkDivideByConstantImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkDivideByConstantImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkDivideByConstantImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkDivideByConstantImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkDivideByConstantImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkDivideByConstantImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkDivideByConstantImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkDivideByConstantImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkDivideByConstantImageFilterPython
#endif
#ifdef SWIGR
%module itkDivideByConstantImageFilterR
#endif
#ifdef SWIGRUBY
%module itkDivideByConstantImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkDivideByConstantImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkDivideByConstantImageFilterTcl
#endif
#ifdef SWIGXML
%module itkDivideByConstantImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Review.includes"
%}


%{
%}




%import wrap_vcl_complex.i
%import wrap_ITKRegions.i
%import wrap_itkInPlaceImageFilterB.i
%import wrap_ITKCommonBase.i
%import wrap_itkInPlaceImageFilterA.i


%include itk.i
%include wrap_itkDivideByConstantImageFilter_ext.i


 class itkDivideByConstantImageFilterICF2CFICF2_Pointer {
   public:
     itkDivideByConstantImageFilterICF2CFICF2_Pointer();
     itkDivideByConstantImageFilterICF2CFICF2_Pointer(itkDivideByConstantImageFilterICF2CFICF2_Pointer const & p);
     itkDivideByConstantImageFilterICF2CFICF2_Pointer(itkDivideByConstantImageFilterICF2CFICF2 * p);
     ~itkDivideByConstantImageFilterICF2CFICF2_Pointer();
     itkDivideByConstantImageFilterICF2CFICF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideByConstantImageFilterICF2CFICF2 * GetPointer() const;
     bool operator<(itkDivideByConstantImageFilterICF2CFICF2_Pointer const & r) const;
     bool operator>(itkDivideByConstantImageFilterICF2CFICF2_Pointer const & r) const;
     bool operator<=(itkDivideByConstantImageFilterICF2CFICF2_Pointer const & r) const;
     bool operator>=(itkDivideByConstantImageFilterICF2CFICF2_Pointer const & r) const;
     itkDivideByConstantImageFilterICF2CFICF2_Pointer & operator=(itkDivideByConstantImageFilterICF2CFICF2_Pointer const & r);
     itkDivideByConstantImageFilterICF2CFICF2_Pointer & operator=(itkDivideByConstantImageFilterICF2CFICF2 * r);
     itkDivideByConstantImageFilterICF2CFICF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideByConstantImageFilterICF2CFICF2_Superclass : public itkInPlaceImageFilterICF2ICF2 {
   public:
     static itkDivideByConstantImageFilterICF2CFICF2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Functor::DivideByConstant< std::complex< float >, std::complex< float >, std::complex< float > > & GetFunctor();
     itk::Functor::DivideByConstant< std::complex< float >, std::complex< float >, std::complex< float > > const & GetFunctor() const;
     void SetFunctor(itk::Functor::DivideByConstant< std::complex< float >, std::complex< float >, std::complex< float > > const & functor);
   private:
     itkDivideByConstantImageFilterICF2CFICF2_Superclass(itkDivideByConstantImageFilterICF2CFICF2_Superclass const & arg0);
     void operator=(itkDivideByConstantImageFilterICF2CFICF2_Superclass const & arg0);
   protected:
     itkDivideByConstantImageFilterICF2CFICF2_Superclass();
     ~itkDivideByConstantImageFilterICF2CFICF2_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkDivideByConstantImageFilterICF2CFICF2_Superclass_Pointer {
   public:
     itkDivideByConstantImageFilterICF2CFICF2_Superclass_Pointer();
     itkDivideByConstantImageFilterICF2CFICF2_Superclass_Pointer(itkDivideByConstantImageFilterICF2CFICF2_Superclass_Pointer const & p);
     itkDivideByConstantImageFilterICF2CFICF2_Superclass_Pointer(itkDivideByConstantImageFilterICF2CFICF2_Superclass * p);
     ~itkDivideByConstantImageFilterICF2CFICF2_Superclass_Pointer();
     itkDivideByConstantImageFilterICF2CFICF2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideByConstantImageFilterICF2CFICF2_Superclass * GetPointer() const;
     bool operator<(itkDivideByConstantImageFilterICF2CFICF2_Superclass_Pointer const & r) const;
     bool operator>(itkDivideByConstantImageFilterICF2CFICF2_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideByConstantImageFilterICF2CFICF2_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideByConstantImageFilterICF2CFICF2_Superclass_Pointer const & r) const;
     itkDivideByConstantImageFilterICF2CFICF2_Superclass_Pointer & operator=(itkDivideByConstantImageFilterICF2CFICF2_Superclass_Pointer const & r);
     itkDivideByConstantImageFilterICF2CFICF2_Superclass_Pointer & operator=(itkDivideByConstantImageFilterICF2CFICF2_Superclass * r);
     itkDivideByConstantImageFilterICF2CFICF2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideByConstantImageFilterICF3CFICF3_Pointer {
   public:
     itkDivideByConstantImageFilterICF3CFICF3_Pointer();
     itkDivideByConstantImageFilterICF3CFICF3_Pointer(itkDivideByConstantImageFilterICF3CFICF3_Pointer const & p);
     itkDivideByConstantImageFilterICF3CFICF3_Pointer(itkDivideByConstantImageFilterICF3CFICF3 * p);
     ~itkDivideByConstantImageFilterICF3CFICF3_Pointer();
     itkDivideByConstantImageFilterICF3CFICF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideByConstantImageFilterICF3CFICF3 * GetPointer() const;
     bool operator<(itkDivideByConstantImageFilterICF3CFICF3_Pointer const & r) const;
     bool operator>(itkDivideByConstantImageFilterICF3CFICF3_Pointer const & r) const;
     bool operator<=(itkDivideByConstantImageFilterICF3CFICF3_Pointer const & r) const;
     bool operator>=(itkDivideByConstantImageFilterICF3CFICF3_Pointer const & r) const;
     itkDivideByConstantImageFilterICF3CFICF3_Pointer & operator=(itkDivideByConstantImageFilterICF3CFICF3_Pointer const & r);
     itkDivideByConstantImageFilterICF3CFICF3_Pointer & operator=(itkDivideByConstantImageFilterICF3CFICF3 * r);
     itkDivideByConstantImageFilterICF3CFICF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideByConstantImageFilterICF3CFICF3_Superclass : public itkInPlaceImageFilterICF3ICF3 {
   public:
     static itkDivideByConstantImageFilterICF3CFICF3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Functor::DivideByConstant< std::complex< float >, std::complex< float >, std::complex< float > > & GetFunctor();
     itk::Functor::DivideByConstant< std::complex< float >, std::complex< float >, std::complex< float > > const & GetFunctor() const;
     void SetFunctor(itk::Functor::DivideByConstant< std::complex< float >, std::complex< float >, std::complex< float > > const & functor);
   private:
     itkDivideByConstantImageFilterICF3CFICF3_Superclass(itkDivideByConstantImageFilterICF3CFICF3_Superclass const & arg0);
     void operator=(itkDivideByConstantImageFilterICF3CFICF3_Superclass const & arg0);
   protected:
     itkDivideByConstantImageFilterICF3CFICF3_Superclass();
     ~itkDivideByConstantImageFilterICF3CFICF3_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkDivideByConstantImageFilterICF3CFICF3_Superclass_Pointer {
   public:
     itkDivideByConstantImageFilterICF3CFICF3_Superclass_Pointer();
     itkDivideByConstantImageFilterICF3CFICF3_Superclass_Pointer(itkDivideByConstantImageFilterICF3CFICF3_Superclass_Pointer const & p);
     itkDivideByConstantImageFilterICF3CFICF3_Superclass_Pointer(itkDivideByConstantImageFilterICF3CFICF3_Superclass * p);
     ~itkDivideByConstantImageFilterICF3CFICF3_Superclass_Pointer();
     itkDivideByConstantImageFilterICF3CFICF3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideByConstantImageFilterICF3CFICF3_Superclass * GetPointer() const;
     bool operator<(itkDivideByConstantImageFilterICF3CFICF3_Superclass_Pointer const & r) const;
     bool operator>(itkDivideByConstantImageFilterICF3CFICF3_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideByConstantImageFilterICF3CFICF3_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideByConstantImageFilterICF3CFICF3_Superclass_Pointer const & r) const;
     itkDivideByConstantImageFilterICF3CFICF3_Superclass_Pointer & operator=(itkDivideByConstantImageFilterICF3CFICF3_Superclass_Pointer const & r);
     itkDivideByConstantImageFilterICF3CFICF3_Superclass_Pointer & operator=(itkDivideByConstantImageFilterICF3CFICF3_Superclass * r);
     itkDivideByConstantImageFilterICF3CFICF3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideByConstantImageFilterID2DID2_Pointer {
   public:
     itkDivideByConstantImageFilterID2DID2_Pointer();
     itkDivideByConstantImageFilterID2DID2_Pointer(itkDivideByConstantImageFilterID2DID2_Pointer const & p);
     itkDivideByConstantImageFilterID2DID2_Pointer(itkDivideByConstantImageFilterID2DID2 * p);
     ~itkDivideByConstantImageFilterID2DID2_Pointer();
     itkDivideByConstantImageFilterID2DID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideByConstantImageFilterID2DID2 * GetPointer() const;
     bool operator<(itkDivideByConstantImageFilterID2DID2_Pointer const & r) const;
     bool operator>(itkDivideByConstantImageFilterID2DID2_Pointer const & r) const;
     bool operator<=(itkDivideByConstantImageFilterID2DID2_Pointer const & r) const;
     bool operator>=(itkDivideByConstantImageFilterID2DID2_Pointer const & r) const;
     itkDivideByConstantImageFilterID2DID2_Pointer & operator=(itkDivideByConstantImageFilterID2DID2_Pointer const & r);
     itkDivideByConstantImageFilterID2DID2_Pointer & operator=(itkDivideByConstantImageFilterID2DID2 * r);
     itkDivideByConstantImageFilterID2DID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideByConstantImageFilterID2DID2_Superclass : public itkInPlaceImageFilterID2ID2 {
   public:
     static itkDivideByConstantImageFilterID2DID2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Functor::DivideByConstant< double, double, double > & GetFunctor();
     itk::Functor::DivideByConstant< double, double, double > const & GetFunctor() const;
     void SetFunctor(itk::Functor::DivideByConstant< double, double, double > const & functor);
   private:
     itkDivideByConstantImageFilterID2DID2_Superclass(itkDivideByConstantImageFilterID2DID2_Superclass const & arg0);
     void operator=(itkDivideByConstantImageFilterID2DID2_Superclass const & arg0);
   protected:
     itkDivideByConstantImageFilterID2DID2_Superclass();
     ~itkDivideByConstantImageFilterID2DID2_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkDivideByConstantImageFilterID2DID2_Superclass_Pointer {
   public:
     itkDivideByConstantImageFilterID2DID2_Superclass_Pointer();
     itkDivideByConstantImageFilterID2DID2_Superclass_Pointer(itkDivideByConstantImageFilterID2DID2_Superclass_Pointer const & p);
     itkDivideByConstantImageFilterID2DID2_Superclass_Pointer(itkDivideByConstantImageFilterID2DID2_Superclass * p);
     ~itkDivideByConstantImageFilterID2DID2_Superclass_Pointer();
     itkDivideByConstantImageFilterID2DID2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideByConstantImageFilterID2DID2_Superclass * GetPointer() const;
     bool operator<(itkDivideByConstantImageFilterID2DID2_Superclass_Pointer const & r) const;
     bool operator>(itkDivideByConstantImageFilterID2DID2_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideByConstantImageFilterID2DID2_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideByConstantImageFilterID2DID2_Superclass_Pointer const & r) const;
     itkDivideByConstantImageFilterID2DID2_Superclass_Pointer & operator=(itkDivideByConstantImageFilterID2DID2_Superclass_Pointer const & r);
     itkDivideByConstantImageFilterID2DID2_Superclass_Pointer & operator=(itkDivideByConstantImageFilterID2DID2_Superclass * r);
     itkDivideByConstantImageFilterID2DID2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideByConstantImageFilterID3DID3_Pointer {
   public:
     itkDivideByConstantImageFilterID3DID3_Pointer();
     itkDivideByConstantImageFilterID3DID3_Pointer(itkDivideByConstantImageFilterID3DID3_Pointer const & p);
     itkDivideByConstantImageFilterID3DID3_Pointer(itkDivideByConstantImageFilterID3DID3 * p);
     ~itkDivideByConstantImageFilterID3DID3_Pointer();
     itkDivideByConstantImageFilterID3DID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideByConstantImageFilterID3DID3 * GetPointer() const;
     bool operator<(itkDivideByConstantImageFilterID3DID3_Pointer const & r) const;
     bool operator>(itkDivideByConstantImageFilterID3DID3_Pointer const & r) const;
     bool operator<=(itkDivideByConstantImageFilterID3DID3_Pointer const & r) const;
     bool operator>=(itkDivideByConstantImageFilterID3DID3_Pointer const & r) const;
     itkDivideByConstantImageFilterID3DID3_Pointer & operator=(itkDivideByConstantImageFilterID3DID3_Pointer const & r);
     itkDivideByConstantImageFilterID3DID3_Pointer & operator=(itkDivideByConstantImageFilterID3DID3 * r);
     itkDivideByConstantImageFilterID3DID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideByConstantImageFilterID3DID3_Superclass : public itkInPlaceImageFilterID3ID3 {
   public:
     static itkDivideByConstantImageFilterID3DID3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Functor::DivideByConstant< double, double, double > & GetFunctor();
     itk::Functor::DivideByConstant< double, double, double > const & GetFunctor() const;
     void SetFunctor(itk::Functor::DivideByConstant< double, double, double > const & functor);
   private:
     itkDivideByConstantImageFilterID3DID3_Superclass(itkDivideByConstantImageFilterID3DID3_Superclass const & arg0);
     void operator=(itkDivideByConstantImageFilterID3DID3_Superclass const & arg0);
   protected:
     itkDivideByConstantImageFilterID3DID3_Superclass();
     ~itkDivideByConstantImageFilterID3DID3_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkDivideByConstantImageFilterID3DID3_Superclass_Pointer {
   public:
     itkDivideByConstantImageFilterID3DID3_Superclass_Pointer();
     itkDivideByConstantImageFilterID3DID3_Superclass_Pointer(itkDivideByConstantImageFilterID3DID3_Superclass_Pointer const & p);
     itkDivideByConstantImageFilterID3DID3_Superclass_Pointer(itkDivideByConstantImageFilterID3DID3_Superclass * p);
     ~itkDivideByConstantImageFilterID3DID3_Superclass_Pointer();
     itkDivideByConstantImageFilterID3DID3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideByConstantImageFilterID3DID3_Superclass * GetPointer() const;
     bool operator<(itkDivideByConstantImageFilterID3DID3_Superclass_Pointer const & r) const;
     bool operator>(itkDivideByConstantImageFilterID3DID3_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideByConstantImageFilterID3DID3_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideByConstantImageFilterID3DID3_Superclass_Pointer const & r) const;
     itkDivideByConstantImageFilterID3DID3_Superclass_Pointer & operator=(itkDivideByConstantImageFilterID3DID3_Superclass_Pointer const & r);
     itkDivideByConstantImageFilterID3DID3_Superclass_Pointer & operator=(itkDivideByConstantImageFilterID3DID3_Superclass * r);
     itkDivideByConstantImageFilterID3DID3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideByConstantImageFilterIF2DIF2_Pointer {
   public:
     itkDivideByConstantImageFilterIF2DIF2_Pointer();
     itkDivideByConstantImageFilterIF2DIF2_Pointer(itkDivideByConstantImageFilterIF2DIF2_Pointer const & p);
     itkDivideByConstantImageFilterIF2DIF2_Pointer(itkDivideByConstantImageFilterIF2DIF2 * p);
     ~itkDivideByConstantImageFilterIF2DIF2_Pointer();
     itkDivideByConstantImageFilterIF2DIF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideByConstantImageFilterIF2DIF2 * GetPointer() const;
     bool operator<(itkDivideByConstantImageFilterIF2DIF2_Pointer const & r) const;
     bool operator>(itkDivideByConstantImageFilterIF2DIF2_Pointer const & r) const;
     bool operator<=(itkDivideByConstantImageFilterIF2DIF2_Pointer const & r) const;
     bool operator>=(itkDivideByConstantImageFilterIF2DIF2_Pointer const & r) const;
     itkDivideByConstantImageFilterIF2DIF2_Pointer & operator=(itkDivideByConstantImageFilterIF2DIF2_Pointer const & r);
     itkDivideByConstantImageFilterIF2DIF2_Pointer & operator=(itkDivideByConstantImageFilterIF2DIF2 * r);
     itkDivideByConstantImageFilterIF2DIF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideByConstantImageFilterIF2DIF2_Superclass : public itkInPlaceImageFilterIF2IF2 {
   public:
     static itkDivideByConstantImageFilterIF2DIF2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Functor::DivideByConstant< float, double, float > & GetFunctor();
     itk::Functor::DivideByConstant< float, double, float > const & GetFunctor() const;
     void SetFunctor(itk::Functor::DivideByConstant< float, double, float > const & functor);
   private:
     itkDivideByConstantImageFilterIF2DIF2_Superclass(itkDivideByConstantImageFilterIF2DIF2_Superclass const & arg0);
     void operator=(itkDivideByConstantImageFilterIF2DIF2_Superclass const & arg0);
   protected:
     itkDivideByConstantImageFilterIF2DIF2_Superclass();
     ~itkDivideByConstantImageFilterIF2DIF2_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkDivideByConstantImageFilterIF2DIF2_Superclass_Pointer {
   public:
     itkDivideByConstantImageFilterIF2DIF2_Superclass_Pointer();
     itkDivideByConstantImageFilterIF2DIF2_Superclass_Pointer(itkDivideByConstantImageFilterIF2DIF2_Superclass_Pointer const & p);
     itkDivideByConstantImageFilterIF2DIF2_Superclass_Pointer(itkDivideByConstantImageFilterIF2DIF2_Superclass * p);
     ~itkDivideByConstantImageFilterIF2DIF2_Superclass_Pointer();
     itkDivideByConstantImageFilterIF2DIF2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideByConstantImageFilterIF2DIF2_Superclass * GetPointer() const;
     bool operator<(itkDivideByConstantImageFilterIF2DIF2_Superclass_Pointer const & r) const;
     bool operator>(itkDivideByConstantImageFilterIF2DIF2_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideByConstantImageFilterIF2DIF2_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideByConstantImageFilterIF2DIF2_Superclass_Pointer const & r) const;
     itkDivideByConstantImageFilterIF2DIF2_Superclass_Pointer & operator=(itkDivideByConstantImageFilterIF2DIF2_Superclass_Pointer const & r);
     itkDivideByConstantImageFilterIF2DIF2_Superclass_Pointer & operator=(itkDivideByConstantImageFilterIF2DIF2_Superclass * r);
     itkDivideByConstantImageFilterIF2DIF2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideByConstantImageFilterIF3DIF3_Pointer {
   public:
     itkDivideByConstantImageFilterIF3DIF3_Pointer();
     itkDivideByConstantImageFilterIF3DIF3_Pointer(itkDivideByConstantImageFilterIF3DIF3_Pointer const & p);
     itkDivideByConstantImageFilterIF3DIF3_Pointer(itkDivideByConstantImageFilterIF3DIF3 * p);
     ~itkDivideByConstantImageFilterIF3DIF3_Pointer();
     itkDivideByConstantImageFilterIF3DIF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideByConstantImageFilterIF3DIF3 * GetPointer() const;
     bool operator<(itkDivideByConstantImageFilterIF3DIF3_Pointer const & r) const;
     bool operator>(itkDivideByConstantImageFilterIF3DIF3_Pointer const & r) const;
     bool operator<=(itkDivideByConstantImageFilterIF3DIF3_Pointer const & r) const;
     bool operator>=(itkDivideByConstantImageFilterIF3DIF3_Pointer const & r) const;
     itkDivideByConstantImageFilterIF3DIF3_Pointer & operator=(itkDivideByConstantImageFilterIF3DIF3_Pointer const & r);
     itkDivideByConstantImageFilterIF3DIF3_Pointer & operator=(itkDivideByConstantImageFilterIF3DIF3 * r);
     itkDivideByConstantImageFilterIF3DIF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideByConstantImageFilterIF3DIF3_Superclass : public itkInPlaceImageFilterIF3IF3 {
   public:
     static itkDivideByConstantImageFilterIF3DIF3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Functor::DivideByConstant< float, double, float > & GetFunctor();
     itk::Functor::DivideByConstant< float, double, float > const & GetFunctor() const;
     void SetFunctor(itk::Functor::DivideByConstant< float, double, float > const & functor);
   private:
     itkDivideByConstantImageFilterIF3DIF3_Superclass(itkDivideByConstantImageFilterIF3DIF3_Superclass const & arg0);
     void operator=(itkDivideByConstantImageFilterIF3DIF3_Superclass const & arg0);
   protected:
     itkDivideByConstantImageFilterIF3DIF3_Superclass();
     ~itkDivideByConstantImageFilterIF3DIF3_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkDivideByConstantImageFilterIF3DIF3_Superclass_Pointer {
   public:
     itkDivideByConstantImageFilterIF3DIF3_Superclass_Pointer();
     itkDivideByConstantImageFilterIF3DIF3_Superclass_Pointer(itkDivideByConstantImageFilterIF3DIF3_Superclass_Pointer const & p);
     itkDivideByConstantImageFilterIF3DIF3_Superclass_Pointer(itkDivideByConstantImageFilterIF3DIF3_Superclass * p);
     ~itkDivideByConstantImageFilterIF3DIF3_Superclass_Pointer();
     itkDivideByConstantImageFilterIF3DIF3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideByConstantImageFilterIF3DIF3_Superclass * GetPointer() const;
     bool operator<(itkDivideByConstantImageFilterIF3DIF3_Superclass_Pointer const & r) const;
     bool operator>(itkDivideByConstantImageFilterIF3DIF3_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideByConstantImageFilterIF3DIF3_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideByConstantImageFilterIF3DIF3_Superclass_Pointer const & r) const;
     itkDivideByConstantImageFilterIF3DIF3_Superclass_Pointer & operator=(itkDivideByConstantImageFilterIF3DIF3_Superclass_Pointer const & r);
     itkDivideByConstantImageFilterIF3DIF3_Superclass_Pointer & operator=(itkDivideByConstantImageFilterIF3DIF3_Superclass * r);
     itkDivideByConstantImageFilterIF3DIF3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideByConstantImageFilterIUC2DIUC2_Pointer {
   public:
     itkDivideByConstantImageFilterIUC2DIUC2_Pointer();
     itkDivideByConstantImageFilterIUC2DIUC2_Pointer(itkDivideByConstantImageFilterIUC2DIUC2_Pointer const & p);
     itkDivideByConstantImageFilterIUC2DIUC2_Pointer(itkDivideByConstantImageFilterIUC2DIUC2 * p);
     ~itkDivideByConstantImageFilterIUC2DIUC2_Pointer();
     itkDivideByConstantImageFilterIUC2DIUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideByConstantImageFilterIUC2DIUC2 * GetPointer() const;
     bool operator<(itkDivideByConstantImageFilterIUC2DIUC2_Pointer const & r) const;
     bool operator>(itkDivideByConstantImageFilterIUC2DIUC2_Pointer const & r) const;
     bool operator<=(itkDivideByConstantImageFilterIUC2DIUC2_Pointer const & r) const;
     bool operator>=(itkDivideByConstantImageFilterIUC2DIUC2_Pointer const & r) const;
     itkDivideByConstantImageFilterIUC2DIUC2_Pointer & operator=(itkDivideByConstantImageFilterIUC2DIUC2_Pointer const & r);
     itkDivideByConstantImageFilterIUC2DIUC2_Pointer & operator=(itkDivideByConstantImageFilterIUC2DIUC2 * r);
     itkDivideByConstantImageFilterIUC2DIUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideByConstantImageFilterIUC2DIUC2_Superclass : public itkInPlaceImageFilterIUC2IUC2 {
   public:
     static itkDivideByConstantImageFilterIUC2DIUC2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Functor::DivideByConstant< unsigned char, double, unsigned char > & GetFunctor();
     itk::Functor::DivideByConstant< unsigned char, double, unsigned char > const & GetFunctor() const;
     void SetFunctor(itk::Functor::DivideByConstant< unsigned char, double, unsigned char > const & functor);
   private:
     itkDivideByConstantImageFilterIUC2DIUC2_Superclass(itkDivideByConstantImageFilterIUC2DIUC2_Superclass const & arg0);
     void operator=(itkDivideByConstantImageFilterIUC2DIUC2_Superclass const & arg0);
   protected:
     itkDivideByConstantImageFilterIUC2DIUC2_Superclass();
     ~itkDivideByConstantImageFilterIUC2DIUC2_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkDivideByConstantImageFilterIUC2DIUC2_Superclass_Pointer {
   public:
     itkDivideByConstantImageFilterIUC2DIUC2_Superclass_Pointer();
     itkDivideByConstantImageFilterIUC2DIUC2_Superclass_Pointer(itkDivideByConstantImageFilterIUC2DIUC2_Superclass_Pointer const & p);
     itkDivideByConstantImageFilterIUC2DIUC2_Superclass_Pointer(itkDivideByConstantImageFilterIUC2DIUC2_Superclass * p);
     ~itkDivideByConstantImageFilterIUC2DIUC2_Superclass_Pointer();
     itkDivideByConstantImageFilterIUC2DIUC2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideByConstantImageFilterIUC2DIUC2_Superclass * GetPointer() const;
     bool operator<(itkDivideByConstantImageFilterIUC2DIUC2_Superclass_Pointer const & r) const;
     bool operator>(itkDivideByConstantImageFilterIUC2DIUC2_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideByConstantImageFilterIUC2DIUC2_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideByConstantImageFilterIUC2DIUC2_Superclass_Pointer const & r) const;
     itkDivideByConstantImageFilterIUC2DIUC2_Superclass_Pointer & operator=(itkDivideByConstantImageFilterIUC2DIUC2_Superclass_Pointer const & r);
     itkDivideByConstantImageFilterIUC2DIUC2_Superclass_Pointer & operator=(itkDivideByConstantImageFilterIUC2DIUC2_Superclass * r);
     itkDivideByConstantImageFilterIUC2DIUC2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideByConstantImageFilterIUC3DIUC3_Pointer {
   public:
     itkDivideByConstantImageFilterIUC3DIUC3_Pointer();
     itkDivideByConstantImageFilterIUC3DIUC3_Pointer(itkDivideByConstantImageFilterIUC3DIUC3_Pointer const & p);
     itkDivideByConstantImageFilterIUC3DIUC3_Pointer(itkDivideByConstantImageFilterIUC3DIUC3 * p);
     ~itkDivideByConstantImageFilterIUC3DIUC3_Pointer();
     itkDivideByConstantImageFilterIUC3DIUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideByConstantImageFilterIUC3DIUC3 * GetPointer() const;
     bool operator<(itkDivideByConstantImageFilterIUC3DIUC3_Pointer const & r) const;
     bool operator>(itkDivideByConstantImageFilterIUC3DIUC3_Pointer const & r) const;
     bool operator<=(itkDivideByConstantImageFilterIUC3DIUC3_Pointer const & r) const;
     bool operator>=(itkDivideByConstantImageFilterIUC3DIUC3_Pointer const & r) const;
     itkDivideByConstantImageFilterIUC3DIUC3_Pointer & operator=(itkDivideByConstantImageFilterIUC3DIUC3_Pointer const & r);
     itkDivideByConstantImageFilterIUC3DIUC3_Pointer & operator=(itkDivideByConstantImageFilterIUC3DIUC3 * r);
     itkDivideByConstantImageFilterIUC3DIUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideByConstantImageFilterIUC3DIUC3_Superclass : public itkInPlaceImageFilterIUC3IUC3 {
   public:
     static itkDivideByConstantImageFilterIUC3DIUC3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Functor::DivideByConstant< unsigned char, double, unsigned char > & GetFunctor();
     itk::Functor::DivideByConstant< unsigned char, double, unsigned char > const & GetFunctor() const;
     void SetFunctor(itk::Functor::DivideByConstant< unsigned char, double, unsigned char > const & functor);
   private:
     itkDivideByConstantImageFilterIUC3DIUC3_Superclass(itkDivideByConstantImageFilterIUC3DIUC3_Superclass const & arg0);
     void operator=(itkDivideByConstantImageFilterIUC3DIUC3_Superclass const & arg0);
   protected:
     itkDivideByConstantImageFilterIUC3DIUC3_Superclass();
     ~itkDivideByConstantImageFilterIUC3DIUC3_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkDivideByConstantImageFilterIUC3DIUC3_Superclass_Pointer {
   public:
     itkDivideByConstantImageFilterIUC3DIUC3_Superclass_Pointer();
     itkDivideByConstantImageFilterIUC3DIUC3_Superclass_Pointer(itkDivideByConstantImageFilterIUC3DIUC3_Superclass_Pointer const & p);
     itkDivideByConstantImageFilterIUC3DIUC3_Superclass_Pointer(itkDivideByConstantImageFilterIUC3DIUC3_Superclass * p);
     ~itkDivideByConstantImageFilterIUC3DIUC3_Superclass_Pointer();
     itkDivideByConstantImageFilterIUC3DIUC3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideByConstantImageFilterIUC3DIUC3_Superclass * GetPointer() const;
     bool operator<(itkDivideByConstantImageFilterIUC3DIUC3_Superclass_Pointer const & r) const;
     bool operator>(itkDivideByConstantImageFilterIUC3DIUC3_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideByConstantImageFilterIUC3DIUC3_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideByConstantImageFilterIUC3DIUC3_Superclass_Pointer const & r) const;
     itkDivideByConstantImageFilterIUC3DIUC3_Superclass_Pointer & operator=(itkDivideByConstantImageFilterIUC3DIUC3_Superclass_Pointer const & r);
     itkDivideByConstantImageFilterIUC3DIUC3_Superclass_Pointer & operator=(itkDivideByConstantImageFilterIUC3DIUC3_Superclass * r);
     itkDivideByConstantImageFilterIUC3DIUC3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideByConstantImageFilterIUL2DIUL2_Pointer {
   public:
     itkDivideByConstantImageFilterIUL2DIUL2_Pointer();
     itkDivideByConstantImageFilterIUL2DIUL2_Pointer(itkDivideByConstantImageFilterIUL2DIUL2_Pointer const & p);
     itkDivideByConstantImageFilterIUL2DIUL2_Pointer(itkDivideByConstantImageFilterIUL2DIUL2 * p);
     ~itkDivideByConstantImageFilterIUL2DIUL2_Pointer();
     itkDivideByConstantImageFilterIUL2DIUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideByConstantImageFilterIUL2DIUL2 * GetPointer() const;
     bool operator<(itkDivideByConstantImageFilterIUL2DIUL2_Pointer const & r) const;
     bool operator>(itkDivideByConstantImageFilterIUL2DIUL2_Pointer const & r) const;
     bool operator<=(itkDivideByConstantImageFilterIUL2DIUL2_Pointer const & r) const;
     bool operator>=(itkDivideByConstantImageFilterIUL2DIUL2_Pointer const & r) const;
     itkDivideByConstantImageFilterIUL2DIUL2_Pointer & operator=(itkDivideByConstantImageFilterIUL2DIUL2_Pointer const & r);
     itkDivideByConstantImageFilterIUL2DIUL2_Pointer & operator=(itkDivideByConstantImageFilterIUL2DIUL2 * r);
     itkDivideByConstantImageFilterIUL2DIUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideByConstantImageFilterIUL2DIUL2_Superclass : public itkInPlaceImageFilterIUL2IUL2 {
   public:
     static itkDivideByConstantImageFilterIUL2DIUL2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Functor::DivideByConstant< unsigned long, double, unsigned long > & GetFunctor();
     itk::Functor::DivideByConstant< unsigned long, double, unsigned long > const & GetFunctor() const;
     void SetFunctor(itk::Functor::DivideByConstant< unsigned long, double, unsigned long > const & functor);
   private:
     itkDivideByConstantImageFilterIUL2DIUL2_Superclass(itkDivideByConstantImageFilterIUL2DIUL2_Superclass const & arg0);
     void operator=(itkDivideByConstantImageFilterIUL2DIUL2_Superclass const & arg0);
   protected:
     itkDivideByConstantImageFilterIUL2DIUL2_Superclass();
     ~itkDivideByConstantImageFilterIUL2DIUL2_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkDivideByConstantImageFilterIUL2DIUL2_Superclass_Pointer {
   public:
     itkDivideByConstantImageFilterIUL2DIUL2_Superclass_Pointer();
     itkDivideByConstantImageFilterIUL2DIUL2_Superclass_Pointer(itkDivideByConstantImageFilterIUL2DIUL2_Superclass_Pointer const & p);
     itkDivideByConstantImageFilterIUL2DIUL2_Superclass_Pointer(itkDivideByConstantImageFilterIUL2DIUL2_Superclass * p);
     ~itkDivideByConstantImageFilterIUL2DIUL2_Superclass_Pointer();
     itkDivideByConstantImageFilterIUL2DIUL2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideByConstantImageFilterIUL2DIUL2_Superclass * GetPointer() const;
     bool operator<(itkDivideByConstantImageFilterIUL2DIUL2_Superclass_Pointer const & r) const;
     bool operator>(itkDivideByConstantImageFilterIUL2DIUL2_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideByConstantImageFilterIUL2DIUL2_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideByConstantImageFilterIUL2DIUL2_Superclass_Pointer const & r) const;
     itkDivideByConstantImageFilterIUL2DIUL2_Superclass_Pointer & operator=(itkDivideByConstantImageFilterIUL2DIUL2_Superclass_Pointer const & r);
     itkDivideByConstantImageFilterIUL2DIUL2_Superclass_Pointer & operator=(itkDivideByConstantImageFilterIUL2DIUL2_Superclass * r);
     itkDivideByConstantImageFilterIUL2DIUL2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideByConstantImageFilterIUL3DIUL3_Pointer {
   public:
     itkDivideByConstantImageFilterIUL3DIUL3_Pointer();
     itkDivideByConstantImageFilterIUL3DIUL3_Pointer(itkDivideByConstantImageFilterIUL3DIUL3_Pointer const & p);
     itkDivideByConstantImageFilterIUL3DIUL3_Pointer(itkDivideByConstantImageFilterIUL3DIUL3 * p);
     ~itkDivideByConstantImageFilterIUL3DIUL3_Pointer();
     itkDivideByConstantImageFilterIUL3DIUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideByConstantImageFilterIUL3DIUL3 * GetPointer() const;
     bool operator<(itkDivideByConstantImageFilterIUL3DIUL3_Pointer const & r) const;
     bool operator>(itkDivideByConstantImageFilterIUL3DIUL3_Pointer const & r) const;
     bool operator<=(itkDivideByConstantImageFilterIUL3DIUL3_Pointer const & r) const;
     bool operator>=(itkDivideByConstantImageFilterIUL3DIUL3_Pointer const & r) const;
     itkDivideByConstantImageFilterIUL3DIUL3_Pointer & operator=(itkDivideByConstantImageFilterIUL3DIUL3_Pointer const & r);
     itkDivideByConstantImageFilterIUL3DIUL3_Pointer & operator=(itkDivideByConstantImageFilterIUL3DIUL3 * r);
     itkDivideByConstantImageFilterIUL3DIUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideByConstantImageFilterIUL3DIUL3_Superclass : public itkInPlaceImageFilterIUL3IUL3 {
   public:
     static itkDivideByConstantImageFilterIUL3DIUL3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Functor::DivideByConstant< unsigned long, double, unsigned long > & GetFunctor();
     itk::Functor::DivideByConstant< unsigned long, double, unsigned long > const & GetFunctor() const;
     void SetFunctor(itk::Functor::DivideByConstant< unsigned long, double, unsigned long > const & functor);
   private:
     itkDivideByConstantImageFilterIUL3DIUL3_Superclass(itkDivideByConstantImageFilterIUL3DIUL3_Superclass const & arg0);
     void operator=(itkDivideByConstantImageFilterIUL3DIUL3_Superclass const & arg0);
   protected:
     itkDivideByConstantImageFilterIUL3DIUL3_Superclass();
     ~itkDivideByConstantImageFilterIUL3DIUL3_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkDivideByConstantImageFilterIUL3DIUL3_Superclass_Pointer {
   public:
     itkDivideByConstantImageFilterIUL3DIUL3_Superclass_Pointer();
     itkDivideByConstantImageFilterIUL3DIUL3_Superclass_Pointer(itkDivideByConstantImageFilterIUL3DIUL3_Superclass_Pointer const & p);
     itkDivideByConstantImageFilterIUL3DIUL3_Superclass_Pointer(itkDivideByConstantImageFilterIUL3DIUL3_Superclass * p);
     ~itkDivideByConstantImageFilterIUL3DIUL3_Superclass_Pointer();
     itkDivideByConstantImageFilterIUL3DIUL3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideByConstantImageFilterIUL3DIUL3_Superclass * GetPointer() const;
     bool operator<(itkDivideByConstantImageFilterIUL3DIUL3_Superclass_Pointer const & r) const;
     bool operator>(itkDivideByConstantImageFilterIUL3DIUL3_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideByConstantImageFilterIUL3DIUL3_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideByConstantImageFilterIUL3DIUL3_Superclass_Pointer const & r) const;
     itkDivideByConstantImageFilterIUL3DIUL3_Superclass_Pointer & operator=(itkDivideByConstantImageFilterIUL3DIUL3_Superclass_Pointer const & r);
     itkDivideByConstantImageFilterIUL3DIUL3_Superclass_Pointer & operator=(itkDivideByConstantImageFilterIUL3DIUL3_Superclass * r);
     itkDivideByConstantImageFilterIUL3DIUL3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideByConstantImageFilterIUS2DIUS2_Pointer {
   public:
     itkDivideByConstantImageFilterIUS2DIUS2_Pointer();
     itkDivideByConstantImageFilterIUS2DIUS2_Pointer(itkDivideByConstantImageFilterIUS2DIUS2_Pointer const & p);
     itkDivideByConstantImageFilterIUS2DIUS2_Pointer(itkDivideByConstantImageFilterIUS2DIUS2 * p);
     ~itkDivideByConstantImageFilterIUS2DIUS2_Pointer();
     itkDivideByConstantImageFilterIUS2DIUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideByConstantImageFilterIUS2DIUS2 * GetPointer() const;
     bool operator<(itkDivideByConstantImageFilterIUS2DIUS2_Pointer const & r) const;
     bool operator>(itkDivideByConstantImageFilterIUS2DIUS2_Pointer const & r) const;
     bool operator<=(itkDivideByConstantImageFilterIUS2DIUS2_Pointer const & r) const;
     bool operator>=(itkDivideByConstantImageFilterIUS2DIUS2_Pointer const & r) const;
     itkDivideByConstantImageFilterIUS2DIUS2_Pointer & operator=(itkDivideByConstantImageFilterIUS2DIUS2_Pointer const & r);
     itkDivideByConstantImageFilterIUS2DIUS2_Pointer & operator=(itkDivideByConstantImageFilterIUS2DIUS2 * r);
     itkDivideByConstantImageFilterIUS2DIUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideByConstantImageFilterIUS2DIUS2_Superclass : public itkInPlaceImageFilterIUS2IUS2 {
   public:
     static itkDivideByConstantImageFilterIUS2DIUS2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Functor::DivideByConstant< unsigned short, double, unsigned short > & GetFunctor();
     itk::Functor::DivideByConstant< unsigned short, double, unsigned short > const & GetFunctor() const;
     void SetFunctor(itk::Functor::DivideByConstant< unsigned short, double, unsigned short > const & functor);
   private:
     itkDivideByConstantImageFilterIUS2DIUS2_Superclass(itkDivideByConstantImageFilterIUS2DIUS2_Superclass const & arg0);
     void operator=(itkDivideByConstantImageFilterIUS2DIUS2_Superclass const & arg0);
   protected:
     itkDivideByConstantImageFilterIUS2DIUS2_Superclass();
     ~itkDivideByConstantImageFilterIUS2DIUS2_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkDivideByConstantImageFilterIUS2DIUS2_Superclass_Pointer {
   public:
     itkDivideByConstantImageFilterIUS2DIUS2_Superclass_Pointer();
     itkDivideByConstantImageFilterIUS2DIUS2_Superclass_Pointer(itkDivideByConstantImageFilterIUS2DIUS2_Superclass_Pointer const & p);
     itkDivideByConstantImageFilterIUS2DIUS2_Superclass_Pointer(itkDivideByConstantImageFilterIUS2DIUS2_Superclass * p);
     ~itkDivideByConstantImageFilterIUS2DIUS2_Superclass_Pointer();
     itkDivideByConstantImageFilterIUS2DIUS2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideByConstantImageFilterIUS2DIUS2_Superclass * GetPointer() const;
     bool operator<(itkDivideByConstantImageFilterIUS2DIUS2_Superclass_Pointer const & r) const;
     bool operator>(itkDivideByConstantImageFilterIUS2DIUS2_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideByConstantImageFilterIUS2DIUS2_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideByConstantImageFilterIUS2DIUS2_Superclass_Pointer const & r) const;
     itkDivideByConstantImageFilterIUS2DIUS2_Superclass_Pointer & operator=(itkDivideByConstantImageFilterIUS2DIUS2_Superclass_Pointer const & r);
     itkDivideByConstantImageFilterIUS2DIUS2_Superclass_Pointer & operator=(itkDivideByConstantImageFilterIUS2DIUS2_Superclass * r);
     itkDivideByConstantImageFilterIUS2DIUS2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideByConstantImageFilterIUS3DIUS3_Pointer {
   public:
     itkDivideByConstantImageFilterIUS3DIUS3_Pointer();
     itkDivideByConstantImageFilterIUS3DIUS3_Pointer(itkDivideByConstantImageFilterIUS3DIUS3_Pointer const & p);
     itkDivideByConstantImageFilterIUS3DIUS3_Pointer(itkDivideByConstantImageFilterIUS3DIUS3 * p);
     ~itkDivideByConstantImageFilterIUS3DIUS3_Pointer();
     itkDivideByConstantImageFilterIUS3DIUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideByConstantImageFilterIUS3DIUS3 * GetPointer() const;
     bool operator<(itkDivideByConstantImageFilterIUS3DIUS3_Pointer const & r) const;
     bool operator>(itkDivideByConstantImageFilterIUS3DIUS3_Pointer const & r) const;
     bool operator<=(itkDivideByConstantImageFilterIUS3DIUS3_Pointer const & r) const;
     bool operator>=(itkDivideByConstantImageFilterIUS3DIUS3_Pointer const & r) const;
     itkDivideByConstantImageFilterIUS3DIUS3_Pointer & operator=(itkDivideByConstantImageFilterIUS3DIUS3_Pointer const & r);
     itkDivideByConstantImageFilterIUS3DIUS3_Pointer & operator=(itkDivideByConstantImageFilterIUS3DIUS3 * r);
     itkDivideByConstantImageFilterIUS3DIUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideByConstantImageFilterIUS3DIUS3_Superclass : public itkInPlaceImageFilterIUS3IUS3 {
   public:
     static itkDivideByConstantImageFilterIUS3DIUS3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Functor::DivideByConstant< unsigned short, double, unsigned short > & GetFunctor();
     itk::Functor::DivideByConstant< unsigned short, double, unsigned short > const & GetFunctor() const;
     void SetFunctor(itk::Functor::DivideByConstant< unsigned short, double, unsigned short > const & functor);
   private:
     itkDivideByConstantImageFilterIUS3DIUS3_Superclass(itkDivideByConstantImageFilterIUS3DIUS3_Superclass const & arg0);
     void operator=(itkDivideByConstantImageFilterIUS3DIUS3_Superclass const & arg0);
   protected:
     itkDivideByConstantImageFilterIUS3DIUS3_Superclass();
     ~itkDivideByConstantImageFilterIUS3DIUS3_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkDivideByConstantImageFilterIUS3DIUS3_Superclass_Pointer {
   public:
     itkDivideByConstantImageFilterIUS3DIUS3_Superclass_Pointer();
     itkDivideByConstantImageFilterIUS3DIUS3_Superclass_Pointer(itkDivideByConstantImageFilterIUS3DIUS3_Superclass_Pointer const & p);
     itkDivideByConstantImageFilterIUS3DIUS3_Superclass_Pointer(itkDivideByConstantImageFilterIUS3DIUS3_Superclass * p);
     ~itkDivideByConstantImageFilterIUS3DIUS3_Superclass_Pointer();
     itkDivideByConstantImageFilterIUS3DIUS3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDivideByConstantImageFilterIUS3DIUS3_Superclass * GetPointer() const;
     bool operator<(itkDivideByConstantImageFilterIUS3DIUS3_Superclass_Pointer const & r) const;
     bool operator>(itkDivideByConstantImageFilterIUS3DIUS3_Superclass_Pointer const & r) const;
     bool operator<=(itkDivideByConstantImageFilterIUS3DIUS3_Superclass_Pointer const & r) const;
     bool operator>=(itkDivideByConstantImageFilterIUS3DIUS3_Superclass_Pointer const & r) const;
     itkDivideByConstantImageFilterIUS3DIUS3_Superclass_Pointer & operator=(itkDivideByConstantImageFilterIUS3DIUS3_Superclass_Pointer const & r);
     itkDivideByConstantImageFilterIUS3DIUS3_Superclass_Pointer & operator=(itkDivideByConstantImageFilterIUS3DIUS3_Superclass * r);
     itkDivideByConstantImageFilterIUS3DIUS3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDivideByConstantImageFilterICF2CFICF2 : public itkDivideByConstantImageFilterICF2CFICF2_Superclass {
   public:
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDivideByConstantImageFilterICF2CFICF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetConstant(vcl_complexF ct);
     vcl_complexF const & GetConstant() const;
   private:
     itkDivideByConstantImageFilterICF2CFICF2(itkDivideByConstantImageFilterICF2CFICF2 const & arg0);
     void operator=(itkDivideByConstantImageFilterICF2CFICF2 const & arg0);
   protected:
     itkDivideByConstantImageFilterICF2CFICF2();
     ~itkDivideByConstantImageFilterICF2CFICF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkDivideByConstantImageFilterICF3CFICF3 : public itkDivideByConstantImageFilterICF3CFICF3_Superclass {
   public:
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDivideByConstantImageFilterICF3CFICF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetConstant(vcl_complexF ct);
     vcl_complexF const & GetConstant() const;
   private:
     itkDivideByConstantImageFilterICF3CFICF3(itkDivideByConstantImageFilterICF3CFICF3 const & arg0);
     void operator=(itkDivideByConstantImageFilterICF3CFICF3 const & arg0);
   protected:
     itkDivideByConstantImageFilterICF3CFICF3();
     ~itkDivideByConstantImageFilterICF3CFICF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkDivideByConstantImageFilterID2DID2 : public itkDivideByConstantImageFilterID2DID2_Superclass {
   public:
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDivideByConstantImageFilterID2DID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetConstant(double ct);
     double const & GetConstant() const;
   private:
     itkDivideByConstantImageFilterID2DID2(itkDivideByConstantImageFilterID2DID2 const & arg0);
     void operator=(itkDivideByConstantImageFilterID2DID2 const & arg0);
   protected:
     itkDivideByConstantImageFilterID2DID2();
     ~itkDivideByConstantImageFilterID2DID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkDivideByConstantImageFilterID3DID3 : public itkDivideByConstantImageFilterID3DID3_Superclass {
   public:
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDivideByConstantImageFilterID3DID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetConstant(double ct);
     double const & GetConstant() const;
   private:
     itkDivideByConstantImageFilterID3DID3(itkDivideByConstantImageFilterID3DID3 const & arg0);
     void operator=(itkDivideByConstantImageFilterID3DID3 const & arg0);
   protected:
     itkDivideByConstantImageFilterID3DID3();
     ~itkDivideByConstantImageFilterID3DID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkDivideByConstantImageFilterIF2DIF2 : public itkDivideByConstantImageFilterIF2DIF2_Superclass {
   public:
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDivideByConstantImageFilterIF2DIF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetConstant(double ct);
     double const & GetConstant() const;
   private:
     itkDivideByConstantImageFilterIF2DIF2(itkDivideByConstantImageFilterIF2DIF2 const & arg0);
     void operator=(itkDivideByConstantImageFilterIF2DIF2 const & arg0);
   protected:
     itkDivideByConstantImageFilterIF2DIF2();
     ~itkDivideByConstantImageFilterIF2DIF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkDivideByConstantImageFilterIF3DIF3 : public itkDivideByConstantImageFilterIF3DIF3_Superclass {
   public:
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDivideByConstantImageFilterIF3DIF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetConstant(double ct);
     double const & GetConstant() const;
   private:
     itkDivideByConstantImageFilterIF3DIF3(itkDivideByConstantImageFilterIF3DIF3 const & arg0);
     void operator=(itkDivideByConstantImageFilterIF3DIF3 const & arg0);
   protected:
     itkDivideByConstantImageFilterIF3DIF3();
     ~itkDivideByConstantImageFilterIF3DIF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkDivideByConstantImageFilterIUC2DIUC2 : public itkDivideByConstantImageFilterIUC2DIUC2_Superclass {
   public:
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDivideByConstantImageFilterIUC2DIUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetConstant(double ct);
     double const & GetConstant() const;
   private:
     itkDivideByConstantImageFilterIUC2DIUC2(itkDivideByConstantImageFilterIUC2DIUC2 const & arg0);
     void operator=(itkDivideByConstantImageFilterIUC2DIUC2 const & arg0);
   protected:
     itkDivideByConstantImageFilterIUC2DIUC2();
     ~itkDivideByConstantImageFilterIUC2DIUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkDivideByConstantImageFilterIUC3DIUC3 : public itkDivideByConstantImageFilterIUC3DIUC3_Superclass {
   public:
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDivideByConstantImageFilterIUC3DIUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetConstant(double ct);
     double const & GetConstant() const;
   private:
     itkDivideByConstantImageFilterIUC3DIUC3(itkDivideByConstantImageFilterIUC3DIUC3 const & arg0);
     void operator=(itkDivideByConstantImageFilterIUC3DIUC3 const & arg0);
   protected:
     itkDivideByConstantImageFilterIUC3DIUC3();
     ~itkDivideByConstantImageFilterIUC3DIUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkDivideByConstantImageFilterIUL2DIUL2 : public itkDivideByConstantImageFilterIUL2DIUL2_Superclass {
   public:
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDivideByConstantImageFilterIUL2DIUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetConstant(double ct);
     double const & GetConstant() const;
   private:
     itkDivideByConstantImageFilterIUL2DIUL2(itkDivideByConstantImageFilterIUL2DIUL2 const & arg0);
     void operator=(itkDivideByConstantImageFilterIUL2DIUL2 const & arg0);
   protected:
     itkDivideByConstantImageFilterIUL2DIUL2();
     ~itkDivideByConstantImageFilterIUL2DIUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkDivideByConstantImageFilterIUL3DIUL3 : public itkDivideByConstantImageFilterIUL3DIUL3_Superclass {
   public:
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDivideByConstantImageFilterIUL3DIUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetConstant(double ct);
     double const & GetConstant() const;
   private:
     itkDivideByConstantImageFilterIUL3DIUL3(itkDivideByConstantImageFilterIUL3DIUL3 const & arg0);
     void operator=(itkDivideByConstantImageFilterIUL3DIUL3 const & arg0);
   protected:
     itkDivideByConstantImageFilterIUL3DIUL3();
     ~itkDivideByConstantImageFilterIUL3DIUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkDivideByConstantImageFilterIUS2DIUS2 : public itkDivideByConstantImageFilterIUS2DIUS2_Superclass {
   public:
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDivideByConstantImageFilterIUS2DIUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetConstant(double ct);
     double const & GetConstant() const;
   private:
     itkDivideByConstantImageFilterIUS2DIUS2(itkDivideByConstantImageFilterIUS2DIUS2 const & arg0);
     void operator=(itkDivideByConstantImageFilterIUS2DIUS2 const & arg0);
   protected:
     itkDivideByConstantImageFilterIUS2DIUS2();
     ~itkDivideByConstantImageFilterIUS2DIUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkDivideByConstantImageFilterIUS3DIUS3 : public itkDivideByConstantImageFilterIUS3DIUS3_Superclass {
   public:
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDivideByConstantImageFilterIUS3DIUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetConstant(double ct);
     double const & GetConstant() const;
   private:
     itkDivideByConstantImageFilterIUS3DIUS3(itkDivideByConstantImageFilterIUS3DIUS3 const & arg0);
     void operator=(itkDivideByConstantImageFilterIUS3DIUS3 const & arg0);
   protected:
     itkDivideByConstantImageFilterIUS3DIUS3();
     ~itkDivideByConstantImageFilterIUS3DIUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


