// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkEuclideanDistanceChicken
#endif
#ifdef SWIGCSHARP
%module itkEuclideanDistanceCsharp
#endif
#ifdef SWIGGUILE
%module itkEuclideanDistanceGuile
#endif
#ifdef SWIGJAVA
%module itkEuclideanDistanceJava
#endif
#ifdef SWIGLUA
%module itkEuclideanDistanceLua
#endif
#ifdef SWIGMODULA3
%module itkEuclideanDistanceModula3
#endif
#ifdef SWIGMZSCHEME
%module itkEuclideanDistanceMzscheme
#endif
#ifdef SWIGOCAML
%module itkEuclideanDistanceOcaml
#endif
#ifdef SWIGPERL
%module itkEuclideanDistancePerl
#endif
#ifdef SWIGPERL5
%module itkEuclideanDistancePerl5
#endif
#ifdef SWIGPHP
%module itkEuclideanDistancePhp
#endif
#ifdef SWIGPHP4
%module itkEuclideanDistancePhp4
#endif
#ifdef SWIGPHP5
%module itkEuclideanDistancePhp5
#endif
#ifdef SWIGPIKE
%module itkEuclideanDistancePike
#endif
#ifdef SWIGPYTHON
%module itkEuclideanDistancePython
#endif
#ifdef SWIGR
%module itkEuclideanDistanceR
#endif
#ifdef SWIGRUBY
%module itkEuclideanDistanceRuby
#endif
#ifdef SWIGSEXP
%module itkEuclideanDistanceSexp
#endif
#ifdef SWIGTCL
%module itkEuclideanDistanceTcl
#endif
#ifdef SWIGXML
%module itkEuclideanDistanceXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Numerics.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkDistanceMetric.i
%import wrap_itkVector.i


%include itk.i
%include wrap_itkEuclideanDistance_ext.i


 class itkEuclideanDistanceMetricVF2 : public itkDistanceMetricVF2 {
   public:
     virtual char const * GetNameOfClass() const;
     static itkEuclideanDistanceMetricVF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual double Evaluate(itkVectorF2 const & x) const;
     virtual double Evaluate(itkVectorF2 const & x1, itkVectorF2 const & x2) const;
     double Evaluate(float const & a, float const & b) const;
   private:
   protected:
     itkEuclideanDistanceMetricVF2();
     ~itkEuclideanDistanceMetricVF2();
 };


 class itkEuclideanDistanceMetricVF2_Pointer {
   public:
     itkEuclideanDistanceMetricVF2_Pointer();
     itkEuclideanDistanceMetricVF2_Pointer(itkEuclideanDistanceMetricVF2_Pointer const & p);
     itkEuclideanDistanceMetricVF2_Pointer(itkEuclideanDistanceMetricVF2 * p);
     ~itkEuclideanDistanceMetricVF2_Pointer();
     itkEuclideanDistanceMetricVF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkEuclideanDistanceMetricVF2 * GetPointer() const;
     bool operator<(itkEuclideanDistanceMetricVF2_Pointer const & r) const;
     bool operator>(itkEuclideanDistanceMetricVF2_Pointer const & r) const;
     bool operator<=(itkEuclideanDistanceMetricVF2_Pointer const & r) const;
     bool operator>=(itkEuclideanDistanceMetricVF2_Pointer const & r) const;
     itkEuclideanDistanceMetricVF2_Pointer & operator=(itkEuclideanDistanceMetricVF2_Pointer const & r);
     itkEuclideanDistanceMetricVF2_Pointer & operator=(itkEuclideanDistanceMetricVF2 * r);
     itkEuclideanDistanceMetricVF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkEuclideanDistanceMetricVF3 : public itkDistanceMetricVF3 {
   public:
     virtual char const * GetNameOfClass() const;
     static itkEuclideanDistanceMetricVF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual double Evaluate(itkVectorF3 const & x) const;
     virtual double Evaluate(itkVectorF3 const & x1, itkVectorF3 const & x2) const;
     double Evaluate(float const & a, float const & b) const;
   private:
   protected:
     itkEuclideanDistanceMetricVF3();
     ~itkEuclideanDistanceMetricVF3();
 };


 class itkEuclideanDistanceMetricVF3_Pointer {
   public:
     itkEuclideanDistanceMetricVF3_Pointer();
     itkEuclideanDistanceMetricVF3_Pointer(itkEuclideanDistanceMetricVF3_Pointer const & p);
     itkEuclideanDistanceMetricVF3_Pointer(itkEuclideanDistanceMetricVF3 * p);
     ~itkEuclideanDistanceMetricVF3_Pointer();
     itkEuclideanDistanceMetricVF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkEuclideanDistanceMetricVF3 * GetPointer() const;
     bool operator<(itkEuclideanDistanceMetricVF3_Pointer const & r) const;
     bool operator>(itkEuclideanDistanceMetricVF3_Pointer const & r) const;
     bool operator<=(itkEuclideanDistanceMetricVF3_Pointer const & r) const;
     bool operator>=(itkEuclideanDistanceMetricVF3_Pointer const & r) const;
     itkEuclideanDistanceMetricVF3_Pointer & operator=(itkEuclideanDistanceMetricVF3_Pointer const & r);
     itkEuclideanDistanceMetricVF3_Pointer & operator=(itkEuclideanDistanceMetricVF3 * r);
     itkEuclideanDistanceMetricVF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


