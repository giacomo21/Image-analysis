# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkDiffusionTensor3DPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkDiffusionTensor3DPython', [dirname(__file__)])
        except ImportError:
            import _itkDiffusionTensor3DPython
            return _itkDiffusionTensor3DPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkDiffusionTensor3DPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkDiffusionTensor3DPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkDiffusionTensor3DPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkSymmetricSecondRankTensorPython
import itkFixedArrayPython
import pyBasePython
import itkMatrixPython
import itkCovariantVectorPython
import vnl_vectorPython
import vcl_complexPython
import vnl_matrixPython
import itkVectorPython
import vnl_vector_refPython
import vnl_matrix_fixedPython
import itkPointPython
class itkDiffusionTensor3DD(itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorD3):
    """Proxy of C++ itkDiffusionTensor3DD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _itkDiffusionTensor3DPython.delete_itkDiffusionTensor3DD
    def __init__(self, *args): 
        """
        __init__(self, itkDiffusionTensor3DD arg0) -> itkDiffusionTensor3DD
        __init__(self) -> itkDiffusionTensor3DD
        __init__(self, itkSymmetricSecondRankTensorD3 r) -> itkDiffusionTensor3DD
        __init__(self, double r) -> itkDiffusionTensor3DD
        __init__(self, double r) -> itkDiffusionTensor3DD
        """
        _itkDiffusionTensor3DPython.itkDiffusionTensor3DD_swiginit(self,_itkDiffusionTensor3DPython.new_itkDiffusionTensor3DD(*args))
    def GetTrace(self):
        """GetTrace(self) -> double"""
        return _itkDiffusionTensor3DPython.itkDiffusionTensor3DD_GetTrace(self)

    def GetFractionalAnisotropy(self):
        """GetFractionalAnisotropy(self) -> double"""
        return _itkDiffusionTensor3DPython.itkDiffusionTensor3DD_GetFractionalAnisotropy(self)

    def GetRelativeAnisotropy(self):
        """GetRelativeAnisotropy(self) -> double"""
        return _itkDiffusionTensor3DPython.itkDiffusionTensor3DD_GetRelativeAnisotropy(self)

    def GetInnerScalarProduct(self):
        """GetInnerScalarProduct(self) -> double"""
        return _itkDiffusionTensor3DPython.itkDiffusionTensor3DD_GetInnerScalarProduct(self)

itkDiffusionTensor3DD.GetTrace = new_instancemethod(_itkDiffusionTensor3DPython.itkDiffusionTensor3DD_GetTrace,None,itkDiffusionTensor3DD)
itkDiffusionTensor3DD.GetFractionalAnisotropy = new_instancemethod(_itkDiffusionTensor3DPython.itkDiffusionTensor3DD_GetFractionalAnisotropy,None,itkDiffusionTensor3DD)
itkDiffusionTensor3DD.GetRelativeAnisotropy = new_instancemethod(_itkDiffusionTensor3DPython.itkDiffusionTensor3DD_GetRelativeAnisotropy,None,itkDiffusionTensor3DD)
itkDiffusionTensor3DD.GetInnerScalarProduct = new_instancemethod(_itkDiffusionTensor3DPython.itkDiffusionTensor3DD_GetInnerScalarProduct,None,itkDiffusionTensor3DD)
itkDiffusionTensor3DD_swigregister = _itkDiffusionTensor3DPython.itkDiffusionTensor3DD_swigregister
itkDiffusionTensor3DD_swigregister(itkDiffusionTensor3DD)

class itkDiffusionTensor3DF(itkSymmetricSecondRankTensorPython.itkSymmetricSecondRankTensorF3):
    """Proxy of C++ itkDiffusionTensor3DF class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _itkDiffusionTensor3DPython.delete_itkDiffusionTensor3DF
    def __init__(self, *args): 
        """
        __init__(self, itkDiffusionTensor3DF arg0) -> itkDiffusionTensor3DF
        __init__(self) -> itkDiffusionTensor3DF
        __init__(self, itkSymmetricSecondRankTensorF3 r) -> itkDiffusionTensor3DF
        __init__(self, float r) -> itkDiffusionTensor3DF
        __init__(self, float r) -> itkDiffusionTensor3DF
        """
        _itkDiffusionTensor3DPython.itkDiffusionTensor3DF_swiginit(self,_itkDiffusionTensor3DPython.new_itkDiffusionTensor3DF(*args))
    def GetTrace(self):
        """GetTrace(self) -> double"""
        return _itkDiffusionTensor3DPython.itkDiffusionTensor3DF_GetTrace(self)

    def GetFractionalAnisotropy(self):
        """GetFractionalAnisotropy(self) -> double"""
        return _itkDiffusionTensor3DPython.itkDiffusionTensor3DF_GetFractionalAnisotropy(self)

    def GetRelativeAnisotropy(self):
        """GetRelativeAnisotropy(self) -> double"""
        return _itkDiffusionTensor3DPython.itkDiffusionTensor3DF_GetRelativeAnisotropy(self)

    def GetInnerScalarProduct(self):
        """GetInnerScalarProduct(self) -> double"""
        return _itkDiffusionTensor3DPython.itkDiffusionTensor3DF_GetInnerScalarProduct(self)

itkDiffusionTensor3DF.GetTrace = new_instancemethod(_itkDiffusionTensor3DPython.itkDiffusionTensor3DF_GetTrace,None,itkDiffusionTensor3DF)
itkDiffusionTensor3DF.GetFractionalAnisotropy = new_instancemethod(_itkDiffusionTensor3DPython.itkDiffusionTensor3DF_GetFractionalAnisotropy,None,itkDiffusionTensor3DF)
itkDiffusionTensor3DF.GetRelativeAnisotropy = new_instancemethod(_itkDiffusionTensor3DPython.itkDiffusionTensor3DF_GetRelativeAnisotropy,None,itkDiffusionTensor3DF)
itkDiffusionTensor3DF.GetInnerScalarProduct = new_instancemethod(_itkDiffusionTensor3DPython.itkDiffusionTensor3DF_GetInnerScalarProduct,None,itkDiffusionTensor3DF)
itkDiffusionTensor3DF_swigregister = _itkDiffusionTensor3DPython.itkDiffusionTensor3DF_swigregister
itkDiffusionTensor3DF_swigregister(itkDiffusionTensor3DF)



