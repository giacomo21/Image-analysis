// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkScalarChanAndVeseLevelSetFunctionChicken
#endif
#ifdef SWIGCSHARP
%module itkScalarChanAndVeseLevelSetFunctionCsharp
#endif
#ifdef SWIGGUILE
%module itkScalarChanAndVeseLevelSetFunctionGuile
#endif
#ifdef SWIGJAVA
%module itkScalarChanAndVeseLevelSetFunctionJava
#endif
#ifdef SWIGLUA
%module itkScalarChanAndVeseLevelSetFunctionLua
#endif
#ifdef SWIGMODULA3
%module itkScalarChanAndVeseLevelSetFunctionModula3
#endif
#ifdef SWIGMZSCHEME
%module itkScalarChanAndVeseLevelSetFunctionMzscheme
#endif
#ifdef SWIGOCAML
%module itkScalarChanAndVeseLevelSetFunctionOcaml
#endif
#ifdef SWIGPERL
%module itkScalarChanAndVeseLevelSetFunctionPerl
#endif
#ifdef SWIGPERL5
%module itkScalarChanAndVeseLevelSetFunctionPerl5
#endif
#ifdef SWIGPHP
%module itkScalarChanAndVeseLevelSetFunctionPhp
#endif
#ifdef SWIGPHP4
%module itkScalarChanAndVeseLevelSetFunctionPhp4
#endif
#ifdef SWIGPHP5
%module itkScalarChanAndVeseLevelSetFunctionPhp5
#endif
#ifdef SWIGPIKE
%module itkScalarChanAndVeseLevelSetFunctionPike
#endif
#ifdef SWIGPYTHON
%module itkScalarChanAndVeseLevelSetFunctionPython
#endif
#ifdef SWIGR
%module itkScalarChanAndVeseLevelSetFunctionR
#endif
#ifdef SWIGRUBY
%module itkScalarChanAndVeseLevelSetFunctionRuby
#endif
#ifdef SWIGSEXP
%module itkScalarChanAndVeseLevelSetFunctionSexp
#endif
#ifdef SWIGTCL
%module itkScalarChanAndVeseLevelSetFunctionTcl
#endif
#ifdef SWIGXML
%module itkScalarChanAndVeseLevelSetFunctionXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Numerics.includes"
#include "LevelSet.includes"
%}


%{
%}




%import wrap_itkFixedArray.i
%import wrap_itkIndex.i
%import wrap_itkImage.i
%import wrap_itkVector.i
%import wrap_itkFiniteDifferenceFunction.i
%import wrap_ITKCommonBase.i
%import wrap_itkSize.i


%include itk.i
%include wrap_itkScalarChanAndVeseLevelSetFunction_ext.i


 class itkScalarChanAndVeseLevelSetFunctionID2ID2_Pointer {
   public:
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Pointer();
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Pointer(itkScalarChanAndVeseLevelSetFunctionID2ID2_Pointer const & p);
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Pointer(itkScalarChanAndVeseLevelSetFunctionID2ID2 * p);
     ~itkScalarChanAndVeseLevelSetFunctionID2ID2_Pointer();
     itkScalarChanAndVeseLevelSetFunctionID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkScalarChanAndVeseLevelSetFunctionID2ID2 * GetPointer() const;
     bool operator<(itkScalarChanAndVeseLevelSetFunctionID2ID2_Pointer const & r) const;
     bool operator>(itkScalarChanAndVeseLevelSetFunctionID2ID2_Pointer const & r) const;
     bool operator<=(itkScalarChanAndVeseLevelSetFunctionID2ID2_Pointer const & r) const;
     bool operator>=(itkScalarChanAndVeseLevelSetFunctionID2ID2_Pointer const & r) const;
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Pointer & operator=(itkScalarChanAndVeseLevelSetFunctionID2ID2_Pointer const & r);
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Pointer & operator=(itkScalarChanAndVeseLevelSetFunctionID2ID2 * r);
     itkScalarChanAndVeseLevelSetFunctionID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Pointer {
   public:
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Pointer();
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Pointer(itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Pointer const & p);
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Pointer(itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass * p);
     ~itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Pointer();
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass * GetPointer() const;
     bool operator<(itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Pointer const & r) const;
     bool operator>(itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Pointer const & r) const;
     bool operator<=(itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Pointer const & r) const;
     bool operator>=(itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Pointer const & r) const;
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Pointer & operator=(itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Pointer const & r);
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Pointer & operator=(itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass * r);
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass : public itkFiniteDifferenceFunctionID2 {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     void SetDomainFunction(itk::HeavisideStepFunctionBase< double, double > const * f);
     virtual void Initialize(itkSize2 const & r);
     void SetSharedData(itk::SmartPointer< itk::ConstrainedRegionBasedLevelSetFunctionSharedData< itk::Image< double, 2u >, itk::Image< double, 2u >, itk::ScalarChanAndVeseLevelSetFunctionData< itk::Image< double, 2u >, itk::Image< double, 2u > > > > sharedDataIn);
     void UpdateSharedData(bool forceUpdate);
     virtual void * GetGlobalDataPointer() const;
     virtual double ComputeGlobalTimeStep(void * GlobalData) const;
     virtual double ComputeUpdate(itk::ConstNeighborhoodIterator< itk::Image< double, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 2u > > > const & neighborhood, void * globalData, itkVectorF2 const & arg2 = ( 0.0 ));
     void SetInitialImage(itkImageD2 * f);
     virtual itkImageD2 const * GetFeatureImage() const;
     virtual void SetFeatureImage(itkImageD2 const * f);
     virtual itkFixedArrayD2 AdvectionField(itk::ConstNeighborhoodIterator< itk::Image< double, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 2u > > > const & arg0, itkVectorF2 const & arg1, itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass::GlobalDataStruct * arg2 = 0) const;
     void SetAreaWeight(double const & nu);
     double GetAreaWeight() const;
     void SetLambda1(double const & lambda1);
     double GetLambda1() const;
     void SetLambda2(double const & lambda2);
     double GetLambda2() const;
     void SetOverlapPenaltyWeight(double const & gamma);
     double GetOverlapPenaltyWeight() const;
     virtual void SetCurvatureWeight(double const c);
     double GetCurvatureWeight() const;
     void SetAdvectionWeight(double const & iA);
     double GetAdvectionWeight() const;
     void SetReinitializationSmoothingWeight(double const c);
     double GetReinitializationSmoothingWeight() const;
     void SetVolumeMatchingWeight(double const & tau);
     double GetVolumeMatchingWeight() const;
     void SetVolume(double const & volume);
     double GetVolume() const;
     void SetFunctionId(unsigned int const & iFid);
     virtual void ReleaseGlobalDataPointer(void * GlobalData) const;
     virtual double ComputeCurvature(itk::ConstNeighborhoodIterator< itk::Image< double, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 2u > > > const & arg0, itkVectorF2 const & arg1, itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass::GlobalDataStruct * gd);
     virtual double LaplacianSmoothingSpeed(itk::ConstNeighborhoodIterator< itk::Image< double, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 2u > > > const & arg0, itkVectorF2 const & arg1, itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass::GlobalDataStruct * arg2 = 0) const;
     virtual double CurvatureSpeed(itk::ConstNeighborhoodIterator< itk::Image< double, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 2u > > > const & arg0, itkVectorF2 const & arg1, itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass::GlobalDataStruct * arg2 = 0) const;
     virtual void CalculateAdvectionImage();
   private:
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass(itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass const & arg0);
     void operator=(itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass const & arg0);
   protected:
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass();
     ~itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass();
     void ComputeHImage();
     double ComputeGlobalTerm(double const & imagePixel, itkIndex2 const & inputIndex);
     virtual double ComputeInternalTerm(double const & iValue, itkIndex2 const & iIdx) = 0;
     virtual double ComputeExternalTerm(double const & iValue, itkIndex2 const & iIdx) = 0;
     virtual double ComputeOverlapParameters(itkIndex2 const & featIndex, double & pr) = 0;
     double ComputeVolumeRegularizationTerm();
     double ComputeLaplacian(itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass::GlobalDataStruct * gd);
     void ComputeHessian(itk::ConstNeighborhoodIterator< itk::Image< double, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 2u > > > const & it, itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass::GlobalDataStruct * globalData);
     virtual void ComputeParameters() = 0;
     virtual void UpdateSharedDataParameters() = 0;
     static itkFixedArrayD2 InitializeZeroVectorConstant();
 };


 class itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass_Pointer {
   public:
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass_Pointer();
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass_Pointer(itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass_Pointer const & p);
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass_Pointer(itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass * p);
     ~itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass_Pointer();
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass * GetPointer() const;
     bool operator<(itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass_Pointer const & r) const;
     bool operator>(itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass_Pointer const & r) const;
     bool operator<=(itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass_Pointer const & r) const;
     bool operator>=(itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass_Pointer const & r) const;
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass_Pointer & operator=(itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass_Pointer const & r);
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass_Pointer & operator=(itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass * r);
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkScalarChanAndVeseLevelSetFunctionID3ID3_Pointer {
   public:
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Pointer();
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Pointer(itkScalarChanAndVeseLevelSetFunctionID3ID3_Pointer const & p);
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Pointer(itkScalarChanAndVeseLevelSetFunctionID3ID3 * p);
     ~itkScalarChanAndVeseLevelSetFunctionID3ID3_Pointer();
     itkScalarChanAndVeseLevelSetFunctionID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkScalarChanAndVeseLevelSetFunctionID3ID3 * GetPointer() const;
     bool operator<(itkScalarChanAndVeseLevelSetFunctionID3ID3_Pointer const & r) const;
     bool operator>(itkScalarChanAndVeseLevelSetFunctionID3ID3_Pointer const & r) const;
     bool operator<=(itkScalarChanAndVeseLevelSetFunctionID3ID3_Pointer const & r) const;
     bool operator>=(itkScalarChanAndVeseLevelSetFunctionID3ID3_Pointer const & r) const;
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Pointer & operator=(itkScalarChanAndVeseLevelSetFunctionID3ID3_Pointer const & r);
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Pointer & operator=(itkScalarChanAndVeseLevelSetFunctionID3ID3 * r);
     itkScalarChanAndVeseLevelSetFunctionID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Pointer {
   public:
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Pointer();
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Pointer(itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Pointer const & p);
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Pointer(itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass * p);
     ~itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Pointer();
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass * GetPointer() const;
     bool operator<(itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Pointer const & r) const;
     bool operator>(itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Pointer const & r) const;
     bool operator<=(itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Pointer const & r) const;
     bool operator>=(itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Pointer const & r) const;
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Pointer & operator=(itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Pointer const & r);
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Pointer & operator=(itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass * r);
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass : public itkFiniteDifferenceFunctionID3 {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     void SetDomainFunction(itk::HeavisideStepFunctionBase< double, double > const * f);
     virtual void Initialize(itkSize3 const & r);
     void SetSharedData(itk::SmartPointer< itk::ConstrainedRegionBasedLevelSetFunctionSharedData< itk::Image< double, 3u >, itk::Image< double, 3u >, itk::ScalarChanAndVeseLevelSetFunctionData< itk::Image< double, 3u >, itk::Image< double, 3u > > > > sharedDataIn);
     void UpdateSharedData(bool forceUpdate);
     virtual void * GetGlobalDataPointer() const;
     virtual double ComputeGlobalTimeStep(void * GlobalData) const;
     virtual double ComputeUpdate(itk::ConstNeighborhoodIterator< itk::Image< double, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 3u > > > const & neighborhood, void * globalData, itkVectorF3 const & arg2 = ( 0.0 ));
     void SetInitialImage(itkImageD3 * f);
     virtual itkImageD3 const * GetFeatureImage() const;
     virtual void SetFeatureImage(itkImageD3 const * f);
     virtual itkFixedArrayD3 AdvectionField(itk::ConstNeighborhoodIterator< itk::Image< double, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 3u > > > const & arg0, itkVectorF3 const & arg1, itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass::GlobalDataStruct * arg2 = 0) const;
     void SetAreaWeight(double const & nu);
     double GetAreaWeight() const;
     void SetLambda1(double const & lambda1);
     double GetLambda1() const;
     void SetLambda2(double const & lambda2);
     double GetLambda2() const;
     void SetOverlapPenaltyWeight(double const & gamma);
     double GetOverlapPenaltyWeight() const;
     virtual void SetCurvatureWeight(double const c);
     double GetCurvatureWeight() const;
     void SetAdvectionWeight(double const & iA);
     double GetAdvectionWeight() const;
     void SetReinitializationSmoothingWeight(double const c);
     double GetReinitializationSmoothingWeight() const;
     void SetVolumeMatchingWeight(double const & tau);
     double GetVolumeMatchingWeight() const;
     void SetVolume(double const & volume);
     double GetVolume() const;
     void SetFunctionId(unsigned int const & iFid);
     virtual void ReleaseGlobalDataPointer(void * GlobalData) const;
     virtual double ComputeCurvature(itk::ConstNeighborhoodIterator< itk::Image< double, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 3u > > > const & arg0, itkVectorF3 const & arg1, itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass::GlobalDataStruct * gd);
     virtual double LaplacianSmoothingSpeed(itk::ConstNeighborhoodIterator< itk::Image< double, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 3u > > > const & arg0, itkVectorF3 const & arg1, itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass::GlobalDataStruct * arg2 = 0) const;
     virtual double CurvatureSpeed(itk::ConstNeighborhoodIterator< itk::Image< double, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 3u > > > const & arg0, itkVectorF3 const & arg1, itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass::GlobalDataStruct * arg2 = 0) const;
     virtual void CalculateAdvectionImage();
   private:
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass(itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass const & arg0);
     void operator=(itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass const & arg0);
   protected:
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass();
     ~itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass();
     void ComputeHImage();
     double ComputeGlobalTerm(double const & imagePixel, itkIndex3 const & inputIndex);
     virtual double ComputeInternalTerm(double const & iValue, itkIndex3 const & iIdx) = 0;
     virtual double ComputeExternalTerm(double const & iValue, itkIndex3 const & iIdx) = 0;
     virtual double ComputeOverlapParameters(itkIndex3 const & featIndex, double & pr) = 0;
     double ComputeVolumeRegularizationTerm();
     double ComputeLaplacian(itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass::GlobalDataStruct * gd);
     void ComputeHessian(itk::ConstNeighborhoodIterator< itk::Image< double, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 3u > > > const & it, itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass::GlobalDataStruct * globalData);
     virtual void ComputeParameters() = 0;
     virtual void UpdateSharedDataParameters() = 0;
     static itkFixedArrayD3 InitializeZeroVectorConstant();
 };


 class itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass_Pointer {
   public:
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass_Pointer();
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass_Pointer(itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass_Pointer const & p);
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass_Pointer(itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass * p);
     ~itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass_Pointer();
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass * GetPointer() const;
     bool operator<(itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass_Pointer const & r) const;
     bool operator>(itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass_Pointer const & r) const;
     bool operator<=(itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass_Pointer const & r) const;
     bool operator>=(itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass_Pointer const & r) const;
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass_Pointer & operator=(itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass_Pointer const & r);
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass_Pointer & operator=(itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass * r);
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkScalarChanAndVeseLevelSetFunctionIF2IF2_Pointer {
   public:
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Pointer();
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Pointer(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Pointer const & p);
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Pointer(itkScalarChanAndVeseLevelSetFunctionIF2IF2 * p);
     ~itkScalarChanAndVeseLevelSetFunctionIF2IF2_Pointer();
     itkScalarChanAndVeseLevelSetFunctionIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkScalarChanAndVeseLevelSetFunctionIF2IF2 * GetPointer() const;
     bool operator<(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Pointer const & r) const;
     bool operator>(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Pointer const & r) const;
     bool operator<=(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Pointer const & r) const;
     bool operator>=(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Pointer const & r) const;
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Pointer & operator=(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Pointer const & r);
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Pointer & operator=(itkScalarChanAndVeseLevelSetFunctionIF2IF2 * r);
     itkScalarChanAndVeseLevelSetFunctionIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Pointer {
   public:
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Pointer();
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Pointer(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Pointer const & p);
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Pointer(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass * p);
     ~itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Pointer();
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass * GetPointer() const;
     bool operator<(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Pointer const & r) const;
     bool operator>(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Pointer const & r) const;
     bool operator<=(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Pointer const & r) const;
     bool operator>=(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Pointer const & r) const;
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Pointer & operator=(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Pointer const & r);
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Pointer & operator=(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass * r);
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass : public itkFiniteDifferenceFunctionIF2 {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     void SetDomainFunction(itk::HeavisideStepFunctionBase< float, float > const * f);
     virtual void Initialize(itkSize2 const & r);
     void SetSharedData(itk::SmartPointer< itk::ConstrainedRegionBasedLevelSetFunctionSharedData< itk::Image< float, 2u >, itk::Image< float, 2u >, itk::ScalarChanAndVeseLevelSetFunctionData< itk::Image< float, 2u >, itk::Image< float, 2u > > > > sharedDataIn);
     void UpdateSharedData(bool forceUpdate);
     virtual void * GetGlobalDataPointer() const;
     virtual double ComputeGlobalTimeStep(void * GlobalData) const;
     virtual float ComputeUpdate(itk::ConstNeighborhoodIterator< itk::Image< float, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 2u > > > const & neighborhood, void * globalData, itkVectorF2 const & arg2 = ( 0.0 ));
     void SetInitialImage(itkImageF2 * f);
     virtual itkImageF2 const * GetFeatureImage() const;
     virtual void SetFeatureImage(itkImageF2 const * f);
     virtual itkFixedArrayF2 AdvectionField(itk::ConstNeighborhoodIterator< itk::Image< float, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 2u > > > const & arg0, itkVectorF2 const & arg1, itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass::GlobalDataStruct * arg2 = 0) const;
     void SetAreaWeight(float const & nu);
     float GetAreaWeight() const;
     void SetLambda1(float const & lambda1);
     float GetLambda1() const;
     void SetLambda2(float const & lambda2);
     float GetLambda2() const;
     void SetOverlapPenaltyWeight(float const & gamma);
     float GetOverlapPenaltyWeight() const;
     virtual void SetCurvatureWeight(float const c);
     float GetCurvatureWeight() const;
     void SetAdvectionWeight(float const & iA);
     float GetAdvectionWeight() const;
     void SetReinitializationSmoothingWeight(float const c);
     float GetReinitializationSmoothingWeight() const;
     void SetVolumeMatchingWeight(float const & tau);
     float GetVolumeMatchingWeight() const;
     void SetVolume(float const & volume);
     float GetVolume() const;
     void SetFunctionId(unsigned int const & iFid);
     virtual void ReleaseGlobalDataPointer(void * GlobalData) const;
     virtual float ComputeCurvature(itk::ConstNeighborhoodIterator< itk::Image< float, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 2u > > > const & arg0, itkVectorF2 const & arg1, itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass::GlobalDataStruct * gd);
     virtual float LaplacianSmoothingSpeed(itk::ConstNeighborhoodIterator< itk::Image< float, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 2u > > > const & arg0, itkVectorF2 const & arg1, itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass::GlobalDataStruct * arg2 = 0) const;
     virtual float CurvatureSpeed(itk::ConstNeighborhoodIterator< itk::Image< float, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 2u > > > const & arg0, itkVectorF2 const & arg1, itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass::GlobalDataStruct * arg2 = 0) const;
     virtual void CalculateAdvectionImage();
   private:
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass const & arg0);
     void operator=(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass const & arg0);
   protected:
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass();
     ~itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass();
     void ComputeHImage();
     float ComputeGlobalTerm(float const & imagePixel, itkIndex2 const & inputIndex);
     virtual float ComputeInternalTerm(float const & iValue, itkIndex2 const & iIdx) = 0;
     virtual float ComputeExternalTerm(float const & iValue, itkIndex2 const & iIdx) = 0;
     virtual float ComputeOverlapParameters(itkIndex2 const & featIndex, float & pr) = 0;
     float ComputeVolumeRegularizationTerm();
     float ComputeLaplacian(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass::GlobalDataStruct * gd);
     void ComputeHessian(itk::ConstNeighborhoodIterator< itk::Image< float, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 2u > > > const & it, itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass::GlobalDataStruct * globalData);
     virtual void ComputeParameters() = 0;
     virtual void UpdateSharedDataParameters() = 0;
     static itkFixedArrayF2 InitializeZeroVectorConstant();
 };


 class itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass_Pointer {
   public:
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass_Pointer();
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass_Pointer(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass_Pointer const & p);
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass_Pointer(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass * p);
     ~itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass_Pointer();
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass * GetPointer() const;
     bool operator<(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass_Pointer const & r) const;
     bool operator>(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass_Pointer const & r) const;
     bool operator<=(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass_Pointer const & r) const;
     bool operator>=(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass_Pointer const & r) const;
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass_Pointer & operator=(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass_Pointer const & r);
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass_Pointer & operator=(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass * r);
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkScalarChanAndVeseLevelSetFunctionIF3IF3_Pointer {
   public:
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Pointer();
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Pointer(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Pointer const & p);
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Pointer(itkScalarChanAndVeseLevelSetFunctionIF3IF3 * p);
     ~itkScalarChanAndVeseLevelSetFunctionIF3IF3_Pointer();
     itkScalarChanAndVeseLevelSetFunctionIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkScalarChanAndVeseLevelSetFunctionIF3IF3 * GetPointer() const;
     bool operator<(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Pointer const & r) const;
     bool operator>(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Pointer const & r) const;
     bool operator<=(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Pointer const & r) const;
     bool operator>=(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Pointer const & r) const;
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Pointer & operator=(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Pointer const & r);
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Pointer & operator=(itkScalarChanAndVeseLevelSetFunctionIF3IF3 * r);
     itkScalarChanAndVeseLevelSetFunctionIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Pointer {
   public:
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Pointer();
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Pointer(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Pointer const & p);
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Pointer(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass * p);
     ~itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Pointer();
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass * GetPointer() const;
     bool operator<(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Pointer const & r) const;
     bool operator>(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Pointer const & r) const;
     bool operator<=(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Pointer const & r) const;
     bool operator>=(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Pointer const & r) const;
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Pointer & operator=(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Pointer const & r);
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Pointer & operator=(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass * r);
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass : public itkFiniteDifferenceFunctionIF3 {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     void SetDomainFunction(itk::HeavisideStepFunctionBase< float, float > const * f);
     virtual void Initialize(itkSize3 const & r);
     void SetSharedData(itk::SmartPointer< itk::ConstrainedRegionBasedLevelSetFunctionSharedData< itk::Image< float, 3u >, itk::Image< float, 3u >, itk::ScalarChanAndVeseLevelSetFunctionData< itk::Image< float, 3u >, itk::Image< float, 3u > > > > sharedDataIn);
     void UpdateSharedData(bool forceUpdate);
     virtual void * GetGlobalDataPointer() const;
     virtual double ComputeGlobalTimeStep(void * GlobalData) const;
     virtual float ComputeUpdate(itk::ConstNeighborhoodIterator< itk::Image< float, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 3u > > > const & neighborhood, void * globalData, itkVectorF3 const & arg2 = ( 0.0 ));
     void SetInitialImage(itkImageF3 * f);
     virtual itkImageF3 const * GetFeatureImage() const;
     virtual void SetFeatureImage(itkImageF3 const * f);
     virtual itkFixedArrayF3 AdvectionField(itk::ConstNeighborhoodIterator< itk::Image< float, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 3u > > > const & arg0, itkVectorF3 const & arg1, itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass::GlobalDataStruct * arg2 = 0) const;
     void SetAreaWeight(float const & nu);
     float GetAreaWeight() const;
     void SetLambda1(float const & lambda1);
     float GetLambda1() const;
     void SetLambda2(float const & lambda2);
     float GetLambda2() const;
     void SetOverlapPenaltyWeight(float const & gamma);
     float GetOverlapPenaltyWeight() const;
     virtual void SetCurvatureWeight(float const c);
     float GetCurvatureWeight() const;
     void SetAdvectionWeight(float const & iA);
     float GetAdvectionWeight() const;
     void SetReinitializationSmoothingWeight(float const c);
     float GetReinitializationSmoothingWeight() const;
     void SetVolumeMatchingWeight(float const & tau);
     float GetVolumeMatchingWeight() const;
     void SetVolume(float const & volume);
     float GetVolume() const;
     void SetFunctionId(unsigned int const & iFid);
     virtual void ReleaseGlobalDataPointer(void * GlobalData) const;
     virtual float ComputeCurvature(itk::ConstNeighborhoodIterator< itk::Image< float, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 3u > > > const & arg0, itkVectorF3 const & arg1, itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass::GlobalDataStruct * gd);
     virtual float LaplacianSmoothingSpeed(itk::ConstNeighborhoodIterator< itk::Image< float, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 3u > > > const & arg0, itkVectorF3 const & arg1, itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass::GlobalDataStruct * arg2 = 0) const;
     virtual float CurvatureSpeed(itk::ConstNeighborhoodIterator< itk::Image< float, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 3u > > > const & arg0, itkVectorF3 const & arg1, itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass::GlobalDataStruct * arg2 = 0) const;
     virtual void CalculateAdvectionImage();
   private:
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass const & arg0);
     void operator=(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass const & arg0);
   protected:
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass();
     ~itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass();
     void ComputeHImage();
     float ComputeGlobalTerm(float const & imagePixel, itkIndex3 const & inputIndex);
     virtual float ComputeInternalTerm(float const & iValue, itkIndex3 const & iIdx) = 0;
     virtual float ComputeExternalTerm(float const & iValue, itkIndex3 const & iIdx) = 0;
     virtual float ComputeOverlapParameters(itkIndex3 const & featIndex, float & pr) = 0;
     float ComputeVolumeRegularizationTerm();
     float ComputeLaplacian(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass::GlobalDataStruct * gd);
     void ComputeHessian(itk::ConstNeighborhoodIterator< itk::Image< float, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 3u > > > const & it, itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass::GlobalDataStruct * globalData);
     virtual void ComputeParameters() = 0;
     virtual void UpdateSharedDataParameters() = 0;
     static itkFixedArrayF3 InitializeZeroVectorConstant();
 };


 class itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass_Pointer {
   public:
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass_Pointer();
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass_Pointer(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass_Pointer const & p);
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass_Pointer(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass * p);
     ~itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass_Pointer();
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass * GetPointer() const;
     bool operator<(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass_Pointer const & r) const;
     bool operator>(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass_Pointer const & r) const;
     bool operator<=(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass_Pointer const & r) const;
     bool operator>=(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass_Pointer const & r) const;
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass_Pointer & operator=(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass_Pointer const & r);
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass_Pointer & operator=(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass * r);
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass : public itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass_Superclass {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     void UpdatePixel(unsigned int const & idx, itk::NeighborhoodIterator< itk::Image< double, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 2u > > > & iterator, double & newValue, bool & status);
   private:
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass(itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass const & arg0);
     void operator=(itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass const & arg0);
   protected:
     itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass();
     ~itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass();
     virtual double ComputeOverlapParameters(itkIndex2 const & featIndex, double & product);
     virtual void UpdateSharedDataInsideParameters(unsigned int const & iId, double const & iVal, double const & iChange) = 0;
     virtual void UpdateSharedDataOutsideParameters(unsigned int const & iId, double const & iVal, double const & iChange) = 0;
 };


 class itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass : public itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass_Superclass {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     void UpdatePixel(unsigned int const & idx, itk::NeighborhoodIterator< itk::Image< double, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< double, 3u > > > & iterator, double & newValue, bool & status);
   private:
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass(itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass const & arg0);
     void operator=(itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass const & arg0);
   protected:
     itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass();
     ~itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass();
     virtual double ComputeOverlapParameters(itkIndex3 const & featIndex, double & product);
     virtual void UpdateSharedDataInsideParameters(unsigned int const & iId, double const & iVal, double const & iChange) = 0;
     virtual void UpdateSharedDataOutsideParameters(unsigned int const & iId, double const & iVal, double const & iChange) = 0;
 };


 class itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass : public itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass_Superclass {
   public:
     enum  {  ImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     void UpdatePixel(unsigned int const & idx, itk::NeighborhoodIterator< itk::Image< float, 2u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 2u > > > & iterator, float & newValue, bool & status);
   private:
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass const & arg0);
     void operator=(itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass const & arg0);
   protected:
     itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass();
     ~itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass();
     virtual float ComputeOverlapParameters(itkIndex2 const & featIndex, float & product);
     virtual void UpdateSharedDataInsideParameters(unsigned int const & iId, float const & iVal, float const & iChange) = 0;
     virtual void UpdateSharedDataOutsideParameters(unsigned int const & iId, float const & iVal, float const & iChange) = 0;
 };


 class itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass : public itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass_Superclass {
   public:
     enum  {  ImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     void UpdatePixel(unsigned int const & idx, itk::NeighborhoodIterator< itk::Image< float, 3u >, itk::ZeroFluxNeumannBoundaryCondition< itk::Image< float, 3u > > > & iterator, float & newValue, bool & status);
   private:
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass const & arg0);
     void operator=(itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass const & arg0);
   protected:
     itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass();
     ~itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass();
     virtual float ComputeOverlapParameters(itkIndex3 const & featIndex, float & product);
     virtual void UpdateSharedDataInsideParameters(unsigned int const & iId, float const & iVal, float const & iChange) = 0;
     virtual void UpdateSharedDataOutsideParameters(unsigned int const & iId, float const & iVal, float const & iChange) = 0;
 };


 class itkScalarChanAndVeseLevelSetFunctionID2ID2 : public itkScalarChanAndVeseLevelSetFunctionID2ID2_Superclass {
   public:
     enum  {  ImageDimension = 2 };
     static itkScalarChanAndVeseLevelSetFunctionID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkScalarChanAndVeseLevelSetFunctionID2ID2(itkScalarChanAndVeseLevelSetFunctionID2ID2 const & arg0);
     void operator=(itkScalarChanAndVeseLevelSetFunctionID2ID2 const & arg0);
   protected:
     itkScalarChanAndVeseLevelSetFunctionID2ID2();
     ~itkScalarChanAndVeseLevelSetFunctionID2ID2();
     virtual void ComputeParameters();
     virtual void UpdateSharedDataParameters();
     virtual double ComputeInternalTerm(double const & iValue, itkIndex2 const & iIdx);
     virtual double ComputeExternalTerm(double const & iValue, itkIndex2 const & iIdx);
     virtual void UpdateSharedDataInsideParameters(unsigned int const & iId, double const & iVal, double const & iChange);
     virtual void UpdateSharedDataOutsideParameters(unsigned int const & iId, double const & iVal, double const & iChange);
 };


 class itkScalarChanAndVeseLevelSetFunctionID3ID3 : public itkScalarChanAndVeseLevelSetFunctionID3ID3_Superclass {
   public:
     enum  {  ImageDimension = 3 };
     static itkScalarChanAndVeseLevelSetFunctionID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkScalarChanAndVeseLevelSetFunctionID3ID3(itkScalarChanAndVeseLevelSetFunctionID3ID3 const & arg0);
     void operator=(itkScalarChanAndVeseLevelSetFunctionID3ID3 const & arg0);
   protected:
     itkScalarChanAndVeseLevelSetFunctionID3ID3();
     ~itkScalarChanAndVeseLevelSetFunctionID3ID3();
     virtual void ComputeParameters();
     virtual void UpdateSharedDataParameters();
     virtual double ComputeInternalTerm(double const & iValue, itkIndex3 const & iIdx);
     virtual double ComputeExternalTerm(double const & iValue, itkIndex3 const & iIdx);
     virtual void UpdateSharedDataInsideParameters(unsigned int const & iId, double const & iVal, double const & iChange);
     virtual void UpdateSharedDataOutsideParameters(unsigned int const & iId, double const & iVal, double const & iChange);
 };


 class itkScalarChanAndVeseLevelSetFunctionIF2IF2 : public itkScalarChanAndVeseLevelSetFunctionIF2IF2_Superclass {
   public:
     enum  {  ImageDimension = 2 };
     static itkScalarChanAndVeseLevelSetFunctionIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkScalarChanAndVeseLevelSetFunctionIF2IF2(itkScalarChanAndVeseLevelSetFunctionIF2IF2 const & arg0);
     void operator=(itkScalarChanAndVeseLevelSetFunctionIF2IF2 const & arg0);
   protected:
     itkScalarChanAndVeseLevelSetFunctionIF2IF2();
     ~itkScalarChanAndVeseLevelSetFunctionIF2IF2();
     virtual void ComputeParameters();
     virtual void UpdateSharedDataParameters();
     virtual float ComputeInternalTerm(float const & iValue, itkIndex2 const & iIdx);
     virtual float ComputeExternalTerm(float const & iValue, itkIndex2 const & iIdx);
     virtual void UpdateSharedDataInsideParameters(unsigned int const & iId, float const & iVal, float const & iChange);
     virtual void UpdateSharedDataOutsideParameters(unsigned int const & iId, float const & iVal, float const & iChange);
 };


 class itkScalarChanAndVeseLevelSetFunctionIF3IF3 : public itkScalarChanAndVeseLevelSetFunctionIF3IF3_Superclass {
   public:
     enum  {  ImageDimension = 3 };
     static itkScalarChanAndVeseLevelSetFunctionIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkScalarChanAndVeseLevelSetFunctionIF3IF3(itkScalarChanAndVeseLevelSetFunctionIF3IF3 const & arg0);
     void operator=(itkScalarChanAndVeseLevelSetFunctionIF3IF3 const & arg0);
   protected:
     itkScalarChanAndVeseLevelSetFunctionIF3IF3();
     ~itkScalarChanAndVeseLevelSetFunctionIF3IF3();
     virtual void ComputeParameters();
     virtual void UpdateSharedDataParameters();
     virtual float ComputeInternalTerm(float const & iValue, itkIndex3 const & iIdx);
     virtual float ComputeExternalTerm(float const & iValue, itkIndex3 const & iIdx);
     virtual void UpdateSharedDataInsideParameters(unsigned int const & iId, float const & iVal, float const & iChange);
     virtual void UpdateSharedDataOutsideParameters(unsigned int const & iId, float const & iVal, float const & iChange);
 };


