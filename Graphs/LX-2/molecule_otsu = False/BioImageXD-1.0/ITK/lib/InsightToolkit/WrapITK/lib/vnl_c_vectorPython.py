# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _vnl_c_vectorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vnl_c_vectorPython', [dirname(__file__)])
        except ImportError:
            import _vnl_c_vectorPython
            return _vnl_c_vectorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_vnl_c_vectorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _vnl_c_vectorPython = swig_import_helper()
    del swig_import_helper
else:
    import _vnl_c_vectorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import vcl_complexPython
import pyBasePython
class vnl_c_vectorD(object):
    """Proxy of C++ vnl_c_vectorD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorD
    def __init__(self, *args): 
        """
        __init__(self, vnl_c_vectorD arg0) -> vnl_c_vectorD
        __init__(self) -> vnl_c_vectorD
        """
        _vnl_c_vectorPython.vnl_c_vectorD_swiginit(self,_vnl_c_vectorPython.new_vnl_c_vectorD(*args))
    def sum(*args):
        """sum(double v, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_sum(*args)

    sum = staticmethod(sum)
    def squared_magnitude(*args):
        """squared_magnitude(double p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_squared_magnitude(*args)

    squared_magnitude = staticmethod(squared_magnitude)
    def normalize(*args):
        """normalize(double arg0, unsigned int n)"""
        return _vnl_c_vectorPython.vnl_c_vectorD_normalize(*args)

    normalize = staticmethod(normalize)
    def copy(*args):
        """copy(double x, double y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorD_copy(*args)

    copy = staticmethod(copy)
    def scale(*args):
        """scale(double x, double y, unsigned int arg2, double arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorD_scale(*args)

    scale = staticmethod(scale)
    def add(*args):
        """
        add(double x, double y, double z, unsigned int arg3)
        add(double x, double y, double z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorD_add(*args)

    add = staticmethod(add)
    def subtract(*args):
        """
        subtract(double x, double y, double z, unsigned int arg3)
        subtract(double x, double y, double z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorD_subtract(*args)

    subtract = staticmethod(subtract)
    def multiply(*args):
        """
        multiply(double x, double y, double z, unsigned int arg3)
        multiply(double x, double y, double z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorD_multiply(*args)

    multiply = staticmethod(multiply)
    def divide(*args):
        """
        divide(double x, double y, double z, unsigned int arg3)
        divide(double x, double y, double z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorD_divide(*args)

    divide = staticmethod(divide)
    def negate(*args):
        """negate(double x, double y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorD_negate(*args)

    negate = staticmethod(negate)
    def invert(*args):
        """invert(double x, double y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorD_invert(*args)

    invert = staticmethod(invert)
    def saxpy(*args):
        """saxpy(double a, double x, double y, unsigned int arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorD_saxpy(*args)

    saxpy = staticmethod(saxpy)
    def fill(*args):
        """fill(double x, unsigned int arg1, double v)"""
        return _vnl_c_vectorPython.vnl_c_vectorD_fill(*args)

    fill = staticmethod(fill)
    def reverse(*args):
        """reverse(double x, unsigned int arg1)"""
        return _vnl_c_vectorPython.vnl_c_vectorD_reverse(*args)

    reverse = staticmethod(reverse)
    def dot_product(*args):
        """dot_product(double arg0, double arg1, unsigned int arg2) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_dot_product(*args)

    dot_product = staticmethod(dot_product)
    def inner_product(*args):
        """inner_product(double arg0, double arg1, unsigned int arg2) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_inner_product(*args)

    inner_product = staticmethod(inner_product)
    def conjugate(*args):
        """conjugate(double arg0, double arg1, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorD_conjugate(*args)

    conjugate = staticmethod(conjugate)
    def max_value(*args):
        """max_value(double arg0, unsigned int arg1) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_max_value(*args)

    max_value = staticmethod(max_value)
    def min_value(*args):
        """min_value(double arg0, unsigned int arg1) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_min_value(*args)

    min_value = staticmethod(min_value)
    def mean(*args):
        """mean(double p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_mean(*args)

    mean = staticmethod(mean)
    def std(*args):
        """std(double p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_std(*args)

    std = staticmethod(std)
    def sum_sq_diff_means(*args):
        """sum_sq_diff_means(double v, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_sum_sq_diff_means(*args)

    sum_sq_diff_means = staticmethod(sum_sq_diff_means)
    def one_norm(*args):
        """one_norm(double p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_one_norm(*args)

    one_norm = staticmethod(one_norm)
    def two_norm(*args):
        """two_norm(double p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_two_norm(*args)

    two_norm = staticmethod(two_norm)
    def inf_norm(*args):
        """inf_norm(double p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_inf_norm(*args)

    inf_norm = staticmethod(inf_norm)
    def two_nrm2(*args):
        """two_nrm2(double p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_two_nrm2(*args)

    two_nrm2 = staticmethod(two_nrm2)
    def rms_norm(*args):
        """rms_norm(double p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_rms_norm(*args)

    rms_norm = staticmethod(rms_norm)
    def euclid_dist_sq(*args):
        """euclid_dist_sq(double arg0, double arg1, unsigned int arg2) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_euclid_dist_sq(*args)

    euclid_dist_sq = staticmethod(euclid_dist_sq)
    def allocate_Tptr(*args):
        """allocate_Tptr(int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_allocate_Tptr(*args)

    allocate_Tptr = staticmethod(allocate_Tptr)
    def allocate_T(*args):
        """allocate_T(int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorD_allocate_T(*args)

    allocate_T = staticmethod(allocate_T)
    def deallocate(*args):
        """
        deallocate(double arg0, int n_when_allocated)
        deallocate(double arg0, int n_when_allocated)
        """
        return _vnl_c_vectorPython.vnl_c_vectorD_deallocate(*args)

    deallocate = staticmethod(deallocate)
vnl_c_vectorD_swigregister = _vnl_c_vectorPython.vnl_c_vectorD_swigregister
vnl_c_vectorD_swigregister(vnl_c_vectorD)

def vnl_c_vectorD_sum(*args):
  """vnl_c_vectorD_sum(double v, unsigned int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vectorD_sum(*args)

def vnl_c_vectorD_squared_magnitude(*args):
  """vnl_c_vectorD_squared_magnitude(double p, unsigned int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vectorD_squared_magnitude(*args)

def vnl_c_vectorD_normalize(*args):
  """vnl_c_vectorD_normalize(double arg0, unsigned int n)"""
  return _vnl_c_vectorPython.vnl_c_vectorD_normalize(*args)

def vnl_c_vectorD_copy(*args):
  """vnl_c_vectorD_copy(double x, double y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorD_copy(*args)

def vnl_c_vectorD_scale(*args):
  """vnl_c_vectorD_scale(double x, double y, unsigned int arg2, double arg3)"""
  return _vnl_c_vectorPython.vnl_c_vectorD_scale(*args)

def vnl_c_vectorD_add(*args):
  """
    add(double x, double y, double z, unsigned int arg3)
    vnl_c_vectorD_add(double x, double y, double z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorD_add(*args)

def vnl_c_vectorD_subtract(*args):
  """
    subtract(double x, double y, double z, unsigned int arg3)
    vnl_c_vectorD_subtract(double x, double y, double z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorD_subtract(*args)

def vnl_c_vectorD_multiply(*args):
  """
    multiply(double x, double y, double z, unsigned int arg3)
    vnl_c_vectorD_multiply(double x, double y, double z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorD_multiply(*args)

def vnl_c_vectorD_divide(*args):
  """
    divide(double x, double y, double z, unsigned int arg3)
    vnl_c_vectorD_divide(double x, double y, double z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorD_divide(*args)

def vnl_c_vectorD_negate(*args):
  """vnl_c_vectorD_negate(double x, double y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorD_negate(*args)

def vnl_c_vectorD_invert(*args):
  """vnl_c_vectorD_invert(double x, double y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorD_invert(*args)

def vnl_c_vectorD_saxpy(*args):
  """vnl_c_vectorD_saxpy(double a, double x, double y, unsigned int arg3)"""
  return _vnl_c_vectorPython.vnl_c_vectorD_saxpy(*args)

def vnl_c_vectorD_fill(*args):
  """vnl_c_vectorD_fill(double x, unsigned int arg1, double v)"""
  return _vnl_c_vectorPython.vnl_c_vectorD_fill(*args)

def vnl_c_vectorD_reverse(*args):
  """vnl_c_vectorD_reverse(double x, unsigned int arg1)"""
  return _vnl_c_vectorPython.vnl_c_vectorD_reverse(*args)

def vnl_c_vectorD_dot_product(*args):
  """vnl_c_vectorD_dot_product(double arg0, double arg1, unsigned int arg2) -> double"""
  return _vnl_c_vectorPython.vnl_c_vectorD_dot_product(*args)

def vnl_c_vectorD_inner_product(*args):
  """vnl_c_vectorD_inner_product(double arg0, double arg1, unsigned int arg2) -> double"""
  return _vnl_c_vectorPython.vnl_c_vectorD_inner_product(*args)

def vnl_c_vectorD_conjugate(*args):
  """vnl_c_vectorD_conjugate(double arg0, double arg1, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorD_conjugate(*args)

def vnl_c_vectorD_max_value(*args):
  """vnl_c_vectorD_max_value(double arg0, unsigned int arg1) -> double"""
  return _vnl_c_vectorPython.vnl_c_vectorD_max_value(*args)

def vnl_c_vectorD_min_value(*args):
  """vnl_c_vectorD_min_value(double arg0, unsigned int arg1) -> double"""
  return _vnl_c_vectorPython.vnl_c_vectorD_min_value(*args)

def vnl_c_vectorD_mean(*args):
  """vnl_c_vectorD_mean(double p, unsigned int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vectorD_mean(*args)

def vnl_c_vectorD_std(*args):
  """vnl_c_vectorD_std(double p, unsigned int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vectorD_std(*args)

def vnl_c_vectorD_sum_sq_diff_means(*args):
  """vnl_c_vectorD_sum_sq_diff_means(double v, unsigned int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vectorD_sum_sq_diff_means(*args)

def vnl_c_vectorD_one_norm(*args):
  """vnl_c_vectorD_one_norm(double p, unsigned int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vectorD_one_norm(*args)

def vnl_c_vectorD_two_norm(*args):
  """vnl_c_vectorD_two_norm(double p, unsigned int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vectorD_two_norm(*args)

def vnl_c_vectorD_inf_norm(*args):
  """vnl_c_vectorD_inf_norm(double p, unsigned int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vectorD_inf_norm(*args)

def vnl_c_vectorD_two_nrm2(*args):
  """vnl_c_vectorD_two_nrm2(double p, unsigned int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vectorD_two_nrm2(*args)

def vnl_c_vectorD_rms_norm(*args):
  """vnl_c_vectorD_rms_norm(double p, unsigned int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vectorD_rms_norm(*args)

def vnl_c_vectorD_euclid_dist_sq(*args):
  """vnl_c_vectorD_euclid_dist_sq(double arg0, double arg1, unsigned int arg2) -> double"""
  return _vnl_c_vectorPython.vnl_c_vectorD_euclid_dist_sq(*args)

def vnl_c_vectorD_allocate_Tptr(*args):
  """vnl_c_vectorD_allocate_Tptr(int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vectorD_allocate_Tptr(*args)

def vnl_c_vectorD_allocate_T(*args):
  """vnl_c_vectorD_allocate_T(int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vectorD_allocate_T(*args)

def vnl_c_vectorD_deallocate(*args):
  """
    deallocate(double arg0, int n_when_allocated)
    vnl_c_vectorD_deallocate(double arg0, int n_when_allocated)
    """
  return _vnl_c_vectorPython.vnl_c_vectorD_deallocate(*args)

class vnl_c_vectorF(object):
    """Proxy of C++ vnl_c_vectorF class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorF
    def __init__(self, *args): 
        """
        __init__(self, vnl_c_vectorF arg0) -> vnl_c_vectorF
        __init__(self) -> vnl_c_vectorF
        """
        _vnl_c_vectorPython.vnl_c_vectorF_swiginit(self,_vnl_c_vectorPython.new_vnl_c_vectorF(*args))
    def sum(*args):
        """sum(float v, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_sum(*args)

    sum = staticmethod(sum)
    def squared_magnitude(*args):
        """squared_magnitude(float p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_squared_magnitude(*args)

    squared_magnitude = staticmethod(squared_magnitude)
    def normalize(*args):
        """normalize(float arg0, unsigned int n)"""
        return _vnl_c_vectorPython.vnl_c_vectorF_normalize(*args)

    normalize = staticmethod(normalize)
    def copy(*args):
        """copy(float x, float y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorF_copy(*args)

    copy = staticmethod(copy)
    def scale(*args):
        """scale(float x, float y, unsigned int arg2, float arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorF_scale(*args)

    scale = staticmethod(scale)
    def add(*args):
        """
        add(float x, float y, float z, unsigned int arg3)
        add(float x, float y, float z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorF_add(*args)

    add = staticmethod(add)
    def subtract(*args):
        """
        subtract(float x, float y, float z, unsigned int arg3)
        subtract(float x, float y, float z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorF_subtract(*args)

    subtract = staticmethod(subtract)
    def multiply(*args):
        """
        multiply(float x, float y, float z, unsigned int arg3)
        multiply(float x, float y, float z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorF_multiply(*args)

    multiply = staticmethod(multiply)
    def divide(*args):
        """
        divide(float x, float y, float z, unsigned int arg3)
        divide(float x, float y, float z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorF_divide(*args)

    divide = staticmethod(divide)
    def negate(*args):
        """negate(float x, float y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorF_negate(*args)

    negate = staticmethod(negate)
    def invert(*args):
        """invert(float x, float y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorF_invert(*args)

    invert = staticmethod(invert)
    def saxpy(*args):
        """saxpy(float a, float x, float y, unsigned int arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorF_saxpy(*args)

    saxpy = staticmethod(saxpy)
    def fill(*args):
        """fill(float x, unsigned int arg1, float v)"""
        return _vnl_c_vectorPython.vnl_c_vectorF_fill(*args)

    fill = staticmethod(fill)
    def reverse(*args):
        """reverse(float x, unsigned int arg1)"""
        return _vnl_c_vectorPython.vnl_c_vectorF_reverse(*args)

    reverse = staticmethod(reverse)
    def dot_product(*args):
        """dot_product(float arg0, float arg1, unsigned int arg2) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_dot_product(*args)

    dot_product = staticmethod(dot_product)
    def inner_product(*args):
        """inner_product(float arg0, float arg1, unsigned int arg2) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_inner_product(*args)

    inner_product = staticmethod(inner_product)
    def conjugate(*args):
        """conjugate(float arg0, float arg1, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorF_conjugate(*args)

    conjugate = staticmethod(conjugate)
    def max_value(*args):
        """max_value(float arg0, unsigned int arg1) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_max_value(*args)

    max_value = staticmethod(max_value)
    def min_value(*args):
        """min_value(float arg0, unsigned int arg1) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_min_value(*args)

    min_value = staticmethod(min_value)
    def mean(*args):
        """mean(float p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_mean(*args)

    mean = staticmethod(mean)
    def std(*args):
        """std(float p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorF_std(*args)

    std = staticmethod(std)
    def sum_sq_diff_means(*args):
        """sum_sq_diff_means(float v, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_sum_sq_diff_means(*args)

    sum_sq_diff_means = staticmethod(sum_sq_diff_means)
    def one_norm(*args):
        """one_norm(float p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_one_norm(*args)

    one_norm = staticmethod(one_norm)
    def two_norm(*args):
        """two_norm(float p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_two_norm(*args)

    two_norm = staticmethod(two_norm)
    def inf_norm(*args):
        """inf_norm(float p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_inf_norm(*args)

    inf_norm = staticmethod(inf_norm)
    def two_nrm2(*args):
        """two_nrm2(float p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_two_nrm2(*args)

    two_nrm2 = staticmethod(two_nrm2)
    def rms_norm(*args):
        """rms_norm(float p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_rms_norm(*args)

    rms_norm = staticmethod(rms_norm)
    def euclid_dist_sq(*args):
        """euclid_dist_sq(float arg0, float arg1, unsigned int arg2) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_euclid_dist_sq(*args)

    euclid_dist_sq = staticmethod(euclid_dist_sq)
    def allocate_Tptr(*args):
        """allocate_Tptr(int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_allocate_Tptr(*args)

    allocate_Tptr = staticmethod(allocate_Tptr)
    def allocate_T(*args):
        """allocate_T(int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vectorF_allocate_T(*args)

    allocate_T = staticmethod(allocate_T)
    def deallocate(*args):
        """
        deallocate(float arg0, int n_when_allocated)
        deallocate(float arg0, int n_when_allocated)
        """
        return _vnl_c_vectorPython.vnl_c_vectorF_deallocate(*args)

    deallocate = staticmethod(deallocate)
vnl_c_vectorF_swigregister = _vnl_c_vectorPython.vnl_c_vectorF_swigregister
vnl_c_vectorF_swigregister(vnl_c_vectorF)

def vnl_c_vectorF_sum(*args):
  """vnl_c_vectorF_sum(float v, unsigned int n) -> float"""
  return _vnl_c_vectorPython.vnl_c_vectorF_sum(*args)

def vnl_c_vectorF_squared_magnitude(*args):
  """vnl_c_vectorF_squared_magnitude(float p, unsigned int n) -> float"""
  return _vnl_c_vectorPython.vnl_c_vectorF_squared_magnitude(*args)

def vnl_c_vectorF_normalize(*args):
  """vnl_c_vectorF_normalize(float arg0, unsigned int n)"""
  return _vnl_c_vectorPython.vnl_c_vectorF_normalize(*args)

def vnl_c_vectorF_copy(*args):
  """vnl_c_vectorF_copy(float x, float y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorF_copy(*args)

def vnl_c_vectorF_scale(*args):
  """vnl_c_vectorF_scale(float x, float y, unsigned int arg2, float arg3)"""
  return _vnl_c_vectorPython.vnl_c_vectorF_scale(*args)

def vnl_c_vectorF_add(*args):
  """
    add(float x, float y, float z, unsigned int arg3)
    vnl_c_vectorF_add(float x, float y, float z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorF_add(*args)

def vnl_c_vectorF_subtract(*args):
  """
    subtract(float x, float y, float z, unsigned int arg3)
    vnl_c_vectorF_subtract(float x, float y, float z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorF_subtract(*args)

def vnl_c_vectorF_multiply(*args):
  """
    multiply(float x, float y, float z, unsigned int arg3)
    vnl_c_vectorF_multiply(float x, float y, float z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorF_multiply(*args)

def vnl_c_vectorF_divide(*args):
  """
    divide(float x, float y, float z, unsigned int arg3)
    vnl_c_vectorF_divide(float x, float y, float z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorF_divide(*args)

def vnl_c_vectorF_negate(*args):
  """vnl_c_vectorF_negate(float x, float y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorF_negate(*args)

def vnl_c_vectorF_invert(*args):
  """vnl_c_vectorF_invert(float x, float y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorF_invert(*args)

def vnl_c_vectorF_saxpy(*args):
  """vnl_c_vectorF_saxpy(float a, float x, float y, unsigned int arg3)"""
  return _vnl_c_vectorPython.vnl_c_vectorF_saxpy(*args)

def vnl_c_vectorF_fill(*args):
  """vnl_c_vectorF_fill(float x, unsigned int arg1, float v)"""
  return _vnl_c_vectorPython.vnl_c_vectorF_fill(*args)

def vnl_c_vectorF_reverse(*args):
  """vnl_c_vectorF_reverse(float x, unsigned int arg1)"""
  return _vnl_c_vectorPython.vnl_c_vectorF_reverse(*args)

def vnl_c_vectorF_dot_product(*args):
  """vnl_c_vectorF_dot_product(float arg0, float arg1, unsigned int arg2) -> float"""
  return _vnl_c_vectorPython.vnl_c_vectorF_dot_product(*args)

def vnl_c_vectorF_inner_product(*args):
  """vnl_c_vectorF_inner_product(float arg0, float arg1, unsigned int arg2) -> float"""
  return _vnl_c_vectorPython.vnl_c_vectorF_inner_product(*args)

def vnl_c_vectorF_conjugate(*args):
  """vnl_c_vectorF_conjugate(float arg0, float arg1, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorF_conjugate(*args)

def vnl_c_vectorF_max_value(*args):
  """vnl_c_vectorF_max_value(float arg0, unsigned int arg1) -> float"""
  return _vnl_c_vectorPython.vnl_c_vectorF_max_value(*args)

def vnl_c_vectorF_min_value(*args):
  """vnl_c_vectorF_min_value(float arg0, unsigned int arg1) -> float"""
  return _vnl_c_vectorPython.vnl_c_vectorF_min_value(*args)

def vnl_c_vectorF_mean(*args):
  """vnl_c_vectorF_mean(float p, unsigned int n) -> float"""
  return _vnl_c_vectorPython.vnl_c_vectorF_mean(*args)

def vnl_c_vectorF_std(*args):
  """vnl_c_vectorF_std(float p, unsigned int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vectorF_std(*args)

def vnl_c_vectorF_sum_sq_diff_means(*args):
  """vnl_c_vectorF_sum_sq_diff_means(float v, unsigned int n) -> float"""
  return _vnl_c_vectorPython.vnl_c_vectorF_sum_sq_diff_means(*args)

def vnl_c_vectorF_one_norm(*args):
  """vnl_c_vectorF_one_norm(float p, unsigned int n) -> float"""
  return _vnl_c_vectorPython.vnl_c_vectorF_one_norm(*args)

def vnl_c_vectorF_two_norm(*args):
  """vnl_c_vectorF_two_norm(float p, unsigned int n) -> float"""
  return _vnl_c_vectorPython.vnl_c_vectorF_two_norm(*args)

def vnl_c_vectorF_inf_norm(*args):
  """vnl_c_vectorF_inf_norm(float p, unsigned int n) -> float"""
  return _vnl_c_vectorPython.vnl_c_vectorF_inf_norm(*args)

def vnl_c_vectorF_two_nrm2(*args):
  """vnl_c_vectorF_two_nrm2(float p, unsigned int n) -> float"""
  return _vnl_c_vectorPython.vnl_c_vectorF_two_nrm2(*args)

def vnl_c_vectorF_rms_norm(*args):
  """vnl_c_vectorF_rms_norm(float p, unsigned int n) -> float"""
  return _vnl_c_vectorPython.vnl_c_vectorF_rms_norm(*args)

def vnl_c_vectorF_euclid_dist_sq(*args):
  """vnl_c_vectorF_euclid_dist_sq(float arg0, float arg1, unsigned int arg2) -> float"""
  return _vnl_c_vectorPython.vnl_c_vectorF_euclid_dist_sq(*args)

def vnl_c_vectorF_allocate_Tptr(*args):
  """vnl_c_vectorF_allocate_Tptr(int n) -> float"""
  return _vnl_c_vectorPython.vnl_c_vectorF_allocate_Tptr(*args)

def vnl_c_vectorF_allocate_T(*args):
  """vnl_c_vectorF_allocate_T(int n) -> float"""
  return _vnl_c_vectorPython.vnl_c_vectorF_allocate_T(*args)

def vnl_c_vectorF_deallocate(*args):
  """
    deallocate(float arg0, int n_when_allocated)
    vnl_c_vectorF_deallocate(float arg0, int n_when_allocated)
    """
  return _vnl_c_vectorPython.vnl_c_vectorF_deallocate(*args)

class vnl_c_vectorLD(object):
    """Proxy of C++ vnl_c_vectorLD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorLD
    def __init__(self, *args): 
        """
        __init__(self, vnl_c_vectorLD arg0) -> vnl_c_vectorLD
        __init__(self) -> vnl_c_vectorLD
        """
        _vnl_c_vectorPython.vnl_c_vectorLD_swiginit(self,_vnl_c_vectorPython.new_vnl_c_vectorLD(*args))
    def sum(*args):
        """sum(long double v, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_sum(*args)

    sum = staticmethod(sum)
    def squared_magnitude(*args):
        """squared_magnitude(long double p, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_squared_magnitude(*args)

    squared_magnitude = staticmethod(squared_magnitude)
    def normalize(*args):
        """normalize(long double arg0, unsigned int n)"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_normalize(*args)

    normalize = staticmethod(normalize)
    def copy(*args):
        """copy(long double x, long double y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_copy(*args)

    copy = staticmethod(copy)
    def scale(*args):
        """scale(long double x, long double y, unsigned int arg2, long double arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_scale(*args)

    scale = staticmethod(scale)
    def add(*args):
        """
        add(long double x, long double y, long double z, unsigned int arg3)
        add(long double x, long double y, long double z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorLD_add(*args)

    add = staticmethod(add)
    def subtract(*args):
        """
        subtract(long double x, long double y, long double z, unsigned int arg3)
        subtract(long double x, long double y, long double z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorLD_subtract(*args)

    subtract = staticmethod(subtract)
    def multiply(*args):
        """
        multiply(long double x, long double y, long double z, unsigned int arg3)
        multiply(long double x, long double y, long double z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorLD_multiply(*args)

    multiply = staticmethod(multiply)
    def divide(*args):
        """
        divide(long double x, long double y, long double z, unsigned int arg3)
        divide(long double x, long double y, long double z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorLD_divide(*args)

    divide = staticmethod(divide)
    def negate(*args):
        """negate(long double x, long double y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_negate(*args)

    negate = staticmethod(negate)
    def invert(*args):
        """invert(long double x, long double y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_invert(*args)

    invert = staticmethod(invert)
    def saxpy(*args):
        """saxpy(long double a, long double x, long double y, unsigned int arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_saxpy(*args)

    saxpy = staticmethod(saxpy)
    def fill(*args):
        """fill(long double x, unsigned int arg1, long double v)"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_fill(*args)

    fill = staticmethod(fill)
    def reverse(*args):
        """reverse(long double x, unsigned int arg1)"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_reverse(*args)

    reverse = staticmethod(reverse)
    def dot_product(*args):
        """dot_product(long double arg0, long double arg1, unsigned int arg2) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_dot_product(*args)

    dot_product = staticmethod(dot_product)
    def inner_product(*args):
        """inner_product(long double arg0, long double arg1, unsigned int arg2) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_inner_product(*args)

    inner_product = staticmethod(inner_product)
    def conjugate(*args):
        """conjugate(long double arg0, long double arg1, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_conjugate(*args)

    conjugate = staticmethod(conjugate)
    def max_value(*args):
        """max_value(long double arg0, unsigned int arg1) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_max_value(*args)

    max_value = staticmethod(max_value)
    def min_value(*args):
        """min_value(long double arg0, unsigned int arg1) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_min_value(*args)

    min_value = staticmethod(min_value)
    def mean(*args):
        """mean(long double p, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_mean(*args)

    mean = staticmethod(mean)
    def std(*args):
        """std(long double p, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_std(*args)

    std = staticmethod(std)
    def sum_sq_diff_means(*args):
        """sum_sq_diff_means(long double v, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_sum_sq_diff_means(*args)

    sum_sq_diff_means = staticmethod(sum_sq_diff_means)
    def one_norm(*args):
        """one_norm(long double p, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_one_norm(*args)

    one_norm = staticmethod(one_norm)
    def two_norm(*args):
        """two_norm(long double p, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_two_norm(*args)

    two_norm = staticmethod(two_norm)
    def inf_norm(*args):
        """inf_norm(long double p, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_inf_norm(*args)

    inf_norm = staticmethod(inf_norm)
    def two_nrm2(*args):
        """two_nrm2(long double p, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_two_nrm2(*args)

    two_nrm2 = staticmethod(two_nrm2)
    def rms_norm(*args):
        """rms_norm(long double p, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_rms_norm(*args)

    rms_norm = staticmethod(rms_norm)
    def euclid_dist_sq(*args):
        """euclid_dist_sq(long double arg0, long double arg1, unsigned int arg2) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_euclid_dist_sq(*args)

    euclid_dist_sq = staticmethod(euclid_dist_sq)
    def allocate_Tptr(*args):
        """allocate_Tptr(int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_allocate_Tptr(*args)

    allocate_Tptr = staticmethod(allocate_Tptr)
    def allocate_T(*args):
        """allocate_T(int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vectorLD_allocate_T(*args)

    allocate_T = staticmethod(allocate_T)
    def deallocate(*args):
        """
        deallocate(long double arg0, int n_when_allocated)
        deallocate(long double arg0, int n_when_allocated)
        """
        return _vnl_c_vectorPython.vnl_c_vectorLD_deallocate(*args)

    deallocate = staticmethod(deallocate)
vnl_c_vectorLD_swigregister = _vnl_c_vectorPython.vnl_c_vectorLD_swigregister
vnl_c_vectorLD_swigregister(vnl_c_vectorLD)

def vnl_c_vectorLD_sum(*args):
  """vnl_c_vectorLD_sum(long double v, unsigned int n) -> long double"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_sum(*args)

def vnl_c_vectorLD_squared_magnitude(*args):
  """vnl_c_vectorLD_squared_magnitude(long double p, unsigned int n) -> long double"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_squared_magnitude(*args)

def vnl_c_vectorLD_normalize(*args):
  """vnl_c_vectorLD_normalize(long double arg0, unsigned int n)"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_normalize(*args)

def vnl_c_vectorLD_copy(*args):
  """vnl_c_vectorLD_copy(long double x, long double y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_copy(*args)

def vnl_c_vectorLD_scale(*args):
  """vnl_c_vectorLD_scale(long double x, long double y, unsigned int arg2, long double arg3)"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_scale(*args)

def vnl_c_vectorLD_add(*args):
  """
    add(long double x, long double y, long double z, unsigned int arg3)
    vnl_c_vectorLD_add(long double x, long double y, long double z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorLD_add(*args)

def vnl_c_vectorLD_subtract(*args):
  """
    subtract(long double x, long double y, long double z, unsigned int arg3)
    vnl_c_vectorLD_subtract(long double x, long double y, long double z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorLD_subtract(*args)

def vnl_c_vectorLD_multiply(*args):
  """
    multiply(long double x, long double y, long double z, unsigned int arg3)
    vnl_c_vectorLD_multiply(long double x, long double y, long double z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorLD_multiply(*args)

def vnl_c_vectorLD_divide(*args):
  """
    divide(long double x, long double y, long double z, unsigned int arg3)
    vnl_c_vectorLD_divide(long double x, long double y, long double z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorLD_divide(*args)

def vnl_c_vectorLD_negate(*args):
  """vnl_c_vectorLD_negate(long double x, long double y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_negate(*args)

def vnl_c_vectorLD_invert(*args):
  """vnl_c_vectorLD_invert(long double x, long double y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_invert(*args)

def vnl_c_vectorLD_saxpy(*args):
  """vnl_c_vectorLD_saxpy(long double a, long double x, long double y, unsigned int arg3)"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_saxpy(*args)

def vnl_c_vectorLD_fill(*args):
  """vnl_c_vectorLD_fill(long double x, unsigned int arg1, long double v)"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_fill(*args)

def vnl_c_vectorLD_reverse(*args):
  """vnl_c_vectorLD_reverse(long double x, unsigned int arg1)"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_reverse(*args)

def vnl_c_vectorLD_dot_product(*args):
  """vnl_c_vectorLD_dot_product(long double arg0, long double arg1, unsigned int arg2) -> long double"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_dot_product(*args)

def vnl_c_vectorLD_inner_product(*args):
  """vnl_c_vectorLD_inner_product(long double arg0, long double arg1, unsigned int arg2) -> long double"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_inner_product(*args)

def vnl_c_vectorLD_conjugate(*args):
  """vnl_c_vectorLD_conjugate(long double arg0, long double arg1, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_conjugate(*args)

def vnl_c_vectorLD_max_value(*args):
  """vnl_c_vectorLD_max_value(long double arg0, unsigned int arg1) -> long double"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_max_value(*args)

def vnl_c_vectorLD_min_value(*args):
  """vnl_c_vectorLD_min_value(long double arg0, unsigned int arg1) -> long double"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_min_value(*args)

def vnl_c_vectorLD_mean(*args):
  """vnl_c_vectorLD_mean(long double p, unsigned int n) -> long double"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_mean(*args)

def vnl_c_vectorLD_std(*args):
  """vnl_c_vectorLD_std(long double p, unsigned int n) -> long double"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_std(*args)

def vnl_c_vectorLD_sum_sq_diff_means(*args):
  """vnl_c_vectorLD_sum_sq_diff_means(long double v, unsigned int n) -> long double"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_sum_sq_diff_means(*args)

def vnl_c_vectorLD_one_norm(*args):
  """vnl_c_vectorLD_one_norm(long double p, unsigned int n) -> long double"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_one_norm(*args)

def vnl_c_vectorLD_two_norm(*args):
  """vnl_c_vectorLD_two_norm(long double p, unsigned int n) -> long double"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_two_norm(*args)

def vnl_c_vectorLD_inf_norm(*args):
  """vnl_c_vectorLD_inf_norm(long double p, unsigned int n) -> long double"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_inf_norm(*args)

def vnl_c_vectorLD_two_nrm2(*args):
  """vnl_c_vectorLD_two_nrm2(long double p, unsigned int n) -> long double"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_two_nrm2(*args)

def vnl_c_vectorLD_rms_norm(*args):
  """vnl_c_vectorLD_rms_norm(long double p, unsigned int n) -> long double"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_rms_norm(*args)

def vnl_c_vectorLD_euclid_dist_sq(*args):
  """vnl_c_vectorLD_euclid_dist_sq(long double arg0, long double arg1, unsigned int arg2) -> long double"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_euclid_dist_sq(*args)

def vnl_c_vectorLD_allocate_Tptr(*args):
  """vnl_c_vectorLD_allocate_Tptr(int n) -> long double"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_allocate_Tptr(*args)

def vnl_c_vectorLD_allocate_T(*args):
  """vnl_c_vectorLD_allocate_T(int n) -> long double"""
  return _vnl_c_vectorPython.vnl_c_vectorLD_allocate_T(*args)

def vnl_c_vectorLD_deallocate(*args):
  """
    deallocate(long double arg0, int n_when_allocated)
    vnl_c_vectorLD_deallocate(long double arg0, int n_when_allocated)
    """
  return _vnl_c_vectorPython.vnl_c_vectorLD_deallocate(*args)

class vnl_c_vectorSC(object):
    """Proxy of C++ vnl_c_vectorSC class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorSC
    def __init__(self, *args): 
        """
        __init__(self, vnl_c_vectorSC arg0) -> vnl_c_vectorSC
        __init__(self) -> vnl_c_vectorSC
        """
        _vnl_c_vectorPython.vnl_c_vectorSC_swiginit(self,_vnl_c_vectorPython.new_vnl_c_vectorSC(*args))
    def sum(*args):
        """sum(signed char v, unsigned int n) -> signed char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_sum(*args)

    sum = staticmethod(sum)
    def squared_magnitude(*args):
        """squared_magnitude(signed char p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_squared_magnitude(*args)

    squared_magnitude = staticmethod(squared_magnitude)
    def normalize(*args):
        """normalize(signed char arg0, unsigned int n)"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_normalize(*args)

    normalize = staticmethod(normalize)
    def copy(*args):
        """copy(signed char x, signed char y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_copy(*args)

    copy = staticmethod(copy)
    def scale(*args):
        """scale(signed char x, signed char y, unsigned int arg2, signed char arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_scale(*args)

    scale = staticmethod(scale)
    def add(*args):
        """
        add(signed char x, signed char y, signed char z, unsigned int arg3)
        add(signed char x, signed char y, signed char z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSC_add(*args)

    add = staticmethod(add)
    def subtract(*args):
        """
        subtract(signed char x, signed char y, signed char z, unsigned int arg3)
        subtract(signed char x, signed char y, signed char z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSC_subtract(*args)

    subtract = staticmethod(subtract)
    def multiply(*args):
        """
        multiply(signed char x, signed char y, signed char z, unsigned int arg3)
        multiply(signed char x, signed char y, signed char z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSC_multiply(*args)

    multiply = staticmethod(multiply)
    def divide(*args):
        """
        divide(signed char x, signed char y, signed char z, unsigned int arg3)
        divide(signed char x, signed char y, signed char z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSC_divide(*args)

    divide = staticmethod(divide)
    def negate(*args):
        """negate(signed char x, signed char y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_negate(*args)

    negate = staticmethod(negate)
    def invert(*args):
        """invert(signed char x, signed char y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_invert(*args)

    invert = staticmethod(invert)
    def saxpy(*args):
        """saxpy(signed char a, signed char x, signed char y, unsigned int arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_saxpy(*args)

    saxpy = staticmethod(saxpy)
    def fill(*args):
        """fill(signed char x, unsigned int arg1, signed char v)"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_fill(*args)

    fill = staticmethod(fill)
    def reverse(*args):
        """reverse(signed char x, unsigned int arg1)"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_reverse(*args)

    reverse = staticmethod(reverse)
    def dot_product(*args):
        """dot_product(signed char arg0, signed char arg1, unsigned int arg2) -> signed char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_dot_product(*args)

    dot_product = staticmethod(dot_product)
    def inner_product(*args):
        """inner_product(signed char arg0, signed char arg1, unsigned int arg2) -> signed char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_inner_product(*args)

    inner_product = staticmethod(inner_product)
    def conjugate(*args):
        """conjugate(signed char arg0, signed char arg1, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_conjugate(*args)

    conjugate = staticmethod(conjugate)
    def max_value(*args):
        """max_value(signed char arg0, unsigned int arg1) -> signed char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_max_value(*args)

    max_value = staticmethod(max_value)
    def min_value(*args):
        """min_value(signed char arg0, unsigned int arg1) -> signed char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_min_value(*args)

    min_value = staticmethod(min_value)
    def mean(*args):
        """mean(signed char p, unsigned int n) -> signed char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_mean(*args)

    mean = staticmethod(mean)
    def std(*args):
        """std(signed char p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_std(*args)

    std = staticmethod(std)
    def sum_sq_diff_means(*args):
        """sum_sq_diff_means(signed char v, unsigned int n) -> signed char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_sum_sq_diff_means(*args)

    sum_sq_diff_means = staticmethod(sum_sq_diff_means)
    def one_norm(*args):
        """one_norm(signed char p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_one_norm(*args)

    one_norm = staticmethod(one_norm)
    def two_norm(*args):
        """two_norm(signed char p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_two_norm(*args)

    two_norm = staticmethod(two_norm)
    def inf_norm(*args):
        """inf_norm(signed char p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_inf_norm(*args)

    inf_norm = staticmethod(inf_norm)
    def two_nrm2(*args):
        """two_nrm2(signed char p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_two_nrm2(*args)

    two_nrm2 = staticmethod(two_nrm2)
    def rms_norm(*args):
        """rms_norm(signed char p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_rms_norm(*args)

    rms_norm = staticmethod(rms_norm)
    def euclid_dist_sq(*args):
        """euclid_dist_sq(signed char arg0, signed char arg1, unsigned int arg2) -> signed char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_euclid_dist_sq(*args)

    euclid_dist_sq = staticmethod(euclid_dist_sq)
    def allocate_Tptr(*args):
        """allocate_Tptr(int n) -> signed char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_allocate_Tptr(*args)

    allocate_Tptr = staticmethod(allocate_Tptr)
    def allocate_T(*args):
        """allocate_T(int n) -> signed char"""
        return _vnl_c_vectorPython.vnl_c_vectorSC_allocate_T(*args)

    allocate_T = staticmethod(allocate_T)
    def deallocate(*args):
        """
        deallocate(signed char arg0, int n_when_allocated)
        deallocate(signed char arg0, int n_when_allocated)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSC_deallocate(*args)

    deallocate = staticmethod(deallocate)
vnl_c_vectorSC_swigregister = _vnl_c_vectorPython.vnl_c_vectorSC_swigregister
vnl_c_vectorSC_swigregister(vnl_c_vectorSC)

def vnl_c_vectorSC_sum(*args):
  """vnl_c_vectorSC_sum(signed char v, unsigned int n) -> signed char"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_sum(*args)

def vnl_c_vectorSC_squared_magnitude(*args):
  """vnl_c_vectorSC_squared_magnitude(signed char p, unsigned int n) -> unsigned char"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_squared_magnitude(*args)

def vnl_c_vectorSC_normalize(*args):
  """vnl_c_vectorSC_normalize(signed char arg0, unsigned int n)"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_normalize(*args)

def vnl_c_vectorSC_copy(*args):
  """vnl_c_vectorSC_copy(signed char x, signed char y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_copy(*args)

def vnl_c_vectorSC_scale(*args):
  """vnl_c_vectorSC_scale(signed char x, signed char y, unsigned int arg2, signed char arg3)"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_scale(*args)

def vnl_c_vectorSC_add(*args):
  """
    add(signed char x, signed char y, signed char z, unsigned int arg3)
    vnl_c_vectorSC_add(signed char x, signed char y, signed char z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorSC_add(*args)

def vnl_c_vectorSC_subtract(*args):
  """
    subtract(signed char x, signed char y, signed char z, unsigned int arg3)
    vnl_c_vectorSC_subtract(signed char x, signed char y, signed char z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorSC_subtract(*args)

def vnl_c_vectorSC_multiply(*args):
  """
    multiply(signed char x, signed char y, signed char z, unsigned int arg3)
    vnl_c_vectorSC_multiply(signed char x, signed char y, signed char z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorSC_multiply(*args)

def vnl_c_vectorSC_divide(*args):
  """
    divide(signed char x, signed char y, signed char z, unsigned int arg3)
    vnl_c_vectorSC_divide(signed char x, signed char y, signed char z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorSC_divide(*args)

def vnl_c_vectorSC_negate(*args):
  """vnl_c_vectorSC_negate(signed char x, signed char y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_negate(*args)

def vnl_c_vectorSC_invert(*args):
  """vnl_c_vectorSC_invert(signed char x, signed char y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_invert(*args)

def vnl_c_vectorSC_saxpy(*args):
  """vnl_c_vectorSC_saxpy(signed char a, signed char x, signed char y, unsigned int arg3)"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_saxpy(*args)

def vnl_c_vectorSC_fill(*args):
  """vnl_c_vectorSC_fill(signed char x, unsigned int arg1, signed char v)"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_fill(*args)

def vnl_c_vectorSC_reverse(*args):
  """vnl_c_vectorSC_reverse(signed char x, unsigned int arg1)"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_reverse(*args)

def vnl_c_vectorSC_dot_product(*args):
  """vnl_c_vectorSC_dot_product(signed char arg0, signed char arg1, unsigned int arg2) -> signed char"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_dot_product(*args)

def vnl_c_vectorSC_inner_product(*args):
  """vnl_c_vectorSC_inner_product(signed char arg0, signed char arg1, unsigned int arg2) -> signed char"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_inner_product(*args)

def vnl_c_vectorSC_conjugate(*args):
  """vnl_c_vectorSC_conjugate(signed char arg0, signed char arg1, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_conjugate(*args)

def vnl_c_vectorSC_max_value(*args):
  """vnl_c_vectorSC_max_value(signed char arg0, unsigned int arg1) -> signed char"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_max_value(*args)

def vnl_c_vectorSC_min_value(*args):
  """vnl_c_vectorSC_min_value(signed char arg0, unsigned int arg1) -> signed char"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_min_value(*args)

def vnl_c_vectorSC_mean(*args):
  """vnl_c_vectorSC_mean(signed char p, unsigned int n) -> signed char"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_mean(*args)

def vnl_c_vectorSC_std(*args):
  """vnl_c_vectorSC_std(signed char p, unsigned int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_std(*args)

def vnl_c_vectorSC_sum_sq_diff_means(*args):
  """vnl_c_vectorSC_sum_sq_diff_means(signed char v, unsigned int n) -> signed char"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_sum_sq_diff_means(*args)

def vnl_c_vectorSC_one_norm(*args):
  """vnl_c_vectorSC_one_norm(signed char p, unsigned int n) -> unsigned char"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_one_norm(*args)

def vnl_c_vectorSC_two_norm(*args):
  """vnl_c_vectorSC_two_norm(signed char p, unsigned int n) -> unsigned char"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_two_norm(*args)

def vnl_c_vectorSC_inf_norm(*args):
  """vnl_c_vectorSC_inf_norm(signed char p, unsigned int n) -> unsigned char"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_inf_norm(*args)

def vnl_c_vectorSC_two_nrm2(*args):
  """vnl_c_vectorSC_two_nrm2(signed char p, unsigned int n) -> unsigned char"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_two_nrm2(*args)

def vnl_c_vectorSC_rms_norm(*args):
  """vnl_c_vectorSC_rms_norm(signed char p, unsigned int n) -> unsigned char"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_rms_norm(*args)

def vnl_c_vectorSC_euclid_dist_sq(*args):
  """vnl_c_vectorSC_euclid_dist_sq(signed char arg0, signed char arg1, unsigned int arg2) -> signed char"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_euclid_dist_sq(*args)

def vnl_c_vectorSC_allocate_Tptr(*args):
  """vnl_c_vectorSC_allocate_Tptr(int n) -> signed char"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_allocate_Tptr(*args)

def vnl_c_vectorSC_allocate_T(*args):
  """vnl_c_vectorSC_allocate_T(int n) -> signed char"""
  return _vnl_c_vectorPython.vnl_c_vectorSC_allocate_T(*args)

def vnl_c_vectorSC_deallocate(*args):
  """
    deallocate(signed char arg0, int n_when_allocated)
    vnl_c_vectorSC_deallocate(signed char arg0, int n_when_allocated)
    """
  return _vnl_c_vectorPython.vnl_c_vectorSC_deallocate(*args)

class vnl_c_vectorSI(object):
    """Proxy of C++ vnl_c_vectorSI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorSI
    def __init__(self, *args): 
        """
        __init__(self, vnl_c_vectorSI arg0) -> vnl_c_vectorSI
        __init__(self) -> vnl_c_vectorSI
        """
        _vnl_c_vectorPython.vnl_c_vectorSI_swiginit(self,_vnl_c_vectorPython.new_vnl_c_vectorSI(*args))
    def sum(*args):
        """sum(int v, unsigned int n) -> int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_sum(*args)

    sum = staticmethod(sum)
    def squared_magnitude(*args):
        """squared_magnitude(int p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_squared_magnitude(*args)

    squared_magnitude = staticmethod(squared_magnitude)
    def normalize(*args):
        """normalize(int arg0, unsigned int n)"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_normalize(*args)

    normalize = staticmethod(normalize)
    def copy(*args):
        """copy(int x, int y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_copy(*args)

    copy = staticmethod(copy)
    def scale(*args):
        """scale(int x, int y, unsigned int arg2, int arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_scale(*args)

    scale = staticmethod(scale)
    def add(*args):
        """
        add(int x, int y, int z, unsigned int arg3)
        add(int x, int y, int z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSI_add(*args)

    add = staticmethod(add)
    def subtract(*args):
        """
        subtract(int x, int y, int z, unsigned int arg3)
        subtract(int x, int y, int z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSI_subtract(*args)

    subtract = staticmethod(subtract)
    def multiply(*args):
        """
        multiply(int x, int y, int z, unsigned int arg3)
        multiply(int x, int y, int z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSI_multiply(*args)

    multiply = staticmethod(multiply)
    def divide(*args):
        """
        divide(int x, int y, int z, unsigned int arg3)
        divide(int x, int y, int z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSI_divide(*args)

    divide = staticmethod(divide)
    def negate(*args):
        """negate(int x, int y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_negate(*args)

    negate = staticmethod(negate)
    def invert(*args):
        """invert(int x, int y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_invert(*args)

    invert = staticmethod(invert)
    def saxpy(*args):
        """saxpy(int a, int x, int y, unsigned int arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_saxpy(*args)

    saxpy = staticmethod(saxpy)
    def fill(*args):
        """fill(int x, unsigned int arg1, int v)"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_fill(*args)

    fill = staticmethod(fill)
    def reverse(*args):
        """reverse(int x, unsigned int arg1)"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_reverse(*args)

    reverse = staticmethod(reverse)
    def dot_product(*args):
        """dot_product(int arg0, int arg1, unsigned int arg2) -> int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_dot_product(*args)

    dot_product = staticmethod(dot_product)
    def inner_product(*args):
        """inner_product(int arg0, int arg1, unsigned int arg2) -> int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_inner_product(*args)

    inner_product = staticmethod(inner_product)
    def conjugate(*args):
        """conjugate(int arg0, int arg1, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_conjugate(*args)

    conjugate = staticmethod(conjugate)
    def max_value(*args):
        """max_value(int arg0, unsigned int arg1) -> int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_max_value(*args)

    max_value = staticmethod(max_value)
    def min_value(*args):
        """min_value(int arg0, unsigned int arg1) -> int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_min_value(*args)

    min_value = staticmethod(min_value)
    def mean(*args):
        """mean(int p, unsigned int n) -> int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_mean(*args)

    mean = staticmethod(mean)
    def std(*args):
        """std(int p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_std(*args)

    std = staticmethod(std)
    def sum_sq_diff_means(*args):
        """sum_sq_diff_means(int v, unsigned int n) -> int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_sum_sq_diff_means(*args)

    sum_sq_diff_means = staticmethod(sum_sq_diff_means)
    def one_norm(*args):
        """one_norm(int p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_one_norm(*args)

    one_norm = staticmethod(one_norm)
    def two_norm(*args):
        """two_norm(int p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_two_norm(*args)

    two_norm = staticmethod(two_norm)
    def inf_norm(*args):
        """inf_norm(int p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_inf_norm(*args)

    inf_norm = staticmethod(inf_norm)
    def two_nrm2(*args):
        """two_nrm2(int p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_two_nrm2(*args)

    two_nrm2 = staticmethod(two_nrm2)
    def rms_norm(*args):
        """rms_norm(int p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_rms_norm(*args)

    rms_norm = staticmethod(rms_norm)
    def euclid_dist_sq(*args):
        """euclid_dist_sq(int arg0, int arg1, unsigned int arg2) -> int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_euclid_dist_sq(*args)

    euclid_dist_sq = staticmethod(euclid_dist_sq)
    def allocate_Tptr(*args):
        """allocate_Tptr(int n) -> int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_allocate_Tptr(*args)

    allocate_Tptr = staticmethod(allocate_Tptr)
    def allocate_T(*args):
        """allocate_T(int n) -> int"""
        return _vnl_c_vectorPython.vnl_c_vectorSI_allocate_T(*args)

    allocate_T = staticmethod(allocate_T)
    def deallocate(*args):
        """
        deallocate(int arg0, int n_when_allocated)
        deallocate(int arg0, int n_when_allocated)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSI_deallocate(*args)

    deallocate = staticmethod(deallocate)
vnl_c_vectorSI_swigregister = _vnl_c_vectorPython.vnl_c_vectorSI_swigregister
vnl_c_vectorSI_swigregister(vnl_c_vectorSI)

def vnl_c_vectorSI_sum(*args):
  """vnl_c_vectorSI_sum(int v, unsigned int n) -> int"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_sum(*args)

def vnl_c_vectorSI_squared_magnitude(*args):
  """vnl_c_vectorSI_squared_magnitude(int p, unsigned int n) -> unsigned int"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_squared_magnitude(*args)

def vnl_c_vectorSI_normalize(*args):
  """vnl_c_vectorSI_normalize(int arg0, unsigned int n)"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_normalize(*args)

def vnl_c_vectorSI_copy(*args):
  """vnl_c_vectorSI_copy(int x, int y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_copy(*args)

def vnl_c_vectorSI_scale(*args):
  """vnl_c_vectorSI_scale(int x, int y, unsigned int arg2, int arg3)"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_scale(*args)

def vnl_c_vectorSI_add(*args):
  """
    add(int x, int y, int z, unsigned int arg3)
    vnl_c_vectorSI_add(int x, int y, int z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorSI_add(*args)

def vnl_c_vectorSI_subtract(*args):
  """
    subtract(int x, int y, int z, unsigned int arg3)
    vnl_c_vectorSI_subtract(int x, int y, int z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorSI_subtract(*args)

def vnl_c_vectorSI_multiply(*args):
  """
    multiply(int x, int y, int z, unsigned int arg3)
    vnl_c_vectorSI_multiply(int x, int y, int z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorSI_multiply(*args)

def vnl_c_vectorSI_divide(*args):
  """
    divide(int x, int y, int z, unsigned int arg3)
    vnl_c_vectorSI_divide(int x, int y, int z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorSI_divide(*args)

def vnl_c_vectorSI_negate(*args):
  """vnl_c_vectorSI_negate(int x, int y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_negate(*args)

def vnl_c_vectorSI_invert(*args):
  """vnl_c_vectorSI_invert(int x, int y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_invert(*args)

def vnl_c_vectorSI_saxpy(*args):
  """vnl_c_vectorSI_saxpy(int a, int x, int y, unsigned int arg3)"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_saxpy(*args)

def vnl_c_vectorSI_fill(*args):
  """vnl_c_vectorSI_fill(int x, unsigned int arg1, int v)"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_fill(*args)

def vnl_c_vectorSI_reverse(*args):
  """vnl_c_vectorSI_reverse(int x, unsigned int arg1)"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_reverse(*args)

def vnl_c_vectorSI_dot_product(*args):
  """vnl_c_vectorSI_dot_product(int arg0, int arg1, unsigned int arg2) -> int"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_dot_product(*args)

def vnl_c_vectorSI_inner_product(*args):
  """vnl_c_vectorSI_inner_product(int arg0, int arg1, unsigned int arg2) -> int"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_inner_product(*args)

def vnl_c_vectorSI_conjugate(*args):
  """vnl_c_vectorSI_conjugate(int arg0, int arg1, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_conjugate(*args)

def vnl_c_vectorSI_max_value(*args):
  """vnl_c_vectorSI_max_value(int arg0, unsigned int arg1) -> int"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_max_value(*args)

def vnl_c_vectorSI_min_value(*args):
  """vnl_c_vectorSI_min_value(int arg0, unsigned int arg1) -> int"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_min_value(*args)

def vnl_c_vectorSI_mean(*args):
  """vnl_c_vectorSI_mean(int p, unsigned int n) -> int"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_mean(*args)

def vnl_c_vectorSI_std(*args):
  """vnl_c_vectorSI_std(int p, unsigned int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_std(*args)

def vnl_c_vectorSI_sum_sq_diff_means(*args):
  """vnl_c_vectorSI_sum_sq_diff_means(int v, unsigned int n) -> int"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_sum_sq_diff_means(*args)

def vnl_c_vectorSI_one_norm(*args):
  """vnl_c_vectorSI_one_norm(int p, unsigned int n) -> unsigned int"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_one_norm(*args)

def vnl_c_vectorSI_two_norm(*args):
  """vnl_c_vectorSI_two_norm(int p, unsigned int n) -> unsigned int"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_two_norm(*args)

def vnl_c_vectorSI_inf_norm(*args):
  """vnl_c_vectorSI_inf_norm(int p, unsigned int n) -> unsigned int"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_inf_norm(*args)

def vnl_c_vectorSI_two_nrm2(*args):
  """vnl_c_vectorSI_two_nrm2(int p, unsigned int n) -> unsigned int"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_two_nrm2(*args)

def vnl_c_vectorSI_rms_norm(*args):
  """vnl_c_vectorSI_rms_norm(int p, unsigned int n) -> unsigned int"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_rms_norm(*args)

def vnl_c_vectorSI_euclid_dist_sq(*args):
  """vnl_c_vectorSI_euclid_dist_sq(int arg0, int arg1, unsigned int arg2) -> int"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_euclid_dist_sq(*args)

def vnl_c_vectorSI_allocate_Tptr(*args):
  """vnl_c_vectorSI_allocate_Tptr(int n) -> int"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_allocate_Tptr(*args)

def vnl_c_vectorSI_allocate_T(*args):
  """vnl_c_vectorSI_allocate_T(int n) -> int"""
  return _vnl_c_vectorPython.vnl_c_vectorSI_allocate_T(*args)

def vnl_c_vectorSI_deallocate(*args):
  """
    deallocate(int arg0, int n_when_allocated)
    vnl_c_vectorSI_deallocate(int arg0, int n_when_allocated)
    """
  return _vnl_c_vectorPython.vnl_c_vectorSI_deallocate(*args)

class vnl_c_vectorSL(object):
    """Proxy of C++ vnl_c_vectorSL class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorSL
    def __init__(self, *args): 
        """
        __init__(self, vnl_c_vectorSL arg0) -> vnl_c_vectorSL
        __init__(self) -> vnl_c_vectorSL
        """
        _vnl_c_vectorPython.vnl_c_vectorSL_swiginit(self,_vnl_c_vectorPython.new_vnl_c_vectorSL(*args))
    def sum(*args):
        """sum(long v, unsigned int n) -> long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_sum(*args)

    sum = staticmethod(sum)
    def squared_magnitude(*args):
        """squared_magnitude(long p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_squared_magnitude(*args)

    squared_magnitude = staticmethod(squared_magnitude)
    def normalize(*args):
        """normalize(long arg0, unsigned int n)"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_normalize(*args)

    normalize = staticmethod(normalize)
    def copy(*args):
        """copy(long x, long y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_copy(*args)

    copy = staticmethod(copy)
    def scale(*args):
        """scale(long x, long y, unsigned int arg2, long arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_scale(*args)

    scale = staticmethod(scale)
    def add(*args):
        """
        add(long x, long y, long z, unsigned int arg3)
        add(long x, long y, long z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSL_add(*args)

    add = staticmethod(add)
    def subtract(*args):
        """
        subtract(long x, long y, long z, unsigned int arg3)
        subtract(long x, long y, long z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSL_subtract(*args)

    subtract = staticmethod(subtract)
    def multiply(*args):
        """
        multiply(long x, long y, long z, unsigned int arg3)
        multiply(long x, long y, long z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSL_multiply(*args)

    multiply = staticmethod(multiply)
    def divide(*args):
        """
        divide(long x, long y, long z, unsigned int arg3)
        divide(long x, long y, long z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSL_divide(*args)

    divide = staticmethod(divide)
    def negate(*args):
        """negate(long x, long y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_negate(*args)

    negate = staticmethod(negate)
    def invert(*args):
        """invert(long x, long y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_invert(*args)

    invert = staticmethod(invert)
    def saxpy(*args):
        """saxpy(long a, long x, long y, unsigned int arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_saxpy(*args)

    saxpy = staticmethod(saxpy)
    def fill(*args):
        """fill(long x, unsigned int arg1, long v)"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_fill(*args)

    fill = staticmethod(fill)
    def reverse(*args):
        """reverse(long x, unsigned int arg1)"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_reverse(*args)

    reverse = staticmethod(reverse)
    def dot_product(*args):
        """dot_product(long arg0, long arg1, unsigned int arg2) -> long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_dot_product(*args)

    dot_product = staticmethod(dot_product)
    def inner_product(*args):
        """inner_product(long arg0, long arg1, unsigned int arg2) -> long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_inner_product(*args)

    inner_product = staticmethod(inner_product)
    def conjugate(*args):
        """conjugate(long arg0, long arg1, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_conjugate(*args)

    conjugate = staticmethod(conjugate)
    def max_value(*args):
        """max_value(long arg0, unsigned int arg1) -> long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_max_value(*args)

    max_value = staticmethod(max_value)
    def min_value(*args):
        """min_value(long arg0, unsigned int arg1) -> long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_min_value(*args)

    min_value = staticmethod(min_value)
    def mean(*args):
        """mean(long p, unsigned int n) -> long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_mean(*args)

    mean = staticmethod(mean)
    def std(*args):
        """std(long p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_std(*args)

    std = staticmethod(std)
    def sum_sq_diff_means(*args):
        """sum_sq_diff_means(long v, unsigned int n) -> long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_sum_sq_diff_means(*args)

    sum_sq_diff_means = staticmethod(sum_sq_diff_means)
    def one_norm(*args):
        """one_norm(long p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_one_norm(*args)

    one_norm = staticmethod(one_norm)
    def two_norm(*args):
        """two_norm(long p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_two_norm(*args)

    two_norm = staticmethod(two_norm)
    def inf_norm(*args):
        """inf_norm(long p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_inf_norm(*args)

    inf_norm = staticmethod(inf_norm)
    def two_nrm2(*args):
        """two_nrm2(long p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_two_nrm2(*args)

    two_nrm2 = staticmethod(two_nrm2)
    def rms_norm(*args):
        """rms_norm(long p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_rms_norm(*args)

    rms_norm = staticmethod(rms_norm)
    def euclid_dist_sq(*args):
        """euclid_dist_sq(long arg0, long arg1, unsigned int arg2) -> long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_euclid_dist_sq(*args)

    euclid_dist_sq = staticmethod(euclid_dist_sq)
    def allocate_Tptr(*args):
        """allocate_Tptr(int n) -> long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_allocate_Tptr(*args)

    allocate_Tptr = staticmethod(allocate_Tptr)
    def allocate_T(*args):
        """allocate_T(int n) -> long"""
        return _vnl_c_vectorPython.vnl_c_vectorSL_allocate_T(*args)

    allocate_T = staticmethod(allocate_T)
    def deallocate(*args):
        """
        deallocate(long arg0, int n_when_allocated)
        deallocate(long arg0, int n_when_allocated)
        """
        return _vnl_c_vectorPython.vnl_c_vectorSL_deallocate(*args)

    deallocate = staticmethod(deallocate)
vnl_c_vectorSL_swigregister = _vnl_c_vectorPython.vnl_c_vectorSL_swigregister
vnl_c_vectorSL_swigregister(vnl_c_vectorSL)

def vnl_c_vectorSL_sum(*args):
  """vnl_c_vectorSL_sum(long v, unsigned int n) -> long"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_sum(*args)

def vnl_c_vectorSL_squared_magnitude(*args):
  """vnl_c_vectorSL_squared_magnitude(long p, unsigned int n) -> unsigned long"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_squared_magnitude(*args)

def vnl_c_vectorSL_normalize(*args):
  """vnl_c_vectorSL_normalize(long arg0, unsigned int n)"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_normalize(*args)

def vnl_c_vectorSL_copy(*args):
  """vnl_c_vectorSL_copy(long x, long y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_copy(*args)

def vnl_c_vectorSL_scale(*args):
  """vnl_c_vectorSL_scale(long x, long y, unsigned int arg2, long arg3)"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_scale(*args)

def vnl_c_vectorSL_add(*args):
  """
    add(long x, long y, long z, unsigned int arg3)
    vnl_c_vectorSL_add(long x, long y, long z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorSL_add(*args)

def vnl_c_vectorSL_subtract(*args):
  """
    subtract(long x, long y, long z, unsigned int arg3)
    vnl_c_vectorSL_subtract(long x, long y, long z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorSL_subtract(*args)

def vnl_c_vectorSL_multiply(*args):
  """
    multiply(long x, long y, long z, unsigned int arg3)
    vnl_c_vectorSL_multiply(long x, long y, long z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorSL_multiply(*args)

def vnl_c_vectorSL_divide(*args):
  """
    divide(long x, long y, long z, unsigned int arg3)
    vnl_c_vectorSL_divide(long x, long y, long z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorSL_divide(*args)

def vnl_c_vectorSL_negate(*args):
  """vnl_c_vectorSL_negate(long x, long y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_negate(*args)

def vnl_c_vectorSL_invert(*args):
  """vnl_c_vectorSL_invert(long x, long y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_invert(*args)

def vnl_c_vectorSL_saxpy(*args):
  """vnl_c_vectorSL_saxpy(long a, long x, long y, unsigned int arg3)"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_saxpy(*args)

def vnl_c_vectorSL_fill(*args):
  """vnl_c_vectorSL_fill(long x, unsigned int arg1, long v)"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_fill(*args)

def vnl_c_vectorSL_reverse(*args):
  """vnl_c_vectorSL_reverse(long x, unsigned int arg1)"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_reverse(*args)

def vnl_c_vectorSL_dot_product(*args):
  """vnl_c_vectorSL_dot_product(long arg0, long arg1, unsigned int arg2) -> long"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_dot_product(*args)

def vnl_c_vectorSL_inner_product(*args):
  """vnl_c_vectorSL_inner_product(long arg0, long arg1, unsigned int arg2) -> long"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_inner_product(*args)

def vnl_c_vectorSL_conjugate(*args):
  """vnl_c_vectorSL_conjugate(long arg0, long arg1, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_conjugate(*args)

def vnl_c_vectorSL_max_value(*args):
  """vnl_c_vectorSL_max_value(long arg0, unsigned int arg1) -> long"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_max_value(*args)

def vnl_c_vectorSL_min_value(*args):
  """vnl_c_vectorSL_min_value(long arg0, unsigned int arg1) -> long"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_min_value(*args)

def vnl_c_vectorSL_mean(*args):
  """vnl_c_vectorSL_mean(long p, unsigned int n) -> long"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_mean(*args)

def vnl_c_vectorSL_std(*args):
  """vnl_c_vectorSL_std(long p, unsigned int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_std(*args)

def vnl_c_vectorSL_sum_sq_diff_means(*args):
  """vnl_c_vectorSL_sum_sq_diff_means(long v, unsigned int n) -> long"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_sum_sq_diff_means(*args)

def vnl_c_vectorSL_one_norm(*args):
  """vnl_c_vectorSL_one_norm(long p, unsigned int n) -> unsigned long"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_one_norm(*args)

def vnl_c_vectorSL_two_norm(*args):
  """vnl_c_vectorSL_two_norm(long p, unsigned int n) -> unsigned long"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_two_norm(*args)

def vnl_c_vectorSL_inf_norm(*args):
  """vnl_c_vectorSL_inf_norm(long p, unsigned int n) -> unsigned long"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_inf_norm(*args)

def vnl_c_vectorSL_two_nrm2(*args):
  """vnl_c_vectorSL_two_nrm2(long p, unsigned int n) -> unsigned long"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_two_nrm2(*args)

def vnl_c_vectorSL_rms_norm(*args):
  """vnl_c_vectorSL_rms_norm(long p, unsigned int n) -> unsigned long"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_rms_norm(*args)

def vnl_c_vectorSL_euclid_dist_sq(*args):
  """vnl_c_vectorSL_euclid_dist_sq(long arg0, long arg1, unsigned int arg2) -> long"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_euclid_dist_sq(*args)

def vnl_c_vectorSL_allocate_Tptr(*args):
  """vnl_c_vectorSL_allocate_Tptr(int n) -> long"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_allocate_Tptr(*args)

def vnl_c_vectorSL_allocate_T(*args):
  """vnl_c_vectorSL_allocate_T(int n) -> long"""
  return _vnl_c_vectorPython.vnl_c_vectorSL_allocate_T(*args)

def vnl_c_vectorSL_deallocate(*args):
  """
    deallocate(long arg0, int n_when_allocated)
    vnl_c_vectorSL_deallocate(long arg0, int n_when_allocated)
    """
  return _vnl_c_vectorPython.vnl_c_vectorSL_deallocate(*args)

class vnl_c_vectorUC(object):
    """Proxy of C++ vnl_c_vectorUC class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorUC
    def __init__(self, *args): 
        """
        __init__(self, vnl_c_vectorUC arg0) -> vnl_c_vectorUC
        __init__(self) -> vnl_c_vectorUC
        """
        _vnl_c_vectorPython.vnl_c_vectorUC_swiginit(self,_vnl_c_vectorPython.new_vnl_c_vectorUC(*args))
    def sum(*args):
        """sum(unsigned char v, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_sum(*args)

    sum = staticmethod(sum)
    def squared_magnitude(*args):
        """squared_magnitude(unsigned char p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_squared_magnitude(*args)

    squared_magnitude = staticmethod(squared_magnitude)
    def normalize(*args):
        """normalize(unsigned char arg0, unsigned int n)"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_normalize(*args)

    normalize = staticmethod(normalize)
    def copy(*args):
        """copy(unsigned char x, unsigned char y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_copy(*args)

    copy = staticmethod(copy)
    def scale(*args):
        """
        scale(unsigned char x, unsigned char y, unsigned int arg2, 
            unsigned char arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUC_scale(*args)

    scale = staticmethod(scale)
    def add(*args):
        """
        add(unsigned char x, unsigned char y, unsigned char z, 
            unsigned int arg3)
        add(unsigned char x, unsigned char y, unsigned char z, 
            unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUC_add(*args)

    add = staticmethod(add)
    def subtract(*args):
        """
        subtract(unsigned char x, unsigned char y, unsigned char z, 
            unsigned int arg3)
        subtract(unsigned char x, unsigned char y, unsigned char z, 
            unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUC_subtract(*args)

    subtract = staticmethod(subtract)
    def multiply(*args):
        """
        multiply(unsigned char x, unsigned char y, unsigned char z, 
            unsigned int arg3)
        multiply(unsigned char x, unsigned char y, unsigned char z, 
            unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUC_multiply(*args)

    multiply = staticmethod(multiply)
    def divide(*args):
        """
        divide(unsigned char x, unsigned char y, unsigned char z, 
            unsigned int arg3)
        divide(unsigned char x, unsigned char y, unsigned char z, 
            unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUC_divide(*args)

    divide = staticmethod(divide)
    def negate(*args):
        """negate(unsigned char x, unsigned char y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_negate(*args)

    negate = staticmethod(negate)
    def invert(*args):
        """invert(unsigned char x, unsigned char y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_invert(*args)

    invert = staticmethod(invert)
    def saxpy(*args):
        """
        saxpy(unsigned char a, unsigned char x, unsigned char y, 
            unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUC_saxpy(*args)

    saxpy = staticmethod(saxpy)
    def fill(*args):
        """fill(unsigned char x, unsigned int arg1, unsigned char v)"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_fill(*args)

    fill = staticmethod(fill)
    def reverse(*args):
        """reverse(unsigned char x, unsigned int arg1)"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_reverse(*args)

    reverse = staticmethod(reverse)
    def dot_product(*args):
        """dot_product(unsigned char arg0, unsigned char arg1, unsigned int arg2) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_dot_product(*args)

    dot_product = staticmethod(dot_product)
    def inner_product(*args):
        """inner_product(unsigned char arg0, unsigned char arg1, unsigned int arg2) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_inner_product(*args)

    inner_product = staticmethod(inner_product)
    def conjugate(*args):
        """conjugate(unsigned char arg0, unsigned char arg1, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_conjugate(*args)

    conjugate = staticmethod(conjugate)
    def max_value(*args):
        """max_value(unsigned char arg0, unsigned int arg1) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_max_value(*args)

    max_value = staticmethod(max_value)
    def min_value(*args):
        """min_value(unsigned char arg0, unsigned int arg1) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_min_value(*args)

    min_value = staticmethod(min_value)
    def mean(*args):
        """mean(unsigned char p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_mean(*args)

    mean = staticmethod(mean)
    def std(*args):
        """std(unsigned char p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_std(*args)

    std = staticmethod(std)
    def sum_sq_diff_means(*args):
        """sum_sq_diff_means(unsigned char v, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_sum_sq_diff_means(*args)

    sum_sq_diff_means = staticmethod(sum_sq_diff_means)
    def one_norm(*args):
        """one_norm(unsigned char p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_one_norm(*args)

    one_norm = staticmethod(one_norm)
    def two_norm(*args):
        """two_norm(unsigned char p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_two_norm(*args)

    two_norm = staticmethod(two_norm)
    def inf_norm(*args):
        """inf_norm(unsigned char p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_inf_norm(*args)

    inf_norm = staticmethod(inf_norm)
    def two_nrm2(*args):
        """two_nrm2(unsigned char p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_two_nrm2(*args)

    two_nrm2 = staticmethod(two_nrm2)
    def rms_norm(*args):
        """rms_norm(unsigned char p, unsigned int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_rms_norm(*args)

    rms_norm = staticmethod(rms_norm)
    def euclid_dist_sq(*args):
        """euclid_dist_sq(unsigned char arg0, unsigned char arg1, unsigned int arg2) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_euclid_dist_sq(*args)

    euclid_dist_sq = staticmethod(euclid_dist_sq)
    def allocate_Tptr(*args):
        """allocate_Tptr(int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_allocate_Tptr(*args)

    allocate_Tptr = staticmethod(allocate_Tptr)
    def allocate_T(*args):
        """allocate_T(int n) -> unsigned char"""
        return _vnl_c_vectorPython.vnl_c_vectorUC_allocate_T(*args)

    allocate_T = staticmethod(allocate_T)
    def deallocate(*args):
        """
        deallocate(unsigned char arg0, int n_when_allocated)
        deallocate(unsigned char arg0, int n_when_allocated)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUC_deallocate(*args)

    deallocate = staticmethod(deallocate)
vnl_c_vectorUC_swigregister = _vnl_c_vectorPython.vnl_c_vectorUC_swigregister
vnl_c_vectorUC_swigregister(vnl_c_vectorUC)

def vnl_c_vectorUC_sum(*args):
  """vnl_c_vectorUC_sum(unsigned char v, unsigned int n) -> unsigned char"""
  return _vnl_c_vectorPython.vnl_c_vectorUC_sum(*args)

def vnl_c_vectorUC_squared_magnitude(*args):
  """vnl_c_vectorUC_squared_magnitude(unsigned char p, unsigned int n) -> unsigned char"""
  return _vnl_c_vectorPython.vnl_c_vectorUC_squared_magnitude(*args)

def vnl_c_vectorUC_normalize(*args):
  """vnl_c_vectorUC_normalize(unsigned char arg0, unsigned int n)"""
  return _vnl_c_vectorPython.vnl_c_vectorUC_normalize(*args)

def vnl_c_vectorUC_copy(*args):
  """vnl_c_vectorUC_copy(unsigned char x, unsigned char y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorUC_copy(*args)

def vnl_c_vectorUC_scale(*args):
  """
    vnl_c_vectorUC_scale(unsigned char x, unsigned char y, unsigned int arg2, 
        unsigned char arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorUC_scale(*args)

def vnl_c_vectorUC_add(*args):
  """
    add(unsigned char x, unsigned char y, unsigned char z, 
        unsigned int arg3)
    vnl_c_vectorUC_add(unsigned char x, unsigned char y, unsigned char z, 
        unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorUC_add(*args)

def vnl_c_vectorUC_subtract(*args):
  """
    subtract(unsigned char x, unsigned char y, unsigned char z, 
        unsigned int arg3)
    vnl_c_vectorUC_subtract(unsigned char x, unsigned char y, unsigned char z, 
        unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorUC_subtract(*args)

def vnl_c_vectorUC_multiply(*args):
  """
    multiply(unsigned char x, unsigned char y, unsigned char z, 
        unsigned int arg3)
    vnl_c_vectorUC_multiply(unsigned char x, unsigned char y, unsigned char z, 
        unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorUC_multiply(*args)

def vnl_c_vectorUC_divide(*args):
  """
    divide(unsigned char x, unsigned char y, unsigned char z, 
        unsigned int arg3)
    vnl_c_vectorUC_divide(unsigned char x, unsigned char y, unsigned char z, 
        unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorUC_divide(*args)

def vnl_c_vectorUC_negate(*args):
  """vnl_c_vectorUC_negate(unsigned char x, unsigned char y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorUC_negate(*args)

def vnl_c_vectorUC_invert(*args):
  """vnl_c_vectorUC_invert(unsigned char x, unsigned char y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorUC_invert(*args)

def vnl_c_vectorUC_saxpy(*args):
  """
    vnl_c_vectorUC_saxpy(unsigned char a, unsigned char x, unsigned char y, 
        unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorUC_saxpy(*args)

def vnl_c_vectorUC_fill(*args):
  """vnl_c_vectorUC_fill(unsigned char x, unsigned int arg1, unsigned char v)"""
  return _vnl_c_vectorPython.vnl_c_vectorUC_fill(*args)

def vnl_c_vectorUC_reverse(*args):
  """vnl_c_vectorUC_reverse(unsigned char x, unsigned int arg1)"""
  return _vnl_c_vectorPython.vnl_c_vectorUC_reverse(*args)

def vnl_c_vectorUC_dot_product(*args):
  """vnl_c_vectorUC_dot_product(unsigned char arg0, unsigned char arg1, unsigned int arg2) -> unsigned char"""
  return _vnl_c_vectorPython.vnl_c_vectorUC_dot_product(*args)

def vnl_c_vectorUC_inner_product(*args):
  """vnl_c_vectorUC_inner_product(unsigned char arg0, unsigned char arg1, unsigned int arg2) -> unsigned char"""
  return _vnl_c_vectorPython.vnl_c_vectorUC_inner_product(*args)

def vnl_c_vectorUC_conjugate(*args):
  """vnl_c_vectorUC_conjugate(unsigned char arg0, unsigned char arg1, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorUC_conjugate(*args)

def vnl_c_vectorUC_max_value(*args):
  """vnl_c_vectorUC_max_value(unsigned char arg0, unsigned int arg1) -> unsigned char"""
  return _vnl_c_vectorPython.vnl_c_vectorUC_max_value(*args)

def vnl_c_vectorUC_min_value(*args):
  """vnl_c_vectorUC_min_value(unsigned char arg0, unsigned int arg1) -> unsigned char"""
  return _vnl_c_vectorPython.vnl_c_vectorUC_min_value(*args)

def vnl_c_vectorUC_mean(*args):
  """vnl_c_vectorUC_mean(unsigned char p, unsigned int n) -> unsigned char"""
  return _vnl_c_vectorPython.vnl_c_vectorUC_mean(*args)

def vnl_c_vectorUC_std(*args):
  """vnl_c_vectorUC_std(unsigned char p, unsigned int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vectorUC_std(*args)

def vnl_c_vectorUC_sum_sq_diff_means(*args):
  """vnl_c_vectorUC_sum_sq_diff_means(unsigned char v, unsigned int n) -> unsigned char"""
  return _vnl_c_vectorPython.vnl_c_vectorUC_sum_sq_diff_means(*args)

def vnl_c_vectorUC_one_norm(*args):
  """vnl_c_vectorUC_one_norm(unsigned char p, unsigned int n) -> unsigned char"""
  return _vnl_c_vectorPython.vnl_c_vectorUC_one_norm(*args)

def vnl_c_vectorUC_two_norm(*args):
  """vnl_c_vectorUC_two_norm(unsigned char p, unsigned int n) -> unsigned char"""
  return _vnl_c_vectorPython.vnl_c_vectorUC_two_norm(*args)

def vnl_c_vectorUC_inf_norm(*args):
  """vnl_c_vectorUC_inf_norm(unsigned char p, unsigned int n) -> unsigned char"""
  return _vnl_c_vectorPython.vnl_c_vectorUC_inf_norm(*args)

def vnl_c_vectorUC_two_nrm2(*args):
  """vnl_c_vectorUC_two_nrm2(unsigned char p, unsigned int n) -> unsigned char"""
  return _vnl_c_vectorPython.vnl_c_vectorUC_two_nrm2(*args)

def vnl_c_vectorUC_rms_norm(*args):
  """vnl_c_vectorUC_rms_norm(unsigned char p, unsigned int n) -> unsigned char"""
  return _vnl_c_vectorPython.vnl_c_vectorUC_rms_norm(*args)

def vnl_c_vectorUC_euclid_dist_sq(*args):
  """vnl_c_vectorUC_euclid_dist_sq(unsigned char arg0, unsigned char arg1, unsigned int arg2) -> unsigned char"""
  return _vnl_c_vectorPython.vnl_c_vectorUC_euclid_dist_sq(*args)

def vnl_c_vectorUC_allocate_Tptr(*args):
  """vnl_c_vectorUC_allocate_Tptr(int n) -> unsigned char"""
  return _vnl_c_vectorPython.vnl_c_vectorUC_allocate_Tptr(*args)

def vnl_c_vectorUC_allocate_T(*args):
  """vnl_c_vectorUC_allocate_T(int n) -> unsigned char"""
  return _vnl_c_vectorPython.vnl_c_vectorUC_allocate_T(*args)

def vnl_c_vectorUC_deallocate(*args):
  """
    deallocate(unsigned char arg0, int n_when_allocated)
    vnl_c_vectorUC_deallocate(unsigned char arg0, int n_when_allocated)
    """
  return _vnl_c_vectorPython.vnl_c_vectorUC_deallocate(*args)

class vnl_c_vectorUI(object):
    """Proxy of C++ vnl_c_vectorUI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorUI
    def __init__(self, *args): 
        """
        __init__(self, vnl_c_vectorUI arg0) -> vnl_c_vectorUI
        __init__(self) -> vnl_c_vectorUI
        """
        _vnl_c_vectorPython.vnl_c_vectorUI_swiginit(self,_vnl_c_vectorPython.new_vnl_c_vectorUI(*args))
    def sum(*args):
        """sum(unsigned int v, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_sum(*args)

    sum = staticmethod(sum)
    def squared_magnitude(*args):
        """squared_magnitude(unsigned int p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_squared_magnitude(*args)

    squared_magnitude = staticmethod(squared_magnitude)
    def normalize(*args):
        """normalize(unsigned int arg0, unsigned int n)"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_normalize(*args)

    normalize = staticmethod(normalize)
    def copy(*args):
        """copy(unsigned int x, unsigned int y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_copy(*args)

    copy = staticmethod(copy)
    def scale(*args):
        """
        scale(unsigned int x, unsigned int y, unsigned int arg2, 
            unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUI_scale(*args)

    scale = staticmethod(scale)
    def add(*args):
        """
        add(unsigned int x, unsigned int y, unsigned int z, unsigned int arg3)
        add(unsigned int x, unsigned int y, unsigned int z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUI_add(*args)

    add = staticmethod(add)
    def subtract(*args):
        """
        subtract(unsigned int x, unsigned int y, unsigned int z, unsigned int arg3)
        subtract(unsigned int x, unsigned int y, unsigned int z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUI_subtract(*args)

    subtract = staticmethod(subtract)
    def multiply(*args):
        """
        multiply(unsigned int x, unsigned int y, unsigned int z, unsigned int arg3)
        multiply(unsigned int x, unsigned int y, unsigned int z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUI_multiply(*args)

    multiply = staticmethod(multiply)
    def divide(*args):
        """
        divide(unsigned int x, unsigned int y, unsigned int z, unsigned int arg3)
        divide(unsigned int x, unsigned int y, unsigned int z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUI_divide(*args)

    divide = staticmethod(divide)
    def negate(*args):
        """negate(unsigned int x, unsigned int y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_negate(*args)

    negate = staticmethod(negate)
    def invert(*args):
        """invert(unsigned int x, unsigned int y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_invert(*args)

    invert = staticmethod(invert)
    def saxpy(*args):
        """saxpy(unsigned int a, unsigned int x, unsigned int y, unsigned int arg3)"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_saxpy(*args)

    saxpy = staticmethod(saxpy)
    def fill(*args):
        """fill(unsigned int x, unsigned int arg1, unsigned int v)"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_fill(*args)

    fill = staticmethod(fill)
    def reverse(*args):
        """reverse(unsigned int x, unsigned int arg1)"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_reverse(*args)

    reverse = staticmethod(reverse)
    def dot_product(*args):
        """dot_product(unsigned int arg0, unsigned int arg1, unsigned int arg2) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_dot_product(*args)

    dot_product = staticmethod(dot_product)
    def inner_product(*args):
        """inner_product(unsigned int arg0, unsigned int arg1, unsigned int arg2) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_inner_product(*args)

    inner_product = staticmethod(inner_product)
    def conjugate(*args):
        """conjugate(unsigned int arg0, unsigned int arg1, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_conjugate(*args)

    conjugate = staticmethod(conjugate)
    def max_value(*args):
        """max_value(unsigned int arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_max_value(*args)

    max_value = staticmethod(max_value)
    def min_value(*args):
        """min_value(unsigned int arg0, unsigned int arg1) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_min_value(*args)

    min_value = staticmethod(min_value)
    def mean(*args):
        """mean(unsigned int p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_mean(*args)

    mean = staticmethod(mean)
    def std(*args):
        """std(unsigned int p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_std(*args)

    std = staticmethod(std)
    def sum_sq_diff_means(*args):
        """sum_sq_diff_means(unsigned int v, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_sum_sq_diff_means(*args)

    sum_sq_diff_means = staticmethod(sum_sq_diff_means)
    def one_norm(*args):
        """one_norm(unsigned int p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_one_norm(*args)

    one_norm = staticmethod(one_norm)
    def two_norm(*args):
        """two_norm(unsigned int p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_two_norm(*args)

    two_norm = staticmethod(two_norm)
    def inf_norm(*args):
        """inf_norm(unsigned int p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_inf_norm(*args)

    inf_norm = staticmethod(inf_norm)
    def two_nrm2(*args):
        """two_nrm2(unsigned int p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_two_nrm2(*args)

    two_nrm2 = staticmethod(two_nrm2)
    def rms_norm(*args):
        """rms_norm(unsigned int p, unsigned int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_rms_norm(*args)

    rms_norm = staticmethod(rms_norm)
    def euclid_dist_sq(*args):
        """euclid_dist_sq(unsigned int arg0, unsigned int arg1, unsigned int arg2) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_euclid_dist_sq(*args)

    euclid_dist_sq = staticmethod(euclid_dist_sq)
    def allocate_Tptr(*args):
        """allocate_Tptr(int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_allocate_Tptr(*args)

    allocate_Tptr = staticmethod(allocate_Tptr)
    def allocate_T(*args):
        """allocate_T(int n) -> unsigned int"""
        return _vnl_c_vectorPython.vnl_c_vectorUI_allocate_T(*args)

    allocate_T = staticmethod(allocate_T)
    def deallocate(*args):
        """
        deallocate(unsigned int arg0, int n_when_allocated)
        deallocate(unsigned int arg0, int n_when_allocated)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUI_deallocate(*args)

    deallocate = staticmethod(deallocate)
vnl_c_vectorUI_swigregister = _vnl_c_vectorPython.vnl_c_vectorUI_swigregister
vnl_c_vectorUI_swigregister(vnl_c_vectorUI)

def vnl_c_vectorUI_sum(*args):
  """vnl_c_vectorUI_sum(unsigned int v, unsigned int n) -> unsigned int"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_sum(*args)

def vnl_c_vectorUI_squared_magnitude(*args):
  """vnl_c_vectorUI_squared_magnitude(unsigned int p, unsigned int n) -> unsigned int"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_squared_magnitude(*args)

def vnl_c_vectorUI_normalize(*args):
  """vnl_c_vectorUI_normalize(unsigned int arg0, unsigned int n)"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_normalize(*args)

def vnl_c_vectorUI_copy(*args):
  """vnl_c_vectorUI_copy(unsigned int x, unsigned int y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_copy(*args)

def vnl_c_vectorUI_scale(*args):
  """
    vnl_c_vectorUI_scale(unsigned int x, unsigned int y, unsigned int arg2, 
        unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorUI_scale(*args)

def vnl_c_vectorUI_add(*args):
  """
    add(unsigned int x, unsigned int y, unsigned int z, unsigned int arg3)
    vnl_c_vectorUI_add(unsigned int x, unsigned int y, unsigned int z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorUI_add(*args)

def vnl_c_vectorUI_subtract(*args):
  """
    subtract(unsigned int x, unsigned int y, unsigned int z, unsigned int arg3)
    vnl_c_vectorUI_subtract(unsigned int x, unsigned int y, unsigned int z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorUI_subtract(*args)

def vnl_c_vectorUI_multiply(*args):
  """
    multiply(unsigned int x, unsigned int y, unsigned int z, unsigned int arg3)
    vnl_c_vectorUI_multiply(unsigned int x, unsigned int y, unsigned int z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorUI_multiply(*args)

def vnl_c_vectorUI_divide(*args):
  """
    divide(unsigned int x, unsigned int y, unsigned int z, unsigned int arg3)
    vnl_c_vectorUI_divide(unsigned int x, unsigned int y, unsigned int z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorUI_divide(*args)

def vnl_c_vectorUI_negate(*args):
  """vnl_c_vectorUI_negate(unsigned int x, unsigned int y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_negate(*args)

def vnl_c_vectorUI_invert(*args):
  """vnl_c_vectorUI_invert(unsigned int x, unsigned int y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_invert(*args)

def vnl_c_vectorUI_saxpy(*args):
  """vnl_c_vectorUI_saxpy(unsigned int a, unsigned int x, unsigned int y, unsigned int arg3)"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_saxpy(*args)

def vnl_c_vectorUI_fill(*args):
  """vnl_c_vectorUI_fill(unsigned int x, unsigned int arg1, unsigned int v)"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_fill(*args)

def vnl_c_vectorUI_reverse(*args):
  """vnl_c_vectorUI_reverse(unsigned int x, unsigned int arg1)"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_reverse(*args)

def vnl_c_vectorUI_dot_product(*args):
  """vnl_c_vectorUI_dot_product(unsigned int arg0, unsigned int arg1, unsigned int arg2) -> unsigned int"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_dot_product(*args)

def vnl_c_vectorUI_inner_product(*args):
  """vnl_c_vectorUI_inner_product(unsigned int arg0, unsigned int arg1, unsigned int arg2) -> unsigned int"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_inner_product(*args)

def vnl_c_vectorUI_conjugate(*args):
  """vnl_c_vectorUI_conjugate(unsigned int arg0, unsigned int arg1, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_conjugate(*args)

def vnl_c_vectorUI_max_value(*args):
  """vnl_c_vectorUI_max_value(unsigned int arg0, unsigned int arg1) -> unsigned int"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_max_value(*args)

def vnl_c_vectorUI_min_value(*args):
  """vnl_c_vectorUI_min_value(unsigned int arg0, unsigned int arg1) -> unsigned int"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_min_value(*args)

def vnl_c_vectorUI_mean(*args):
  """vnl_c_vectorUI_mean(unsigned int p, unsigned int n) -> unsigned int"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_mean(*args)

def vnl_c_vectorUI_std(*args):
  """vnl_c_vectorUI_std(unsigned int p, unsigned int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_std(*args)

def vnl_c_vectorUI_sum_sq_diff_means(*args):
  """vnl_c_vectorUI_sum_sq_diff_means(unsigned int v, unsigned int n) -> unsigned int"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_sum_sq_diff_means(*args)

def vnl_c_vectorUI_one_norm(*args):
  """vnl_c_vectorUI_one_norm(unsigned int p, unsigned int n) -> unsigned int"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_one_norm(*args)

def vnl_c_vectorUI_two_norm(*args):
  """vnl_c_vectorUI_two_norm(unsigned int p, unsigned int n) -> unsigned int"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_two_norm(*args)

def vnl_c_vectorUI_inf_norm(*args):
  """vnl_c_vectorUI_inf_norm(unsigned int p, unsigned int n) -> unsigned int"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_inf_norm(*args)

def vnl_c_vectorUI_two_nrm2(*args):
  """vnl_c_vectorUI_two_nrm2(unsigned int p, unsigned int n) -> unsigned int"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_two_nrm2(*args)

def vnl_c_vectorUI_rms_norm(*args):
  """vnl_c_vectorUI_rms_norm(unsigned int p, unsigned int n) -> unsigned int"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_rms_norm(*args)

def vnl_c_vectorUI_euclid_dist_sq(*args):
  """vnl_c_vectorUI_euclid_dist_sq(unsigned int arg0, unsigned int arg1, unsigned int arg2) -> unsigned int"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_euclid_dist_sq(*args)

def vnl_c_vectorUI_allocate_Tptr(*args):
  """vnl_c_vectorUI_allocate_Tptr(int n) -> unsigned int"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_allocate_Tptr(*args)

def vnl_c_vectorUI_allocate_T(*args):
  """vnl_c_vectorUI_allocate_T(int n) -> unsigned int"""
  return _vnl_c_vectorPython.vnl_c_vectorUI_allocate_T(*args)

def vnl_c_vectorUI_deallocate(*args):
  """
    deallocate(unsigned int arg0, int n_when_allocated)
    vnl_c_vectorUI_deallocate(unsigned int arg0, int n_when_allocated)
    """
  return _vnl_c_vectorPython.vnl_c_vectorUI_deallocate(*args)

class vnl_c_vectorUL(object):
    """Proxy of C++ vnl_c_vectorUL class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vectorUL
    def __init__(self, *args): 
        """
        __init__(self, vnl_c_vectorUL arg0) -> vnl_c_vectorUL
        __init__(self) -> vnl_c_vectorUL
        """
        _vnl_c_vectorPython.vnl_c_vectorUL_swiginit(self,_vnl_c_vectorPython.new_vnl_c_vectorUL(*args))
    def sum(*args):
        """sum(unsigned long v, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_sum(*args)

    sum = staticmethod(sum)
    def squared_magnitude(*args):
        """squared_magnitude(unsigned long p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_squared_magnitude(*args)

    squared_magnitude = staticmethod(squared_magnitude)
    def normalize(*args):
        """normalize(unsigned long arg0, unsigned int n)"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_normalize(*args)

    normalize = staticmethod(normalize)
    def copy(*args):
        """copy(unsigned long x, unsigned long y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_copy(*args)

    copy = staticmethod(copy)
    def scale(*args):
        """
        scale(unsigned long x, unsigned long y, unsigned int arg2, 
            unsigned long arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUL_scale(*args)

    scale = staticmethod(scale)
    def add(*args):
        """
        add(unsigned long x, unsigned long y, unsigned long z, 
            unsigned int arg3)
        add(unsigned long x, unsigned long y, unsigned long z, 
            unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUL_add(*args)

    add = staticmethod(add)
    def subtract(*args):
        """
        subtract(unsigned long x, unsigned long y, unsigned long z, 
            unsigned int arg3)
        subtract(unsigned long x, unsigned long y, unsigned long z, 
            unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUL_subtract(*args)

    subtract = staticmethod(subtract)
    def multiply(*args):
        """
        multiply(unsigned long x, unsigned long y, unsigned long z, 
            unsigned int arg3)
        multiply(unsigned long x, unsigned long y, unsigned long z, 
            unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUL_multiply(*args)

    multiply = staticmethod(multiply)
    def divide(*args):
        """
        divide(unsigned long x, unsigned long y, unsigned long z, 
            unsigned int arg3)
        divide(unsigned long x, unsigned long y, unsigned long z, 
            unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUL_divide(*args)

    divide = staticmethod(divide)
    def negate(*args):
        """negate(unsigned long x, unsigned long y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_negate(*args)

    negate = staticmethod(negate)
    def invert(*args):
        """invert(unsigned long x, unsigned long y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_invert(*args)

    invert = staticmethod(invert)
    def saxpy(*args):
        """
        saxpy(unsigned long a, unsigned long x, unsigned long y, 
            unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUL_saxpy(*args)

    saxpy = staticmethod(saxpy)
    def fill(*args):
        """fill(unsigned long x, unsigned int arg1, unsigned long v)"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_fill(*args)

    fill = staticmethod(fill)
    def reverse(*args):
        """reverse(unsigned long x, unsigned int arg1)"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_reverse(*args)

    reverse = staticmethod(reverse)
    def dot_product(*args):
        """dot_product(unsigned long arg0, unsigned long arg1, unsigned int arg2) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_dot_product(*args)

    dot_product = staticmethod(dot_product)
    def inner_product(*args):
        """inner_product(unsigned long arg0, unsigned long arg1, unsigned int arg2) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_inner_product(*args)

    inner_product = staticmethod(inner_product)
    def conjugate(*args):
        """conjugate(unsigned long arg0, unsigned long arg1, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_conjugate(*args)

    conjugate = staticmethod(conjugate)
    def max_value(*args):
        """max_value(unsigned long arg0, unsigned int arg1) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_max_value(*args)

    max_value = staticmethod(max_value)
    def min_value(*args):
        """min_value(unsigned long arg0, unsigned int arg1) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_min_value(*args)

    min_value = staticmethod(min_value)
    def mean(*args):
        """mean(unsigned long p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_mean(*args)

    mean = staticmethod(mean)
    def std(*args):
        """std(unsigned long p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_std(*args)

    std = staticmethod(std)
    def sum_sq_diff_means(*args):
        """sum_sq_diff_means(unsigned long v, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_sum_sq_diff_means(*args)

    sum_sq_diff_means = staticmethod(sum_sq_diff_means)
    def one_norm(*args):
        """one_norm(unsigned long p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_one_norm(*args)

    one_norm = staticmethod(one_norm)
    def two_norm(*args):
        """two_norm(unsigned long p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_two_norm(*args)

    two_norm = staticmethod(two_norm)
    def inf_norm(*args):
        """inf_norm(unsigned long p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_inf_norm(*args)

    inf_norm = staticmethod(inf_norm)
    def two_nrm2(*args):
        """two_nrm2(unsigned long p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_two_nrm2(*args)

    two_nrm2 = staticmethod(two_nrm2)
    def rms_norm(*args):
        """rms_norm(unsigned long p, unsigned int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_rms_norm(*args)

    rms_norm = staticmethod(rms_norm)
    def euclid_dist_sq(*args):
        """euclid_dist_sq(unsigned long arg0, unsigned long arg1, unsigned int arg2) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_euclid_dist_sq(*args)

    euclid_dist_sq = staticmethod(euclid_dist_sq)
    def allocate_Tptr(*args):
        """allocate_Tptr(int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_allocate_Tptr(*args)

    allocate_Tptr = staticmethod(allocate_Tptr)
    def allocate_T(*args):
        """allocate_T(int n) -> unsigned long"""
        return _vnl_c_vectorPython.vnl_c_vectorUL_allocate_T(*args)

    allocate_T = staticmethod(allocate_T)
    def deallocate(*args):
        """
        deallocate(unsigned long arg0, int n_when_allocated)
        deallocate(unsigned long arg0, int n_when_allocated)
        """
        return _vnl_c_vectorPython.vnl_c_vectorUL_deallocate(*args)

    deallocate = staticmethod(deallocate)
vnl_c_vectorUL_swigregister = _vnl_c_vectorPython.vnl_c_vectorUL_swigregister
vnl_c_vectorUL_swigregister(vnl_c_vectorUL)

def vnl_c_vectorUL_sum(*args):
  """vnl_c_vectorUL_sum(unsigned long v, unsigned int n) -> unsigned long"""
  return _vnl_c_vectorPython.vnl_c_vectorUL_sum(*args)

def vnl_c_vectorUL_squared_magnitude(*args):
  """vnl_c_vectorUL_squared_magnitude(unsigned long p, unsigned int n) -> unsigned long"""
  return _vnl_c_vectorPython.vnl_c_vectorUL_squared_magnitude(*args)

def vnl_c_vectorUL_normalize(*args):
  """vnl_c_vectorUL_normalize(unsigned long arg0, unsigned int n)"""
  return _vnl_c_vectorPython.vnl_c_vectorUL_normalize(*args)

def vnl_c_vectorUL_copy(*args):
  """vnl_c_vectorUL_copy(unsigned long x, unsigned long y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorUL_copy(*args)

def vnl_c_vectorUL_scale(*args):
  """
    vnl_c_vectorUL_scale(unsigned long x, unsigned long y, unsigned int arg2, 
        unsigned long arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorUL_scale(*args)

def vnl_c_vectorUL_add(*args):
  """
    add(unsigned long x, unsigned long y, unsigned long z, 
        unsigned int arg3)
    vnl_c_vectorUL_add(unsigned long x, unsigned long y, unsigned long z, 
        unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorUL_add(*args)

def vnl_c_vectorUL_subtract(*args):
  """
    subtract(unsigned long x, unsigned long y, unsigned long z, 
        unsigned int arg3)
    vnl_c_vectorUL_subtract(unsigned long x, unsigned long y, unsigned long z, 
        unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorUL_subtract(*args)

def vnl_c_vectorUL_multiply(*args):
  """
    multiply(unsigned long x, unsigned long y, unsigned long z, 
        unsigned int arg3)
    vnl_c_vectorUL_multiply(unsigned long x, unsigned long y, unsigned long z, 
        unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorUL_multiply(*args)

def vnl_c_vectorUL_divide(*args):
  """
    divide(unsigned long x, unsigned long y, unsigned long z, 
        unsigned int arg3)
    vnl_c_vectorUL_divide(unsigned long x, unsigned long y, unsigned long z, 
        unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorUL_divide(*args)

def vnl_c_vectorUL_negate(*args):
  """vnl_c_vectorUL_negate(unsigned long x, unsigned long y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorUL_negate(*args)

def vnl_c_vectorUL_invert(*args):
  """vnl_c_vectorUL_invert(unsigned long x, unsigned long y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorUL_invert(*args)

def vnl_c_vectorUL_saxpy(*args):
  """
    vnl_c_vectorUL_saxpy(unsigned long a, unsigned long x, unsigned long y, 
        unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vectorUL_saxpy(*args)

def vnl_c_vectorUL_fill(*args):
  """vnl_c_vectorUL_fill(unsigned long x, unsigned int arg1, unsigned long v)"""
  return _vnl_c_vectorPython.vnl_c_vectorUL_fill(*args)

def vnl_c_vectorUL_reverse(*args):
  """vnl_c_vectorUL_reverse(unsigned long x, unsigned int arg1)"""
  return _vnl_c_vectorPython.vnl_c_vectorUL_reverse(*args)

def vnl_c_vectorUL_dot_product(*args):
  """vnl_c_vectorUL_dot_product(unsigned long arg0, unsigned long arg1, unsigned int arg2) -> unsigned long"""
  return _vnl_c_vectorPython.vnl_c_vectorUL_dot_product(*args)

def vnl_c_vectorUL_inner_product(*args):
  """vnl_c_vectorUL_inner_product(unsigned long arg0, unsigned long arg1, unsigned int arg2) -> unsigned long"""
  return _vnl_c_vectorPython.vnl_c_vectorUL_inner_product(*args)

def vnl_c_vectorUL_conjugate(*args):
  """vnl_c_vectorUL_conjugate(unsigned long arg0, unsigned long arg1, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vectorUL_conjugate(*args)

def vnl_c_vectorUL_max_value(*args):
  """vnl_c_vectorUL_max_value(unsigned long arg0, unsigned int arg1) -> unsigned long"""
  return _vnl_c_vectorPython.vnl_c_vectorUL_max_value(*args)

def vnl_c_vectorUL_min_value(*args):
  """vnl_c_vectorUL_min_value(unsigned long arg0, unsigned int arg1) -> unsigned long"""
  return _vnl_c_vectorPython.vnl_c_vectorUL_min_value(*args)

def vnl_c_vectorUL_mean(*args):
  """vnl_c_vectorUL_mean(unsigned long p, unsigned int n) -> unsigned long"""
  return _vnl_c_vectorPython.vnl_c_vectorUL_mean(*args)

def vnl_c_vectorUL_std(*args):
  """vnl_c_vectorUL_std(unsigned long p, unsigned int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vectorUL_std(*args)

def vnl_c_vectorUL_sum_sq_diff_means(*args):
  """vnl_c_vectorUL_sum_sq_diff_means(unsigned long v, unsigned int n) -> unsigned long"""
  return _vnl_c_vectorPython.vnl_c_vectorUL_sum_sq_diff_means(*args)

def vnl_c_vectorUL_one_norm(*args):
  """vnl_c_vectorUL_one_norm(unsigned long p, unsigned int n) -> unsigned long"""
  return _vnl_c_vectorPython.vnl_c_vectorUL_one_norm(*args)

def vnl_c_vectorUL_two_norm(*args):
  """vnl_c_vectorUL_two_norm(unsigned long p, unsigned int n) -> unsigned long"""
  return _vnl_c_vectorPython.vnl_c_vectorUL_two_norm(*args)

def vnl_c_vectorUL_inf_norm(*args):
  """vnl_c_vectorUL_inf_norm(unsigned long p, unsigned int n) -> unsigned long"""
  return _vnl_c_vectorPython.vnl_c_vectorUL_inf_norm(*args)

def vnl_c_vectorUL_two_nrm2(*args):
  """vnl_c_vectorUL_two_nrm2(unsigned long p, unsigned int n) -> unsigned long"""
  return _vnl_c_vectorPython.vnl_c_vectorUL_two_nrm2(*args)

def vnl_c_vectorUL_rms_norm(*args):
  """vnl_c_vectorUL_rms_norm(unsigned long p, unsigned int n) -> unsigned long"""
  return _vnl_c_vectorPython.vnl_c_vectorUL_rms_norm(*args)

def vnl_c_vectorUL_euclid_dist_sq(*args):
  """vnl_c_vectorUL_euclid_dist_sq(unsigned long arg0, unsigned long arg1, unsigned int arg2) -> unsigned long"""
  return _vnl_c_vectorPython.vnl_c_vectorUL_euclid_dist_sq(*args)

def vnl_c_vectorUL_allocate_Tptr(*args):
  """vnl_c_vectorUL_allocate_Tptr(int n) -> unsigned long"""
  return _vnl_c_vectorPython.vnl_c_vectorUL_allocate_Tptr(*args)

def vnl_c_vectorUL_allocate_T(*args):
  """vnl_c_vectorUL_allocate_T(int n) -> unsigned long"""
  return _vnl_c_vectorPython.vnl_c_vectorUL_allocate_T(*args)

def vnl_c_vectorUL_deallocate(*args):
  """
    deallocate(unsigned long arg0, int n_when_allocated)
    vnl_c_vectorUL_deallocate(unsigned long arg0, int n_when_allocated)
    """
  return _vnl_c_vectorPython.vnl_c_vectorUL_deallocate(*args)

class vnl_c_vector_vcl_complexD(object):
    """Proxy of C++ vnl_c_vector_vcl_complexD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vector_vcl_complexD
    def __init__(self, *args): 
        """
        __init__(self, vnl_c_vector_vcl_complexD arg0) -> vnl_c_vector_vcl_complexD
        __init__(self) -> vnl_c_vector_vcl_complexD
        """
        _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_swiginit(self,_vnl_c_vectorPython.new_vnl_c_vector_vcl_complexD(*args))
    def sum(*args):
        """sum(vcl_complexD v, unsigned int n) -> vcl_complexD"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_sum(*args)

    sum = staticmethod(sum)
    def squared_magnitude(*args):
        """squared_magnitude(vcl_complexD p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_squared_magnitude(*args)

    squared_magnitude = staticmethod(squared_magnitude)
    def normalize(*args):
        """normalize(vcl_complexD arg0, unsigned int n)"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_normalize(*args)

    normalize = staticmethod(normalize)
    def copy(*args):
        """copy(vcl_complexD x, vcl_complexD y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_copy(*args)

    copy = staticmethod(copy)
    def scale(*args):
        """
        scale(vcl_complexD x, vcl_complexD y, unsigned int arg2, 
            vcl_complexD arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_scale(*args)

    scale = staticmethod(scale)
    def add(*args):
        """
        add(vcl_complexD x, vcl_complexD y, vcl_complexD z, unsigned int arg3)
        add(vcl_complexD x, vcl_complexD y, vcl_complexD z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_add(*args)

    add = staticmethod(add)
    def subtract(*args):
        """
        subtract(vcl_complexD x, vcl_complexD y, vcl_complexD z, unsigned int arg3)
        subtract(vcl_complexD x, vcl_complexD y, vcl_complexD z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_subtract(*args)

    subtract = staticmethod(subtract)
    def multiply(*args):
        """
        multiply(vcl_complexD x, vcl_complexD y, vcl_complexD z, unsigned int arg3)
        multiply(vcl_complexD x, vcl_complexD y, vcl_complexD z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_multiply(*args)

    multiply = staticmethod(multiply)
    def divide(*args):
        """
        divide(vcl_complexD x, vcl_complexD y, vcl_complexD z, unsigned int arg3)
        divide(vcl_complexD x, vcl_complexD y, vcl_complexD z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_divide(*args)

    divide = staticmethod(divide)
    def negate(*args):
        """negate(vcl_complexD x, vcl_complexD y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_negate(*args)

    negate = staticmethod(negate)
    def invert(*args):
        """invert(vcl_complexD x, vcl_complexD y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_invert(*args)

    invert = staticmethod(invert)
    def saxpy(*args):
        """saxpy(vcl_complexD a, vcl_complexD x, vcl_complexD y, unsigned int arg3)"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_saxpy(*args)

    saxpy = staticmethod(saxpy)
    def fill(*args):
        """fill(vcl_complexD x, unsigned int arg1, vcl_complexD v)"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_fill(*args)

    fill = staticmethod(fill)
    def reverse(*args):
        """reverse(vcl_complexD x, unsigned int arg1)"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_reverse(*args)

    reverse = staticmethod(reverse)
    def dot_product(*args):
        """dot_product(vcl_complexD arg0, vcl_complexD arg1, unsigned int arg2) -> vcl_complexD"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_dot_product(*args)

    dot_product = staticmethod(dot_product)
    def inner_product(*args):
        """inner_product(vcl_complexD arg0, vcl_complexD arg1, unsigned int arg2) -> vcl_complexD"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_inner_product(*args)

    inner_product = staticmethod(inner_product)
    def conjugate(*args):
        """conjugate(vcl_complexD arg0, vcl_complexD arg1, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_conjugate(*args)

    conjugate = staticmethod(conjugate)
    def max_value(*args):
        """max_value(vcl_complexD arg0, unsigned int arg1) -> vcl_complexD"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_max_value(*args)

    max_value = staticmethod(max_value)
    def min_value(*args):
        """min_value(vcl_complexD arg0, unsigned int arg1) -> vcl_complexD"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_min_value(*args)

    min_value = staticmethod(min_value)
    def mean(*args):
        """mean(vcl_complexD p, unsigned int n) -> vcl_complexD"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_mean(*args)

    mean = staticmethod(mean)
    def std(*args):
        """std(vcl_complexD p, unsigned int n) -> vcl_complexD"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_std(*args)

    std = staticmethod(std)
    def sum_sq_diff_means(*args):
        """sum_sq_diff_means(vcl_complexD v, unsigned int n) -> vcl_complexD"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_sum_sq_diff_means(*args)

    sum_sq_diff_means = staticmethod(sum_sq_diff_means)
    def one_norm(*args):
        """one_norm(vcl_complexD p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_one_norm(*args)

    one_norm = staticmethod(one_norm)
    def two_norm(*args):
        """two_norm(vcl_complexD p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_two_norm(*args)

    two_norm = staticmethod(two_norm)
    def inf_norm(*args):
        """inf_norm(vcl_complexD p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_inf_norm(*args)

    inf_norm = staticmethod(inf_norm)
    def two_nrm2(*args):
        """two_nrm2(vcl_complexD p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_two_nrm2(*args)

    two_nrm2 = staticmethod(two_nrm2)
    def rms_norm(*args):
        """rms_norm(vcl_complexD p, unsigned int n) -> double"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_rms_norm(*args)

    rms_norm = staticmethod(rms_norm)
    def euclid_dist_sq(*args):
        """euclid_dist_sq(vcl_complexD arg0, vcl_complexD arg1, unsigned int arg2) -> vcl_complexD"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_euclid_dist_sq(*args)

    euclid_dist_sq = staticmethod(euclid_dist_sq)
    def allocate_Tptr(*args):
        """allocate_Tptr(int n) -> vcl_complexD"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_allocate_Tptr(*args)

    allocate_Tptr = staticmethod(allocate_Tptr)
    def allocate_T(*args):
        """allocate_T(int n) -> vcl_complexD"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_allocate_T(*args)

    allocate_T = staticmethod(allocate_T)
    def deallocate(*args):
        """
        deallocate(vcl_complexD arg0, int n_when_allocated)
        deallocate(vcl_complexD arg0, int n_when_allocated)
        """
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_deallocate(*args)

    deallocate = staticmethod(deallocate)
vnl_c_vector_vcl_complexD_swigregister = _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_swigregister
vnl_c_vector_vcl_complexD_swigregister(vnl_c_vector_vcl_complexD)

def vnl_c_vector_vcl_complexD_sum(*args):
  """vnl_c_vector_vcl_complexD_sum(vcl_complexD v, unsigned int n) -> vcl_complexD"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_sum(*args)

def vnl_c_vector_vcl_complexD_squared_magnitude(*args):
  """vnl_c_vector_vcl_complexD_squared_magnitude(vcl_complexD p, unsigned int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_squared_magnitude(*args)

def vnl_c_vector_vcl_complexD_normalize(*args):
  """vnl_c_vector_vcl_complexD_normalize(vcl_complexD arg0, unsigned int n)"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_normalize(*args)

def vnl_c_vector_vcl_complexD_copy(*args):
  """vnl_c_vector_vcl_complexD_copy(vcl_complexD x, vcl_complexD y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_copy(*args)

def vnl_c_vector_vcl_complexD_scale(*args):
  """
    vnl_c_vector_vcl_complexD_scale(vcl_complexD x, vcl_complexD y, unsigned int arg2, 
        vcl_complexD arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_scale(*args)

def vnl_c_vector_vcl_complexD_add(*args):
  """
    add(vcl_complexD x, vcl_complexD y, vcl_complexD z, unsigned int arg3)
    vnl_c_vector_vcl_complexD_add(vcl_complexD x, vcl_complexD y, vcl_complexD z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_add(*args)

def vnl_c_vector_vcl_complexD_subtract(*args):
  """
    subtract(vcl_complexD x, vcl_complexD y, vcl_complexD z, unsigned int arg3)
    vnl_c_vector_vcl_complexD_subtract(vcl_complexD x, vcl_complexD y, vcl_complexD z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_subtract(*args)

def vnl_c_vector_vcl_complexD_multiply(*args):
  """
    multiply(vcl_complexD x, vcl_complexD y, vcl_complexD z, unsigned int arg3)
    vnl_c_vector_vcl_complexD_multiply(vcl_complexD x, vcl_complexD y, vcl_complexD z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_multiply(*args)

def vnl_c_vector_vcl_complexD_divide(*args):
  """
    divide(vcl_complexD x, vcl_complexD y, vcl_complexD z, unsigned int arg3)
    vnl_c_vector_vcl_complexD_divide(vcl_complexD x, vcl_complexD y, vcl_complexD z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_divide(*args)

def vnl_c_vector_vcl_complexD_negate(*args):
  """vnl_c_vector_vcl_complexD_negate(vcl_complexD x, vcl_complexD y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_negate(*args)

def vnl_c_vector_vcl_complexD_invert(*args):
  """vnl_c_vector_vcl_complexD_invert(vcl_complexD x, vcl_complexD y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_invert(*args)

def vnl_c_vector_vcl_complexD_saxpy(*args):
  """vnl_c_vector_vcl_complexD_saxpy(vcl_complexD a, vcl_complexD x, vcl_complexD y, unsigned int arg3)"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_saxpy(*args)

def vnl_c_vector_vcl_complexD_fill(*args):
  """vnl_c_vector_vcl_complexD_fill(vcl_complexD x, unsigned int arg1, vcl_complexD v)"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_fill(*args)

def vnl_c_vector_vcl_complexD_reverse(*args):
  """vnl_c_vector_vcl_complexD_reverse(vcl_complexD x, unsigned int arg1)"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_reverse(*args)

def vnl_c_vector_vcl_complexD_dot_product(*args):
  """vnl_c_vector_vcl_complexD_dot_product(vcl_complexD arg0, vcl_complexD arg1, unsigned int arg2) -> vcl_complexD"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_dot_product(*args)

def vnl_c_vector_vcl_complexD_inner_product(*args):
  """vnl_c_vector_vcl_complexD_inner_product(vcl_complexD arg0, vcl_complexD arg1, unsigned int arg2) -> vcl_complexD"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_inner_product(*args)

def vnl_c_vector_vcl_complexD_conjugate(*args):
  """vnl_c_vector_vcl_complexD_conjugate(vcl_complexD arg0, vcl_complexD arg1, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_conjugate(*args)

def vnl_c_vector_vcl_complexD_max_value(*args):
  """vnl_c_vector_vcl_complexD_max_value(vcl_complexD arg0, unsigned int arg1) -> vcl_complexD"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_max_value(*args)

def vnl_c_vector_vcl_complexD_min_value(*args):
  """vnl_c_vector_vcl_complexD_min_value(vcl_complexD arg0, unsigned int arg1) -> vcl_complexD"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_min_value(*args)

def vnl_c_vector_vcl_complexD_mean(*args):
  """vnl_c_vector_vcl_complexD_mean(vcl_complexD p, unsigned int n) -> vcl_complexD"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_mean(*args)

def vnl_c_vector_vcl_complexD_std(*args):
  """vnl_c_vector_vcl_complexD_std(vcl_complexD p, unsigned int n) -> vcl_complexD"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_std(*args)

def vnl_c_vector_vcl_complexD_sum_sq_diff_means(*args):
  """vnl_c_vector_vcl_complexD_sum_sq_diff_means(vcl_complexD v, unsigned int n) -> vcl_complexD"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_sum_sq_diff_means(*args)

def vnl_c_vector_vcl_complexD_one_norm(*args):
  """vnl_c_vector_vcl_complexD_one_norm(vcl_complexD p, unsigned int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_one_norm(*args)

def vnl_c_vector_vcl_complexD_two_norm(*args):
  """vnl_c_vector_vcl_complexD_two_norm(vcl_complexD p, unsigned int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_two_norm(*args)

def vnl_c_vector_vcl_complexD_inf_norm(*args):
  """vnl_c_vector_vcl_complexD_inf_norm(vcl_complexD p, unsigned int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_inf_norm(*args)

def vnl_c_vector_vcl_complexD_two_nrm2(*args):
  """vnl_c_vector_vcl_complexD_two_nrm2(vcl_complexD p, unsigned int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_two_nrm2(*args)

def vnl_c_vector_vcl_complexD_rms_norm(*args):
  """vnl_c_vector_vcl_complexD_rms_norm(vcl_complexD p, unsigned int n) -> double"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_rms_norm(*args)

def vnl_c_vector_vcl_complexD_euclid_dist_sq(*args):
  """vnl_c_vector_vcl_complexD_euclid_dist_sq(vcl_complexD arg0, vcl_complexD arg1, unsigned int arg2) -> vcl_complexD"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_euclid_dist_sq(*args)

def vnl_c_vector_vcl_complexD_allocate_Tptr(*args):
  """vnl_c_vector_vcl_complexD_allocate_Tptr(int n) -> vcl_complexD"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_allocate_Tptr(*args)

def vnl_c_vector_vcl_complexD_allocate_T(*args):
  """vnl_c_vector_vcl_complexD_allocate_T(int n) -> vcl_complexD"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_allocate_T(*args)

def vnl_c_vector_vcl_complexD_deallocate(*args):
  """
    deallocate(vcl_complexD arg0, int n_when_allocated)
    vnl_c_vector_vcl_complexD_deallocate(vcl_complexD arg0, int n_when_allocated)
    """
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexD_deallocate(*args)

class vnl_c_vector_vcl_complexF(object):
    """Proxy of C++ vnl_c_vector_vcl_complexF class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vector_vcl_complexF
    def __init__(self, *args): 
        """
        __init__(self, vnl_c_vector_vcl_complexF arg0) -> vnl_c_vector_vcl_complexF
        __init__(self) -> vnl_c_vector_vcl_complexF
        """
        _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_swiginit(self,_vnl_c_vectorPython.new_vnl_c_vector_vcl_complexF(*args))
    def sum(*args):
        """sum(vcl_complexF v, unsigned int n) -> vcl_complexF"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_sum(*args)

    sum = staticmethod(sum)
    def squared_magnitude(*args):
        """squared_magnitude(vcl_complexF p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_squared_magnitude(*args)

    squared_magnitude = staticmethod(squared_magnitude)
    def normalize(*args):
        """normalize(vcl_complexF arg0, unsigned int n)"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_normalize(*args)

    normalize = staticmethod(normalize)
    def copy(*args):
        """copy(vcl_complexF x, vcl_complexF y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_copy(*args)

    copy = staticmethod(copy)
    def scale(*args):
        """
        scale(vcl_complexF x, vcl_complexF y, unsigned int arg2, 
            vcl_complexF arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_scale(*args)

    scale = staticmethod(scale)
    def add(*args):
        """
        add(vcl_complexF x, vcl_complexF y, vcl_complexF z, unsigned int arg3)
        add(vcl_complexF x, vcl_complexF y, vcl_complexF z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_add(*args)

    add = staticmethod(add)
    def subtract(*args):
        """
        subtract(vcl_complexF x, vcl_complexF y, vcl_complexF z, unsigned int arg3)
        subtract(vcl_complexF x, vcl_complexF y, vcl_complexF z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_subtract(*args)

    subtract = staticmethod(subtract)
    def multiply(*args):
        """
        multiply(vcl_complexF x, vcl_complexF y, vcl_complexF z, unsigned int arg3)
        multiply(vcl_complexF x, vcl_complexF y, vcl_complexF z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_multiply(*args)

    multiply = staticmethod(multiply)
    def divide(*args):
        """
        divide(vcl_complexF x, vcl_complexF y, vcl_complexF z, unsigned int arg3)
        divide(vcl_complexF x, vcl_complexF y, vcl_complexF z, unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_divide(*args)

    divide = staticmethod(divide)
    def negate(*args):
        """negate(vcl_complexF x, vcl_complexF y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_negate(*args)

    negate = staticmethod(negate)
    def invert(*args):
        """invert(vcl_complexF x, vcl_complexF y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_invert(*args)

    invert = staticmethod(invert)
    def saxpy(*args):
        """saxpy(vcl_complexF a, vcl_complexF x, vcl_complexF y, unsigned int arg3)"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_saxpy(*args)

    saxpy = staticmethod(saxpy)
    def fill(*args):
        """fill(vcl_complexF x, unsigned int arg1, vcl_complexF v)"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_fill(*args)

    fill = staticmethod(fill)
    def reverse(*args):
        """reverse(vcl_complexF x, unsigned int arg1)"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_reverse(*args)

    reverse = staticmethod(reverse)
    def dot_product(*args):
        """dot_product(vcl_complexF arg0, vcl_complexF arg1, unsigned int arg2) -> vcl_complexF"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_dot_product(*args)

    dot_product = staticmethod(dot_product)
    def inner_product(*args):
        """inner_product(vcl_complexF arg0, vcl_complexF arg1, unsigned int arg2) -> vcl_complexF"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_inner_product(*args)

    inner_product = staticmethod(inner_product)
    def conjugate(*args):
        """conjugate(vcl_complexF arg0, vcl_complexF arg1, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_conjugate(*args)

    conjugate = staticmethod(conjugate)
    def max_value(*args):
        """max_value(vcl_complexF arg0, unsigned int arg1) -> vcl_complexF"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_max_value(*args)

    max_value = staticmethod(max_value)
    def min_value(*args):
        """min_value(vcl_complexF arg0, unsigned int arg1) -> vcl_complexF"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_min_value(*args)

    min_value = staticmethod(min_value)
    def mean(*args):
        """mean(vcl_complexF p, unsigned int n) -> vcl_complexF"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_mean(*args)

    mean = staticmethod(mean)
    def std(*args):
        """std(vcl_complexF p, unsigned int n) -> vcl_complexF"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_std(*args)

    std = staticmethod(std)
    def sum_sq_diff_means(*args):
        """sum_sq_diff_means(vcl_complexF v, unsigned int n) -> vcl_complexF"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_sum_sq_diff_means(*args)

    sum_sq_diff_means = staticmethod(sum_sq_diff_means)
    def one_norm(*args):
        """one_norm(vcl_complexF p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_one_norm(*args)

    one_norm = staticmethod(one_norm)
    def two_norm(*args):
        """two_norm(vcl_complexF p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_two_norm(*args)

    two_norm = staticmethod(two_norm)
    def inf_norm(*args):
        """inf_norm(vcl_complexF p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_inf_norm(*args)

    inf_norm = staticmethod(inf_norm)
    def two_nrm2(*args):
        """two_nrm2(vcl_complexF p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_two_nrm2(*args)

    two_nrm2 = staticmethod(two_nrm2)
    def rms_norm(*args):
        """rms_norm(vcl_complexF p, unsigned int n) -> float"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_rms_norm(*args)

    rms_norm = staticmethod(rms_norm)
    def euclid_dist_sq(*args):
        """euclid_dist_sq(vcl_complexF arg0, vcl_complexF arg1, unsigned int arg2) -> vcl_complexF"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_euclid_dist_sq(*args)

    euclid_dist_sq = staticmethod(euclid_dist_sq)
    def allocate_Tptr(*args):
        """allocate_Tptr(int n) -> vcl_complexF"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_allocate_Tptr(*args)

    allocate_Tptr = staticmethod(allocate_Tptr)
    def allocate_T(*args):
        """allocate_T(int n) -> vcl_complexF"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_allocate_T(*args)

    allocate_T = staticmethod(allocate_T)
    def deallocate(*args):
        """
        deallocate(vcl_complexF arg0, int n_when_allocated)
        deallocate(vcl_complexF arg0, int n_when_allocated)
        """
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_deallocate(*args)

    deallocate = staticmethod(deallocate)
vnl_c_vector_vcl_complexF_swigregister = _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_swigregister
vnl_c_vector_vcl_complexF_swigregister(vnl_c_vector_vcl_complexF)

def vnl_c_vector_vcl_complexF_sum(*args):
  """vnl_c_vector_vcl_complexF_sum(vcl_complexF v, unsigned int n) -> vcl_complexF"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_sum(*args)

def vnl_c_vector_vcl_complexF_squared_magnitude(*args):
  """vnl_c_vector_vcl_complexF_squared_magnitude(vcl_complexF p, unsigned int n) -> float"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_squared_magnitude(*args)

def vnl_c_vector_vcl_complexF_normalize(*args):
  """vnl_c_vector_vcl_complexF_normalize(vcl_complexF arg0, unsigned int n)"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_normalize(*args)

def vnl_c_vector_vcl_complexF_copy(*args):
  """vnl_c_vector_vcl_complexF_copy(vcl_complexF x, vcl_complexF y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_copy(*args)

def vnl_c_vector_vcl_complexF_scale(*args):
  """
    vnl_c_vector_vcl_complexF_scale(vcl_complexF x, vcl_complexF y, unsigned int arg2, 
        vcl_complexF arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_scale(*args)

def vnl_c_vector_vcl_complexF_add(*args):
  """
    add(vcl_complexF x, vcl_complexF y, vcl_complexF z, unsigned int arg3)
    vnl_c_vector_vcl_complexF_add(vcl_complexF x, vcl_complexF y, vcl_complexF z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_add(*args)

def vnl_c_vector_vcl_complexF_subtract(*args):
  """
    subtract(vcl_complexF x, vcl_complexF y, vcl_complexF z, unsigned int arg3)
    vnl_c_vector_vcl_complexF_subtract(vcl_complexF x, vcl_complexF y, vcl_complexF z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_subtract(*args)

def vnl_c_vector_vcl_complexF_multiply(*args):
  """
    multiply(vcl_complexF x, vcl_complexF y, vcl_complexF z, unsigned int arg3)
    vnl_c_vector_vcl_complexF_multiply(vcl_complexF x, vcl_complexF y, vcl_complexF z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_multiply(*args)

def vnl_c_vector_vcl_complexF_divide(*args):
  """
    divide(vcl_complexF x, vcl_complexF y, vcl_complexF z, unsigned int arg3)
    vnl_c_vector_vcl_complexF_divide(vcl_complexF x, vcl_complexF y, vcl_complexF z, unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_divide(*args)

def vnl_c_vector_vcl_complexF_negate(*args):
  """vnl_c_vector_vcl_complexF_negate(vcl_complexF x, vcl_complexF y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_negate(*args)

def vnl_c_vector_vcl_complexF_invert(*args):
  """vnl_c_vector_vcl_complexF_invert(vcl_complexF x, vcl_complexF y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_invert(*args)

def vnl_c_vector_vcl_complexF_saxpy(*args):
  """vnl_c_vector_vcl_complexF_saxpy(vcl_complexF a, vcl_complexF x, vcl_complexF y, unsigned int arg3)"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_saxpy(*args)

def vnl_c_vector_vcl_complexF_fill(*args):
  """vnl_c_vector_vcl_complexF_fill(vcl_complexF x, unsigned int arg1, vcl_complexF v)"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_fill(*args)

def vnl_c_vector_vcl_complexF_reverse(*args):
  """vnl_c_vector_vcl_complexF_reverse(vcl_complexF x, unsigned int arg1)"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_reverse(*args)

def vnl_c_vector_vcl_complexF_dot_product(*args):
  """vnl_c_vector_vcl_complexF_dot_product(vcl_complexF arg0, vcl_complexF arg1, unsigned int arg2) -> vcl_complexF"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_dot_product(*args)

def vnl_c_vector_vcl_complexF_inner_product(*args):
  """vnl_c_vector_vcl_complexF_inner_product(vcl_complexF arg0, vcl_complexF arg1, unsigned int arg2) -> vcl_complexF"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_inner_product(*args)

def vnl_c_vector_vcl_complexF_conjugate(*args):
  """vnl_c_vector_vcl_complexF_conjugate(vcl_complexF arg0, vcl_complexF arg1, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_conjugate(*args)

def vnl_c_vector_vcl_complexF_max_value(*args):
  """vnl_c_vector_vcl_complexF_max_value(vcl_complexF arg0, unsigned int arg1) -> vcl_complexF"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_max_value(*args)

def vnl_c_vector_vcl_complexF_min_value(*args):
  """vnl_c_vector_vcl_complexF_min_value(vcl_complexF arg0, unsigned int arg1) -> vcl_complexF"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_min_value(*args)

def vnl_c_vector_vcl_complexF_mean(*args):
  """vnl_c_vector_vcl_complexF_mean(vcl_complexF p, unsigned int n) -> vcl_complexF"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_mean(*args)

def vnl_c_vector_vcl_complexF_std(*args):
  """vnl_c_vector_vcl_complexF_std(vcl_complexF p, unsigned int n) -> vcl_complexF"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_std(*args)

def vnl_c_vector_vcl_complexF_sum_sq_diff_means(*args):
  """vnl_c_vector_vcl_complexF_sum_sq_diff_means(vcl_complexF v, unsigned int n) -> vcl_complexF"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_sum_sq_diff_means(*args)

def vnl_c_vector_vcl_complexF_one_norm(*args):
  """vnl_c_vector_vcl_complexF_one_norm(vcl_complexF p, unsigned int n) -> float"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_one_norm(*args)

def vnl_c_vector_vcl_complexF_two_norm(*args):
  """vnl_c_vector_vcl_complexF_two_norm(vcl_complexF p, unsigned int n) -> float"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_two_norm(*args)

def vnl_c_vector_vcl_complexF_inf_norm(*args):
  """vnl_c_vector_vcl_complexF_inf_norm(vcl_complexF p, unsigned int n) -> float"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_inf_norm(*args)

def vnl_c_vector_vcl_complexF_two_nrm2(*args):
  """vnl_c_vector_vcl_complexF_two_nrm2(vcl_complexF p, unsigned int n) -> float"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_two_nrm2(*args)

def vnl_c_vector_vcl_complexF_rms_norm(*args):
  """vnl_c_vector_vcl_complexF_rms_norm(vcl_complexF p, unsigned int n) -> float"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_rms_norm(*args)

def vnl_c_vector_vcl_complexF_euclid_dist_sq(*args):
  """vnl_c_vector_vcl_complexF_euclid_dist_sq(vcl_complexF arg0, vcl_complexF arg1, unsigned int arg2) -> vcl_complexF"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_euclid_dist_sq(*args)

def vnl_c_vector_vcl_complexF_allocate_Tptr(*args):
  """vnl_c_vector_vcl_complexF_allocate_Tptr(int n) -> vcl_complexF"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_allocate_Tptr(*args)

def vnl_c_vector_vcl_complexF_allocate_T(*args):
  """vnl_c_vector_vcl_complexF_allocate_T(int n) -> vcl_complexF"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_allocate_T(*args)

def vnl_c_vector_vcl_complexF_deallocate(*args):
  """
    deallocate(vcl_complexF arg0, int n_when_allocated)
    vnl_c_vector_vcl_complexF_deallocate(vcl_complexF arg0, int n_when_allocated)
    """
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexF_deallocate(*args)

class vnl_c_vector_vcl_complexLD(object):
    """Proxy of C++ vnl_c_vector_vcl_complexLD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _vnl_c_vectorPython.delete_vnl_c_vector_vcl_complexLD
    def __init__(self, *args): 
        """
        __init__(self, vnl_c_vector_vcl_complexLD arg0) -> vnl_c_vector_vcl_complexLD
        __init__(self) -> vnl_c_vector_vcl_complexLD
        """
        _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_swiginit(self,_vnl_c_vectorPython.new_vnl_c_vector_vcl_complexLD(*args))
    def sum(*args):
        """sum(vcl_complexLD v, unsigned int n) -> vcl_complexLD"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_sum(*args)

    sum = staticmethod(sum)
    def squared_magnitude(*args):
        """squared_magnitude(vcl_complexLD p, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_squared_magnitude(*args)

    squared_magnitude = staticmethod(squared_magnitude)
    def normalize(*args):
        """normalize(vcl_complexLD arg0, unsigned int n)"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_normalize(*args)

    normalize = staticmethod(normalize)
    def copy(*args):
        """copy(vcl_complexLD x, vcl_complexLD y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_copy(*args)

    copy = staticmethod(copy)
    def scale(*args):
        """
        scale(vcl_complexLD x, vcl_complexLD y, unsigned int arg2, 
            vcl_complexLD arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_scale(*args)

    scale = staticmethod(scale)
    def add(*args):
        """
        add(vcl_complexLD x, vcl_complexLD y, vcl_complexLD z, 
            unsigned int arg3)
        add(vcl_complexLD x, vcl_complexLD y, vcl_complexLD z, 
            unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_add(*args)

    add = staticmethod(add)
    def subtract(*args):
        """
        subtract(vcl_complexLD x, vcl_complexLD y, vcl_complexLD z, 
            unsigned int arg3)
        subtract(vcl_complexLD x, vcl_complexLD y, vcl_complexLD z, 
            unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_subtract(*args)

    subtract = staticmethod(subtract)
    def multiply(*args):
        """
        multiply(vcl_complexLD x, vcl_complexLD y, vcl_complexLD z, 
            unsigned int arg3)
        multiply(vcl_complexLD x, vcl_complexLD y, vcl_complexLD z, 
            unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_multiply(*args)

    multiply = staticmethod(multiply)
    def divide(*args):
        """
        divide(vcl_complexLD x, vcl_complexLD y, vcl_complexLD z, 
            unsigned int arg3)
        divide(vcl_complexLD x, vcl_complexLD y, vcl_complexLD z, 
            unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_divide(*args)

    divide = staticmethod(divide)
    def negate(*args):
        """negate(vcl_complexLD x, vcl_complexLD y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_negate(*args)

    negate = staticmethod(negate)
    def invert(*args):
        """invert(vcl_complexLD x, vcl_complexLD y, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_invert(*args)

    invert = staticmethod(invert)
    def saxpy(*args):
        """
        saxpy(vcl_complexLD a, vcl_complexLD x, vcl_complexLD y, 
            unsigned int arg3)
        """
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_saxpy(*args)

    saxpy = staticmethod(saxpy)
    def fill(*args):
        """fill(vcl_complexLD x, unsigned int arg1, vcl_complexLD v)"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_fill(*args)

    fill = staticmethod(fill)
    def reverse(*args):
        """reverse(vcl_complexLD x, unsigned int arg1)"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_reverse(*args)

    reverse = staticmethod(reverse)
    def dot_product(*args):
        """dot_product(vcl_complexLD arg0, vcl_complexLD arg1, unsigned int arg2) -> vcl_complexLD"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_dot_product(*args)

    dot_product = staticmethod(dot_product)
    def inner_product(*args):
        """inner_product(vcl_complexLD arg0, vcl_complexLD arg1, unsigned int arg2) -> vcl_complexLD"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_inner_product(*args)

    inner_product = staticmethod(inner_product)
    def conjugate(*args):
        """conjugate(vcl_complexLD arg0, vcl_complexLD arg1, unsigned int arg2)"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_conjugate(*args)

    conjugate = staticmethod(conjugate)
    def max_value(*args):
        """max_value(vcl_complexLD arg0, unsigned int arg1) -> vcl_complexLD"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_max_value(*args)

    max_value = staticmethod(max_value)
    def min_value(*args):
        """min_value(vcl_complexLD arg0, unsigned int arg1) -> vcl_complexLD"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_min_value(*args)

    min_value = staticmethod(min_value)
    def mean(*args):
        """mean(vcl_complexLD p, unsigned int n) -> vcl_complexLD"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_mean(*args)

    mean = staticmethod(mean)
    def std(*args):
        """std(vcl_complexLD p, unsigned int n) -> vcl_complexLD"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_std(*args)

    std = staticmethod(std)
    def sum_sq_diff_means(*args):
        """sum_sq_diff_means(vcl_complexLD v, unsigned int n) -> vcl_complexLD"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_sum_sq_diff_means(*args)

    sum_sq_diff_means = staticmethod(sum_sq_diff_means)
    def one_norm(*args):
        """one_norm(vcl_complexLD p, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_one_norm(*args)

    one_norm = staticmethod(one_norm)
    def two_norm(*args):
        """two_norm(vcl_complexLD p, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_two_norm(*args)

    two_norm = staticmethod(two_norm)
    def inf_norm(*args):
        """inf_norm(vcl_complexLD p, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_inf_norm(*args)

    inf_norm = staticmethod(inf_norm)
    def two_nrm2(*args):
        """two_nrm2(vcl_complexLD p, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_two_nrm2(*args)

    two_nrm2 = staticmethod(two_nrm2)
    def rms_norm(*args):
        """rms_norm(vcl_complexLD p, unsigned int n) -> long double"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_rms_norm(*args)

    rms_norm = staticmethod(rms_norm)
    def euclid_dist_sq(*args):
        """euclid_dist_sq(vcl_complexLD arg0, vcl_complexLD arg1, unsigned int arg2) -> vcl_complexLD"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_euclid_dist_sq(*args)

    euclid_dist_sq = staticmethod(euclid_dist_sq)
    def allocate_Tptr(*args):
        """allocate_Tptr(int n) -> vcl_complexLD"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_allocate_Tptr(*args)

    allocate_Tptr = staticmethod(allocate_Tptr)
    def allocate_T(*args):
        """allocate_T(int n) -> vcl_complexLD"""
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_allocate_T(*args)

    allocate_T = staticmethod(allocate_T)
    def deallocate(*args):
        """
        deallocate(vcl_complexLD arg0, int n_when_allocated)
        deallocate(vcl_complexLD arg0, int n_when_allocated)
        """
        return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_deallocate(*args)

    deallocate = staticmethod(deallocate)
vnl_c_vector_vcl_complexLD_swigregister = _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_swigregister
vnl_c_vector_vcl_complexLD_swigregister(vnl_c_vector_vcl_complexLD)

def vnl_c_vector_vcl_complexLD_sum(*args):
  """vnl_c_vector_vcl_complexLD_sum(vcl_complexLD v, unsigned int n) -> vcl_complexLD"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_sum(*args)

def vnl_c_vector_vcl_complexLD_squared_magnitude(*args):
  """vnl_c_vector_vcl_complexLD_squared_magnitude(vcl_complexLD p, unsigned int n) -> long double"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_squared_magnitude(*args)

def vnl_c_vector_vcl_complexLD_normalize(*args):
  """vnl_c_vector_vcl_complexLD_normalize(vcl_complexLD arg0, unsigned int n)"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_normalize(*args)

def vnl_c_vector_vcl_complexLD_copy(*args):
  """vnl_c_vector_vcl_complexLD_copy(vcl_complexLD x, vcl_complexLD y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_copy(*args)

def vnl_c_vector_vcl_complexLD_scale(*args):
  """
    vnl_c_vector_vcl_complexLD_scale(vcl_complexLD x, vcl_complexLD y, unsigned int arg2, 
        vcl_complexLD arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_scale(*args)

def vnl_c_vector_vcl_complexLD_add(*args):
  """
    add(vcl_complexLD x, vcl_complexLD y, vcl_complexLD z, 
        unsigned int arg3)
    vnl_c_vector_vcl_complexLD_add(vcl_complexLD x, vcl_complexLD y, vcl_complexLD z, 
        unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_add(*args)

def vnl_c_vector_vcl_complexLD_subtract(*args):
  """
    subtract(vcl_complexLD x, vcl_complexLD y, vcl_complexLD z, 
        unsigned int arg3)
    vnl_c_vector_vcl_complexLD_subtract(vcl_complexLD x, vcl_complexLD y, vcl_complexLD z, 
        unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_subtract(*args)

def vnl_c_vector_vcl_complexLD_multiply(*args):
  """
    multiply(vcl_complexLD x, vcl_complexLD y, vcl_complexLD z, 
        unsigned int arg3)
    vnl_c_vector_vcl_complexLD_multiply(vcl_complexLD x, vcl_complexLD y, vcl_complexLD z, 
        unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_multiply(*args)

def vnl_c_vector_vcl_complexLD_divide(*args):
  """
    divide(vcl_complexLD x, vcl_complexLD y, vcl_complexLD z, 
        unsigned int arg3)
    vnl_c_vector_vcl_complexLD_divide(vcl_complexLD x, vcl_complexLD y, vcl_complexLD z, 
        unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_divide(*args)

def vnl_c_vector_vcl_complexLD_negate(*args):
  """vnl_c_vector_vcl_complexLD_negate(vcl_complexLD x, vcl_complexLD y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_negate(*args)

def vnl_c_vector_vcl_complexLD_invert(*args):
  """vnl_c_vector_vcl_complexLD_invert(vcl_complexLD x, vcl_complexLD y, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_invert(*args)

def vnl_c_vector_vcl_complexLD_saxpy(*args):
  """
    vnl_c_vector_vcl_complexLD_saxpy(vcl_complexLD a, vcl_complexLD x, vcl_complexLD y, 
        unsigned int arg3)
    """
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_saxpy(*args)

def vnl_c_vector_vcl_complexLD_fill(*args):
  """vnl_c_vector_vcl_complexLD_fill(vcl_complexLD x, unsigned int arg1, vcl_complexLD v)"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_fill(*args)

def vnl_c_vector_vcl_complexLD_reverse(*args):
  """vnl_c_vector_vcl_complexLD_reverse(vcl_complexLD x, unsigned int arg1)"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_reverse(*args)

def vnl_c_vector_vcl_complexLD_dot_product(*args):
  """vnl_c_vector_vcl_complexLD_dot_product(vcl_complexLD arg0, vcl_complexLD arg1, unsigned int arg2) -> vcl_complexLD"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_dot_product(*args)

def vnl_c_vector_vcl_complexLD_inner_product(*args):
  """vnl_c_vector_vcl_complexLD_inner_product(vcl_complexLD arg0, vcl_complexLD arg1, unsigned int arg2) -> vcl_complexLD"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_inner_product(*args)

def vnl_c_vector_vcl_complexLD_conjugate(*args):
  """vnl_c_vector_vcl_complexLD_conjugate(vcl_complexLD arg0, vcl_complexLD arg1, unsigned int arg2)"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_conjugate(*args)

def vnl_c_vector_vcl_complexLD_max_value(*args):
  """vnl_c_vector_vcl_complexLD_max_value(vcl_complexLD arg0, unsigned int arg1) -> vcl_complexLD"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_max_value(*args)

def vnl_c_vector_vcl_complexLD_min_value(*args):
  """vnl_c_vector_vcl_complexLD_min_value(vcl_complexLD arg0, unsigned int arg1) -> vcl_complexLD"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_min_value(*args)

def vnl_c_vector_vcl_complexLD_mean(*args):
  """vnl_c_vector_vcl_complexLD_mean(vcl_complexLD p, unsigned int n) -> vcl_complexLD"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_mean(*args)

def vnl_c_vector_vcl_complexLD_std(*args):
  """vnl_c_vector_vcl_complexLD_std(vcl_complexLD p, unsigned int n) -> vcl_complexLD"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_std(*args)

def vnl_c_vector_vcl_complexLD_sum_sq_diff_means(*args):
  """vnl_c_vector_vcl_complexLD_sum_sq_diff_means(vcl_complexLD v, unsigned int n) -> vcl_complexLD"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_sum_sq_diff_means(*args)

def vnl_c_vector_vcl_complexLD_one_norm(*args):
  """vnl_c_vector_vcl_complexLD_one_norm(vcl_complexLD p, unsigned int n) -> long double"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_one_norm(*args)

def vnl_c_vector_vcl_complexLD_two_norm(*args):
  """vnl_c_vector_vcl_complexLD_two_norm(vcl_complexLD p, unsigned int n) -> long double"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_two_norm(*args)

def vnl_c_vector_vcl_complexLD_inf_norm(*args):
  """vnl_c_vector_vcl_complexLD_inf_norm(vcl_complexLD p, unsigned int n) -> long double"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_inf_norm(*args)

def vnl_c_vector_vcl_complexLD_two_nrm2(*args):
  """vnl_c_vector_vcl_complexLD_two_nrm2(vcl_complexLD p, unsigned int n) -> long double"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_two_nrm2(*args)

def vnl_c_vector_vcl_complexLD_rms_norm(*args):
  """vnl_c_vector_vcl_complexLD_rms_norm(vcl_complexLD p, unsigned int n) -> long double"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_rms_norm(*args)

def vnl_c_vector_vcl_complexLD_euclid_dist_sq(*args):
  """vnl_c_vector_vcl_complexLD_euclid_dist_sq(vcl_complexLD arg0, vcl_complexLD arg1, unsigned int arg2) -> vcl_complexLD"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_euclid_dist_sq(*args)

def vnl_c_vector_vcl_complexLD_allocate_Tptr(*args):
  """vnl_c_vector_vcl_complexLD_allocate_Tptr(int n) -> vcl_complexLD"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_allocate_Tptr(*args)

def vnl_c_vector_vcl_complexLD_allocate_T(*args):
  """vnl_c_vector_vcl_complexLD_allocate_T(int n) -> vcl_complexLD"""
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_allocate_T(*args)

def vnl_c_vector_vcl_complexLD_deallocate(*args):
  """
    deallocate(vcl_complexLD arg0, int n_when_allocated)
    vnl_c_vector_vcl_complexLD_deallocate(vcl_complexLD arg0, int n_when_allocated)
    """
  return _vnl_c_vectorPython.vnl_c_vector_vcl_complexLD_deallocate(*args)



