# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _vnl_matrixPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vnl_matrixPython', [dirname(__file__)])
        except ImportError:
            import _vnl_matrixPython
            return _vnl_matrixPython
        if fp is not None:
            try:
                _mod = imp.load_module('_vnl_matrixPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _vnl_matrixPython = swig_import_helper()
    del swig_import_helper
else:
    import _vnl_matrixPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import vcl_complexPython
import pyBasePython
import vnl_vectorPython
class vnl_matrixD(object):
    """Proxy of C++ vnl_matrixD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_matrixD
        __init__(self, unsigned int r, unsigned int c) -> vnl_matrixD
        __init__(self, unsigned int r, unsigned int c, double v0) -> vnl_matrixD
        __init__(self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrixD
        __init__(self, unsigned int r, unsigned int c, unsigned int n, double values) -> vnl_matrixD
        __init__(self, double data_block, unsigned int r, unsigned int c) -> vnl_matrixD
        __init__(self, vnl_matrixD arg0) -> vnl_matrixD
        __init__(self, vnl_matrixD arg0, vnl_matrixD arg1, vnl_tag_add arg2) -> vnl_matrixD
        __init__(self, vnl_matrixD arg0, vnl_matrixD arg1, vnl_tag_sub arg2) -> vnl_matrixD
        __init__(self, vnl_matrixD arg0, double arg1, vnl_tag_mul arg2) -> vnl_matrixD
        __init__(self, vnl_matrixD arg0, double arg1, vnl_tag_div arg2) -> vnl_matrixD
        __init__(self, vnl_matrixD arg0, double arg1, vnl_tag_add arg2) -> vnl_matrixD
        __init__(self, vnl_matrixD arg0, double arg1, vnl_tag_sub arg2) -> vnl_matrixD
        __init__(self, vnl_matrixD arg0, vnl_matrixD arg1, vnl_tag_mul arg2) -> vnl_matrixD
        __init__(self, vnl_matrixD that, vnl_tag_grab arg1) -> vnl_matrixD
        """
        _vnl_matrixPython.vnl_matrixD_swiginit(self,_vnl_matrixPython.new_vnl_matrixD(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrixD
    def rows(self):
        """rows(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixD_rows(self)

    def columns(self):
        """columns(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixD_columns(self)

    def cols(self):
        """cols(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixD_cols(self)

    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixD_size(self)

    def put(self, *args):
        """put(self, unsigned int row, unsigned int column, double value)"""
        return _vnl_matrixPython.vnl_matrixD_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int row, unsigned int column) -> double"""
        return _vnl_matrixPython.vnl_matrixD_get(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int r, unsigned int c) -> double
        __call__(self, unsigned int r, unsigned int c) -> double
        """
        return _vnl_matrixPython.vnl_matrixD___call__(self, *args)

    def fill(self, *args):
        """fill(self, double arg0)"""
        return _vnl_matrixPython.vnl_matrixD_fill(self, *args)

    def fill_diagonal(self, *args):
        """fill_diagonal(self, double arg0)"""
        return _vnl_matrixPython.vnl_matrixD_fill_diagonal(self, *args)

    def copy_in(self, *args):
        """copy_in(self, double arg0)"""
        return _vnl_matrixPython.vnl_matrixD_copy_in(self, *args)

    def set(self, *args):
        """set(self, double d)"""
        return _vnl_matrixPython.vnl_matrixD_set(self, *args)

    def copy_out(self, *args):
        """copy_out(self, double arg0)"""
        return _vnl_matrixPython.vnl_matrixD_copy_out(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, double value) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, double value) -> vnl_matrixD
        __iadd__(self, vnl_matrixD arg0) -> vnl_matrixD
        """
        return _vnl_matrixPython.vnl_matrixD___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, double value) -> vnl_matrixD
        __isub__(self, vnl_matrixD arg0) -> vnl_matrixD
        """
        return _vnl_matrixPython.vnl_matrixD___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, double value) -> vnl_matrixD
        __imul__(self, vnl_matrixD rhs) -> vnl_matrixD
        """
        return _vnl_matrixPython.vnl_matrixD___imul__(self, *args)

    def __neg__(self):
        """__neg__(self) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD___neg__(self)

    def __div__(self, *args):
        """__div__(self, double v) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, double v) -> vnl_matrixD
        __add__(self, vnl_matrixD rhs) -> vnl_matrixD
        """
        return _vnl_matrixPython.vnl_matrixD___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, double v) -> vnl_matrixD
        __sub__(self, vnl_matrixD rhs) -> vnl_matrixD
        """
        return _vnl_matrixPython.vnl_matrixD___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, double v) -> vnl_matrixD
        __mul__(self, vnl_matrixD rhs) -> vnl_matrixD
        """
        return _vnl_matrixPython.vnl_matrixD___mul__(self, *args)

    def transpose(self):
        """transpose(self) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_transpose(self)

    def conjugate_transpose(self):
        """conjugate_transpose(self) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_conjugate_transpose(self)

    def update(self, *args):
        """
        update(self, vnl_matrixD arg0, unsigned int top = 0, unsigned int left = 0) -> vnl_matrixD
        update(self, vnl_matrixD arg0, unsigned int top = 0) -> vnl_matrixD
        update(self, vnl_matrixD arg0) -> vnl_matrixD
        """
        return _vnl_matrixPython.vnl_matrixD_update(self, *args)

    def set_column(self, *args):
        """
        set_column(self, unsigned int i, double v)
        set_column(self, unsigned int i, double value)
        set_column(self, unsigned int j, vnl_vectorD v)
        """
        return _vnl_matrixPython.vnl_matrixD_set_column(self, *args)

    def set_columns(self, *args):
        """set_columns(self, unsigned int starting_column, vnl_matrixD M)"""
        return _vnl_matrixPython.vnl_matrixD_set_columns(self, *args)

    def set_row(self, *args):
        """
        set_row(self, unsigned int i, double v)
        set_row(self, unsigned int i, double value)
        set_row(self, unsigned int i, vnl_vectorD arg1)
        """
        return _vnl_matrixPython.vnl_matrixD_set_row(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int r, unsigned int c, unsigned int top = 0, 
            unsigned int left = 0) -> vnl_matrixD
        extract(self, unsigned int r, unsigned int c, unsigned int top = 0) -> vnl_matrixD
        extract(self, unsigned int r, unsigned int c) -> vnl_matrixD
        """
        return _vnl_matrixPython.vnl_matrixD_extract(self, *args)

    def get_row(self, *args):
        """get_row(self, unsigned int r) -> vnl_vectorD"""
        return _vnl_matrixPython.vnl_matrixD_get_row(self, *args)

    def get_column(self, *args):
        """get_column(self, unsigned int c) -> vnl_vectorD"""
        return _vnl_matrixPython.vnl_matrixD_get_column(self, *args)

    def get_n_rows(self, *args):
        """get_n_rows(self, unsigned int rowstart, unsigned int n) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_get_n_rows(self, *args)

    def get_n_columns(self, *args):
        """get_n_columns(self, unsigned int colstart, unsigned int n) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_get_n_columns(self, *args)

    def set_identity(self):
        """set_identity(self)"""
        return _vnl_matrixPython.vnl_matrixD_set_identity(self)

    def inplace_transpose(self):
        """inplace_transpose(self)"""
        return _vnl_matrixPython.vnl_matrixD_inplace_transpose(self)

    def flipud(self):
        """flipud(self)"""
        return _vnl_matrixPython.vnl_matrixD_flipud(self)

    def fliplr(self):
        """fliplr(self)"""
        return _vnl_matrixPython.vnl_matrixD_fliplr(self)

    def normalize_rows(self):
        """normalize_rows(self)"""
        return _vnl_matrixPython.vnl_matrixD_normalize_rows(self)

    def normalize_columns(self):
        """normalize_columns(self)"""
        return _vnl_matrixPython.vnl_matrixD_normalize_columns(self)

    def scale_row(self, *args):
        """scale_row(self, unsigned int row, double value)"""
        return _vnl_matrixPython.vnl_matrixD_scale_row(self, *args)

    def scale_column(self, *args):
        """scale_column(self, unsigned int col, double value)"""
        return _vnl_matrixPython.vnl_matrixD_scale_column(self, *args)

    def swap(self, *args):
        """swap(self, vnl_matrixD that)"""
        return _vnl_matrixPython.vnl_matrixD_swap(self, *args)

    def array_one_norm(self):
        """array_one_norm(self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_array_one_norm(self)

    def array_two_norm(self):
        """array_two_norm(self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_array_two_norm(self)

    def array_inf_norm(self):
        """array_inf_norm(self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_array_inf_norm(self)

    def absolute_value_sum(self):
        """absolute_value_sum(self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_absolute_value_sum(self)

    def absolute_value_max(self):
        """absolute_value_max(self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_absolute_value_max(self)

    def operator_one_norm(self):
        """operator_one_norm(self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_operator_one_norm(self)

    def operator_inf_norm(self):
        """operator_inf_norm(self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_operator_inf_norm(self)

    def frobenius_norm(self):
        """frobenius_norm(self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_frobenius_norm(self)

    def fro_norm(self):
        """fro_norm(self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_fro_norm(self)

    def rms(self):
        """rms(self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_rms(self)

    def min_value(self):
        """min_value(self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_min_value(self)

    def max_value(self):
        """max_value(self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_max_value(self)

    def mean(self):
        """mean(self) -> double"""
        return _vnl_matrixPython.vnl_matrixD_mean(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixD_empty(self)

    def is_identity(self, *args):
        """
        is_identity(self) -> bool
        is_identity(self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixD_is_identity(self, *args)

    def is_zero(self, *args):
        """
        is_zero(self) -> bool
        is_zero(self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixD_is_zero(self, *args)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixD_is_finite(self)

    def has_nans(self):
        """has_nans(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixD_has_nans(self)

    def assert_size(self, *args):
        """assert_size(self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrixD_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_matrixPython.vnl_matrixD_assert_finite(self)

    def read(*args):
        """read(istream s) -> vnl_matrixD"""
        return _vnl_matrixPython.vnl_matrixD_read(*args)

    read = staticmethod(read)
    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrixD_read_ascii(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> double
        data_block(self) -> double
        """
        return _vnl_matrixPython.vnl_matrixD_data_block(self, *args)

    def data_array(self, *args):
        """
        data_array(self) -> double
        data_array(self) -> double
        """
        return _vnl_matrixPython.vnl_matrixD_data_array(self, *args)

    def begin(self, *args):
        """
        begin(self) -> double
        begin(self) -> double
        """
        return _vnl_matrixPython.vnl_matrixD_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> double
        end(self) -> double
        """
        return _vnl_matrixPython.vnl_matrixD_end(self, *args)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_matrixD rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrixD_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_matrixD that) -> bool"""
        return _vnl_matrixPython.vnl_matrixD___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_matrixD that) -> bool"""
        return _vnl_matrixPython.vnl_matrixD___ne__(self, *args)

    def _print(self, *args):
        """_print(self, ostream os)"""
        return _vnl_matrixPython.vnl_matrixD__print(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_matrixPython.vnl_matrixD_clear(self)

    def set_size(self, *args):
        """set_size(self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrixD_set_size(self, *args)

vnl_matrixD.rows = new_instancemethod(_vnl_matrixPython.vnl_matrixD_rows,None,vnl_matrixD)
vnl_matrixD.columns = new_instancemethod(_vnl_matrixPython.vnl_matrixD_columns,None,vnl_matrixD)
vnl_matrixD.cols = new_instancemethod(_vnl_matrixPython.vnl_matrixD_cols,None,vnl_matrixD)
vnl_matrixD.size = new_instancemethod(_vnl_matrixPython.vnl_matrixD_size,None,vnl_matrixD)
vnl_matrixD.put = new_instancemethod(_vnl_matrixPython.vnl_matrixD_put,None,vnl_matrixD)
vnl_matrixD.get = new_instancemethod(_vnl_matrixPython.vnl_matrixD_get,None,vnl_matrixD)
vnl_matrixD.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrixD___call__,None,vnl_matrixD)
vnl_matrixD.fill = new_instancemethod(_vnl_matrixPython.vnl_matrixD_fill,None,vnl_matrixD)
vnl_matrixD.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixD_fill_diagonal,None,vnl_matrixD)
vnl_matrixD.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrixD_copy_in,None,vnl_matrixD)
vnl_matrixD.set = new_instancemethod(_vnl_matrixPython.vnl_matrixD_set,None,vnl_matrixD)
vnl_matrixD.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrixD_copy_out,None,vnl_matrixD)
vnl_matrixD.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrixD___idiv__,None,vnl_matrixD)
vnl_matrixD.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrixD___iadd__,None,vnl_matrixD)
vnl_matrixD.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixD___isub__,None,vnl_matrixD)
vnl_matrixD.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixD___imul__,None,vnl_matrixD)
vnl_matrixD.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrixD___neg__,None,vnl_matrixD)
vnl_matrixD.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrixD___div__,None,vnl_matrixD)
vnl_matrixD.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrixD___add__,None,vnl_matrixD)
vnl_matrixD.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixD___sub__,None,vnl_matrixD)
vnl_matrixD.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixD___mul__,None,vnl_matrixD)
vnl_matrixD.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixD_transpose,None,vnl_matrixD)
vnl_matrixD.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixD_conjugate_transpose,None,vnl_matrixD)
vnl_matrixD.update = new_instancemethod(_vnl_matrixPython.vnl_matrixD_update,None,vnl_matrixD)
vnl_matrixD.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrixD_set_column,None,vnl_matrixD)
vnl_matrixD.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixD_set_columns,None,vnl_matrixD)
vnl_matrixD.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrixD_set_row,None,vnl_matrixD)
vnl_matrixD.extract = new_instancemethod(_vnl_matrixPython.vnl_matrixD_extract,None,vnl_matrixD)
vnl_matrixD.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrixD_get_row,None,vnl_matrixD)
vnl_matrixD.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrixD_get_column,None,vnl_matrixD)
vnl_matrixD.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixD_get_n_rows,None,vnl_matrixD)
vnl_matrixD.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixD_get_n_columns,None,vnl_matrixD)
vnl_matrixD.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixD_set_identity,None,vnl_matrixD)
vnl_matrixD.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixD_inplace_transpose,None,vnl_matrixD)
vnl_matrixD.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrixD_flipud,None,vnl_matrixD)
vnl_matrixD.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrixD_fliplr,None,vnl_matrixD)
vnl_matrixD.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixD_normalize_rows,None,vnl_matrixD)
vnl_matrixD.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixD_normalize_columns,None,vnl_matrixD)
vnl_matrixD.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrixD_scale_row,None,vnl_matrixD)
vnl_matrixD.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrixD_scale_column,None,vnl_matrixD)
vnl_matrixD.swap = new_instancemethod(_vnl_matrixPython.vnl_matrixD_swap,None,vnl_matrixD)
vnl_matrixD.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixD_array_one_norm,None,vnl_matrixD)
vnl_matrixD.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixD_array_two_norm,None,vnl_matrixD)
vnl_matrixD.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixD_array_inf_norm,None,vnl_matrixD)
vnl_matrixD.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrixD_absolute_value_sum,None,vnl_matrixD)
vnl_matrixD.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrixD_absolute_value_max,None,vnl_matrixD)
vnl_matrixD.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixD_operator_one_norm,None,vnl_matrixD)
vnl_matrixD.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixD_operator_inf_norm,None,vnl_matrixD)
vnl_matrixD.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixD_frobenius_norm,None,vnl_matrixD)
vnl_matrixD.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixD_fro_norm,None,vnl_matrixD)
vnl_matrixD.rms = new_instancemethod(_vnl_matrixPython.vnl_matrixD_rms,None,vnl_matrixD)
vnl_matrixD.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrixD_min_value,None,vnl_matrixD)
vnl_matrixD.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrixD_max_value,None,vnl_matrixD)
vnl_matrixD.mean = new_instancemethod(_vnl_matrixPython.vnl_matrixD_mean,None,vnl_matrixD)
vnl_matrixD.empty = new_instancemethod(_vnl_matrixPython.vnl_matrixD_empty,None,vnl_matrixD)
vnl_matrixD.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixD_is_identity,None,vnl_matrixD)
vnl_matrixD.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrixD_is_zero,None,vnl_matrixD)
vnl_matrixD.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixD_is_finite,None,vnl_matrixD)
vnl_matrixD.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrixD_has_nans,None,vnl_matrixD)
vnl_matrixD.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrixD_assert_size,None,vnl_matrixD)
vnl_matrixD.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixD_assert_finite,None,vnl_matrixD)
vnl_matrixD.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrixD_read_ascii,None,vnl_matrixD)
vnl_matrixD.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrixD_data_block,None,vnl_matrixD)
vnl_matrixD.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrixD_data_array,None,vnl_matrixD)
vnl_matrixD.begin = new_instancemethod(_vnl_matrixPython.vnl_matrixD_begin,None,vnl_matrixD)
vnl_matrixD.end = new_instancemethod(_vnl_matrixPython.vnl_matrixD_end,None,vnl_matrixD)
vnl_matrixD.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrixD_operator_eq,None,vnl_matrixD)
vnl_matrixD.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrixD___eq__,None,vnl_matrixD)
vnl_matrixD.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrixD___ne__,None,vnl_matrixD)
vnl_matrixD._print = new_instancemethod(_vnl_matrixPython.vnl_matrixD__print,None,vnl_matrixD)
vnl_matrixD.clear = new_instancemethod(_vnl_matrixPython.vnl_matrixD_clear,None,vnl_matrixD)
vnl_matrixD.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrixD_set_size,None,vnl_matrixD)
vnl_matrixD_swigregister = _vnl_matrixPython.vnl_matrixD_swigregister
vnl_matrixD_swigregister(vnl_matrixD)

def vnl_matrixD_read(*args):
  """vnl_matrixD_read(istream s) -> vnl_matrixD"""
  return _vnl_matrixPython.vnl_matrixD_read(*args)

class vnl_matrixF(object):
    """Proxy of C++ vnl_matrixF class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_matrixF
        __init__(self, unsigned int r, unsigned int c) -> vnl_matrixF
        __init__(self, unsigned int r, unsigned int c, float v0) -> vnl_matrixF
        __init__(self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrixF
        __init__(self, unsigned int r, unsigned int c, unsigned int n, float values) -> vnl_matrixF
        __init__(self, float data_block, unsigned int r, unsigned int c) -> vnl_matrixF
        __init__(self, vnl_matrixF arg0) -> vnl_matrixF
        __init__(self, vnl_matrixF arg0, vnl_matrixF arg1, vnl_tag_add arg2) -> vnl_matrixF
        __init__(self, vnl_matrixF arg0, vnl_matrixF arg1, vnl_tag_sub arg2) -> vnl_matrixF
        __init__(self, vnl_matrixF arg0, float arg1, vnl_tag_mul arg2) -> vnl_matrixF
        __init__(self, vnl_matrixF arg0, float arg1, vnl_tag_div arg2) -> vnl_matrixF
        __init__(self, vnl_matrixF arg0, float arg1, vnl_tag_add arg2) -> vnl_matrixF
        __init__(self, vnl_matrixF arg0, float arg1, vnl_tag_sub arg2) -> vnl_matrixF
        __init__(self, vnl_matrixF arg0, vnl_matrixF arg1, vnl_tag_mul arg2) -> vnl_matrixF
        __init__(self, vnl_matrixF that, vnl_tag_grab arg1) -> vnl_matrixF
        """
        _vnl_matrixPython.vnl_matrixF_swiginit(self,_vnl_matrixPython.new_vnl_matrixF(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrixF
    def rows(self):
        """rows(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixF_rows(self)

    def columns(self):
        """columns(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixF_columns(self)

    def cols(self):
        """cols(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixF_cols(self)

    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixF_size(self)

    def put(self, *args):
        """put(self, unsigned int row, unsigned int column, float value)"""
        return _vnl_matrixPython.vnl_matrixF_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int row, unsigned int column) -> float"""
        return _vnl_matrixPython.vnl_matrixF_get(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int r, unsigned int c) -> float
        __call__(self, unsigned int r, unsigned int c) -> float
        """
        return _vnl_matrixPython.vnl_matrixF___call__(self, *args)

    def fill(self, *args):
        """fill(self, float arg0)"""
        return _vnl_matrixPython.vnl_matrixF_fill(self, *args)

    def fill_diagonal(self, *args):
        """fill_diagonal(self, float arg0)"""
        return _vnl_matrixPython.vnl_matrixF_fill_diagonal(self, *args)

    def copy_in(self, *args):
        """copy_in(self, float arg0)"""
        return _vnl_matrixPython.vnl_matrixF_copy_in(self, *args)

    def set(self, *args):
        """set(self, float d)"""
        return _vnl_matrixPython.vnl_matrixF_set(self, *args)

    def copy_out(self, *args):
        """copy_out(self, float arg0)"""
        return _vnl_matrixPython.vnl_matrixF_copy_out(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, float value) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, float value) -> vnl_matrixF
        __iadd__(self, vnl_matrixF arg0) -> vnl_matrixF
        """
        return _vnl_matrixPython.vnl_matrixF___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, float value) -> vnl_matrixF
        __isub__(self, vnl_matrixF arg0) -> vnl_matrixF
        """
        return _vnl_matrixPython.vnl_matrixF___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, float value) -> vnl_matrixF
        __imul__(self, vnl_matrixF rhs) -> vnl_matrixF
        """
        return _vnl_matrixPython.vnl_matrixF___imul__(self, *args)

    def __neg__(self):
        """__neg__(self) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF___neg__(self)

    def __div__(self, *args):
        """__div__(self, float v) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, float v) -> vnl_matrixF
        __add__(self, vnl_matrixF rhs) -> vnl_matrixF
        """
        return _vnl_matrixPython.vnl_matrixF___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, float v) -> vnl_matrixF
        __sub__(self, vnl_matrixF rhs) -> vnl_matrixF
        """
        return _vnl_matrixPython.vnl_matrixF___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, float v) -> vnl_matrixF
        __mul__(self, vnl_matrixF rhs) -> vnl_matrixF
        """
        return _vnl_matrixPython.vnl_matrixF___mul__(self, *args)

    def transpose(self):
        """transpose(self) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_transpose(self)

    def conjugate_transpose(self):
        """conjugate_transpose(self) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_conjugate_transpose(self)

    def update(self, *args):
        """
        update(self, vnl_matrixF arg0, unsigned int top = 0, unsigned int left = 0) -> vnl_matrixF
        update(self, vnl_matrixF arg0, unsigned int top = 0) -> vnl_matrixF
        update(self, vnl_matrixF arg0) -> vnl_matrixF
        """
        return _vnl_matrixPython.vnl_matrixF_update(self, *args)

    def set_column(self, *args):
        """
        set_column(self, unsigned int i, float v)
        set_column(self, unsigned int i, float value)
        set_column(self, unsigned int j, vnl_vectorF v)
        """
        return _vnl_matrixPython.vnl_matrixF_set_column(self, *args)

    def set_columns(self, *args):
        """set_columns(self, unsigned int starting_column, vnl_matrixF M)"""
        return _vnl_matrixPython.vnl_matrixF_set_columns(self, *args)

    def set_row(self, *args):
        """
        set_row(self, unsigned int i, float v)
        set_row(self, unsigned int i, float value)
        set_row(self, unsigned int i, vnl_vectorF arg1)
        """
        return _vnl_matrixPython.vnl_matrixF_set_row(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int r, unsigned int c, unsigned int top = 0, 
            unsigned int left = 0) -> vnl_matrixF
        extract(self, unsigned int r, unsigned int c, unsigned int top = 0) -> vnl_matrixF
        extract(self, unsigned int r, unsigned int c) -> vnl_matrixF
        """
        return _vnl_matrixPython.vnl_matrixF_extract(self, *args)

    def get_row(self, *args):
        """get_row(self, unsigned int r) -> vnl_vectorF"""
        return _vnl_matrixPython.vnl_matrixF_get_row(self, *args)

    def get_column(self, *args):
        """get_column(self, unsigned int c) -> vnl_vectorF"""
        return _vnl_matrixPython.vnl_matrixF_get_column(self, *args)

    def get_n_rows(self, *args):
        """get_n_rows(self, unsigned int rowstart, unsigned int n) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_get_n_rows(self, *args)

    def get_n_columns(self, *args):
        """get_n_columns(self, unsigned int colstart, unsigned int n) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_get_n_columns(self, *args)

    def set_identity(self):
        """set_identity(self)"""
        return _vnl_matrixPython.vnl_matrixF_set_identity(self)

    def inplace_transpose(self):
        """inplace_transpose(self)"""
        return _vnl_matrixPython.vnl_matrixF_inplace_transpose(self)

    def flipud(self):
        """flipud(self)"""
        return _vnl_matrixPython.vnl_matrixF_flipud(self)

    def fliplr(self):
        """fliplr(self)"""
        return _vnl_matrixPython.vnl_matrixF_fliplr(self)

    def normalize_rows(self):
        """normalize_rows(self)"""
        return _vnl_matrixPython.vnl_matrixF_normalize_rows(self)

    def normalize_columns(self):
        """normalize_columns(self)"""
        return _vnl_matrixPython.vnl_matrixF_normalize_columns(self)

    def scale_row(self, *args):
        """scale_row(self, unsigned int row, float value)"""
        return _vnl_matrixPython.vnl_matrixF_scale_row(self, *args)

    def scale_column(self, *args):
        """scale_column(self, unsigned int col, float value)"""
        return _vnl_matrixPython.vnl_matrixF_scale_column(self, *args)

    def swap(self, *args):
        """swap(self, vnl_matrixF that)"""
        return _vnl_matrixPython.vnl_matrixF_swap(self, *args)

    def array_one_norm(self):
        """array_one_norm(self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_array_one_norm(self)

    def array_two_norm(self):
        """array_two_norm(self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_array_two_norm(self)

    def array_inf_norm(self):
        """array_inf_norm(self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_array_inf_norm(self)

    def absolute_value_sum(self):
        """absolute_value_sum(self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_absolute_value_sum(self)

    def absolute_value_max(self):
        """absolute_value_max(self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_absolute_value_max(self)

    def operator_one_norm(self):
        """operator_one_norm(self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_operator_one_norm(self)

    def operator_inf_norm(self):
        """operator_inf_norm(self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_operator_inf_norm(self)

    def frobenius_norm(self):
        """frobenius_norm(self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_frobenius_norm(self)

    def fro_norm(self):
        """fro_norm(self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_fro_norm(self)

    def rms(self):
        """rms(self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_rms(self)

    def min_value(self):
        """min_value(self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_min_value(self)

    def max_value(self):
        """max_value(self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_max_value(self)

    def mean(self):
        """mean(self) -> float"""
        return _vnl_matrixPython.vnl_matrixF_mean(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixF_empty(self)

    def is_identity(self, *args):
        """
        is_identity(self) -> bool
        is_identity(self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixF_is_identity(self, *args)

    def is_zero(self, *args):
        """
        is_zero(self) -> bool
        is_zero(self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixF_is_zero(self, *args)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixF_is_finite(self)

    def has_nans(self):
        """has_nans(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixF_has_nans(self)

    def assert_size(self, *args):
        """assert_size(self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrixF_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_matrixPython.vnl_matrixF_assert_finite(self)

    def read(*args):
        """read(istream s) -> vnl_matrixF"""
        return _vnl_matrixPython.vnl_matrixF_read(*args)

    read = staticmethod(read)
    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrixF_read_ascii(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> float
        data_block(self) -> float
        """
        return _vnl_matrixPython.vnl_matrixF_data_block(self, *args)

    def data_array(self, *args):
        """
        data_array(self) -> float
        data_array(self) -> float
        """
        return _vnl_matrixPython.vnl_matrixF_data_array(self, *args)

    def begin(self, *args):
        """
        begin(self) -> float
        begin(self) -> float
        """
        return _vnl_matrixPython.vnl_matrixF_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> float
        end(self) -> float
        """
        return _vnl_matrixPython.vnl_matrixF_end(self, *args)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_matrixF rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrixF_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_matrixF that) -> bool"""
        return _vnl_matrixPython.vnl_matrixF___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_matrixF that) -> bool"""
        return _vnl_matrixPython.vnl_matrixF___ne__(self, *args)

    def _print(self, *args):
        """_print(self, ostream os)"""
        return _vnl_matrixPython.vnl_matrixF__print(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_matrixPython.vnl_matrixF_clear(self)

    def set_size(self, *args):
        """set_size(self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrixF_set_size(self, *args)

vnl_matrixF.rows = new_instancemethod(_vnl_matrixPython.vnl_matrixF_rows,None,vnl_matrixF)
vnl_matrixF.columns = new_instancemethod(_vnl_matrixPython.vnl_matrixF_columns,None,vnl_matrixF)
vnl_matrixF.cols = new_instancemethod(_vnl_matrixPython.vnl_matrixF_cols,None,vnl_matrixF)
vnl_matrixF.size = new_instancemethod(_vnl_matrixPython.vnl_matrixF_size,None,vnl_matrixF)
vnl_matrixF.put = new_instancemethod(_vnl_matrixPython.vnl_matrixF_put,None,vnl_matrixF)
vnl_matrixF.get = new_instancemethod(_vnl_matrixPython.vnl_matrixF_get,None,vnl_matrixF)
vnl_matrixF.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrixF___call__,None,vnl_matrixF)
vnl_matrixF.fill = new_instancemethod(_vnl_matrixPython.vnl_matrixF_fill,None,vnl_matrixF)
vnl_matrixF.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixF_fill_diagonal,None,vnl_matrixF)
vnl_matrixF.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrixF_copy_in,None,vnl_matrixF)
vnl_matrixF.set = new_instancemethod(_vnl_matrixPython.vnl_matrixF_set,None,vnl_matrixF)
vnl_matrixF.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrixF_copy_out,None,vnl_matrixF)
vnl_matrixF.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrixF___idiv__,None,vnl_matrixF)
vnl_matrixF.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrixF___iadd__,None,vnl_matrixF)
vnl_matrixF.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixF___isub__,None,vnl_matrixF)
vnl_matrixF.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixF___imul__,None,vnl_matrixF)
vnl_matrixF.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrixF___neg__,None,vnl_matrixF)
vnl_matrixF.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrixF___div__,None,vnl_matrixF)
vnl_matrixF.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrixF___add__,None,vnl_matrixF)
vnl_matrixF.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixF___sub__,None,vnl_matrixF)
vnl_matrixF.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixF___mul__,None,vnl_matrixF)
vnl_matrixF.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixF_transpose,None,vnl_matrixF)
vnl_matrixF.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixF_conjugate_transpose,None,vnl_matrixF)
vnl_matrixF.update = new_instancemethod(_vnl_matrixPython.vnl_matrixF_update,None,vnl_matrixF)
vnl_matrixF.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrixF_set_column,None,vnl_matrixF)
vnl_matrixF.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixF_set_columns,None,vnl_matrixF)
vnl_matrixF.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrixF_set_row,None,vnl_matrixF)
vnl_matrixF.extract = new_instancemethod(_vnl_matrixPython.vnl_matrixF_extract,None,vnl_matrixF)
vnl_matrixF.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrixF_get_row,None,vnl_matrixF)
vnl_matrixF.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrixF_get_column,None,vnl_matrixF)
vnl_matrixF.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixF_get_n_rows,None,vnl_matrixF)
vnl_matrixF.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixF_get_n_columns,None,vnl_matrixF)
vnl_matrixF.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixF_set_identity,None,vnl_matrixF)
vnl_matrixF.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixF_inplace_transpose,None,vnl_matrixF)
vnl_matrixF.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrixF_flipud,None,vnl_matrixF)
vnl_matrixF.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrixF_fliplr,None,vnl_matrixF)
vnl_matrixF.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixF_normalize_rows,None,vnl_matrixF)
vnl_matrixF.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixF_normalize_columns,None,vnl_matrixF)
vnl_matrixF.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrixF_scale_row,None,vnl_matrixF)
vnl_matrixF.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrixF_scale_column,None,vnl_matrixF)
vnl_matrixF.swap = new_instancemethod(_vnl_matrixPython.vnl_matrixF_swap,None,vnl_matrixF)
vnl_matrixF.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixF_array_one_norm,None,vnl_matrixF)
vnl_matrixF.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixF_array_two_norm,None,vnl_matrixF)
vnl_matrixF.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixF_array_inf_norm,None,vnl_matrixF)
vnl_matrixF.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrixF_absolute_value_sum,None,vnl_matrixF)
vnl_matrixF.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrixF_absolute_value_max,None,vnl_matrixF)
vnl_matrixF.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixF_operator_one_norm,None,vnl_matrixF)
vnl_matrixF.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixF_operator_inf_norm,None,vnl_matrixF)
vnl_matrixF.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixF_frobenius_norm,None,vnl_matrixF)
vnl_matrixF.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixF_fro_norm,None,vnl_matrixF)
vnl_matrixF.rms = new_instancemethod(_vnl_matrixPython.vnl_matrixF_rms,None,vnl_matrixF)
vnl_matrixF.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrixF_min_value,None,vnl_matrixF)
vnl_matrixF.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrixF_max_value,None,vnl_matrixF)
vnl_matrixF.mean = new_instancemethod(_vnl_matrixPython.vnl_matrixF_mean,None,vnl_matrixF)
vnl_matrixF.empty = new_instancemethod(_vnl_matrixPython.vnl_matrixF_empty,None,vnl_matrixF)
vnl_matrixF.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixF_is_identity,None,vnl_matrixF)
vnl_matrixF.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrixF_is_zero,None,vnl_matrixF)
vnl_matrixF.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixF_is_finite,None,vnl_matrixF)
vnl_matrixF.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrixF_has_nans,None,vnl_matrixF)
vnl_matrixF.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrixF_assert_size,None,vnl_matrixF)
vnl_matrixF.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixF_assert_finite,None,vnl_matrixF)
vnl_matrixF.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrixF_read_ascii,None,vnl_matrixF)
vnl_matrixF.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrixF_data_block,None,vnl_matrixF)
vnl_matrixF.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrixF_data_array,None,vnl_matrixF)
vnl_matrixF.begin = new_instancemethod(_vnl_matrixPython.vnl_matrixF_begin,None,vnl_matrixF)
vnl_matrixF.end = new_instancemethod(_vnl_matrixPython.vnl_matrixF_end,None,vnl_matrixF)
vnl_matrixF.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrixF_operator_eq,None,vnl_matrixF)
vnl_matrixF.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrixF___eq__,None,vnl_matrixF)
vnl_matrixF.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrixF___ne__,None,vnl_matrixF)
vnl_matrixF._print = new_instancemethod(_vnl_matrixPython.vnl_matrixF__print,None,vnl_matrixF)
vnl_matrixF.clear = new_instancemethod(_vnl_matrixPython.vnl_matrixF_clear,None,vnl_matrixF)
vnl_matrixF.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrixF_set_size,None,vnl_matrixF)
vnl_matrixF_swigregister = _vnl_matrixPython.vnl_matrixF_swigregister
vnl_matrixF_swigregister(vnl_matrixF)

def vnl_matrixF_read(*args):
  """vnl_matrixF_read(istream s) -> vnl_matrixF"""
  return _vnl_matrixPython.vnl_matrixF_read(*args)

class vnl_matrixLD(object):
    """Proxy of C++ vnl_matrixLD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_matrixLD
        __init__(self, unsigned int r, unsigned int c) -> vnl_matrixLD
        __init__(self, unsigned int r, unsigned int c, long double v0) -> vnl_matrixLD
        __init__(self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrixLD
        __init__(self, unsigned int r, unsigned int c, unsigned int n, long double values) -> vnl_matrixLD
        __init__(self, long double data_block, unsigned int r, unsigned int c) -> vnl_matrixLD
        __init__(self, vnl_matrixLD arg0) -> vnl_matrixLD
        __init__(self, vnl_matrixLD arg0, vnl_matrixLD arg1, vnl_tag_add arg2) -> vnl_matrixLD
        __init__(self, vnl_matrixLD arg0, vnl_matrixLD arg1, vnl_tag_sub arg2) -> vnl_matrixLD
        __init__(self, vnl_matrixLD arg0, long double arg1, vnl_tag_mul arg2) -> vnl_matrixLD
        __init__(self, vnl_matrixLD arg0, long double arg1, vnl_tag_div arg2) -> vnl_matrixLD
        __init__(self, vnl_matrixLD arg0, long double arg1, vnl_tag_add arg2) -> vnl_matrixLD
        __init__(self, vnl_matrixLD arg0, long double arg1, vnl_tag_sub arg2) -> vnl_matrixLD
        __init__(self, vnl_matrixLD arg0, vnl_matrixLD arg1, vnl_tag_mul arg2) -> vnl_matrixLD
        __init__(self, vnl_matrixLD that, vnl_tag_grab arg1) -> vnl_matrixLD
        """
        _vnl_matrixPython.vnl_matrixLD_swiginit(self,_vnl_matrixPython.new_vnl_matrixLD(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrixLD
    def rows(self):
        """rows(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixLD_rows(self)

    def columns(self):
        """columns(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixLD_columns(self)

    def cols(self):
        """cols(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixLD_cols(self)

    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixLD_size(self)

    def put(self, *args):
        """put(self, unsigned int row, unsigned int column, long double value)"""
        return _vnl_matrixPython.vnl_matrixLD_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int row, unsigned int column) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_get(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int r, unsigned int c) -> long double
        __call__(self, unsigned int r, unsigned int c) -> long double
        """
        return _vnl_matrixPython.vnl_matrixLD___call__(self, *args)

    def fill(self, *args):
        """fill(self, long double arg0)"""
        return _vnl_matrixPython.vnl_matrixLD_fill(self, *args)

    def fill_diagonal(self, *args):
        """fill_diagonal(self, long double arg0)"""
        return _vnl_matrixPython.vnl_matrixLD_fill_diagonal(self, *args)

    def copy_in(self, *args):
        """copy_in(self, long double arg0)"""
        return _vnl_matrixPython.vnl_matrixLD_copy_in(self, *args)

    def set(self, *args):
        """set(self, long double d)"""
        return _vnl_matrixPython.vnl_matrixLD_set(self, *args)

    def copy_out(self, *args):
        """copy_out(self, long double arg0)"""
        return _vnl_matrixPython.vnl_matrixLD_copy_out(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, long double value) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, long double value) -> vnl_matrixLD
        __iadd__(self, vnl_matrixLD arg0) -> vnl_matrixLD
        """
        return _vnl_matrixPython.vnl_matrixLD___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, long double value) -> vnl_matrixLD
        __isub__(self, vnl_matrixLD arg0) -> vnl_matrixLD
        """
        return _vnl_matrixPython.vnl_matrixLD___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, long double value) -> vnl_matrixLD
        __imul__(self, vnl_matrixLD rhs) -> vnl_matrixLD
        """
        return _vnl_matrixPython.vnl_matrixLD___imul__(self, *args)

    def __neg__(self):
        """__neg__(self) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD___neg__(self)

    def __div__(self, *args):
        """__div__(self, long double v) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, long double v) -> vnl_matrixLD
        __add__(self, vnl_matrixLD rhs) -> vnl_matrixLD
        """
        return _vnl_matrixPython.vnl_matrixLD___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, long double v) -> vnl_matrixLD
        __sub__(self, vnl_matrixLD rhs) -> vnl_matrixLD
        """
        return _vnl_matrixPython.vnl_matrixLD___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, long double v) -> vnl_matrixLD
        __mul__(self, vnl_matrixLD rhs) -> vnl_matrixLD
        """
        return _vnl_matrixPython.vnl_matrixLD___mul__(self, *args)

    def transpose(self):
        """transpose(self) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_transpose(self)

    def conjugate_transpose(self):
        """conjugate_transpose(self) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_conjugate_transpose(self)

    def update(self, *args):
        """
        update(self, vnl_matrixLD arg0, unsigned int top = 0, unsigned int left = 0) -> vnl_matrixLD
        update(self, vnl_matrixLD arg0, unsigned int top = 0) -> vnl_matrixLD
        update(self, vnl_matrixLD arg0) -> vnl_matrixLD
        """
        return _vnl_matrixPython.vnl_matrixLD_update(self, *args)

    def set_column(self, *args):
        """
        set_column(self, unsigned int i, long double v)
        set_column(self, unsigned int i, long double value)
        set_column(self, unsigned int j, vnl_vectorLD v)
        """
        return _vnl_matrixPython.vnl_matrixLD_set_column(self, *args)

    def set_columns(self, *args):
        """set_columns(self, unsigned int starting_column, vnl_matrixLD M)"""
        return _vnl_matrixPython.vnl_matrixLD_set_columns(self, *args)

    def set_row(self, *args):
        """
        set_row(self, unsigned int i, long double v)
        set_row(self, unsigned int i, long double value)
        set_row(self, unsigned int i, vnl_vectorLD arg1)
        """
        return _vnl_matrixPython.vnl_matrixLD_set_row(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int r, unsigned int c, unsigned int top = 0, 
            unsigned int left = 0) -> vnl_matrixLD
        extract(self, unsigned int r, unsigned int c, unsigned int top = 0) -> vnl_matrixLD
        extract(self, unsigned int r, unsigned int c) -> vnl_matrixLD
        """
        return _vnl_matrixPython.vnl_matrixLD_extract(self, *args)

    def get_row(self, *args):
        """get_row(self, unsigned int r) -> vnl_vectorLD"""
        return _vnl_matrixPython.vnl_matrixLD_get_row(self, *args)

    def get_column(self, *args):
        """get_column(self, unsigned int c) -> vnl_vectorLD"""
        return _vnl_matrixPython.vnl_matrixLD_get_column(self, *args)

    def get_n_rows(self, *args):
        """get_n_rows(self, unsigned int rowstart, unsigned int n) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_get_n_rows(self, *args)

    def get_n_columns(self, *args):
        """get_n_columns(self, unsigned int colstart, unsigned int n) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_get_n_columns(self, *args)

    def set_identity(self):
        """set_identity(self)"""
        return _vnl_matrixPython.vnl_matrixLD_set_identity(self)

    def inplace_transpose(self):
        """inplace_transpose(self)"""
        return _vnl_matrixPython.vnl_matrixLD_inplace_transpose(self)

    def flipud(self):
        """flipud(self)"""
        return _vnl_matrixPython.vnl_matrixLD_flipud(self)

    def fliplr(self):
        """fliplr(self)"""
        return _vnl_matrixPython.vnl_matrixLD_fliplr(self)

    def normalize_rows(self):
        """normalize_rows(self)"""
        return _vnl_matrixPython.vnl_matrixLD_normalize_rows(self)

    def normalize_columns(self):
        """normalize_columns(self)"""
        return _vnl_matrixPython.vnl_matrixLD_normalize_columns(self)

    def scale_row(self, *args):
        """scale_row(self, unsigned int row, long double value)"""
        return _vnl_matrixPython.vnl_matrixLD_scale_row(self, *args)

    def scale_column(self, *args):
        """scale_column(self, unsigned int col, long double value)"""
        return _vnl_matrixPython.vnl_matrixLD_scale_column(self, *args)

    def swap(self, *args):
        """swap(self, vnl_matrixLD that)"""
        return _vnl_matrixPython.vnl_matrixLD_swap(self, *args)

    def array_one_norm(self):
        """array_one_norm(self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_array_one_norm(self)

    def array_two_norm(self):
        """array_two_norm(self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_array_two_norm(self)

    def array_inf_norm(self):
        """array_inf_norm(self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_array_inf_norm(self)

    def absolute_value_sum(self):
        """absolute_value_sum(self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_absolute_value_sum(self)

    def absolute_value_max(self):
        """absolute_value_max(self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_absolute_value_max(self)

    def operator_one_norm(self):
        """operator_one_norm(self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_operator_one_norm(self)

    def operator_inf_norm(self):
        """operator_inf_norm(self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_operator_inf_norm(self)

    def frobenius_norm(self):
        """frobenius_norm(self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_frobenius_norm(self)

    def fro_norm(self):
        """fro_norm(self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_fro_norm(self)

    def rms(self):
        """rms(self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_rms(self)

    def min_value(self):
        """min_value(self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_min_value(self)

    def max_value(self):
        """max_value(self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_max_value(self)

    def mean(self):
        """mean(self) -> long double"""
        return _vnl_matrixPython.vnl_matrixLD_mean(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixLD_empty(self)

    def is_identity(self, *args):
        """
        is_identity(self) -> bool
        is_identity(self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixLD_is_identity(self, *args)

    def is_zero(self, *args):
        """
        is_zero(self) -> bool
        is_zero(self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixLD_is_zero(self, *args)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixLD_is_finite(self)

    def has_nans(self):
        """has_nans(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixLD_has_nans(self)

    def assert_size(self, *args):
        """assert_size(self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrixLD_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_matrixPython.vnl_matrixLD_assert_finite(self)

    def read(*args):
        """read(istream s) -> vnl_matrixLD"""
        return _vnl_matrixPython.vnl_matrixLD_read(*args)

    read = staticmethod(read)
    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrixLD_read_ascii(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> long double
        data_block(self) -> long double
        """
        return _vnl_matrixPython.vnl_matrixLD_data_block(self, *args)

    def data_array(self, *args):
        """
        data_array(self) -> long double
        data_array(self) -> long double
        """
        return _vnl_matrixPython.vnl_matrixLD_data_array(self, *args)

    def begin(self, *args):
        """
        begin(self) -> long double
        begin(self) -> long double
        """
        return _vnl_matrixPython.vnl_matrixLD_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> long double
        end(self) -> long double
        """
        return _vnl_matrixPython.vnl_matrixLD_end(self, *args)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_matrixLD rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrixLD_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_matrixLD that) -> bool"""
        return _vnl_matrixPython.vnl_matrixLD___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_matrixLD that) -> bool"""
        return _vnl_matrixPython.vnl_matrixLD___ne__(self, *args)

    def _print(self, *args):
        """_print(self, ostream os)"""
        return _vnl_matrixPython.vnl_matrixLD__print(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_matrixPython.vnl_matrixLD_clear(self)

    def set_size(self, *args):
        """set_size(self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrixLD_set_size(self, *args)

vnl_matrixLD.rows = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_rows,None,vnl_matrixLD)
vnl_matrixLD.columns = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_columns,None,vnl_matrixLD)
vnl_matrixLD.cols = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_cols,None,vnl_matrixLD)
vnl_matrixLD.size = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_size,None,vnl_matrixLD)
vnl_matrixLD.put = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_put,None,vnl_matrixLD)
vnl_matrixLD.get = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_get,None,vnl_matrixLD)
vnl_matrixLD.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrixLD___call__,None,vnl_matrixLD)
vnl_matrixLD.fill = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_fill,None,vnl_matrixLD)
vnl_matrixLD.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_fill_diagonal,None,vnl_matrixLD)
vnl_matrixLD.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_copy_in,None,vnl_matrixLD)
vnl_matrixLD.set = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_set,None,vnl_matrixLD)
vnl_matrixLD.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_copy_out,None,vnl_matrixLD)
vnl_matrixLD.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrixLD___idiv__,None,vnl_matrixLD)
vnl_matrixLD.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrixLD___iadd__,None,vnl_matrixLD)
vnl_matrixLD.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixLD___isub__,None,vnl_matrixLD)
vnl_matrixLD.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixLD___imul__,None,vnl_matrixLD)
vnl_matrixLD.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrixLD___neg__,None,vnl_matrixLD)
vnl_matrixLD.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrixLD___div__,None,vnl_matrixLD)
vnl_matrixLD.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrixLD___add__,None,vnl_matrixLD)
vnl_matrixLD.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixLD___sub__,None,vnl_matrixLD)
vnl_matrixLD.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixLD___mul__,None,vnl_matrixLD)
vnl_matrixLD.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_transpose,None,vnl_matrixLD)
vnl_matrixLD.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_conjugate_transpose,None,vnl_matrixLD)
vnl_matrixLD.update = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_update,None,vnl_matrixLD)
vnl_matrixLD.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_set_column,None,vnl_matrixLD)
vnl_matrixLD.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_set_columns,None,vnl_matrixLD)
vnl_matrixLD.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_set_row,None,vnl_matrixLD)
vnl_matrixLD.extract = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_extract,None,vnl_matrixLD)
vnl_matrixLD.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_get_row,None,vnl_matrixLD)
vnl_matrixLD.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_get_column,None,vnl_matrixLD)
vnl_matrixLD.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_get_n_rows,None,vnl_matrixLD)
vnl_matrixLD.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_get_n_columns,None,vnl_matrixLD)
vnl_matrixLD.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_set_identity,None,vnl_matrixLD)
vnl_matrixLD.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_inplace_transpose,None,vnl_matrixLD)
vnl_matrixLD.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_flipud,None,vnl_matrixLD)
vnl_matrixLD.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_fliplr,None,vnl_matrixLD)
vnl_matrixLD.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_normalize_rows,None,vnl_matrixLD)
vnl_matrixLD.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_normalize_columns,None,vnl_matrixLD)
vnl_matrixLD.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_scale_row,None,vnl_matrixLD)
vnl_matrixLD.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_scale_column,None,vnl_matrixLD)
vnl_matrixLD.swap = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_swap,None,vnl_matrixLD)
vnl_matrixLD.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_array_one_norm,None,vnl_matrixLD)
vnl_matrixLD.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_array_two_norm,None,vnl_matrixLD)
vnl_matrixLD.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_array_inf_norm,None,vnl_matrixLD)
vnl_matrixLD.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_absolute_value_sum,None,vnl_matrixLD)
vnl_matrixLD.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_absolute_value_max,None,vnl_matrixLD)
vnl_matrixLD.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_operator_one_norm,None,vnl_matrixLD)
vnl_matrixLD.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_operator_inf_norm,None,vnl_matrixLD)
vnl_matrixLD.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_frobenius_norm,None,vnl_matrixLD)
vnl_matrixLD.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_fro_norm,None,vnl_matrixLD)
vnl_matrixLD.rms = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_rms,None,vnl_matrixLD)
vnl_matrixLD.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_min_value,None,vnl_matrixLD)
vnl_matrixLD.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_max_value,None,vnl_matrixLD)
vnl_matrixLD.mean = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_mean,None,vnl_matrixLD)
vnl_matrixLD.empty = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_empty,None,vnl_matrixLD)
vnl_matrixLD.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_is_identity,None,vnl_matrixLD)
vnl_matrixLD.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_is_zero,None,vnl_matrixLD)
vnl_matrixLD.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_is_finite,None,vnl_matrixLD)
vnl_matrixLD.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_has_nans,None,vnl_matrixLD)
vnl_matrixLD.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_assert_size,None,vnl_matrixLD)
vnl_matrixLD.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_assert_finite,None,vnl_matrixLD)
vnl_matrixLD.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_read_ascii,None,vnl_matrixLD)
vnl_matrixLD.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_data_block,None,vnl_matrixLD)
vnl_matrixLD.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_data_array,None,vnl_matrixLD)
vnl_matrixLD.begin = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_begin,None,vnl_matrixLD)
vnl_matrixLD.end = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_end,None,vnl_matrixLD)
vnl_matrixLD.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_operator_eq,None,vnl_matrixLD)
vnl_matrixLD.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrixLD___eq__,None,vnl_matrixLD)
vnl_matrixLD.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrixLD___ne__,None,vnl_matrixLD)
vnl_matrixLD._print = new_instancemethod(_vnl_matrixPython.vnl_matrixLD__print,None,vnl_matrixLD)
vnl_matrixLD.clear = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_clear,None,vnl_matrixLD)
vnl_matrixLD.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrixLD_set_size,None,vnl_matrixLD)
vnl_matrixLD_swigregister = _vnl_matrixPython.vnl_matrixLD_swigregister
vnl_matrixLD_swigregister(vnl_matrixLD)

def vnl_matrixLD_read(*args):
  """vnl_matrixLD_read(istream s) -> vnl_matrixLD"""
  return _vnl_matrixPython.vnl_matrixLD_read(*args)

class vnl_matrixSC(object):
    """Proxy of C++ vnl_matrixSC class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_matrixSC
        __init__(self, unsigned int r, unsigned int c) -> vnl_matrixSC
        __init__(self, unsigned int r, unsigned int c, signed char v0) -> vnl_matrixSC
        __init__(self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrixSC
        __init__(self, unsigned int r, unsigned int c, unsigned int n, signed char values) -> vnl_matrixSC
        __init__(self, signed char data_block, unsigned int r, unsigned int c) -> vnl_matrixSC
        __init__(self, vnl_matrixSC arg0) -> vnl_matrixSC
        __init__(self, vnl_matrixSC arg0, vnl_matrixSC arg1, vnl_tag_add arg2) -> vnl_matrixSC
        __init__(self, vnl_matrixSC arg0, vnl_matrixSC arg1, vnl_tag_sub arg2) -> vnl_matrixSC
        __init__(self, vnl_matrixSC arg0, signed char arg1, vnl_tag_mul arg2) -> vnl_matrixSC
        __init__(self, vnl_matrixSC arg0, signed char arg1, vnl_tag_div arg2) -> vnl_matrixSC
        __init__(self, vnl_matrixSC arg0, signed char arg1, vnl_tag_add arg2) -> vnl_matrixSC
        __init__(self, vnl_matrixSC arg0, signed char arg1, vnl_tag_sub arg2) -> vnl_matrixSC
        __init__(self, vnl_matrixSC arg0, vnl_matrixSC arg1, vnl_tag_mul arg2) -> vnl_matrixSC
        __init__(self, vnl_matrixSC that, vnl_tag_grab arg1) -> vnl_matrixSC
        """
        _vnl_matrixPython.vnl_matrixSC_swiginit(self,_vnl_matrixPython.new_vnl_matrixSC(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrixSC
    def rows(self):
        """rows(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSC_rows(self)

    def columns(self):
        """columns(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSC_columns(self)

    def cols(self):
        """cols(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSC_cols(self)

    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSC_size(self)

    def put(self, *args):
        """put(self, unsigned int row, unsigned int column, signed char value)"""
        return _vnl_matrixPython.vnl_matrixSC_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int row, unsigned int column) -> signed char"""
        return _vnl_matrixPython.vnl_matrixSC_get(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int r, unsigned int c) -> signed char
        __call__(self, unsigned int r, unsigned int c) -> signed char
        """
        return _vnl_matrixPython.vnl_matrixSC___call__(self, *args)

    def fill(self, *args):
        """fill(self, signed char arg0)"""
        return _vnl_matrixPython.vnl_matrixSC_fill(self, *args)

    def fill_diagonal(self, *args):
        """fill_diagonal(self, signed char arg0)"""
        return _vnl_matrixPython.vnl_matrixSC_fill_diagonal(self, *args)

    def copy_in(self, *args):
        """copy_in(self, signed char arg0)"""
        return _vnl_matrixPython.vnl_matrixSC_copy_in(self, *args)

    def set(self, *args):
        """set(self, signed char d)"""
        return _vnl_matrixPython.vnl_matrixSC_set(self, *args)

    def copy_out(self, *args):
        """copy_out(self, signed char arg0)"""
        return _vnl_matrixPython.vnl_matrixSC_copy_out(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, signed char value) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, signed char value) -> vnl_matrixSC
        __iadd__(self, vnl_matrixSC arg0) -> vnl_matrixSC
        """
        return _vnl_matrixPython.vnl_matrixSC___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, signed char value) -> vnl_matrixSC
        __isub__(self, vnl_matrixSC arg0) -> vnl_matrixSC
        """
        return _vnl_matrixPython.vnl_matrixSC___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, signed char value) -> vnl_matrixSC
        __imul__(self, vnl_matrixSC rhs) -> vnl_matrixSC
        """
        return _vnl_matrixPython.vnl_matrixSC___imul__(self, *args)

    def __neg__(self):
        """__neg__(self) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC___neg__(self)

    def __div__(self, *args):
        """__div__(self, signed char v) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, signed char v) -> vnl_matrixSC
        __add__(self, vnl_matrixSC rhs) -> vnl_matrixSC
        """
        return _vnl_matrixPython.vnl_matrixSC___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, signed char v) -> vnl_matrixSC
        __sub__(self, vnl_matrixSC rhs) -> vnl_matrixSC
        """
        return _vnl_matrixPython.vnl_matrixSC___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, signed char v) -> vnl_matrixSC
        __mul__(self, vnl_matrixSC rhs) -> vnl_matrixSC
        """
        return _vnl_matrixPython.vnl_matrixSC___mul__(self, *args)

    def transpose(self):
        """transpose(self) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_transpose(self)

    def conjugate_transpose(self):
        """conjugate_transpose(self) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_conjugate_transpose(self)

    def update(self, *args):
        """
        update(self, vnl_matrixSC arg0, unsigned int top = 0, unsigned int left = 0) -> vnl_matrixSC
        update(self, vnl_matrixSC arg0, unsigned int top = 0) -> vnl_matrixSC
        update(self, vnl_matrixSC arg0) -> vnl_matrixSC
        """
        return _vnl_matrixPython.vnl_matrixSC_update(self, *args)

    def set_column(self, *args):
        """
        set_column(self, unsigned int i, signed char v)
        set_column(self, unsigned int i, signed char value)
        set_column(self, unsigned int j, vnl_vectorSC v)
        """
        return _vnl_matrixPython.vnl_matrixSC_set_column(self, *args)

    def set_columns(self, *args):
        """set_columns(self, unsigned int starting_column, vnl_matrixSC M)"""
        return _vnl_matrixPython.vnl_matrixSC_set_columns(self, *args)

    def set_row(self, *args):
        """
        set_row(self, unsigned int i, signed char v)
        set_row(self, unsigned int i, signed char value)
        set_row(self, unsigned int i, vnl_vectorSC arg1)
        """
        return _vnl_matrixPython.vnl_matrixSC_set_row(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int r, unsigned int c, unsigned int top = 0, 
            unsigned int left = 0) -> vnl_matrixSC
        extract(self, unsigned int r, unsigned int c, unsigned int top = 0) -> vnl_matrixSC
        extract(self, unsigned int r, unsigned int c) -> vnl_matrixSC
        """
        return _vnl_matrixPython.vnl_matrixSC_extract(self, *args)

    def get_row(self, *args):
        """get_row(self, unsigned int r) -> vnl_vectorSC"""
        return _vnl_matrixPython.vnl_matrixSC_get_row(self, *args)

    def get_column(self, *args):
        """get_column(self, unsigned int c) -> vnl_vectorSC"""
        return _vnl_matrixPython.vnl_matrixSC_get_column(self, *args)

    def get_n_rows(self, *args):
        """get_n_rows(self, unsigned int rowstart, unsigned int n) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_get_n_rows(self, *args)

    def get_n_columns(self, *args):
        """get_n_columns(self, unsigned int colstart, unsigned int n) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_get_n_columns(self, *args)

    def set_identity(self):
        """set_identity(self)"""
        return _vnl_matrixPython.vnl_matrixSC_set_identity(self)

    def inplace_transpose(self):
        """inplace_transpose(self)"""
        return _vnl_matrixPython.vnl_matrixSC_inplace_transpose(self)

    def flipud(self):
        """flipud(self)"""
        return _vnl_matrixPython.vnl_matrixSC_flipud(self)

    def fliplr(self):
        """fliplr(self)"""
        return _vnl_matrixPython.vnl_matrixSC_fliplr(self)

    def normalize_rows(self):
        """normalize_rows(self)"""
        return _vnl_matrixPython.vnl_matrixSC_normalize_rows(self)

    def normalize_columns(self):
        """normalize_columns(self)"""
        return _vnl_matrixPython.vnl_matrixSC_normalize_columns(self)

    def scale_row(self, *args):
        """scale_row(self, unsigned int row, signed char value)"""
        return _vnl_matrixPython.vnl_matrixSC_scale_row(self, *args)

    def scale_column(self, *args):
        """scale_column(self, unsigned int col, signed char value)"""
        return _vnl_matrixPython.vnl_matrixSC_scale_column(self, *args)

    def swap(self, *args):
        """swap(self, vnl_matrixSC that)"""
        return _vnl_matrixPython.vnl_matrixSC_swap(self, *args)

    def array_one_norm(self):
        """array_one_norm(self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixSC_array_one_norm(self)

    def array_two_norm(self):
        """array_two_norm(self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixSC_array_two_norm(self)

    def array_inf_norm(self):
        """array_inf_norm(self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixSC_array_inf_norm(self)

    def absolute_value_sum(self):
        """absolute_value_sum(self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixSC_absolute_value_sum(self)

    def absolute_value_max(self):
        """absolute_value_max(self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixSC_absolute_value_max(self)

    def operator_one_norm(self):
        """operator_one_norm(self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixSC_operator_one_norm(self)

    def operator_inf_norm(self):
        """operator_inf_norm(self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixSC_operator_inf_norm(self)

    def frobenius_norm(self):
        """frobenius_norm(self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixSC_frobenius_norm(self)

    def fro_norm(self):
        """fro_norm(self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixSC_fro_norm(self)

    def rms(self):
        """rms(self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixSC_rms(self)

    def min_value(self):
        """min_value(self) -> signed char"""
        return _vnl_matrixPython.vnl_matrixSC_min_value(self)

    def max_value(self):
        """max_value(self) -> signed char"""
        return _vnl_matrixPython.vnl_matrixSC_max_value(self)

    def mean(self):
        """mean(self) -> signed char"""
        return _vnl_matrixPython.vnl_matrixSC_mean(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixSC_empty(self)

    def is_identity(self, *args):
        """
        is_identity(self) -> bool
        is_identity(self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixSC_is_identity(self, *args)

    def is_zero(self, *args):
        """
        is_zero(self) -> bool
        is_zero(self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixSC_is_zero(self, *args)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixSC_is_finite(self)

    def has_nans(self):
        """has_nans(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixSC_has_nans(self)

    def assert_size(self, *args):
        """assert_size(self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrixSC_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_matrixPython.vnl_matrixSC_assert_finite(self)

    def read(*args):
        """read(istream s) -> vnl_matrixSC"""
        return _vnl_matrixPython.vnl_matrixSC_read(*args)

    read = staticmethod(read)
    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrixSC_read_ascii(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> signed char
        data_block(self) -> signed char
        """
        return _vnl_matrixPython.vnl_matrixSC_data_block(self, *args)

    def data_array(self, *args):
        """
        data_array(self) -> signed char
        data_array(self) -> signed char
        """
        return _vnl_matrixPython.vnl_matrixSC_data_array(self, *args)

    def begin(self, *args):
        """
        begin(self) -> signed char
        begin(self) -> signed char
        """
        return _vnl_matrixPython.vnl_matrixSC_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> signed char
        end(self) -> signed char
        """
        return _vnl_matrixPython.vnl_matrixSC_end(self, *args)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_matrixSC rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrixSC_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_matrixSC that) -> bool"""
        return _vnl_matrixPython.vnl_matrixSC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_matrixSC that) -> bool"""
        return _vnl_matrixPython.vnl_matrixSC___ne__(self, *args)

    def _print(self, *args):
        """_print(self, ostream os)"""
        return _vnl_matrixPython.vnl_matrixSC__print(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_matrixPython.vnl_matrixSC_clear(self)

    def set_size(self, *args):
        """set_size(self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrixSC_set_size(self, *args)

vnl_matrixSC.rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_rows,None,vnl_matrixSC)
vnl_matrixSC.columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_columns,None,vnl_matrixSC)
vnl_matrixSC.cols = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_cols,None,vnl_matrixSC)
vnl_matrixSC.size = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_size,None,vnl_matrixSC)
vnl_matrixSC.put = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_put,None,vnl_matrixSC)
vnl_matrixSC.get = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_get,None,vnl_matrixSC)
vnl_matrixSC.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSC___call__,None,vnl_matrixSC)
vnl_matrixSC.fill = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_fill,None,vnl_matrixSC)
vnl_matrixSC.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_fill_diagonal,None,vnl_matrixSC)
vnl_matrixSC.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_copy_in,None,vnl_matrixSC)
vnl_matrixSC.set = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_set,None,vnl_matrixSC)
vnl_matrixSC.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_copy_out,None,vnl_matrixSC)
vnl_matrixSC.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSC___idiv__,None,vnl_matrixSC)
vnl_matrixSC.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSC___iadd__,None,vnl_matrixSC)
vnl_matrixSC.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSC___isub__,None,vnl_matrixSC)
vnl_matrixSC.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSC___imul__,None,vnl_matrixSC)
vnl_matrixSC.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSC___neg__,None,vnl_matrixSC)
vnl_matrixSC.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSC___div__,None,vnl_matrixSC)
vnl_matrixSC.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSC___add__,None,vnl_matrixSC)
vnl_matrixSC.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSC___sub__,None,vnl_matrixSC)
vnl_matrixSC.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSC___mul__,None,vnl_matrixSC)
vnl_matrixSC.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_transpose,None,vnl_matrixSC)
vnl_matrixSC.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_conjugate_transpose,None,vnl_matrixSC)
vnl_matrixSC.update = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_update,None,vnl_matrixSC)
vnl_matrixSC.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_set_column,None,vnl_matrixSC)
vnl_matrixSC.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_set_columns,None,vnl_matrixSC)
vnl_matrixSC.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_set_row,None,vnl_matrixSC)
vnl_matrixSC.extract = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_extract,None,vnl_matrixSC)
vnl_matrixSC.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_get_row,None,vnl_matrixSC)
vnl_matrixSC.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_get_column,None,vnl_matrixSC)
vnl_matrixSC.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_get_n_rows,None,vnl_matrixSC)
vnl_matrixSC.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_get_n_columns,None,vnl_matrixSC)
vnl_matrixSC.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_set_identity,None,vnl_matrixSC)
vnl_matrixSC.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_inplace_transpose,None,vnl_matrixSC)
vnl_matrixSC.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_flipud,None,vnl_matrixSC)
vnl_matrixSC.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_fliplr,None,vnl_matrixSC)
vnl_matrixSC.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_normalize_rows,None,vnl_matrixSC)
vnl_matrixSC.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_normalize_columns,None,vnl_matrixSC)
vnl_matrixSC.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_scale_row,None,vnl_matrixSC)
vnl_matrixSC.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_scale_column,None,vnl_matrixSC)
vnl_matrixSC.swap = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_swap,None,vnl_matrixSC)
vnl_matrixSC.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_array_one_norm,None,vnl_matrixSC)
vnl_matrixSC.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_array_two_norm,None,vnl_matrixSC)
vnl_matrixSC.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_array_inf_norm,None,vnl_matrixSC)
vnl_matrixSC.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_absolute_value_sum,None,vnl_matrixSC)
vnl_matrixSC.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_absolute_value_max,None,vnl_matrixSC)
vnl_matrixSC.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_operator_one_norm,None,vnl_matrixSC)
vnl_matrixSC.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_operator_inf_norm,None,vnl_matrixSC)
vnl_matrixSC.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_frobenius_norm,None,vnl_matrixSC)
vnl_matrixSC.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_fro_norm,None,vnl_matrixSC)
vnl_matrixSC.rms = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_rms,None,vnl_matrixSC)
vnl_matrixSC.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_min_value,None,vnl_matrixSC)
vnl_matrixSC.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_max_value,None,vnl_matrixSC)
vnl_matrixSC.mean = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_mean,None,vnl_matrixSC)
vnl_matrixSC.empty = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_empty,None,vnl_matrixSC)
vnl_matrixSC.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_is_identity,None,vnl_matrixSC)
vnl_matrixSC.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_is_zero,None,vnl_matrixSC)
vnl_matrixSC.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_is_finite,None,vnl_matrixSC)
vnl_matrixSC.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_has_nans,None,vnl_matrixSC)
vnl_matrixSC.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_assert_size,None,vnl_matrixSC)
vnl_matrixSC.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_assert_finite,None,vnl_matrixSC)
vnl_matrixSC.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_read_ascii,None,vnl_matrixSC)
vnl_matrixSC.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_data_block,None,vnl_matrixSC)
vnl_matrixSC.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_data_array,None,vnl_matrixSC)
vnl_matrixSC.begin = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_begin,None,vnl_matrixSC)
vnl_matrixSC.end = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_end,None,vnl_matrixSC)
vnl_matrixSC.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_operator_eq,None,vnl_matrixSC)
vnl_matrixSC.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSC___eq__,None,vnl_matrixSC)
vnl_matrixSC.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSC___ne__,None,vnl_matrixSC)
vnl_matrixSC._print = new_instancemethod(_vnl_matrixPython.vnl_matrixSC__print,None,vnl_matrixSC)
vnl_matrixSC.clear = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_clear,None,vnl_matrixSC)
vnl_matrixSC.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrixSC_set_size,None,vnl_matrixSC)
vnl_matrixSC_swigregister = _vnl_matrixPython.vnl_matrixSC_swigregister
vnl_matrixSC_swigregister(vnl_matrixSC)

def vnl_matrixSC_read(*args):
  """vnl_matrixSC_read(istream s) -> vnl_matrixSC"""
  return _vnl_matrixPython.vnl_matrixSC_read(*args)

class vnl_matrixSI(object):
    """Proxy of C++ vnl_matrixSI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_matrixSI
        __init__(self, unsigned int r, unsigned int c) -> vnl_matrixSI
        __init__(self, unsigned int r, unsigned int c, int v0) -> vnl_matrixSI
        __init__(self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrixSI
        __init__(self, unsigned int r, unsigned int c, unsigned int n, int values) -> vnl_matrixSI
        __init__(self, int data_block, unsigned int r, unsigned int c) -> vnl_matrixSI
        __init__(self, vnl_matrixSI arg0) -> vnl_matrixSI
        __init__(self, vnl_matrixSI arg0, vnl_matrixSI arg1, vnl_tag_add arg2) -> vnl_matrixSI
        __init__(self, vnl_matrixSI arg0, vnl_matrixSI arg1, vnl_tag_sub arg2) -> vnl_matrixSI
        __init__(self, vnl_matrixSI arg0, int arg1, vnl_tag_mul arg2) -> vnl_matrixSI
        __init__(self, vnl_matrixSI arg0, int arg1, vnl_tag_div arg2) -> vnl_matrixSI
        __init__(self, vnl_matrixSI arg0, int arg1, vnl_tag_add arg2) -> vnl_matrixSI
        __init__(self, vnl_matrixSI arg0, int arg1, vnl_tag_sub arg2) -> vnl_matrixSI
        __init__(self, vnl_matrixSI arg0, vnl_matrixSI arg1, vnl_tag_mul arg2) -> vnl_matrixSI
        __init__(self, vnl_matrixSI that, vnl_tag_grab arg1) -> vnl_matrixSI
        """
        _vnl_matrixPython.vnl_matrixSI_swiginit(self,_vnl_matrixPython.new_vnl_matrixSI(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrixSI
    def rows(self):
        """rows(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_rows(self)

    def columns(self):
        """columns(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_columns(self)

    def cols(self):
        """cols(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_cols(self)

    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_size(self)

    def put(self, *args):
        """put(self, unsigned int row, unsigned int column, int value)"""
        return _vnl_matrixPython.vnl_matrixSI_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int row, unsigned int column) -> int"""
        return _vnl_matrixPython.vnl_matrixSI_get(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int r, unsigned int c) -> int
        __call__(self, unsigned int r, unsigned int c) -> int
        """
        return _vnl_matrixPython.vnl_matrixSI___call__(self, *args)

    def fill(self, *args):
        """fill(self, int arg0)"""
        return _vnl_matrixPython.vnl_matrixSI_fill(self, *args)

    def fill_diagonal(self, *args):
        """fill_diagonal(self, int arg0)"""
        return _vnl_matrixPython.vnl_matrixSI_fill_diagonal(self, *args)

    def copy_in(self, *args):
        """copy_in(self, int arg0)"""
        return _vnl_matrixPython.vnl_matrixSI_copy_in(self, *args)

    def set(self, *args):
        """set(self, int d)"""
        return _vnl_matrixPython.vnl_matrixSI_set(self, *args)

    def copy_out(self, *args):
        """copy_out(self, int arg0)"""
        return _vnl_matrixPython.vnl_matrixSI_copy_out(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, int value) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, int value) -> vnl_matrixSI
        __iadd__(self, vnl_matrixSI arg0) -> vnl_matrixSI
        """
        return _vnl_matrixPython.vnl_matrixSI___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, int value) -> vnl_matrixSI
        __isub__(self, vnl_matrixSI arg0) -> vnl_matrixSI
        """
        return _vnl_matrixPython.vnl_matrixSI___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, int value) -> vnl_matrixSI
        __imul__(self, vnl_matrixSI rhs) -> vnl_matrixSI
        """
        return _vnl_matrixPython.vnl_matrixSI___imul__(self, *args)

    def __neg__(self):
        """__neg__(self) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI___neg__(self)

    def __div__(self, *args):
        """__div__(self, int v) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, int v) -> vnl_matrixSI
        __add__(self, vnl_matrixSI rhs) -> vnl_matrixSI
        """
        return _vnl_matrixPython.vnl_matrixSI___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, int v) -> vnl_matrixSI
        __sub__(self, vnl_matrixSI rhs) -> vnl_matrixSI
        """
        return _vnl_matrixPython.vnl_matrixSI___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, int v) -> vnl_matrixSI
        __mul__(self, vnl_matrixSI rhs) -> vnl_matrixSI
        """
        return _vnl_matrixPython.vnl_matrixSI___mul__(self, *args)

    def transpose(self):
        """transpose(self) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_transpose(self)

    def conjugate_transpose(self):
        """conjugate_transpose(self) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_conjugate_transpose(self)

    def update(self, *args):
        """
        update(self, vnl_matrixSI arg0, unsigned int top = 0, unsigned int left = 0) -> vnl_matrixSI
        update(self, vnl_matrixSI arg0, unsigned int top = 0) -> vnl_matrixSI
        update(self, vnl_matrixSI arg0) -> vnl_matrixSI
        """
        return _vnl_matrixPython.vnl_matrixSI_update(self, *args)

    def set_column(self, *args):
        """
        set_column(self, unsigned int i, int v)
        set_column(self, unsigned int i, int value)
        set_column(self, unsigned int j, vnl_vectorSI v)
        """
        return _vnl_matrixPython.vnl_matrixSI_set_column(self, *args)

    def set_columns(self, *args):
        """set_columns(self, unsigned int starting_column, vnl_matrixSI M)"""
        return _vnl_matrixPython.vnl_matrixSI_set_columns(self, *args)

    def set_row(self, *args):
        """
        set_row(self, unsigned int i, int v)
        set_row(self, unsigned int i, int value)
        set_row(self, unsigned int i, vnl_vectorSI arg1)
        """
        return _vnl_matrixPython.vnl_matrixSI_set_row(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int r, unsigned int c, unsigned int top = 0, 
            unsigned int left = 0) -> vnl_matrixSI
        extract(self, unsigned int r, unsigned int c, unsigned int top = 0) -> vnl_matrixSI
        extract(self, unsigned int r, unsigned int c) -> vnl_matrixSI
        """
        return _vnl_matrixPython.vnl_matrixSI_extract(self, *args)

    def get_row(self, *args):
        """get_row(self, unsigned int r) -> vnl_vectorSI"""
        return _vnl_matrixPython.vnl_matrixSI_get_row(self, *args)

    def get_column(self, *args):
        """get_column(self, unsigned int c) -> vnl_vectorSI"""
        return _vnl_matrixPython.vnl_matrixSI_get_column(self, *args)

    def get_n_rows(self, *args):
        """get_n_rows(self, unsigned int rowstart, unsigned int n) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_get_n_rows(self, *args)

    def get_n_columns(self, *args):
        """get_n_columns(self, unsigned int colstart, unsigned int n) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_get_n_columns(self, *args)

    def set_identity(self):
        """set_identity(self)"""
        return _vnl_matrixPython.vnl_matrixSI_set_identity(self)

    def inplace_transpose(self):
        """inplace_transpose(self)"""
        return _vnl_matrixPython.vnl_matrixSI_inplace_transpose(self)

    def flipud(self):
        """flipud(self)"""
        return _vnl_matrixPython.vnl_matrixSI_flipud(self)

    def fliplr(self):
        """fliplr(self)"""
        return _vnl_matrixPython.vnl_matrixSI_fliplr(self)

    def normalize_rows(self):
        """normalize_rows(self)"""
        return _vnl_matrixPython.vnl_matrixSI_normalize_rows(self)

    def normalize_columns(self):
        """normalize_columns(self)"""
        return _vnl_matrixPython.vnl_matrixSI_normalize_columns(self)

    def scale_row(self, *args):
        """scale_row(self, unsigned int row, int value)"""
        return _vnl_matrixPython.vnl_matrixSI_scale_row(self, *args)

    def scale_column(self, *args):
        """scale_column(self, unsigned int col, int value)"""
        return _vnl_matrixPython.vnl_matrixSI_scale_column(self, *args)

    def swap(self, *args):
        """swap(self, vnl_matrixSI that)"""
        return _vnl_matrixPython.vnl_matrixSI_swap(self, *args)

    def array_one_norm(self):
        """array_one_norm(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_array_one_norm(self)

    def array_two_norm(self):
        """array_two_norm(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_array_two_norm(self)

    def array_inf_norm(self):
        """array_inf_norm(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_array_inf_norm(self)

    def absolute_value_sum(self):
        """absolute_value_sum(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_absolute_value_sum(self)

    def absolute_value_max(self):
        """absolute_value_max(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_absolute_value_max(self)

    def operator_one_norm(self):
        """operator_one_norm(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_operator_one_norm(self)

    def operator_inf_norm(self):
        """operator_inf_norm(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_operator_inf_norm(self)

    def frobenius_norm(self):
        """frobenius_norm(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_frobenius_norm(self)

    def fro_norm(self):
        """fro_norm(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_fro_norm(self)

    def rms(self):
        """rms(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSI_rms(self)

    def min_value(self):
        """min_value(self) -> int"""
        return _vnl_matrixPython.vnl_matrixSI_min_value(self)

    def max_value(self):
        """max_value(self) -> int"""
        return _vnl_matrixPython.vnl_matrixSI_max_value(self)

    def mean(self):
        """mean(self) -> int"""
        return _vnl_matrixPython.vnl_matrixSI_mean(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixSI_empty(self)

    def is_identity(self, *args):
        """
        is_identity(self) -> bool
        is_identity(self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixSI_is_identity(self, *args)

    def is_zero(self, *args):
        """
        is_zero(self) -> bool
        is_zero(self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixSI_is_zero(self, *args)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixSI_is_finite(self)

    def has_nans(self):
        """has_nans(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixSI_has_nans(self)

    def assert_size(self, *args):
        """assert_size(self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrixSI_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_matrixPython.vnl_matrixSI_assert_finite(self)

    def read(*args):
        """read(istream s) -> vnl_matrixSI"""
        return _vnl_matrixPython.vnl_matrixSI_read(*args)

    read = staticmethod(read)
    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrixSI_read_ascii(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> int
        data_block(self) -> int
        """
        return _vnl_matrixPython.vnl_matrixSI_data_block(self, *args)

    def data_array(self, *args):
        """
        data_array(self) -> int
        data_array(self) -> int
        """
        return _vnl_matrixPython.vnl_matrixSI_data_array(self, *args)

    def begin(self, *args):
        """
        begin(self) -> int
        begin(self) -> int
        """
        return _vnl_matrixPython.vnl_matrixSI_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> int
        end(self) -> int
        """
        return _vnl_matrixPython.vnl_matrixSI_end(self, *args)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_matrixSI rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrixSI_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_matrixSI that) -> bool"""
        return _vnl_matrixPython.vnl_matrixSI___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_matrixSI that) -> bool"""
        return _vnl_matrixPython.vnl_matrixSI___ne__(self, *args)

    def _print(self, *args):
        """_print(self, ostream os)"""
        return _vnl_matrixPython.vnl_matrixSI__print(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_matrixPython.vnl_matrixSI_clear(self)

    def set_size(self, *args):
        """set_size(self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrixSI_set_size(self, *args)

vnl_matrixSI.rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_rows,None,vnl_matrixSI)
vnl_matrixSI.columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_columns,None,vnl_matrixSI)
vnl_matrixSI.cols = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_cols,None,vnl_matrixSI)
vnl_matrixSI.size = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_size,None,vnl_matrixSI)
vnl_matrixSI.put = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_put,None,vnl_matrixSI)
vnl_matrixSI.get = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_get,None,vnl_matrixSI)
vnl_matrixSI.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSI___call__,None,vnl_matrixSI)
vnl_matrixSI.fill = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_fill,None,vnl_matrixSI)
vnl_matrixSI.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_fill_diagonal,None,vnl_matrixSI)
vnl_matrixSI.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_copy_in,None,vnl_matrixSI)
vnl_matrixSI.set = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_set,None,vnl_matrixSI)
vnl_matrixSI.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_copy_out,None,vnl_matrixSI)
vnl_matrixSI.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSI___idiv__,None,vnl_matrixSI)
vnl_matrixSI.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSI___iadd__,None,vnl_matrixSI)
vnl_matrixSI.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSI___isub__,None,vnl_matrixSI)
vnl_matrixSI.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSI___imul__,None,vnl_matrixSI)
vnl_matrixSI.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSI___neg__,None,vnl_matrixSI)
vnl_matrixSI.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSI___div__,None,vnl_matrixSI)
vnl_matrixSI.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSI___add__,None,vnl_matrixSI)
vnl_matrixSI.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSI___sub__,None,vnl_matrixSI)
vnl_matrixSI.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSI___mul__,None,vnl_matrixSI)
vnl_matrixSI.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_transpose,None,vnl_matrixSI)
vnl_matrixSI.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_conjugate_transpose,None,vnl_matrixSI)
vnl_matrixSI.update = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_update,None,vnl_matrixSI)
vnl_matrixSI.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_set_column,None,vnl_matrixSI)
vnl_matrixSI.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_set_columns,None,vnl_matrixSI)
vnl_matrixSI.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_set_row,None,vnl_matrixSI)
vnl_matrixSI.extract = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_extract,None,vnl_matrixSI)
vnl_matrixSI.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_get_row,None,vnl_matrixSI)
vnl_matrixSI.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_get_column,None,vnl_matrixSI)
vnl_matrixSI.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_get_n_rows,None,vnl_matrixSI)
vnl_matrixSI.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_get_n_columns,None,vnl_matrixSI)
vnl_matrixSI.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_set_identity,None,vnl_matrixSI)
vnl_matrixSI.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_inplace_transpose,None,vnl_matrixSI)
vnl_matrixSI.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_flipud,None,vnl_matrixSI)
vnl_matrixSI.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_fliplr,None,vnl_matrixSI)
vnl_matrixSI.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_normalize_rows,None,vnl_matrixSI)
vnl_matrixSI.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_normalize_columns,None,vnl_matrixSI)
vnl_matrixSI.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_scale_row,None,vnl_matrixSI)
vnl_matrixSI.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_scale_column,None,vnl_matrixSI)
vnl_matrixSI.swap = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_swap,None,vnl_matrixSI)
vnl_matrixSI.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_array_one_norm,None,vnl_matrixSI)
vnl_matrixSI.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_array_two_norm,None,vnl_matrixSI)
vnl_matrixSI.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_array_inf_norm,None,vnl_matrixSI)
vnl_matrixSI.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_absolute_value_sum,None,vnl_matrixSI)
vnl_matrixSI.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_absolute_value_max,None,vnl_matrixSI)
vnl_matrixSI.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_operator_one_norm,None,vnl_matrixSI)
vnl_matrixSI.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_operator_inf_norm,None,vnl_matrixSI)
vnl_matrixSI.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_frobenius_norm,None,vnl_matrixSI)
vnl_matrixSI.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_fro_norm,None,vnl_matrixSI)
vnl_matrixSI.rms = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_rms,None,vnl_matrixSI)
vnl_matrixSI.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_min_value,None,vnl_matrixSI)
vnl_matrixSI.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_max_value,None,vnl_matrixSI)
vnl_matrixSI.mean = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_mean,None,vnl_matrixSI)
vnl_matrixSI.empty = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_empty,None,vnl_matrixSI)
vnl_matrixSI.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_is_identity,None,vnl_matrixSI)
vnl_matrixSI.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_is_zero,None,vnl_matrixSI)
vnl_matrixSI.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_is_finite,None,vnl_matrixSI)
vnl_matrixSI.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_has_nans,None,vnl_matrixSI)
vnl_matrixSI.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_assert_size,None,vnl_matrixSI)
vnl_matrixSI.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_assert_finite,None,vnl_matrixSI)
vnl_matrixSI.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_read_ascii,None,vnl_matrixSI)
vnl_matrixSI.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_data_block,None,vnl_matrixSI)
vnl_matrixSI.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_data_array,None,vnl_matrixSI)
vnl_matrixSI.begin = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_begin,None,vnl_matrixSI)
vnl_matrixSI.end = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_end,None,vnl_matrixSI)
vnl_matrixSI.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_operator_eq,None,vnl_matrixSI)
vnl_matrixSI.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSI___eq__,None,vnl_matrixSI)
vnl_matrixSI.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSI___ne__,None,vnl_matrixSI)
vnl_matrixSI._print = new_instancemethod(_vnl_matrixPython.vnl_matrixSI__print,None,vnl_matrixSI)
vnl_matrixSI.clear = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_clear,None,vnl_matrixSI)
vnl_matrixSI.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrixSI_set_size,None,vnl_matrixSI)
vnl_matrixSI_swigregister = _vnl_matrixPython.vnl_matrixSI_swigregister
vnl_matrixSI_swigregister(vnl_matrixSI)

def vnl_matrixSI_read(*args):
  """vnl_matrixSI_read(istream s) -> vnl_matrixSI"""
  return _vnl_matrixPython.vnl_matrixSI_read(*args)

class vnl_matrixSL(object):
    """Proxy of C++ vnl_matrixSL class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_matrixSL
        __init__(self, unsigned int r, unsigned int c) -> vnl_matrixSL
        __init__(self, unsigned int r, unsigned int c, long v0) -> vnl_matrixSL
        __init__(self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrixSL
        __init__(self, unsigned int r, unsigned int c, unsigned int n, long values) -> vnl_matrixSL
        __init__(self, long data_block, unsigned int r, unsigned int c) -> vnl_matrixSL
        __init__(self, vnl_matrixSL arg0) -> vnl_matrixSL
        __init__(self, vnl_matrixSL arg0, vnl_matrixSL arg1, vnl_tag_add arg2) -> vnl_matrixSL
        __init__(self, vnl_matrixSL arg0, vnl_matrixSL arg1, vnl_tag_sub arg2) -> vnl_matrixSL
        __init__(self, vnl_matrixSL arg0, long arg1, vnl_tag_mul arg2) -> vnl_matrixSL
        __init__(self, vnl_matrixSL arg0, long arg1, vnl_tag_div arg2) -> vnl_matrixSL
        __init__(self, vnl_matrixSL arg0, long arg1, vnl_tag_add arg2) -> vnl_matrixSL
        __init__(self, vnl_matrixSL arg0, long arg1, vnl_tag_sub arg2) -> vnl_matrixSL
        __init__(self, vnl_matrixSL arg0, vnl_matrixSL arg1, vnl_tag_mul arg2) -> vnl_matrixSL
        __init__(self, vnl_matrixSL that, vnl_tag_grab arg1) -> vnl_matrixSL
        """
        _vnl_matrixPython.vnl_matrixSL_swiginit(self,_vnl_matrixPython.new_vnl_matrixSL(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrixSL
    def rows(self):
        """rows(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSL_rows(self)

    def columns(self):
        """columns(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSL_columns(self)

    def cols(self):
        """cols(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSL_cols(self)

    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixSL_size(self)

    def put(self, *args):
        """put(self, unsigned int row, unsigned int column, long value)"""
        return _vnl_matrixPython.vnl_matrixSL_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int row, unsigned int column) -> long"""
        return _vnl_matrixPython.vnl_matrixSL_get(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int r, unsigned int c) -> long
        __call__(self, unsigned int r, unsigned int c) -> long
        """
        return _vnl_matrixPython.vnl_matrixSL___call__(self, *args)

    def fill(self, *args):
        """fill(self, long arg0)"""
        return _vnl_matrixPython.vnl_matrixSL_fill(self, *args)

    def fill_diagonal(self, *args):
        """fill_diagonal(self, long arg0)"""
        return _vnl_matrixPython.vnl_matrixSL_fill_diagonal(self, *args)

    def copy_in(self, *args):
        """copy_in(self, long arg0)"""
        return _vnl_matrixPython.vnl_matrixSL_copy_in(self, *args)

    def set(self, *args):
        """set(self, long d)"""
        return _vnl_matrixPython.vnl_matrixSL_set(self, *args)

    def copy_out(self, *args):
        """copy_out(self, long arg0)"""
        return _vnl_matrixPython.vnl_matrixSL_copy_out(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, long value) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, long value) -> vnl_matrixSL
        __iadd__(self, vnl_matrixSL arg0) -> vnl_matrixSL
        """
        return _vnl_matrixPython.vnl_matrixSL___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, long value) -> vnl_matrixSL
        __isub__(self, vnl_matrixSL arg0) -> vnl_matrixSL
        """
        return _vnl_matrixPython.vnl_matrixSL___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, long value) -> vnl_matrixSL
        __imul__(self, vnl_matrixSL rhs) -> vnl_matrixSL
        """
        return _vnl_matrixPython.vnl_matrixSL___imul__(self, *args)

    def __neg__(self):
        """__neg__(self) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL___neg__(self)

    def __div__(self, *args):
        """__div__(self, long v) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, long v) -> vnl_matrixSL
        __add__(self, vnl_matrixSL rhs) -> vnl_matrixSL
        """
        return _vnl_matrixPython.vnl_matrixSL___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, long v) -> vnl_matrixSL
        __sub__(self, vnl_matrixSL rhs) -> vnl_matrixSL
        """
        return _vnl_matrixPython.vnl_matrixSL___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, long v) -> vnl_matrixSL
        __mul__(self, vnl_matrixSL rhs) -> vnl_matrixSL
        """
        return _vnl_matrixPython.vnl_matrixSL___mul__(self, *args)

    def transpose(self):
        """transpose(self) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_transpose(self)

    def conjugate_transpose(self):
        """conjugate_transpose(self) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_conjugate_transpose(self)

    def update(self, *args):
        """
        update(self, vnl_matrixSL arg0, unsigned int top = 0, unsigned int left = 0) -> vnl_matrixSL
        update(self, vnl_matrixSL arg0, unsigned int top = 0) -> vnl_matrixSL
        update(self, vnl_matrixSL arg0) -> vnl_matrixSL
        """
        return _vnl_matrixPython.vnl_matrixSL_update(self, *args)

    def set_column(self, *args):
        """
        set_column(self, unsigned int i, long v)
        set_column(self, unsigned int i, long value)
        set_column(self, unsigned int j, vnl_vectorSL v)
        """
        return _vnl_matrixPython.vnl_matrixSL_set_column(self, *args)

    def set_columns(self, *args):
        """set_columns(self, unsigned int starting_column, vnl_matrixSL M)"""
        return _vnl_matrixPython.vnl_matrixSL_set_columns(self, *args)

    def set_row(self, *args):
        """
        set_row(self, unsigned int i, long v)
        set_row(self, unsigned int i, long value)
        set_row(self, unsigned int i, vnl_vectorSL arg1)
        """
        return _vnl_matrixPython.vnl_matrixSL_set_row(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int r, unsigned int c, unsigned int top = 0, 
            unsigned int left = 0) -> vnl_matrixSL
        extract(self, unsigned int r, unsigned int c, unsigned int top = 0) -> vnl_matrixSL
        extract(self, unsigned int r, unsigned int c) -> vnl_matrixSL
        """
        return _vnl_matrixPython.vnl_matrixSL_extract(self, *args)

    def get_row(self, *args):
        """get_row(self, unsigned int r) -> vnl_vectorSL"""
        return _vnl_matrixPython.vnl_matrixSL_get_row(self, *args)

    def get_column(self, *args):
        """get_column(self, unsigned int c) -> vnl_vectorSL"""
        return _vnl_matrixPython.vnl_matrixSL_get_column(self, *args)

    def get_n_rows(self, *args):
        """get_n_rows(self, unsigned int rowstart, unsigned int n) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_get_n_rows(self, *args)

    def get_n_columns(self, *args):
        """get_n_columns(self, unsigned int colstart, unsigned int n) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_get_n_columns(self, *args)

    def set_identity(self):
        """set_identity(self)"""
        return _vnl_matrixPython.vnl_matrixSL_set_identity(self)

    def inplace_transpose(self):
        """inplace_transpose(self)"""
        return _vnl_matrixPython.vnl_matrixSL_inplace_transpose(self)

    def flipud(self):
        """flipud(self)"""
        return _vnl_matrixPython.vnl_matrixSL_flipud(self)

    def fliplr(self):
        """fliplr(self)"""
        return _vnl_matrixPython.vnl_matrixSL_fliplr(self)

    def normalize_rows(self):
        """normalize_rows(self)"""
        return _vnl_matrixPython.vnl_matrixSL_normalize_rows(self)

    def normalize_columns(self):
        """normalize_columns(self)"""
        return _vnl_matrixPython.vnl_matrixSL_normalize_columns(self)

    def scale_row(self, *args):
        """scale_row(self, unsigned int row, long value)"""
        return _vnl_matrixPython.vnl_matrixSL_scale_row(self, *args)

    def scale_column(self, *args):
        """scale_column(self, unsigned int col, long value)"""
        return _vnl_matrixPython.vnl_matrixSL_scale_column(self, *args)

    def swap(self, *args):
        """swap(self, vnl_matrixSL that)"""
        return _vnl_matrixPython.vnl_matrixSL_swap(self, *args)

    def array_one_norm(self):
        """array_one_norm(self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixSL_array_one_norm(self)

    def array_two_norm(self):
        """array_two_norm(self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixSL_array_two_norm(self)

    def array_inf_norm(self):
        """array_inf_norm(self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixSL_array_inf_norm(self)

    def absolute_value_sum(self):
        """absolute_value_sum(self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixSL_absolute_value_sum(self)

    def absolute_value_max(self):
        """absolute_value_max(self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixSL_absolute_value_max(self)

    def operator_one_norm(self):
        """operator_one_norm(self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixSL_operator_one_norm(self)

    def operator_inf_norm(self):
        """operator_inf_norm(self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixSL_operator_inf_norm(self)

    def frobenius_norm(self):
        """frobenius_norm(self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixSL_frobenius_norm(self)

    def fro_norm(self):
        """fro_norm(self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixSL_fro_norm(self)

    def rms(self):
        """rms(self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixSL_rms(self)

    def min_value(self):
        """min_value(self) -> long"""
        return _vnl_matrixPython.vnl_matrixSL_min_value(self)

    def max_value(self):
        """max_value(self) -> long"""
        return _vnl_matrixPython.vnl_matrixSL_max_value(self)

    def mean(self):
        """mean(self) -> long"""
        return _vnl_matrixPython.vnl_matrixSL_mean(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixSL_empty(self)

    def is_identity(self, *args):
        """
        is_identity(self) -> bool
        is_identity(self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixSL_is_identity(self, *args)

    def is_zero(self, *args):
        """
        is_zero(self) -> bool
        is_zero(self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixSL_is_zero(self, *args)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixSL_is_finite(self)

    def has_nans(self):
        """has_nans(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixSL_has_nans(self)

    def assert_size(self, *args):
        """assert_size(self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrixSL_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_matrixPython.vnl_matrixSL_assert_finite(self)

    def read(*args):
        """read(istream s) -> vnl_matrixSL"""
        return _vnl_matrixPython.vnl_matrixSL_read(*args)

    read = staticmethod(read)
    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrixSL_read_ascii(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> long
        data_block(self) -> long
        """
        return _vnl_matrixPython.vnl_matrixSL_data_block(self, *args)

    def data_array(self, *args):
        """
        data_array(self) -> long
        data_array(self) -> long
        """
        return _vnl_matrixPython.vnl_matrixSL_data_array(self, *args)

    def begin(self, *args):
        """
        begin(self) -> long
        begin(self) -> long
        """
        return _vnl_matrixPython.vnl_matrixSL_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> long
        end(self) -> long
        """
        return _vnl_matrixPython.vnl_matrixSL_end(self, *args)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_matrixSL rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrixSL_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_matrixSL that) -> bool"""
        return _vnl_matrixPython.vnl_matrixSL___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_matrixSL that) -> bool"""
        return _vnl_matrixPython.vnl_matrixSL___ne__(self, *args)

    def _print(self, *args):
        """_print(self, ostream os)"""
        return _vnl_matrixPython.vnl_matrixSL__print(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_matrixPython.vnl_matrixSL_clear(self)

    def set_size(self, *args):
        """set_size(self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrixSL_set_size(self, *args)

vnl_matrixSL.rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_rows,None,vnl_matrixSL)
vnl_matrixSL.columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_columns,None,vnl_matrixSL)
vnl_matrixSL.cols = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_cols,None,vnl_matrixSL)
vnl_matrixSL.size = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_size,None,vnl_matrixSL)
vnl_matrixSL.put = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_put,None,vnl_matrixSL)
vnl_matrixSL.get = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_get,None,vnl_matrixSL)
vnl_matrixSL.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSL___call__,None,vnl_matrixSL)
vnl_matrixSL.fill = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_fill,None,vnl_matrixSL)
vnl_matrixSL.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_fill_diagonal,None,vnl_matrixSL)
vnl_matrixSL.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_copy_in,None,vnl_matrixSL)
vnl_matrixSL.set = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_set,None,vnl_matrixSL)
vnl_matrixSL.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_copy_out,None,vnl_matrixSL)
vnl_matrixSL.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSL___idiv__,None,vnl_matrixSL)
vnl_matrixSL.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSL___iadd__,None,vnl_matrixSL)
vnl_matrixSL.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSL___isub__,None,vnl_matrixSL)
vnl_matrixSL.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSL___imul__,None,vnl_matrixSL)
vnl_matrixSL.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSL___neg__,None,vnl_matrixSL)
vnl_matrixSL.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSL___div__,None,vnl_matrixSL)
vnl_matrixSL.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSL___add__,None,vnl_matrixSL)
vnl_matrixSL.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSL___sub__,None,vnl_matrixSL)
vnl_matrixSL.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSL___mul__,None,vnl_matrixSL)
vnl_matrixSL.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_transpose,None,vnl_matrixSL)
vnl_matrixSL.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_conjugate_transpose,None,vnl_matrixSL)
vnl_matrixSL.update = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_update,None,vnl_matrixSL)
vnl_matrixSL.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_set_column,None,vnl_matrixSL)
vnl_matrixSL.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_set_columns,None,vnl_matrixSL)
vnl_matrixSL.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_set_row,None,vnl_matrixSL)
vnl_matrixSL.extract = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_extract,None,vnl_matrixSL)
vnl_matrixSL.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_get_row,None,vnl_matrixSL)
vnl_matrixSL.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_get_column,None,vnl_matrixSL)
vnl_matrixSL.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_get_n_rows,None,vnl_matrixSL)
vnl_matrixSL.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_get_n_columns,None,vnl_matrixSL)
vnl_matrixSL.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_set_identity,None,vnl_matrixSL)
vnl_matrixSL.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_inplace_transpose,None,vnl_matrixSL)
vnl_matrixSL.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_flipud,None,vnl_matrixSL)
vnl_matrixSL.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_fliplr,None,vnl_matrixSL)
vnl_matrixSL.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_normalize_rows,None,vnl_matrixSL)
vnl_matrixSL.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_normalize_columns,None,vnl_matrixSL)
vnl_matrixSL.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_scale_row,None,vnl_matrixSL)
vnl_matrixSL.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_scale_column,None,vnl_matrixSL)
vnl_matrixSL.swap = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_swap,None,vnl_matrixSL)
vnl_matrixSL.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_array_one_norm,None,vnl_matrixSL)
vnl_matrixSL.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_array_two_norm,None,vnl_matrixSL)
vnl_matrixSL.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_array_inf_norm,None,vnl_matrixSL)
vnl_matrixSL.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_absolute_value_sum,None,vnl_matrixSL)
vnl_matrixSL.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_absolute_value_max,None,vnl_matrixSL)
vnl_matrixSL.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_operator_one_norm,None,vnl_matrixSL)
vnl_matrixSL.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_operator_inf_norm,None,vnl_matrixSL)
vnl_matrixSL.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_frobenius_norm,None,vnl_matrixSL)
vnl_matrixSL.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_fro_norm,None,vnl_matrixSL)
vnl_matrixSL.rms = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_rms,None,vnl_matrixSL)
vnl_matrixSL.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_min_value,None,vnl_matrixSL)
vnl_matrixSL.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_max_value,None,vnl_matrixSL)
vnl_matrixSL.mean = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_mean,None,vnl_matrixSL)
vnl_matrixSL.empty = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_empty,None,vnl_matrixSL)
vnl_matrixSL.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_is_identity,None,vnl_matrixSL)
vnl_matrixSL.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_is_zero,None,vnl_matrixSL)
vnl_matrixSL.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_is_finite,None,vnl_matrixSL)
vnl_matrixSL.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_has_nans,None,vnl_matrixSL)
vnl_matrixSL.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_assert_size,None,vnl_matrixSL)
vnl_matrixSL.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_assert_finite,None,vnl_matrixSL)
vnl_matrixSL.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_read_ascii,None,vnl_matrixSL)
vnl_matrixSL.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_data_block,None,vnl_matrixSL)
vnl_matrixSL.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_data_array,None,vnl_matrixSL)
vnl_matrixSL.begin = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_begin,None,vnl_matrixSL)
vnl_matrixSL.end = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_end,None,vnl_matrixSL)
vnl_matrixSL.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_operator_eq,None,vnl_matrixSL)
vnl_matrixSL.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSL___eq__,None,vnl_matrixSL)
vnl_matrixSL.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrixSL___ne__,None,vnl_matrixSL)
vnl_matrixSL._print = new_instancemethod(_vnl_matrixPython.vnl_matrixSL__print,None,vnl_matrixSL)
vnl_matrixSL.clear = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_clear,None,vnl_matrixSL)
vnl_matrixSL.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrixSL_set_size,None,vnl_matrixSL)
vnl_matrixSL_swigregister = _vnl_matrixPython.vnl_matrixSL_swigregister
vnl_matrixSL_swigregister(vnl_matrixSL)

def vnl_matrixSL_read(*args):
  """vnl_matrixSL_read(istream s) -> vnl_matrixSL"""
  return _vnl_matrixPython.vnl_matrixSL_read(*args)

class vnl_matrixUC(object):
    """Proxy of C++ vnl_matrixUC class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_matrixUC
        __init__(self, unsigned int r, unsigned int c) -> vnl_matrixUC
        __init__(self, unsigned int r, unsigned int c, unsigned char v0) -> vnl_matrixUC
        __init__(self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrixUC
        __init__(self, unsigned int r, unsigned int c, unsigned int n, unsigned char values) -> vnl_matrixUC
        __init__(self, unsigned char data_block, unsigned int r, unsigned int c) -> vnl_matrixUC
        __init__(self, vnl_matrixUC arg0) -> vnl_matrixUC
        __init__(self, vnl_matrixUC arg0, vnl_matrixUC arg1, vnl_tag_add arg2) -> vnl_matrixUC
        __init__(self, vnl_matrixUC arg0, vnl_matrixUC arg1, vnl_tag_sub arg2) -> vnl_matrixUC
        __init__(self, vnl_matrixUC arg0, unsigned char arg1, vnl_tag_mul arg2) -> vnl_matrixUC
        __init__(self, vnl_matrixUC arg0, unsigned char arg1, vnl_tag_div arg2) -> vnl_matrixUC
        __init__(self, vnl_matrixUC arg0, unsigned char arg1, vnl_tag_add arg2) -> vnl_matrixUC
        __init__(self, vnl_matrixUC arg0, unsigned char arg1, vnl_tag_sub arg2) -> vnl_matrixUC
        __init__(self, vnl_matrixUC arg0, vnl_matrixUC arg1, vnl_tag_mul arg2) -> vnl_matrixUC
        __init__(self, vnl_matrixUC that, vnl_tag_grab arg1) -> vnl_matrixUC
        """
        _vnl_matrixPython.vnl_matrixUC_swiginit(self,_vnl_matrixPython.new_vnl_matrixUC(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrixUC
    def rows(self):
        """rows(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUC_rows(self)

    def columns(self):
        """columns(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUC_columns(self)

    def cols(self):
        """cols(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUC_cols(self)

    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUC_size(self)

    def put(self, *args):
        """put(self, unsigned int row, unsigned int column, unsigned char value)"""
        return _vnl_matrixPython.vnl_matrixUC_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int row, unsigned int column) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_get(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int r, unsigned int c) -> unsigned char
        __call__(self, unsigned int r, unsigned int c) -> unsigned char
        """
        return _vnl_matrixPython.vnl_matrixUC___call__(self, *args)

    def fill(self, *args):
        """fill(self, unsigned char arg0)"""
        return _vnl_matrixPython.vnl_matrixUC_fill(self, *args)

    def fill_diagonal(self, *args):
        """fill_diagonal(self, unsigned char arg0)"""
        return _vnl_matrixPython.vnl_matrixUC_fill_diagonal(self, *args)

    def copy_in(self, *args):
        """copy_in(self, unsigned char arg0)"""
        return _vnl_matrixPython.vnl_matrixUC_copy_in(self, *args)

    def set(self, *args):
        """set(self, unsigned char d)"""
        return _vnl_matrixPython.vnl_matrixUC_set(self, *args)

    def copy_out(self, *args):
        """copy_out(self, unsigned char arg0)"""
        return _vnl_matrixPython.vnl_matrixUC_copy_out(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, unsigned char value) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, unsigned char value) -> vnl_matrixUC
        __iadd__(self, vnl_matrixUC arg0) -> vnl_matrixUC
        """
        return _vnl_matrixPython.vnl_matrixUC___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, unsigned char value) -> vnl_matrixUC
        __isub__(self, vnl_matrixUC arg0) -> vnl_matrixUC
        """
        return _vnl_matrixPython.vnl_matrixUC___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, unsigned char value) -> vnl_matrixUC
        __imul__(self, vnl_matrixUC rhs) -> vnl_matrixUC
        """
        return _vnl_matrixPython.vnl_matrixUC___imul__(self, *args)

    def __neg__(self):
        """__neg__(self) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC___neg__(self)

    def __div__(self, *args):
        """__div__(self, unsigned char v) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, unsigned char v) -> vnl_matrixUC
        __add__(self, vnl_matrixUC rhs) -> vnl_matrixUC
        """
        return _vnl_matrixPython.vnl_matrixUC___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, unsigned char v) -> vnl_matrixUC
        __sub__(self, vnl_matrixUC rhs) -> vnl_matrixUC
        """
        return _vnl_matrixPython.vnl_matrixUC___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, unsigned char v) -> vnl_matrixUC
        __mul__(self, vnl_matrixUC rhs) -> vnl_matrixUC
        """
        return _vnl_matrixPython.vnl_matrixUC___mul__(self, *args)

    def transpose(self):
        """transpose(self) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_transpose(self)

    def conjugate_transpose(self):
        """conjugate_transpose(self) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_conjugate_transpose(self)

    def update(self, *args):
        """
        update(self, vnl_matrixUC arg0, unsigned int top = 0, unsigned int left = 0) -> vnl_matrixUC
        update(self, vnl_matrixUC arg0, unsigned int top = 0) -> vnl_matrixUC
        update(self, vnl_matrixUC arg0) -> vnl_matrixUC
        """
        return _vnl_matrixPython.vnl_matrixUC_update(self, *args)

    def set_column(self, *args):
        """
        set_column(self, unsigned int i, unsigned char v)
        set_column(self, unsigned int i, unsigned char value)
        set_column(self, unsigned int j, vnl_vectorUC v)
        """
        return _vnl_matrixPython.vnl_matrixUC_set_column(self, *args)

    def set_columns(self, *args):
        """set_columns(self, unsigned int starting_column, vnl_matrixUC M)"""
        return _vnl_matrixPython.vnl_matrixUC_set_columns(self, *args)

    def set_row(self, *args):
        """
        set_row(self, unsigned int i, unsigned char v)
        set_row(self, unsigned int i, unsigned char value)
        set_row(self, unsigned int i, vnl_vectorUC arg1)
        """
        return _vnl_matrixPython.vnl_matrixUC_set_row(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int r, unsigned int c, unsigned int top = 0, 
            unsigned int left = 0) -> vnl_matrixUC
        extract(self, unsigned int r, unsigned int c, unsigned int top = 0) -> vnl_matrixUC
        extract(self, unsigned int r, unsigned int c) -> vnl_matrixUC
        """
        return _vnl_matrixPython.vnl_matrixUC_extract(self, *args)

    def get_row(self, *args):
        """get_row(self, unsigned int r) -> vnl_vectorUC"""
        return _vnl_matrixPython.vnl_matrixUC_get_row(self, *args)

    def get_column(self, *args):
        """get_column(self, unsigned int c) -> vnl_vectorUC"""
        return _vnl_matrixPython.vnl_matrixUC_get_column(self, *args)

    def get_n_rows(self, *args):
        """get_n_rows(self, unsigned int rowstart, unsigned int n) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_get_n_rows(self, *args)

    def get_n_columns(self, *args):
        """get_n_columns(self, unsigned int colstart, unsigned int n) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_get_n_columns(self, *args)

    def set_identity(self):
        """set_identity(self)"""
        return _vnl_matrixPython.vnl_matrixUC_set_identity(self)

    def inplace_transpose(self):
        """inplace_transpose(self)"""
        return _vnl_matrixPython.vnl_matrixUC_inplace_transpose(self)

    def flipud(self):
        """flipud(self)"""
        return _vnl_matrixPython.vnl_matrixUC_flipud(self)

    def fliplr(self):
        """fliplr(self)"""
        return _vnl_matrixPython.vnl_matrixUC_fliplr(self)

    def normalize_rows(self):
        """normalize_rows(self)"""
        return _vnl_matrixPython.vnl_matrixUC_normalize_rows(self)

    def normalize_columns(self):
        """normalize_columns(self)"""
        return _vnl_matrixPython.vnl_matrixUC_normalize_columns(self)

    def scale_row(self, *args):
        """scale_row(self, unsigned int row, unsigned char value)"""
        return _vnl_matrixPython.vnl_matrixUC_scale_row(self, *args)

    def scale_column(self, *args):
        """scale_column(self, unsigned int col, unsigned char value)"""
        return _vnl_matrixPython.vnl_matrixUC_scale_column(self, *args)

    def swap(self, *args):
        """swap(self, vnl_matrixUC that)"""
        return _vnl_matrixPython.vnl_matrixUC_swap(self, *args)

    def array_one_norm(self):
        """array_one_norm(self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_array_one_norm(self)

    def array_two_norm(self):
        """array_two_norm(self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_array_two_norm(self)

    def array_inf_norm(self):
        """array_inf_norm(self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_array_inf_norm(self)

    def absolute_value_sum(self):
        """absolute_value_sum(self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_absolute_value_sum(self)

    def absolute_value_max(self):
        """absolute_value_max(self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_absolute_value_max(self)

    def operator_one_norm(self):
        """operator_one_norm(self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_operator_one_norm(self)

    def operator_inf_norm(self):
        """operator_inf_norm(self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_operator_inf_norm(self)

    def frobenius_norm(self):
        """frobenius_norm(self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_frobenius_norm(self)

    def fro_norm(self):
        """fro_norm(self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_fro_norm(self)

    def rms(self):
        """rms(self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_rms(self)

    def min_value(self):
        """min_value(self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_min_value(self)

    def max_value(self):
        """max_value(self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_max_value(self)

    def mean(self):
        """mean(self) -> unsigned char"""
        return _vnl_matrixPython.vnl_matrixUC_mean(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixUC_empty(self)

    def is_identity(self, *args):
        """
        is_identity(self) -> bool
        is_identity(self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixUC_is_identity(self, *args)

    def is_zero(self, *args):
        """
        is_zero(self) -> bool
        is_zero(self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixUC_is_zero(self, *args)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixUC_is_finite(self)

    def has_nans(self):
        """has_nans(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixUC_has_nans(self)

    def assert_size(self, *args):
        """assert_size(self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrixUC_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_matrixPython.vnl_matrixUC_assert_finite(self)

    def read(*args):
        """read(istream s) -> vnl_matrixUC"""
        return _vnl_matrixPython.vnl_matrixUC_read(*args)

    read = staticmethod(read)
    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrixUC_read_ascii(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> unsigned char
        data_block(self) -> unsigned char
        """
        return _vnl_matrixPython.vnl_matrixUC_data_block(self, *args)

    def data_array(self, *args):
        """
        data_array(self) -> unsigned char
        data_array(self) -> unsigned char
        """
        return _vnl_matrixPython.vnl_matrixUC_data_array(self, *args)

    def begin(self, *args):
        """
        begin(self) -> unsigned char
        begin(self) -> unsigned char
        """
        return _vnl_matrixPython.vnl_matrixUC_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> unsigned char
        end(self) -> unsigned char
        """
        return _vnl_matrixPython.vnl_matrixUC_end(self, *args)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_matrixUC rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrixUC_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_matrixUC that) -> bool"""
        return _vnl_matrixPython.vnl_matrixUC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_matrixUC that) -> bool"""
        return _vnl_matrixPython.vnl_matrixUC___ne__(self, *args)

    def _print(self, *args):
        """_print(self, ostream os)"""
        return _vnl_matrixPython.vnl_matrixUC__print(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_matrixPython.vnl_matrixUC_clear(self)

    def set_size(self, *args):
        """set_size(self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrixUC_set_size(self, *args)

vnl_matrixUC.rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_rows,None,vnl_matrixUC)
vnl_matrixUC.columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_columns,None,vnl_matrixUC)
vnl_matrixUC.cols = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_cols,None,vnl_matrixUC)
vnl_matrixUC.size = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_size,None,vnl_matrixUC)
vnl_matrixUC.put = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_put,None,vnl_matrixUC)
vnl_matrixUC.get = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_get,None,vnl_matrixUC)
vnl_matrixUC.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUC___call__,None,vnl_matrixUC)
vnl_matrixUC.fill = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_fill,None,vnl_matrixUC)
vnl_matrixUC.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_fill_diagonal,None,vnl_matrixUC)
vnl_matrixUC.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_copy_in,None,vnl_matrixUC)
vnl_matrixUC.set = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_set,None,vnl_matrixUC)
vnl_matrixUC.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_copy_out,None,vnl_matrixUC)
vnl_matrixUC.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUC___idiv__,None,vnl_matrixUC)
vnl_matrixUC.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUC___iadd__,None,vnl_matrixUC)
vnl_matrixUC.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUC___isub__,None,vnl_matrixUC)
vnl_matrixUC.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUC___imul__,None,vnl_matrixUC)
vnl_matrixUC.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUC___neg__,None,vnl_matrixUC)
vnl_matrixUC.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUC___div__,None,vnl_matrixUC)
vnl_matrixUC.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUC___add__,None,vnl_matrixUC)
vnl_matrixUC.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUC___sub__,None,vnl_matrixUC)
vnl_matrixUC.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUC___mul__,None,vnl_matrixUC)
vnl_matrixUC.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_transpose,None,vnl_matrixUC)
vnl_matrixUC.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_conjugate_transpose,None,vnl_matrixUC)
vnl_matrixUC.update = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_update,None,vnl_matrixUC)
vnl_matrixUC.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_set_column,None,vnl_matrixUC)
vnl_matrixUC.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_set_columns,None,vnl_matrixUC)
vnl_matrixUC.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_set_row,None,vnl_matrixUC)
vnl_matrixUC.extract = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_extract,None,vnl_matrixUC)
vnl_matrixUC.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_get_row,None,vnl_matrixUC)
vnl_matrixUC.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_get_column,None,vnl_matrixUC)
vnl_matrixUC.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_get_n_rows,None,vnl_matrixUC)
vnl_matrixUC.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_get_n_columns,None,vnl_matrixUC)
vnl_matrixUC.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_set_identity,None,vnl_matrixUC)
vnl_matrixUC.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_inplace_transpose,None,vnl_matrixUC)
vnl_matrixUC.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_flipud,None,vnl_matrixUC)
vnl_matrixUC.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_fliplr,None,vnl_matrixUC)
vnl_matrixUC.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_normalize_rows,None,vnl_matrixUC)
vnl_matrixUC.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_normalize_columns,None,vnl_matrixUC)
vnl_matrixUC.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_scale_row,None,vnl_matrixUC)
vnl_matrixUC.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_scale_column,None,vnl_matrixUC)
vnl_matrixUC.swap = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_swap,None,vnl_matrixUC)
vnl_matrixUC.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_array_one_norm,None,vnl_matrixUC)
vnl_matrixUC.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_array_two_norm,None,vnl_matrixUC)
vnl_matrixUC.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_array_inf_norm,None,vnl_matrixUC)
vnl_matrixUC.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_absolute_value_sum,None,vnl_matrixUC)
vnl_matrixUC.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_absolute_value_max,None,vnl_matrixUC)
vnl_matrixUC.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_operator_one_norm,None,vnl_matrixUC)
vnl_matrixUC.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_operator_inf_norm,None,vnl_matrixUC)
vnl_matrixUC.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_frobenius_norm,None,vnl_matrixUC)
vnl_matrixUC.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_fro_norm,None,vnl_matrixUC)
vnl_matrixUC.rms = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_rms,None,vnl_matrixUC)
vnl_matrixUC.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_min_value,None,vnl_matrixUC)
vnl_matrixUC.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_max_value,None,vnl_matrixUC)
vnl_matrixUC.mean = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_mean,None,vnl_matrixUC)
vnl_matrixUC.empty = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_empty,None,vnl_matrixUC)
vnl_matrixUC.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_is_identity,None,vnl_matrixUC)
vnl_matrixUC.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_is_zero,None,vnl_matrixUC)
vnl_matrixUC.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_is_finite,None,vnl_matrixUC)
vnl_matrixUC.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_has_nans,None,vnl_matrixUC)
vnl_matrixUC.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_assert_size,None,vnl_matrixUC)
vnl_matrixUC.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_assert_finite,None,vnl_matrixUC)
vnl_matrixUC.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_read_ascii,None,vnl_matrixUC)
vnl_matrixUC.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_data_block,None,vnl_matrixUC)
vnl_matrixUC.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_data_array,None,vnl_matrixUC)
vnl_matrixUC.begin = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_begin,None,vnl_matrixUC)
vnl_matrixUC.end = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_end,None,vnl_matrixUC)
vnl_matrixUC.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_operator_eq,None,vnl_matrixUC)
vnl_matrixUC.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUC___eq__,None,vnl_matrixUC)
vnl_matrixUC.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUC___ne__,None,vnl_matrixUC)
vnl_matrixUC._print = new_instancemethod(_vnl_matrixPython.vnl_matrixUC__print,None,vnl_matrixUC)
vnl_matrixUC.clear = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_clear,None,vnl_matrixUC)
vnl_matrixUC.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrixUC_set_size,None,vnl_matrixUC)
vnl_matrixUC_swigregister = _vnl_matrixPython.vnl_matrixUC_swigregister
vnl_matrixUC_swigregister(vnl_matrixUC)

def vnl_matrixUC_read(*args):
  """vnl_matrixUC_read(istream s) -> vnl_matrixUC"""
  return _vnl_matrixPython.vnl_matrixUC_read(*args)

class vnl_matrixUI(object):
    """Proxy of C++ vnl_matrixUI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_matrixUI
        __init__(self, unsigned int r, unsigned int c) -> vnl_matrixUI
        __init__(self, unsigned int r, unsigned int c, unsigned int v0) -> vnl_matrixUI
        __init__(self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrixUI
        __init__(self, unsigned int r, unsigned int c, unsigned int n, unsigned int values) -> vnl_matrixUI
        __init__(self, unsigned int data_block, unsigned int r, unsigned int c) -> vnl_matrixUI
        __init__(self, vnl_matrixUI arg0) -> vnl_matrixUI
        __init__(self, vnl_matrixUI arg0, vnl_matrixUI arg1, vnl_tag_add arg2) -> vnl_matrixUI
        __init__(self, vnl_matrixUI arg0, vnl_matrixUI arg1, vnl_tag_sub arg2) -> vnl_matrixUI
        __init__(self, vnl_matrixUI arg0, unsigned int arg1, vnl_tag_mul arg2) -> vnl_matrixUI
        __init__(self, vnl_matrixUI arg0, unsigned int arg1, vnl_tag_div arg2) -> vnl_matrixUI
        __init__(self, vnl_matrixUI arg0, unsigned int arg1, vnl_tag_add arg2) -> vnl_matrixUI
        __init__(self, vnl_matrixUI arg0, unsigned int arg1, vnl_tag_sub arg2) -> vnl_matrixUI
        __init__(self, vnl_matrixUI arg0, vnl_matrixUI arg1, vnl_tag_mul arg2) -> vnl_matrixUI
        __init__(self, vnl_matrixUI that, vnl_tag_grab arg1) -> vnl_matrixUI
        """
        _vnl_matrixPython.vnl_matrixUI_swiginit(self,_vnl_matrixPython.new_vnl_matrixUI(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrixUI
    def rows(self):
        """rows(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_rows(self)

    def columns(self):
        """columns(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_columns(self)

    def cols(self):
        """cols(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_cols(self)

    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_size(self)

    def put(self, *args):
        """put(self, unsigned int row, unsigned int column, unsigned int value)"""
        return _vnl_matrixPython.vnl_matrixUI_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int row, unsigned int column) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_get(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int r, unsigned int c) -> unsigned int
        __call__(self, unsigned int r, unsigned int c) -> unsigned int
        """
        return _vnl_matrixPython.vnl_matrixUI___call__(self, *args)

    def fill(self, *args):
        """fill(self, unsigned int arg0)"""
        return _vnl_matrixPython.vnl_matrixUI_fill(self, *args)

    def fill_diagonal(self, *args):
        """fill_diagonal(self, unsigned int arg0)"""
        return _vnl_matrixPython.vnl_matrixUI_fill_diagonal(self, *args)

    def copy_in(self, *args):
        """copy_in(self, unsigned int arg0)"""
        return _vnl_matrixPython.vnl_matrixUI_copy_in(self, *args)

    def set(self, *args):
        """set(self, unsigned int d)"""
        return _vnl_matrixPython.vnl_matrixUI_set(self, *args)

    def copy_out(self, *args):
        """copy_out(self, unsigned int arg0)"""
        return _vnl_matrixPython.vnl_matrixUI_copy_out(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, unsigned int value) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, unsigned int value) -> vnl_matrixUI
        __iadd__(self, vnl_matrixUI arg0) -> vnl_matrixUI
        """
        return _vnl_matrixPython.vnl_matrixUI___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, unsigned int value) -> vnl_matrixUI
        __isub__(self, vnl_matrixUI arg0) -> vnl_matrixUI
        """
        return _vnl_matrixPython.vnl_matrixUI___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, unsigned int value) -> vnl_matrixUI
        __imul__(self, vnl_matrixUI rhs) -> vnl_matrixUI
        """
        return _vnl_matrixPython.vnl_matrixUI___imul__(self, *args)

    def __neg__(self):
        """__neg__(self) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI___neg__(self)

    def __div__(self, *args):
        """__div__(self, unsigned int v) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, unsigned int v) -> vnl_matrixUI
        __add__(self, vnl_matrixUI rhs) -> vnl_matrixUI
        """
        return _vnl_matrixPython.vnl_matrixUI___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, unsigned int v) -> vnl_matrixUI
        __sub__(self, vnl_matrixUI rhs) -> vnl_matrixUI
        """
        return _vnl_matrixPython.vnl_matrixUI___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, unsigned int v) -> vnl_matrixUI
        __mul__(self, vnl_matrixUI rhs) -> vnl_matrixUI
        """
        return _vnl_matrixPython.vnl_matrixUI___mul__(self, *args)

    def transpose(self):
        """transpose(self) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_transpose(self)

    def conjugate_transpose(self):
        """conjugate_transpose(self) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_conjugate_transpose(self)

    def update(self, *args):
        """
        update(self, vnl_matrixUI arg0, unsigned int top = 0, unsigned int left = 0) -> vnl_matrixUI
        update(self, vnl_matrixUI arg0, unsigned int top = 0) -> vnl_matrixUI
        update(self, vnl_matrixUI arg0) -> vnl_matrixUI
        """
        return _vnl_matrixPython.vnl_matrixUI_update(self, *args)

    def set_column(self, *args):
        """
        set_column(self, unsigned int i, unsigned int v)
        set_column(self, unsigned int i, unsigned int value)
        set_column(self, unsigned int j, vnl_vectorUI v)
        """
        return _vnl_matrixPython.vnl_matrixUI_set_column(self, *args)

    def set_columns(self, *args):
        """set_columns(self, unsigned int starting_column, vnl_matrixUI M)"""
        return _vnl_matrixPython.vnl_matrixUI_set_columns(self, *args)

    def set_row(self, *args):
        """
        set_row(self, unsigned int i, unsigned int v)
        set_row(self, unsigned int i, unsigned int value)
        set_row(self, unsigned int i, vnl_vectorUI arg1)
        """
        return _vnl_matrixPython.vnl_matrixUI_set_row(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int r, unsigned int c, unsigned int top = 0, 
            unsigned int left = 0) -> vnl_matrixUI
        extract(self, unsigned int r, unsigned int c, unsigned int top = 0) -> vnl_matrixUI
        extract(self, unsigned int r, unsigned int c) -> vnl_matrixUI
        """
        return _vnl_matrixPython.vnl_matrixUI_extract(self, *args)

    def get_row(self, *args):
        """get_row(self, unsigned int r) -> vnl_vectorUI"""
        return _vnl_matrixPython.vnl_matrixUI_get_row(self, *args)

    def get_column(self, *args):
        """get_column(self, unsigned int c) -> vnl_vectorUI"""
        return _vnl_matrixPython.vnl_matrixUI_get_column(self, *args)

    def get_n_rows(self, *args):
        """get_n_rows(self, unsigned int rowstart, unsigned int n) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_get_n_rows(self, *args)

    def get_n_columns(self, *args):
        """get_n_columns(self, unsigned int colstart, unsigned int n) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_get_n_columns(self, *args)

    def set_identity(self):
        """set_identity(self)"""
        return _vnl_matrixPython.vnl_matrixUI_set_identity(self)

    def inplace_transpose(self):
        """inplace_transpose(self)"""
        return _vnl_matrixPython.vnl_matrixUI_inplace_transpose(self)

    def flipud(self):
        """flipud(self)"""
        return _vnl_matrixPython.vnl_matrixUI_flipud(self)

    def fliplr(self):
        """fliplr(self)"""
        return _vnl_matrixPython.vnl_matrixUI_fliplr(self)

    def normalize_rows(self):
        """normalize_rows(self)"""
        return _vnl_matrixPython.vnl_matrixUI_normalize_rows(self)

    def normalize_columns(self):
        """normalize_columns(self)"""
        return _vnl_matrixPython.vnl_matrixUI_normalize_columns(self)

    def scale_row(self, *args):
        """scale_row(self, unsigned int row, unsigned int value)"""
        return _vnl_matrixPython.vnl_matrixUI_scale_row(self, *args)

    def scale_column(self, *args):
        """scale_column(self, unsigned int col, unsigned int value)"""
        return _vnl_matrixPython.vnl_matrixUI_scale_column(self, *args)

    def swap(self, *args):
        """swap(self, vnl_matrixUI that)"""
        return _vnl_matrixPython.vnl_matrixUI_swap(self, *args)

    def array_one_norm(self):
        """array_one_norm(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_array_one_norm(self)

    def array_two_norm(self):
        """array_two_norm(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_array_two_norm(self)

    def array_inf_norm(self):
        """array_inf_norm(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_array_inf_norm(self)

    def absolute_value_sum(self):
        """absolute_value_sum(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_absolute_value_sum(self)

    def absolute_value_max(self):
        """absolute_value_max(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_absolute_value_max(self)

    def operator_one_norm(self):
        """operator_one_norm(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_operator_one_norm(self)

    def operator_inf_norm(self):
        """operator_inf_norm(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_operator_inf_norm(self)

    def frobenius_norm(self):
        """frobenius_norm(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_frobenius_norm(self)

    def fro_norm(self):
        """fro_norm(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_fro_norm(self)

    def rms(self):
        """rms(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_rms(self)

    def min_value(self):
        """min_value(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_min_value(self)

    def max_value(self):
        """max_value(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_max_value(self)

    def mean(self):
        """mean(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUI_mean(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixUI_empty(self)

    def is_identity(self, *args):
        """
        is_identity(self) -> bool
        is_identity(self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixUI_is_identity(self, *args)

    def is_zero(self, *args):
        """
        is_zero(self) -> bool
        is_zero(self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixUI_is_zero(self, *args)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixUI_is_finite(self)

    def has_nans(self):
        """has_nans(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixUI_has_nans(self)

    def assert_size(self, *args):
        """assert_size(self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrixUI_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_matrixPython.vnl_matrixUI_assert_finite(self)

    def read(*args):
        """read(istream s) -> vnl_matrixUI"""
        return _vnl_matrixPython.vnl_matrixUI_read(*args)

    read = staticmethod(read)
    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrixUI_read_ascii(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> unsigned int
        data_block(self) -> unsigned int
        """
        return _vnl_matrixPython.vnl_matrixUI_data_block(self, *args)

    def data_array(self, *args):
        """
        data_array(self) -> unsigned int
        data_array(self) -> unsigned int
        """
        return _vnl_matrixPython.vnl_matrixUI_data_array(self, *args)

    def begin(self, *args):
        """
        begin(self) -> unsigned int
        begin(self) -> unsigned int
        """
        return _vnl_matrixPython.vnl_matrixUI_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> unsigned int
        end(self) -> unsigned int
        """
        return _vnl_matrixPython.vnl_matrixUI_end(self, *args)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_matrixUI rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrixUI_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_matrixUI that) -> bool"""
        return _vnl_matrixPython.vnl_matrixUI___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_matrixUI that) -> bool"""
        return _vnl_matrixPython.vnl_matrixUI___ne__(self, *args)

    def _print(self, *args):
        """_print(self, ostream os)"""
        return _vnl_matrixPython.vnl_matrixUI__print(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_matrixPython.vnl_matrixUI_clear(self)

    def set_size(self, *args):
        """set_size(self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrixUI_set_size(self, *args)

vnl_matrixUI.rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_rows,None,vnl_matrixUI)
vnl_matrixUI.columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_columns,None,vnl_matrixUI)
vnl_matrixUI.cols = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_cols,None,vnl_matrixUI)
vnl_matrixUI.size = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_size,None,vnl_matrixUI)
vnl_matrixUI.put = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_put,None,vnl_matrixUI)
vnl_matrixUI.get = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_get,None,vnl_matrixUI)
vnl_matrixUI.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUI___call__,None,vnl_matrixUI)
vnl_matrixUI.fill = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_fill,None,vnl_matrixUI)
vnl_matrixUI.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_fill_diagonal,None,vnl_matrixUI)
vnl_matrixUI.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_copy_in,None,vnl_matrixUI)
vnl_matrixUI.set = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_set,None,vnl_matrixUI)
vnl_matrixUI.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_copy_out,None,vnl_matrixUI)
vnl_matrixUI.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUI___idiv__,None,vnl_matrixUI)
vnl_matrixUI.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUI___iadd__,None,vnl_matrixUI)
vnl_matrixUI.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUI___isub__,None,vnl_matrixUI)
vnl_matrixUI.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUI___imul__,None,vnl_matrixUI)
vnl_matrixUI.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUI___neg__,None,vnl_matrixUI)
vnl_matrixUI.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUI___div__,None,vnl_matrixUI)
vnl_matrixUI.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUI___add__,None,vnl_matrixUI)
vnl_matrixUI.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUI___sub__,None,vnl_matrixUI)
vnl_matrixUI.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUI___mul__,None,vnl_matrixUI)
vnl_matrixUI.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_transpose,None,vnl_matrixUI)
vnl_matrixUI.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_conjugate_transpose,None,vnl_matrixUI)
vnl_matrixUI.update = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_update,None,vnl_matrixUI)
vnl_matrixUI.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_set_column,None,vnl_matrixUI)
vnl_matrixUI.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_set_columns,None,vnl_matrixUI)
vnl_matrixUI.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_set_row,None,vnl_matrixUI)
vnl_matrixUI.extract = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_extract,None,vnl_matrixUI)
vnl_matrixUI.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_get_row,None,vnl_matrixUI)
vnl_matrixUI.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_get_column,None,vnl_matrixUI)
vnl_matrixUI.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_get_n_rows,None,vnl_matrixUI)
vnl_matrixUI.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_get_n_columns,None,vnl_matrixUI)
vnl_matrixUI.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_set_identity,None,vnl_matrixUI)
vnl_matrixUI.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_inplace_transpose,None,vnl_matrixUI)
vnl_matrixUI.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_flipud,None,vnl_matrixUI)
vnl_matrixUI.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_fliplr,None,vnl_matrixUI)
vnl_matrixUI.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_normalize_rows,None,vnl_matrixUI)
vnl_matrixUI.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_normalize_columns,None,vnl_matrixUI)
vnl_matrixUI.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_scale_row,None,vnl_matrixUI)
vnl_matrixUI.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_scale_column,None,vnl_matrixUI)
vnl_matrixUI.swap = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_swap,None,vnl_matrixUI)
vnl_matrixUI.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_array_one_norm,None,vnl_matrixUI)
vnl_matrixUI.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_array_two_norm,None,vnl_matrixUI)
vnl_matrixUI.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_array_inf_norm,None,vnl_matrixUI)
vnl_matrixUI.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_absolute_value_sum,None,vnl_matrixUI)
vnl_matrixUI.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_absolute_value_max,None,vnl_matrixUI)
vnl_matrixUI.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_operator_one_norm,None,vnl_matrixUI)
vnl_matrixUI.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_operator_inf_norm,None,vnl_matrixUI)
vnl_matrixUI.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_frobenius_norm,None,vnl_matrixUI)
vnl_matrixUI.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_fro_norm,None,vnl_matrixUI)
vnl_matrixUI.rms = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_rms,None,vnl_matrixUI)
vnl_matrixUI.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_min_value,None,vnl_matrixUI)
vnl_matrixUI.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_max_value,None,vnl_matrixUI)
vnl_matrixUI.mean = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_mean,None,vnl_matrixUI)
vnl_matrixUI.empty = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_empty,None,vnl_matrixUI)
vnl_matrixUI.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_is_identity,None,vnl_matrixUI)
vnl_matrixUI.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_is_zero,None,vnl_matrixUI)
vnl_matrixUI.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_is_finite,None,vnl_matrixUI)
vnl_matrixUI.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_has_nans,None,vnl_matrixUI)
vnl_matrixUI.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_assert_size,None,vnl_matrixUI)
vnl_matrixUI.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_assert_finite,None,vnl_matrixUI)
vnl_matrixUI.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_read_ascii,None,vnl_matrixUI)
vnl_matrixUI.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_data_block,None,vnl_matrixUI)
vnl_matrixUI.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_data_array,None,vnl_matrixUI)
vnl_matrixUI.begin = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_begin,None,vnl_matrixUI)
vnl_matrixUI.end = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_end,None,vnl_matrixUI)
vnl_matrixUI.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_operator_eq,None,vnl_matrixUI)
vnl_matrixUI.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUI___eq__,None,vnl_matrixUI)
vnl_matrixUI.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUI___ne__,None,vnl_matrixUI)
vnl_matrixUI._print = new_instancemethod(_vnl_matrixPython.vnl_matrixUI__print,None,vnl_matrixUI)
vnl_matrixUI.clear = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_clear,None,vnl_matrixUI)
vnl_matrixUI.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrixUI_set_size,None,vnl_matrixUI)
vnl_matrixUI_swigregister = _vnl_matrixPython.vnl_matrixUI_swigregister
vnl_matrixUI_swigregister(vnl_matrixUI)

def vnl_matrixUI_read(*args):
  """vnl_matrixUI_read(istream s) -> vnl_matrixUI"""
  return _vnl_matrixPython.vnl_matrixUI_read(*args)

class vnl_matrixUL(object):
    """Proxy of C++ vnl_matrixUL class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_matrixUL
        __init__(self, unsigned int r, unsigned int c) -> vnl_matrixUL
        __init__(self, unsigned int r, unsigned int c, unsigned long v0) -> vnl_matrixUL
        __init__(self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrixUL
        __init__(self, unsigned int r, unsigned int c, unsigned int n, unsigned long values) -> vnl_matrixUL
        __init__(self, unsigned long data_block, unsigned int r, unsigned int c) -> vnl_matrixUL
        __init__(self, vnl_matrixUL arg0) -> vnl_matrixUL
        __init__(self, vnl_matrixUL arg0, vnl_matrixUL arg1, vnl_tag_add arg2) -> vnl_matrixUL
        __init__(self, vnl_matrixUL arg0, vnl_matrixUL arg1, vnl_tag_sub arg2) -> vnl_matrixUL
        __init__(self, vnl_matrixUL arg0, unsigned long arg1, vnl_tag_mul arg2) -> vnl_matrixUL
        __init__(self, vnl_matrixUL arg0, unsigned long arg1, vnl_tag_div arg2) -> vnl_matrixUL
        __init__(self, vnl_matrixUL arg0, unsigned long arg1, vnl_tag_add arg2) -> vnl_matrixUL
        __init__(self, vnl_matrixUL arg0, unsigned long arg1, vnl_tag_sub arg2) -> vnl_matrixUL
        __init__(self, vnl_matrixUL arg0, vnl_matrixUL arg1, vnl_tag_mul arg2) -> vnl_matrixUL
        __init__(self, vnl_matrixUL that, vnl_tag_grab arg1) -> vnl_matrixUL
        """
        _vnl_matrixPython.vnl_matrixUL_swiginit(self,_vnl_matrixPython.new_vnl_matrixUL(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrixUL
    def rows(self):
        """rows(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUL_rows(self)

    def columns(self):
        """columns(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUL_columns(self)

    def cols(self):
        """cols(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUL_cols(self)

    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrixUL_size(self)

    def put(self, *args):
        """put(self, unsigned int row, unsigned int column, unsigned long value)"""
        return _vnl_matrixPython.vnl_matrixUL_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int row, unsigned int column) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_get(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int r, unsigned int c) -> unsigned long
        __call__(self, unsigned int r, unsigned int c) -> unsigned long
        """
        return _vnl_matrixPython.vnl_matrixUL___call__(self, *args)

    def fill(self, *args):
        """fill(self, unsigned long arg0)"""
        return _vnl_matrixPython.vnl_matrixUL_fill(self, *args)

    def fill_diagonal(self, *args):
        """fill_diagonal(self, unsigned long arg0)"""
        return _vnl_matrixPython.vnl_matrixUL_fill_diagonal(self, *args)

    def copy_in(self, *args):
        """copy_in(self, unsigned long arg0)"""
        return _vnl_matrixPython.vnl_matrixUL_copy_in(self, *args)

    def set(self, *args):
        """set(self, unsigned long d)"""
        return _vnl_matrixPython.vnl_matrixUL_set(self, *args)

    def copy_out(self, *args):
        """copy_out(self, unsigned long arg0)"""
        return _vnl_matrixPython.vnl_matrixUL_copy_out(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, unsigned long value) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, unsigned long value) -> vnl_matrixUL
        __iadd__(self, vnl_matrixUL arg0) -> vnl_matrixUL
        """
        return _vnl_matrixPython.vnl_matrixUL___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, unsigned long value) -> vnl_matrixUL
        __isub__(self, vnl_matrixUL arg0) -> vnl_matrixUL
        """
        return _vnl_matrixPython.vnl_matrixUL___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, unsigned long value) -> vnl_matrixUL
        __imul__(self, vnl_matrixUL rhs) -> vnl_matrixUL
        """
        return _vnl_matrixPython.vnl_matrixUL___imul__(self, *args)

    def __neg__(self):
        """__neg__(self) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL___neg__(self)

    def __div__(self, *args):
        """__div__(self, unsigned long v) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, unsigned long v) -> vnl_matrixUL
        __add__(self, vnl_matrixUL rhs) -> vnl_matrixUL
        """
        return _vnl_matrixPython.vnl_matrixUL___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, unsigned long v) -> vnl_matrixUL
        __sub__(self, vnl_matrixUL rhs) -> vnl_matrixUL
        """
        return _vnl_matrixPython.vnl_matrixUL___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, unsigned long v) -> vnl_matrixUL
        __mul__(self, vnl_matrixUL rhs) -> vnl_matrixUL
        """
        return _vnl_matrixPython.vnl_matrixUL___mul__(self, *args)

    def transpose(self):
        """transpose(self) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_transpose(self)

    def conjugate_transpose(self):
        """conjugate_transpose(self) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_conjugate_transpose(self)

    def update(self, *args):
        """
        update(self, vnl_matrixUL arg0, unsigned int top = 0, unsigned int left = 0) -> vnl_matrixUL
        update(self, vnl_matrixUL arg0, unsigned int top = 0) -> vnl_matrixUL
        update(self, vnl_matrixUL arg0) -> vnl_matrixUL
        """
        return _vnl_matrixPython.vnl_matrixUL_update(self, *args)

    def set_column(self, *args):
        """
        set_column(self, unsigned int i, unsigned long v)
        set_column(self, unsigned int i, unsigned long value)
        set_column(self, unsigned int j, vnl_vectorUL v)
        """
        return _vnl_matrixPython.vnl_matrixUL_set_column(self, *args)

    def set_columns(self, *args):
        """set_columns(self, unsigned int starting_column, vnl_matrixUL M)"""
        return _vnl_matrixPython.vnl_matrixUL_set_columns(self, *args)

    def set_row(self, *args):
        """
        set_row(self, unsigned int i, unsigned long v)
        set_row(self, unsigned int i, unsigned long value)
        set_row(self, unsigned int i, vnl_vectorUL arg1)
        """
        return _vnl_matrixPython.vnl_matrixUL_set_row(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int r, unsigned int c, unsigned int top = 0, 
            unsigned int left = 0) -> vnl_matrixUL
        extract(self, unsigned int r, unsigned int c, unsigned int top = 0) -> vnl_matrixUL
        extract(self, unsigned int r, unsigned int c) -> vnl_matrixUL
        """
        return _vnl_matrixPython.vnl_matrixUL_extract(self, *args)

    def get_row(self, *args):
        """get_row(self, unsigned int r) -> vnl_vectorUL"""
        return _vnl_matrixPython.vnl_matrixUL_get_row(self, *args)

    def get_column(self, *args):
        """get_column(self, unsigned int c) -> vnl_vectorUL"""
        return _vnl_matrixPython.vnl_matrixUL_get_column(self, *args)

    def get_n_rows(self, *args):
        """get_n_rows(self, unsigned int rowstart, unsigned int n) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_get_n_rows(self, *args)

    def get_n_columns(self, *args):
        """get_n_columns(self, unsigned int colstart, unsigned int n) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_get_n_columns(self, *args)

    def set_identity(self):
        """set_identity(self)"""
        return _vnl_matrixPython.vnl_matrixUL_set_identity(self)

    def inplace_transpose(self):
        """inplace_transpose(self)"""
        return _vnl_matrixPython.vnl_matrixUL_inplace_transpose(self)

    def flipud(self):
        """flipud(self)"""
        return _vnl_matrixPython.vnl_matrixUL_flipud(self)

    def fliplr(self):
        """fliplr(self)"""
        return _vnl_matrixPython.vnl_matrixUL_fliplr(self)

    def normalize_rows(self):
        """normalize_rows(self)"""
        return _vnl_matrixPython.vnl_matrixUL_normalize_rows(self)

    def normalize_columns(self):
        """normalize_columns(self)"""
        return _vnl_matrixPython.vnl_matrixUL_normalize_columns(self)

    def scale_row(self, *args):
        """scale_row(self, unsigned int row, unsigned long value)"""
        return _vnl_matrixPython.vnl_matrixUL_scale_row(self, *args)

    def scale_column(self, *args):
        """scale_column(self, unsigned int col, unsigned long value)"""
        return _vnl_matrixPython.vnl_matrixUL_scale_column(self, *args)

    def swap(self, *args):
        """swap(self, vnl_matrixUL that)"""
        return _vnl_matrixPython.vnl_matrixUL_swap(self, *args)

    def array_one_norm(self):
        """array_one_norm(self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_array_one_norm(self)

    def array_two_norm(self):
        """array_two_norm(self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_array_two_norm(self)

    def array_inf_norm(self):
        """array_inf_norm(self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_array_inf_norm(self)

    def absolute_value_sum(self):
        """absolute_value_sum(self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_absolute_value_sum(self)

    def absolute_value_max(self):
        """absolute_value_max(self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_absolute_value_max(self)

    def operator_one_norm(self):
        """operator_one_norm(self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_operator_one_norm(self)

    def operator_inf_norm(self):
        """operator_inf_norm(self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_operator_inf_norm(self)

    def frobenius_norm(self):
        """frobenius_norm(self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_frobenius_norm(self)

    def fro_norm(self):
        """fro_norm(self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_fro_norm(self)

    def rms(self):
        """rms(self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_rms(self)

    def min_value(self):
        """min_value(self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_min_value(self)

    def max_value(self):
        """max_value(self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_max_value(self)

    def mean(self):
        """mean(self) -> unsigned long"""
        return _vnl_matrixPython.vnl_matrixUL_mean(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixUL_empty(self)

    def is_identity(self, *args):
        """
        is_identity(self) -> bool
        is_identity(self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixUL_is_identity(self, *args)

    def is_zero(self, *args):
        """
        is_zero(self) -> bool
        is_zero(self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrixUL_is_zero(self, *args)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixUL_is_finite(self)

    def has_nans(self):
        """has_nans(self) -> bool"""
        return _vnl_matrixPython.vnl_matrixUL_has_nans(self)

    def assert_size(self, *args):
        """assert_size(self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrixUL_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_matrixPython.vnl_matrixUL_assert_finite(self)

    def read(*args):
        """read(istream s) -> vnl_matrixUL"""
        return _vnl_matrixPython.vnl_matrixUL_read(*args)

    read = staticmethod(read)
    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrixUL_read_ascii(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> unsigned long
        data_block(self) -> unsigned long
        """
        return _vnl_matrixPython.vnl_matrixUL_data_block(self, *args)

    def data_array(self, *args):
        """
        data_array(self) -> unsigned long
        data_array(self) -> unsigned long
        """
        return _vnl_matrixPython.vnl_matrixUL_data_array(self, *args)

    def begin(self, *args):
        """
        begin(self) -> unsigned long
        begin(self) -> unsigned long
        """
        return _vnl_matrixPython.vnl_matrixUL_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> unsigned long
        end(self) -> unsigned long
        """
        return _vnl_matrixPython.vnl_matrixUL_end(self, *args)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_matrixUL rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrixUL_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_matrixUL that) -> bool"""
        return _vnl_matrixPython.vnl_matrixUL___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_matrixUL that) -> bool"""
        return _vnl_matrixPython.vnl_matrixUL___ne__(self, *args)

    def _print(self, *args):
        """_print(self, ostream os)"""
        return _vnl_matrixPython.vnl_matrixUL__print(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_matrixPython.vnl_matrixUL_clear(self)

    def set_size(self, *args):
        """set_size(self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrixUL_set_size(self, *args)

vnl_matrixUL.rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_rows,None,vnl_matrixUL)
vnl_matrixUL.columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_columns,None,vnl_matrixUL)
vnl_matrixUL.cols = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_cols,None,vnl_matrixUL)
vnl_matrixUL.size = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_size,None,vnl_matrixUL)
vnl_matrixUL.put = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_put,None,vnl_matrixUL)
vnl_matrixUL.get = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_get,None,vnl_matrixUL)
vnl_matrixUL.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUL___call__,None,vnl_matrixUL)
vnl_matrixUL.fill = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_fill,None,vnl_matrixUL)
vnl_matrixUL.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_fill_diagonal,None,vnl_matrixUL)
vnl_matrixUL.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_copy_in,None,vnl_matrixUL)
vnl_matrixUL.set = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_set,None,vnl_matrixUL)
vnl_matrixUL.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_copy_out,None,vnl_matrixUL)
vnl_matrixUL.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUL___idiv__,None,vnl_matrixUL)
vnl_matrixUL.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUL___iadd__,None,vnl_matrixUL)
vnl_matrixUL.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUL___isub__,None,vnl_matrixUL)
vnl_matrixUL.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUL___imul__,None,vnl_matrixUL)
vnl_matrixUL.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUL___neg__,None,vnl_matrixUL)
vnl_matrixUL.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUL___div__,None,vnl_matrixUL)
vnl_matrixUL.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUL___add__,None,vnl_matrixUL)
vnl_matrixUL.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUL___sub__,None,vnl_matrixUL)
vnl_matrixUL.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUL___mul__,None,vnl_matrixUL)
vnl_matrixUL.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_transpose,None,vnl_matrixUL)
vnl_matrixUL.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_conjugate_transpose,None,vnl_matrixUL)
vnl_matrixUL.update = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_update,None,vnl_matrixUL)
vnl_matrixUL.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_set_column,None,vnl_matrixUL)
vnl_matrixUL.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_set_columns,None,vnl_matrixUL)
vnl_matrixUL.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_set_row,None,vnl_matrixUL)
vnl_matrixUL.extract = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_extract,None,vnl_matrixUL)
vnl_matrixUL.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_get_row,None,vnl_matrixUL)
vnl_matrixUL.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_get_column,None,vnl_matrixUL)
vnl_matrixUL.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_get_n_rows,None,vnl_matrixUL)
vnl_matrixUL.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_get_n_columns,None,vnl_matrixUL)
vnl_matrixUL.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_set_identity,None,vnl_matrixUL)
vnl_matrixUL.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_inplace_transpose,None,vnl_matrixUL)
vnl_matrixUL.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_flipud,None,vnl_matrixUL)
vnl_matrixUL.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_fliplr,None,vnl_matrixUL)
vnl_matrixUL.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_normalize_rows,None,vnl_matrixUL)
vnl_matrixUL.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_normalize_columns,None,vnl_matrixUL)
vnl_matrixUL.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_scale_row,None,vnl_matrixUL)
vnl_matrixUL.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_scale_column,None,vnl_matrixUL)
vnl_matrixUL.swap = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_swap,None,vnl_matrixUL)
vnl_matrixUL.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_array_one_norm,None,vnl_matrixUL)
vnl_matrixUL.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_array_two_norm,None,vnl_matrixUL)
vnl_matrixUL.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_array_inf_norm,None,vnl_matrixUL)
vnl_matrixUL.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_absolute_value_sum,None,vnl_matrixUL)
vnl_matrixUL.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_absolute_value_max,None,vnl_matrixUL)
vnl_matrixUL.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_operator_one_norm,None,vnl_matrixUL)
vnl_matrixUL.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_operator_inf_norm,None,vnl_matrixUL)
vnl_matrixUL.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_frobenius_norm,None,vnl_matrixUL)
vnl_matrixUL.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_fro_norm,None,vnl_matrixUL)
vnl_matrixUL.rms = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_rms,None,vnl_matrixUL)
vnl_matrixUL.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_min_value,None,vnl_matrixUL)
vnl_matrixUL.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_max_value,None,vnl_matrixUL)
vnl_matrixUL.mean = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_mean,None,vnl_matrixUL)
vnl_matrixUL.empty = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_empty,None,vnl_matrixUL)
vnl_matrixUL.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_is_identity,None,vnl_matrixUL)
vnl_matrixUL.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_is_zero,None,vnl_matrixUL)
vnl_matrixUL.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_is_finite,None,vnl_matrixUL)
vnl_matrixUL.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_has_nans,None,vnl_matrixUL)
vnl_matrixUL.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_assert_size,None,vnl_matrixUL)
vnl_matrixUL.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_assert_finite,None,vnl_matrixUL)
vnl_matrixUL.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_read_ascii,None,vnl_matrixUL)
vnl_matrixUL.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_data_block,None,vnl_matrixUL)
vnl_matrixUL.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_data_array,None,vnl_matrixUL)
vnl_matrixUL.begin = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_begin,None,vnl_matrixUL)
vnl_matrixUL.end = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_end,None,vnl_matrixUL)
vnl_matrixUL.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_operator_eq,None,vnl_matrixUL)
vnl_matrixUL.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUL___eq__,None,vnl_matrixUL)
vnl_matrixUL.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrixUL___ne__,None,vnl_matrixUL)
vnl_matrixUL._print = new_instancemethod(_vnl_matrixPython.vnl_matrixUL__print,None,vnl_matrixUL)
vnl_matrixUL.clear = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_clear,None,vnl_matrixUL)
vnl_matrixUL.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrixUL_set_size,None,vnl_matrixUL)
vnl_matrixUL_swigregister = _vnl_matrixPython.vnl_matrixUL_swigregister
vnl_matrixUL_swigregister(vnl_matrixUL)

def vnl_matrixUL_read(*args):
  """vnl_matrixUL_read(istream s) -> vnl_matrixUL"""
  return _vnl_matrixPython.vnl_matrixUL_read(*args)

class vnl_matrix_vcl_complexD(object):
    """Proxy of C++ vnl_matrix_vcl_complexD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_matrix_vcl_complexD
        __init__(self, unsigned int r, unsigned int c) -> vnl_matrix_vcl_complexD
        __init__(self, unsigned int r, unsigned int c, vcl_complexD v0) -> vnl_matrix_vcl_complexD
        __init__(self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrix_vcl_complexD
        __init__(self, unsigned int r, unsigned int c, unsigned int n, vcl_complexD values) -> vnl_matrix_vcl_complexD
        __init__(self, vcl_complexD data_block, unsigned int r, unsigned int c) -> vnl_matrix_vcl_complexD
        __init__(self, vnl_matrix_vcl_complexD arg0) -> vnl_matrix_vcl_complexD
        __init__(self, vnl_matrix_vcl_complexD arg0, vnl_matrix_vcl_complexD arg1, 
            vnl_tag_add arg2) -> vnl_matrix_vcl_complexD
        __init__(self, vnl_matrix_vcl_complexD arg0, vnl_matrix_vcl_complexD arg1, 
            vnl_tag_sub arg2) -> vnl_matrix_vcl_complexD
        __init__(self, vnl_matrix_vcl_complexD arg0, vcl_complexD arg1, vnl_tag_mul arg2) -> vnl_matrix_vcl_complexD
        __init__(self, vnl_matrix_vcl_complexD arg0, vcl_complexD arg1, vnl_tag_div arg2) -> vnl_matrix_vcl_complexD
        __init__(self, vnl_matrix_vcl_complexD arg0, vcl_complexD arg1, vnl_tag_add arg2) -> vnl_matrix_vcl_complexD
        __init__(self, vnl_matrix_vcl_complexD arg0, vcl_complexD arg1, vnl_tag_sub arg2) -> vnl_matrix_vcl_complexD
        __init__(self, vnl_matrix_vcl_complexD arg0, vnl_matrix_vcl_complexD arg1, 
            vnl_tag_mul arg2) -> vnl_matrix_vcl_complexD
        __init__(self, vnl_matrix_vcl_complexD that, vnl_tag_grab arg1) -> vnl_matrix_vcl_complexD
        """
        _vnl_matrixPython.vnl_matrix_vcl_complexD_swiginit(self,_vnl_matrixPython.new_vnl_matrix_vcl_complexD(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrix_vcl_complexD
    def rows(self):
        """rows(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_rows(self)

    def columns(self):
        """columns(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_columns(self)

    def cols(self):
        """cols(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_cols(self)

    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_size(self)

    def put(self, *args):
        """put(self, unsigned int row, unsigned int column, vcl_complexD value)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int row, unsigned int column) -> vcl_complexD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_get(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int r, unsigned int c) -> vcl_complexD
        __call__(self, unsigned int r, unsigned int c) -> vcl_complexD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexD___call__(self, *args)

    def fill(self, *args):
        """fill(self, vcl_complexD arg0)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_fill(self, *args)

    def fill_diagonal(self, *args):
        """fill_diagonal(self, vcl_complexD arg0)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_fill_diagonal(self, *args)

    def copy_in(self, *args):
        """copy_in(self, vcl_complexD arg0)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_copy_in(self, *args)

    def set(self, *args):
        """set(self, vcl_complexD d)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_set(self, *args)

    def copy_out(self, *args):
        """copy_out(self, vcl_complexD arg0)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_copy_out(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, vcl_complexD value) -> vnl_matrix_vcl_complexD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, vcl_complexD value) -> vnl_matrix_vcl_complexD
        __iadd__(self, vnl_matrix_vcl_complexD arg0) -> vnl_matrix_vcl_complexD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexD___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, vcl_complexD value) -> vnl_matrix_vcl_complexD
        __isub__(self, vnl_matrix_vcl_complexD arg0) -> vnl_matrix_vcl_complexD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexD___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, vcl_complexD value) -> vnl_matrix_vcl_complexD
        __imul__(self, vnl_matrix_vcl_complexD rhs) -> vnl_matrix_vcl_complexD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexD___imul__(self, *args)

    def __neg__(self):
        """__neg__(self) -> vnl_matrix_vcl_complexD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD___neg__(self)

    def __div__(self, *args):
        """__div__(self, vcl_complexD v) -> vnl_matrix_vcl_complexD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, vcl_complexD v) -> vnl_matrix_vcl_complexD
        __add__(self, vnl_matrix_vcl_complexD rhs) -> vnl_matrix_vcl_complexD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexD___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, vcl_complexD v) -> vnl_matrix_vcl_complexD
        __sub__(self, vnl_matrix_vcl_complexD rhs) -> vnl_matrix_vcl_complexD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexD___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, vcl_complexD v) -> vnl_matrix_vcl_complexD
        __mul__(self, vnl_matrix_vcl_complexD rhs) -> vnl_matrix_vcl_complexD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexD___mul__(self, *args)

    def transpose(self):
        """transpose(self) -> vnl_matrix_vcl_complexD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_transpose(self)

    def conjugate_transpose(self):
        """conjugate_transpose(self) -> vnl_matrix_vcl_complexD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_conjugate_transpose(self)

    def update(self, *args):
        """
        update(self, vnl_matrix_vcl_complexD arg0, unsigned int top = 0, 
            unsigned int left = 0) -> vnl_matrix_vcl_complexD
        update(self, vnl_matrix_vcl_complexD arg0, unsigned int top = 0) -> vnl_matrix_vcl_complexD
        update(self, vnl_matrix_vcl_complexD arg0) -> vnl_matrix_vcl_complexD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_update(self, *args)

    def set_column(self, *args):
        """
        set_column(self, unsigned int i, vcl_complexD v)
        set_column(self, unsigned int i, vcl_complexD value)
        set_column(self, unsigned int j, vnl_vector_vcl_complexD v)
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_set_column(self, *args)

    def set_columns(self, *args):
        """set_columns(self, unsigned int starting_column, vnl_matrix_vcl_complexD M)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_set_columns(self, *args)

    def set_row(self, *args):
        """
        set_row(self, unsigned int i, vcl_complexD v)
        set_row(self, unsigned int i, vcl_complexD value)
        set_row(self, unsigned int i, vnl_vector_vcl_complexD arg1)
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_set_row(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int r, unsigned int c, unsigned int top = 0, 
            unsigned int left = 0) -> vnl_matrix_vcl_complexD
        extract(self, unsigned int r, unsigned int c, unsigned int top = 0) -> vnl_matrix_vcl_complexD
        extract(self, unsigned int r, unsigned int c) -> vnl_matrix_vcl_complexD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_extract(self, *args)

    def get_row(self, *args):
        """get_row(self, unsigned int r) -> vnl_vector_vcl_complexD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_get_row(self, *args)

    def get_column(self, *args):
        """get_column(self, unsigned int c) -> vnl_vector_vcl_complexD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_get_column(self, *args)

    def get_n_rows(self, *args):
        """get_n_rows(self, unsigned int rowstart, unsigned int n) -> vnl_matrix_vcl_complexD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_get_n_rows(self, *args)

    def get_n_columns(self, *args):
        """get_n_columns(self, unsigned int colstart, unsigned int n) -> vnl_matrix_vcl_complexD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_get_n_columns(self, *args)

    def set_identity(self):
        """set_identity(self)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_set_identity(self)

    def inplace_transpose(self):
        """inplace_transpose(self)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_inplace_transpose(self)

    def flipud(self):
        """flipud(self)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_flipud(self)

    def fliplr(self):
        """fliplr(self)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_fliplr(self)

    def normalize_rows(self):
        """normalize_rows(self)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_normalize_rows(self)

    def normalize_columns(self):
        """normalize_columns(self)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_normalize_columns(self)

    def scale_row(self, *args):
        """scale_row(self, unsigned int row, vcl_complexD value)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_scale_row(self, *args)

    def scale_column(self, *args):
        """scale_column(self, unsigned int col, vcl_complexD value)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_scale_column(self, *args)

    def swap(self, *args):
        """swap(self, vnl_matrix_vcl_complexD that)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_swap(self, *args)

    def array_one_norm(self):
        """array_one_norm(self) -> double"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_array_one_norm(self)

    def array_two_norm(self):
        """array_two_norm(self) -> double"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_array_two_norm(self)

    def array_inf_norm(self):
        """array_inf_norm(self) -> double"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_array_inf_norm(self)

    def absolute_value_sum(self):
        """absolute_value_sum(self) -> double"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_absolute_value_sum(self)

    def absolute_value_max(self):
        """absolute_value_max(self) -> double"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_absolute_value_max(self)

    def operator_one_norm(self):
        """operator_one_norm(self) -> double"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_operator_one_norm(self)

    def operator_inf_norm(self):
        """operator_inf_norm(self) -> double"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_operator_inf_norm(self)

    def frobenius_norm(self):
        """frobenius_norm(self) -> double"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_frobenius_norm(self)

    def fro_norm(self):
        """fro_norm(self) -> double"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_fro_norm(self)

    def rms(self):
        """rms(self) -> double"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_rms(self)

    def min_value(self):
        """min_value(self) -> vcl_complexD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_min_value(self)

    def max_value(self):
        """max_value(self) -> vcl_complexD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_max_value(self)

    def mean(self):
        """mean(self) -> vcl_complexD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_mean(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_empty(self)

    def is_identity(self, *args):
        """
        is_identity(self) -> bool
        is_identity(self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_is_identity(self, *args)

    def is_zero(self, *args):
        """
        is_zero(self) -> bool
        is_zero(self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_is_zero(self, *args)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_is_finite(self)

    def has_nans(self):
        """has_nans(self) -> bool"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_has_nans(self)

    def assert_size(self, *args):
        """assert_size(self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_assert_finite(self)

    def read(*args):
        """read(istream s) -> vnl_matrix_vcl_complexD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_read(*args)

    read = staticmethod(read)
    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_read_ascii(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> vcl_complexD
        data_block(self) -> vcl_complexD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_data_block(self, *args)

    def data_array(self, *args):
        """
        data_array(self) -> vcl_complexD
        data_array(self) -> vcl_complexD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_data_array(self, *args)

    def begin(self, *args):
        """
        begin(self) -> vcl_complexD
        begin(self) -> vcl_complexD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> vcl_complexD
        end(self) -> vcl_complexD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_end(self, *args)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_matrix_vcl_complexD rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_matrix_vcl_complexD that) -> bool"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_matrix_vcl_complexD that) -> bool"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD___ne__(self, *args)

    def _print(self, *args):
        """_print(self, ostream os)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD__print(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_clear(self)

    def set_size(self, *args):
        """set_size(self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexD_set_size(self, *args)

vnl_matrix_vcl_complexD.rows = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_rows,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.columns = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_columns,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.cols = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_cols,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.size = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_size,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.put = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_put,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.get = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_get,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD___call__,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.fill = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_fill,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_fill_diagonal,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_copy_in,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.set = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_set,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_copy_out,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD___idiv__,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD___iadd__,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD___isub__,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD___imul__,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD___neg__,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD___div__,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD___add__,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD___sub__,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD___mul__,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_transpose,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_conjugate_transpose,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.update = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_update,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_set_column,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_set_columns,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_set_row,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.extract = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_extract,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_get_row,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_get_column,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_get_n_rows,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_get_n_columns,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_set_identity,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_inplace_transpose,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_flipud,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_fliplr,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_normalize_rows,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_normalize_columns,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_scale_row,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_scale_column,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.swap = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_swap,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_array_one_norm,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_array_two_norm,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_array_inf_norm,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_absolute_value_sum,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_absolute_value_max,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_operator_one_norm,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_operator_inf_norm,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_frobenius_norm,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_fro_norm,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.rms = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_rms,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_min_value,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_max_value,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.mean = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_mean,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.empty = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_empty,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_is_identity,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_is_zero,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_is_finite,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_has_nans,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_assert_size,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_assert_finite,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_read_ascii,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_data_block,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_data_array,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.begin = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_begin,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.end = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_end,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_operator_eq,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD___eq__,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD___ne__,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD._print = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD__print,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.clear = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_clear,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexD_set_size,None,vnl_matrix_vcl_complexD)
vnl_matrix_vcl_complexD_swigregister = _vnl_matrixPython.vnl_matrix_vcl_complexD_swigregister
vnl_matrix_vcl_complexD_swigregister(vnl_matrix_vcl_complexD)

def vnl_matrix_vcl_complexD_read(*args):
  """vnl_matrix_vcl_complexD_read(istream s) -> vnl_matrix_vcl_complexD"""
  return _vnl_matrixPython.vnl_matrix_vcl_complexD_read(*args)

class vnl_matrix_vcl_complexF(object):
    """Proxy of C++ vnl_matrix_vcl_complexF class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_matrix_vcl_complexF
        __init__(self, unsigned int r, unsigned int c) -> vnl_matrix_vcl_complexF
        __init__(self, unsigned int r, unsigned int c, vcl_complexF v0) -> vnl_matrix_vcl_complexF
        __init__(self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrix_vcl_complexF
        __init__(self, unsigned int r, unsigned int c, unsigned int n, vcl_complexF values) -> vnl_matrix_vcl_complexF
        __init__(self, vcl_complexF data_block, unsigned int r, unsigned int c) -> vnl_matrix_vcl_complexF
        __init__(self, vnl_matrix_vcl_complexF arg0) -> vnl_matrix_vcl_complexF
        __init__(self, vnl_matrix_vcl_complexF arg0, vnl_matrix_vcl_complexF arg1, 
            vnl_tag_add arg2) -> vnl_matrix_vcl_complexF
        __init__(self, vnl_matrix_vcl_complexF arg0, vnl_matrix_vcl_complexF arg1, 
            vnl_tag_sub arg2) -> vnl_matrix_vcl_complexF
        __init__(self, vnl_matrix_vcl_complexF arg0, vcl_complexF arg1, vnl_tag_mul arg2) -> vnl_matrix_vcl_complexF
        __init__(self, vnl_matrix_vcl_complexF arg0, vcl_complexF arg1, vnl_tag_div arg2) -> vnl_matrix_vcl_complexF
        __init__(self, vnl_matrix_vcl_complexF arg0, vcl_complexF arg1, vnl_tag_add arg2) -> vnl_matrix_vcl_complexF
        __init__(self, vnl_matrix_vcl_complexF arg0, vcl_complexF arg1, vnl_tag_sub arg2) -> vnl_matrix_vcl_complexF
        __init__(self, vnl_matrix_vcl_complexF arg0, vnl_matrix_vcl_complexF arg1, 
            vnl_tag_mul arg2) -> vnl_matrix_vcl_complexF
        __init__(self, vnl_matrix_vcl_complexF that, vnl_tag_grab arg1) -> vnl_matrix_vcl_complexF
        """
        _vnl_matrixPython.vnl_matrix_vcl_complexF_swiginit(self,_vnl_matrixPython.new_vnl_matrix_vcl_complexF(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrix_vcl_complexF
    def rows(self):
        """rows(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_rows(self)

    def columns(self):
        """columns(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_columns(self)

    def cols(self):
        """cols(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_cols(self)

    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_size(self)

    def put(self, *args):
        """put(self, unsigned int row, unsigned int column, vcl_complexF value)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int row, unsigned int column) -> vcl_complexF"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_get(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int r, unsigned int c) -> vcl_complexF
        __call__(self, unsigned int r, unsigned int c) -> vcl_complexF
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexF___call__(self, *args)

    def fill(self, *args):
        """fill(self, vcl_complexF arg0)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_fill(self, *args)

    def fill_diagonal(self, *args):
        """fill_diagonal(self, vcl_complexF arg0)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_fill_diagonal(self, *args)

    def copy_in(self, *args):
        """copy_in(self, vcl_complexF arg0)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_copy_in(self, *args)

    def set(self, *args):
        """set(self, vcl_complexF d)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_set(self, *args)

    def copy_out(self, *args):
        """copy_out(self, vcl_complexF arg0)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_copy_out(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, vcl_complexF value) -> vnl_matrix_vcl_complexF"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, vcl_complexF value) -> vnl_matrix_vcl_complexF
        __iadd__(self, vnl_matrix_vcl_complexF arg0) -> vnl_matrix_vcl_complexF
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexF___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, vcl_complexF value) -> vnl_matrix_vcl_complexF
        __isub__(self, vnl_matrix_vcl_complexF arg0) -> vnl_matrix_vcl_complexF
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexF___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, vcl_complexF value) -> vnl_matrix_vcl_complexF
        __imul__(self, vnl_matrix_vcl_complexF rhs) -> vnl_matrix_vcl_complexF
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexF___imul__(self, *args)

    def __neg__(self):
        """__neg__(self) -> vnl_matrix_vcl_complexF"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF___neg__(self)

    def __div__(self, *args):
        """__div__(self, vcl_complexF v) -> vnl_matrix_vcl_complexF"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, vcl_complexF v) -> vnl_matrix_vcl_complexF
        __add__(self, vnl_matrix_vcl_complexF rhs) -> vnl_matrix_vcl_complexF
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexF___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, vcl_complexF v) -> vnl_matrix_vcl_complexF
        __sub__(self, vnl_matrix_vcl_complexF rhs) -> vnl_matrix_vcl_complexF
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexF___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, vcl_complexF v) -> vnl_matrix_vcl_complexF
        __mul__(self, vnl_matrix_vcl_complexF rhs) -> vnl_matrix_vcl_complexF
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexF___mul__(self, *args)

    def transpose(self):
        """transpose(self) -> vnl_matrix_vcl_complexF"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_transpose(self)

    def conjugate_transpose(self):
        """conjugate_transpose(self) -> vnl_matrix_vcl_complexF"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_conjugate_transpose(self)

    def update(self, *args):
        """
        update(self, vnl_matrix_vcl_complexF arg0, unsigned int top = 0, 
            unsigned int left = 0) -> vnl_matrix_vcl_complexF
        update(self, vnl_matrix_vcl_complexF arg0, unsigned int top = 0) -> vnl_matrix_vcl_complexF
        update(self, vnl_matrix_vcl_complexF arg0) -> vnl_matrix_vcl_complexF
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_update(self, *args)

    def set_column(self, *args):
        """
        set_column(self, unsigned int i, vcl_complexF v)
        set_column(self, unsigned int i, vcl_complexF value)
        set_column(self, unsigned int j, vnl_vector_vcl_complexF v)
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_set_column(self, *args)

    def set_columns(self, *args):
        """set_columns(self, unsigned int starting_column, vnl_matrix_vcl_complexF M)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_set_columns(self, *args)

    def set_row(self, *args):
        """
        set_row(self, unsigned int i, vcl_complexF v)
        set_row(self, unsigned int i, vcl_complexF value)
        set_row(self, unsigned int i, vnl_vector_vcl_complexF arg1)
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_set_row(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int r, unsigned int c, unsigned int top = 0, 
            unsigned int left = 0) -> vnl_matrix_vcl_complexF
        extract(self, unsigned int r, unsigned int c, unsigned int top = 0) -> vnl_matrix_vcl_complexF
        extract(self, unsigned int r, unsigned int c) -> vnl_matrix_vcl_complexF
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_extract(self, *args)

    def get_row(self, *args):
        """get_row(self, unsigned int r) -> vnl_vector_vcl_complexF"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_get_row(self, *args)

    def get_column(self, *args):
        """get_column(self, unsigned int c) -> vnl_vector_vcl_complexF"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_get_column(self, *args)

    def get_n_rows(self, *args):
        """get_n_rows(self, unsigned int rowstart, unsigned int n) -> vnl_matrix_vcl_complexF"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_get_n_rows(self, *args)

    def get_n_columns(self, *args):
        """get_n_columns(self, unsigned int colstart, unsigned int n) -> vnl_matrix_vcl_complexF"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_get_n_columns(self, *args)

    def set_identity(self):
        """set_identity(self)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_set_identity(self)

    def inplace_transpose(self):
        """inplace_transpose(self)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_inplace_transpose(self)

    def flipud(self):
        """flipud(self)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_flipud(self)

    def fliplr(self):
        """fliplr(self)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_fliplr(self)

    def normalize_rows(self):
        """normalize_rows(self)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_normalize_rows(self)

    def normalize_columns(self):
        """normalize_columns(self)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_normalize_columns(self)

    def scale_row(self, *args):
        """scale_row(self, unsigned int row, vcl_complexF value)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_scale_row(self, *args)

    def scale_column(self, *args):
        """scale_column(self, unsigned int col, vcl_complexF value)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_scale_column(self, *args)

    def swap(self, *args):
        """swap(self, vnl_matrix_vcl_complexF that)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_swap(self, *args)

    def array_one_norm(self):
        """array_one_norm(self) -> float"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_array_one_norm(self)

    def array_two_norm(self):
        """array_two_norm(self) -> float"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_array_two_norm(self)

    def array_inf_norm(self):
        """array_inf_norm(self) -> float"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_array_inf_norm(self)

    def absolute_value_sum(self):
        """absolute_value_sum(self) -> float"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_absolute_value_sum(self)

    def absolute_value_max(self):
        """absolute_value_max(self) -> float"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_absolute_value_max(self)

    def operator_one_norm(self):
        """operator_one_norm(self) -> float"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_operator_one_norm(self)

    def operator_inf_norm(self):
        """operator_inf_norm(self) -> float"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_operator_inf_norm(self)

    def frobenius_norm(self):
        """frobenius_norm(self) -> float"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_frobenius_norm(self)

    def fro_norm(self):
        """fro_norm(self) -> float"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_fro_norm(self)

    def rms(self):
        """rms(self) -> float"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_rms(self)

    def min_value(self):
        """min_value(self) -> vcl_complexF"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_min_value(self)

    def max_value(self):
        """max_value(self) -> vcl_complexF"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_max_value(self)

    def mean(self):
        """mean(self) -> vcl_complexF"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_mean(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_empty(self)

    def is_identity(self, *args):
        """
        is_identity(self) -> bool
        is_identity(self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_is_identity(self, *args)

    def is_zero(self, *args):
        """
        is_zero(self) -> bool
        is_zero(self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_is_zero(self, *args)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_is_finite(self)

    def has_nans(self):
        """has_nans(self) -> bool"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_has_nans(self)

    def assert_size(self, *args):
        """assert_size(self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_assert_finite(self)

    def read(*args):
        """read(istream s) -> vnl_matrix_vcl_complexF"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_read(*args)

    read = staticmethod(read)
    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_read_ascii(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> vcl_complexF
        data_block(self) -> vcl_complexF
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_data_block(self, *args)

    def data_array(self, *args):
        """
        data_array(self) -> vcl_complexF
        data_array(self) -> vcl_complexF
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_data_array(self, *args)

    def begin(self, *args):
        """
        begin(self) -> vcl_complexF
        begin(self) -> vcl_complexF
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> vcl_complexF
        end(self) -> vcl_complexF
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_end(self, *args)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_matrix_vcl_complexF rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_matrix_vcl_complexF that) -> bool"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_matrix_vcl_complexF that) -> bool"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF___ne__(self, *args)

    def _print(self, *args):
        """_print(self, ostream os)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF__print(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_clear(self)

    def set_size(self, *args):
        """set_size(self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexF_set_size(self, *args)

vnl_matrix_vcl_complexF.rows = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_rows,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.columns = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_columns,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.cols = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_cols,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.size = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_size,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.put = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_put,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.get = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_get,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF___call__,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.fill = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_fill,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_fill_diagonal,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_copy_in,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.set = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_set,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_copy_out,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF___idiv__,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF___iadd__,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF___isub__,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF___imul__,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF___neg__,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF___div__,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF___add__,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF___sub__,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF___mul__,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_transpose,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_conjugate_transpose,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.update = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_update,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_set_column,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_set_columns,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_set_row,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.extract = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_extract,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_get_row,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_get_column,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_get_n_rows,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_get_n_columns,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_set_identity,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_inplace_transpose,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_flipud,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_fliplr,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_normalize_rows,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_normalize_columns,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_scale_row,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_scale_column,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.swap = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_swap,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_array_one_norm,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_array_two_norm,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_array_inf_norm,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_absolute_value_sum,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_absolute_value_max,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_operator_one_norm,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_operator_inf_norm,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_frobenius_norm,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_fro_norm,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.rms = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_rms,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_min_value,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_max_value,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.mean = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_mean,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.empty = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_empty,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_is_identity,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_is_zero,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_is_finite,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_has_nans,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_assert_size,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_assert_finite,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_read_ascii,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_data_block,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_data_array,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.begin = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_begin,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.end = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_end,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_operator_eq,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF___eq__,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF___ne__,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF._print = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF__print,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.clear = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_clear,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexF_set_size,None,vnl_matrix_vcl_complexF)
vnl_matrix_vcl_complexF_swigregister = _vnl_matrixPython.vnl_matrix_vcl_complexF_swigregister
vnl_matrix_vcl_complexF_swigregister(vnl_matrix_vcl_complexF)

def vnl_matrix_vcl_complexF_read(*args):
  """vnl_matrix_vcl_complexF_read(istream s) -> vnl_matrix_vcl_complexF"""
  return _vnl_matrixPython.vnl_matrix_vcl_complexF_read(*args)

class vnl_matrix_vcl_complexLD(object):
    """Proxy of C++ vnl_matrix_vcl_complexLD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_matrix_vcl_complexLD
        __init__(self, unsigned int r, unsigned int c) -> vnl_matrix_vcl_complexLD
        __init__(self, unsigned int r, unsigned int c, vcl_complexLD v0) -> vnl_matrix_vcl_complexLD
        __init__(self, unsigned int r, unsigned int c, vnl_matrix_type t) -> vnl_matrix_vcl_complexLD
        __init__(self, unsigned int r, unsigned int c, unsigned int n, vcl_complexLD values) -> vnl_matrix_vcl_complexLD
        __init__(self, vcl_complexLD data_block, unsigned int r, unsigned int c) -> vnl_matrix_vcl_complexLD
        __init__(self, vnl_matrix_vcl_complexLD arg0) -> vnl_matrix_vcl_complexLD
        __init__(self, vnl_matrix_vcl_complexLD arg0, vnl_matrix_vcl_complexLD arg1, 
            vnl_tag_add arg2) -> vnl_matrix_vcl_complexLD
        __init__(self, vnl_matrix_vcl_complexLD arg0, vnl_matrix_vcl_complexLD arg1, 
            vnl_tag_sub arg2) -> vnl_matrix_vcl_complexLD
        __init__(self, vnl_matrix_vcl_complexLD arg0, vcl_complexLD arg1, 
            vnl_tag_mul arg2) -> vnl_matrix_vcl_complexLD
        __init__(self, vnl_matrix_vcl_complexLD arg0, vcl_complexLD arg1, 
            vnl_tag_div arg2) -> vnl_matrix_vcl_complexLD
        __init__(self, vnl_matrix_vcl_complexLD arg0, vcl_complexLD arg1, 
            vnl_tag_add arg2) -> vnl_matrix_vcl_complexLD
        __init__(self, vnl_matrix_vcl_complexLD arg0, vcl_complexLD arg1, 
            vnl_tag_sub arg2) -> vnl_matrix_vcl_complexLD
        __init__(self, vnl_matrix_vcl_complexLD arg0, vnl_matrix_vcl_complexLD arg1, 
            vnl_tag_mul arg2) -> vnl_matrix_vcl_complexLD
        __init__(self, vnl_matrix_vcl_complexLD that, vnl_tag_grab arg1) -> vnl_matrix_vcl_complexLD
        """
        _vnl_matrixPython.vnl_matrix_vcl_complexLD_swiginit(self,_vnl_matrixPython.new_vnl_matrix_vcl_complexLD(*args))
    __swig_destroy__ = _vnl_matrixPython.delete_vnl_matrix_vcl_complexLD
    def rows(self):
        """rows(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_rows(self)

    def columns(self):
        """columns(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_columns(self)

    def cols(self):
        """cols(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_cols(self)

    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_size(self)

    def put(self, *args):
        """put(self, unsigned int row, unsigned int column, vcl_complexLD value)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int row, unsigned int column) -> vcl_complexLD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_get(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int r, unsigned int c) -> vcl_complexLD
        __call__(self, unsigned int r, unsigned int c) -> vcl_complexLD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD___call__(self, *args)

    def fill(self, *args):
        """fill(self, vcl_complexLD arg0)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_fill(self, *args)

    def fill_diagonal(self, *args):
        """fill_diagonal(self, vcl_complexLD arg0)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_fill_diagonal(self, *args)

    def copy_in(self, *args):
        """copy_in(self, vcl_complexLD arg0)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_copy_in(self, *args)

    def set(self, *args):
        """set(self, vcl_complexLD d)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_set(self, *args)

    def copy_out(self, *args):
        """copy_out(self, vcl_complexLD arg0)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_copy_out(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, vcl_complexLD value) -> vnl_matrix_vcl_complexLD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, vcl_complexLD value) -> vnl_matrix_vcl_complexLD
        __iadd__(self, vnl_matrix_vcl_complexLD arg0) -> vnl_matrix_vcl_complexLD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, vcl_complexLD value) -> vnl_matrix_vcl_complexLD
        __isub__(self, vnl_matrix_vcl_complexLD arg0) -> vnl_matrix_vcl_complexLD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD___isub__(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, vcl_complexLD value) -> vnl_matrix_vcl_complexLD
        __imul__(self, vnl_matrix_vcl_complexLD rhs) -> vnl_matrix_vcl_complexLD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD___imul__(self, *args)

    def __neg__(self):
        """__neg__(self) -> vnl_matrix_vcl_complexLD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD___neg__(self)

    def __div__(self, *args):
        """__div__(self, vcl_complexLD v) -> vnl_matrix_vcl_complexLD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, vcl_complexLD v) -> vnl_matrix_vcl_complexLD
        __add__(self, vnl_matrix_vcl_complexLD rhs) -> vnl_matrix_vcl_complexLD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, vcl_complexLD v) -> vnl_matrix_vcl_complexLD
        __sub__(self, vnl_matrix_vcl_complexLD rhs) -> vnl_matrix_vcl_complexLD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, vcl_complexLD v) -> vnl_matrix_vcl_complexLD
        __mul__(self, vnl_matrix_vcl_complexLD rhs) -> vnl_matrix_vcl_complexLD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD___mul__(self, *args)

    def transpose(self):
        """transpose(self) -> vnl_matrix_vcl_complexLD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_transpose(self)

    def conjugate_transpose(self):
        """conjugate_transpose(self) -> vnl_matrix_vcl_complexLD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_conjugate_transpose(self)

    def update(self, *args):
        """
        update(self, vnl_matrix_vcl_complexLD arg0, unsigned int top = 0, 
            unsigned int left = 0) -> vnl_matrix_vcl_complexLD
        update(self, vnl_matrix_vcl_complexLD arg0, unsigned int top = 0) -> vnl_matrix_vcl_complexLD
        update(self, vnl_matrix_vcl_complexLD arg0) -> vnl_matrix_vcl_complexLD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_update(self, *args)

    def set_column(self, *args):
        """
        set_column(self, unsigned int i, vcl_complexLD v)
        set_column(self, unsigned int i, vcl_complexLD value)
        set_column(self, unsigned int j, vnl_vector_vcl_complexLD v)
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_set_column(self, *args)

    def set_columns(self, *args):
        """set_columns(self, unsigned int starting_column, vnl_matrix_vcl_complexLD M)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_set_columns(self, *args)

    def set_row(self, *args):
        """
        set_row(self, unsigned int i, vcl_complexLD v)
        set_row(self, unsigned int i, vcl_complexLD value)
        set_row(self, unsigned int i, vnl_vector_vcl_complexLD arg1)
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_set_row(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int r, unsigned int c, unsigned int top = 0, 
            unsigned int left = 0) -> vnl_matrix_vcl_complexLD
        extract(self, unsigned int r, unsigned int c, unsigned int top = 0) -> vnl_matrix_vcl_complexLD
        extract(self, unsigned int r, unsigned int c) -> vnl_matrix_vcl_complexLD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_extract(self, *args)

    def get_row(self, *args):
        """get_row(self, unsigned int r) -> vnl_vector_vcl_complexLD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_get_row(self, *args)

    def get_column(self, *args):
        """get_column(self, unsigned int c) -> vnl_vector_vcl_complexLD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_get_column(self, *args)

    def get_n_rows(self, *args):
        """get_n_rows(self, unsigned int rowstart, unsigned int n) -> vnl_matrix_vcl_complexLD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_get_n_rows(self, *args)

    def get_n_columns(self, *args):
        """get_n_columns(self, unsigned int colstart, unsigned int n) -> vnl_matrix_vcl_complexLD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_get_n_columns(self, *args)

    def set_identity(self):
        """set_identity(self)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_set_identity(self)

    def inplace_transpose(self):
        """inplace_transpose(self)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_inplace_transpose(self)

    def flipud(self):
        """flipud(self)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_flipud(self)

    def fliplr(self):
        """fliplr(self)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_fliplr(self)

    def normalize_rows(self):
        """normalize_rows(self)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_normalize_rows(self)

    def normalize_columns(self):
        """normalize_columns(self)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_normalize_columns(self)

    def scale_row(self, *args):
        """scale_row(self, unsigned int row, vcl_complexLD value)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_scale_row(self, *args)

    def scale_column(self, *args):
        """scale_column(self, unsigned int col, vcl_complexLD value)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_scale_column(self, *args)

    def swap(self, *args):
        """swap(self, vnl_matrix_vcl_complexLD that)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_swap(self, *args)

    def array_one_norm(self):
        """array_one_norm(self) -> long double"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_array_one_norm(self)

    def array_two_norm(self):
        """array_two_norm(self) -> long double"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_array_two_norm(self)

    def array_inf_norm(self):
        """array_inf_norm(self) -> long double"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_array_inf_norm(self)

    def absolute_value_sum(self):
        """absolute_value_sum(self) -> long double"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_absolute_value_sum(self)

    def absolute_value_max(self):
        """absolute_value_max(self) -> long double"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_absolute_value_max(self)

    def operator_one_norm(self):
        """operator_one_norm(self) -> long double"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_operator_one_norm(self)

    def operator_inf_norm(self):
        """operator_inf_norm(self) -> long double"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_operator_inf_norm(self)

    def frobenius_norm(self):
        """frobenius_norm(self) -> long double"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_frobenius_norm(self)

    def fro_norm(self):
        """fro_norm(self) -> long double"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_fro_norm(self)

    def rms(self):
        """rms(self) -> long double"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_rms(self)

    def min_value(self):
        """min_value(self) -> vcl_complexLD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_min_value(self)

    def max_value(self):
        """max_value(self) -> vcl_complexLD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_max_value(self)

    def mean(self):
        """mean(self) -> vcl_complexLD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_mean(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_empty(self)

    def is_identity(self, *args):
        """
        is_identity(self) -> bool
        is_identity(self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_is_identity(self, *args)

    def is_zero(self, *args):
        """
        is_zero(self) -> bool
        is_zero(self, double tol) -> bool
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_is_zero(self, *args)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_is_finite(self)

    def has_nans(self):
        """has_nans(self) -> bool"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_has_nans(self)

    def assert_size(self, *args):
        """assert_size(self, unsigned int r, unsigned int c)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_assert_finite(self)

    def read(*args):
        """read(istream s) -> vnl_matrix_vcl_complexLD"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_read(*args)

    read = staticmethod(read)
    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_read_ascii(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> vcl_complexLD
        data_block(self) -> vcl_complexLD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_data_block(self, *args)

    def data_array(self, *args):
        """
        data_array(self) -> vcl_complexLD
        data_array(self) -> vcl_complexLD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_data_array(self, *args)

    def begin(self, *args):
        """
        begin(self) -> vcl_complexLD
        begin(self) -> vcl_complexLD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> vcl_complexLD
        end(self) -> vcl_complexLD
        """
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_end(self, *args)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_matrix_vcl_complexLD rhs) -> bool"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_matrix_vcl_complexLD that) -> bool"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_matrix_vcl_complexLD that) -> bool"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD___ne__(self, *args)

    def _print(self, *args):
        """_print(self, ostream os)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD__print(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_clear(self)

    def set_size(self, *args):
        """set_size(self, unsigned int r, unsigned int c) -> bool"""
        return _vnl_matrixPython.vnl_matrix_vcl_complexLD_set_size(self, *args)

vnl_matrix_vcl_complexLD.rows = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_rows,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.columns = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_columns,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.cols = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_cols,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.size = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_size,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.put = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_put,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.get = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_get,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.__call__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD___call__,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.fill = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_fill,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.fill_diagonal = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_fill_diagonal,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.copy_in = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_copy_in,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.set = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_set,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.copy_out = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_copy_out,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.__idiv__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD___idiv__,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.__iadd__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD___iadd__,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.__isub__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD___isub__,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.__imul__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD___imul__,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.__neg__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD___neg__,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.__div__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD___div__,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.__add__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD___add__,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.__sub__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD___sub__,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.__mul__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD___mul__,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.transpose = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_transpose,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.conjugate_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_conjugate_transpose,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.update = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_update,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.set_column = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_set_column,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.set_columns = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_set_columns,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.set_row = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_set_row,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.extract = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_extract,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.get_row = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_get_row,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.get_column = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_get_column,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.get_n_rows = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_get_n_rows,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.get_n_columns = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_get_n_columns,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.set_identity = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_set_identity,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.inplace_transpose = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_inplace_transpose,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.flipud = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_flipud,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.fliplr = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_fliplr,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.normalize_rows = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_normalize_rows,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.normalize_columns = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_normalize_columns,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.scale_row = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_scale_row,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.scale_column = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_scale_column,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.swap = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_swap,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.array_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_array_one_norm,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.array_two_norm = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_array_two_norm,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.array_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_array_inf_norm,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.absolute_value_sum = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_absolute_value_sum,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.absolute_value_max = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_absolute_value_max,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.operator_one_norm = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_operator_one_norm,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.operator_inf_norm = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_operator_inf_norm,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.frobenius_norm = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_frobenius_norm,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.fro_norm = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_fro_norm,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.rms = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_rms,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.min_value = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_min_value,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.max_value = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_max_value,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.mean = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_mean,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.empty = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_empty,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.is_identity = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_is_identity,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.is_zero = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_is_zero,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.is_finite = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_is_finite,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.has_nans = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_has_nans,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.assert_size = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_assert_size,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.assert_finite = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_assert_finite,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.read_ascii = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_read_ascii,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.data_block = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_data_block,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.data_array = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_data_array,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.begin = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_begin,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.end = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_end,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.operator_eq = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_operator_eq,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.__eq__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD___eq__,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.__ne__ = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD___ne__,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD._print = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD__print,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.clear = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_clear,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD.set_size = new_instancemethod(_vnl_matrixPython.vnl_matrix_vcl_complexLD_set_size,None,vnl_matrix_vcl_complexLD)
vnl_matrix_vcl_complexLD_swigregister = _vnl_matrixPython.vnl_matrix_vcl_complexLD_swigregister
vnl_matrix_vcl_complexLD_swigregister(vnl_matrix_vcl_complexLD)

def vnl_matrix_vcl_complexLD_read(*args):
  """vnl_matrix_vcl_complexLD_read(istream s) -> vnl_matrix_vcl_complexLD"""
  return _vnl_matrixPython.vnl_matrix_vcl_complexLD_read(*args)



