# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkMeanReciprocalSquareDifferenceImageToImageMetricPython', [dirname(__file__)])
        except ImportError:
            import _itkMeanReciprocalSquareDifferenceImageToImageMetricPython
            return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkMeanReciprocalSquareDifferenceImageToImageMetricPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkMeanReciprocalSquareDifferenceImageToImageMetricPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkMeanReciprocalSquareDifferenceImageToImageMetricPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import ITKCommonBasePython
import itkEventObjectsPython
import pyBasePython
import itkArrayPython
import vnl_vectorPython
import vcl_complexPython
import vnl_matrixPython
import itkImageToImageMetricPython
import itkCovariantVectorPython
import itkFixedArrayPython
import itkVectorPython
import vnl_vector_refPython
import itkPointPython
import ITKRegionsPython
import itkSizePython
import itkIndexPython
import itkOffsetPython
import itkTransformPython
import itkArray2DPython
import itkImagePython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkRGBPixelPython
import itkSpatialObjectBasePython
import itkSpatialObjectPropertyPython
import itkScalableAffineTransformPython
import itkAffineTransformPython
import itkMatrixOffsetTransformBasePython
import itkAffineGeometryFramePython
import itkBoundingBoxPython
import itkMapContainerPython
import itkVectorContainerPython
import itkContinuousIndexPython
import itkLevelSetPython
import ITKCostFunctionsPython
import vnl_least_squares_functionPython
import vnl_cost_functionPython
import vnl_unary_functionPython
import itkInterpolateImageFunctionPython
import itkImageFunctionPython
import itkFunctionBasePython
def itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_New():
  return itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3.New()

def itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_New():
  return itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2.New()

def itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_New():
  return itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.New()

def itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_New():
  return itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.New()

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_New():
  return itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.New()

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_New():
  return itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.New()

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_New():
  return itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3.New()

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_New():
  return itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2.New()

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_New():
  return itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.New()

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_New():
  return itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.New()

class itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2(itkImageToImageMetricPython.itkImageToImageMetricID2ID2):
    """Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetLambda(self):
        """GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_GetLambda(self)

    def SetLambda(self, *args):
        """SetLambda(self, double _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_SetLambda(self, *args)

    def GetDelta(self):
        """GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_GetDelta(self)

    def SetDelta(self, *args):
        """SetDelta(self, double _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_SetDelta(self, *args)

    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2
    def cast(*args):
        """cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2
        
        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2.GetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_GetLambda,None,itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2)
itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2.SetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_SetLambda,None,itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2)
itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2.GetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_GetDelta,None,itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2)
itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2.SetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_SetDelta,None,itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2)
itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2.GetPointer = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_GetPointer,None,itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2)
itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_swigregister = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_swigregister
itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2)

def itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2___New_orig__():
  """itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2___New_orig__()"""
  return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2___New_orig__()

def itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_cast(*args):
  """itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2"""
  return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_cast(*args)

class itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3(itkImageToImageMetricPython.itkImageToImageMetricID3ID3):
    """Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetLambda(self):
        """GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_GetLambda(self)

    def SetLambda(self, *args):
        """SetLambda(self, double _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_SetLambda(self, *args)

    def GetDelta(self):
        """GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_GetDelta(self)

    def SetDelta(self, *args):
        """SetDelta(self, double _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_SetDelta(self, *args)

    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3
    def cast(*args):
        """cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3
        
        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3.GetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_GetLambda,None,itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3)
itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3.SetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_SetLambda,None,itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3)
itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3.GetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_GetDelta,None,itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3)
itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3.SetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_SetDelta,None,itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3)
itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3.GetPointer = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_GetPointer,None,itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3)
itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_swigregister = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_swigregister
itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3)

def itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3___New_orig__():
  """itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3___New_orig__()"""
  return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3___New_orig__()

def itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_cast(*args):
  """itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3"""
  return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_cast(*args)

class itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2(itkImageToImageMetricPython.itkImageToImageMetricIF2IF2):
    """Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetLambda(self):
        """GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_GetLambda(self)

    def SetLambda(self, *args):
        """SetLambda(self, double _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_SetLambda(self, *args)

    def GetDelta(self):
        """GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_GetDelta(self)

    def SetDelta(self, *args):
        """SetDelta(self, double _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_SetDelta(self, *args)

    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2
    def cast(*args):
        """cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2
        
        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.GetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_GetLambda,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.SetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_SetLambda,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.GetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_GetDelta,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.SetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_SetDelta,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2.GetPointer = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_GetPointer,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_swigregister = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_swigregister
itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2)

def itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2___New_orig__():
  """itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2___New_orig__()"""
  return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2___New_orig__()

def itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_cast(*args):
  """itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2"""
  return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_cast(*args)

class itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3(itkImageToImageMetricPython.itkImageToImageMetricIF3IF3):
    """Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetLambda(self):
        """GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_GetLambda(self)

    def SetLambda(self, *args):
        """SetLambda(self, double _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_SetLambda(self, *args)

    def GetDelta(self):
        """GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_GetDelta(self)

    def SetDelta(self, *args):
        """SetDelta(self, double _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_SetDelta(self, *args)

    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3
    def cast(*args):
        """cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3
        
        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.GetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_GetLambda,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.SetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_SetLambda,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.GetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_GetDelta,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.SetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_SetDelta,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3.GetPointer = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_GetPointer,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_swigregister = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_swigregister
itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3)

def itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3___New_orig__():
  """itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3___New_orig__()"""
  return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3___New_orig__()

def itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_cast(*args):
  """itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3"""
  return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_cast(*args)

class itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2(itkImageToImageMetricPython.itkImageToImageMetricIUC2IUC2):
    """Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetLambda(self):
        """GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_GetLambda(self)

    def SetLambda(self, *args):
        """SetLambda(self, double _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_SetLambda(self, *args)

    def GetDelta(self):
        """GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_GetDelta(self)

    def SetDelta(self, *args):
        """SetDelta(self, double _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_SetDelta(self, *args)

    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2
    def cast(*args):
        """cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2
        
        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.GetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_GetLambda,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.SetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_SetLambda,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.GetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_GetDelta,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.SetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_SetDelta,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2.GetPointer = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_GetPointer,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_swigregister = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_swigregister
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2)

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2___New_orig__():
  """itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2___New_orig__()"""
  return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2___New_orig__()

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_cast(*args):
  """itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2"""
  return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_cast(*args)

class itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3(itkImageToImageMetricPython.itkImageToImageMetricIUC3IUC3):
    """Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetLambda(self):
        """GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_GetLambda(self)

    def SetLambda(self, *args):
        """SetLambda(self, double _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_SetLambda(self, *args)

    def GetDelta(self):
        """GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_GetDelta(self)

    def SetDelta(self, *args):
        """SetDelta(self, double _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_SetDelta(self, *args)

    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3
    def cast(*args):
        """cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3
        
        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.GetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_GetLambda,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.SetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_SetLambda,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.GetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_GetDelta,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.SetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_SetDelta,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3.GetPointer = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_GetPointer,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_swigregister = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_swigregister
itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3)

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3___New_orig__():
  """itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3___New_orig__()"""
  return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3___New_orig__()

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_cast(*args):
  """itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3"""
  return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_cast(*args)

class itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2(itkImageToImageMetricPython.itkImageToImageMetricIUL2IUL2):
    """Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetLambda(self):
        """GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_GetLambda(self)

    def SetLambda(self, *args):
        """SetLambda(self, double _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_SetLambda(self, *args)

    def GetDelta(self):
        """GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_GetDelta(self)

    def SetDelta(self, *args):
        """SetDelta(self, double _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_SetDelta(self, *args)

    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2
    def cast(*args):
        """cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2
        
        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2.GetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_GetLambda,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2.SetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_SetLambda,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2.GetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_GetDelta,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2.SetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_SetDelta,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2.GetPointer = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_GetPointer,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_swigregister = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_swigregister
itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2)

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2___New_orig__():
  """itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2___New_orig__()"""
  return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2___New_orig__()

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_cast(*args):
  """itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2"""
  return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_cast(*args)

class itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3(itkImageToImageMetricPython.itkImageToImageMetricIUL3IUL3):
    """Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetLambda(self):
        """GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_GetLambda(self)

    def SetLambda(self, *args):
        """SetLambda(self, double _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_SetLambda(self, *args)

    def GetDelta(self):
        """GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_GetDelta(self)

    def SetDelta(self, *args):
        """SetDelta(self, double _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_SetDelta(self, *args)

    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3
    def cast(*args):
        """cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3
        
        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3.GetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_GetLambda,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3.SetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_SetLambda,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3.GetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_GetDelta,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3.SetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_SetDelta,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3.GetPointer = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_GetPointer,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_swigregister = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_swigregister
itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3)

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3___New_orig__():
  """itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3___New_orig__()"""
  return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3___New_orig__()

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_cast(*args):
  """itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3"""
  return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_cast(*args)

class itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2(itkImageToImageMetricPython.itkImageToImageMetricIUS2IUS2):
    """Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetLambda(self):
        """GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_GetLambda(self)

    def SetLambda(self, *args):
        """SetLambda(self, double _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_SetLambda(self, *args)

    def GetDelta(self):
        """GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_GetDelta(self)

    def SetDelta(self, *args):
        """SetDelta(self, double _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_SetDelta(self, *args)

    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2
    def cast(*args):
        """cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2
        
        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.GetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_GetLambda,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.SetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_SetLambda,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.GetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_GetDelta,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.SetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_SetDelta,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2.GetPointer = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_GetPointer,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_swigregister = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_swigregister
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2)

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2___New_orig__():
  """itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2___New_orig__()"""
  return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2___New_orig__()

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_cast(*args):
  """itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2"""
  return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_cast(*args)

class itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3(itkImageToImageMetricPython.itkImageToImageMetricIUS3IUS3):
    """Proxy of C++ itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def __New_orig__():
        """__New_orig__()"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetLambda(self):
        """GetLambda(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_GetLambda(self)

    def SetLambda(self, *args):
        """SetLambda(self, double _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_SetLambda(self, *args)

    def GetDelta(self):
        """GetDelta(self) -> double"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_GetDelta(self)

    def SetDelta(self, *args):
        """SetDelta(self, double _arg)"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_SetDelta(self, *args)

    __swig_destroy__ = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.delete_itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3
    def cast(*args):
        """cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3"""
        return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3
        
        Create a new object of the class itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.GetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_GetLambda,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.SetLambda = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_SetLambda,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.GetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_GetDelta,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.SetDelta = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_SetDelta,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3.GetPointer = new_instancemethod(_itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_GetPointer,None,itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3)
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_swigregister = _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_swigregister
itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_swigregister(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3)

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3___New_orig__():
  """itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3___New_orig__()"""
  return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3___New_orig__()

def itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_cast(*args):
  """itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_cast(itkLightObject obj) -> itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3"""
  return _itkMeanReciprocalSquareDifferenceImageToImageMetricPython.itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_cast(*args)



