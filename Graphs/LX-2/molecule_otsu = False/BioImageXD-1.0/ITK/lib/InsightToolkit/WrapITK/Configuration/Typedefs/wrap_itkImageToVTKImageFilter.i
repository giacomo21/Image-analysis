// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkImageToVTKImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkImageToVTKImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkImageToVTKImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkImageToVTKImageFilterJava
#endif
#ifdef SWIGLUA
%module itkImageToVTKImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkImageToVTKImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkImageToVTKImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkImageToVTKImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkImageToVTKImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkImageToVTKImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkImageToVTKImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkImageToVTKImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkImageToVTKImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkImageToVTKImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkImageToVTKImageFilterPython
#endif
#ifdef SWIGR
%module itkImageToVTKImageFilterR
#endif
#ifdef SWIGRUBY
%module itkImageToVTKImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkImageToVTKImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkImageToVTKImageFilterTcl
#endif
#ifdef SWIGXML
%module itkImageToVTKImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "SimpleFilters.includes"
#include "Mesh.includes"
#include "ItkVtkGlue.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkImage.i
%import wrap_itkVTKImageExport.i


%include itk.i
%include itkvtk.swg
%include wrap_itkImageToVTKImageFilter_ext.i


 class itkImageToVTKImageFilterID2 : public itkProcessObject {
   public:
     static itkImageToVTKImageFilterID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     vtkImageData * GetOutput() const;
     void SetInput(itkImageD2 const * arg0);
     vtkImageImport * GetImporter() const;
     itkVTKImageExportID2 * GetExporter() const;
     virtual void Update();
   private:
     itkImageToVTKImageFilterID2(itkImageToVTKImageFilterID2 const & arg0);
     void operator=(itkImageToVTKImageFilterID2 const & arg0);
   protected:
     itkImageToVTKImageFilterID2();
     ~itkImageToVTKImageFilterID2();
 };


 class itkImageToVTKImageFilterID2_Pointer {
   public:
     itkImageToVTKImageFilterID2_Pointer();
     itkImageToVTKImageFilterID2_Pointer(itkImageToVTKImageFilterID2_Pointer const & p);
     itkImageToVTKImageFilterID2_Pointer(itkImageToVTKImageFilterID2 * p);
     ~itkImageToVTKImageFilterID2_Pointer();
     itkImageToVTKImageFilterID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToVTKImageFilterID2 * GetPointer() const;
     bool operator<(itkImageToVTKImageFilterID2_Pointer const & r) const;
     bool operator>(itkImageToVTKImageFilterID2_Pointer const & r) const;
     bool operator<=(itkImageToVTKImageFilterID2_Pointer const & r) const;
     bool operator>=(itkImageToVTKImageFilterID2_Pointer const & r) const;
     itkImageToVTKImageFilterID2_Pointer & operator=(itkImageToVTKImageFilterID2_Pointer const & r);
     itkImageToVTKImageFilterID2_Pointer & operator=(itkImageToVTKImageFilterID2 * r);
     itkImageToVTKImageFilterID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToVTKImageFilterID3 : public itkProcessObject {
   public:
     static itkImageToVTKImageFilterID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     vtkImageData * GetOutput() const;
     void SetInput(itkImageD3 const * arg0);
     vtkImageImport * GetImporter() const;
     itkVTKImageExportID3 * GetExporter() const;
     virtual void Update();
   private:
     itkImageToVTKImageFilterID3(itkImageToVTKImageFilterID3 const & arg0);
     void operator=(itkImageToVTKImageFilterID3 const & arg0);
   protected:
     itkImageToVTKImageFilterID3();
     ~itkImageToVTKImageFilterID3();
 };


 class itkImageToVTKImageFilterID3_Pointer {
   public:
     itkImageToVTKImageFilterID3_Pointer();
     itkImageToVTKImageFilterID3_Pointer(itkImageToVTKImageFilterID3_Pointer const & p);
     itkImageToVTKImageFilterID3_Pointer(itkImageToVTKImageFilterID3 * p);
     ~itkImageToVTKImageFilterID3_Pointer();
     itkImageToVTKImageFilterID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToVTKImageFilterID3 * GetPointer() const;
     bool operator<(itkImageToVTKImageFilterID3_Pointer const & r) const;
     bool operator>(itkImageToVTKImageFilterID3_Pointer const & r) const;
     bool operator<=(itkImageToVTKImageFilterID3_Pointer const & r) const;
     bool operator>=(itkImageToVTKImageFilterID3_Pointer const & r) const;
     itkImageToVTKImageFilterID3_Pointer & operator=(itkImageToVTKImageFilterID3_Pointer const & r);
     itkImageToVTKImageFilterID3_Pointer & operator=(itkImageToVTKImageFilterID3 * r);
     itkImageToVTKImageFilterID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToVTKImageFilterIF2 : public itkProcessObject {
   public:
     static itkImageToVTKImageFilterIF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     vtkImageData * GetOutput() const;
     void SetInput(itkImageF2 const * arg0);
     vtkImageImport * GetImporter() const;
     itkVTKImageExportIF2 * GetExporter() const;
     virtual void Update();
   private:
     itkImageToVTKImageFilterIF2(itkImageToVTKImageFilterIF2 const & arg0);
     void operator=(itkImageToVTKImageFilterIF2 const & arg0);
   protected:
     itkImageToVTKImageFilterIF2();
     ~itkImageToVTKImageFilterIF2();
 };


 class itkImageToVTKImageFilterIF2_Pointer {
   public:
     itkImageToVTKImageFilterIF2_Pointer();
     itkImageToVTKImageFilterIF2_Pointer(itkImageToVTKImageFilterIF2_Pointer const & p);
     itkImageToVTKImageFilterIF2_Pointer(itkImageToVTKImageFilterIF2 * p);
     ~itkImageToVTKImageFilterIF2_Pointer();
     itkImageToVTKImageFilterIF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToVTKImageFilterIF2 * GetPointer() const;
     bool operator<(itkImageToVTKImageFilterIF2_Pointer const & r) const;
     bool operator>(itkImageToVTKImageFilterIF2_Pointer const & r) const;
     bool operator<=(itkImageToVTKImageFilterIF2_Pointer const & r) const;
     bool operator>=(itkImageToVTKImageFilterIF2_Pointer const & r) const;
     itkImageToVTKImageFilterIF2_Pointer & operator=(itkImageToVTKImageFilterIF2_Pointer const & r);
     itkImageToVTKImageFilterIF2_Pointer & operator=(itkImageToVTKImageFilterIF2 * r);
     itkImageToVTKImageFilterIF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToVTKImageFilterIF3 : public itkProcessObject {
   public:
     static itkImageToVTKImageFilterIF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     vtkImageData * GetOutput() const;
     void SetInput(itkImageF3 const * arg0);
     vtkImageImport * GetImporter() const;
     itkVTKImageExportIF3 * GetExporter() const;
     virtual void Update();
   private:
     itkImageToVTKImageFilterIF3(itkImageToVTKImageFilterIF3 const & arg0);
     void operator=(itkImageToVTKImageFilterIF3 const & arg0);
   protected:
     itkImageToVTKImageFilterIF3();
     ~itkImageToVTKImageFilterIF3();
 };


 class itkImageToVTKImageFilterIF3_Pointer {
   public:
     itkImageToVTKImageFilterIF3_Pointer();
     itkImageToVTKImageFilterIF3_Pointer(itkImageToVTKImageFilterIF3_Pointer const & p);
     itkImageToVTKImageFilterIF3_Pointer(itkImageToVTKImageFilterIF3 * p);
     ~itkImageToVTKImageFilterIF3_Pointer();
     itkImageToVTKImageFilterIF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToVTKImageFilterIF3 * GetPointer() const;
     bool operator<(itkImageToVTKImageFilterIF3_Pointer const & r) const;
     bool operator>(itkImageToVTKImageFilterIF3_Pointer const & r) const;
     bool operator<=(itkImageToVTKImageFilterIF3_Pointer const & r) const;
     bool operator>=(itkImageToVTKImageFilterIF3_Pointer const & r) const;
     itkImageToVTKImageFilterIF3_Pointer & operator=(itkImageToVTKImageFilterIF3_Pointer const & r);
     itkImageToVTKImageFilterIF3_Pointer & operator=(itkImageToVTKImageFilterIF3 * r);
     itkImageToVTKImageFilterIF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToVTKImageFilterIUC2 : public itkProcessObject {
   public:
     static itkImageToVTKImageFilterIUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     vtkImageData * GetOutput() const;
     void SetInput(itkImageUC2 const * arg0);
     vtkImageImport * GetImporter() const;
     itkVTKImageExportIUC2 * GetExporter() const;
     virtual void Update();
   private:
     itkImageToVTKImageFilterIUC2(itkImageToVTKImageFilterIUC2 const & arg0);
     void operator=(itkImageToVTKImageFilterIUC2 const & arg0);
   protected:
     itkImageToVTKImageFilterIUC2();
     ~itkImageToVTKImageFilterIUC2();
 };


 class itkImageToVTKImageFilterIUC2_Pointer {
   public:
     itkImageToVTKImageFilterIUC2_Pointer();
     itkImageToVTKImageFilterIUC2_Pointer(itkImageToVTKImageFilterIUC2_Pointer const & p);
     itkImageToVTKImageFilterIUC2_Pointer(itkImageToVTKImageFilterIUC2 * p);
     ~itkImageToVTKImageFilterIUC2_Pointer();
     itkImageToVTKImageFilterIUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToVTKImageFilterIUC2 * GetPointer() const;
     bool operator<(itkImageToVTKImageFilterIUC2_Pointer const & r) const;
     bool operator>(itkImageToVTKImageFilterIUC2_Pointer const & r) const;
     bool operator<=(itkImageToVTKImageFilterIUC2_Pointer const & r) const;
     bool operator>=(itkImageToVTKImageFilterIUC2_Pointer const & r) const;
     itkImageToVTKImageFilterIUC2_Pointer & operator=(itkImageToVTKImageFilterIUC2_Pointer const & r);
     itkImageToVTKImageFilterIUC2_Pointer & operator=(itkImageToVTKImageFilterIUC2 * r);
     itkImageToVTKImageFilterIUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToVTKImageFilterIUC3 : public itkProcessObject {
   public:
     static itkImageToVTKImageFilterIUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     vtkImageData * GetOutput() const;
     void SetInput(itkImageUC3 const * arg0);
     vtkImageImport * GetImporter() const;
     itkVTKImageExportIUC3 * GetExporter() const;
     virtual void Update();
   private:
     itkImageToVTKImageFilterIUC3(itkImageToVTKImageFilterIUC3 const & arg0);
     void operator=(itkImageToVTKImageFilterIUC3 const & arg0);
   protected:
     itkImageToVTKImageFilterIUC3();
     ~itkImageToVTKImageFilterIUC3();
 };


 class itkImageToVTKImageFilterIUC3_Pointer {
   public:
     itkImageToVTKImageFilterIUC3_Pointer();
     itkImageToVTKImageFilterIUC3_Pointer(itkImageToVTKImageFilterIUC3_Pointer const & p);
     itkImageToVTKImageFilterIUC3_Pointer(itkImageToVTKImageFilterIUC3 * p);
     ~itkImageToVTKImageFilterIUC3_Pointer();
     itkImageToVTKImageFilterIUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToVTKImageFilterIUC3 * GetPointer() const;
     bool operator<(itkImageToVTKImageFilterIUC3_Pointer const & r) const;
     bool operator>(itkImageToVTKImageFilterIUC3_Pointer const & r) const;
     bool operator<=(itkImageToVTKImageFilterIUC3_Pointer const & r) const;
     bool operator>=(itkImageToVTKImageFilterIUC3_Pointer const & r) const;
     itkImageToVTKImageFilterIUC3_Pointer & operator=(itkImageToVTKImageFilterIUC3_Pointer const & r);
     itkImageToVTKImageFilterIUC3_Pointer & operator=(itkImageToVTKImageFilterIUC3 * r);
     itkImageToVTKImageFilterIUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToVTKImageFilterIUL2 : public itkProcessObject {
   public:
     static itkImageToVTKImageFilterIUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     vtkImageData * GetOutput() const;
     void SetInput(itkImageUL2 const * arg0);
     vtkImageImport * GetImporter() const;
     itkVTKImageExportIUL2 * GetExporter() const;
     virtual void Update();
   private:
     itkImageToVTKImageFilterIUL2(itkImageToVTKImageFilterIUL2 const & arg0);
     void operator=(itkImageToVTKImageFilterIUL2 const & arg0);
   protected:
     itkImageToVTKImageFilterIUL2();
     ~itkImageToVTKImageFilterIUL2();
 };


 class itkImageToVTKImageFilterIUL2_Pointer {
   public:
     itkImageToVTKImageFilterIUL2_Pointer();
     itkImageToVTKImageFilterIUL2_Pointer(itkImageToVTKImageFilterIUL2_Pointer const & p);
     itkImageToVTKImageFilterIUL2_Pointer(itkImageToVTKImageFilterIUL2 * p);
     ~itkImageToVTKImageFilterIUL2_Pointer();
     itkImageToVTKImageFilterIUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToVTKImageFilterIUL2 * GetPointer() const;
     bool operator<(itkImageToVTKImageFilterIUL2_Pointer const & r) const;
     bool operator>(itkImageToVTKImageFilterIUL2_Pointer const & r) const;
     bool operator<=(itkImageToVTKImageFilterIUL2_Pointer const & r) const;
     bool operator>=(itkImageToVTKImageFilterIUL2_Pointer const & r) const;
     itkImageToVTKImageFilterIUL2_Pointer & operator=(itkImageToVTKImageFilterIUL2_Pointer const & r);
     itkImageToVTKImageFilterIUL2_Pointer & operator=(itkImageToVTKImageFilterIUL2 * r);
     itkImageToVTKImageFilterIUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToVTKImageFilterIUL3 : public itkProcessObject {
   public:
     static itkImageToVTKImageFilterIUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     vtkImageData * GetOutput() const;
     void SetInput(itkImageUL3 const * arg0);
     vtkImageImport * GetImporter() const;
     itkVTKImageExportIUL3 * GetExporter() const;
     virtual void Update();
   private:
     itkImageToVTKImageFilterIUL3(itkImageToVTKImageFilterIUL3 const & arg0);
     void operator=(itkImageToVTKImageFilterIUL3 const & arg0);
   protected:
     itkImageToVTKImageFilterIUL3();
     ~itkImageToVTKImageFilterIUL3();
 };


 class itkImageToVTKImageFilterIUL3_Pointer {
   public:
     itkImageToVTKImageFilterIUL3_Pointer();
     itkImageToVTKImageFilterIUL3_Pointer(itkImageToVTKImageFilterIUL3_Pointer const & p);
     itkImageToVTKImageFilterIUL3_Pointer(itkImageToVTKImageFilterIUL3 * p);
     ~itkImageToVTKImageFilterIUL3_Pointer();
     itkImageToVTKImageFilterIUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToVTKImageFilterIUL3 * GetPointer() const;
     bool operator<(itkImageToVTKImageFilterIUL3_Pointer const & r) const;
     bool operator>(itkImageToVTKImageFilterIUL3_Pointer const & r) const;
     bool operator<=(itkImageToVTKImageFilterIUL3_Pointer const & r) const;
     bool operator>=(itkImageToVTKImageFilterIUL3_Pointer const & r) const;
     itkImageToVTKImageFilterIUL3_Pointer & operator=(itkImageToVTKImageFilterIUL3_Pointer const & r);
     itkImageToVTKImageFilterIUL3_Pointer & operator=(itkImageToVTKImageFilterIUL3 * r);
     itkImageToVTKImageFilterIUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToVTKImageFilterIUS2 : public itkProcessObject {
   public:
     static itkImageToVTKImageFilterIUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     vtkImageData * GetOutput() const;
     void SetInput(itkImageUS2 const * arg0);
     vtkImageImport * GetImporter() const;
     itkVTKImageExportIUS2 * GetExporter() const;
     virtual void Update();
   private:
     itkImageToVTKImageFilterIUS2(itkImageToVTKImageFilterIUS2 const & arg0);
     void operator=(itkImageToVTKImageFilterIUS2 const & arg0);
   protected:
     itkImageToVTKImageFilterIUS2();
     ~itkImageToVTKImageFilterIUS2();
 };


 class itkImageToVTKImageFilterIUS2_Pointer {
   public:
     itkImageToVTKImageFilterIUS2_Pointer();
     itkImageToVTKImageFilterIUS2_Pointer(itkImageToVTKImageFilterIUS2_Pointer const & p);
     itkImageToVTKImageFilterIUS2_Pointer(itkImageToVTKImageFilterIUS2 * p);
     ~itkImageToVTKImageFilterIUS2_Pointer();
     itkImageToVTKImageFilterIUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToVTKImageFilterIUS2 * GetPointer() const;
     bool operator<(itkImageToVTKImageFilterIUS2_Pointer const & r) const;
     bool operator>(itkImageToVTKImageFilterIUS2_Pointer const & r) const;
     bool operator<=(itkImageToVTKImageFilterIUS2_Pointer const & r) const;
     bool operator>=(itkImageToVTKImageFilterIUS2_Pointer const & r) const;
     itkImageToVTKImageFilterIUS2_Pointer & operator=(itkImageToVTKImageFilterIUS2_Pointer const & r);
     itkImageToVTKImageFilterIUS2_Pointer & operator=(itkImageToVTKImageFilterIUS2 * r);
     itkImageToVTKImageFilterIUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageToVTKImageFilterIUS3 : public itkProcessObject {
   public:
     static itkImageToVTKImageFilterIUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     vtkImageData * GetOutput() const;
     void SetInput(itkImageUS3 const * arg0);
     vtkImageImport * GetImporter() const;
     itkVTKImageExportIUS3 * GetExporter() const;
     virtual void Update();
   private:
     itkImageToVTKImageFilterIUS3(itkImageToVTKImageFilterIUS3 const & arg0);
     void operator=(itkImageToVTKImageFilterIUS3 const & arg0);
   protected:
     itkImageToVTKImageFilterIUS3();
     ~itkImageToVTKImageFilterIUS3();
 };


 class itkImageToVTKImageFilterIUS3_Pointer {
   public:
     itkImageToVTKImageFilterIUS3_Pointer();
     itkImageToVTKImageFilterIUS3_Pointer(itkImageToVTKImageFilterIUS3_Pointer const & p);
     itkImageToVTKImageFilterIUS3_Pointer(itkImageToVTKImageFilterIUS3 * p);
     ~itkImageToVTKImageFilterIUS3_Pointer();
     itkImageToVTKImageFilterIUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageToVTKImageFilterIUS3 * GetPointer() const;
     bool operator<(itkImageToVTKImageFilterIUS3_Pointer const & r) const;
     bool operator>(itkImageToVTKImageFilterIUS3_Pointer const & r) const;
     bool operator<=(itkImageToVTKImageFilterIUS3_Pointer const & r) const;
     bool operator>=(itkImageToVTKImageFilterIUS3_Pointer const & r) const;
     itkImageToVTKImageFilterIUS3_Pointer & operator=(itkImageToVTKImageFilterIUS3_Pointer const & r);
     itkImageToVTKImageFilterIUS3_Pointer & operator=(itkImageToVTKImageFilterIUS3 * r);
     itkImageToVTKImageFilterIUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


