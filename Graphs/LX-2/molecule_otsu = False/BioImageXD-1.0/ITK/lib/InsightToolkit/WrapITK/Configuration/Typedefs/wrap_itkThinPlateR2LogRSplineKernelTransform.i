// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkThinPlateR2LogRSplineKernelTransformChicken
#endif
#ifdef SWIGCSHARP
%module itkThinPlateR2LogRSplineKernelTransformCsharp
#endif
#ifdef SWIGGUILE
%module itkThinPlateR2LogRSplineKernelTransformGuile
#endif
#ifdef SWIGJAVA
%module itkThinPlateR2LogRSplineKernelTransformJava
#endif
#ifdef SWIGLUA
%module itkThinPlateR2LogRSplineKernelTransformLua
#endif
#ifdef SWIGMODULA3
%module itkThinPlateR2LogRSplineKernelTransformModula3
#endif
#ifdef SWIGMZSCHEME
%module itkThinPlateR2LogRSplineKernelTransformMzscheme
#endif
#ifdef SWIGOCAML
%module itkThinPlateR2LogRSplineKernelTransformOcaml
#endif
#ifdef SWIGPERL
%module itkThinPlateR2LogRSplineKernelTransformPerl
#endif
#ifdef SWIGPERL5
%module itkThinPlateR2LogRSplineKernelTransformPerl5
#endif
#ifdef SWIGPHP
%module itkThinPlateR2LogRSplineKernelTransformPhp
#endif
#ifdef SWIGPHP4
%module itkThinPlateR2LogRSplineKernelTransformPhp4
#endif
#ifdef SWIGPHP5
%module itkThinPlateR2LogRSplineKernelTransformPhp5
#endif
#ifdef SWIGPIKE
%module itkThinPlateR2LogRSplineKernelTransformPike
#endif
#ifdef SWIGPYTHON
%module itkThinPlateR2LogRSplineKernelTransformPython
#endif
#ifdef SWIGR
%module itkThinPlateR2LogRSplineKernelTransformR
#endif
#ifdef SWIGRUBY
%module itkThinPlateR2LogRSplineKernelTransformRuby
#endif
#ifdef SWIGSEXP
%module itkThinPlateR2LogRSplineKernelTransformSexp
#endif
#ifdef SWIGTCL
%module itkThinPlateR2LogRSplineKernelTransformTcl
#endif
#ifdef SWIGXML
%module itkThinPlateR2LogRSplineKernelTransformXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
#include "Interpolators.includes"
#include "Mesh.includes"
#include "DeformableTransforms.includes"
%}


%{
%}




%import wrap_itkPoint.i
%import wrap_vnl_matrix_fixed.i
%import wrap_itkVector.i
%import wrap_itkKernelTransform.i
%import wrap_ITKCommonBase.i


%include itk.i
%include wrap_itkThinPlateR2LogRSplineKernelTransform_ext.i


 class itkThinPlateR2LogRSplineKernelTransformD2 : public itkKernelTransformD2 {
   public:
     enum  {  SpaceDimension = 2 };
     static itkThinPlateR2LogRSplineKernelTransformD2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkThinPlateR2LogRSplineKernelTransformD2(itkThinPlateR2LogRSplineKernelTransformD2 const & arg0);
     void operator=(itkThinPlateR2LogRSplineKernelTransformD2 const & arg0);
   protected:
     itkThinPlateR2LogRSplineKernelTransformD2();
     ~itkThinPlateR2LogRSplineKernelTransformD2();
     virtual void ComputeG(itkVectorD2 const & landmarkVector, vnl_matrix_fixedD_2_2 & gmatrix) const;
     virtual vnl_matrix_fixedD_2_2 const & ComputeG(itkVectorD2 const & landmarkVector) const;
     virtual void ComputeDeformationContribution(itkPointD2 const & inputPoint, itkPointD2 & result) const;
 };


 class itkThinPlateR2LogRSplineKernelTransformD2_Pointer {
   public:
     itkThinPlateR2LogRSplineKernelTransformD2_Pointer();
     itkThinPlateR2LogRSplineKernelTransformD2_Pointer(itkThinPlateR2LogRSplineKernelTransformD2_Pointer const & p);
     itkThinPlateR2LogRSplineKernelTransformD2_Pointer(itkThinPlateR2LogRSplineKernelTransformD2 * p);
     ~itkThinPlateR2LogRSplineKernelTransformD2_Pointer();
     itkThinPlateR2LogRSplineKernelTransformD2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkThinPlateR2LogRSplineKernelTransformD2 * GetPointer() const;
     bool operator<(itkThinPlateR2LogRSplineKernelTransformD2_Pointer const & r) const;
     bool operator>(itkThinPlateR2LogRSplineKernelTransformD2_Pointer const & r) const;
     bool operator<=(itkThinPlateR2LogRSplineKernelTransformD2_Pointer const & r) const;
     bool operator>=(itkThinPlateR2LogRSplineKernelTransformD2_Pointer const & r) const;
     itkThinPlateR2LogRSplineKernelTransformD2_Pointer & operator=(itkThinPlateR2LogRSplineKernelTransformD2_Pointer const & r);
     itkThinPlateR2LogRSplineKernelTransformD2_Pointer & operator=(itkThinPlateR2LogRSplineKernelTransformD2 * r);
     itkThinPlateR2LogRSplineKernelTransformD2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkThinPlateR2LogRSplineKernelTransformD3 : public itkKernelTransformD3 {
   public:
     enum  {  SpaceDimension = 3 };
     static itkThinPlateR2LogRSplineKernelTransformD3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkThinPlateR2LogRSplineKernelTransformD3(itkThinPlateR2LogRSplineKernelTransformD3 const & arg0);
     void operator=(itkThinPlateR2LogRSplineKernelTransformD3 const & arg0);
   protected:
     itkThinPlateR2LogRSplineKernelTransformD3();
     ~itkThinPlateR2LogRSplineKernelTransformD3();
     virtual void ComputeG(itkVectorD3 const & landmarkVector, vnl_matrix_fixedD_3_3 & gmatrix) const;
     virtual vnl_matrix_fixedD_3_3 const & ComputeG(itkVectorD3 const & landmarkVector) const;
     virtual void ComputeDeformationContribution(itkPointD3 const & inputPoint, itkPointD3 & result) const;
 };


 class itkThinPlateR2LogRSplineKernelTransformD3_Pointer {
   public:
     itkThinPlateR2LogRSplineKernelTransformD3_Pointer();
     itkThinPlateR2LogRSplineKernelTransformD3_Pointer(itkThinPlateR2LogRSplineKernelTransformD3_Pointer const & p);
     itkThinPlateR2LogRSplineKernelTransformD3_Pointer(itkThinPlateR2LogRSplineKernelTransformD3 * p);
     ~itkThinPlateR2LogRSplineKernelTransformD3_Pointer();
     itkThinPlateR2LogRSplineKernelTransformD3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkThinPlateR2LogRSplineKernelTransformD3 * GetPointer() const;
     bool operator<(itkThinPlateR2LogRSplineKernelTransformD3_Pointer const & r) const;
     bool operator>(itkThinPlateR2LogRSplineKernelTransformD3_Pointer const & r) const;
     bool operator<=(itkThinPlateR2LogRSplineKernelTransformD3_Pointer const & r) const;
     bool operator>=(itkThinPlateR2LogRSplineKernelTransformD3_Pointer const & r) const;
     itkThinPlateR2LogRSplineKernelTransformD3_Pointer & operator=(itkThinPlateR2LogRSplineKernelTransformD3_Pointer const & r);
     itkThinPlateR2LogRSplineKernelTransformD3_Pointer & operator=(itkThinPlateR2LogRSplineKernelTransformD3 * r);
     itkThinPlateR2LogRSplineKernelTransformD3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


