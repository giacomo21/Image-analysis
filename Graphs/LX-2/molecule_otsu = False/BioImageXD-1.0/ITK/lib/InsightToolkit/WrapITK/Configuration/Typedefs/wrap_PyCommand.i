// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module PyCommandChicken
#endif
#ifdef SWIGCSHARP
%module PyCommandCsharp
#endif
#ifdef SWIGGUILE
%module PyCommandGuile
#endif
#ifdef SWIGJAVA
%module PyCommandJava
#endif
#ifdef SWIGLUA
%module PyCommandLua
#endif
#ifdef SWIGMODULA3
%module PyCommandModula3
#endif
#ifdef SWIGMZSCHEME
%module PyCommandMzscheme
#endif
#ifdef SWIGOCAML
%module PyCommandOcaml
#endif
#ifdef SWIGPERL
%module PyCommandPerl
#endif
#ifdef SWIGPERL5
%module PyCommandPerl5
#endif
#ifdef SWIGPHP
%module PyCommandPhp
#endif
#ifdef SWIGPHP4
%module PyCommandPhp4
#endif
#ifdef SWIGPHP5
%module PyCommandPhp5
#endif
#ifdef SWIGPIKE
%module PyCommandPike
#endif
#ifdef SWIGPYTHON
%module PyCommandPython
#endif
#ifdef SWIGR
%module PyCommandR
#endif
#ifdef SWIGRUBY
%module PyCommandRuby
#endif
#ifdef SWIGSEXP
%module PyCommandSexp
#endif
#ifdef SWIGTCL
%module PyCommandTcl
#endif
#ifdef SWIGXML
%module PyCommandXml
#endif

%{
#include "Base.includes"
#include "ITKPyUtils.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkEventObjects.i


%include itk.i
%include wrap_PyCommand_ext.i


 class itkPyCommand : public itkCommand {
   public:
     virtual char const * GetNameOfClass() const;
     static itkPyCommand_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     void SetCommandCallable(PyObject * obj);
     PyObject * GetCommandCallable();
     virtual void Execute(itkObject * arg0, itkEventObject const & arg1);
     virtual void Execute(itkObject const * arg0, itkEventObject const & arg1);
   private:
   protected:
     itkPyCommand();
     ~itkPyCommand();
     void PyExecute();
     itkPyCommand(itkPyCommand const & arg0);
     void operator=(itkPyCommand const & arg0);
 };


 class itkPyCommand_Pointer {
   public:
     itkPyCommand_Pointer();
     itkPyCommand_Pointer(itkPyCommand_Pointer const & p);
     itkPyCommand_Pointer(itkPyCommand * p);
     ~itkPyCommand_Pointer();
     itkPyCommand * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkPyCommand * GetPointer() const;
     bool operator<(itkPyCommand_Pointer const & r) const;
     bool operator>(itkPyCommand_Pointer const & r) const;
     bool operator<=(itkPyCommand_Pointer const & r) const;
     bool operator>=(itkPyCommand_Pointer const & r) const;
     itkPyCommand_Pointer & operator=(itkPyCommand_Pointer const & r);
     itkPyCommand_Pointer & operator=(itkPyCommand * r);
     itkPyCommand * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


