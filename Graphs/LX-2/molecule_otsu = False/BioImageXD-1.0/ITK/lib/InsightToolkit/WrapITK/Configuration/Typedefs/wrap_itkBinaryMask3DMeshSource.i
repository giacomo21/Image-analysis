// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkBinaryMask3DMeshSourceChicken
#endif
#ifdef SWIGCSHARP
%module itkBinaryMask3DMeshSourceCsharp
#endif
#ifdef SWIGGUILE
%module itkBinaryMask3DMeshSourceGuile
#endif
#ifdef SWIGJAVA
%module itkBinaryMask3DMeshSourceJava
#endif
#ifdef SWIGLUA
%module itkBinaryMask3DMeshSourceLua
#endif
#ifdef SWIGMODULA3
%module itkBinaryMask3DMeshSourceModula3
#endif
#ifdef SWIGMZSCHEME
%module itkBinaryMask3DMeshSourceMzscheme
#endif
#ifdef SWIGOCAML
%module itkBinaryMask3DMeshSourceOcaml
#endif
#ifdef SWIGPERL
%module itkBinaryMask3DMeshSourcePerl
#endif
#ifdef SWIGPERL5
%module itkBinaryMask3DMeshSourcePerl5
#endif
#ifdef SWIGPHP
%module itkBinaryMask3DMeshSourcePhp
#endif
#ifdef SWIGPHP4
%module itkBinaryMask3DMeshSourcePhp4
#endif
#ifdef SWIGPHP5
%module itkBinaryMask3DMeshSourcePhp5
#endif
#ifdef SWIGPIKE
%module itkBinaryMask3DMeshSourcePike
#endif
#ifdef SWIGPYTHON
%module itkBinaryMask3DMeshSourcePython
#endif
#ifdef SWIGR
%module itkBinaryMask3DMeshSourceR
#endif
#ifdef SWIGRUBY
%module itkBinaryMask3DMeshSourceRuby
#endif
#ifdef SWIGSEXP
%module itkBinaryMask3DMeshSourceSexp
#endif
#ifdef SWIGTCL
%module itkBinaryMask3DMeshSourceTcl
#endif
#ifdef SWIGXML
%module itkBinaryMask3DMeshSourceXml
#endif

%{
#include "Base.includes"
#include "Mesh.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkImage.i
%import wrap_itkImageToMeshFilter.i


%include itk.i
%include wrap_itkBinaryMask3DMeshSource_ext.i


 class itkBinaryMask3DMeshSourceIUC3MD3Q : public itkImageToMeshFilterIUC3MD3Q {
   public:
     static itkBinaryMask3DMeshSourceIUC3MD3Q_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetObjectValue(unsigned char const _arg);
     virtual unsigned long GetNumberOfNodes() const;
     virtual unsigned long GetNumberOfCells() const;
     virtual void SetInput(itkImageUC3 const * inputImage);
   private:
     itkBinaryMask3DMeshSourceIUC3MD3Q(itkBinaryMask3DMeshSourceIUC3MD3Q const & arg0);
     void operator=(itkBinaryMask3DMeshSourceIUC3MD3Q const & arg0);
     void CreateMesh();
     void XFlip(unsigned char * tp);
     void YFlip(unsigned char * tp);
     void ZFlip(unsigned char * tp);
     void XRotation(unsigned char * tp);
     void YRotation(unsigned char * tp);
     void ZRotation(unsigned char * tp);
     void inverse(unsigned char * tp);
     void InitializeLUT();
     void AddCells(unsigned char celltype, unsigned char celltran, int index);
     void AddNodes(int index, unsigned char * nodesid, unsigned long * globalnodesid, unsigned long * * currentrowtmp, unsigned long * * currentframetmp);
     void CellTransfer(unsigned char * nodesid, unsigned char celltran);
     unsigned long SearchThroughLastRow(int index, int start, int end);
     unsigned long SearchThroughLastFrame(int index, int start, int end);
   protected:
     itkBinaryMask3DMeshSourceIUC3MD3Q();
     ~itkBinaryMask3DMeshSourceIUC3MD3Q();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
 };


 class itkBinaryMask3DMeshSourceIUC3MD3Q_Pointer {
   public:
     itkBinaryMask3DMeshSourceIUC3MD3Q_Pointer();
     itkBinaryMask3DMeshSourceIUC3MD3Q_Pointer(itkBinaryMask3DMeshSourceIUC3MD3Q_Pointer const & p);
     itkBinaryMask3DMeshSourceIUC3MD3Q_Pointer(itkBinaryMask3DMeshSourceIUC3MD3Q * p);
     ~itkBinaryMask3DMeshSourceIUC3MD3Q_Pointer();
     itkBinaryMask3DMeshSourceIUC3MD3Q * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMask3DMeshSourceIUC3MD3Q * GetPointer() const;
     bool operator<(itkBinaryMask3DMeshSourceIUC3MD3Q_Pointer const & r) const;
     bool operator>(itkBinaryMask3DMeshSourceIUC3MD3Q_Pointer const & r) const;
     bool operator<=(itkBinaryMask3DMeshSourceIUC3MD3Q_Pointer const & r) const;
     bool operator>=(itkBinaryMask3DMeshSourceIUC3MD3Q_Pointer const & r) const;
     itkBinaryMask3DMeshSourceIUC3MD3Q_Pointer & operator=(itkBinaryMask3DMeshSourceIUC3MD3Q_Pointer const & r);
     itkBinaryMask3DMeshSourceIUC3MD3Q_Pointer & operator=(itkBinaryMask3DMeshSourceIUC3MD3Q * r);
     itkBinaryMask3DMeshSourceIUC3MD3Q * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryMask3DMeshSourceIUL3MD3Q : public itkImageToMeshFilterIUL3MD3Q {
   public:
     static itkBinaryMask3DMeshSourceIUL3MD3Q_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetObjectValue(unsigned long const _arg);
     virtual unsigned long GetNumberOfNodes() const;
     virtual unsigned long GetNumberOfCells() const;
     virtual void SetInput(itkImageUL3 const * inputImage);
   private:
     itkBinaryMask3DMeshSourceIUL3MD3Q(itkBinaryMask3DMeshSourceIUL3MD3Q const & arg0);
     void operator=(itkBinaryMask3DMeshSourceIUL3MD3Q const & arg0);
     void CreateMesh();
     void XFlip(unsigned char * tp);
     void YFlip(unsigned char * tp);
     void ZFlip(unsigned char * tp);
     void XRotation(unsigned char * tp);
     void YRotation(unsigned char * tp);
     void ZRotation(unsigned char * tp);
     void inverse(unsigned char * tp);
     void InitializeLUT();
     void AddCells(unsigned char celltype, unsigned char celltran, int index);
     void AddNodes(int index, unsigned char * nodesid, unsigned long * globalnodesid, unsigned long * * currentrowtmp, unsigned long * * currentframetmp);
     void CellTransfer(unsigned char * nodesid, unsigned char celltran);
     unsigned long SearchThroughLastRow(int index, int start, int end);
     unsigned long SearchThroughLastFrame(int index, int start, int end);
   protected:
     itkBinaryMask3DMeshSourceIUL3MD3Q();
     ~itkBinaryMask3DMeshSourceIUL3MD3Q();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
 };


 class itkBinaryMask3DMeshSourceIUL3MD3Q_Pointer {
   public:
     itkBinaryMask3DMeshSourceIUL3MD3Q_Pointer();
     itkBinaryMask3DMeshSourceIUL3MD3Q_Pointer(itkBinaryMask3DMeshSourceIUL3MD3Q_Pointer const & p);
     itkBinaryMask3DMeshSourceIUL3MD3Q_Pointer(itkBinaryMask3DMeshSourceIUL3MD3Q * p);
     ~itkBinaryMask3DMeshSourceIUL3MD3Q_Pointer();
     itkBinaryMask3DMeshSourceIUL3MD3Q * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMask3DMeshSourceIUL3MD3Q * GetPointer() const;
     bool operator<(itkBinaryMask3DMeshSourceIUL3MD3Q_Pointer const & r) const;
     bool operator>(itkBinaryMask3DMeshSourceIUL3MD3Q_Pointer const & r) const;
     bool operator<=(itkBinaryMask3DMeshSourceIUL3MD3Q_Pointer const & r) const;
     bool operator>=(itkBinaryMask3DMeshSourceIUL3MD3Q_Pointer const & r) const;
     itkBinaryMask3DMeshSourceIUL3MD3Q_Pointer & operator=(itkBinaryMask3DMeshSourceIUL3MD3Q_Pointer const & r);
     itkBinaryMask3DMeshSourceIUL3MD3Q_Pointer & operator=(itkBinaryMask3DMeshSourceIUL3MD3Q * r);
     itkBinaryMask3DMeshSourceIUL3MD3Q * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryMask3DMeshSourceIUS3MD3Q : public itkImageToMeshFilterIUS3MD3Q {
   public:
     static itkBinaryMask3DMeshSourceIUS3MD3Q_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetObjectValue(unsigned short const _arg);
     virtual unsigned long GetNumberOfNodes() const;
     virtual unsigned long GetNumberOfCells() const;
     virtual void SetInput(itkImageUS3 const * inputImage);
   private:
     itkBinaryMask3DMeshSourceIUS3MD3Q(itkBinaryMask3DMeshSourceIUS3MD3Q const & arg0);
     void operator=(itkBinaryMask3DMeshSourceIUS3MD3Q const & arg0);
     void CreateMesh();
     void XFlip(unsigned char * tp);
     void YFlip(unsigned char * tp);
     void ZFlip(unsigned char * tp);
     void XRotation(unsigned char * tp);
     void YRotation(unsigned char * tp);
     void ZRotation(unsigned char * tp);
     void inverse(unsigned char * tp);
     void InitializeLUT();
     void AddCells(unsigned char celltype, unsigned char celltran, int index);
     void AddNodes(int index, unsigned char * nodesid, unsigned long * globalnodesid, unsigned long * * currentrowtmp, unsigned long * * currentframetmp);
     void CellTransfer(unsigned char * nodesid, unsigned char celltran);
     unsigned long SearchThroughLastRow(int index, int start, int end);
     unsigned long SearchThroughLastFrame(int index, int start, int end);
   protected:
     itkBinaryMask3DMeshSourceIUS3MD3Q();
     ~itkBinaryMask3DMeshSourceIUS3MD3Q();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
 };


 class itkBinaryMask3DMeshSourceIUS3MD3Q_Pointer {
   public:
     itkBinaryMask3DMeshSourceIUS3MD3Q_Pointer();
     itkBinaryMask3DMeshSourceIUS3MD3Q_Pointer(itkBinaryMask3DMeshSourceIUS3MD3Q_Pointer const & p);
     itkBinaryMask3DMeshSourceIUS3MD3Q_Pointer(itkBinaryMask3DMeshSourceIUS3MD3Q * p);
     ~itkBinaryMask3DMeshSourceIUS3MD3Q_Pointer();
     itkBinaryMask3DMeshSourceIUS3MD3Q * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMask3DMeshSourceIUS3MD3Q * GetPointer() const;
     bool operator<(itkBinaryMask3DMeshSourceIUS3MD3Q_Pointer const & r) const;
     bool operator>(itkBinaryMask3DMeshSourceIUS3MD3Q_Pointer const & r) const;
     bool operator<=(itkBinaryMask3DMeshSourceIUS3MD3Q_Pointer const & r) const;
     bool operator>=(itkBinaryMask3DMeshSourceIUS3MD3Q_Pointer const & r) const;
     itkBinaryMask3DMeshSourceIUS3MD3Q_Pointer & operator=(itkBinaryMask3DMeshSourceIUS3MD3Q_Pointer const & r);
     itkBinaryMask3DMeshSourceIUS3MD3Q_Pointer & operator=(itkBinaryMask3DMeshSourceIUS3MD3Q * r);
     itkBinaryMask3DMeshSourceIUS3MD3Q * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


