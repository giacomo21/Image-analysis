// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkMattesMutualInformationImageToImageMetricChicken
#endif
#ifdef SWIGCSHARP
%module itkMattesMutualInformationImageToImageMetricCsharp
#endif
#ifdef SWIGGUILE
%module itkMattesMutualInformationImageToImageMetricGuile
#endif
#ifdef SWIGJAVA
%module itkMattesMutualInformationImageToImageMetricJava
#endif
#ifdef SWIGLUA
%module itkMattesMutualInformationImageToImageMetricLua
#endif
#ifdef SWIGMODULA3
%module itkMattesMutualInformationImageToImageMetricModula3
#endif
#ifdef SWIGMZSCHEME
%module itkMattesMutualInformationImageToImageMetricMzscheme
#endif
#ifdef SWIGOCAML
%module itkMattesMutualInformationImageToImageMetricOcaml
#endif
#ifdef SWIGPERL
%module itkMattesMutualInformationImageToImageMetricPerl
#endif
#ifdef SWIGPERL5
%module itkMattesMutualInformationImageToImageMetricPerl5
#endif
#ifdef SWIGPHP
%module itkMattesMutualInformationImageToImageMetricPhp
#endif
#ifdef SWIGPHP4
%module itkMattesMutualInformationImageToImageMetricPhp4
#endif
#ifdef SWIGPHP5
%module itkMattesMutualInformationImageToImageMetricPhp5
#endif
#ifdef SWIGPIKE
%module itkMattesMutualInformationImageToImageMetricPike
#endif
#ifdef SWIGPYTHON
%module itkMattesMutualInformationImageToImageMetricPython
#endif
#ifdef SWIGR
%module itkMattesMutualInformationImageToImageMetricR
#endif
#ifdef SWIGRUBY
%module itkMattesMutualInformationImageToImageMetricRuby
#endif
#ifdef SWIGSEXP
%module itkMattesMutualInformationImageToImageMetricSexp
#endif
#ifdef SWIGTCL
%module itkMattesMutualInformationImageToImageMetricTcl
#endif
#ifdef SWIGXML
%module itkMattesMutualInformationImageToImageMetricXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Numerics.includes"
#include "Transforms.includes"
#include "SpatialObject.includes"
#include "Resize.includes"
#include "Calculators.includes"
#include "Registration.includes"
%}


%{
%}




%import wrap_itkPoint.i
%import wrap_itkImageToImageMetric.i
%import wrap_itkCovariantVector.i
%import wrap_itkArray.i
%import wrap_ITKCommonBase.i


%include itk.i
%include wrap_itkMattesMutualInformationImageToImageMetric_ext.i


 class itkMattesMutualInformationImageToImageMetricID2ID2 : public itkImageToImageMetricID2ID2 {
   public:
     enum  {  MovingImageDimension = 2 };
     static itkMattesMutualInformationImageToImageMetricID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Initialize();
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & Derivative) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & Derivative) const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long const & GetNumberOfHistogramBins() const;
     virtual void SetUseExplicitPDFDerivatives(bool const _arg);
     virtual bool const & GetUseExplicitPDFDerivatives() const;
     virtual void UseExplicitPDFDerivativesOn();
     virtual void UseExplicitPDFDerivativesOff();
   private:
     itkMattesMutualInformationImageToImageMetricID2ID2(itkMattesMutualInformationImageToImageMetricID2ID2 const & arg0);
     void operator=(itkMattesMutualInformationImageToImageMetricID2ID2 const & arg0);
     virtual void ComputeFixedImageParzenWindowIndices(std::vector< itkImageToImageMetricID2ID2::FixedImageSamplePoint > & samples);
     virtual void ComputePDFDerivatives(unsigned int threadID, unsigned int sampleNumber, int movingImageParzenWindowIndex, itkCovariantVectorD2 const & movingImageGradientValue, double cubicBSplineDerivativeValue) const;
     virtual void GetValueThreadPreProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual bool GetValueThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD2 const & mappedPoint, double movingImageValue) const;
     virtual void GetValueThreadPostProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual void GetValueAndDerivativeThreadPreProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD2 const & mappedPoint, double movingImageValue, itkCovariantVectorD2 const & movingImageGradientValue) const;
     virtual void GetValueAndDerivativeThreadPostProcess(unsigned int threadID, bool withinSampleThread) const;
   protected:
     itkMattesMutualInformationImageToImageMetricID2ID2();
     ~itkMattesMutualInformationImageToImageMetricID2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMattesMutualInformationImageToImageMetricID2ID2_Pointer {
   public:
     itkMattesMutualInformationImageToImageMetricID2ID2_Pointer();
     itkMattesMutualInformationImageToImageMetricID2ID2_Pointer(itkMattesMutualInformationImageToImageMetricID2ID2_Pointer const & p);
     itkMattesMutualInformationImageToImageMetricID2ID2_Pointer(itkMattesMutualInformationImageToImageMetricID2ID2 * p);
     ~itkMattesMutualInformationImageToImageMetricID2ID2_Pointer();
     itkMattesMutualInformationImageToImageMetricID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMattesMutualInformationImageToImageMetricID2ID2 * GetPointer() const;
     bool operator<(itkMattesMutualInformationImageToImageMetricID2ID2_Pointer const & r) const;
     bool operator>(itkMattesMutualInformationImageToImageMetricID2ID2_Pointer const & r) const;
     bool operator<=(itkMattesMutualInformationImageToImageMetricID2ID2_Pointer const & r) const;
     bool operator>=(itkMattesMutualInformationImageToImageMetricID2ID2_Pointer const & r) const;
     itkMattesMutualInformationImageToImageMetricID2ID2_Pointer & operator=(itkMattesMutualInformationImageToImageMetricID2ID2_Pointer const & r);
     itkMattesMutualInformationImageToImageMetricID2ID2_Pointer & operator=(itkMattesMutualInformationImageToImageMetricID2ID2 * r);
     itkMattesMutualInformationImageToImageMetricID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMattesMutualInformationImageToImageMetricID3ID3 : public itkImageToImageMetricID3ID3 {
   public:
     enum  {  MovingImageDimension = 3 };
     static itkMattesMutualInformationImageToImageMetricID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Initialize();
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & Derivative) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & Derivative) const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long const & GetNumberOfHistogramBins() const;
     virtual void SetUseExplicitPDFDerivatives(bool const _arg);
     virtual bool const & GetUseExplicitPDFDerivatives() const;
     virtual void UseExplicitPDFDerivativesOn();
     virtual void UseExplicitPDFDerivativesOff();
   private:
     itkMattesMutualInformationImageToImageMetricID3ID3(itkMattesMutualInformationImageToImageMetricID3ID3 const & arg0);
     void operator=(itkMattesMutualInformationImageToImageMetricID3ID3 const & arg0);
     virtual void ComputeFixedImageParzenWindowIndices(std::vector< itkImageToImageMetricID3ID3::FixedImageSamplePoint > & samples);
     virtual void ComputePDFDerivatives(unsigned int threadID, unsigned int sampleNumber, int movingImageParzenWindowIndex, itkCovariantVectorD3 const & movingImageGradientValue, double cubicBSplineDerivativeValue) const;
     virtual void GetValueThreadPreProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual bool GetValueThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD3 const & mappedPoint, double movingImageValue) const;
     virtual void GetValueThreadPostProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual void GetValueAndDerivativeThreadPreProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD3 const & mappedPoint, double movingImageValue, itkCovariantVectorD3 const & movingImageGradientValue) const;
     virtual void GetValueAndDerivativeThreadPostProcess(unsigned int threadID, bool withinSampleThread) const;
   protected:
     itkMattesMutualInformationImageToImageMetricID3ID3();
     ~itkMattesMutualInformationImageToImageMetricID3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMattesMutualInformationImageToImageMetricID3ID3_Pointer {
   public:
     itkMattesMutualInformationImageToImageMetricID3ID3_Pointer();
     itkMattesMutualInformationImageToImageMetricID3ID3_Pointer(itkMattesMutualInformationImageToImageMetricID3ID3_Pointer const & p);
     itkMattesMutualInformationImageToImageMetricID3ID3_Pointer(itkMattesMutualInformationImageToImageMetricID3ID3 * p);
     ~itkMattesMutualInformationImageToImageMetricID3ID3_Pointer();
     itkMattesMutualInformationImageToImageMetricID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMattesMutualInformationImageToImageMetricID3ID3 * GetPointer() const;
     bool operator<(itkMattesMutualInformationImageToImageMetricID3ID3_Pointer const & r) const;
     bool operator>(itkMattesMutualInformationImageToImageMetricID3ID3_Pointer const & r) const;
     bool operator<=(itkMattesMutualInformationImageToImageMetricID3ID3_Pointer const & r) const;
     bool operator>=(itkMattesMutualInformationImageToImageMetricID3ID3_Pointer const & r) const;
     itkMattesMutualInformationImageToImageMetricID3ID3_Pointer & operator=(itkMattesMutualInformationImageToImageMetricID3ID3_Pointer const & r);
     itkMattesMutualInformationImageToImageMetricID3ID3_Pointer & operator=(itkMattesMutualInformationImageToImageMetricID3ID3 * r);
     itkMattesMutualInformationImageToImageMetricID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMattesMutualInformationImageToImageMetricIF2IF2 : public itkImageToImageMetricIF2IF2 {
   public:
     enum  {  MovingImageDimension = 2 };
     static itkMattesMutualInformationImageToImageMetricIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Initialize();
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & Derivative) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & Derivative) const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long const & GetNumberOfHistogramBins() const;
     virtual void SetUseExplicitPDFDerivatives(bool const _arg);
     virtual bool const & GetUseExplicitPDFDerivatives() const;
     virtual void UseExplicitPDFDerivativesOn();
     virtual void UseExplicitPDFDerivativesOff();
   private:
     itkMattesMutualInformationImageToImageMetricIF2IF2(itkMattesMutualInformationImageToImageMetricIF2IF2 const & arg0);
     void operator=(itkMattesMutualInformationImageToImageMetricIF2IF2 const & arg0);
     virtual void ComputeFixedImageParzenWindowIndices(std::vector< itkImageToImageMetricIF2IF2::FixedImageSamplePoint > & samples);
     virtual void ComputePDFDerivatives(unsigned int threadID, unsigned int sampleNumber, int movingImageParzenWindowIndex, itkCovariantVectorD2 const & movingImageGradientValue, double cubicBSplineDerivativeValue) const;
     virtual void GetValueThreadPreProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual bool GetValueThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD2 const & mappedPoint, double movingImageValue) const;
     virtual void GetValueThreadPostProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual void GetValueAndDerivativeThreadPreProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD2 const & mappedPoint, double movingImageValue, itkCovariantVectorD2 const & movingImageGradientValue) const;
     virtual void GetValueAndDerivativeThreadPostProcess(unsigned int threadID, bool withinSampleThread) const;
   protected:
     itkMattesMutualInformationImageToImageMetricIF2IF2();
     ~itkMattesMutualInformationImageToImageMetricIF2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMattesMutualInformationImageToImageMetricIF2IF2_Pointer {
   public:
     itkMattesMutualInformationImageToImageMetricIF2IF2_Pointer();
     itkMattesMutualInformationImageToImageMetricIF2IF2_Pointer(itkMattesMutualInformationImageToImageMetricIF2IF2_Pointer const & p);
     itkMattesMutualInformationImageToImageMetricIF2IF2_Pointer(itkMattesMutualInformationImageToImageMetricIF2IF2 * p);
     ~itkMattesMutualInformationImageToImageMetricIF2IF2_Pointer();
     itkMattesMutualInformationImageToImageMetricIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMattesMutualInformationImageToImageMetricIF2IF2 * GetPointer() const;
     bool operator<(itkMattesMutualInformationImageToImageMetricIF2IF2_Pointer const & r) const;
     bool operator>(itkMattesMutualInformationImageToImageMetricIF2IF2_Pointer const & r) const;
     bool operator<=(itkMattesMutualInformationImageToImageMetricIF2IF2_Pointer const & r) const;
     bool operator>=(itkMattesMutualInformationImageToImageMetricIF2IF2_Pointer const & r) const;
     itkMattesMutualInformationImageToImageMetricIF2IF2_Pointer & operator=(itkMattesMutualInformationImageToImageMetricIF2IF2_Pointer const & r);
     itkMattesMutualInformationImageToImageMetricIF2IF2_Pointer & operator=(itkMattesMutualInformationImageToImageMetricIF2IF2 * r);
     itkMattesMutualInformationImageToImageMetricIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMattesMutualInformationImageToImageMetricIF3IF3 : public itkImageToImageMetricIF3IF3 {
   public:
     enum  {  MovingImageDimension = 3 };
     static itkMattesMutualInformationImageToImageMetricIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Initialize();
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & Derivative) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & Derivative) const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long const & GetNumberOfHistogramBins() const;
     virtual void SetUseExplicitPDFDerivatives(bool const _arg);
     virtual bool const & GetUseExplicitPDFDerivatives() const;
     virtual void UseExplicitPDFDerivativesOn();
     virtual void UseExplicitPDFDerivativesOff();
   private:
     itkMattesMutualInformationImageToImageMetricIF3IF3(itkMattesMutualInformationImageToImageMetricIF3IF3 const & arg0);
     void operator=(itkMattesMutualInformationImageToImageMetricIF3IF3 const & arg0);
     virtual void ComputeFixedImageParzenWindowIndices(std::vector< itkImageToImageMetricIF3IF3::FixedImageSamplePoint > & samples);
     virtual void ComputePDFDerivatives(unsigned int threadID, unsigned int sampleNumber, int movingImageParzenWindowIndex, itkCovariantVectorD3 const & movingImageGradientValue, double cubicBSplineDerivativeValue) const;
     virtual void GetValueThreadPreProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual bool GetValueThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD3 const & mappedPoint, double movingImageValue) const;
     virtual void GetValueThreadPostProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual void GetValueAndDerivativeThreadPreProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD3 const & mappedPoint, double movingImageValue, itkCovariantVectorD3 const & movingImageGradientValue) const;
     virtual void GetValueAndDerivativeThreadPostProcess(unsigned int threadID, bool withinSampleThread) const;
   protected:
     itkMattesMutualInformationImageToImageMetricIF3IF3();
     ~itkMattesMutualInformationImageToImageMetricIF3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMattesMutualInformationImageToImageMetricIF3IF3_Pointer {
   public:
     itkMattesMutualInformationImageToImageMetricIF3IF3_Pointer();
     itkMattesMutualInformationImageToImageMetricIF3IF3_Pointer(itkMattesMutualInformationImageToImageMetricIF3IF3_Pointer const & p);
     itkMattesMutualInformationImageToImageMetricIF3IF3_Pointer(itkMattesMutualInformationImageToImageMetricIF3IF3 * p);
     ~itkMattesMutualInformationImageToImageMetricIF3IF3_Pointer();
     itkMattesMutualInformationImageToImageMetricIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMattesMutualInformationImageToImageMetricIF3IF3 * GetPointer() const;
     bool operator<(itkMattesMutualInformationImageToImageMetricIF3IF3_Pointer const & r) const;
     bool operator>(itkMattesMutualInformationImageToImageMetricIF3IF3_Pointer const & r) const;
     bool operator<=(itkMattesMutualInformationImageToImageMetricIF3IF3_Pointer const & r) const;
     bool operator>=(itkMattesMutualInformationImageToImageMetricIF3IF3_Pointer const & r) const;
     itkMattesMutualInformationImageToImageMetricIF3IF3_Pointer & operator=(itkMattesMutualInformationImageToImageMetricIF3IF3_Pointer const & r);
     itkMattesMutualInformationImageToImageMetricIF3IF3_Pointer & operator=(itkMattesMutualInformationImageToImageMetricIF3IF3 * r);
     itkMattesMutualInformationImageToImageMetricIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMattesMutualInformationImageToImageMetricIUC2IUC2 : public itkImageToImageMetricIUC2IUC2 {
   public:
     enum  {  MovingImageDimension = 2 };
     static itkMattesMutualInformationImageToImageMetricIUC2IUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Initialize();
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & Derivative) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & Derivative) const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long const & GetNumberOfHistogramBins() const;
     virtual void SetUseExplicitPDFDerivatives(bool const _arg);
     virtual bool const & GetUseExplicitPDFDerivatives() const;
     virtual void UseExplicitPDFDerivativesOn();
     virtual void UseExplicitPDFDerivativesOff();
   private:
     itkMattesMutualInformationImageToImageMetricIUC2IUC2(itkMattesMutualInformationImageToImageMetricIUC2IUC2 const & arg0);
     void operator=(itkMattesMutualInformationImageToImageMetricIUC2IUC2 const & arg0);
     virtual void ComputeFixedImageParzenWindowIndices(std::vector< itkImageToImageMetricIUC2IUC2::FixedImageSamplePoint > & samples);
     virtual void ComputePDFDerivatives(unsigned int threadID, unsigned int sampleNumber, int movingImageParzenWindowIndex, itkCovariantVectorD2 const & movingImageGradientValue, double cubicBSplineDerivativeValue) const;
     virtual void GetValueThreadPreProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual bool GetValueThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD2 const & mappedPoint, double movingImageValue) const;
     virtual void GetValueThreadPostProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual void GetValueAndDerivativeThreadPreProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD2 const & mappedPoint, double movingImageValue, itkCovariantVectorD2 const & movingImageGradientValue) const;
     virtual void GetValueAndDerivativeThreadPostProcess(unsigned int threadID, bool withinSampleThread) const;
   protected:
     itkMattesMutualInformationImageToImageMetricIUC2IUC2();
     ~itkMattesMutualInformationImageToImageMetricIUC2IUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMattesMutualInformationImageToImageMetricIUC2IUC2_Pointer {
   public:
     itkMattesMutualInformationImageToImageMetricIUC2IUC2_Pointer();
     itkMattesMutualInformationImageToImageMetricIUC2IUC2_Pointer(itkMattesMutualInformationImageToImageMetricIUC2IUC2_Pointer const & p);
     itkMattesMutualInformationImageToImageMetricIUC2IUC2_Pointer(itkMattesMutualInformationImageToImageMetricIUC2IUC2 * p);
     ~itkMattesMutualInformationImageToImageMetricIUC2IUC2_Pointer();
     itkMattesMutualInformationImageToImageMetricIUC2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMattesMutualInformationImageToImageMetricIUC2IUC2 * GetPointer() const;
     bool operator<(itkMattesMutualInformationImageToImageMetricIUC2IUC2_Pointer const & r) const;
     bool operator>(itkMattesMutualInformationImageToImageMetricIUC2IUC2_Pointer const & r) const;
     bool operator<=(itkMattesMutualInformationImageToImageMetricIUC2IUC2_Pointer const & r) const;
     bool operator>=(itkMattesMutualInformationImageToImageMetricIUC2IUC2_Pointer const & r) const;
     itkMattesMutualInformationImageToImageMetricIUC2IUC2_Pointer & operator=(itkMattesMutualInformationImageToImageMetricIUC2IUC2_Pointer const & r);
     itkMattesMutualInformationImageToImageMetricIUC2IUC2_Pointer & operator=(itkMattesMutualInformationImageToImageMetricIUC2IUC2 * r);
     itkMattesMutualInformationImageToImageMetricIUC2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMattesMutualInformationImageToImageMetricIUC3IUC3 : public itkImageToImageMetricIUC3IUC3 {
   public:
     enum  {  MovingImageDimension = 3 };
     static itkMattesMutualInformationImageToImageMetricIUC3IUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Initialize();
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & Derivative) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & Derivative) const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long const & GetNumberOfHistogramBins() const;
     virtual void SetUseExplicitPDFDerivatives(bool const _arg);
     virtual bool const & GetUseExplicitPDFDerivatives() const;
     virtual void UseExplicitPDFDerivativesOn();
     virtual void UseExplicitPDFDerivativesOff();
   private:
     itkMattesMutualInformationImageToImageMetricIUC3IUC3(itkMattesMutualInformationImageToImageMetricIUC3IUC3 const & arg0);
     void operator=(itkMattesMutualInformationImageToImageMetricIUC3IUC3 const & arg0);
     virtual void ComputeFixedImageParzenWindowIndices(std::vector< itkImageToImageMetricIUC3IUC3::FixedImageSamplePoint > & samples);
     virtual void ComputePDFDerivatives(unsigned int threadID, unsigned int sampleNumber, int movingImageParzenWindowIndex, itkCovariantVectorD3 const & movingImageGradientValue, double cubicBSplineDerivativeValue) const;
     virtual void GetValueThreadPreProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual bool GetValueThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD3 const & mappedPoint, double movingImageValue) const;
     virtual void GetValueThreadPostProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual void GetValueAndDerivativeThreadPreProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD3 const & mappedPoint, double movingImageValue, itkCovariantVectorD3 const & movingImageGradientValue) const;
     virtual void GetValueAndDerivativeThreadPostProcess(unsigned int threadID, bool withinSampleThread) const;
   protected:
     itkMattesMutualInformationImageToImageMetricIUC3IUC3();
     ~itkMattesMutualInformationImageToImageMetricIUC3IUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMattesMutualInformationImageToImageMetricIUC3IUC3_Pointer {
   public:
     itkMattesMutualInformationImageToImageMetricIUC3IUC3_Pointer();
     itkMattesMutualInformationImageToImageMetricIUC3IUC3_Pointer(itkMattesMutualInformationImageToImageMetricIUC3IUC3_Pointer const & p);
     itkMattesMutualInformationImageToImageMetricIUC3IUC3_Pointer(itkMattesMutualInformationImageToImageMetricIUC3IUC3 * p);
     ~itkMattesMutualInformationImageToImageMetricIUC3IUC3_Pointer();
     itkMattesMutualInformationImageToImageMetricIUC3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMattesMutualInformationImageToImageMetricIUC3IUC3 * GetPointer() const;
     bool operator<(itkMattesMutualInformationImageToImageMetricIUC3IUC3_Pointer const & r) const;
     bool operator>(itkMattesMutualInformationImageToImageMetricIUC3IUC3_Pointer const & r) const;
     bool operator<=(itkMattesMutualInformationImageToImageMetricIUC3IUC3_Pointer const & r) const;
     bool operator>=(itkMattesMutualInformationImageToImageMetricIUC3IUC3_Pointer const & r) const;
     itkMattesMutualInformationImageToImageMetricIUC3IUC3_Pointer & operator=(itkMattesMutualInformationImageToImageMetricIUC3IUC3_Pointer const & r);
     itkMattesMutualInformationImageToImageMetricIUC3IUC3_Pointer & operator=(itkMattesMutualInformationImageToImageMetricIUC3IUC3 * r);
     itkMattesMutualInformationImageToImageMetricIUC3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMattesMutualInformationImageToImageMetricIUL2IUL2 : public itkImageToImageMetricIUL2IUL2 {
   public:
     enum  {  MovingImageDimension = 2 };
     static itkMattesMutualInformationImageToImageMetricIUL2IUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Initialize();
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & Derivative) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & Derivative) const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long const & GetNumberOfHistogramBins() const;
     virtual void SetUseExplicitPDFDerivatives(bool const _arg);
     virtual bool const & GetUseExplicitPDFDerivatives() const;
     virtual void UseExplicitPDFDerivativesOn();
     virtual void UseExplicitPDFDerivativesOff();
   private:
     itkMattesMutualInformationImageToImageMetricIUL2IUL2(itkMattesMutualInformationImageToImageMetricIUL2IUL2 const & arg0);
     void operator=(itkMattesMutualInformationImageToImageMetricIUL2IUL2 const & arg0);
     virtual void ComputeFixedImageParzenWindowIndices(std::vector< itkImageToImageMetricIUL2IUL2::FixedImageSamplePoint > & samples);
     virtual void ComputePDFDerivatives(unsigned int threadID, unsigned int sampleNumber, int movingImageParzenWindowIndex, itkCovariantVectorD2 const & movingImageGradientValue, double cubicBSplineDerivativeValue) const;
     virtual void GetValueThreadPreProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual bool GetValueThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD2 const & mappedPoint, double movingImageValue) const;
     virtual void GetValueThreadPostProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual void GetValueAndDerivativeThreadPreProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD2 const & mappedPoint, double movingImageValue, itkCovariantVectorD2 const & movingImageGradientValue) const;
     virtual void GetValueAndDerivativeThreadPostProcess(unsigned int threadID, bool withinSampleThread) const;
   protected:
     itkMattesMutualInformationImageToImageMetricIUL2IUL2();
     ~itkMattesMutualInformationImageToImageMetricIUL2IUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMattesMutualInformationImageToImageMetricIUL2IUL2_Pointer {
   public:
     itkMattesMutualInformationImageToImageMetricIUL2IUL2_Pointer();
     itkMattesMutualInformationImageToImageMetricIUL2IUL2_Pointer(itkMattesMutualInformationImageToImageMetricIUL2IUL2_Pointer const & p);
     itkMattesMutualInformationImageToImageMetricIUL2IUL2_Pointer(itkMattesMutualInformationImageToImageMetricIUL2IUL2 * p);
     ~itkMattesMutualInformationImageToImageMetricIUL2IUL2_Pointer();
     itkMattesMutualInformationImageToImageMetricIUL2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMattesMutualInformationImageToImageMetricIUL2IUL2 * GetPointer() const;
     bool operator<(itkMattesMutualInformationImageToImageMetricIUL2IUL2_Pointer const & r) const;
     bool operator>(itkMattesMutualInformationImageToImageMetricIUL2IUL2_Pointer const & r) const;
     bool operator<=(itkMattesMutualInformationImageToImageMetricIUL2IUL2_Pointer const & r) const;
     bool operator>=(itkMattesMutualInformationImageToImageMetricIUL2IUL2_Pointer const & r) const;
     itkMattesMutualInformationImageToImageMetricIUL2IUL2_Pointer & operator=(itkMattesMutualInformationImageToImageMetricIUL2IUL2_Pointer const & r);
     itkMattesMutualInformationImageToImageMetricIUL2IUL2_Pointer & operator=(itkMattesMutualInformationImageToImageMetricIUL2IUL2 * r);
     itkMattesMutualInformationImageToImageMetricIUL2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMattesMutualInformationImageToImageMetricIUL3IUL3 : public itkImageToImageMetricIUL3IUL3 {
   public:
     enum  {  MovingImageDimension = 3 };
     static itkMattesMutualInformationImageToImageMetricIUL3IUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Initialize();
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & Derivative) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & Derivative) const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long const & GetNumberOfHistogramBins() const;
     virtual void SetUseExplicitPDFDerivatives(bool const _arg);
     virtual bool const & GetUseExplicitPDFDerivatives() const;
     virtual void UseExplicitPDFDerivativesOn();
     virtual void UseExplicitPDFDerivativesOff();
   private:
     itkMattesMutualInformationImageToImageMetricIUL3IUL3(itkMattesMutualInformationImageToImageMetricIUL3IUL3 const & arg0);
     void operator=(itkMattesMutualInformationImageToImageMetricIUL3IUL3 const & arg0);
     virtual void ComputeFixedImageParzenWindowIndices(std::vector< itkImageToImageMetricIUL3IUL3::FixedImageSamplePoint > & samples);
     virtual void ComputePDFDerivatives(unsigned int threadID, unsigned int sampleNumber, int movingImageParzenWindowIndex, itkCovariantVectorD3 const & movingImageGradientValue, double cubicBSplineDerivativeValue) const;
     virtual void GetValueThreadPreProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual bool GetValueThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD3 const & mappedPoint, double movingImageValue) const;
     virtual void GetValueThreadPostProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual void GetValueAndDerivativeThreadPreProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD3 const & mappedPoint, double movingImageValue, itkCovariantVectorD3 const & movingImageGradientValue) const;
     virtual void GetValueAndDerivativeThreadPostProcess(unsigned int threadID, bool withinSampleThread) const;
   protected:
     itkMattesMutualInformationImageToImageMetricIUL3IUL3();
     ~itkMattesMutualInformationImageToImageMetricIUL3IUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMattesMutualInformationImageToImageMetricIUL3IUL3_Pointer {
   public:
     itkMattesMutualInformationImageToImageMetricIUL3IUL3_Pointer();
     itkMattesMutualInformationImageToImageMetricIUL3IUL3_Pointer(itkMattesMutualInformationImageToImageMetricIUL3IUL3_Pointer const & p);
     itkMattesMutualInformationImageToImageMetricIUL3IUL3_Pointer(itkMattesMutualInformationImageToImageMetricIUL3IUL3 * p);
     ~itkMattesMutualInformationImageToImageMetricIUL3IUL3_Pointer();
     itkMattesMutualInformationImageToImageMetricIUL3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMattesMutualInformationImageToImageMetricIUL3IUL3 * GetPointer() const;
     bool operator<(itkMattesMutualInformationImageToImageMetricIUL3IUL3_Pointer const & r) const;
     bool operator>(itkMattesMutualInformationImageToImageMetricIUL3IUL3_Pointer const & r) const;
     bool operator<=(itkMattesMutualInformationImageToImageMetricIUL3IUL3_Pointer const & r) const;
     bool operator>=(itkMattesMutualInformationImageToImageMetricIUL3IUL3_Pointer const & r) const;
     itkMattesMutualInformationImageToImageMetricIUL3IUL3_Pointer & operator=(itkMattesMutualInformationImageToImageMetricIUL3IUL3_Pointer const & r);
     itkMattesMutualInformationImageToImageMetricIUL3IUL3_Pointer & operator=(itkMattesMutualInformationImageToImageMetricIUL3IUL3 * r);
     itkMattesMutualInformationImageToImageMetricIUL3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMattesMutualInformationImageToImageMetricIUS2IUS2 : public itkImageToImageMetricIUS2IUS2 {
   public:
     enum  {  MovingImageDimension = 2 };
     static itkMattesMutualInformationImageToImageMetricIUS2IUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Initialize();
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & Derivative) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & Derivative) const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long const & GetNumberOfHistogramBins() const;
     virtual void SetUseExplicitPDFDerivatives(bool const _arg);
     virtual bool const & GetUseExplicitPDFDerivatives() const;
     virtual void UseExplicitPDFDerivativesOn();
     virtual void UseExplicitPDFDerivativesOff();
   private:
     itkMattesMutualInformationImageToImageMetricIUS2IUS2(itkMattesMutualInformationImageToImageMetricIUS2IUS2 const & arg0);
     void operator=(itkMattesMutualInformationImageToImageMetricIUS2IUS2 const & arg0);
     virtual void ComputeFixedImageParzenWindowIndices(std::vector< itkImageToImageMetricIUS2IUS2::FixedImageSamplePoint > & samples);
     virtual void ComputePDFDerivatives(unsigned int threadID, unsigned int sampleNumber, int movingImageParzenWindowIndex, itkCovariantVectorD2 const & movingImageGradientValue, double cubicBSplineDerivativeValue) const;
     virtual void GetValueThreadPreProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual bool GetValueThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD2 const & mappedPoint, double movingImageValue) const;
     virtual void GetValueThreadPostProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual void GetValueAndDerivativeThreadPreProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD2 const & mappedPoint, double movingImageValue, itkCovariantVectorD2 const & movingImageGradientValue) const;
     virtual void GetValueAndDerivativeThreadPostProcess(unsigned int threadID, bool withinSampleThread) const;
   protected:
     itkMattesMutualInformationImageToImageMetricIUS2IUS2();
     ~itkMattesMutualInformationImageToImageMetricIUS2IUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMattesMutualInformationImageToImageMetricIUS2IUS2_Pointer {
   public:
     itkMattesMutualInformationImageToImageMetricIUS2IUS2_Pointer();
     itkMattesMutualInformationImageToImageMetricIUS2IUS2_Pointer(itkMattesMutualInformationImageToImageMetricIUS2IUS2_Pointer const & p);
     itkMattesMutualInformationImageToImageMetricIUS2IUS2_Pointer(itkMattesMutualInformationImageToImageMetricIUS2IUS2 * p);
     ~itkMattesMutualInformationImageToImageMetricIUS2IUS2_Pointer();
     itkMattesMutualInformationImageToImageMetricIUS2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMattesMutualInformationImageToImageMetricIUS2IUS2 * GetPointer() const;
     bool operator<(itkMattesMutualInformationImageToImageMetricIUS2IUS2_Pointer const & r) const;
     bool operator>(itkMattesMutualInformationImageToImageMetricIUS2IUS2_Pointer const & r) const;
     bool operator<=(itkMattesMutualInformationImageToImageMetricIUS2IUS2_Pointer const & r) const;
     bool operator>=(itkMattesMutualInformationImageToImageMetricIUS2IUS2_Pointer const & r) const;
     itkMattesMutualInformationImageToImageMetricIUS2IUS2_Pointer & operator=(itkMattesMutualInformationImageToImageMetricIUS2IUS2_Pointer const & r);
     itkMattesMutualInformationImageToImageMetricIUS2IUS2_Pointer & operator=(itkMattesMutualInformationImageToImageMetricIUS2IUS2 * r);
     itkMattesMutualInformationImageToImageMetricIUS2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMattesMutualInformationImageToImageMetricIUS3IUS3 : public itkImageToImageMetricIUS3IUS3 {
   public:
     enum  {  MovingImageDimension = 3 };
     static itkMattesMutualInformationImageToImageMetricIUS3IUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void Initialize();
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & Derivative) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & Derivative) const;
     virtual void SetNumberOfHistogramBins(unsigned long _arg);
     virtual unsigned long const & GetNumberOfHistogramBins() const;
     virtual void SetUseExplicitPDFDerivatives(bool const _arg);
     virtual bool const & GetUseExplicitPDFDerivatives() const;
     virtual void UseExplicitPDFDerivativesOn();
     virtual void UseExplicitPDFDerivativesOff();
   private:
     itkMattesMutualInformationImageToImageMetricIUS3IUS3(itkMattesMutualInformationImageToImageMetricIUS3IUS3 const & arg0);
     void operator=(itkMattesMutualInformationImageToImageMetricIUS3IUS3 const & arg0);
     virtual void ComputeFixedImageParzenWindowIndices(std::vector< itkImageToImageMetricIUS3IUS3::FixedImageSamplePoint > & samples);
     virtual void ComputePDFDerivatives(unsigned int threadID, unsigned int sampleNumber, int movingImageParzenWindowIndex, itkCovariantVectorD3 const & movingImageGradientValue, double cubicBSplineDerivativeValue) const;
     virtual void GetValueThreadPreProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual bool GetValueThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD3 const & mappedPoint, double movingImageValue) const;
     virtual void GetValueThreadPostProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual void GetValueAndDerivativeThreadPreProcess(unsigned int threadID, bool withinSampleThread) const;
     virtual bool GetValueAndDerivativeThreadProcessSample(unsigned int threadID, unsigned long fixedImageSample, itkPointD3 const & mappedPoint, double movingImageValue, itkCovariantVectorD3 const & movingImageGradientValue) const;
     virtual void GetValueAndDerivativeThreadPostProcess(unsigned int threadID, bool withinSampleThread) const;
   protected:
     itkMattesMutualInformationImageToImageMetricIUS3IUS3();
     ~itkMattesMutualInformationImageToImageMetricIUS3IUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMattesMutualInformationImageToImageMetricIUS3IUS3_Pointer {
   public:
     itkMattesMutualInformationImageToImageMetricIUS3IUS3_Pointer();
     itkMattesMutualInformationImageToImageMetricIUS3IUS3_Pointer(itkMattesMutualInformationImageToImageMetricIUS3IUS3_Pointer const & p);
     itkMattesMutualInformationImageToImageMetricIUS3IUS3_Pointer(itkMattesMutualInformationImageToImageMetricIUS3IUS3 * p);
     ~itkMattesMutualInformationImageToImageMetricIUS3IUS3_Pointer();
     itkMattesMutualInformationImageToImageMetricIUS3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMattesMutualInformationImageToImageMetricIUS3IUS3 * GetPointer() const;
     bool operator<(itkMattesMutualInformationImageToImageMetricIUS3IUS3_Pointer const & r) const;
     bool operator>(itkMattesMutualInformationImageToImageMetricIUS3IUS3_Pointer const & r) const;
     bool operator<=(itkMattesMutualInformationImageToImageMetricIUS3IUS3_Pointer const & r) const;
     bool operator>=(itkMattesMutualInformationImageToImageMetricIUS3IUS3_Pointer const & r) const;
     itkMattesMutualInformationImageToImageMetricIUS3IUS3_Pointer & operator=(itkMattesMutualInformationImageToImageMetricIUS3IUS3_Pointer const & r);
     itkMattesMutualInformationImageToImageMetricIUS3IUS3_Pointer & operator=(itkMattesMutualInformationImageToImageMetricIUS3IUS3 * r);
     itkMattesMutualInformationImageToImageMetricIUS3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


