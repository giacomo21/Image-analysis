// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkCellInterfaceChicken
#endif
#ifdef SWIGCSHARP
%module itkCellInterfaceCsharp
#endif
#ifdef SWIGGUILE
%module itkCellInterfaceGuile
#endif
#ifdef SWIGJAVA
%module itkCellInterfaceJava
#endif
#ifdef SWIGLUA
%module itkCellInterfaceLua
#endif
#ifdef SWIGMODULA3
%module itkCellInterfaceModula3
#endif
#ifdef SWIGMZSCHEME
%module itkCellInterfaceMzscheme
#endif
#ifdef SWIGOCAML
%module itkCellInterfaceOcaml
#endif
#ifdef SWIGPERL
%module itkCellInterfacePerl
#endif
#ifdef SWIGPERL5
%module itkCellInterfacePerl5
#endif
#ifdef SWIGPHP
%module itkCellInterfacePhp
#endif
#ifdef SWIGPHP4
%module itkCellInterfacePhp4
#endif
#ifdef SWIGPHP5
%module itkCellInterfacePhp5
#endif
#ifdef SWIGPIKE
%module itkCellInterfacePike
#endif
#ifdef SWIGPYTHON
%module itkCellInterfacePython
#endif
#ifdef SWIGR
%module itkCellInterfaceR
#endif
#ifdef SWIGRUBY
%module itkCellInterfaceRuby
#endif
#ifdef SWIGSEXP
%module itkCellInterfaceSexp
#endif
#ifdef SWIGTCL
%module itkCellInterfaceTcl
#endif
#ifdef SWIGXML
%module itkCellInterfaceXml
#endif

%{
#include "Base.includes"
#include "Mesh.includes"
%}


%{
%}




%import wrap_itkQuadEdgeMeshBase.i
%import wrap_itkArray.i


%include itk.i
%include wrap_itkCellInterface_ext.i


 class itkCellInterfaceDQEMCTI2 {
   public:
     enum  {  PointDimension = 2 };
     enum CellGeometry {  VERTEX_CELL = 0,  LINE_CELL = 1,  TRIANGLE_CELL = 2,  QUADRILATERAL_CELL = 3,  POLYGON_CELL = 4,  TETRAHEDRON_CELL = 5,  HEXAHEDRON_CELL = 6,  QUADRATIC_EDGE_CELL = 7,  QUADRATIC_TRIANGLE_CELL = 8,  LAST_ITK_CELL = 9,  MAX_ITK_CELLS = 255 };
     virtual void Accept(unsigned long cellId, itkCellInterfaceDQEMCTI2::MultiVisitor * arg1) = 0;
     virtual itkCellInterfaceDQEMCTI2::CellGeometry GetType() const = 0;
     virtual void MakeCopy(itkCellInterfaceDQEMCTI2_AutoPointer & arg0) const = 0;
     virtual unsigned int GetDimension() const = 0;
     virtual unsigned int GetInterpolationOrder() const;
     virtual unsigned int GetNumberOfPoints() const = 0;
     virtual unsigned char GetNumberOfBoundaryFeatures(int dimension) const = 0;
     virtual bool GetBoundaryFeature(int dimension, unsigned char arg1, itkCellInterfaceDQEMCTI2_AutoPointer & arg2) = 0;
     virtual unsigned long const * GetPointIds() const;
     virtual void SetPointIds(unsigned long const * first) = 0;
     virtual void SetPointIds(unsigned long const * first, unsigned long const * last) = 0;
     virtual void SetPointId(int localId, unsigned long arg1) = 0;
     virtual unsigned long * PointIdsBegin() = 0;
     virtual unsigned long const * PointIdsBegin() const = 0;
     virtual unsigned long * PointIdsEnd() = 0;
     virtual unsigned long const * PointIdsEnd() const = 0;
     virtual bool GetClosestBoundary(float * arg0, bool * arg1, itkCellInterfaceDQEMCTI2_AutoPointer & arg2);
     virtual bool EvaluatePosition(float * arg0, itkMapContainerULQEMPF2 * arg1, float * arg2, float * arg3, double * arg4, float * arg5);
     virtual void EvaluateShapeFunctions(itkArrayF const & arg0, itkArrayF & arg1) const;
     virtual bool IntersectWithLine(float * arg0, float * arg1, float arg2, float * arg3, float * arg4, float * arg5);
     float * GetBoundingBox(float * arg0);
     float GetBoundingBoxDiagonalLength2();
     virtual bool IntersectBoundingBoxWithLine(float * arg0, float * arg1, float * arg2, float * arg3, float * arg4);
     virtual bool IsExplicitBoundary();
     virtual void AddUsingCell(unsigned long cellId);
     virtual void RemoveUsingCell(unsigned long cellId);
     virtual bool IsUsingCell(unsigned long cellId);
     virtual unsigned int GetNumberOfUsingCells();
     virtual char const * GetNameOfClass() const;
     itkCellInterfaceDQEMCTI2();
     ~itkCellInterfaceDQEMCTI2();
   private:
     itkCellInterfaceDQEMCTI2(itkCellInterfaceDQEMCTI2 const & arg0);
     void operator=(itkCellInterfaceDQEMCTI2 const & arg0);
   protected:
 };


 class itkCellInterfaceDQEMCTI2_AutoPointer {
   public:
     itkCellInterfaceDQEMCTI2_AutoPointer();
     itkCellInterfaceDQEMCTI2_AutoPointer(itkCellInterfaceDQEMCTI2_AutoPointer & p);
     itkCellInterfaceDQEMCTI2_AutoPointer(itkCellInterfaceDQEMCTI2 * p, bool takeOwnership);
     ~itkCellInterfaceDQEMCTI2_AutoPointer();
     itkCellInterfaceDQEMCTI2 * operator->() const;
     void Reset();
     void TakeOwnership();
     void TakeOwnership(itkCellInterfaceDQEMCTI2 * objectptr);
     void TakeNoOwnership(itkCellInterfaceDQEMCTI2 * objectptr);
     bool IsOwner() const;
     itkCellInterfaceDQEMCTI2 * ReleaseOwnership();
     itkCellInterfaceDQEMCTI2 * GetPointer() const;
     bool operator==(itkCellInterfaceDQEMCTI2_AutoPointer const & r) const;
     bool operator!=(itkCellInterfaceDQEMCTI2_AutoPointer const & r) const;
     bool operator<(itkCellInterfaceDQEMCTI2_AutoPointer const & r) const;
     bool operator>(itkCellInterfaceDQEMCTI2_AutoPointer const & r) const;
     bool operator<=(itkCellInterfaceDQEMCTI2_AutoPointer const & r) const;
     bool operator>=(itkCellInterfaceDQEMCTI2_AutoPointer const & r) const;
     itkCellInterfaceDQEMCTI2_AutoPointer & operator=(itkCellInterfaceDQEMCTI2_AutoPointer & r);
   private:
     void Swap(itkCellInterfaceDQEMCTI2_AutoPointer & r);
   protected:
 };


 class itkCellInterfaceDQEMCTI3 {
   public:
     enum  {  PointDimension = 3 };
     enum CellGeometry {  VERTEX_CELL = 0,  LINE_CELL = 1,  TRIANGLE_CELL = 2,  QUADRILATERAL_CELL = 3,  POLYGON_CELL = 4,  TETRAHEDRON_CELL = 5,  HEXAHEDRON_CELL = 6,  QUADRATIC_EDGE_CELL = 7,  QUADRATIC_TRIANGLE_CELL = 8,  LAST_ITK_CELL = 9,  MAX_ITK_CELLS = 255 };
     virtual void Accept(unsigned long cellId, itkCellInterfaceDQEMCTI3::MultiVisitor * arg1) = 0;
     virtual itkCellInterfaceDQEMCTI3::CellGeometry GetType() const = 0;
     virtual void MakeCopy(itkCellInterfaceDQEMCTI3_AutoPointer & arg0) const = 0;
     virtual unsigned int GetDimension() const = 0;
     virtual unsigned int GetInterpolationOrder() const;
     virtual unsigned int GetNumberOfPoints() const = 0;
     virtual unsigned char GetNumberOfBoundaryFeatures(int dimension) const = 0;
     virtual bool GetBoundaryFeature(int dimension, unsigned char arg1, itkCellInterfaceDQEMCTI3_AutoPointer & arg2) = 0;
     virtual unsigned long const * GetPointIds() const;
     virtual void SetPointIds(unsigned long const * first) = 0;
     virtual void SetPointIds(unsigned long const * first, unsigned long const * last) = 0;
     virtual void SetPointId(int localId, unsigned long arg1) = 0;
     virtual unsigned long * PointIdsBegin() = 0;
     virtual unsigned long const * PointIdsBegin() const = 0;
     virtual unsigned long * PointIdsEnd() = 0;
     virtual unsigned long const * PointIdsEnd() const = 0;
     virtual bool GetClosestBoundary(float * arg0, bool * arg1, itkCellInterfaceDQEMCTI3_AutoPointer & arg2);
     virtual bool EvaluatePosition(float * arg0, itkMapContainerULQEMPF3 * arg1, float * arg2, float * arg3, double * arg4, float * arg5);
     virtual void EvaluateShapeFunctions(itkArrayF const & arg0, itkArrayF & arg1) const;
     virtual bool IntersectWithLine(float * arg0, float * arg1, float arg2, float * arg3, float * arg4, float * arg5);
     float * GetBoundingBox(float * arg0);
     float GetBoundingBoxDiagonalLength2();
     virtual bool IntersectBoundingBoxWithLine(float * arg0, float * arg1, float * arg2, float * arg3, float * arg4);
     virtual bool IsExplicitBoundary();
     virtual void AddUsingCell(unsigned long cellId);
     virtual void RemoveUsingCell(unsigned long cellId);
     virtual bool IsUsingCell(unsigned long cellId);
     virtual unsigned int GetNumberOfUsingCells();
     virtual char const * GetNameOfClass() const;
     itkCellInterfaceDQEMCTI3();
     ~itkCellInterfaceDQEMCTI3();
   private:
     itkCellInterfaceDQEMCTI3(itkCellInterfaceDQEMCTI3 const & arg0);
     void operator=(itkCellInterfaceDQEMCTI3 const & arg0);
   protected:
 };


 class itkCellInterfaceDQEMCTI3_AutoPointer {
   public:
     itkCellInterfaceDQEMCTI3_AutoPointer();
     itkCellInterfaceDQEMCTI3_AutoPointer(itkCellInterfaceDQEMCTI3_AutoPointer & p);
     itkCellInterfaceDQEMCTI3_AutoPointer(itkCellInterfaceDQEMCTI3 * p, bool takeOwnership);
     ~itkCellInterfaceDQEMCTI3_AutoPointer();
     itkCellInterfaceDQEMCTI3 * operator->() const;
     void Reset();
     void TakeOwnership();
     void TakeOwnership(itkCellInterfaceDQEMCTI3 * objectptr);
     void TakeNoOwnership(itkCellInterfaceDQEMCTI3 * objectptr);
     bool IsOwner() const;
     itkCellInterfaceDQEMCTI3 * ReleaseOwnership();
     itkCellInterfaceDQEMCTI3 * GetPointer() const;
     bool operator==(itkCellInterfaceDQEMCTI3_AutoPointer const & r) const;
     bool operator!=(itkCellInterfaceDQEMCTI3_AutoPointer const & r) const;
     bool operator<(itkCellInterfaceDQEMCTI3_AutoPointer const & r) const;
     bool operator>(itkCellInterfaceDQEMCTI3_AutoPointer const & r) const;
     bool operator<=(itkCellInterfaceDQEMCTI3_AutoPointer const & r) const;
     bool operator>=(itkCellInterfaceDQEMCTI3_AutoPointer const & r) const;
     itkCellInterfaceDQEMCTI3_AutoPointer & operator=(itkCellInterfaceDQEMCTI3_AutoPointer & r);
   private:
     void Swap(itkCellInterfaceDQEMCTI3_AutoPointer & r);
   protected:
 };


