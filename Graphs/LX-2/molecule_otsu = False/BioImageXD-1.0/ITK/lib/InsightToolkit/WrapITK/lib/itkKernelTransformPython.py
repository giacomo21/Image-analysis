# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkKernelTransformPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkKernelTransformPython', [dirname(__file__)])
        except ImportError:
            import _itkKernelTransformPython
            return _itkKernelTransformPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkKernelTransformPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkKernelTransformPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkKernelTransformPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkPointPython
import vnl_vectorPython
import vcl_complexPython
import pyBasePython
import vnl_matrixPython
import itkFixedArrayPython
import itkVectorPython
import vnl_vector_refPython
import itkArrayPython
import itkTransformPython
import itkCovariantVectorPython
import itkArray2DPython
import ITKCommonBasePython
import itkEventObjectsPython
import vnl_matrix_fixedPython
import itkVectorContainerPython
import itkOffsetPython
import itkSizePython
import itkContinuousIndexPython
import itkIndexPython
import itkLevelSetPython
import itkPointSetPython
import itkMapContainerPython
import itkQuadEdgeMeshBasePython
import itkCellInterfacePython
import itkQuadEdgeMeshPointPython
import itkGeometricalQuadEdgePython
import itkQuadEdgePython
import itkBoundingBoxPython
def itkKernelTransformD3_New():
  return itkKernelTransformD3.New()

def itkKernelTransformD2_New():
  return itkKernelTransformD2.New()

class itkKernelTransformD2(itkTransformPython.itkTransformD22):
    """Proxy of C++ itkKernelTransformD2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SpaceDimension = _itkKernelTransformPython.itkKernelTransformD2_SpaceDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkKernelTransformPython.itkKernelTransformD2___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetSourceLandmarks(self):
        """GetSourceLandmarks(self) -> itkPointSetPD22S"""
        return _itkKernelTransformPython.itkKernelTransformD2_GetSourceLandmarks(self)

    def SetSourceLandmarks(self, *args):
        """SetSourceLandmarks(self, itkPointSetPD22S arg0)"""
        return _itkKernelTransformPython.itkKernelTransformD2_SetSourceLandmarks(self, *args)

    def GetTargetLandmarks(self):
        """GetTargetLandmarks(self) -> itkPointSetPD22S"""
        return _itkKernelTransformPython.itkKernelTransformD2_GetTargetLandmarks(self)

    def SetTargetLandmarks(self, *args):
        """SetTargetLandmarks(self, itkPointSetPD22S arg0)"""
        return _itkKernelTransformPython.itkKernelTransformD2_SetTargetLandmarks(self, *args)

    def GetDisplacements(self):
        """GetDisplacements(self) -> itkVectorContainerULVD2"""
        return _itkKernelTransformPython.itkKernelTransformD2_GetDisplacements(self)

    def ComputeWMatrix(self):
        """ComputeWMatrix(self)"""
        return _itkKernelTransformPython.itkKernelTransformD2_ComputeWMatrix(self)

    def UpdateParameters(self):
        """UpdateParameters(self)"""
        return _itkKernelTransformPython.itkKernelTransformD2_UpdateParameters(self)

    def SetStiffness(self, *args):
        """SetStiffness(self, double _arg)"""
        return _itkKernelTransformPython.itkKernelTransformD2_SetStiffness(self, *args)

    def GetStiffness(self):
        """GetStiffness(self) -> double"""
        return _itkKernelTransformPython.itkKernelTransformD2_GetStiffness(self)

    __swig_destroy__ = _itkKernelTransformPython.delete_itkKernelTransformD2
    def cast(*args):
        """cast(itkLightObject obj) -> itkKernelTransformD2"""
        return _itkKernelTransformPython.itkKernelTransformD2_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkKernelTransformD2"""
        return _itkKernelTransformPython.itkKernelTransformD2_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkKernelTransformD2
        
        Create a new object of the class itkKernelTransformD2 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkKernelTransformD2.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkKernelTransformD2.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelTransformD2.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkKernelTransformD2.GetSourceLandmarks = new_instancemethod(_itkKernelTransformPython.itkKernelTransformD2_GetSourceLandmarks,None,itkKernelTransformD2)
itkKernelTransformD2.SetSourceLandmarks = new_instancemethod(_itkKernelTransformPython.itkKernelTransformD2_SetSourceLandmarks,None,itkKernelTransformD2)
itkKernelTransformD2.GetTargetLandmarks = new_instancemethod(_itkKernelTransformPython.itkKernelTransformD2_GetTargetLandmarks,None,itkKernelTransformD2)
itkKernelTransformD2.SetTargetLandmarks = new_instancemethod(_itkKernelTransformPython.itkKernelTransformD2_SetTargetLandmarks,None,itkKernelTransformD2)
itkKernelTransformD2.GetDisplacements = new_instancemethod(_itkKernelTransformPython.itkKernelTransformD2_GetDisplacements,None,itkKernelTransformD2)
itkKernelTransformD2.ComputeWMatrix = new_instancemethod(_itkKernelTransformPython.itkKernelTransformD2_ComputeWMatrix,None,itkKernelTransformD2)
itkKernelTransformD2.UpdateParameters = new_instancemethod(_itkKernelTransformPython.itkKernelTransformD2_UpdateParameters,None,itkKernelTransformD2)
itkKernelTransformD2.SetStiffness = new_instancemethod(_itkKernelTransformPython.itkKernelTransformD2_SetStiffness,None,itkKernelTransformD2)
itkKernelTransformD2.GetStiffness = new_instancemethod(_itkKernelTransformPython.itkKernelTransformD2_GetStiffness,None,itkKernelTransformD2)
itkKernelTransformD2.GetPointer = new_instancemethod(_itkKernelTransformPython.itkKernelTransformD2_GetPointer,None,itkKernelTransformD2)
itkKernelTransformD2_swigregister = _itkKernelTransformPython.itkKernelTransformD2_swigregister
itkKernelTransformD2_swigregister(itkKernelTransformD2)

def itkKernelTransformD2___New_orig__():
  """itkKernelTransformD2___New_orig__()"""
  return _itkKernelTransformPython.itkKernelTransformD2___New_orig__()

def itkKernelTransformD2_cast(*args):
  """itkKernelTransformD2_cast(itkLightObject obj) -> itkKernelTransformD2"""
  return _itkKernelTransformPython.itkKernelTransformD2_cast(*args)

class itkKernelTransformD3(itkTransformPython.itkTransformD33):
    """Proxy of C++ itkKernelTransformD3 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    SpaceDimension = _itkKernelTransformPython.itkKernelTransformD3_SpaceDimension
    def __New_orig__():
        """__New_orig__()"""
        return _itkKernelTransformPython.itkKernelTransformD3___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetSourceLandmarks(self):
        """GetSourceLandmarks(self) -> itkPointSetPD33S"""
        return _itkKernelTransformPython.itkKernelTransformD3_GetSourceLandmarks(self)

    def SetSourceLandmarks(self, *args):
        """SetSourceLandmarks(self, itkPointSetPD33S arg0)"""
        return _itkKernelTransformPython.itkKernelTransformD3_SetSourceLandmarks(self, *args)

    def GetTargetLandmarks(self):
        """GetTargetLandmarks(self) -> itkPointSetPD33S"""
        return _itkKernelTransformPython.itkKernelTransformD3_GetTargetLandmarks(self)

    def SetTargetLandmarks(self, *args):
        """SetTargetLandmarks(self, itkPointSetPD33S arg0)"""
        return _itkKernelTransformPython.itkKernelTransformD3_SetTargetLandmarks(self, *args)

    def GetDisplacements(self):
        """GetDisplacements(self) -> itkVectorContainerULVD3"""
        return _itkKernelTransformPython.itkKernelTransformD3_GetDisplacements(self)

    def ComputeWMatrix(self):
        """ComputeWMatrix(self)"""
        return _itkKernelTransformPython.itkKernelTransformD3_ComputeWMatrix(self)

    def UpdateParameters(self):
        """UpdateParameters(self)"""
        return _itkKernelTransformPython.itkKernelTransformD3_UpdateParameters(self)

    def SetStiffness(self, *args):
        """SetStiffness(self, double _arg)"""
        return _itkKernelTransformPython.itkKernelTransformD3_SetStiffness(self, *args)

    def GetStiffness(self):
        """GetStiffness(self) -> double"""
        return _itkKernelTransformPython.itkKernelTransformD3_GetStiffness(self)

    __swig_destroy__ = _itkKernelTransformPython.delete_itkKernelTransformD3
    def cast(*args):
        """cast(itkLightObject obj) -> itkKernelTransformD3"""
        return _itkKernelTransformPython.itkKernelTransformD3_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkKernelTransformD3"""
        return _itkKernelTransformPython.itkKernelTransformD3_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkKernelTransformD3
        
        Create a new object of the class itkKernelTransformD3 and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkKernelTransformD3.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkKernelTransformD3.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkKernelTransformD3.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkKernelTransformD3.GetSourceLandmarks = new_instancemethod(_itkKernelTransformPython.itkKernelTransformD3_GetSourceLandmarks,None,itkKernelTransformD3)
itkKernelTransformD3.SetSourceLandmarks = new_instancemethod(_itkKernelTransformPython.itkKernelTransformD3_SetSourceLandmarks,None,itkKernelTransformD3)
itkKernelTransformD3.GetTargetLandmarks = new_instancemethod(_itkKernelTransformPython.itkKernelTransformD3_GetTargetLandmarks,None,itkKernelTransformD3)
itkKernelTransformD3.SetTargetLandmarks = new_instancemethod(_itkKernelTransformPython.itkKernelTransformD3_SetTargetLandmarks,None,itkKernelTransformD3)
itkKernelTransformD3.GetDisplacements = new_instancemethod(_itkKernelTransformPython.itkKernelTransformD3_GetDisplacements,None,itkKernelTransformD3)
itkKernelTransformD3.ComputeWMatrix = new_instancemethod(_itkKernelTransformPython.itkKernelTransformD3_ComputeWMatrix,None,itkKernelTransformD3)
itkKernelTransformD3.UpdateParameters = new_instancemethod(_itkKernelTransformPython.itkKernelTransformD3_UpdateParameters,None,itkKernelTransformD3)
itkKernelTransformD3.SetStiffness = new_instancemethod(_itkKernelTransformPython.itkKernelTransformD3_SetStiffness,None,itkKernelTransformD3)
itkKernelTransformD3.GetStiffness = new_instancemethod(_itkKernelTransformPython.itkKernelTransformD3_GetStiffness,None,itkKernelTransformD3)
itkKernelTransformD3.GetPointer = new_instancemethod(_itkKernelTransformPython.itkKernelTransformD3_GetPointer,None,itkKernelTransformD3)
itkKernelTransformD3_swigregister = _itkKernelTransformPython.itkKernelTransformD3_swigregister
itkKernelTransformD3_swigregister(itkKernelTransformD3)

def itkKernelTransformD3___New_orig__():
  """itkKernelTransformD3___New_orig__()"""
  return _itkKernelTransformPython.itkKernelTransformD3___New_orig__()

def itkKernelTransformD3_cast(*args):
  """itkKernelTransformD3_cast(itkLightObject obj) -> itkKernelTransformD3"""
  return _itkKernelTransformPython.itkKernelTransformD3_cast(*args)



