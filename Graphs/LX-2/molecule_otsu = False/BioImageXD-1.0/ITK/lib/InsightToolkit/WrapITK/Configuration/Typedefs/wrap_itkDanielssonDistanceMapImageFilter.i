// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkDanielssonDistanceMapImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkDanielssonDistanceMapImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkDanielssonDistanceMapImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkDanielssonDistanceMapImageFilterJava
#endif
#ifdef SWIGLUA
%module itkDanielssonDistanceMapImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkDanielssonDistanceMapImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkDanielssonDistanceMapImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkDanielssonDistanceMapImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkDanielssonDistanceMapImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkDanielssonDistanceMapImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkDanielssonDistanceMapImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkDanielssonDistanceMapImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkDanielssonDistanceMapImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkDanielssonDistanceMapImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkDanielssonDistanceMapImageFilterPython
#endif
#ifdef SWIGR
%module itkDanielssonDistanceMapImageFilterR
#endif
#ifdef SWIGRUBY
%module itkDanielssonDistanceMapImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkDanielssonDistanceMapImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkDanielssonDistanceMapImageFilterTcl
#endif
#ifdef SWIGXML
%module itkDanielssonDistanceMapImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "DistanceMap.includes"
%}


%{
%}




%import wrap_itkOffset.i
%import wrap_itkImageToImageFilterA.i
%import wrap_itkIndex.i
%import wrap_itkImage.i
%import wrap_ITKCommonBase.i


%include itk.i
%include wrap_itkDanielssonDistanceMapImageFilter_ext.i


 class itkDanielssonDistanceMapImageFilterID2ID2 : public itkImageToImageFilterID2ID2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  UnsignedIntConvertibleToOutputCheck = 1 };
     enum  {  IntConvertibleToOutputCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDanielssonDistanceMapImageFilterID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSquaredDistance(bool const _arg);
     virtual bool const & GetSquaredDistance() const;
     virtual void SquaredDistanceOn();
     virtual void SquaredDistanceOff();
     virtual void SetInputIsBinary(bool const _arg);
     virtual bool const & GetInputIsBinary() const;
     virtual void InputIsBinaryOn();
     virtual void InputIsBinaryOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool const & GetUseImageSpacing() const;
     virtual void UseImageSpacingOn();
     virtual void UseImageSpacingOff();
     itkImageD2 * GetVoronoiMap();
     itkImageD2 * GetDistanceMap();
     itkImageO22 * GetVectorDistanceMap();
   private:
     itkDanielssonDistanceMapImageFilterID2ID2(itkDanielssonDistanceMapImageFilterID2ID2 const & arg0);
     void operator=(itkDanielssonDistanceMapImageFilterID2ID2 const & arg0);
   protected:
     itkDanielssonDistanceMapImageFilterID2ID2();
     ~itkDanielssonDistanceMapImageFilterID2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     void PrepareData();
     void ComputeVoronoiMap();
     void UpdateLocalDistance(itkImageO22 * arg0, itkIndex2 const & arg1, itkOffset2 const & arg2);
 };


 class itkDanielssonDistanceMapImageFilterID2ID2_Pointer {
   public:
     itkDanielssonDistanceMapImageFilterID2ID2_Pointer();
     itkDanielssonDistanceMapImageFilterID2ID2_Pointer(itkDanielssonDistanceMapImageFilterID2ID2_Pointer const & p);
     itkDanielssonDistanceMapImageFilterID2ID2_Pointer(itkDanielssonDistanceMapImageFilterID2ID2 * p);
     ~itkDanielssonDistanceMapImageFilterID2ID2_Pointer();
     itkDanielssonDistanceMapImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDanielssonDistanceMapImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkDanielssonDistanceMapImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkDanielssonDistanceMapImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkDanielssonDistanceMapImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkDanielssonDistanceMapImageFilterID2ID2_Pointer const & r) const;
     itkDanielssonDistanceMapImageFilterID2ID2_Pointer & operator=(itkDanielssonDistanceMapImageFilterID2ID2_Pointer const & r);
     itkDanielssonDistanceMapImageFilterID2ID2_Pointer & operator=(itkDanielssonDistanceMapImageFilterID2ID2 * r);
     itkDanielssonDistanceMapImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDanielssonDistanceMapImageFilterID3ID3 : public itkImageToImageFilterID3ID3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  UnsignedIntConvertibleToOutputCheck = 1 };
     enum  {  IntConvertibleToOutputCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDanielssonDistanceMapImageFilterID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSquaredDistance(bool const _arg);
     virtual bool const & GetSquaredDistance() const;
     virtual void SquaredDistanceOn();
     virtual void SquaredDistanceOff();
     virtual void SetInputIsBinary(bool const _arg);
     virtual bool const & GetInputIsBinary() const;
     virtual void InputIsBinaryOn();
     virtual void InputIsBinaryOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool const & GetUseImageSpacing() const;
     virtual void UseImageSpacingOn();
     virtual void UseImageSpacingOff();
     itkImageD3 * GetVoronoiMap();
     itkImageD3 * GetDistanceMap();
     itkImageO33 * GetVectorDistanceMap();
   private:
     itkDanielssonDistanceMapImageFilterID3ID3(itkDanielssonDistanceMapImageFilterID3ID3 const & arg0);
     void operator=(itkDanielssonDistanceMapImageFilterID3ID3 const & arg0);
   protected:
     itkDanielssonDistanceMapImageFilterID3ID3();
     ~itkDanielssonDistanceMapImageFilterID3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     void PrepareData();
     void ComputeVoronoiMap();
     void UpdateLocalDistance(itkImageO33 * arg0, itkIndex3 const & arg1, itkOffset3 const & arg2);
 };


 class itkDanielssonDistanceMapImageFilterID3ID3_Pointer {
   public:
     itkDanielssonDistanceMapImageFilterID3ID3_Pointer();
     itkDanielssonDistanceMapImageFilterID3ID3_Pointer(itkDanielssonDistanceMapImageFilterID3ID3_Pointer const & p);
     itkDanielssonDistanceMapImageFilterID3ID3_Pointer(itkDanielssonDistanceMapImageFilterID3ID3 * p);
     ~itkDanielssonDistanceMapImageFilterID3ID3_Pointer();
     itkDanielssonDistanceMapImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDanielssonDistanceMapImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkDanielssonDistanceMapImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkDanielssonDistanceMapImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkDanielssonDistanceMapImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkDanielssonDistanceMapImageFilterID3ID3_Pointer const & r) const;
     itkDanielssonDistanceMapImageFilterID3ID3_Pointer & operator=(itkDanielssonDistanceMapImageFilterID3ID3_Pointer const & r);
     itkDanielssonDistanceMapImageFilterID3ID3_Pointer & operator=(itkDanielssonDistanceMapImageFilterID3ID3 * r);
     itkDanielssonDistanceMapImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDanielssonDistanceMapImageFilterIF2IF2 : public itkImageToImageFilterIF2IF2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  UnsignedIntConvertibleToOutputCheck = 1 };
     enum  {  IntConvertibleToOutputCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDanielssonDistanceMapImageFilterIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSquaredDistance(bool const _arg);
     virtual bool const & GetSquaredDistance() const;
     virtual void SquaredDistanceOn();
     virtual void SquaredDistanceOff();
     virtual void SetInputIsBinary(bool const _arg);
     virtual bool const & GetInputIsBinary() const;
     virtual void InputIsBinaryOn();
     virtual void InputIsBinaryOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool const & GetUseImageSpacing() const;
     virtual void UseImageSpacingOn();
     virtual void UseImageSpacingOff();
     itkImageF2 * GetVoronoiMap();
     itkImageF2 * GetDistanceMap();
     itkImageO22 * GetVectorDistanceMap();
   private:
     itkDanielssonDistanceMapImageFilterIF2IF2(itkDanielssonDistanceMapImageFilterIF2IF2 const & arg0);
     void operator=(itkDanielssonDistanceMapImageFilterIF2IF2 const & arg0);
   protected:
     itkDanielssonDistanceMapImageFilterIF2IF2();
     ~itkDanielssonDistanceMapImageFilterIF2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     void PrepareData();
     void ComputeVoronoiMap();
     void UpdateLocalDistance(itkImageO22 * arg0, itkIndex2 const & arg1, itkOffset2 const & arg2);
 };


 class itkDanielssonDistanceMapImageFilterIF2IF2_Pointer {
   public:
     itkDanielssonDistanceMapImageFilterIF2IF2_Pointer();
     itkDanielssonDistanceMapImageFilterIF2IF2_Pointer(itkDanielssonDistanceMapImageFilterIF2IF2_Pointer const & p);
     itkDanielssonDistanceMapImageFilterIF2IF2_Pointer(itkDanielssonDistanceMapImageFilterIF2IF2 * p);
     ~itkDanielssonDistanceMapImageFilterIF2IF2_Pointer();
     itkDanielssonDistanceMapImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDanielssonDistanceMapImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkDanielssonDistanceMapImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkDanielssonDistanceMapImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkDanielssonDistanceMapImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkDanielssonDistanceMapImageFilterIF2IF2_Pointer const & r) const;
     itkDanielssonDistanceMapImageFilterIF2IF2_Pointer & operator=(itkDanielssonDistanceMapImageFilterIF2IF2_Pointer const & r);
     itkDanielssonDistanceMapImageFilterIF2IF2_Pointer & operator=(itkDanielssonDistanceMapImageFilterIF2IF2 * r);
     itkDanielssonDistanceMapImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDanielssonDistanceMapImageFilterIF3IF3 : public itkImageToImageFilterIF3IF3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  UnsignedIntConvertibleToOutputCheck = 1 };
     enum  {  IntConvertibleToOutputCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDanielssonDistanceMapImageFilterIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSquaredDistance(bool const _arg);
     virtual bool const & GetSquaredDistance() const;
     virtual void SquaredDistanceOn();
     virtual void SquaredDistanceOff();
     virtual void SetInputIsBinary(bool const _arg);
     virtual bool const & GetInputIsBinary() const;
     virtual void InputIsBinaryOn();
     virtual void InputIsBinaryOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool const & GetUseImageSpacing() const;
     virtual void UseImageSpacingOn();
     virtual void UseImageSpacingOff();
     itkImageF3 * GetVoronoiMap();
     itkImageF3 * GetDistanceMap();
     itkImageO33 * GetVectorDistanceMap();
   private:
     itkDanielssonDistanceMapImageFilterIF3IF3(itkDanielssonDistanceMapImageFilterIF3IF3 const & arg0);
     void operator=(itkDanielssonDistanceMapImageFilterIF3IF3 const & arg0);
   protected:
     itkDanielssonDistanceMapImageFilterIF3IF3();
     ~itkDanielssonDistanceMapImageFilterIF3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     void PrepareData();
     void ComputeVoronoiMap();
     void UpdateLocalDistance(itkImageO33 * arg0, itkIndex3 const & arg1, itkOffset3 const & arg2);
 };


 class itkDanielssonDistanceMapImageFilterIF3IF3_Pointer {
   public:
     itkDanielssonDistanceMapImageFilterIF3IF3_Pointer();
     itkDanielssonDistanceMapImageFilterIF3IF3_Pointer(itkDanielssonDistanceMapImageFilterIF3IF3_Pointer const & p);
     itkDanielssonDistanceMapImageFilterIF3IF3_Pointer(itkDanielssonDistanceMapImageFilterIF3IF3 * p);
     ~itkDanielssonDistanceMapImageFilterIF3IF3_Pointer();
     itkDanielssonDistanceMapImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDanielssonDistanceMapImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkDanielssonDistanceMapImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkDanielssonDistanceMapImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkDanielssonDistanceMapImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkDanielssonDistanceMapImageFilterIF3IF3_Pointer const & r) const;
     itkDanielssonDistanceMapImageFilterIF3IF3_Pointer & operator=(itkDanielssonDistanceMapImageFilterIF3IF3_Pointer const & r);
     itkDanielssonDistanceMapImageFilterIF3IF3_Pointer & operator=(itkDanielssonDistanceMapImageFilterIF3IF3 * r);
     itkDanielssonDistanceMapImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDanielssonDistanceMapImageFilterIUC2ID2 : public itkImageToImageFilterIUC2ID2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  UnsignedIntConvertibleToOutputCheck = 1 };
     enum  {  IntConvertibleToOutputCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDanielssonDistanceMapImageFilterIUC2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSquaredDistance(bool const _arg);
     virtual bool const & GetSquaredDistance() const;
     virtual void SquaredDistanceOn();
     virtual void SquaredDistanceOff();
     virtual void SetInputIsBinary(bool const _arg);
     virtual bool const & GetInputIsBinary() const;
     virtual void InputIsBinaryOn();
     virtual void InputIsBinaryOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool const & GetUseImageSpacing() const;
     virtual void UseImageSpacingOn();
     virtual void UseImageSpacingOff();
     itkImageD2 * GetVoronoiMap();
     itkImageD2 * GetDistanceMap();
     itkImageO22 * GetVectorDistanceMap();
   private:
     itkDanielssonDistanceMapImageFilterIUC2ID2(itkDanielssonDistanceMapImageFilterIUC2ID2 const & arg0);
     void operator=(itkDanielssonDistanceMapImageFilterIUC2ID2 const & arg0);
   protected:
     itkDanielssonDistanceMapImageFilterIUC2ID2();
     ~itkDanielssonDistanceMapImageFilterIUC2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     void PrepareData();
     void ComputeVoronoiMap();
     void UpdateLocalDistance(itkImageO22 * arg0, itkIndex2 const & arg1, itkOffset2 const & arg2);
 };


 class itkDanielssonDistanceMapImageFilterIUC2ID2_Pointer {
   public:
     itkDanielssonDistanceMapImageFilterIUC2ID2_Pointer();
     itkDanielssonDistanceMapImageFilterIUC2ID2_Pointer(itkDanielssonDistanceMapImageFilterIUC2ID2_Pointer const & p);
     itkDanielssonDistanceMapImageFilterIUC2ID2_Pointer(itkDanielssonDistanceMapImageFilterIUC2ID2 * p);
     ~itkDanielssonDistanceMapImageFilterIUC2ID2_Pointer();
     itkDanielssonDistanceMapImageFilterIUC2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDanielssonDistanceMapImageFilterIUC2ID2 * GetPointer() const;
     bool operator<(itkDanielssonDistanceMapImageFilterIUC2ID2_Pointer const & r) const;
     bool operator>(itkDanielssonDistanceMapImageFilterIUC2ID2_Pointer const & r) const;
     bool operator<=(itkDanielssonDistanceMapImageFilterIUC2ID2_Pointer const & r) const;
     bool operator>=(itkDanielssonDistanceMapImageFilterIUC2ID2_Pointer const & r) const;
     itkDanielssonDistanceMapImageFilterIUC2ID2_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUC2ID2_Pointer const & r);
     itkDanielssonDistanceMapImageFilterIUC2ID2_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUC2ID2 * r);
     itkDanielssonDistanceMapImageFilterIUC2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDanielssonDistanceMapImageFilterIUC2IF2 : public itkImageToImageFilterIUC2IF2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  UnsignedIntConvertibleToOutputCheck = 1 };
     enum  {  IntConvertibleToOutputCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDanielssonDistanceMapImageFilterIUC2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSquaredDistance(bool const _arg);
     virtual bool const & GetSquaredDistance() const;
     virtual void SquaredDistanceOn();
     virtual void SquaredDistanceOff();
     virtual void SetInputIsBinary(bool const _arg);
     virtual bool const & GetInputIsBinary() const;
     virtual void InputIsBinaryOn();
     virtual void InputIsBinaryOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool const & GetUseImageSpacing() const;
     virtual void UseImageSpacingOn();
     virtual void UseImageSpacingOff();
     itkImageF2 * GetVoronoiMap();
     itkImageF2 * GetDistanceMap();
     itkImageO22 * GetVectorDistanceMap();
   private:
     itkDanielssonDistanceMapImageFilterIUC2IF2(itkDanielssonDistanceMapImageFilterIUC2IF2 const & arg0);
     void operator=(itkDanielssonDistanceMapImageFilterIUC2IF2 const & arg0);
   protected:
     itkDanielssonDistanceMapImageFilterIUC2IF2();
     ~itkDanielssonDistanceMapImageFilterIUC2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     void PrepareData();
     void ComputeVoronoiMap();
     void UpdateLocalDistance(itkImageO22 * arg0, itkIndex2 const & arg1, itkOffset2 const & arg2);
 };


 class itkDanielssonDistanceMapImageFilterIUC2IF2_Pointer {
   public:
     itkDanielssonDistanceMapImageFilterIUC2IF2_Pointer();
     itkDanielssonDistanceMapImageFilterIUC2IF2_Pointer(itkDanielssonDistanceMapImageFilterIUC2IF2_Pointer const & p);
     itkDanielssonDistanceMapImageFilterIUC2IF2_Pointer(itkDanielssonDistanceMapImageFilterIUC2IF2 * p);
     ~itkDanielssonDistanceMapImageFilterIUC2IF2_Pointer();
     itkDanielssonDistanceMapImageFilterIUC2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDanielssonDistanceMapImageFilterIUC2IF2 * GetPointer() const;
     bool operator<(itkDanielssonDistanceMapImageFilterIUC2IF2_Pointer const & r) const;
     bool operator>(itkDanielssonDistanceMapImageFilterIUC2IF2_Pointer const & r) const;
     bool operator<=(itkDanielssonDistanceMapImageFilterIUC2IF2_Pointer const & r) const;
     bool operator>=(itkDanielssonDistanceMapImageFilterIUC2IF2_Pointer const & r) const;
     itkDanielssonDistanceMapImageFilterIUC2IF2_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUC2IF2_Pointer const & r);
     itkDanielssonDistanceMapImageFilterIUC2IF2_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUC2IF2 * r);
     itkDanielssonDistanceMapImageFilterIUC2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDanielssonDistanceMapImageFilterIUC2IUC2 : public itkImageToImageFilterIUC2IUC2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  UnsignedIntConvertibleToOutputCheck = 1 };
     enum  {  IntConvertibleToOutputCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDanielssonDistanceMapImageFilterIUC2IUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSquaredDistance(bool const _arg);
     virtual bool const & GetSquaredDistance() const;
     virtual void SquaredDistanceOn();
     virtual void SquaredDistanceOff();
     virtual void SetInputIsBinary(bool const _arg);
     virtual bool const & GetInputIsBinary() const;
     virtual void InputIsBinaryOn();
     virtual void InputIsBinaryOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool const & GetUseImageSpacing() const;
     virtual void UseImageSpacingOn();
     virtual void UseImageSpacingOff();
     itkImageUC2 * GetVoronoiMap();
     itkImageUC2 * GetDistanceMap();
     itkImageO22 * GetVectorDistanceMap();
   private:
     itkDanielssonDistanceMapImageFilterIUC2IUC2(itkDanielssonDistanceMapImageFilterIUC2IUC2 const & arg0);
     void operator=(itkDanielssonDistanceMapImageFilterIUC2IUC2 const & arg0);
   protected:
     itkDanielssonDistanceMapImageFilterIUC2IUC2();
     ~itkDanielssonDistanceMapImageFilterIUC2IUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     void PrepareData();
     void ComputeVoronoiMap();
     void UpdateLocalDistance(itkImageO22 * arg0, itkIndex2 const & arg1, itkOffset2 const & arg2);
 };


 class itkDanielssonDistanceMapImageFilterIUC2IUC2_Pointer {
   public:
     itkDanielssonDistanceMapImageFilterIUC2IUC2_Pointer();
     itkDanielssonDistanceMapImageFilterIUC2IUC2_Pointer(itkDanielssonDistanceMapImageFilterIUC2IUC2_Pointer const & p);
     itkDanielssonDistanceMapImageFilterIUC2IUC2_Pointer(itkDanielssonDistanceMapImageFilterIUC2IUC2 * p);
     ~itkDanielssonDistanceMapImageFilterIUC2IUC2_Pointer();
     itkDanielssonDistanceMapImageFilterIUC2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDanielssonDistanceMapImageFilterIUC2IUC2 * GetPointer() const;
     bool operator<(itkDanielssonDistanceMapImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>(itkDanielssonDistanceMapImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator<=(itkDanielssonDistanceMapImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>=(itkDanielssonDistanceMapImageFilterIUC2IUC2_Pointer const & r) const;
     itkDanielssonDistanceMapImageFilterIUC2IUC2_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUC2IUC2_Pointer const & r);
     itkDanielssonDistanceMapImageFilterIUC2IUC2_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUC2IUC2 * r);
     itkDanielssonDistanceMapImageFilterIUC2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDanielssonDistanceMapImageFilterIUC3ID3 : public itkImageToImageFilterIUC3ID3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  UnsignedIntConvertibleToOutputCheck = 1 };
     enum  {  IntConvertibleToOutputCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDanielssonDistanceMapImageFilterIUC3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSquaredDistance(bool const _arg);
     virtual bool const & GetSquaredDistance() const;
     virtual void SquaredDistanceOn();
     virtual void SquaredDistanceOff();
     virtual void SetInputIsBinary(bool const _arg);
     virtual bool const & GetInputIsBinary() const;
     virtual void InputIsBinaryOn();
     virtual void InputIsBinaryOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool const & GetUseImageSpacing() const;
     virtual void UseImageSpacingOn();
     virtual void UseImageSpacingOff();
     itkImageD3 * GetVoronoiMap();
     itkImageD3 * GetDistanceMap();
     itkImageO33 * GetVectorDistanceMap();
   private:
     itkDanielssonDistanceMapImageFilterIUC3ID3(itkDanielssonDistanceMapImageFilterIUC3ID3 const & arg0);
     void operator=(itkDanielssonDistanceMapImageFilterIUC3ID3 const & arg0);
   protected:
     itkDanielssonDistanceMapImageFilterIUC3ID3();
     ~itkDanielssonDistanceMapImageFilterIUC3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     void PrepareData();
     void ComputeVoronoiMap();
     void UpdateLocalDistance(itkImageO33 * arg0, itkIndex3 const & arg1, itkOffset3 const & arg2);
 };


 class itkDanielssonDistanceMapImageFilterIUC3ID3_Pointer {
   public:
     itkDanielssonDistanceMapImageFilterIUC3ID3_Pointer();
     itkDanielssonDistanceMapImageFilterIUC3ID3_Pointer(itkDanielssonDistanceMapImageFilterIUC3ID3_Pointer const & p);
     itkDanielssonDistanceMapImageFilterIUC3ID3_Pointer(itkDanielssonDistanceMapImageFilterIUC3ID3 * p);
     ~itkDanielssonDistanceMapImageFilterIUC3ID3_Pointer();
     itkDanielssonDistanceMapImageFilterIUC3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDanielssonDistanceMapImageFilterIUC3ID3 * GetPointer() const;
     bool operator<(itkDanielssonDistanceMapImageFilterIUC3ID3_Pointer const & r) const;
     bool operator>(itkDanielssonDistanceMapImageFilterIUC3ID3_Pointer const & r) const;
     bool operator<=(itkDanielssonDistanceMapImageFilterIUC3ID3_Pointer const & r) const;
     bool operator>=(itkDanielssonDistanceMapImageFilterIUC3ID3_Pointer const & r) const;
     itkDanielssonDistanceMapImageFilterIUC3ID3_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUC3ID3_Pointer const & r);
     itkDanielssonDistanceMapImageFilterIUC3ID3_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUC3ID3 * r);
     itkDanielssonDistanceMapImageFilterIUC3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDanielssonDistanceMapImageFilterIUC3IF3 : public itkImageToImageFilterIUC3IF3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  UnsignedIntConvertibleToOutputCheck = 1 };
     enum  {  IntConvertibleToOutputCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDanielssonDistanceMapImageFilterIUC3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSquaredDistance(bool const _arg);
     virtual bool const & GetSquaredDistance() const;
     virtual void SquaredDistanceOn();
     virtual void SquaredDistanceOff();
     virtual void SetInputIsBinary(bool const _arg);
     virtual bool const & GetInputIsBinary() const;
     virtual void InputIsBinaryOn();
     virtual void InputIsBinaryOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool const & GetUseImageSpacing() const;
     virtual void UseImageSpacingOn();
     virtual void UseImageSpacingOff();
     itkImageF3 * GetVoronoiMap();
     itkImageF3 * GetDistanceMap();
     itkImageO33 * GetVectorDistanceMap();
   private:
     itkDanielssonDistanceMapImageFilterIUC3IF3(itkDanielssonDistanceMapImageFilterIUC3IF3 const & arg0);
     void operator=(itkDanielssonDistanceMapImageFilterIUC3IF3 const & arg0);
   protected:
     itkDanielssonDistanceMapImageFilterIUC3IF3();
     ~itkDanielssonDistanceMapImageFilterIUC3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     void PrepareData();
     void ComputeVoronoiMap();
     void UpdateLocalDistance(itkImageO33 * arg0, itkIndex3 const & arg1, itkOffset3 const & arg2);
 };


 class itkDanielssonDistanceMapImageFilterIUC3IF3_Pointer {
   public:
     itkDanielssonDistanceMapImageFilterIUC3IF3_Pointer();
     itkDanielssonDistanceMapImageFilterIUC3IF3_Pointer(itkDanielssonDistanceMapImageFilterIUC3IF3_Pointer const & p);
     itkDanielssonDistanceMapImageFilterIUC3IF3_Pointer(itkDanielssonDistanceMapImageFilterIUC3IF3 * p);
     ~itkDanielssonDistanceMapImageFilterIUC3IF3_Pointer();
     itkDanielssonDistanceMapImageFilterIUC3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDanielssonDistanceMapImageFilterIUC3IF3 * GetPointer() const;
     bool operator<(itkDanielssonDistanceMapImageFilterIUC3IF3_Pointer const & r) const;
     bool operator>(itkDanielssonDistanceMapImageFilterIUC3IF3_Pointer const & r) const;
     bool operator<=(itkDanielssonDistanceMapImageFilterIUC3IF3_Pointer const & r) const;
     bool operator>=(itkDanielssonDistanceMapImageFilterIUC3IF3_Pointer const & r) const;
     itkDanielssonDistanceMapImageFilterIUC3IF3_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUC3IF3_Pointer const & r);
     itkDanielssonDistanceMapImageFilterIUC3IF3_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUC3IF3 * r);
     itkDanielssonDistanceMapImageFilterIUC3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDanielssonDistanceMapImageFilterIUC3IUC3 : public itkImageToImageFilterIUC3IUC3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  UnsignedIntConvertibleToOutputCheck = 1 };
     enum  {  IntConvertibleToOutputCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDanielssonDistanceMapImageFilterIUC3IUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSquaredDistance(bool const _arg);
     virtual bool const & GetSquaredDistance() const;
     virtual void SquaredDistanceOn();
     virtual void SquaredDistanceOff();
     virtual void SetInputIsBinary(bool const _arg);
     virtual bool const & GetInputIsBinary() const;
     virtual void InputIsBinaryOn();
     virtual void InputIsBinaryOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool const & GetUseImageSpacing() const;
     virtual void UseImageSpacingOn();
     virtual void UseImageSpacingOff();
     itkImageUC3 * GetVoronoiMap();
     itkImageUC3 * GetDistanceMap();
     itkImageO33 * GetVectorDistanceMap();
   private:
     itkDanielssonDistanceMapImageFilterIUC3IUC3(itkDanielssonDistanceMapImageFilterIUC3IUC3 const & arg0);
     void operator=(itkDanielssonDistanceMapImageFilterIUC3IUC3 const & arg0);
   protected:
     itkDanielssonDistanceMapImageFilterIUC3IUC3();
     ~itkDanielssonDistanceMapImageFilterIUC3IUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     void PrepareData();
     void ComputeVoronoiMap();
     void UpdateLocalDistance(itkImageO33 * arg0, itkIndex3 const & arg1, itkOffset3 const & arg2);
 };


 class itkDanielssonDistanceMapImageFilterIUC3IUC3_Pointer {
   public:
     itkDanielssonDistanceMapImageFilterIUC3IUC3_Pointer();
     itkDanielssonDistanceMapImageFilterIUC3IUC3_Pointer(itkDanielssonDistanceMapImageFilterIUC3IUC3_Pointer const & p);
     itkDanielssonDistanceMapImageFilterIUC3IUC3_Pointer(itkDanielssonDistanceMapImageFilterIUC3IUC3 * p);
     ~itkDanielssonDistanceMapImageFilterIUC3IUC3_Pointer();
     itkDanielssonDistanceMapImageFilterIUC3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDanielssonDistanceMapImageFilterIUC3IUC3 * GetPointer() const;
     bool operator<(itkDanielssonDistanceMapImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>(itkDanielssonDistanceMapImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator<=(itkDanielssonDistanceMapImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>=(itkDanielssonDistanceMapImageFilterIUC3IUC3_Pointer const & r) const;
     itkDanielssonDistanceMapImageFilterIUC3IUC3_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUC3IUC3_Pointer const & r);
     itkDanielssonDistanceMapImageFilterIUC3IUC3_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUC3IUC3 * r);
     itkDanielssonDistanceMapImageFilterIUC3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDanielssonDistanceMapImageFilterIUL2ID2 : public itkImageToImageFilterIUL2ID2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  UnsignedIntConvertibleToOutputCheck = 1 };
     enum  {  IntConvertibleToOutputCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDanielssonDistanceMapImageFilterIUL2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSquaredDistance(bool const _arg);
     virtual bool const & GetSquaredDistance() const;
     virtual void SquaredDistanceOn();
     virtual void SquaredDistanceOff();
     virtual void SetInputIsBinary(bool const _arg);
     virtual bool const & GetInputIsBinary() const;
     virtual void InputIsBinaryOn();
     virtual void InputIsBinaryOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool const & GetUseImageSpacing() const;
     virtual void UseImageSpacingOn();
     virtual void UseImageSpacingOff();
     itkImageD2 * GetVoronoiMap();
     itkImageD2 * GetDistanceMap();
     itkImageO22 * GetVectorDistanceMap();
   private:
     itkDanielssonDistanceMapImageFilterIUL2ID2(itkDanielssonDistanceMapImageFilterIUL2ID2 const & arg0);
     void operator=(itkDanielssonDistanceMapImageFilterIUL2ID2 const & arg0);
   protected:
     itkDanielssonDistanceMapImageFilterIUL2ID2();
     ~itkDanielssonDistanceMapImageFilterIUL2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     void PrepareData();
     void ComputeVoronoiMap();
     void UpdateLocalDistance(itkImageO22 * arg0, itkIndex2 const & arg1, itkOffset2 const & arg2);
 };


 class itkDanielssonDistanceMapImageFilterIUL2ID2_Pointer {
   public:
     itkDanielssonDistanceMapImageFilterIUL2ID2_Pointer();
     itkDanielssonDistanceMapImageFilterIUL2ID2_Pointer(itkDanielssonDistanceMapImageFilterIUL2ID2_Pointer const & p);
     itkDanielssonDistanceMapImageFilterIUL2ID2_Pointer(itkDanielssonDistanceMapImageFilterIUL2ID2 * p);
     ~itkDanielssonDistanceMapImageFilterIUL2ID2_Pointer();
     itkDanielssonDistanceMapImageFilterIUL2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDanielssonDistanceMapImageFilterIUL2ID2 * GetPointer() const;
     bool operator<(itkDanielssonDistanceMapImageFilterIUL2ID2_Pointer const & r) const;
     bool operator>(itkDanielssonDistanceMapImageFilterIUL2ID2_Pointer const & r) const;
     bool operator<=(itkDanielssonDistanceMapImageFilterIUL2ID2_Pointer const & r) const;
     bool operator>=(itkDanielssonDistanceMapImageFilterIUL2ID2_Pointer const & r) const;
     itkDanielssonDistanceMapImageFilterIUL2ID2_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUL2ID2_Pointer const & r);
     itkDanielssonDistanceMapImageFilterIUL2ID2_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUL2ID2 * r);
     itkDanielssonDistanceMapImageFilterIUL2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDanielssonDistanceMapImageFilterIUL2IF2 : public itkImageToImageFilterIUL2IF2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  UnsignedIntConvertibleToOutputCheck = 1 };
     enum  {  IntConvertibleToOutputCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDanielssonDistanceMapImageFilterIUL2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSquaredDistance(bool const _arg);
     virtual bool const & GetSquaredDistance() const;
     virtual void SquaredDistanceOn();
     virtual void SquaredDistanceOff();
     virtual void SetInputIsBinary(bool const _arg);
     virtual bool const & GetInputIsBinary() const;
     virtual void InputIsBinaryOn();
     virtual void InputIsBinaryOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool const & GetUseImageSpacing() const;
     virtual void UseImageSpacingOn();
     virtual void UseImageSpacingOff();
     itkImageF2 * GetVoronoiMap();
     itkImageF2 * GetDistanceMap();
     itkImageO22 * GetVectorDistanceMap();
   private:
     itkDanielssonDistanceMapImageFilterIUL2IF2(itkDanielssonDistanceMapImageFilterIUL2IF2 const & arg0);
     void operator=(itkDanielssonDistanceMapImageFilterIUL2IF2 const & arg0);
   protected:
     itkDanielssonDistanceMapImageFilterIUL2IF2();
     ~itkDanielssonDistanceMapImageFilterIUL2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     void PrepareData();
     void ComputeVoronoiMap();
     void UpdateLocalDistance(itkImageO22 * arg0, itkIndex2 const & arg1, itkOffset2 const & arg2);
 };


 class itkDanielssonDistanceMapImageFilterIUL2IF2_Pointer {
   public:
     itkDanielssonDistanceMapImageFilterIUL2IF2_Pointer();
     itkDanielssonDistanceMapImageFilterIUL2IF2_Pointer(itkDanielssonDistanceMapImageFilterIUL2IF2_Pointer const & p);
     itkDanielssonDistanceMapImageFilterIUL2IF2_Pointer(itkDanielssonDistanceMapImageFilterIUL2IF2 * p);
     ~itkDanielssonDistanceMapImageFilterIUL2IF2_Pointer();
     itkDanielssonDistanceMapImageFilterIUL2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDanielssonDistanceMapImageFilterIUL2IF2 * GetPointer() const;
     bool operator<(itkDanielssonDistanceMapImageFilterIUL2IF2_Pointer const & r) const;
     bool operator>(itkDanielssonDistanceMapImageFilterIUL2IF2_Pointer const & r) const;
     bool operator<=(itkDanielssonDistanceMapImageFilterIUL2IF2_Pointer const & r) const;
     bool operator>=(itkDanielssonDistanceMapImageFilterIUL2IF2_Pointer const & r) const;
     itkDanielssonDistanceMapImageFilterIUL2IF2_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUL2IF2_Pointer const & r);
     itkDanielssonDistanceMapImageFilterIUL2IF2_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUL2IF2 * r);
     itkDanielssonDistanceMapImageFilterIUL2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDanielssonDistanceMapImageFilterIUL2IUL2 : public itkImageToImageFilterIUL2IUL2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  UnsignedIntConvertibleToOutputCheck = 1 };
     enum  {  IntConvertibleToOutputCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDanielssonDistanceMapImageFilterIUL2IUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSquaredDistance(bool const _arg);
     virtual bool const & GetSquaredDistance() const;
     virtual void SquaredDistanceOn();
     virtual void SquaredDistanceOff();
     virtual void SetInputIsBinary(bool const _arg);
     virtual bool const & GetInputIsBinary() const;
     virtual void InputIsBinaryOn();
     virtual void InputIsBinaryOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool const & GetUseImageSpacing() const;
     virtual void UseImageSpacingOn();
     virtual void UseImageSpacingOff();
     itkImageUL2 * GetVoronoiMap();
     itkImageUL2 * GetDistanceMap();
     itkImageO22 * GetVectorDistanceMap();
   private:
     itkDanielssonDistanceMapImageFilterIUL2IUL2(itkDanielssonDistanceMapImageFilterIUL2IUL2 const & arg0);
     void operator=(itkDanielssonDistanceMapImageFilterIUL2IUL2 const & arg0);
   protected:
     itkDanielssonDistanceMapImageFilterIUL2IUL2();
     ~itkDanielssonDistanceMapImageFilterIUL2IUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     void PrepareData();
     void ComputeVoronoiMap();
     void UpdateLocalDistance(itkImageO22 * arg0, itkIndex2 const & arg1, itkOffset2 const & arg2);
 };


 class itkDanielssonDistanceMapImageFilterIUL2IUL2_Pointer {
   public:
     itkDanielssonDistanceMapImageFilterIUL2IUL2_Pointer();
     itkDanielssonDistanceMapImageFilterIUL2IUL2_Pointer(itkDanielssonDistanceMapImageFilterIUL2IUL2_Pointer const & p);
     itkDanielssonDistanceMapImageFilterIUL2IUL2_Pointer(itkDanielssonDistanceMapImageFilterIUL2IUL2 * p);
     ~itkDanielssonDistanceMapImageFilterIUL2IUL2_Pointer();
     itkDanielssonDistanceMapImageFilterIUL2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDanielssonDistanceMapImageFilterIUL2IUL2 * GetPointer() const;
     bool operator<(itkDanielssonDistanceMapImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>(itkDanielssonDistanceMapImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator<=(itkDanielssonDistanceMapImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>=(itkDanielssonDistanceMapImageFilterIUL2IUL2_Pointer const & r) const;
     itkDanielssonDistanceMapImageFilterIUL2IUL2_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUL2IUL2_Pointer const & r);
     itkDanielssonDistanceMapImageFilterIUL2IUL2_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUL2IUL2 * r);
     itkDanielssonDistanceMapImageFilterIUL2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDanielssonDistanceMapImageFilterIUL3ID3 : public itkImageToImageFilterIUL3ID3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  UnsignedIntConvertibleToOutputCheck = 1 };
     enum  {  IntConvertibleToOutputCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDanielssonDistanceMapImageFilterIUL3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSquaredDistance(bool const _arg);
     virtual bool const & GetSquaredDistance() const;
     virtual void SquaredDistanceOn();
     virtual void SquaredDistanceOff();
     virtual void SetInputIsBinary(bool const _arg);
     virtual bool const & GetInputIsBinary() const;
     virtual void InputIsBinaryOn();
     virtual void InputIsBinaryOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool const & GetUseImageSpacing() const;
     virtual void UseImageSpacingOn();
     virtual void UseImageSpacingOff();
     itkImageD3 * GetVoronoiMap();
     itkImageD3 * GetDistanceMap();
     itkImageO33 * GetVectorDistanceMap();
   private:
     itkDanielssonDistanceMapImageFilterIUL3ID3(itkDanielssonDistanceMapImageFilterIUL3ID3 const & arg0);
     void operator=(itkDanielssonDistanceMapImageFilterIUL3ID3 const & arg0);
   protected:
     itkDanielssonDistanceMapImageFilterIUL3ID3();
     ~itkDanielssonDistanceMapImageFilterIUL3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     void PrepareData();
     void ComputeVoronoiMap();
     void UpdateLocalDistance(itkImageO33 * arg0, itkIndex3 const & arg1, itkOffset3 const & arg2);
 };


 class itkDanielssonDistanceMapImageFilterIUL3ID3_Pointer {
   public:
     itkDanielssonDistanceMapImageFilterIUL3ID3_Pointer();
     itkDanielssonDistanceMapImageFilterIUL3ID3_Pointer(itkDanielssonDistanceMapImageFilterIUL3ID3_Pointer const & p);
     itkDanielssonDistanceMapImageFilterIUL3ID3_Pointer(itkDanielssonDistanceMapImageFilterIUL3ID3 * p);
     ~itkDanielssonDistanceMapImageFilterIUL3ID3_Pointer();
     itkDanielssonDistanceMapImageFilterIUL3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDanielssonDistanceMapImageFilterIUL3ID3 * GetPointer() const;
     bool operator<(itkDanielssonDistanceMapImageFilterIUL3ID3_Pointer const & r) const;
     bool operator>(itkDanielssonDistanceMapImageFilterIUL3ID3_Pointer const & r) const;
     bool operator<=(itkDanielssonDistanceMapImageFilterIUL3ID3_Pointer const & r) const;
     bool operator>=(itkDanielssonDistanceMapImageFilterIUL3ID3_Pointer const & r) const;
     itkDanielssonDistanceMapImageFilterIUL3ID3_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUL3ID3_Pointer const & r);
     itkDanielssonDistanceMapImageFilterIUL3ID3_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUL3ID3 * r);
     itkDanielssonDistanceMapImageFilterIUL3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDanielssonDistanceMapImageFilterIUL3IF3 : public itkImageToImageFilterIUL3IF3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  UnsignedIntConvertibleToOutputCheck = 1 };
     enum  {  IntConvertibleToOutputCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDanielssonDistanceMapImageFilterIUL3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSquaredDistance(bool const _arg);
     virtual bool const & GetSquaredDistance() const;
     virtual void SquaredDistanceOn();
     virtual void SquaredDistanceOff();
     virtual void SetInputIsBinary(bool const _arg);
     virtual bool const & GetInputIsBinary() const;
     virtual void InputIsBinaryOn();
     virtual void InputIsBinaryOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool const & GetUseImageSpacing() const;
     virtual void UseImageSpacingOn();
     virtual void UseImageSpacingOff();
     itkImageF3 * GetVoronoiMap();
     itkImageF3 * GetDistanceMap();
     itkImageO33 * GetVectorDistanceMap();
   private:
     itkDanielssonDistanceMapImageFilterIUL3IF3(itkDanielssonDistanceMapImageFilterIUL3IF3 const & arg0);
     void operator=(itkDanielssonDistanceMapImageFilterIUL3IF3 const & arg0);
   protected:
     itkDanielssonDistanceMapImageFilterIUL3IF3();
     ~itkDanielssonDistanceMapImageFilterIUL3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     void PrepareData();
     void ComputeVoronoiMap();
     void UpdateLocalDistance(itkImageO33 * arg0, itkIndex3 const & arg1, itkOffset3 const & arg2);
 };


 class itkDanielssonDistanceMapImageFilterIUL3IF3_Pointer {
   public:
     itkDanielssonDistanceMapImageFilterIUL3IF3_Pointer();
     itkDanielssonDistanceMapImageFilterIUL3IF3_Pointer(itkDanielssonDistanceMapImageFilterIUL3IF3_Pointer const & p);
     itkDanielssonDistanceMapImageFilterIUL3IF3_Pointer(itkDanielssonDistanceMapImageFilterIUL3IF3 * p);
     ~itkDanielssonDistanceMapImageFilterIUL3IF3_Pointer();
     itkDanielssonDistanceMapImageFilterIUL3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDanielssonDistanceMapImageFilterIUL3IF3 * GetPointer() const;
     bool operator<(itkDanielssonDistanceMapImageFilterIUL3IF3_Pointer const & r) const;
     bool operator>(itkDanielssonDistanceMapImageFilterIUL3IF3_Pointer const & r) const;
     bool operator<=(itkDanielssonDistanceMapImageFilterIUL3IF3_Pointer const & r) const;
     bool operator>=(itkDanielssonDistanceMapImageFilterIUL3IF3_Pointer const & r) const;
     itkDanielssonDistanceMapImageFilterIUL3IF3_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUL3IF3_Pointer const & r);
     itkDanielssonDistanceMapImageFilterIUL3IF3_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUL3IF3 * r);
     itkDanielssonDistanceMapImageFilterIUL3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDanielssonDistanceMapImageFilterIUL3IUL3 : public itkImageToImageFilterIUL3IUL3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  UnsignedIntConvertibleToOutputCheck = 1 };
     enum  {  IntConvertibleToOutputCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDanielssonDistanceMapImageFilterIUL3IUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSquaredDistance(bool const _arg);
     virtual bool const & GetSquaredDistance() const;
     virtual void SquaredDistanceOn();
     virtual void SquaredDistanceOff();
     virtual void SetInputIsBinary(bool const _arg);
     virtual bool const & GetInputIsBinary() const;
     virtual void InputIsBinaryOn();
     virtual void InputIsBinaryOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool const & GetUseImageSpacing() const;
     virtual void UseImageSpacingOn();
     virtual void UseImageSpacingOff();
     itkImageUL3 * GetVoronoiMap();
     itkImageUL3 * GetDistanceMap();
     itkImageO33 * GetVectorDistanceMap();
   private:
     itkDanielssonDistanceMapImageFilterIUL3IUL3(itkDanielssonDistanceMapImageFilterIUL3IUL3 const & arg0);
     void operator=(itkDanielssonDistanceMapImageFilterIUL3IUL3 const & arg0);
   protected:
     itkDanielssonDistanceMapImageFilterIUL3IUL3();
     ~itkDanielssonDistanceMapImageFilterIUL3IUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     void PrepareData();
     void ComputeVoronoiMap();
     void UpdateLocalDistance(itkImageO33 * arg0, itkIndex3 const & arg1, itkOffset3 const & arg2);
 };


 class itkDanielssonDistanceMapImageFilterIUL3IUL3_Pointer {
   public:
     itkDanielssonDistanceMapImageFilterIUL3IUL3_Pointer();
     itkDanielssonDistanceMapImageFilterIUL3IUL3_Pointer(itkDanielssonDistanceMapImageFilterIUL3IUL3_Pointer const & p);
     itkDanielssonDistanceMapImageFilterIUL3IUL3_Pointer(itkDanielssonDistanceMapImageFilterIUL3IUL3 * p);
     ~itkDanielssonDistanceMapImageFilterIUL3IUL3_Pointer();
     itkDanielssonDistanceMapImageFilterIUL3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDanielssonDistanceMapImageFilterIUL3IUL3 * GetPointer() const;
     bool operator<(itkDanielssonDistanceMapImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>(itkDanielssonDistanceMapImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator<=(itkDanielssonDistanceMapImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>=(itkDanielssonDistanceMapImageFilterIUL3IUL3_Pointer const & r) const;
     itkDanielssonDistanceMapImageFilterIUL3IUL3_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUL3IUL3_Pointer const & r);
     itkDanielssonDistanceMapImageFilterIUL3IUL3_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUL3IUL3 * r);
     itkDanielssonDistanceMapImageFilterIUL3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDanielssonDistanceMapImageFilterIUS2ID2 : public itkImageToImageFilterIUS2ID2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  UnsignedIntConvertibleToOutputCheck = 1 };
     enum  {  IntConvertibleToOutputCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDanielssonDistanceMapImageFilterIUS2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSquaredDistance(bool const _arg);
     virtual bool const & GetSquaredDistance() const;
     virtual void SquaredDistanceOn();
     virtual void SquaredDistanceOff();
     virtual void SetInputIsBinary(bool const _arg);
     virtual bool const & GetInputIsBinary() const;
     virtual void InputIsBinaryOn();
     virtual void InputIsBinaryOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool const & GetUseImageSpacing() const;
     virtual void UseImageSpacingOn();
     virtual void UseImageSpacingOff();
     itkImageD2 * GetVoronoiMap();
     itkImageD2 * GetDistanceMap();
     itkImageO22 * GetVectorDistanceMap();
   private:
     itkDanielssonDistanceMapImageFilterIUS2ID2(itkDanielssonDistanceMapImageFilterIUS2ID2 const & arg0);
     void operator=(itkDanielssonDistanceMapImageFilterIUS2ID2 const & arg0);
   protected:
     itkDanielssonDistanceMapImageFilterIUS2ID2();
     ~itkDanielssonDistanceMapImageFilterIUS2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     void PrepareData();
     void ComputeVoronoiMap();
     void UpdateLocalDistance(itkImageO22 * arg0, itkIndex2 const & arg1, itkOffset2 const & arg2);
 };


 class itkDanielssonDistanceMapImageFilterIUS2ID2_Pointer {
   public:
     itkDanielssonDistanceMapImageFilterIUS2ID2_Pointer();
     itkDanielssonDistanceMapImageFilterIUS2ID2_Pointer(itkDanielssonDistanceMapImageFilterIUS2ID2_Pointer const & p);
     itkDanielssonDistanceMapImageFilterIUS2ID2_Pointer(itkDanielssonDistanceMapImageFilterIUS2ID2 * p);
     ~itkDanielssonDistanceMapImageFilterIUS2ID2_Pointer();
     itkDanielssonDistanceMapImageFilterIUS2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDanielssonDistanceMapImageFilterIUS2ID2 * GetPointer() const;
     bool operator<(itkDanielssonDistanceMapImageFilterIUS2ID2_Pointer const & r) const;
     bool operator>(itkDanielssonDistanceMapImageFilterIUS2ID2_Pointer const & r) const;
     bool operator<=(itkDanielssonDistanceMapImageFilterIUS2ID2_Pointer const & r) const;
     bool operator>=(itkDanielssonDistanceMapImageFilterIUS2ID2_Pointer const & r) const;
     itkDanielssonDistanceMapImageFilterIUS2ID2_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUS2ID2_Pointer const & r);
     itkDanielssonDistanceMapImageFilterIUS2ID2_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUS2ID2 * r);
     itkDanielssonDistanceMapImageFilterIUS2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDanielssonDistanceMapImageFilterIUS2IF2 : public itkImageToImageFilterIUS2IF2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  UnsignedIntConvertibleToOutputCheck = 1 };
     enum  {  IntConvertibleToOutputCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDanielssonDistanceMapImageFilterIUS2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSquaredDistance(bool const _arg);
     virtual bool const & GetSquaredDistance() const;
     virtual void SquaredDistanceOn();
     virtual void SquaredDistanceOff();
     virtual void SetInputIsBinary(bool const _arg);
     virtual bool const & GetInputIsBinary() const;
     virtual void InputIsBinaryOn();
     virtual void InputIsBinaryOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool const & GetUseImageSpacing() const;
     virtual void UseImageSpacingOn();
     virtual void UseImageSpacingOff();
     itkImageF2 * GetVoronoiMap();
     itkImageF2 * GetDistanceMap();
     itkImageO22 * GetVectorDistanceMap();
   private:
     itkDanielssonDistanceMapImageFilterIUS2IF2(itkDanielssonDistanceMapImageFilterIUS2IF2 const & arg0);
     void operator=(itkDanielssonDistanceMapImageFilterIUS2IF2 const & arg0);
   protected:
     itkDanielssonDistanceMapImageFilterIUS2IF2();
     ~itkDanielssonDistanceMapImageFilterIUS2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     void PrepareData();
     void ComputeVoronoiMap();
     void UpdateLocalDistance(itkImageO22 * arg0, itkIndex2 const & arg1, itkOffset2 const & arg2);
 };


 class itkDanielssonDistanceMapImageFilterIUS2IF2_Pointer {
   public:
     itkDanielssonDistanceMapImageFilterIUS2IF2_Pointer();
     itkDanielssonDistanceMapImageFilterIUS2IF2_Pointer(itkDanielssonDistanceMapImageFilterIUS2IF2_Pointer const & p);
     itkDanielssonDistanceMapImageFilterIUS2IF2_Pointer(itkDanielssonDistanceMapImageFilterIUS2IF2 * p);
     ~itkDanielssonDistanceMapImageFilterIUS2IF2_Pointer();
     itkDanielssonDistanceMapImageFilterIUS2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDanielssonDistanceMapImageFilterIUS2IF2 * GetPointer() const;
     bool operator<(itkDanielssonDistanceMapImageFilterIUS2IF2_Pointer const & r) const;
     bool operator>(itkDanielssonDistanceMapImageFilterIUS2IF2_Pointer const & r) const;
     bool operator<=(itkDanielssonDistanceMapImageFilterIUS2IF2_Pointer const & r) const;
     bool operator>=(itkDanielssonDistanceMapImageFilterIUS2IF2_Pointer const & r) const;
     itkDanielssonDistanceMapImageFilterIUS2IF2_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUS2IF2_Pointer const & r);
     itkDanielssonDistanceMapImageFilterIUS2IF2_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUS2IF2 * r);
     itkDanielssonDistanceMapImageFilterIUS2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDanielssonDistanceMapImageFilterIUS2IUS2 : public itkImageToImageFilterIUS2IUS2 {
   public:
     enum  {  InputImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  UnsignedIntConvertibleToOutputCheck = 1 };
     enum  {  IntConvertibleToOutputCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDanielssonDistanceMapImageFilterIUS2IUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSquaredDistance(bool const _arg);
     virtual bool const & GetSquaredDistance() const;
     virtual void SquaredDistanceOn();
     virtual void SquaredDistanceOff();
     virtual void SetInputIsBinary(bool const _arg);
     virtual bool const & GetInputIsBinary() const;
     virtual void InputIsBinaryOn();
     virtual void InputIsBinaryOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool const & GetUseImageSpacing() const;
     virtual void UseImageSpacingOn();
     virtual void UseImageSpacingOff();
     itkImageUS2 * GetVoronoiMap();
     itkImageUS2 * GetDistanceMap();
     itkImageO22 * GetVectorDistanceMap();
   private:
     itkDanielssonDistanceMapImageFilterIUS2IUS2(itkDanielssonDistanceMapImageFilterIUS2IUS2 const & arg0);
     void operator=(itkDanielssonDistanceMapImageFilterIUS2IUS2 const & arg0);
   protected:
     itkDanielssonDistanceMapImageFilterIUS2IUS2();
     ~itkDanielssonDistanceMapImageFilterIUS2IUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     void PrepareData();
     void ComputeVoronoiMap();
     void UpdateLocalDistance(itkImageO22 * arg0, itkIndex2 const & arg1, itkOffset2 const & arg2);
 };


 class itkDanielssonDistanceMapImageFilterIUS2IUS2_Pointer {
   public:
     itkDanielssonDistanceMapImageFilterIUS2IUS2_Pointer();
     itkDanielssonDistanceMapImageFilterIUS2IUS2_Pointer(itkDanielssonDistanceMapImageFilterIUS2IUS2_Pointer const & p);
     itkDanielssonDistanceMapImageFilterIUS2IUS2_Pointer(itkDanielssonDistanceMapImageFilterIUS2IUS2 * p);
     ~itkDanielssonDistanceMapImageFilterIUS2IUS2_Pointer();
     itkDanielssonDistanceMapImageFilterIUS2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDanielssonDistanceMapImageFilterIUS2IUS2 * GetPointer() const;
     bool operator<(itkDanielssonDistanceMapImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>(itkDanielssonDistanceMapImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator<=(itkDanielssonDistanceMapImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>=(itkDanielssonDistanceMapImageFilterIUS2IUS2_Pointer const & r) const;
     itkDanielssonDistanceMapImageFilterIUS2IUS2_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUS2IUS2_Pointer const & r);
     itkDanielssonDistanceMapImageFilterIUS2IUS2_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUS2IUS2 * r);
     itkDanielssonDistanceMapImageFilterIUS2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDanielssonDistanceMapImageFilterIUS3ID3 : public itkImageToImageFilterIUS3ID3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  UnsignedIntConvertibleToOutputCheck = 1 };
     enum  {  IntConvertibleToOutputCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDanielssonDistanceMapImageFilterIUS3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSquaredDistance(bool const _arg);
     virtual bool const & GetSquaredDistance() const;
     virtual void SquaredDistanceOn();
     virtual void SquaredDistanceOff();
     virtual void SetInputIsBinary(bool const _arg);
     virtual bool const & GetInputIsBinary() const;
     virtual void InputIsBinaryOn();
     virtual void InputIsBinaryOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool const & GetUseImageSpacing() const;
     virtual void UseImageSpacingOn();
     virtual void UseImageSpacingOff();
     itkImageD3 * GetVoronoiMap();
     itkImageD3 * GetDistanceMap();
     itkImageO33 * GetVectorDistanceMap();
   private:
     itkDanielssonDistanceMapImageFilterIUS3ID3(itkDanielssonDistanceMapImageFilterIUS3ID3 const & arg0);
     void operator=(itkDanielssonDistanceMapImageFilterIUS3ID3 const & arg0);
   protected:
     itkDanielssonDistanceMapImageFilterIUS3ID3();
     ~itkDanielssonDistanceMapImageFilterIUS3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     void PrepareData();
     void ComputeVoronoiMap();
     void UpdateLocalDistance(itkImageO33 * arg0, itkIndex3 const & arg1, itkOffset3 const & arg2);
 };


 class itkDanielssonDistanceMapImageFilterIUS3ID3_Pointer {
   public:
     itkDanielssonDistanceMapImageFilterIUS3ID3_Pointer();
     itkDanielssonDistanceMapImageFilterIUS3ID3_Pointer(itkDanielssonDistanceMapImageFilterIUS3ID3_Pointer const & p);
     itkDanielssonDistanceMapImageFilterIUS3ID3_Pointer(itkDanielssonDistanceMapImageFilterIUS3ID3 * p);
     ~itkDanielssonDistanceMapImageFilterIUS3ID3_Pointer();
     itkDanielssonDistanceMapImageFilterIUS3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDanielssonDistanceMapImageFilterIUS3ID3 * GetPointer() const;
     bool operator<(itkDanielssonDistanceMapImageFilterIUS3ID3_Pointer const & r) const;
     bool operator>(itkDanielssonDistanceMapImageFilterIUS3ID3_Pointer const & r) const;
     bool operator<=(itkDanielssonDistanceMapImageFilterIUS3ID3_Pointer const & r) const;
     bool operator>=(itkDanielssonDistanceMapImageFilterIUS3ID3_Pointer const & r) const;
     itkDanielssonDistanceMapImageFilterIUS3ID3_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUS3ID3_Pointer const & r);
     itkDanielssonDistanceMapImageFilterIUS3ID3_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUS3ID3 * r);
     itkDanielssonDistanceMapImageFilterIUS3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDanielssonDistanceMapImageFilterIUS3IF3 : public itkImageToImageFilterIUS3IF3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  UnsignedIntConvertibleToOutputCheck = 1 };
     enum  {  IntConvertibleToOutputCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDanielssonDistanceMapImageFilterIUS3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSquaredDistance(bool const _arg);
     virtual bool const & GetSquaredDistance() const;
     virtual void SquaredDistanceOn();
     virtual void SquaredDistanceOff();
     virtual void SetInputIsBinary(bool const _arg);
     virtual bool const & GetInputIsBinary() const;
     virtual void InputIsBinaryOn();
     virtual void InputIsBinaryOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool const & GetUseImageSpacing() const;
     virtual void UseImageSpacingOn();
     virtual void UseImageSpacingOff();
     itkImageF3 * GetVoronoiMap();
     itkImageF3 * GetDistanceMap();
     itkImageO33 * GetVectorDistanceMap();
   private:
     itkDanielssonDistanceMapImageFilterIUS3IF3(itkDanielssonDistanceMapImageFilterIUS3IF3 const & arg0);
     void operator=(itkDanielssonDistanceMapImageFilterIUS3IF3 const & arg0);
   protected:
     itkDanielssonDistanceMapImageFilterIUS3IF3();
     ~itkDanielssonDistanceMapImageFilterIUS3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     void PrepareData();
     void ComputeVoronoiMap();
     void UpdateLocalDistance(itkImageO33 * arg0, itkIndex3 const & arg1, itkOffset3 const & arg2);
 };


 class itkDanielssonDistanceMapImageFilterIUS3IF3_Pointer {
   public:
     itkDanielssonDistanceMapImageFilterIUS3IF3_Pointer();
     itkDanielssonDistanceMapImageFilterIUS3IF3_Pointer(itkDanielssonDistanceMapImageFilterIUS3IF3_Pointer const & p);
     itkDanielssonDistanceMapImageFilterIUS3IF3_Pointer(itkDanielssonDistanceMapImageFilterIUS3IF3 * p);
     ~itkDanielssonDistanceMapImageFilterIUS3IF3_Pointer();
     itkDanielssonDistanceMapImageFilterIUS3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDanielssonDistanceMapImageFilterIUS3IF3 * GetPointer() const;
     bool operator<(itkDanielssonDistanceMapImageFilterIUS3IF3_Pointer const & r) const;
     bool operator>(itkDanielssonDistanceMapImageFilterIUS3IF3_Pointer const & r) const;
     bool operator<=(itkDanielssonDistanceMapImageFilterIUS3IF3_Pointer const & r) const;
     bool operator>=(itkDanielssonDistanceMapImageFilterIUS3IF3_Pointer const & r) const;
     itkDanielssonDistanceMapImageFilterIUS3IF3_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUS3IF3_Pointer const & r);
     itkDanielssonDistanceMapImageFilterIUS3IF3_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUS3IF3 * r);
     itkDanielssonDistanceMapImageFilterIUS3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkDanielssonDistanceMapImageFilterIUS3IUS3 : public itkImageToImageFilterIUS3IUS3 {
   public:
     enum  {  InputImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  UnsignedIntConvertibleToOutputCheck = 1 };
     enum  {  IntConvertibleToOutputCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     enum  {  InputConvertibleToOutputCheck = 1 };
     static itkDanielssonDistanceMapImageFilterIUS3IUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetSquaredDistance(bool const _arg);
     virtual bool const & GetSquaredDistance() const;
     virtual void SquaredDistanceOn();
     virtual void SquaredDistanceOff();
     virtual void SetInputIsBinary(bool const _arg);
     virtual bool const & GetInputIsBinary() const;
     virtual void InputIsBinaryOn();
     virtual void InputIsBinaryOff();
     virtual void SetUseImageSpacing(bool const _arg);
     virtual bool const & GetUseImageSpacing() const;
     virtual void UseImageSpacingOn();
     virtual void UseImageSpacingOff();
     itkImageUS3 * GetVoronoiMap();
     itkImageUS3 * GetDistanceMap();
     itkImageO33 * GetVectorDistanceMap();
   private:
     itkDanielssonDistanceMapImageFilterIUS3IUS3(itkDanielssonDistanceMapImageFilterIUS3IUS3 const & arg0);
     void operator=(itkDanielssonDistanceMapImageFilterIUS3IUS3 const & arg0);
   protected:
     itkDanielssonDistanceMapImageFilterIUS3IUS3();
     ~itkDanielssonDistanceMapImageFilterIUS3IUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void GenerateData();
     void PrepareData();
     void ComputeVoronoiMap();
     void UpdateLocalDistance(itkImageO33 * arg0, itkIndex3 const & arg1, itkOffset3 const & arg2);
 };


 class itkDanielssonDistanceMapImageFilterIUS3IUS3_Pointer {
   public:
     itkDanielssonDistanceMapImageFilterIUS3IUS3_Pointer();
     itkDanielssonDistanceMapImageFilterIUS3IUS3_Pointer(itkDanielssonDistanceMapImageFilterIUS3IUS3_Pointer const & p);
     itkDanielssonDistanceMapImageFilterIUS3IUS3_Pointer(itkDanielssonDistanceMapImageFilterIUS3IUS3 * p);
     ~itkDanielssonDistanceMapImageFilterIUS3IUS3_Pointer();
     itkDanielssonDistanceMapImageFilterIUS3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkDanielssonDistanceMapImageFilterIUS3IUS3 * GetPointer() const;
     bool operator<(itkDanielssonDistanceMapImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>(itkDanielssonDistanceMapImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator<=(itkDanielssonDistanceMapImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>=(itkDanielssonDistanceMapImageFilterIUS3IUS3_Pointer const & r) const;
     itkDanielssonDistanceMapImageFilterIUS3IUS3_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUS3IUS3_Pointer const & r);
     itkDanielssonDistanceMapImageFilterIUS3IUS3_Pointer & operator=(itkDanielssonDistanceMapImageFilterIUS3IUS3 * r);
     itkDanielssonDistanceMapImageFilterIUS3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


