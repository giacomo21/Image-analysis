// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkElasticBodySplineKernelTransformChicken
#endif
#ifdef SWIGCSHARP
%module itkElasticBodySplineKernelTransformCsharp
#endif
#ifdef SWIGGUILE
%module itkElasticBodySplineKernelTransformGuile
#endif
#ifdef SWIGJAVA
%module itkElasticBodySplineKernelTransformJava
#endif
#ifdef SWIGLUA
%module itkElasticBodySplineKernelTransformLua
#endif
#ifdef SWIGMODULA3
%module itkElasticBodySplineKernelTransformModula3
#endif
#ifdef SWIGMZSCHEME
%module itkElasticBodySplineKernelTransformMzscheme
#endif
#ifdef SWIGOCAML
%module itkElasticBodySplineKernelTransformOcaml
#endif
#ifdef SWIGPERL
%module itkElasticBodySplineKernelTransformPerl
#endif
#ifdef SWIGPERL5
%module itkElasticBodySplineKernelTransformPerl5
#endif
#ifdef SWIGPHP
%module itkElasticBodySplineKernelTransformPhp
#endif
#ifdef SWIGPHP4
%module itkElasticBodySplineKernelTransformPhp4
#endif
#ifdef SWIGPHP5
%module itkElasticBodySplineKernelTransformPhp5
#endif
#ifdef SWIGPIKE
%module itkElasticBodySplineKernelTransformPike
#endif
#ifdef SWIGPYTHON
%module itkElasticBodySplineKernelTransformPython
#endif
#ifdef SWIGR
%module itkElasticBodySplineKernelTransformR
#endif
#ifdef SWIGRUBY
%module itkElasticBodySplineKernelTransformRuby
#endif
#ifdef SWIGSEXP
%module itkElasticBodySplineKernelTransformSexp
#endif
#ifdef SWIGTCL
%module itkElasticBodySplineKernelTransformTcl
#endif
#ifdef SWIGXML
%module itkElasticBodySplineKernelTransformXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
#include "Interpolators.includes"
#include "Mesh.includes"
#include "DeformableTransforms.includes"
%}


%{
%}




%import wrap_vnl_matrix_fixed.i
%import wrap_ITKCommonBase.i
%import wrap_itkKernelTransform.i
%import wrap_itkVector.i


%include itk.i
%include wrap_itkElasticBodySplineKernelTransform_ext.i


 class itkElasticBodySplineKernelTransformD2 : public itkKernelTransformD2 {
   public:
     enum  {  SpaceDimension = 2 };
     virtual char const * GetNameOfClass() const;
     static itkElasticBodySplineKernelTransformD2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void SetAlpha(double const _arg);
     virtual double GetAlpha() const;
   private:
     itkElasticBodySplineKernelTransformD2(itkElasticBodySplineKernelTransformD2 const & arg0);
     void operator=(itkElasticBodySplineKernelTransformD2 const & arg0);
   protected:
     itkElasticBodySplineKernelTransformD2();
     ~itkElasticBodySplineKernelTransformD2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ComputeG(itkVectorD2 const & landmarkVector, vnl_matrix_fixedD_2_2 & gmatrix) const;
     virtual vnl_matrix_fixedD_2_2 const & ComputeG(itkVectorD2 const & landmarkVector) const;
 };


 class itkElasticBodySplineKernelTransformD2_Pointer {
   public:
     itkElasticBodySplineKernelTransformD2_Pointer();
     itkElasticBodySplineKernelTransformD2_Pointer(itkElasticBodySplineKernelTransformD2_Pointer const & p);
     itkElasticBodySplineKernelTransformD2_Pointer(itkElasticBodySplineKernelTransformD2 * p);
     ~itkElasticBodySplineKernelTransformD2_Pointer();
     itkElasticBodySplineKernelTransformD2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkElasticBodySplineKernelTransformD2 * GetPointer() const;
     bool operator<(itkElasticBodySplineKernelTransformD2_Pointer const & r) const;
     bool operator>(itkElasticBodySplineKernelTransformD2_Pointer const & r) const;
     bool operator<=(itkElasticBodySplineKernelTransformD2_Pointer const & r) const;
     bool operator>=(itkElasticBodySplineKernelTransformD2_Pointer const & r) const;
     itkElasticBodySplineKernelTransformD2_Pointer & operator=(itkElasticBodySplineKernelTransformD2_Pointer const & r);
     itkElasticBodySplineKernelTransformD2_Pointer & operator=(itkElasticBodySplineKernelTransformD2 * r);
     itkElasticBodySplineKernelTransformD2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkElasticBodySplineKernelTransformD3 : public itkKernelTransformD3 {
   public:
     enum  {  SpaceDimension = 3 };
     virtual char const * GetNameOfClass() const;
     static itkElasticBodySplineKernelTransformD3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual void SetAlpha(double const _arg);
     virtual double GetAlpha() const;
   private:
     itkElasticBodySplineKernelTransformD3(itkElasticBodySplineKernelTransformD3 const & arg0);
     void operator=(itkElasticBodySplineKernelTransformD3 const & arg0);
   protected:
     itkElasticBodySplineKernelTransformD3();
     ~itkElasticBodySplineKernelTransformD3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void ComputeG(itkVectorD3 const & landmarkVector, vnl_matrix_fixedD_3_3 & gmatrix) const;
     virtual vnl_matrix_fixedD_3_3 const & ComputeG(itkVectorD3 const & landmarkVector) const;
 };


 class itkElasticBodySplineKernelTransformD3_Pointer {
   public:
     itkElasticBodySplineKernelTransformD3_Pointer();
     itkElasticBodySplineKernelTransformD3_Pointer(itkElasticBodySplineKernelTransformD3_Pointer const & p);
     itkElasticBodySplineKernelTransformD3_Pointer(itkElasticBodySplineKernelTransformD3 * p);
     ~itkElasticBodySplineKernelTransformD3_Pointer();
     itkElasticBodySplineKernelTransformD3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkElasticBodySplineKernelTransformD3 * GetPointer() const;
     bool operator<(itkElasticBodySplineKernelTransformD3_Pointer const & r) const;
     bool operator>(itkElasticBodySplineKernelTransformD3_Pointer const & r) const;
     bool operator<=(itkElasticBodySplineKernelTransformD3_Pointer const & r) const;
     bool operator>=(itkElasticBodySplineKernelTransformD3_Pointer const & r) const;
     itkElasticBodySplineKernelTransformD3_Pointer & operator=(itkElasticBodySplineKernelTransformD3_Pointer const & r);
     itkElasticBodySplineKernelTransformD3_Pointer & operator=(itkElasticBodySplineKernelTransformD3 * r);
     itkElasticBodySplineKernelTransformD3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


