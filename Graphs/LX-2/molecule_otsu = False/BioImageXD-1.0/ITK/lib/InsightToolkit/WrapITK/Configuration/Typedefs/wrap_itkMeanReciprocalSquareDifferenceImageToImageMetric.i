// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkMeanReciprocalSquareDifferenceImageToImageMetricChicken
#endif
#ifdef SWIGCSHARP
%module itkMeanReciprocalSquareDifferenceImageToImageMetricCsharp
#endif
#ifdef SWIGGUILE
%module itkMeanReciprocalSquareDifferenceImageToImageMetricGuile
#endif
#ifdef SWIGJAVA
%module itkMeanReciprocalSquareDifferenceImageToImageMetricJava
#endif
#ifdef SWIGLUA
%module itkMeanReciprocalSquareDifferenceImageToImageMetricLua
#endif
#ifdef SWIGMODULA3
%module itkMeanReciprocalSquareDifferenceImageToImageMetricModula3
#endif
#ifdef SWIGMZSCHEME
%module itkMeanReciprocalSquareDifferenceImageToImageMetricMzscheme
#endif
#ifdef SWIGOCAML
%module itkMeanReciprocalSquareDifferenceImageToImageMetricOcaml
#endif
#ifdef SWIGPERL
%module itkMeanReciprocalSquareDifferenceImageToImageMetricPerl
#endif
#ifdef SWIGPERL5
%module itkMeanReciprocalSquareDifferenceImageToImageMetricPerl5
#endif
#ifdef SWIGPHP
%module itkMeanReciprocalSquareDifferenceImageToImageMetricPhp
#endif
#ifdef SWIGPHP4
%module itkMeanReciprocalSquareDifferenceImageToImageMetricPhp4
#endif
#ifdef SWIGPHP5
%module itkMeanReciprocalSquareDifferenceImageToImageMetricPhp5
#endif
#ifdef SWIGPIKE
%module itkMeanReciprocalSquareDifferenceImageToImageMetricPike
#endif
#ifdef SWIGPYTHON
%module itkMeanReciprocalSquareDifferenceImageToImageMetricPython
#endif
#ifdef SWIGR
%module itkMeanReciprocalSquareDifferenceImageToImageMetricR
#endif
#ifdef SWIGRUBY
%module itkMeanReciprocalSquareDifferenceImageToImageMetricRuby
#endif
#ifdef SWIGSEXP
%module itkMeanReciprocalSquareDifferenceImageToImageMetricSexp
#endif
#ifdef SWIGTCL
%module itkMeanReciprocalSquareDifferenceImageToImageMetricTcl
#endif
#ifdef SWIGXML
%module itkMeanReciprocalSquareDifferenceImageToImageMetricXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Numerics.includes"
#include "Transforms.includes"
#include "SpatialObject.includes"
#include "Resize.includes"
#include "Calculators.includes"
#include "Registration.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkArray.i
%import wrap_itkImageToImageMetric.i


%include itk.i
%include wrap_itkMeanReciprocalSquareDifferenceImageToImageMetric_ext.i


 class itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2 : public itkImageToImageMetricID2ID2 {
   public:
     static itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & derivative) const;
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & derivative) const;
     virtual double GetLambda() const;
     virtual void SetLambda(double const _arg);
     virtual double GetDelta() const;
     virtual void SetDelta(double const _arg);
   private:
     itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2(itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2 const & arg0);
     void operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2 const & arg0);
   protected:
     itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2();
     ~itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_Pointer {
   public:
     itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_Pointer();
     itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_Pointer(itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_Pointer const & p);
     itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_Pointer(itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2 * p);
     ~itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_Pointer();
     itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2 * GetPointer() const;
     bool operator<(itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_Pointer const & r) const;
     bool operator>(itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_Pointer const & r) const;
     bool operator<=(itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_Pointer const & r) const;
     bool operator>=(itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_Pointer const & r) const;
     itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_Pointer & operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_Pointer const & r);
     itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2_Pointer & operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2 * r);
     itkMeanReciprocalSquareDifferenceImageToImageMetricID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3 : public itkImageToImageMetricID3ID3 {
   public:
     static itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & derivative) const;
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & derivative) const;
     virtual double GetLambda() const;
     virtual void SetLambda(double const _arg);
     virtual double GetDelta() const;
     virtual void SetDelta(double const _arg);
   private:
     itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3(itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3 const & arg0);
     void operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3 const & arg0);
   protected:
     itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3();
     ~itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_Pointer {
   public:
     itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_Pointer();
     itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_Pointer(itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_Pointer const & p);
     itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_Pointer(itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3 * p);
     ~itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_Pointer();
     itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3 * GetPointer() const;
     bool operator<(itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_Pointer const & r) const;
     bool operator>(itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_Pointer const & r) const;
     bool operator<=(itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_Pointer const & r) const;
     bool operator>=(itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_Pointer const & r) const;
     itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_Pointer & operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_Pointer const & r);
     itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3_Pointer & operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3 * r);
     itkMeanReciprocalSquareDifferenceImageToImageMetricID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2 : public itkImageToImageMetricIF2IF2 {
   public:
     static itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & derivative) const;
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & derivative) const;
     virtual double GetLambda() const;
     virtual void SetLambda(double const _arg);
     virtual double GetDelta() const;
     virtual void SetDelta(double const _arg);
   private:
     itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2(itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2 const & arg0);
     void operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2 const & arg0);
   protected:
     itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2();
     ~itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Pointer {
   public:
     itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Pointer();
     itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Pointer(itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Pointer const & p);
     itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Pointer(itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2 * p);
     ~itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Pointer();
     itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2 * GetPointer() const;
     bool operator<(itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Pointer const & r) const;
     bool operator>(itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Pointer const & r) const;
     bool operator<=(itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Pointer const & r) const;
     bool operator>=(itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Pointer const & r) const;
     itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Pointer & operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Pointer const & r);
     itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2_Pointer & operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2 * r);
     itkMeanReciprocalSquareDifferenceImageToImageMetricIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3 : public itkImageToImageMetricIF3IF3 {
   public:
     static itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & derivative) const;
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & derivative) const;
     virtual double GetLambda() const;
     virtual void SetLambda(double const _arg);
     virtual double GetDelta() const;
     virtual void SetDelta(double const _arg);
   private:
     itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3(itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3 const & arg0);
     void operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3 const & arg0);
   protected:
     itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3();
     ~itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Pointer {
   public:
     itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Pointer();
     itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Pointer(itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Pointer const & p);
     itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Pointer(itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3 * p);
     ~itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Pointer();
     itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3 * GetPointer() const;
     bool operator<(itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Pointer const & r) const;
     bool operator>(itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Pointer const & r) const;
     bool operator<=(itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Pointer const & r) const;
     bool operator>=(itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Pointer const & r) const;
     itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Pointer & operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Pointer const & r);
     itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3_Pointer & operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3 * r);
     itkMeanReciprocalSquareDifferenceImageToImageMetricIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2 : public itkImageToImageMetricIUC2IUC2 {
   public:
     static itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & derivative) const;
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & derivative) const;
     virtual double GetLambda() const;
     virtual void SetLambda(double const _arg);
     virtual double GetDelta() const;
     virtual void SetDelta(double const _arg);
   private:
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2 const & arg0);
     void operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2 const & arg0);
   protected:
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2();
     ~itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Pointer {
   public:
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Pointer();
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Pointer(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Pointer const & p);
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Pointer(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2 * p);
     ~itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Pointer();
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2 * GetPointer() const;
     bool operator<(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Pointer const & r) const;
     bool operator>(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Pointer const & r) const;
     bool operator<=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Pointer const & r) const;
     bool operator>=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Pointer const & r) const;
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Pointer & operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Pointer const & r);
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2_Pointer & operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2 * r);
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUC2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3 : public itkImageToImageMetricIUC3IUC3 {
   public:
     static itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & derivative) const;
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & derivative) const;
     virtual double GetLambda() const;
     virtual void SetLambda(double const _arg);
     virtual double GetDelta() const;
     virtual void SetDelta(double const _arg);
   private:
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3 const & arg0);
     void operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3 const & arg0);
   protected:
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3();
     ~itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Pointer {
   public:
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Pointer();
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Pointer(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Pointer const & p);
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Pointer(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3 * p);
     ~itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Pointer();
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3 * GetPointer() const;
     bool operator<(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Pointer const & r) const;
     bool operator>(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Pointer const & r) const;
     bool operator<=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Pointer const & r) const;
     bool operator>=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Pointer const & r) const;
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Pointer & operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Pointer const & r);
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3_Pointer & operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3 * r);
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUC3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2 : public itkImageToImageMetricIUL2IUL2 {
   public:
     static itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & derivative) const;
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & derivative) const;
     virtual double GetLambda() const;
     virtual void SetLambda(double const _arg);
     virtual double GetDelta() const;
     virtual void SetDelta(double const _arg);
   private:
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2(itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2 const & arg0);
     void operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2 const & arg0);
   protected:
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2();
     ~itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_Pointer {
   public:
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_Pointer();
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_Pointer(itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_Pointer const & p);
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_Pointer(itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2 * p);
     ~itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_Pointer();
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2 * GetPointer() const;
     bool operator<(itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_Pointer const & r) const;
     bool operator>(itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_Pointer const & r) const;
     bool operator<=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_Pointer const & r) const;
     bool operator>=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_Pointer const & r) const;
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_Pointer & operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_Pointer const & r);
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2_Pointer & operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2 * r);
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUL2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3 : public itkImageToImageMetricIUL3IUL3 {
   public:
     static itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & derivative) const;
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & derivative) const;
     virtual double GetLambda() const;
     virtual void SetLambda(double const _arg);
     virtual double GetDelta() const;
     virtual void SetDelta(double const _arg);
   private:
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3(itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3 const & arg0);
     void operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3 const & arg0);
   protected:
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3();
     ~itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_Pointer {
   public:
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_Pointer();
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_Pointer(itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_Pointer const & p);
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_Pointer(itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3 * p);
     ~itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_Pointer();
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3 * GetPointer() const;
     bool operator<(itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_Pointer const & r) const;
     bool operator>(itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_Pointer const & r) const;
     bool operator<=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_Pointer const & r) const;
     bool operator>=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_Pointer const & r) const;
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_Pointer & operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_Pointer const & r);
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3_Pointer & operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3 * r);
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUL3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2 : public itkImageToImageMetricIUS2IUS2 {
   public:
     static itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & derivative) const;
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & derivative) const;
     virtual double GetLambda() const;
     virtual void SetLambda(double const _arg);
     virtual double GetDelta() const;
     virtual void SetDelta(double const _arg);
   private:
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2 const & arg0);
     void operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2 const & arg0);
   protected:
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2();
     ~itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Pointer {
   public:
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Pointer();
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Pointer(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Pointer const & p);
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Pointer(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2 * p);
     ~itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Pointer();
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2 * GetPointer() const;
     bool operator<(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Pointer const & r) const;
     bool operator>(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Pointer const & r) const;
     bool operator<=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Pointer const & r) const;
     bool operator>=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Pointer const & r) const;
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Pointer & operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Pointer const & r);
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2_Pointer & operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2 * r);
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUS2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3 : public itkImageToImageMetricIUS3IUS3 {
   public:
     static itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void GetDerivative(itkArrayD const & parameters, itkArrayD & derivative) const;
     virtual double GetValue(itkArrayD const & parameters) const;
     virtual void GetValueAndDerivative(itkArrayD const & parameters, double & Value, itkArrayD & derivative) const;
     virtual double GetLambda() const;
     virtual void SetLambda(double const _arg);
     virtual double GetDelta() const;
     virtual void SetDelta(double const _arg);
   private:
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3 const & arg0);
     void operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3 const & arg0);
   protected:
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3();
     ~itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Pointer {
   public:
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Pointer();
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Pointer(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Pointer const & p);
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Pointer(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3 * p);
     ~itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Pointer();
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3 * GetPointer() const;
     bool operator<(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Pointer const & r) const;
     bool operator>(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Pointer const & r) const;
     bool operator<=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Pointer const & r) const;
     bool operator>=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Pointer const & r) const;
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Pointer & operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Pointer const & r);
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3_Pointer & operator=(itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3 * r);
     itkMeanReciprocalSquareDifferenceImageToImageMetricIUS3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


