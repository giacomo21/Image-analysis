// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkImageSourceChicken
#endif
#ifdef SWIGCSHARP
%module itkImageSourceCsharp
#endif
#ifdef SWIGGUILE
%module itkImageSourceGuile
#endif
#ifdef SWIGJAVA
%module itkImageSourceJava
#endif
#ifdef SWIGLUA
%module itkImageSourceLua
#endif
#ifdef SWIGMODULA3
%module itkImageSourceModula3
#endif
#ifdef SWIGMZSCHEME
%module itkImageSourceMzscheme
#endif
#ifdef SWIGOCAML
%module itkImageSourceOcaml
#endif
#ifdef SWIGPERL
%module itkImageSourcePerl
#endif
#ifdef SWIGPERL5
%module itkImageSourcePerl5
#endif
#ifdef SWIGPHP
%module itkImageSourcePhp
#endif
#ifdef SWIGPHP4
%module itkImageSourcePhp4
#endif
#ifdef SWIGPHP5
%module itkImageSourcePhp5
#endif
#ifdef SWIGPIKE
%module itkImageSourcePike
#endif
#ifdef SWIGPYTHON
%module itkImageSourcePython
#endif
#ifdef SWIGR
%module itkImageSourceR
#endif
#ifdef SWIGRUBY
%module itkImageSourceRuby
#endif
#ifdef SWIGSEXP
%module itkImageSourceSexp
#endif
#ifdef SWIGTCL
%module itkImageSourceTcl
#endif
#ifdef SWIGXML
%module itkImageSourceXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkImage.i
%import wrap_itkVectorImage.i
%import wrap_ITKRegions.i


%include itk.i
%include wrap_itkImageSource_ext.i


 class itkImageSourceICF2 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     itkImageCF2 * GetOutput();
     itkImageCF2 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceICF2(itkImageSourceICF2 const & arg0);
     void operator=(itkImageSourceICF2 const & arg0);
   protected:
     itkImageSourceICF2();
     ~itkImageSourceICF2();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion2 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceICF2_Pointer {
   public:
     itkImageSourceICF2_Pointer();
     itkImageSourceICF2_Pointer(itkImageSourceICF2_Pointer const & p);
     itkImageSourceICF2_Pointer(itkImageSourceICF2 * p);
     ~itkImageSourceICF2_Pointer();
     itkImageSourceICF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceICF2 * GetPointer() const;
     bool operator<(itkImageSourceICF2_Pointer const & r) const;
     bool operator>(itkImageSourceICF2_Pointer const & r) const;
     bool operator<=(itkImageSourceICF2_Pointer const & r) const;
     bool operator>=(itkImageSourceICF2_Pointer const & r) const;
     itkImageSourceICF2_Pointer & operator=(itkImageSourceICF2_Pointer const & r);
     itkImageSourceICF2_Pointer & operator=(itkImageSourceICF2 * r);
     itkImageSourceICF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceICF3 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     itkImageCF3 * GetOutput();
     itkImageCF3 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceICF3(itkImageSourceICF3 const & arg0);
     void operator=(itkImageSourceICF3 const & arg0);
   protected:
     itkImageSourceICF3();
     ~itkImageSourceICF3();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion3 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceICF3_Pointer {
   public:
     itkImageSourceICF3_Pointer();
     itkImageSourceICF3_Pointer(itkImageSourceICF3_Pointer const & p);
     itkImageSourceICF3_Pointer(itkImageSourceICF3 * p);
     ~itkImageSourceICF3_Pointer();
     itkImageSourceICF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceICF3 * GetPointer() const;
     bool operator<(itkImageSourceICF3_Pointer const & r) const;
     bool operator>(itkImageSourceICF3_Pointer const & r) const;
     bool operator<=(itkImageSourceICF3_Pointer const & r) const;
     bool operator>=(itkImageSourceICF3_Pointer const & r) const;
     itkImageSourceICF3_Pointer & operator=(itkImageSourceICF3_Pointer const & r);
     itkImageSourceICF3_Pointer & operator=(itkImageSourceICF3 * r);
     itkImageSourceICF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceICVF22 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     itkImageCVF22 * GetOutput();
     itkImageCVF22 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceICVF22(itkImageSourceICVF22 const & arg0);
     void operator=(itkImageSourceICVF22 const & arg0);
   protected:
     itkImageSourceICVF22();
     ~itkImageSourceICVF22();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion2 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceICVF22_Pointer {
   public:
     itkImageSourceICVF22_Pointer();
     itkImageSourceICVF22_Pointer(itkImageSourceICVF22_Pointer const & p);
     itkImageSourceICVF22_Pointer(itkImageSourceICVF22 * p);
     ~itkImageSourceICVF22_Pointer();
     itkImageSourceICVF22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceICVF22 * GetPointer() const;
     bool operator<(itkImageSourceICVF22_Pointer const & r) const;
     bool operator>(itkImageSourceICVF22_Pointer const & r) const;
     bool operator<=(itkImageSourceICVF22_Pointer const & r) const;
     bool operator>=(itkImageSourceICVF22_Pointer const & r) const;
     itkImageSourceICVF22_Pointer & operator=(itkImageSourceICVF22_Pointer const & r);
     itkImageSourceICVF22_Pointer & operator=(itkImageSourceICVF22 * r);
     itkImageSourceICVF22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceICVF33 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     itkImageCVF33 * GetOutput();
     itkImageCVF33 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceICVF33(itkImageSourceICVF33 const & arg0);
     void operator=(itkImageSourceICVF33 const & arg0);
   protected:
     itkImageSourceICVF33();
     ~itkImageSourceICVF33();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion3 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceICVF33_Pointer {
   public:
     itkImageSourceICVF33_Pointer();
     itkImageSourceICVF33_Pointer(itkImageSourceICVF33_Pointer const & p);
     itkImageSourceICVF33_Pointer(itkImageSourceICVF33 * p);
     ~itkImageSourceICVF33_Pointer();
     itkImageSourceICVF33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceICVF33 * GetPointer() const;
     bool operator<(itkImageSourceICVF33_Pointer const & r) const;
     bool operator>(itkImageSourceICVF33_Pointer const & r) const;
     bool operator<=(itkImageSourceICVF33_Pointer const & r) const;
     bool operator>=(itkImageSourceICVF33_Pointer const & r) const;
     itkImageSourceICVF33_Pointer & operator=(itkImageSourceICVF33_Pointer const & r);
     itkImageSourceICVF33_Pointer & operator=(itkImageSourceICVF33 * r);
     itkImageSourceICVF33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceID2 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     itkImageD2 * GetOutput();
     itkImageD2 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceID2(itkImageSourceID2 const & arg0);
     void operator=(itkImageSourceID2 const & arg0);
   protected:
     itkImageSourceID2();
     ~itkImageSourceID2();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion2 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceID2_Pointer {
   public:
     itkImageSourceID2_Pointer();
     itkImageSourceID2_Pointer(itkImageSourceID2_Pointer const & p);
     itkImageSourceID2_Pointer(itkImageSourceID2 * p);
     ~itkImageSourceID2_Pointer();
     itkImageSourceID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceID2 * GetPointer() const;
     bool operator<(itkImageSourceID2_Pointer const & r) const;
     bool operator>(itkImageSourceID2_Pointer const & r) const;
     bool operator<=(itkImageSourceID2_Pointer const & r) const;
     bool operator>=(itkImageSourceID2_Pointer const & r) const;
     itkImageSourceID2_Pointer & operator=(itkImageSourceID2_Pointer const & r);
     itkImageSourceID2_Pointer & operator=(itkImageSourceID2 * r);
     itkImageSourceID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceID3 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     itkImageD3 * GetOutput();
     itkImageD3 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceID3(itkImageSourceID3 const & arg0);
     void operator=(itkImageSourceID3 const & arg0);
   protected:
     itkImageSourceID3();
     ~itkImageSourceID3();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion3 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceID3_Pointer {
   public:
     itkImageSourceID3_Pointer();
     itkImageSourceID3_Pointer(itkImageSourceID3_Pointer const & p);
     itkImageSourceID3_Pointer(itkImageSourceID3 * p);
     ~itkImageSourceID3_Pointer();
     itkImageSourceID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceID3 * GetPointer() const;
     bool operator<(itkImageSourceID3_Pointer const & r) const;
     bool operator>(itkImageSourceID3_Pointer const & r) const;
     bool operator<=(itkImageSourceID3_Pointer const & r) const;
     bool operator>=(itkImageSourceID3_Pointer const & r) const;
     itkImageSourceID3_Pointer & operator=(itkImageSourceID3_Pointer const & r);
     itkImageSourceID3_Pointer & operator=(itkImageSourceID3 * r);
     itkImageSourceID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceIF2 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     itkImageF2 * GetOutput();
     itkImageF2 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceIF2(itkImageSourceIF2 const & arg0);
     void operator=(itkImageSourceIF2 const & arg0);
   protected:
     itkImageSourceIF2();
     ~itkImageSourceIF2();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion2 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceIF2_Pointer {
   public:
     itkImageSourceIF2_Pointer();
     itkImageSourceIF2_Pointer(itkImageSourceIF2_Pointer const & p);
     itkImageSourceIF2_Pointer(itkImageSourceIF2 * p);
     ~itkImageSourceIF2_Pointer();
     itkImageSourceIF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceIF2 * GetPointer() const;
     bool operator<(itkImageSourceIF2_Pointer const & r) const;
     bool operator>(itkImageSourceIF2_Pointer const & r) const;
     bool operator<=(itkImageSourceIF2_Pointer const & r) const;
     bool operator>=(itkImageSourceIF2_Pointer const & r) const;
     itkImageSourceIF2_Pointer & operator=(itkImageSourceIF2_Pointer const & r);
     itkImageSourceIF2_Pointer & operator=(itkImageSourceIF2 * r);
     itkImageSourceIF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceIF3 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     itkImageF3 * GetOutput();
     itkImageF3 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceIF3(itkImageSourceIF3 const & arg0);
     void operator=(itkImageSourceIF3 const & arg0);
   protected:
     itkImageSourceIF3();
     ~itkImageSourceIF3();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion3 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceIF3_Pointer {
   public:
     itkImageSourceIF3_Pointer();
     itkImageSourceIF3_Pointer(itkImageSourceIF3_Pointer const & p);
     itkImageSourceIF3_Pointer(itkImageSourceIF3 * p);
     ~itkImageSourceIF3_Pointer();
     itkImageSourceIF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceIF3 * GetPointer() const;
     bool operator<(itkImageSourceIF3_Pointer const & r) const;
     bool operator>(itkImageSourceIF3_Pointer const & r) const;
     bool operator<=(itkImageSourceIF3_Pointer const & r) const;
     bool operator>=(itkImageSourceIF3_Pointer const & r) const;
     itkImageSourceIF3_Pointer & operator=(itkImageSourceIF3_Pointer const & r);
     itkImageSourceIF3_Pointer & operator=(itkImageSourceIF3 * r);
     itkImageSourceIF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceIRGBAUC2 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     itkImageRGBAUC2 * GetOutput();
     itkImageRGBAUC2 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceIRGBAUC2(itkImageSourceIRGBAUC2 const & arg0);
     void operator=(itkImageSourceIRGBAUC2 const & arg0);
   protected:
     itkImageSourceIRGBAUC2();
     ~itkImageSourceIRGBAUC2();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion2 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceIRGBAUC2_Pointer {
   public:
     itkImageSourceIRGBAUC2_Pointer();
     itkImageSourceIRGBAUC2_Pointer(itkImageSourceIRGBAUC2_Pointer const & p);
     itkImageSourceIRGBAUC2_Pointer(itkImageSourceIRGBAUC2 * p);
     ~itkImageSourceIRGBAUC2_Pointer();
     itkImageSourceIRGBAUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceIRGBAUC2 * GetPointer() const;
     bool operator<(itkImageSourceIRGBAUC2_Pointer const & r) const;
     bool operator>(itkImageSourceIRGBAUC2_Pointer const & r) const;
     bool operator<=(itkImageSourceIRGBAUC2_Pointer const & r) const;
     bool operator>=(itkImageSourceIRGBAUC2_Pointer const & r) const;
     itkImageSourceIRGBAUC2_Pointer & operator=(itkImageSourceIRGBAUC2_Pointer const & r);
     itkImageSourceIRGBAUC2_Pointer & operator=(itkImageSourceIRGBAUC2 * r);
     itkImageSourceIRGBAUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceIRGBAUC3 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     itkImageRGBAUC3 * GetOutput();
     itkImageRGBAUC3 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceIRGBAUC3(itkImageSourceIRGBAUC3 const & arg0);
     void operator=(itkImageSourceIRGBAUC3 const & arg0);
   protected:
     itkImageSourceIRGBAUC3();
     ~itkImageSourceIRGBAUC3();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion3 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceIRGBAUC3_Pointer {
   public:
     itkImageSourceIRGBAUC3_Pointer();
     itkImageSourceIRGBAUC3_Pointer(itkImageSourceIRGBAUC3_Pointer const & p);
     itkImageSourceIRGBAUC3_Pointer(itkImageSourceIRGBAUC3 * p);
     ~itkImageSourceIRGBAUC3_Pointer();
     itkImageSourceIRGBAUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceIRGBAUC3 * GetPointer() const;
     bool operator<(itkImageSourceIRGBAUC3_Pointer const & r) const;
     bool operator>(itkImageSourceIRGBAUC3_Pointer const & r) const;
     bool operator<=(itkImageSourceIRGBAUC3_Pointer const & r) const;
     bool operator>=(itkImageSourceIRGBAUC3_Pointer const & r) const;
     itkImageSourceIRGBAUC3_Pointer & operator=(itkImageSourceIRGBAUC3_Pointer const & r);
     itkImageSourceIRGBAUC3_Pointer & operator=(itkImageSourceIRGBAUC3 * r);
     itkImageSourceIRGBAUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceIRGBAUS2 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     itkImageRGBAUS2 * GetOutput();
     itkImageRGBAUS2 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceIRGBAUS2(itkImageSourceIRGBAUS2 const & arg0);
     void operator=(itkImageSourceIRGBAUS2 const & arg0);
   protected:
     itkImageSourceIRGBAUS2();
     ~itkImageSourceIRGBAUS2();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion2 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceIRGBAUS2_Pointer {
   public:
     itkImageSourceIRGBAUS2_Pointer();
     itkImageSourceIRGBAUS2_Pointer(itkImageSourceIRGBAUS2_Pointer const & p);
     itkImageSourceIRGBAUS2_Pointer(itkImageSourceIRGBAUS2 * p);
     ~itkImageSourceIRGBAUS2_Pointer();
     itkImageSourceIRGBAUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceIRGBAUS2 * GetPointer() const;
     bool operator<(itkImageSourceIRGBAUS2_Pointer const & r) const;
     bool operator>(itkImageSourceIRGBAUS2_Pointer const & r) const;
     bool operator<=(itkImageSourceIRGBAUS2_Pointer const & r) const;
     bool operator>=(itkImageSourceIRGBAUS2_Pointer const & r) const;
     itkImageSourceIRGBAUS2_Pointer & operator=(itkImageSourceIRGBAUS2_Pointer const & r);
     itkImageSourceIRGBAUS2_Pointer & operator=(itkImageSourceIRGBAUS2 * r);
     itkImageSourceIRGBAUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceIRGBAUS3 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     itkImageRGBAUS3 * GetOutput();
     itkImageRGBAUS3 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceIRGBAUS3(itkImageSourceIRGBAUS3 const & arg0);
     void operator=(itkImageSourceIRGBAUS3 const & arg0);
   protected:
     itkImageSourceIRGBAUS3();
     ~itkImageSourceIRGBAUS3();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion3 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceIRGBAUS3_Pointer {
   public:
     itkImageSourceIRGBAUS3_Pointer();
     itkImageSourceIRGBAUS3_Pointer(itkImageSourceIRGBAUS3_Pointer const & p);
     itkImageSourceIRGBAUS3_Pointer(itkImageSourceIRGBAUS3 * p);
     ~itkImageSourceIRGBAUS3_Pointer();
     itkImageSourceIRGBAUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceIRGBAUS3 * GetPointer() const;
     bool operator<(itkImageSourceIRGBAUS3_Pointer const & r) const;
     bool operator>(itkImageSourceIRGBAUS3_Pointer const & r) const;
     bool operator<=(itkImageSourceIRGBAUS3_Pointer const & r) const;
     bool operator>=(itkImageSourceIRGBAUS3_Pointer const & r) const;
     itkImageSourceIRGBAUS3_Pointer & operator=(itkImageSourceIRGBAUS3_Pointer const & r);
     itkImageSourceIRGBAUS3_Pointer & operator=(itkImageSourceIRGBAUS3 * r);
     itkImageSourceIRGBAUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceIRGBUC2 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     itkImageRGBUC2 * GetOutput();
     itkImageRGBUC2 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceIRGBUC2(itkImageSourceIRGBUC2 const & arg0);
     void operator=(itkImageSourceIRGBUC2 const & arg0);
   protected:
     itkImageSourceIRGBUC2();
     ~itkImageSourceIRGBUC2();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion2 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceIRGBUC2_Pointer {
   public:
     itkImageSourceIRGBUC2_Pointer();
     itkImageSourceIRGBUC2_Pointer(itkImageSourceIRGBUC2_Pointer const & p);
     itkImageSourceIRGBUC2_Pointer(itkImageSourceIRGBUC2 * p);
     ~itkImageSourceIRGBUC2_Pointer();
     itkImageSourceIRGBUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceIRGBUC2 * GetPointer() const;
     bool operator<(itkImageSourceIRGBUC2_Pointer const & r) const;
     bool operator>(itkImageSourceIRGBUC2_Pointer const & r) const;
     bool operator<=(itkImageSourceIRGBUC2_Pointer const & r) const;
     bool operator>=(itkImageSourceIRGBUC2_Pointer const & r) const;
     itkImageSourceIRGBUC2_Pointer & operator=(itkImageSourceIRGBUC2_Pointer const & r);
     itkImageSourceIRGBUC2_Pointer & operator=(itkImageSourceIRGBUC2 * r);
     itkImageSourceIRGBUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceIRGBUC3 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     itkImageRGBUC3 * GetOutput();
     itkImageRGBUC3 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceIRGBUC3(itkImageSourceIRGBUC3 const & arg0);
     void operator=(itkImageSourceIRGBUC3 const & arg0);
   protected:
     itkImageSourceIRGBUC3();
     ~itkImageSourceIRGBUC3();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion3 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceIRGBUC3_Pointer {
   public:
     itkImageSourceIRGBUC3_Pointer();
     itkImageSourceIRGBUC3_Pointer(itkImageSourceIRGBUC3_Pointer const & p);
     itkImageSourceIRGBUC3_Pointer(itkImageSourceIRGBUC3 * p);
     ~itkImageSourceIRGBUC3_Pointer();
     itkImageSourceIRGBUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceIRGBUC3 * GetPointer() const;
     bool operator<(itkImageSourceIRGBUC3_Pointer const & r) const;
     bool operator>(itkImageSourceIRGBUC3_Pointer const & r) const;
     bool operator<=(itkImageSourceIRGBUC3_Pointer const & r) const;
     bool operator>=(itkImageSourceIRGBUC3_Pointer const & r) const;
     itkImageSourceIRGBUC3_Pointer & operator=(itkImageSourceIRGBUC3_Pointer const & r);
     itkImageSourceIRGBUC3_Pointer & operator=(itkImageSourceIRGBUC3 * r);
     itkImageSourceIRGBUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceIRGBUS2 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     itkImageRGBUS2 * GetOutput();
     itkImageRGBUS2 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceIRGBUS2(itkImageSourceIRGBUS2 const & arg0);
     void operator=(itkImageSourceIRGBUS2 const & arg0);
   protected:
     itkImageSourceIRGBUS2();
     ~itkImageSourceIRGBUS2();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion2 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceIRGBUS2_Pointer {
   public:
     itkImageSourceIRGBUS2_Pointer();
     itkImageSourceIRGBUS2_Pointer(itkImageSourceIRGBUS2_Pointer const & p);
     itkImageSourceIRGBUS2_Pointer(itkImageSourceIRGBUS2 * p);
     ~itkImageSourceIRGBUS2_Pointer();
     itkImageSourceIRGBUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceIRGBUS2 * GetPointer() const;
     bool operator<(itkImageSourceIRGBUS2_Pointer const & r) const;
     bool operator>(itkImageSourceIRGBUS2_Pointer const & r) const;
     bool operator<=(itkImageSourceIRGBUS2_Pointer const & r) const;
     bool operator>=(itkImageSourceIRGBUS2_Pointer const & r) const;
     itkImageSourceIRGBUS2_Pointer & operator=(itkImageSourceIRGBUS2_Pointer const & r);
     itkImageSourceIRGBUS2_Pointer & operator=(itkImageSourceIRGBUS2 * r);
     itkImageSourceIRGBUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceIRGBUS3 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     itkImageRGBUS3 * GetOutput();
     itkImageRGBUS3 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceIRGBUS3(itkImageSourceIRGBUS3 const & arg0);
     void operator=(itkImageSourceIRGBUS3 const & arg0);
   protected:
     itkImageSourceIRGBUS3();
     ~itkImageSourceIRGBUS3();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion3 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceIRGBUS3_Pointer {
   public:
     itkImageSourceIRGBUS3_Pointer();
     itkImageSourceIRGBUS3_Pointer(itkImageSourceIRGBUS3_Pointer const & p);
     itkImageSourceIRGBUS3_Pointer(itkImageSourceIRGBUS3 * p);
     ~itkImageSourceIRGBUS3_Pointer();
     itkImageSourceIRGBUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceIRGBUS3 * GetPointer() const;
     bool operator<(itkImageSourceIRGBUS3_Pointer const & r) const;
     bool operator>(itkImageSourceIRGBUS3_Pointer const & r) const;
     bool operator<=(itkImageSourceIRGBUS3_Pointer const & r) const;
     bool operator>=(itkImageSourceIRGBUS3_Pointer const & r) const;
     itkImageSourceIRGBUS3_Pointer & operator=(itkImageSourceIRGBUS3_Pointer const & r);
     itkImageSourceIRGBUS3_Pointer & operator=(itkImageSourceIRGBUS3 * r);
     itkImageSourceIRGBUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceISSRTD22 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     itkImageSSRTD22 * GetOutput();
     itkImageSSRTD22 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceISSRTD22(itkImageSourceISSRTD22 const & arg0);
     void operator=(itkImageSourceISSRTD22 const & arg0);
   protected:
     itkImageSourceISSRTD22();
     ~itkImageSourceISSRTD22();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion2 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceISSRTD22_Pointer {
   public:
     itkImageSourceISSRTD22_Pointer();
     itkImageSourceISSRTD22_Pointer(itkImageSourceISSRTD22_Pointer const & p);
     itkImageSourceISSRTD22_Pointer(itkImageSourceISSRTD22 * p);
     ~itkImageSourceISSRTD22_Pointer();
     itkImageSourceISSRTD22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceISSRTD22 * GetPointer() const;
     bool operator<(itkImageSourceISSRTD22_Pointer const & r) const;
     bool operator>(itkImageSourceISSRTD22_Pointer const & r) const;
     bool operator<=(itkImageSourceISSRTD22_Pointer const & r) const;
     bool operator>=(itkImageSourceISSRTD22_Pointer const & r) const;
     itkImageSourceISSRTD22_Pointer & operator=(itkImageSourceISSRTD22_Pointer const & r);
     itkImageSourceISSRTD22_Pointer & operator=(itkImageSourceISSRTD22 * r);
     itkImageSourceISSRTD22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceISSRTD33 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     itkImageSSRTD33 * GetOutput();
     itkImageSSRTD33 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceISSRTD33(itkImageSourceISSRTD33 const & arg0);
     void operator=(itkImageSourceISSRTD33 const & arg0);
   protected:
     itkImageSourceISSRTD33();
     ~itkImageSourceISSRTD33();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion3 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceISSRTD33_Pointer {
   public:
     itkImageSourceISSRTD33_Pointer();
     itkImageSourceISSRTD33_Pointer(itkImageSourceISSRTD33_Pointer const & p);
     itkImageSourceISSRTD33_Pointer(itkImageSourceISSRTD33 * p);
     ~itkImageSourceISSRTD33_Pointer();
     itkImageSourceISSRTD33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceISSRTD33 * GetPointer() const;
     bool operator<(itkImageSourceISSRTD33_Pointer const & r) const;
     bool operator>(itkImageSourceISSRTD33_Pointer const & r) const;
     bool operator<=(itkImageSourceISSRTD33_Pointer const & r) const;
     bool operator>=(itkImageSourceISSRTD33_Pointer const & r) const;
     itkImageSourceISSRTD33_Pointer & operator=(itkImageSourceISSRTD33_Pointer const & r);
     itkImageSourceISSRTD33_Pointer & operator=(itkImageSourceISSRTD33 * r);
     itkImageSourceISSRTD33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceIUC2 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     itkImageUC2 * GetOutput();
     itkImageUC2 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceIUC2(itkImageSourceIUC2 const & arg0);
     void operator=(itkImageSourceIUC2 const & arg0);
   protected:
     itkImageSourceIUC2();
     ~itkImageSourceIUC2();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion2 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceIUC2_Pointer {
   public:
     itkImageSourceIUC2_Pointer();
     itkImageSourceIUC2_Pointer(itkImageSourceIUC2_Pointer const & p);
     itkImageSourceIUC2_Pointer(itkImageSourceIUC2 * p);
     ~itkImageSourceIUC2_Pointer();
     itkImageSourceIUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceIUC2 * GetPointer() const;
     bool operator<(itkImageSourceIUC2_Pointer const & r) const;
     bool operator>(itkImageSourceIUC2_Pointer const & r) const;
     bool operator<=(itkImageSourceIUC2_Pointer const & r) const;
     bool operator>=(itkImageSourceIUC2_Pointer const & r) const;
     itkImageSourceIUC2_Pointer & operator=(itkImageSourceIUC2_Pointer const & r);
     itkImageSourceIUC2_Pointer & operator=(itkImageSourceIUC2 * r);
     itkImageSourceIUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceIUC3 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     itkImageUC3 * GetOutput();
     itkImageUC3 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceIUC3(itkImageSourceIUC3 const & arg0);
     void operator=(itkImageSourceIUC3 const & arg0);
   protected:
     itkImageSourceIUC3();
     ~itkImageSourceIUC3();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion3 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceIUC3_Pointer {
   public:
     itkImageSourceIUC3_Pointer();
     itkImageSourceIUC3_Pointer(itkImageSourceIUC3_Pointer const & p);
     itkImageSourceIUC3_Pointer(itkImageSourceIUC3 * p);
     ~itkImageSourceIUC3_Pointer();
     itkImageSourceIUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceIUC3 * GetPointer() const;
     bool operator<(itkImageSourceIUC3_Pointer const & r) const;
     bool operator>(itkImageSourceIUC3_Pointer const & r) const;
     bool operator<=(itkImageSourceIUC3_Pointer const & r) const;
     bool operator>=(itkImageSourceIUC3_Pointer const & r) const;
     itkImageSourceIUC3_Pointer & operator=(itkImageSourceIUC3_Pointer const & r);
     itkImageSourceIUC3_Pointer & operator=(itkImageSourceIUC3 * r);
     itkImageSourceIUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceIUL2 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     itkImageUL2 * GetOutput();
     itkImageUL2 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceIUL2(itkImageSourceIUL2 const & arg0);
     void operator=(itkImageSourceIUL2 const & arg0);
   protected:
     itkImageSourceIUL2();
     ~itkImageSourceIUL2();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion2 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceIUL2_Pointer {
   public:
     itkImageSourceIUL2_Pointer();
     itkImageSourceIUL2_Pointer(itkImageSourceIUL2_Pointer const & p);
     itkImageSourceIUL2_Pointer(itkImageSourceIUL2 * p);
     ~itkImageSourceIUL2_Pointer();
     itkImageSourceIUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceIUL2 * GetPointer() const;
     bool operator<(itkImageSourceIUL2_Pointer const & r) const;
     bool operator>(itkImageSourceIUL2_Pointer const & r) const;
     bool operator<=(itkImageSourceIUL2_Pointer const & r) const;
     bool operator>=(itkImageSourceIUL2_Pointer const & r) const;
     itkImageSourceIUL2_Pointer & operator=(itkImageSourceIUL2_Pointer const & r);
     itkImageSourceIUL2_Pointer & operator=(itkImageSourceIUL2 * r);
     itkImageSourceIUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceIUL3 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     itkImageUL3 * GetOutput();
     itkImageUL3 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceIUL3(itkImageSourceIUL3 const & arg0);
     void operator=(itkImageSourceIUL3 const & arg0);
   protected:
     itkImageSourceIUL3();
     ~itkImageSourceIUL3();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion3 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceIUL3_Pointer {
   public:
     itkImageSourceIUL3_Pointer();
     itkImageSourceIUL3_Pointer(itkImageSourceIUL3_Pointer const & p);
     itkImageSourceIUL3_Pointer(itkImageSourceIUL3 * p);
     ~itkImageSourceIUL3_Pointer();
     itkImageSourceIUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceIUL3 * GetPointer() const;
     bool operator<(itkImageSourceIUL3_Pointer const & r) const;
     bool operator>(itkImageSourceIUL3_Pointer const & r) const;
     bool operator<=(itkImageSourceIUL3_Pointer const & r) const;
     bool operator>=(itkImageSourceIUL3_Pointer const & r) const;
     itkImageSourceIUL3_Pointer & operator=(itkImageSourceIUL3_Pointer const & r);
     itkImageSourceIUL3_Pointer & operator=(itkImageSourceIUL3 * r);
     itkImageSourceIUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceIUS2 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     itkImageUS2 * GetOutput();
     itkImageUS2 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceIUS2(itkImageSourceIUS2 const & arg0);
     void operator=(itkImageSourceIUS2 const & arg0);
   protected:
     itkImageSourceIUS2();
     ~itkImageSourceIUS2();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion2 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceIUS2_Pointer {
   public:
     itkImageSourceIUS2_Pointer();
     itkImageSourceIUS2_Pointer(itkImageSourceIUS2_Pointer const & p);
     itkImageSourceIUS2_Pointer(itkImageSourceIUS2 * p);
     ~itkImageSourceIUS2_Pointer();
     itkImageSourceIUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceIUS2 * GetPointer() const;
     bool operator<(itkImageSourceIUS2_Pointer const & r) const;
     bool operator>(itkImageSourceIUS2_Pointer const & r) const;
     bool operator<=(itkImageSourceIUS2_Pointer const & r) const;
     bool operator>=(itkImageSourceIUS2_Pointer const & r) const;
     itkImageSourceIUS2_Pointer & operator=(itkImageSourceIUS2_Pointer const & r);
     itkImageSourceIUS2_Pointer & operator=(itkImageSourceIUS2 * r);
     itkImageSourceIUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceIUS3 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     itkImageUS3 * GetOutput();
     itkImageUS3 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceIUS3(itkImageSourceIUS3 const & arg0);
     void operator=(itkImageSourceIUS3 const & arg0);
   protected:
     itkImageSourceIUS3();
     ~itkImageSourceIUS3();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion3 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceIUS3_Pointer {
   public:
     itkImageSourceIUS3_Pointer();
     itkImageSourceIUS3_Pointer(itkImageSourceIUS3_Pointer const & p);
     itkImageSourceIUS3_Pointer(itkImageSourceIUS3 * p);
     ~itkImageSourceIUS3_Pointer();
     itkImageSourceIUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceIUS3 * GetPointer() const;
     bool operator<(itkImageSourceIUS3_Pointer const & r) const;
     bool operator>(itkImageSourceIUS3_Pointer const & r) const;
     bool operator<=(itkImageSourceIUS3_Pointer const & r) const;
     bool operator>=(itkImageSourceIUS3_Pointer const & r) const;
     itkImageSourceIUS3_Pointer & operator=(itkImageSourceIUS3_Pointer const & r);
     itkImageSourceIUS3_Pointer & operator=(itkImageSourceIUS3 * r);
     itkImageSourceIUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceIVF22 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     itkImageVF22 * GetOutput();
     itkImageVF22 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceIVF22(itkImageSourceIVF22 const & arg0);
     void operator=(itkImageSourceIVF22 const & arg0);
   protected:
     itkImageSourceIVF22();
     ~itkImageSourceIVF22();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion2 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceIVF22_Pointer {
   public:
     itkImageSourceIVF22_Pointer();
     itkImageSourceIVF22_Pointer(itkImageSourceIVF22_Pointer const & p);
     itkImageSourceIVF22_Pointer(itkImageSourceIVF22 * p);
     ~itkImageSourceIVF22_Pointer();
     itkImageSourceIVF22 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceIVF22 * GetPointer() const;
     bool operator<(itkImageSourceIVF22_Pointer const & r) const;
     bool operator>(itkImageSourceIVF22_Pointer const & r) const;
     bool operator<=(itkImageSourceIVF22_Pointer const & r) const;
     bool operator>=(itkImageSourceIVF22_Pointer const & r) const;
     itkImageSourceIVF22_Pointer & operator=(itkImageSourceIVF22_Pointer const & r);
     itkImageSourceIVF22_Pointer & operator=(itkImageSourceIVF22 * r);
     itkImageSourceIVF22 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceIVF33 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     itkImageVF33 * GetOutput();
     itkImageVF33 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceIVF33(itkImageSourceIVF33 const & arg0);
     void operator=(itkImageSourceIVF33 const & arg0);
   protected:
     itkImageSourceIVF33();
     ~itkImageSourceIVF33();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion3 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceIVF33_Pointer {
   public:
     itkImageSourceIVF33_Pointer();
     itkImageSourceIVF33_Pointer(itkImageSourceIVF33_Pointer const & p);
     itkImageSourceIVF33_Pointer(itkImageSourceIVF33 * p);
     ~itkImageSourceIVF33_Pointer();
     itkImageSourceIVF33 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceIVF33 * GetPointer() const;
     bool operator<(itkImageSourceIVF33_Pointer const & r) const;
     bool operator>(itkImageSourceIVF33_Pointer const & r) const;
     bool operator<=(itkImageSourceIVF33_Pointer const & r) const;
     bool operator>=(itkImageSourceIVF33_Pointer const & r) const;
     itkImageSourceIVF33_Pointer & operator=(itkImageSourceIVF33_Pointer const & r);
     itkImageSourceIVF33_Pointer & operator=(itkImageSourceIVF33 * r);
     itkImageSourceIVF33 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceVID2 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     itkVectorImageD2 * GetOutput();
     itkVectorImageD2 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceVID2(itkImageSourceVID2 const & arg0);
     void operator=(itkImageSourceVID2 const & arg0);
   protected:
     itkImageSourceVID2();
     ~itkImageSourceVID2();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion2 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceVID2_Pointer {
   public:
     itkImageSourceVID2_Pointer();
     itkImageSourceVID2_Pointer(itkImageSourceVID2_Pointer const & p);
     itkImageSourceVID2_Pointer(itkImageSourceVID2 * p);
     ~itkImageSourceVID2_Pointer();
     itkImageSourceVID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceVID2 * GetPointer() const;
     bool operator<(itkImageSourceVID2_Pointer const & r) const;
     bool operator>(itkImageSourceVID2_Pointer const & r) const;
     bool operator<=(itkImageSourceVID2_Pointer const & r) const;
     bool operator>=(itkImageSourceVID2_Pointer const & r) const;
     itkImageSourceVID2_Pointer & operator=(itkImageSourceVID2_Pointer const & r);
     itkImageSourceVID2_Pointer & operator=(itkImageSourceVID2 * r);
     itkImageSourceVID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceVID3 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     itkVectorImageD3 * GetOutput();
     itkVectorImageD3 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceVID3(itkImageSourceVID3 const & arg0);
     void operator=(itkImageSourceVID3 const & arg0);
   protected:
     itkImageSourceVID3();
     ~itkImageSourceVID3();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion3 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceVID3_Pointer {
   public:
     itkImageSourceVID3_Pointer();
     itkImageSourceVID3_Pointer(itkImageSourceVID3_Pointer const & p);
     itkImageSourceVID3_Pointer(itkImageSourceVID3 * p);
     ~itkImageSourceVID3_Pointer();
     itkImageSourceVID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceVID3 * GetPointer() const;
     bool operator<(itkImageSourceVID3_Pointer const & r) const;
     bool operator>(itkImageSourceVID3_Pointer const & r) const;
     bool operator<=(itkImageSourceVID3_Pointer const & r) const;
     bool operator>=(itkImageSourceVID3_Pointer const & r) const;
     itkImageSourceVID3_Pointer & operator=(itkImageSourceVID3_Pointer const & r);
     itkImageSourceVID3_Pointer & operator=(itkImageSourceVID3 * r);
     itkImageSourceVID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceVIF2 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     itkVectorImageF2 * GetOutput();
     itkVectorImageF2 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceVIF2(itkImageSourceVIF2 const & arg0);
     void operator=(itkImageSourceVIF2 const & arg0);
   protected:
     itkImageSourceVIF2();
     ~itkImageSourceVIF2();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion2 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceVIF2_Pointer {
   public:
     itkImageSourceVIF2_Pointer();
     itkImageSourceVIF2_Pointer(itkImageSourceVIF2_Pointer const & p);
     itkImageSourceVIF2_Pointer(itkImageSourceVIF2 * p);
     ~itkImageSourceVIF2_Pointer();
     itkImageSourceVIF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceVIF2 * GetPointer() const;
     bool operator<(itkImageSourceVIF2_Pointer const & r) const;
     bool operator>(itkImageSourceVIF2_Pointer const & r) const;
     bool operator<=(itkImageSourceVIF2_Pointer const & r) const;
     bool operator>=(itkImageSourceVIF2_Pointer const & r) const;
     itkImageSourceVIF2_Pointer & operator=(itkImageSourceVIF2_Pointer const & r);
     itkImageSourceVIF2_Pointer & operator=(itkImageSourceVIF2 * r);
     itkImageSourceVIF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceVIF3 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     itkVectorImageF3 * GetOutput();
     itkVectorImageF3 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceVIF3(itkImageSourceVIF3 const & arg0);
     void operator=(itkImageSourceVIF3 const & arg0);
   protected:
     itkImageSourceVIF3();
     ~itkImageSourceVIF3();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion3 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceVIF3_Pointer {
   public:
     itkImageSourceVIF3_Pointer();
     itkImageSourceVIF3_Pointer(itkImageSourceVIF3_Pointer const & p);
     itkImageSourceVIF3_Pointer(itkImageSourceVIF3 * p);
     ~itkImageSourceVIF3_Pointer();
     itkImageSourceVIF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceVIF3 * GetPointer() const;
     bool operator<(itkImageSourceVIF3_Pointer const & r) const;
     bool operator>(itkImageSourceVIF3_Pointer const & r) const;
     bool operator<=(itkImageSourceVIF3_Pointer const & r) const;
     bool operator>=(itkImageSourceVIF3_Pointer const & r) const;
     itkImageSourceVIF3_Pointer & operator=(itkImageSourceVIF3_Pointer const & r);
     itkImageSourceVIF3_Pointer & operator=(itkImageSourceVIF3 * r);
     itkImageSourceVIF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceVIUC2 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     itkVectorImageUC2 * GetOutput();
     itkVectorImageUC2 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceVIUC2(itkImageSourceVIUC2 const & arg0);
     void operator=(itkImageSourceVIUC2 const & arg0);
   protected:
     itkImageSourceVIUC2();
     ~itkImageSourceVIUC2();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion2 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceVIUC2_Pointer {
   public:
     itkImageSourceVIUC2_Pointer();
     itkImageSourceVIUC2_Pointer(itkImageSourceVIUC2_Pointer const & p);
     itkImageSourceVIUC2_Pointer(itkImageSourceVIUC2 * p);
     ~itkImageSourceVIUC2_Pointer();
     itkImageSourceVIUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceVIUC2 * GetPointer() const;
     bool operator<(itkImageSourceVIUC2_Pointer const & r) const;
     bool operator>(itkImageSourceVIUC2_Pointer const & r) const;
     bool operator<=(itkImageSourceVIUC2_Pointer const & r) const;
     bool operator>=(itkImageSourceVIUC2_Pointer const & r) const;
     itkImageSourceVIUC2_Pointer & operator=(itkImageSourceVIUC2_Pointer const & r);
     itkImageSourceVIUC2_Pointer & operator=(itkImageSourceVIUC2 * r);
     itkImageSourceVIUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceVIUC3 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     itkVectorImageUC3 * GetOutput();
     itkVectorImageUC3 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceVIUC3(itkImageSourceVIUC3 const & arg0);
     void operator=(itkImageSourceVIUC3 const & arg0);
   protected:
     itkImageSourceVIUC3();
     ~itkImageSourceVIUC3();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion3 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceVIUC3_Pointer {
   public:
     itkImageSourceVIUC3_Pointer();
     itkImageSourceVIUC3_Pointer(itkImageSourceVIUC3_Pointer const & p);
     itkImageSourceVIUC3_Pointer(itkImageSourceVIUC3 * p);
     ~itkImageSourceVIUC3_Pointer();
     itkImageSourceVIUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceVIUC3 * GetPointer() const;
     bool operator<(itkImageSourceVIUC3_Pointer const & r) const;
     bool operator>(itkImageSourceVIUC3_Pointer const & r) const;
     bool operator<=(itkImageSourceVIUC3_Pointer const & r) const;
     bool operator>=(itkImageSourceVIUC3_Pointer const & r) const;
     itkImageSourceVIUC3_Pointer & operator=(itkImageSourceVIUC3_Pointer const & r);
     itkImageSourceVIUC3_Pointer & operator=(itkImageSourceVIUC3 * r);
     itkImageSourceVIUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceVIUL2 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     itkVectorImageUL2 * GetOutput();
     itkVectorImageUL2 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceVIUL2(itkImageSourceVIUL2 const & arg0);
     void operator=(itkImageSourceVIUL2 const & arg0);
   protected:
     itkImageSourceVIUL2();
     ~itkImageSourceVIUL2();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion2 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceVIUL2_Pointer {
   public:
     itkImageSourceVIUL2_Pointer();
     itkImageSourceVIUL2_Pointer(itkImageSourceVIUL2_Pointer const & p);
     itkImageSourceVIUL2_Pointer(itkImageSourceVIUL2 * p);
     ~itkImageSourceVIUL2_Pointer();
     itkImageSourceVIUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceVIUL2 * GetPointer() const;
     bool operator<(itkImageSourceVIUL2_Pointer const & r) const;
     bool operator>(itkImageSourceVIUL2_Pointer const & r) const;
     bool operator<=(itkImageSourceVIUL2_Pointer const & r) const;
     bool operator>=(itkImageSourceVIUL2_Pointer const & r) const;
     itkImageSourceVIUL2_Pointer & operator=(itkImageSourceVIUL2_Pointer const & r);
     itkImageSourceVIUL2_Pointer & operator=(itkImageSourceVIUL2 * r);
     itkImageSourceVIUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceVIUL3 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     itkVectorImageUL3 * GetOutput();
     itkVectorImageUL3 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceVIUL3(itkImageSourceVIUL3 const & arg0);
     void operator=(itkImageSourceVIUL3 const & arg0);
   protected:
     itkImageSourceVIUL3();
     ~itkImageSourceVIUL3();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion3 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceVIUL3_Pointer {
   public:
     itkImageSourceVIUL3_Pointer();
     itkImageSourceVIUL3_Pointer(itkImageSourceVIUL3_Pointer const & p);
     itkImageSourceVIUL3_Pointer(itkImageSourceVIUL3 * p);
     ~itkImageSourceVIUL3_Pointer();
     itkImageSourceVIUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceVIUL3 * GetPointer() const;
     bool operator<(itkImageSourceVIUL3_Pointer const & r) const;
     bool operator>(itkImageSourceVIUL3_Pointer const & r) const;
     bool operator<=(itkImageSourceVIUL3_Pointer const & r) const;
     bool operator>=(itkImageSourceVIUL3_Pointer const & r) const;
     itkImageSourceVIUL3_Pointer & operator=(itkImageSourceVIUL3_Pointer const & r);
     itkImageSourceVIUL3_Pointer & operator=(itkImageSourceVIUL3 * r);
     itkImageSourceVIUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceVIUS2 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 2 };
     virtual char const * GetNameOfClass() const;
     itkVectorImageUS2 * GetOutput();
     itkVectorImageUS2 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceVIUS2(itkImageSourceVIUS2 const & arg0);
     void operator=(itkImageSourceVIUS2 const & arg0);
   protected:
     itkImageSourceVIUS2();
     ~itkImageSourceVIUS2();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion2 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceVIUS2_Pointer {
   public:
     itkImageSourceVIUS2_Pointer();
     itkImageSourceVIUS2_Pointer(itkImageSourceVIUS2_Pointer const & p);
     itkImageSourceVIUS2_Pointer(itkImageSourceVIUS2 * p);
     ~itkImageSourceVIUS2_Pointer();
     itkImageSourceVIUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceVIUS2 * GetPointer() const;
     bool operator<(itkImageSourceVIUS2_Pointer const & r) const;
     bool operator>(itkImageSourceVIUS2_Pointer const & r) const;
     bool operator<=(itkImageSourceVIUS2_Pointer const & r) const;
     bool operator>=(itkImageSourceVIUS2_Pointer const & r) const;
     itkImageSourceVIUS2_Pointer & operator=(itkImageSourceVIUS2_Pointer const & r);
     itkImageSourceVIUS2_Pointer & operator=(itkImageSourceVIUS2 * r);
     itkImageSourceVIUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkImageSourceVIUS3 : public itkProcessObject {
   public:
     enum  {  OutputImageDimension = 3 };
     virtual char const * GetNameOfClass() const;
     itkVectorImageUS3 * GetOutput();
     itkVectorImageUS3 * GetOutput(unsigned int idx);
     virtual void GraftOutput(itkDataObject * output);
     virtual void GraftNthOutput(unsigned int idx, itkDataObject * output);
     virtual itkDataObject_Pointer MakeOutput(unsigned int idx);
   private:
     itkImageSourceVIUS3(itkImageSourceVIUS3 const & arg0);
     void operator=(itkImageSourceVIUS3 const & arg0);
   protected:
     itkImageSourceVIUS3();
     ~itkImageSourceVIUS3();
     virtual void GenerateData();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
     virtual void AllocateOutputs();
     virtual void BeforeThreadedGenerateData();
     virtual void AfterThreadedGenerateData();
     virtual int SplitRequestedRegion(int i, int num, itkImageRegion3 & splitRegion);
     static void * ThreaderCallback(void * arg);
 };


 class itkImageSourceVIUS3_Pointer {
   public:
     itkImageSourceVIUS3_Pointer();
     itkImageSourceVIUS3_Pointer(itkImageSourceVIUS3_Pointer const & p);
     itkImageSourceVIUS3_Pointer(itkImageSourceVIUS3 * p);
     ~itkImageSourceVIUS3_Pointer();
     itkImageSourceVIUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkImageSourceVIUS3 * GetPointer() const;
     bool operator<(itkImageSourceVIUS3_Pointer const & r) const;
     bool operator>(itkImageSourceVIUS3_Pointer const & r) const;
     bool operator<=(itkImageSourceVIUS3_Pointer const & r) const;
     bool operator>=(itkImageSourceVIUS3_Pointer const & r) const;
     itkImageSourceVIUS3_Pointer & operator=(itkImageSourceVIUS3_Pointer const & r);
     itkImageSourceVIUS3_Pointer & operator=(itkImageSourceVIUS3 * r);
     itkImageSourceVIUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


