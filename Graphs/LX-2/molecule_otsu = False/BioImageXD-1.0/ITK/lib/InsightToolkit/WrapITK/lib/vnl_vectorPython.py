# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _vnl_vectorPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_vnl_vectorPython', [dirname(__file__)])
        except ImportError:
            import _vnl_vectorPython
            return _vnl_vectorPython
        if fp is not None:
            try:
                _mod = imp.load_module('_vnl_vectorPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _vnl_vectorPython = swig_import_helper()
    del swig_import_helper
else:
    import _vnl_vectorPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import vcl_complexPython
import pyBasePython
import vnl_matrixPython
class vnl_vectorD(object):
    """Proxy of C++ vnl_vectorD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_vectorD
        __init__(self, unsigned int len) -> vnl_vectorD
        __init__(self, unsigned int len, double v0) -> vnl_vectorD
        __init__(self, unsigned int len, int n, double values) -> vnl_vectorD
        __init__(self, double data_block, unsigned int n) -> vnl_vectorD
        __init__(self, vnl_vectorD arg0) -> vnl_vectorD
        __init__(self, vnl_vectorD arg0, vnl_vectorD arg1, vnl_tag_add arg2) -> vnl_vectorD
        __init__(self, vnl_vectorD arg0, vnl_vectorD arg1, vnl_tag_sub arg2) -> vnl_vectorD
        __init__(self, vnl_vectorD arg0, double arg1, vnl_tag_mul arg2) -> vnl_vectorD
        __init__(self, vnl_vectorD arg0, double arg1, vnl_tag_div arg2) -> vnl_vectorD
        __init__(self, vnl_vectorD arg0, double arg1, vnl_tag_add arg2) -> vnl_vectorD
        __init__(self, vnl_vectorD arg0, double arg1, vnl_tag_sub arg2) -> vnl_vectorD
        __init__(self, vnl_matrixD arg0, vnl_vectorD arg1, vnl_tag_mul arg2) -> vnl_vectorD
        __init__(self, vnl_vectorD arg0, vnl_matrixD arg1, vnl_tag_mul arg2) -> vnl_vectorD
        __init__(self, vnl_vectorD that, vnl_tag_grab arg1) -> vnl_vectorD
        """
        _vnl_vectorPython.vnl_vectorD_swiginit(self,_vnl_vectorPython.new_vnl_vectorD(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vectorD
    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorD_size(self)

    def put(self, *args):
        """put(self, unsigned int index, double value)"""
        return _vnl_vectorPython.vnl_vectorD_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int index) -> double"""
        return _vnl_vectorPython.vnl_vectorD_get(self, *args)

    def fill(self, *args):
        """fill(self, double v)"""
        return _vnl_vectorPython.vnl_vectorD_fill(self, *args)

    def copy_in(self, *args):
        """copy_in(self, double ptr)"""
        return _vnl_vectorPython.vnl_vectorD_copy_in(self, *args)

    def copy_out(self, *args):
        """copy_out(self, double arg0)"""
        return _vnl_vectorPython.vnl_vectorD_copy_out(self, *args)

    def set(self, *args):
        """set(self, double ptr)"""
        return _vnl_vectorPython.vnl_vectorD_set(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int i) -> double
        __call__(self, unsigned int i) -> double
        """
        return _vnl_vectorPython.vnl_vectorD___call__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, double arg0) -> vnl_vectorD"""
        return _vnl_vectorPython.vnl_vectorD___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, double arg0) -> vnl_vectorD
        __iadd__(self, vnl_vectorD rhs) -> vnl_vectorD
        """
        return _vnl_vectorPython.vnl_vectorD___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, double value) -> vnl_vectorD
        __isub__(self, vnl_vectorD rhs) -> vnl_vectorD
        """
        return _vnl_vectorPython.vnl_vectorD___isub__(self, *args)

    def pre_multiply(self, *args):
        """pre_multiply(self, vnl_matrixD M) -> vnl_vectorD"""
        return _vnl_vectorPython.vnl_vectorD_pre_multiply(self, *args)

    def post_multiply(self, *args):
        """post_multiply(self, vnl_matrixD M) -> vnl_vectorD"""
        return _vnl_vectorPython.vnl_vectorD_post_multiply(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, double arg0) -> vnl_vectorD
        __imul__(self, vnl_matrixD m) -> vnl_vectorD
        """
        return _vnl_vectorPython.vnl_vectorD___imul__(self, *args)

    def __pos__(self):
        """__pos__(self) -> vnl_vectorD"""
        return _vnl_vectorPython.vnl_vectorD___pos__(self)

    def __neg__(self):
        """__neg__(self) -> vnl_vectorD"""
        return _vnl_vectorPython.vnl_vectorD___neg__(self)

    def __div__(self, *args):
        """__div__(self, double v) -> vnl_vectorD"""
        return _vnl_vectorPython.vnl_vectorD___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, double v) -> vnl_vectorD
        __add__(self, vnl_vectorD v) -> vnl_vectorD
        """
        return _vnl_vectorPython.vnl_vectorD___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, double v) -> vnl_vectorD
        __sub__(self, vnl_vectorD v) -> vnl_vectorD
        """
        return _vnl_vectorPython.vnl_vectorD___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, double v) -> vnl_vectorD
        __mul__(self, vnl_matrixD M) -> vnl_vectorD
        """
        return _vnl_vectorPython.vnl_vectorD___mul__(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> double
        data_block(self) -> double
        """
        return _vnl_vectorPython.vnl_vectorD_data_block(self, *args)

    def begin(self, *args):
        """
        begin(self) -> double
        begin(self) -> double
        """
        return _vnl_vectorPython.vnl_vectorD_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> double
        end(self) -> double
        """
        return _vnl_vectorPython.vnl_vectorD_end(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int len, unsigned int start = 0) -> vnl_vectorD
        extract(self, unsigned int len) -> vnl_vectorD
        """
        return _vnl_vectorPython.vnl_vectorD_extract(self, *args)

    def update(self, *args):
        """
        update(self, vnl_vectorD arg0, unsigned int start = 0) -> vnl_vectorD
        update(self, vnl_vectorD arg0) -> vnl_vectorD
        """
        return _vnl_vectorPython.vnl_vectorD_update(self, *args)

    def squared_magnitude(self):
        """squared_magnitude(self) -> double"""
        return _vnl_vectorPython.vnl_vectorD_squared_magnitude(self)

    def magnitude(self):
        """magnitude(self) -> double"""
        return _vnl_vectorPython.vnl_vectorD_magnitude(self)

    def one_norm(self):
        """one_norm(self) -> double"""
        return _vnl_vectorPython.vnl_vectorD_one_norm(self)

    def two_norm(self):
        """two_norm(self) -> double"""
        return _vnl_vectorPython.vnl_vectorD_two_norm(self)

    def inf_norm(self):
        """inf_norm(self) -> double"""
        return _vnl_vectorPython.vnl_vectorD_inf_norm(self)

    def normalize(self):
        """normalize(self) -> vnl_vectorD"""
        return _vnl_vectorPython.vnl_vectorD_normalize(self)

    def rms(self):
        """rms(self) -> double"""
        return _vnl_vectorPython.vnl_vectorD_rms(self)

    def min_value(self):
        """min_value(self) -> double"""
        return _vnl_vectorPython.vnl_vectorD_min_value(self)

    def max_value(self):
        """max_value(self) -> double"""
        return _vnl_vectorPython.vnl_vectorD_max_value(self)

    def mean(self):
        """mean(self) -> double"""
        return _vnl_vectorPython.vnl_vectorD_mean(self)

    def sum(self):
        """sum(self) -> double"""
        return _vnl_vectorPython.vnl_vectorD_sum(self)

    def flip(self):
        """flip(self)"""
        return _vnl_vectorPython.vnl_vectorD_flip(self)

    def swap(self, *args):
        """swap(self, vnl_vectorD that)"""
        return _vnl_vectorPython.vnl_vectorD_swap(self, *args)

    def assert_size(self, *args):
        """assert_size(self, unsigned int sz)"""
        return _vnl_vectorPython.vnl_vectorD_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_vectorPython.vnl_vectorD_assert_finite(self)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorD_is_finite(self)

    def is_zero(self):
        """is_zero(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorD_is_zero(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorD_empty(self)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_vectorD v) -> bool"""
        return _vnl_vectorPython.vnl_vectorD_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_vectorD that) -> bool"""
        return _vnl_vectorPython.vnl_vectorD___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_vectorD that) -> bool"""
        return _vnl_vectorPython.vnl_vectorD___ne__(self, *args)

    def set_size(self, *args):
        """set_size(self, unsigned int n) -> bool"""
        return _vnl_vectorPython.vnl_vectorD_set_size(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_vectorPython.vnl_vectorD_clear(self)

    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vectorD_read_ascii(self, *args)

    def read(*args):
        """read(istream s) -> vnl_vectorD"""
        return _vnl_vectorPython.vnl_vectorD_read(*args)

    read = staticmethod(read)
vnl_vectorD.size = new_instancemethod(_vnl_vectorPython.vnl_vectorD_size,None,vnl_vectorD)
vnl_vectorD.put = new_instancemethod(_vnl_vectorPython.vnl_vectorD_put,None,vnl_vectorD)
vnl_vectorD.get = new_instancemethod(_vnl_vectorPython.vnl_vectorD_get,None,vnl_vectorD)
vnl_vectorD.fill = new_instancemethod(_vnl_vectorPython.vnl_vectorD_fill,None,vnl_vectorD)
vnl_vectorD.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vectorD_copy_in,None,vnl_vectorD)
vnl_vectorD.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vectorD_copy_out,None,vnl_vectorD)
vnl_vectorD.set = new_instancemethod(_vnl_vectorPython.vnl_vectorD_set,None,vnl_vectorD)
vnl_vectorD.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___call__,None,vnl_vectorD)
vnl_vectorD.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___idiv__,None,vnl_vectorD)
vnl_vectorD.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___iadd__,None,vnl_vectorD)
vnl_vectorD.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___isub__,None,vnl_vectorD)
vnl_vectorD.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorD_pre_multiply,None,vnl_vectorD)
vnl_vectorD.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorD_post_multiply,None,vnl_vectorD)
vnl_vectorD.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___imul__,None,vnl_vectorD)
vnl_vectorD.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___pos__,None,vnl_vectorD)
vnl_vectorD.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___neg__,None,vnl_vectorD)
vnl_vectorD.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___div__,None,vnl_vectorD)
vnl_vectorD.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___add__,None,vnl_vectorD)
vnl_vectorD.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___sub__,None,vnl_vectorD)
vnl_vectorD.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___mul__,None,vnl_vectorD)
vnl_vectorD.data_block = new_instancemethod(_vnl_vectorPython.vnl_vectorD_data_block,None,vnl_vectorD)
vnl_vectorD.begin = new_instancemethod(_vnl_vectorPython.vnl_vectorD_begin,None,vnl_vectorD)
vnl_vectorD.end = new_instancemethod(_vnl_vectorPython.vnl_vectorD_end,None,vnl_vectorD)
vnl_vectorD.extract = new_instancemethod(_vnl_vectorPython.vnl_vectorD_extract,None,vnl_vectorD)
vnl_vectorD.update = new_instancemethod(_vnl_vectorPython.vnl_vectorD_update,None,vnl_vectorD)
vnl_vectorD.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorD_squared_magnitude,None,vnl_vectorD)
vnl_vectorD.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorD_magnitude,None,vnl_vectorD)
vnl_vectorD.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorD_one_norm,None,vnl_vectorD)
vnl_vectorD.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorD_two_norm,None,vnl_vectorD)
vnl_vectorD.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorD_inf_norm,None,vnl_vectorD)
vnl_vectorD.normalize = new_instancemethod(_vnl_vectorPython.vnl_vectorD_normalize,None,vnl_vectorD)
vnl_vectorD.rms = new_instancemethod(_vnl_vectorPython.vnl_vectorD_rms,None,vnl_vectorD)
vnl_vectorD.min_value = new_instancemethod(_vnl_vectorPython.vnl_vectorD_min_value,None,vnl_vectorD)
vnl_vectorD.max_value = new_instancemethod(_vnl_vectorPython.vnl_vectorD_max_value,None,vnl_vectorD)
vnl_vectorD.mean = new_instancemethod(_vnl_vectorPython.vnl_vectorD_mean,None,vnl_vectorD)
vnl_vectorD.sum = new_instancemethod(_vnl_vectorPython.vnl_vectorD_sum,None,vnl_vectorD)
vnl_vectorD.flip = new_instancemethod(_vnl_vectorPython.vnl_vectorD_flip,None,vnl_vectorD)
vnl_vectorD.swap = new_instancemethod(_vnl_vectorPython.vnl_vectorD_swap,None,vnl_vectorD)
vnl_vectorD.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vectorD_assert_size,None,vnl_vectorD)
vnl_vectorD.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorD_assert_finite,None,vnl_vectorD)
vnl_vectorD.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorD_is_finite,None,vnl_vectorD)
vnl_vectorD.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vectorD_is_zero,None,vnl_vectorD)
vnl_vectorD.empty = new_instancemethod(_vnl_vectorPython.vnl_vectorD_empty,None,vnl_vectorD)
vnl_vectorD.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vectorD_operator_eq,None,vnl_vectorD)
vnl_vectorD.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___eq__,None,vnl_vectorD)
vnl_vectorD.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vectorD___ne__,None,vnl_vectorD)
vnl_vectorD.set_size = new_instancemethod(_vnl_vectorPython.vnl_vectorD_set_size,None,vnl_vectorD)
vnl_vectorD.clear = new_instancemethod(_vnl_vectorPython.vnl_vectorD_clear,None,vnl_vectorD)
vnl_vectorD.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vectorD_read_ascii,None,vnl_vectorD)
vnl_vectorD_swigregister = _vnl_vectorPython.vnl_vectorD_swigregister
vnl_vectorD_swigregister(vnl_vectorD)

def vnl_vectorD_read(*args):
  """vnl_vectorD_read(istream s) -> vnl_vectorD"""
  return _vnl_vectorPython.vnl_vectorD_read(*args)

class vnl_vectorF(object):
    """Proxy of C++ vnl_vectorF class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_vectorF
        __init__(self, unsigned int len) -> vnl_vectorF
        __init__(self, unsigned int len, float v0) -> vnl_vectorF
        __init__(self, unsigned int len, int n, float values) -> vnl_vectorF
        __init__(self, float data_block, unsigned int n) -> vnl_vectorF
        __init__(self, vnl_vectorF arg0) -> vnl_vectorF
        __init__(self, vnl_vectorF arg0, vnl_vectorF arg1, vnl_tag_add arg2) -> vnl_vectorF
        __init__(self, vnl_vectorF arg0, vnl_vectorF arg1, vnl_tag_sub arg2) -> vnl_vectorF
        __init__(self, vnl_vectorF arg0, float arg1, vnl_tag_mul arg2) -> vnl_vectorF
        __init__(self, vnl_vectorF arg0, float arg1, vnl_tag_div arg2) -> vnl_vectorF
        __init__(self, vnl_vectorF arg0, float arg1, vnl_tag_add arg2) -> vnl_vectorF
        __init__(self, vnl_vectorF arg0, float arg1, vnl_tag_sub arg2) -> vnl_vectorF
        __init__(self, vnl_matrixF arg0, vnl_vectorF arg1, vnl_tag_mul arg2) -> vnl_vectorF
        __init__(self, vnl_vectorF arg0, vnl_matrixF arg1, vnl_tag_mul arg2) -> vnl_vectorF
        __init__(self, vnl_vectorF that, vnl_tag_grab arg1) -> vnl_vectorF
        """
        _vnl_vectorPython.vnl_vectorF_swiginit(self,_vnl_vectorPython.new_vnl_vectorF(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vectorF
    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorF_size(self)

    def put(self, *args):
        """put(self, unsigned int index, float value)"""
        return _vnl_vectorPython.vnl_vectorF_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int index) -> float"""
        return _vnl_vectorPython.vnl_vectorF_get(self, *args)

    def fill(self, *args):
        """fill(self, float v)"""
        return _vnl_vectorPython.vnl_vectorF_fill(self, *args)

    def copy_in(self, *args):
        """copy_in(self, float ptr)"""
        return _vnl_vectorPython.vnl_vectorF_copy_in(self, *args)

    def copy_out(self, *args):
        """copy_out(self, float arg0)"""
        return _vnl_vectorPython.vnl_vectorF_copy_out(self, *args)

    def set(self, *args):
        """set(self, float ptr)"""
        return _vnl_vectorPython.vnl_vectorF_set(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int i) -> float
        __call__(self, unsigned int i) -> float
        """
        return _vnl_vectorPython.vnl_vectorF___call__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, float arg0) -> vnl_vectorF"""
        return _vnl_vectorPython.vnl_vectorF___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, float arg0) -> vnl_vectorF
        __iadd__(self, vnl_vectorF rhs) -> vnl_vectorF
        """
        return _vnl_vectorPython.vnl_vectorF___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, float value) -> vnl_vectorF
        __isub__(self, vnl_vectorF rhs) -> vnl_vectorF
        """
        return _vnl_vectorPython.vnl_vectorF___isub__(self, *args)

    def pre_multiply(self, *args):
        """pre_multiply(self, vnl_matrixF M) -> vnl_vectorF"""
        return _vnl_vectorPython.vnl_vectorF_pre_multiply(self, *args)

    def post_multiply(self, *args):
        """post_multiply(self, vnl_matrixF M) -> vnl_vectorF"""
        return _vnl_vectorPython.vnl_vectorF_post_multiply(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, float arg0) -> vnl_vectorF
        __imul__(self, vnl_matrixF m) -> vnl_vectorF
        """
        return _vnl_vectorPython.vnl_vectorF___imul__(self, *args)

    def __pos__(self):
        """__pos__(self) -> vnl_vectorF"""
        return _vnl_vectorPython.vnl_vectorF___pos__(self)

    def __neg__(self):
        """__neg__(self) -> vnl_vectorF"""
        return _vnl_vectorPython.vnl_vectorF___neg__(self)

    def __div__(self, *args):
        """__div__(self, float v) -> vnl_vectorF"""
        return _vnl_vectorPython.vnl_vectorF___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, float v) -> vnl_vectorF
        __add__(self, vnl_vectorF v) -> vnl_vectorF
        """
        return _vnl_vectorPython.vnl_vectorF___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, float v) -> vnl_vectorF
        __sub__(self, vnl_vectorF v) -> vnl_vectorF
        """
        return _vnl_vectorPython.vnl_vectorF___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, float v) -> vnl_vectorF
        __mul__(self, vnl_matrixF M) -> vnl_vectorF
        """
        return _vnl_vectorPython.vnl_vectorF___mul__(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> float
        data_block(self) -> float
        """
        return _vnl_vectorPython.vnl_vectorF_data_block(self, *args)

    def begin(self, *args):
        """
        begin(self) -> float
        begin(self) -> float
        """
        return _vnl_vectorPython.vnl_vectorF_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> float
        end(self) -> float
        """
        return _vnl_vectorPython.vnl_vectorF_end(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int len, unsigned int start = 0) -> vnl_vectorF
        extract(self, unsigned int len) -> vnl_vectorF
        """
        return _vnl_vectorPython.vnl_vectorF_extract(self, *args)

    def update(self, *args):
        """
        update(self, vnl_vectorF arg0, unsigned int start = 0) -> vnl_vectorF
        update(self, vnl_vectorF arg0) -> vnl_vectorF
        """
        return _vnl_vectorPython.vnl_vectorF_update(self, *args)

    def squared_magnitude(self):
        """squared_magnitude(self) -> float"""
        return _vnl_vectorPython.vnl_vectorF_squared_magnitude(self)

    def magnitude(self):
        """magnitude(self) -> float"""
        return _vnl_vectorPython.vnl_vectorF_magnitude(self)

    def one_norm(self):
        """one_norm(self) -> float"""
        return _vnl_vectorPython.vnl_vectorF_one_norm(self)

    def two_norm(self):
        """two_norm(self) -> float"""
        return _vnl_vectorPython.vnl_vectorF_two_norm(self)

    def inf_norm(self):
        """inf_norm(self) -> float"""
        return _vnl_vectorPython.vnl_vectorF_inf_norm(self)

    def normalize(self):
        """normalize(self) -> vnl_vectorF"""
        return _vnl_vectorPython.vnl_vectorF_normalize(self)

    def rms(self):
        """rms(self) -> float"""
        return _vnl_vectorPython.vnl_vectorF_rms(self)

    def min_value(self):
        """min_value(self) -> float"""
        return _vnl_vectorPython.vnl_vectorF_min_value(self)

    def max_value(self):
        """max_value(self) -> float"""
        return _vnl_vectorPython.vnl_vectorF_max_value(self)

    def mean(self):
        """mean(self) -> float"""
        return _vnl_vectorPython.vnl_vectorF_mean(self)

    def sum(self):
        """sum(self) -> float"""
        return _vnl_vectorPython.vnl_vectorF_sum(self)

    def flip(self):
        """flip(self)"""
        return _vnl_vectorPython.vnl_vectorF_flip(self)

    def swap(self, *args):
        """swap(self, vnl_vectorF that)"""
        return _vnl_vectorPython.vnl_vectorF_swap(self, *args)

    def assert_size(self, *args):
        """assert_size(self, unsigned int sz)"""
        return _vnl_vectorPython.vnl_vectorF_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_vectorPython.vnl_vectorF_assert_finite(self)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorF_is_finite(self)

    def is_zero(self):
        """is_zero(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorF_is_zero(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorF_empty(self)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_vectorF v) -> bool"""
        return _vnl_vectorPython.vnl_vectorF_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_vectorF that) -> bool"""
        return _vnl_vectorPython.vnl_vectorF___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_vectorF that) -> bool"""
        return _vnl_vectorPython.vnl_vectorF___ne__(self, *args)

    def set_size(self, *args):
        """set_size(self, unsigned int n) -> bool"""
        return _vnl_vectorPython.vnl_vectorF_set_size(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_vectorPython.vnl_vectorF_clear(self)

    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vectorF_read_ascii(self, *args)

    def read(*args):
        """read(istream s) -> vnl_vectorF"""
        return _vnl_vectorPython.vnl_vectorF_read(*args)

    read = staticmethod(read)
vnl_vectorF.size = new_instancemethod(_vnl_vectorPython.vnl_vectorF_size,None,vnl_vectorF)
vnl_vectorF.put = new_instancemethod(_vnl_vectorPython.vnl_vectorF_put,None,vnl_vectorF)
vnl_vectorF.get = new_instancemethod(_vnl_vectorPython.vnl_vectorF_get,None,vnl_vectorF)
vnl_vectorF.fill = new_instancemethod(_vnl_vectorPython.vnl_vectorF_fill,None,vnl_vectorF)
vnl_vectorF.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vectorF_copy_in,None,vnl_vectorF)
vnl_vectorF.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vectorF_copy_out,None,vnl_vectorF)
vnl_vectorF.set = new_instancemethod(_vnl_vectorPython.vnl_vectorF_set,None,vnl_vectorF)
vnl_vectorF.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___call__,None,vnl_vectorF)
vnl_vectorF.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___idiv__,None,vnl_vectorF)
vnl_vectorF.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___iadd__,None,vnl_vectorF)
vnl_vectorF.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___isub__,None,vnl_vectorF)
vnl_vectorF.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorF_pre_multiply,None,vnl_vectorF)
vnl_vectorF.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorF_post_multiply,None,vnl_vectorF)
vnl_vectorF.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___imul__,None,vnl_vectorF)
vnl_vectorF.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___pos__,None,vnl_vectorF)
vnl_vectorF.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___neg__,None,vnl_vectorF)
vnl_vectorF.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___div__,None,vnl_vectorF)
vnl_vectorF.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___add__,None,vnl_vectorF)
vnl_vectorF.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___sub__,None,vnl_vectorF)
vnl_vectorF.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___mul__,None,vnl_vectorF)
vnl_vectorF.data_block = new_instancemethod(_vnl_vectorPython.vnl_vectorF_data_block,None,vnl_vectorF)
vnl_vectorF.begin = new_instancemethod(_vnl_vectorPython.vnl_vectorF_begin,None,vnl_vectorF)
vnl_vectorF.end = new_instancemethod(_vnl_vectorPython.vnl_vectorF_end,None,vnl_vectorF)
vnl_vectorF.extract = new_instancemethod(_vnl_vectorPython.vnl_vectorF_extract,None,vnl_vectorF)
vnl_vectorF.update = new_instancemethod(_vnl_vectorPython.vnl_vectorF_update,None,vnl_vectorF)
vnl_vectorF.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorF_squared_magnitude,None,vnl_vectorF)
vnl_vectorF.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorF_magnitude,None,vnl_vectorF)
vnl_vectorF.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorF_one_norm,None,vnl_vectorF)
vnl_vectorF.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorF_two_norm,None,vnl_vectorF)
vnl_vectorF.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorF_inf_norm,None,vnl_vectorF)
vnl_vectorF.normalize = new_instancemethod(_vnl_vectorPython.vnl_vectorF_normalize,None,vnl_vectorF)
vnl_vectorF.rms = new_instancemethod(_vnl_vectorPython.vnl_vectorF_rms,None,vnl_vectorF)
vnl_vectorF.min_value = new_instancemethod(_vnl_vectorPython.vnl_vectorF_min_value,None,vnl_vectorF)
vnl_vectorF.max_value = new_instancemethod(_vnl_vectorPython.vnl_vectorF_max_value,None,vnl_vectorF)
vnl_vectorF.mean = new_instancemethod(_vnl_vectorPython.vnl_vectorF_mean,None,vnl_vectorF)
vnl_vectorF.sum = new_instancemethod(_vnl_vectorPython.vnl_vectorF_sum,None,vnl_vectorF)
vnl_vectorF.flip = new_instancemethod(_vnl_vectorPython.vnl_vectorF_flip,None,vnl_vectorF)
vnl_vectorF.swap = new_instancemethod(_vnl_vectorPython.vnl_vectorF_swap,None,vnl_vectorF)
vnl_vectorF.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vectorF_assert_size,None,vnl_vectorF)
vnl_vectorF.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorF_assert_finite,None,vnl_vectorF)
vnl_vectorF.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorF_is_finite,None,vnl_vectorF)
vnl_vectorF.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vectorF_is_zero,None,vnl_vectorF)
vnl_vectorF.empty = new_instancemethod(_vnl_vectorPython.vnl_vectorF_empty,None,vnl_vectorF)
vnl_vectorF.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vectorF_operator_eq,None,vnl_vectorF)
vnl_vectorF.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___eq__,None,vnl_vectorF)
vnl_vectorF.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vectorF___ne__,None,vnl_vectorF)
vnl_vectorF.set_size = new_instancemethod(_vnl_vectorPython.vnl_vectorF_set_size,None,vnl_vectorF)
vnl_vectorF.clear = new_instancemethod(_vnl_vectorPython.vnl_vectorF_clear,None,vnl_vectorF)
vnl_vectorF.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vectorF_read_ascii,None,vnl_vectorF)
vnl_vectorF_swigregister = _vnl_vectorPython.vnl_vectorF_swigregister
vnl_vectorF_swigregister(vnl_vectorF)

def vnl_vectorF_read(*args):
  """vnl_vectorF_read(istream s) -> vnl_vectorF"""
  return _vnl_vectorPython.vnl_vectorF_read(*args)

class vnl_vectorLD(object):
    """Proxy of C++ vnl_vectorLD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_vectorLD
        __init__(self, unsigned int len) -> vnl_vectorLD
        __init__(self, unsigned int len, long double v0) -> vnl_vectorLD
        __init__(self, unsigned int len, int n, long double values) -> vnl_vectorLD
        __init__(self, long double data_block, unsigned int n) -> vnl_vectorLD
        __init__(self, vnl_vectorLD arg0) -> vnl_vectorLD
        __init__(self, vnl_vectorLD arg0, vnl_vectorLD arg1, vnl_tag_add arg2) -> vnl_vectorLD
        __init__(self, vnl_vectorLD arg0, vnl_vectorLD arg1, vnl_tag_sub arg2) -> vnl_vectorLD
        __init__(self, vnl_vectorLD arg0, long double arg1, vnl_tag_mul arg2) -> vnl_vectorLD
        __init__(self, vnl_vectorLD arg0, long double arg1, vnl_tag_div arg2) -> vnl_vectorLD
        __init__(self, vnl_vectorLD arg0, long double arg1, vnl_tag_add arg2) -> vnl_vectorLD
        __init__(self, vnl_vectorLD arg0, long double arg1, vnl_tag_sub arg2) -> vnl_vectorLD
        __init__(self, vnl_matrixLD arg0, vnl_vectorLD arg1, vnl_tag_mul arg2) -> vnl_vectorLD
        __init__(self, vnl_vectorLD arg0, vnl_matrixLD arg1, vnl_tag_mul arg2) -> vnl_vectorLD
        __init__(self, vnl_vectorLD that, vnl_tag_grab arg1) -> vnl_vectorLD
        """
        _vnl_vectorPython.vnl_vectorLD_swiginit(self,_vnl_vectorPython.new_vnl_vectorLD(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vectorLD
    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorLD_size(self)

    def put(self, *args):
        """put(self, unsigned int index, long double value)"""
        return _vnl_vectorPython.vnl_vectorLD_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int index) -> long double"""
        return _vnl_vectorPython.vnl_vectorLD_get(self, *args)

    def fill(self, *args):
        """fill(self, long double v)"""
        return _vnl_vectorPython.vnl_vectorLD_fill(self, *args)

    def copy_in(self, *args):
        """copy_in(self, long double ptr)"""
        return _vnl_vectorPython.vnl_vectorLD_copy_in(self, *args)

    def copy_out(self, *args):
        """copy_out(self, long double arg0)"""
        return _vnl_vectorPython.vnl_vectorLD_copy_out(self, *args)

    def set(self, *args):
        """set(self, long double ptr)"""
        return _vnl_vectorPython.vnl_vectorLD_set(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int i) -> long double
        __call__(self, unsigned int i) -> long double
        """
        return _vnl_vectorPython.vnl_vectorLD___call__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, long double arg0) -> vnl_vectorLD"""
        return _vnl_vectorPython.vnl_vectorLD___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, long double arg0) -> vnl_vectorLD
        __iadd__(self, vnl_vectorLD rhs) -> vnl_vectorLD
        """
        return _vnl_vectorPython.vnl_vectorLD___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, long double value) -> vnl_vectorLD
        __isub__(self, vnl_vectorLD rhs) -> vnl_vectorLD
        """
        return _vnl_vectorPython.vnl_vectorLD___isub__(self, *args)

    def pre_multiply(self, *args):
        """pre_multiply(self, vnl_matrixLD M) -> vnl_vectorLD"""
        return _vnl_vectorPython.vnl_vectorLD_pre_multiply(self, *args)

    def post_multiply(self, *args):
        """post_multiply(self, vnl_matrixLD M) -> vnl_vectorLD"""
        return _vnl_vectorPython.vnl_vectorLD_post_multiply(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, long double arg0) -> vnl_vectorLD
        __imul__(self, vnl_matrixLD m) -> vnl_vectorLD
        """
        return _vnl_vectorPython.vnl_vectorLD___imul__(self, *args)

    def __pos__(self):
        """__pos__(self) -> vnl_vectorLD"""
        return _vnl_vectorPython.vnl_vectorLD___pos__(self)

    def __neg__(self):
        """__neg__(self) -> vnl_vectorLD"""
        return _vnl_vectorPython.vnl_vectorLD___neg__(self)

    def __div__(self, *args):
        """__div__(self, long double v) -> vnl_vectorLD"""
        return _vnl_vectorPython.vnl_vectorLD___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, long double v) -> vnl_vectorLD
        __add__(self, vnl_vectorLD v) -> vnl_vectorLD
        """
        return _vnl_vectorPython.vnl_vectorLD___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, long double v) -> vnl_vectorLD
        __sub__(self, vnl_vectorLD v) -> vnl_vectorLD
        """
        return _vnl_vectorPython.vnl_vectorLD___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, long double v) -> vnl_vectorLD
        __mul__(self, vnl_matrixLD M) -> vnl_vectorLD
        """
        return _vnl_vectorPython.vnl_vectorLD___mul__(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> long double
        data_block(self) -> long double
        """
        return _vnl_vectorPython.vnl_vectorLD_data_block(self, *args)

    def begin(self, *args):
        """
        begin(self) -> long double
        begin(self) -> long double
        """
        return _vnl_vectorPython.vnl_vectorLD_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> long double
        end(self) -> long double
        """
        return _vnl_vectorPython.vnl_vectorLD_end(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int len, unsigned int start = 0) -> vnl_vectorLD
        extract(self, unsigned int len) -> vnl_vectorLD
        """
        return _vnl_vectorPython.vnl_vectorLD_extract(self, *args)

    def update(self, *args):
        """
        update(self, vnl_vectorLD arg0, unsigned int start = 0) -> vnl_vectorLD
        update(self, vnl_vectorLD arg0) -> vnl_vectorLD
        """
        return _vnl_vectorPython.vnl_vectorLD_update(self, *args)

    def squared_magnitude(self):
        """squared_magnitude(self) -> long double"""
        return _vnl_vectorPython.vnl_vectorLD_squared_magnitude(self)

    def magnitude(self):
        """magnitude(self) -> long double"""
        return _vnl_vectorPython.vnl_vectorLD_magnitude(self)

    def one_norm(self):
        """one_norm(self) -> long double"""
        return _vnl_vectorPython.vnl_vectorLD_one_norm(self)

    def two_norm(self):
        """two_norm(self) -> long double"""
        return _vnl_vectorPython.vnl_vectorLD_two_norm(self)

    def inf_norm(self):
        """inf_norm(self) -> long double"""
        return _vnl_vectorPython.vnl_vectorLD_inf_norm(self)

    def normalize(self):
        """normalize(self) -> vnl_vectorLD"""
        return _vnl_vectorPython.vnl_vectorLD_normalize(self)

    def rms(self):
        """rms(self) -> long double"""
        return _vnl_vectorPython.vnl_vectorLD_rms(self)

    def min_value(self):
        """min_value(self) -> long double"""
        return _vnl_vectorPython.vnl_vectorLD_min_value(self)

    def max_value(self):
        """max_value(self) -> long double"""
        return _vnl_vectorPython.vnl_vectorLD_max_value(self)

    def mean(self):
        """mean(self) -> long double"""
        return _vnl_vectorPython.vnl_vectorLD_mean(self)

    def sum(self):
        """sum(self) -> long double"""
        return _vnl_vectorPython.vnl_vectorLD_sum(self)

    def flip(self):
        """flip(self)"""
        return _vnl_vectorPython.vnl_vectorLD_flip(self)

    def swap(self, *args):
        """swap(self, vnl_vectorLD that)"""
        return _vnl_vectorPython.vnl_vectorLD_swap(self, *args)

    def assert_size(self, *args):
        """assert_size(self, unsigned int sz)"""
        return _vnl_vectorPython.vnl_vectorLD_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_vectorPython.vnl_vectorLD_assert_finite(self)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorLD_is_finite(self)

    def is_zero(self):
        """is_zero(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorLD_is_zero(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorLD_empty(self)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_vectorLD v) -> bool"""
        return _vnl_vectorPython.vnl_vectorLD_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_vectorLD that) -> bool"""
        return _vnl_vectorPython.vnl_vectorLD___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_vectorLD that) -> bool"""
        return _vnl_vectorPython.vnl_vectorLD___ne__(self, *args)

    def set_size(self, *args):
        """set_size(self, unsigned int n) -> bool"""
        return _vnl_vectorPython.vnl_vectorLD_set_size(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_vectorPython.vnl_vectorLD_clear(self)

    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vectorLD_read_ascii(self, *args)

    def read(*args):
        """read(istream s) -> vnl_vectorLD"""
        return _vnl_vectorPython.vnl_vectorLD_read(*args)

    read = staticmethod(read)
vnl_vectorLD.size = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_size,None,vnl_vectorLD)
vnl_vectorLD.put = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_put,None,vnl_vectorLD)
vnl_vectorLD.get = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_get,None,vnl_vectorLD)
vnl_vectorLD.fill = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_fill,None,vnl_vectorLD)
vnl_vectorLD.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_copy_in,None,vnl_vectorLD)
vnl_vectorLD.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_copy_out,None,vnl_vectorLD)
vnl_vectorLD.set = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_set,None,vnl_vectorLD)
vnl_vectorLD.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___call__,None,vnl_vectorLD)
vnl_vectorLD.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___idiv__,None,vnl_vectorLD)
vnl_vectorLD.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___iadd__,None,vnl_vectorLD)
vnl_vectorLD.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___isub__,None,vnl_vectorLD)
vnl_vectorLD.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_pre_multiply,None,vnl_vectorLD)
vnl_vectorLD.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_post_multiply,None,vnl_vectorLD)
vnl_vectorLD.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___imul__,None,vnl_vectorLD)
vnl_vectorLD.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___pos__,None,vnl_vectorLD)
vnl_vectorLD.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___neg__,None,vnl_vectorLD)
vnl_vectorLD.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___div__,None,vnl_vectorLD)
vnl_vectorLD.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___add__,None,vnl_vectorLD)
vnl_vectorLD.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___sub__,None,vnl_vectorLD)
vnl_vectorLD.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___mul__,None,vnl_vectorLD)
vnl_vectorLD.data_block = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_data_block,None,vnl_vectorLD)
vnl_vectorLD.begin = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_begin,None,vnl_vectorLD)
vnl_vectorLD.end = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_end,None,vnl_vectorLD)
vnl_vectorLD.extract = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_extract,None,vnl_vectorLD)
vnl_vectorLD.update = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_update,None,vnl_vectorLD)
vnl_vectorLD.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_squared_magnitude,None,vnl_vectorLD)
vnl_vectorLD.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_magnitude,None,vnl_vectorLD)
vnl_vectorLD.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_one_norm,None,vnl_vectorLD)
vnl_vectorLD.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_two_norm,None,vnl_vectorLD)
vnl_vectorLD.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_inf_norm,None,vnl_vectorLD)
vnl_vectorLD.normalize = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_normalize,None,vnl_vectorLD)
vnl_vectorLD.rms = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_rms,None,vnl_vectorLD)
vnl_vectorLD.min_value = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_min_value,None,vnl_vectorLD)
vnl_vectorLD.max_value = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_max_value,None,vnl_vectorLD)
vnl_vectorLD.mean = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_mean,None,vnl_vectorLD)
vnl_vectorLD.sum = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_sum,None,vnl_vectorLD)
vnl_vectorLD.flip = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_flip,None,vnl_vectorLD)
vnl_vectorLD.swap = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_swap,None,vnl_vectorLD)
vnl_vectorLD.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_assert_size,None,vnl_vectorLD)
vnl_vectorLD.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_assert_finite,None,vnl_vectorLD)
vnl_vectorLD.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_is_finite,None,vnl_vectorLD)
vnl_vectorLD.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_is_zero,None,vnl_vectorLD)
vnl_vectorLD.empty = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_empty,None,vnl_vectorLD)
vnl_vectorLD.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_operator_eq,None,vnl_vectorLD)
vnl_vectorLD.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___eq__,None,vnl_vectorLD)
vnl_vectorLD.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vectorLD___ne__,None,vnl_vectorLD)
vnl_vectorLD.set_size = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_set_size,None,vnl_vectorLD)
vnl_vectorLD.clear = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_clear,None,vnl_vectorLD)
vnl_vectorLD.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vectorLD_read_ascii,None,vnl_vectorLD)
vnl_vectorLD_swigregister = _vnl_vectorPython.vnl_vectorLD_swigregister
vnl_vectorLD_swigregister(vnl_vectorLD)

def vnl_vectorLD_read(*args):
  """vnl_vectorLD_read(istream s) -> vnl_vectorLD"""
  return _vnl_vectorPython.vnl_vectorLD_read(*args)

class vnl_vectorSC(object):
    """Proxy of C++ vnl_vectorSC class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_vectorSC
        __init__(self, unsigned int len) -> vnl_vectorSC
        __init__(self, unsigned int len, signed char v0) -> vnl_vectorSC
        __init__(self, unsigned int len, int n, signed char values) -> vnl_vectorSC
        __init__(self, signed char data_block, unsigned int n) -> vnl_vectorSC
        __init__(self, vnl_vectorSC arg0) -> vnl_vectorSC
        __init__(self, vnl_vectorSC arg0, vnl_vectorSC arg1, vnl_tag_add arg2) -> vnl_vectorSC
        __init__(self, vnl_vectorSC arg0, vnl_vectorSC arg1, vnl_tag_sub arg2) -> vnl_vectorSC
        __init__(self, vnl_vectorSC arg0, signed char arg1, vnl_tag_mul arg2) -> vnl_vectorSC
        __init__(self, vnl_vectorSC arg0, signed char arg1, vnl_tag_div arg2) -> vnl_vectorSC
        __init__(self, vnl_vectorSC arg0, signed char arg1, vnl_tag_add arg2) -> vnl_vectorSC
        __init__(self, vnl_vectorSC arg0, signed char arg1, vnl_tag_sub arg2) -> vnl_vectorSC
        __init__(self, vnl_matrixSC arg0, vnl_vectorSC arg1, vnl_tag_mul arg2) -> vnl_vectorSC
        __init__(self, vnl_vectorSC arg0, vnl_matrixSC arg1, vnl_tag_mul arg2) -> vnl_vectorSC
        __init__(self, vnl_vectorSC that, vnl_tag_grab arg1) -> vnl_vectorSC
        """
        _vnl_vectorPython.vnl_vectorSC_swiginit(self,_vnl_vectorPython.new_vnl_vectorSC(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vectorSC
    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorSC_size(self)

    def put(self, *args):
        """put(self, unsigned int index, signed char value)"""
        return _vnl_vectorPython.vnl_vectorSC_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int index) -> signed char"""
        return _vnl_vectorPython.vnl_vectorSC_get(self, *args)

    def fill(self, *args):
        """fill(self, signed char v)"""
        return _vnl_vectorPython.vnl_vectorSC_fill(self, *args)

    def copy_in(self, *args):
        """copy_in(self, signed char ptr)"""
        return _vnl_vectorPython.vnl_vectorSC_copy_in(self, *args)

    def copy_out(self, *args):
        """copy_out(self, signed char arg0)"""
        return _vnl_vectorPython.vnl_vectorSC_copy_out(self, *args)

    def set(self, *args):
        """set(self, signed char ptr)"""
        return _vnl_vectorPython.vnl_vectorSC_set(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int i) -> signed char
        __call__(self, unsigned int i) -> signed char
        """
        return _vnl_vectorPython.vnl_vectorSC___call__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, signed char arg0) -> vnl_vectorSC"""
        return _vnl_vectorPython.vnl_vectorSC___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, signed char arg0) -> vnl_vectorSC
        __iadd__(self, vnl_vectorSC rhs) -> vnl_vectorSC
        """
        return _vnl_vectorPython.vnl_vectorSC___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, signed char value) -> vnl_vectorSC
        __isub__(self, vnl_vectorSC rhs) -> vnl_vectorSC
        """
        return _vnl_vectorPython.vnl_vectorSC___isub__(self, *args)

    def pre_multiply(self, *args):
        """pre_multiply(self, vnl_matrixSC M) -> vnl_vectorSC"""
        return _vnl_vectorPython.vnl_vectorSC_pre_multiply(self, *args)

    def post_multiply(self, *args):
        """post_multiply(self, vnl_matrixSC M) -> vnl_vectorSC"""
        return _vnl_vectorPython.vnl_vectorSC_post_multiply(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, signed char arg0) -> vnl_vectorSC
        __imul__(self, vnl_matrixSC m) -> vnl_vectorSC
        """
        return _vnl_vectorPython.vnl_vectorSC___imul__(self, *args)

    def __pos__(self):
        """__pos__(self) -> vnl_vectorSC"""
        return _vnl_vectorPython.vnl_vectorSC___pos__(self)

    def __neg__(self):
        """__neg__(self) -> vnl_vectorSC"""
        return _vnl_vectorPython.vnl_vectorSC___neg__(self)

    def __div__(self, *args):
        """__div__(self, signed char v) -> vnl_vectorSC"""
        return _vnl_vectorPython.vnl_vectorSC___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, signed char v) -> vnl_vectorSC
        __add__(self, vnl_vectorSC v) -> vnl_vectorSC
        """
        return _vnl_vectorPython.vnl_vectorSC___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, signed char v) -> vnl_vectorSC
        __sub__(self, vnl_vectorSC v) -> vnl_vectorSC
        """
        return _vnl_vectorPython.vnl_vectorSC___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, signed char v) -> vnl_vectorSC
        __mul__(self, vnl_matrixSC M) -> vnl_vectorSC
        """
        return _vnl_vectorPython.vnl_vectorSC___mul__(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> signed char
        data_block(self) -> signed char
        """
        return _vnl_vectorPython.vnl_vectorSC_data_block(self, *args)

    def begin(self, *args):
        """
        begin(self) -> signed char
        begin(self) -> signed char
        """
        return _vnl_vectorPython.vnl_vectorSC_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> signed char
        end(self) -> signed char
        """
        return _vnl_vectorPython.vnl_vectorSC_end(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int len, unsigned int start = 0) -> vnl_vectorSC
        extract(self, unsigned int len) -> vnl_vectorSC
        """
        return _vnl_vectorPython.vnl_vectorSC_extract(self, *args)

    def update(self, *args):
        """
        update(self, vnl_vectorSC arg0, unsigned int start = 0) -> vnl_vectorSC
        update(self, vnl_vectorSC arg0) -> vnl_vectorSC
        """
        return _vnl_vectorPython.vnl_vectorSC_update(self, *args)

    def squared_magnitude(self):
        """squared_magnitude(self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorSC_squared_magnitude(self)

    def magnitude(self):
        """magnitude(self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorSC_magnitude(self)

    def one_norm(self):
        """one_norm(self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorSC_one_norm(self)

    def two_norm(self):
        """two_norm(self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorSC_two_norm(self)

    def inf_norm(self):
        """inf_norm(self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorSC_inf_norm(self)

    def normalize(self):
        """normalize(self) -> vnl_vectorSC"""
        return _vnl_vectorPython.vnl_vectorSC_normalize(self)

    def rms(self):
        """rms(self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorSC_rms(self)

    def min_value(self):
        """min_value(self) -> signed char"""
        return _vnl_vectorPython.vnl_vectorSC_min_value(self)

    def max_value(self):
        """max_value(self) -> signed char"""
        return _vnl_vectorPython.vnl_vectorSC_max_value(self)

    def mean(self):
        """mean(self) -> signed char"""
        return _vnl_vectorPython.vnl_vectorSC_mean(self)

    def sum(self):
        """sum(self) -> signed char"""
        return _vnl_vectorPython.vnl_vectorSC_sum(self)

    def flip(self):
        """flip(self)"""
        return _vnl_vectorPython.vnl_vectorSC_flip(self)

    def swap(self, *args):
        """swap(self, vnl_vectorSC that)"""
        return _vnl_vectorPython.vnl_vectorSC_swap(self, *args)

    def assert_size(self, *args):
        """assert_size(self, unsigned int sz)"""
        return _vnl_vectorPython.vnl_vectorSC_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_vectorPython.vnl_vectorSC_assert_finite(self)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorSC_is_finite(self)

    def is_zero(self):
        """is_zero(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorSC_is_zero(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorSC_empty(self)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_vectorSC v) -> bool"""
        return _vnl_vectorPython.vnl_vectorSC_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_vectorSC that) -> bool"""
        return _vnl_vectorPython.vnl_vectorSC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_vectorSC that) -> bool"""
        return _vnl_vectorPython.vnl_vectorSC___ne__(self, *args)

    def set_size(self, *args):
        """set_size(self, unsigned int n) -> bool"""
        return _vnl_vectorPython.vnl_vectorSC_set_size(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_vectorPython.vnl_vectorSC_clear(self)

    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vectorSC_read_ascii(self, *args)

    def read(*args):
        """read(istream s) -> vnl_vectorSC"""
        return _vnl_vectorPython.vnl_vectorSC_read(*args)

    read = staticmethod(read)
vnl_vectorSC.size = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_size,None,vnl_vectorSC)
vnl_vectorSC.put = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_put,None,vnl_vectorSC)
vnl_vectorSC.get = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_get,None,vnl_vectorSC)
vnl_vectorSC.fill = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_fill,None,vnl_vectorSC)
vnl_vectorSC.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_copy_in,None,vnl_vectorSC)
vnl_vectorSC.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_copy_out,None,vnl_vectorSC)
vnl_vectorSC.set = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_set,None,vnl_vectorSC)
vnl_vectorSC.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___call__,None,vnl_vectorSC)
vnl_vectorSC.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___idiv__,None,vnl_vectorSC)
vnl_vectorSC.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___iadd__,None,vnl_vectorSC)
vnl_vectorSC.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___isub__,None,vnl_vectorSC)
vnl_vectorSC.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_pre_multiply,None,vnl_vectorSC)
vnl_vectorSC.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_post_multiply,None,vnl_vectorSC)
vnl_vectorSC.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___imul__,None,vnl_vectorSC)
vnl_vectorSC.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___pos__,None,vnl_vectorSC)
vnl_vectorSC.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___neg__,None,vnl_vectorSC)
vnl_vectorSC.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___div__,None,vnl_vectorSC)
vnl_vectorSC.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___add__,None,vnl_vectorSC)
vnl_vectorSC.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___sub__,None,vnl_vectorSC)
vnl_vectorSC.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___mul__,None,vnl_vectorSC)
vnl_vectorSC.data_block = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_data_block,None,vnl_vectorSC)
vnl_vectorSC.begin = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_begin,None,vnl_vectorSC)
vnl_vectorSC.end = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_end,None,vnl_vectorSC)
vnl_vectorSC.extract = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_extract,None,vnl_vectorSC)
vnl_vectorSC.update = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_update,None,vnl_vectorSC)
vnl_vectorSC.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_squared_magnitude,None,vnl_vectorSC)
vnl_vectorSC.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_magnitude,None,vnl_vectorSC)
vnl_vectorSC.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_one_norm,None,vnl_vectorSC)
vnl_vectorSC.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_two_norm,None,vnl_vectorSC)
vnl_vectorSC.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_inf_norm,None,vnl_vectorSC)
vnl_vectorSC.normalize = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_normalize,None,vnl_vectorSC)
vnl_vectorSC.rms = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_rms,None,vnl_vectorSC)
vnl_vectorSC.min_value = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_min_value,None,vnl_vectorSC)
vnl_vectorSC.max_value = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_max_value,None,vnl_vectorSC)
vnl_vectorSC.mean = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_mean,None,vnl_vectorSC)
vnl_vectorSC.sum = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_sum,None,vnl_vectorSC)
vnl_vectorSC.flip = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_flip,None,vnl_vectorSC)
vnl_vectorSC.swap = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_swap,None,vnl_vectorSC)
vnl_vectorSC.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_assert_size,None,vnl_vectorSC)
vnl_vectorSC.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_assert_finite,None,vnl_vectorSC)
vnl_vectorSC.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_is_finite,None,vnl_vectorSC)
vnl_vectorSC.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_is_zero,None,vnl_vectorSC)
vnl_vectorSC.empty = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_empty,None,vnl_vectorSC)
vnl_vectorSC.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_operator_eq,None,vnl_vectorSC)
vnl_vectorSC.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___eq__,None,vnl_vectorSC)
vnl_vectorSC.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSC___ne__,None,vnl_vectorSC)
vnl_vectorSC.set_size = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_set_size,None,vnl_vectorSC)
vnl_vectorSC.clear = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_clear,None,vnl_vectorSC)
vnl_vectorSC.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vectorSC_read_ascii,None,vnl_vectorSC)
vnl_vectorSC_swigregister = _vnl_vectorPython.vnl_vectorSC_swigregister
vnl_vectorSC_swigregister(vnl_vectorSC)

def vnl_vectorSC_read(*args):
  """vnl_vectorSC_read(istream s) -> vnl_vectorSC"""
  return _vnl_vectorPython.vnl_vectorSC_read(*args)

class vnl_vectorSI(object):
    """Proxy of C++ vnl_vectorSI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_vectorSI
        __init__(self, unsigned int len) -> vnl_vectorSI
        __init__(self, unsigned int len, int v0) -> vnl_vectorSI
        __init__(self, unsigned int len, int n, int values) -> vnl_vectorSI
        __init__(self, int data_block, unsigned int n) -> vnl_vectorSI
        __init__(self, vnl_vectorSI arg0) -> vnl_vectorSI
        __init__(self, vnl_vectorSI arg0, vnl_vectorSI arg1, vnl_tag_add arg2) -> vnl_vectorSI
        __init__(self, vnl_vectorSI arg0, vnl_vectorSI arg1, vnl_tag_sub arg2) -> vnl_vectorSI
        __init__(self, vnl_vectorSI arg0, int arg1, vnl_tag_mul arg2) -> vnl_vectorSI
        __init__(self, vnl_vectorSI arg0, int arg1, vnl_tag_div arg2) -> vnl_vectorSI
        __init__(self, vnl_vectorSI arg0, int arg1, vnl_tag_add arg2) -> vnl_vectorSI
        __init__(self, vnl_vectorSI arg0, int arg1, vnl_tag_sub arg2) -> vnl_vectorSI
        __init__(self, vnl_matrixSI arg0, vnl_vectorSI arg1, vnl_tag_mul arg2) -> vnl_vectorSI
        __init__(self, vnl_vectorSI arg0, vnl_matrixSI arg1, vnl_tag_mul arg2) -> vnl_vectorSI
        __init__(self, vnl_vectorSI that, vnl_tag_grab arg1) -> vnl_vectorSI
        """
        _vnl_vectorPython.vnl_vectorSI_swiginit(self,_vnl_vectorPython.new_vnl_vectorSI(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vectorSI
    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorSI_size(self)

    def put(self, *args):
        """put(self, unsigned int index, int value)"""
        return _vnl_vectorPython.vnl_vectorSI_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int index) -> int"""
        return _vnl_vectorPython.vnl_vectorSI_get(self, *args)

    def fill(self, *args):
        """fill(self, int v)"""
        return _vnl_vectorPython.vnl_vectorSI_fill(self, *args)

    def copy_in(self, *args):
        """copy_in(self, int ptr)"""
        return _vnl_vectorPython.vnl_vectorSI_copy_in(self, *args)

    def copy_out(self, *args):
        """copy_out(self, int arg0)"""
        return _vnl_vectorPython.vnl_vectorSI_copy_out(self, *args)

    def set(self, *args):
        """set(self, int ptr)"""
        return _vnl_vectorPython.vnl_vectorSI_set(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int i) -> int
        __call__(self, unsigned int i) -> int
        """
        return _vnl_vectorPython.vnl_vectorSI___call__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, int arg0) -> vnl_vectorSI"""
        return _vnl_vectorPython.vnl_vectorSI___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, int arg0) -> vnl_vectorSI
        __iadd__(self, vnl_vectorSI rhs) -> vnl_vectorSI
        """
        return _vnl_vectorPython.vnl_vectorSI___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, int value) -> vnl_vectorSI
        __isub__(self, vnl_vectorSI rhs) -> vnl_vectorSI
        """
        return _vnl_vectorPython.vnl_vectorSI___isub__(self, *args)

    def pre_multiply(self, *args):
        """pre_multiply(self, vnl_matrixSI M) -> vnl_vectorSI"""
        return _vnl_vectorPython.vnl_vectorSI_pre_multiply(self, *args)

    def post_multiply(self, *args):
        """post_multiply(self, vnl_matrixSI M) -> vnl_vectorSI"""
        return _vnl_vectorPython.vnl_vectorSI_post_multiply(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, int arg0) -> vnl_vectorSI
        __imul__(self, vnl_matrixSI m) -> vnl_vectorSI
        """
        return _vnl_vectorPython.vnl_vectorSI___imul__(self, *args)

    def __pos__(self):
        """__pos__(self) -> vnl_vectorSI"""
        return _vnl_vectorPython.vnl_vectorSI___pos__(self)

    def __neg__(self):
        """__neg__(self) -> vnl_vectorSI"""
        return _vnl_vectorPython.vnl_vectorSI___neg__(self)

    def __div__(self, *args):
        """__div__(self, int v) -> vnl_vectorSI"""
        return _vnl_vectorPython.vnl_vectorSI___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, int v) -> vnl_vectorSI
        __add__(self, vnl_vectorSI v) -> vnl_vectorSI
        """
        return _vnl_vectorPython.vnl_vectorSI___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, int v) -> vnl_vectorSI
        __sub__(self, vnl_vectorSI v) -> vnl_vectorSI
        """
        return _vnl_vectorPython.vnl_vectorSI___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, int v) -> vnl_vectorSI
        __mul__(self, vnl_matrixSI M) -> vnl_vectorSI
        """
        return _vnl_vectorPython.vnl_vectorSI___mul__(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> int
        data_block(self) -> int
        """
        return _vnl_vectorPython.vnl_vectorSI_data_block(self, *args)

    def begin(self, *args):
        """
        begin(self) -> int
        begin(self) -> int
        """
        return _vnl_vectorPython.vnl_vectorSI_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> int
        end(self) -> int
        """
        return _vnl_vectorPython.vnl_vectorSI_end(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int len, unsigned int start = 0) -> vnl_vectorSI
        extract(self, unsigned int len) -> vnl_vectorSI
        """
        return _vnl_vectorPython.vnl_vectorSI_extract(self, *args)

    def update(self, *args):
        """
        update(self, vnl_vectorSI arg0, unsigned int start = 0) -> vnl_vectorSI
        update(self, vnl_vectorSI arg0) -> vnl_vectorSI
        """
        return _vnl_vectorPython.vnl_vectorSI_update(self, *args)

    def squared_magnitude(self):
        """squared_magnitude(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorSI_squared_magnitude(self)

    def magnitude(self):
        """magnitude(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorSI_magnitude(self)

    def one_norm(self):
        """one_norm(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorSI_one_norm(self)

    def two_norm(self):
        """two_norm(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorSI_two_norm(self)

    def inf_norm(self):
        """inf_norm(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorSI_inf_norm(self)

    def normalize(self):
        """normalize(self) -> vnl_vectorSI"""
        return _vnl_vectorPython.vnl_vectorSI_normalize(self)

    def rms(self):
        """rms(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorSI_rms(self)

    def min_value(self):
        """min_value(self) -> int"""
        return _vnl_vectorPython.vnl_vectorSI_min_value(self)

    def max_value(self):
        """max_value(self) -> int"""
        return _vnl_vectorPython.vnl_vectorSI_max_value(self)

    def mean(self):
        """mean(self) -> int"""
        return _vnl_vectorPython.vnl_vectorSI_mean(self)

    def sum(self):
        """sum(self) -> int"""
        return _vnl_vectorPython.vnl_vectorSI_sum(self)

    def flip(self):
        """flip(self)"""
        return _vnl_vectorPython.vnl_vectorSI_flip(self)

    def swap(self, *args):
        """swap(self, vnl_vectorSI that)"""
        return _vnl_vectorPython.vnl_vectorSI_swap(self, *args)

    def assert_size(self, *args):
        """assert_size(self, unsigned int sz)"""
        return _vnl_vectorPython.vnl_vectorSI_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_vectorPython.vnl_vectorSI_assert_finite(self)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorSI_is_finite(self)

    def is_zero(self):
        """is_zero(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorSI_is_zero(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorSI_empty(self)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_vectorSI v) -> bool"""
        return _vnl_vectorPython.vnl_vectorSI_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_vectorSI that) -> bool"""
        return _vnl_vectorPython.vnl_vectorSI___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_vectorSI that) -> bool"""
        return _vnl_vectorPython.vnl_vectorSI___ne__(self, *args)

    def set_size(self, *args):
        """set_size(self, unsigned int n) -> bool"""
        return _vnl_vectorPython.vnl_vectorSI_set_size(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_vectorPython.vnl_vectorSI_clear(self)

    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vectorSI_read_ascii(self, *args)

    def read(*args):
        """read(istream s) -> vnl_vectorSI"""
        return _vnl_vectorPython.vnl_vectorSI_read(*args)

    read = staticmethod(read)
vnl_vectorSI.size = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_size,None,vnl_vectorSI)
vnl_vectorSI.put = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_put,None,vnl_vectorSI)
vnl_vectorSI.get = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_get,None,vnl_vectorSI)
vnl_vectorSI.fill = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_fill,None,vnl_vectorSI)
vnl_vectorSI.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_copy_in,None,vnl_vectorSI)
vnl_vectorSI.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_copy_out,None,vnl_vectorSI)
vnl_vectorSI.set = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_set,None,vnl_vectorSI)
vnl_vectorSI.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___call__,None,vnl_vectorSI)
vnl_vectorSI.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___idiv__,None,vnl_vectorSI)
vnl_vectorSI.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___iadd__,None,vnl_vectorSI)
vnl_vectorSI.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___isub__,None,vnl_vectorSI)
vnl_vectorSI.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_pre_multiply,None,vnl_vectorSI)
vnl_vectorSI.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_post_multiply,None,vnl_vectorSI)
vnl_vectorSI.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___imul__,None,vnl_vectorSI)
vnl_vectorSI.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___pos__,None,vnl_vectorSI)
vnl_vectorSI.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___neg__,None,vnl_vectorSI)
vnl_vectorSI.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___div__,None,vnl_vectorSI)
vnl_vectorSI.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___add__,None,vnl_vectorSI)
vnl_vectorSI.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___sub__,None,vnl_vectorSI)
vnl_vectorSI.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___mul__,None,vnl_vectorSI)
vnl_vectorSI.data_block = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_data_block,None,vnl_vectorSI)
vnl_vectorSI.begin = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_begin,None,vnl_vectorSI)
vnl_vectorSI.end = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_end,None,vnl_vectorSI)
vnl_vectorSI.extract = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_extract,None,vnl_vectorSI)
vnl_vectorSI.update = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_update,None,vnl_vectorSI)
vnl_vectorSI.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_squared_magnitude,None,vnl_vectorSI)
vnl_vectorSI.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_magnitude,None,vnl_vectorSI)
vnl_vectorSI.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_one_norm,None,vnl_vectorSI)
vnl_vectorSI.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_two_norm,None,vnl_vectorSI)
vnl_vectorSI.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_inf_norm,None,vnl_vectorSI)
vnl_vectorSI.normalize = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_normalize,None,vnl_vectorSI)
vnl_vectorSI.rms = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_rms,None,vnl_vectorSI)
vnl_vectorSI.min_value = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_min_value,None,vnl_vectorSI)
vnl_vectorSI.max_value = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_max_value,None,vnl_vectorSI)
vnl_vectorSI.mean = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_mean,None,vnl_vectorSI)
vnl_vectorSI.sum = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_sum,None,vnl_vectorSI)
vnl_vectorSI.flip = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_flip,None,vnl_vectorSI)
vnl_vectorSI.swap = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_swap,None,vnl_vectorSI)
vnl_vectorSI.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_assert_size,None,vnl_vectorSI)
vnl_vectorSI.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_assert_finite,None,vnl_vectorSI)
vnl_vectorSI.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_is_finite,None,vnl_vectorSI)
vnl_vectorSI.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_is_zero,None,vnl_vectorSI)
vnl_vectorSI.empty = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_empty,None,vnl_vectorSI)
vnl_vectorSI.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_operator_eq,None,vnl_vectorSI)
vnl_vectorSI.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___eq__,None,vnl_vectorSI)
vnl_vectorSI.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSI___ne__,None,vnl_vectorSI)
vnl_vectorSI.set_size = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_set_size,None,vnl_vectorSI)
vnl_vectorSI.clear = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_clear,None,vnl_vectorSI)
vnl_vectorSI.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vectorSI_read_ascii,None,vnl_vectorSI)
vnl_vectorSI_swigregister = _vnl_vectorPython.vnl_vectorSI_swigregister
vnl_vectorSI_swigregister(vnl_vectorSI)

def vnl_vectorSI_read(*args):
  """vnl_vectorSI_read(istream s) -> vnl_vectorSI"""
  return _vnl_vectorPython.vnl_vectorSI_read(*args)

class vnl_vectorSL(object):
    """Proxy of C++ vnl_vectorSL class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_vectorSL
        __init__(self, unsigned int len) -> vnl_vectorSL
        __init__(self, unsigned int len, long v0) -> vnl_vectorSL
        __init__(self, unsigned int len, int n, long values) -> vnl_vectorSL
        __init__(self, long data_block, unsigned int n) -> vnl_vectorSL
        __init__(self, vnl_vectorSL arg0) -> vnl_vectorSL
        __init__(self, vnl_vectorSL arg0, vnl_vectorSL arg1, vnl_tag_add arg2) -> vnl_vectorSL
        __init__(self, vnl_vectorSL arg0, vnl_vectorSL arg1, vnl_tag_sub arg2) -> vnl_vectorSL
        __init__(self, vnl_vectorSL arg0, long arg1, vnl_tag_mul arg2) -> vnl_vectorSL
        __init__(self, vnl_vectorSL arg0, long arg1, vnl_tag_div arg2) -> vnl_vectorSL
        __init__(self, vnl_vectorSL arg0, long arg1, vnl_tag_add arg2) -> vnl_vectorSL
        __init__(self, vnl_vectorSL arg0, long arg1, vnl_tag_sub arg2) -> vnl_vectorSL
        __init__(self, vnl_matrixSL arg0, vnl_vectorSL arg1, vnl_tag_mul arg2) -> vnl_vectorSL
        __init__(self, vnl_vectorSL arg0, vnl_matrixSL arg1, vnl_tag_mul arg2) -> vnl_vectorSL
        __init__(self, vnl_vectorSL that, vnl_tag_grab arg1) -> vnl_vectorSL
        """
        _vnl_vectorPython.vnl_vectorSL_swiginit(self,_vnl_vectorPython.new_vnl_vectorSL(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vectorSL
    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorSL_size(self)

    def put(self, *args):
        """put(self, unsigned int index, long value)"""
        return _vnl_vectorPython.vnl_vectorSL_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int index) -> long"""
        return _vnl_vectorPython.vnl_vectorSL_get(self, *args)

    def fill(self, *args):
        """fill(self, long v)"""
        return _vnl_vectorPython.vnl_vectorSL_fill(self, *args)

    def copy_in(self, *args):
        """copy_in(self, long ptr)"""
        return _vnl_vectorPython.vnl_vectorSL_copy_in(self, *args)

    def copy_out(self, *args):
        """copy_out(self, long arg0)"""
        return _vnl_vectorPython.vnl_vectorSL_copy_out(self, *args)

    def set(self, *args):
        """set(self, long ptr)"""
        return _vnl_vectorPython.vnl_vectorSL_set(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int i) -> long
        __call__(self, unsigned int i) -> long
        """
        return _vnl_vectorPython.vnl_vectorSL___call__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, long arg0) -> vnl_vectorSL"""
        return _vnl_vectorPython.vnl_vectorSL___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, long arg0) -> vnl_vectorSL
        __iadd__(self, vnl_vectorSL rhs) -> vnl_vectorSL
        """
        return _vnl_vectorPython.vnl_vectorSL___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, long value) -> vnl_vectorSL
        __isub__(self, vnl_vectorSL rhs) -> vnl_vectorSL
        """
        return _vnl_vectorPython.vnl_vectorSL___isub__(self, *args)

    def pre_multiply(self, *args):
        """pre_multiply(self, vnl_matrixSL M) -> vnl_vectorSL"""
        return _vnl_vectorPython.vnl_vectorSL_pre_multiply(self, *args)

    def post_multiply(self, *args):
        """post_multiply(self, vnl_matrixSL M) -> vnl_vectorSL"""
        return _vnl_vectorPython.vnl_vectorSL_post_multiply(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, long arg0) -> vnl_vectorSL
        __imul__(self, vnl_matrixSL m) -> vnl_vectorSL
        """
        return _vnl_vectorPython.vnl_vectorSL___imul__(self, *args)

    def __pos__(self):
        """__pos__(self) -> vnl_vectorSL"""
        return _vnl_vectorPython.vnl_vectorSL___pos__(self)

    def __neg__(self):
        """__neg__(self) -> vnl_vectorSL"""
        return _vnl_vectorPython.vnl_vectorSL___neg__(self)

    def __div__(self, *args):
        """__div__(self, long v) -> vnl_vectorSL"""
        return _vnl_vectorPython.vnl_vectorSL___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, long v) -> vnl_vectorSL
        __add__(self, vnl_vectorSL v) -> vnl_vectorSL
        """
        return _vnl_vectorPython.vnl_vectorSL___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, long v) -> vnl_vectorSL
        __sub__(self, vnl_vectorSL v) -> vnl_vectorSL
        """
        return _vnl_vectorPython.vnl_vectorSL___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, long v) -> vnl_vectorSL
        __mul__(self, vnl_matrixSL M) -> vnl_vectorSL
        """
        return _vnl_vectorPython.vnl_vectorSL___mul__(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> long
        data_block(self) -> long
        """
        return _vnl_vectorPython.vnl_vectorSL_data_block(self, *args)

    def begin(self, *args):
        """
        begin(self) -> long
        begin(self) -> long
        """
        return _vnl_vectorPython.vnl_vectorSL_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> long
        end(self) -> long
        """
        return _vnl_vectorPython.vnl_vectorSL_end(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int len, unsigned int start = 0) -> vnl_vectorSL
        extract(self, unsigned int len) -> vnl_vectorSL
        """
        return _vnl_vectorPython.vnl_vectorSL_extract(self, *args)

    def update(self, *args):
        """
        update(self, vnl_vectorSL arg0, unsigned int start = 0) -> vnl_vectorSL
        update(self, vnl_vectorSL arg0) -> vnl_vectorSL
        """
        return _vnl_vectorPython.vnl_vectorSL_update(self, *args)

    def squared_magnitude(self):
        """squared_magnitude(self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorSL_squared_magnitude(self)

    def magnitude(self):
        """magnitude(self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorSL_magnitude(self)

    def one_norm(self):
        """one_norm(self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorSL_one_norm(self)

    def two_norm(self):
        """two_norm(self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorSL_two_norm(self)

    def inf_norm(self):
        """inf_norm(self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorSL_inf_norm(self)

    def normalize(self):
        """normalize(self) -> vnl_vectorSL"""
        return _vnl_vectorPython.vnl_vectorSL_normalize(self)

    def rms(self):
        """rms(self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorSL_rms(self)

    def min_value(self):
        """min_value(self) -> long"""
        return _vnl_vectorPython.vnl_vectorSL_min_value(self)

    def max_value(self):
        """max_value(self) -> long"""
        return _vnl_vectorPython.vnl_vectorSL_max_value(self)

    def mean(self):
        """mean(self) -> long"""
        return _vnl_vectorPython.vnl_vectorSL_mean(self)

    def sum(self):
        """sum(self) -> long"""
        return _vnl_vectorPython.vnl_vectorSL_sum(self)

    def flip(self):
        """flip(self)"""
        return _vnl_vectorPython.vnl_vectorSL_flip(self)

    def swap(self, *args):
        """swap(self, vnl_vectorSL that)"""
        return _vnl_vectorPython.vnl_vectorSL_swap(self, *args)

    def assert_size(self, *args):
        """assert_size(self, unsigned int sz)"""
        return _vnl_vectorPython.vnl_vectorSL_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_vectorPython.vnl_vectorSL_assert_finite(self)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorSL_is_finite(self)

    def is_zero(self):
        """is_zero(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorSL_is_zero(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorSL_empty(self)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_vectorSL v) -> bool"""
        return _vnl_vectorPython.vnl_vectorSL_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_vectorSL that) -> bool"""
        return _vnl_vectorPython.vnl_vectorSL___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_vectorSL that) -> bool"""
        return _vnl_vectorPython.vnl_vectorSL___ne__(self, *args)

    def set_size(self, *args):
        """set_size(self, unsigned int n) -> bool"""
        return _vnl_vectorPython.vnl_vectorSL_set_size(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_vectorPython.vnl_vectorSL_clear(self)

    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vectorSL_read_ascii(self, *args)

    def read(*args):
        """read(istream s) -> vnl_vectorSL"""
        return _vnl_vectorPython.vnl_vectorSL_read(*args)

    read = staticmethod(read)
vnl_vectorSL.size = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_size,None,vnl_vectorSL)
vnl_vectorSL.put = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_put,None,vnl_vectorSL)
vnl_vectorSL.get = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_get,None,vnl_vectorSL)
vnl_vectorSL.fill = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_fill,None,vnl_vectorSL)
vnl_vectorSL.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_copy_in,None,vnl_vectorSL)
vnl_vectorSL.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_copy_out,None,vnl_vectorSL)
vnl_vectorSL.set = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_set,None,vnl_vectorSL)
vnl_vectorSL.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___call__,None,vnl_vectorSL)
vnl_vectorSL.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___idiv__,None,vnl_vectorSL)
vnl_vectorSL.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___iadd__,None,vnl_vectorSL)
vnl_vectorSL.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___isub__,None,vnl_vectorSL)
vnl_vectorSL.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_pre_multiply,None,vnl_vectorSL)
vnl_vectorSL.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_post_multiply,None,vnl_vectorSL)
vnl_vectorSL.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___imul__,None,vnl_vectorSL)
vnl_vectorSL.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___pos__,None,vnl_vectorSL)
vnl_vectorSL.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___neg__,None,vnl_vectorSL)
vnl_vectorSL.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___div__,None,vnl_vectorSL)
vnl_vectorSL.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___add__,None,vnl_vectorSL)
vnl_vectorSL.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___sub__,None,vnl_vectorSL)
vnl_vectorSL.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___mul__,None,vnl_vectorSL)
vnl_vectorSL.data_block = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_data_block,None,vnl_vectorSL)
vnl_vectorSL.begin = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_begin,None,vnl_vectorSL)
vnl_vectorSL.end = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_end,None,vnl_vectorSL)
vnl_vectorSL.extract = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_extract,None,vnl_vectorSL)
vnl_vectorSL.update = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_update,None,vnl_vectorSL)
vnl_vectorSL.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_squared_magnitude,None,vnl_vectorSL)
vnl_vectorSL.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_magnitude,None,vnl_vectorSL)
vnl_vectorSL.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_one_norm,None,vnl_vectorSL)
vnl_vectorSL.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_two_norm,None,vnl_vectorSL)
vnl_vectorSL.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_inf_norm,None,vnl_vectorSL)
vnl_vectorSL.normalize = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_normalize,None,vnl_vectorSL)
vnl_vectorSL.rms = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_rms,None,vnl_vectorSL)
vnl_vectorSL.min_value = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_min_value,None,vnl_vectorSL)
vnl_vectorSL.max_value = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_max_value,None,vnl_vectorSL)
vnl_vectorSL.mean = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_mean,None,vnl_vectorSL)
vnl_vectorSL.sum = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_sum,None,vnl_vectorSL)
vnl_vectorSL.flip = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_flip,None,vnl_vectorSL)
vnl_vectorSL.swap = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_swap,None,vnl_vectorSL)
vnl_vectorSL.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_assert_size,None,vnl_vectorSL)
vnl_vectorSL.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_assert_finite,None,vnl_vectorSL)
vnl_vectorSL.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_is_finite,None,vnl_vectorSL)
vnl_vectorSL.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_is_zero,None,vnl_vectorSL)
vnl_vectorSL.empty = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_empty,None,vnl_vectorSL)
vnl_vectorSL.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_operator_eq,None,vnl_vectorSL)
vnl_vectorSL.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___eq__,None,vnl_vectorSL)
vnl_vectorSL.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vectorSL___ne__,None,vnl_vectorSL)
vnl_vectorSL.set_size = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_set_size,None,vnl_vectorSL)
vnl_vectorSL.clear = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_clear,None,vnl_vectorSL)
vnl_vectorSL.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vectorSL_read_ascii,None,vnl_vectorSL)
vnl_vectorSL_swigregister = _vnl_vectorPython.vnl_vectorSL_swigregister
vnl_vectorSL_swigregister(vnl_vectorSL)

def vnl_vectorSL_read(*args):
  """vnl_vectorSL_read(istream s) -> vnl_vectorSL"""
  return _vnl_vectorPython.vnl_vectorSL_read(*args)

class vnl_vectorUC(object):
    """Proxy of C++ vnl_vectorUC class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_vectorUC
        __init__(self, unsigned int len) -> vnl_vectorUC
        __init__(self, unsigned int len, unsigned char v0) -> vnl_vectorUC
        __init__(self, unsigned int len, int n, unsigned char values) -> vnl_vectorUC
        __init__(self, unsigned char data_block, unsigned int n) -> vnl_vectorUC
        __init__(self, vnl_vectorUC arg0) -> vnl_vectorUC
        __init__(self, vnl_vectorUC arg0, vnl_vectorUC arg1, vnl_tag_add arg2) -> vnl_vectorUC
        __init__(self, vnl_vectorUC arg0, vnl_vectorUC arg1, vnl_tag_sub arg2) -> vnl_vectorUC
        __init__(self, vnl_vectorUC arg0, unsigned char arg1, vnl_tag_mul arg2) -> vnl_vectorUC
        __init__(self, vnl_vectorUC arg0, unsigned char arg1, vnl_tag_div arg2) -> vnl_vectorUC
        __init__(self, vnl_vectorUC arg0, unsigned char arg1, vnl_tag_add arg2) -> vnl_vectorUC
        __init__(self, vnl_vectorUC arg0, unsigned char arg1, vnl_tag_sub arg2) -> vnl_vectorUC
        __init__(self, vnl_matrixUC arg0, vnl_vectorUC arg1, vnl_tag_mul arg2) -> vnl_vectorUC
        __init__(self, vnl_vectorUC arg0, vnl_matrixUC arg1, vnl_tag_mul arg2) -> vnl_vectorUC
        __init__(self, vnl_vectorUC that, vnl_tag_grab arg1) -> vnl_vectorUC
        """
        _vnl_vectorPython.vnl_vectorUC_swiginit(self,_vnl_vectorPython.new_vnl_vectorUC(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vectorUC
    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUC_size(self)

    def put(self, *args):
        """put(self, unsigned int index, unsigned char value)"""
        return _vnl_vectorPython.vnl_vectorUC_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int index) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorUC_get(self, *args)

    def fill(self, *args):
        """fill(self, unsigned char v)"""
        return _vnl_vectorPython.vnl_vectorUC_fill(self, *args)

    def copy_in(self, *args):
        """copy_in(self, unsigned char ptr)"""
        return _vnl_vectorPython.vnl_vectorUC_copy_in(self, *args)

    def copy_out(self, *args):
        """copy_out(self, unsigned char arg0)"""
        return _vnl_vectorPython.vnl_vectorUC_copy_out(self, *args)

    def set(self, *args):
        """set(self, unsigned char ptr)"""
        return _vnl_vectorPython.vnl_vectorUC_set(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int i) -> unsigned char
        __call__(self, unsigned int i) -> unsigned char
        """
        return _vnl_vectorPython.vnl_vectorUC___call__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, unsigned char arg0) -> vnl_vectorUC"""
        return _vnl_vectorPython.vnl_vectorUC___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, unsigned char arg0) -> vnl_vectorUC
        __iadd__(self, vnl_vectorUC rhs) -> vnl_vectorUC
        """
        return _vnl_vectorPython.vnl_vectorUC___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, unsigned char value) -> vnl_vectorUC
        __isub__(self, vnl_vectorUC rhs) -> vnl_vectorUC
        """
        return _vnl_vectorPython.vnl_vectorUC___isub__(self, *args)

    def pre_multiply(self, *args):
        """pre_multiply(self, vnl_matrixUC M) -> vnl_vectorUC"""
        return _vnl_vectorPython.vnl_vectorUC_pre_multiply(self, *args)

    def post_multiply(self, *args):
        """post_multiply(self, vnl_matrixUC M) -> vnl_vectorUC"""
        return _vnl_vectorPython.vnl_vectorUC_post_multiply(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, unsigned char arg0) -> vnl_vectorUC
        __imul__(self, vnl_matrixUC m) -> vnl_vectorUC
        """
        return _vnl_vectorPython.vnl_vectorUC___imul__(self, *args)

    def __pos__(self):
        """__pos__(self) -> vnl_vectorUC"""
        return _vnl_vectorPython.vnl_vectorUC___pos__(self)

    def __neg__(self):
        """__neg__(self) -> vnl_vectorUC"""
        return _vnl_vectorPython.vnl_vectorUC___neg__(self)

    def __div__(self, *args):
        """__div__(self, unsigned char v) -> vnl_vectorUC"""
        return _vnl_vectorPython.vnl_vectorUC___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, unsigned char v) -> vnl_vectorUC
        __add__(self, vnl_vectorUC v) -> vnl_vectorUC
        """
        return _vnl_vectorPython.vnl_vectorUC___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, unsigned char v) -> vnl_vectorUC
        __sub__(self, vnl_vectorUC v) -> vnl_vectorUC
        """
        return _vnl_vectorPython.vnl_vectorUC___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, unsigned char v) -> vnl_vectorUC
        __mul__(self, vnl_matrixUC M) -> vnl_vectorUC
        """
        return _vnl_vectorPython.vnl_vectorUC___mul__(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> unsigned char
        data_block(self) -> unsigned char
        """
        return _vnl_vectorPython.vnl_vectorUC_data_block(self, *args)

    def begin(self, *args):
        """
        begin(self) -> unsigned char
        begin(self) -> unsigned char
        """
        return _vnl_vectorPython.vnl_vectorUC_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> unsigned char
        end(self) -> unsigned char
        """
        return _vnl_vectorPython.vnl_vectorUC_end(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int len, unsigned int start = 0) -> vnl_vectorUC
        extract(self, unsigned int len) -> vnl_vectorUC
        """
        return _vnl_vectorPython.vnl_vectorUC_extract(self, *args)

    def update(self, *args):
        """
        update(self, vnl_vectorUC arg0, unsigned int start = 0) -> vnl_vectorUC
        update(self, vnl_vectorUC arg0) -> vnl_vectorUC
        """
        return _vnl_vectorPython.vnl_vectorUC_update(self, *args)

    def squared_magnitude(self):
        """squared_magnitude(self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorUC_squared_magnitude(self)

    def magnitude(self):
        """magnitude(self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorUC_magnitude(self)

    def one_norm(self):
        """one_norm(self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorUC_one_norm(self)

    def two_norm(self):
        """two_norm(self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorUC_two_norm(self)

    def inf_norm(self):
        """inf_norm(self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorUC_inf_norm(self)

    def normalize(self):
        """normalize(self) -> vnl_vectorUC"""
        return _vnl_vectorPython.vnl_vectorUC_normalize(self)

    def rms(self):
        """rms(self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorUC_rms(self)

    def min_value(self):
        """min_value(self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorUC_min_value(self)

    def max_value(self):
        """max_value(self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorUC_max_value(self)

    def mean(self):
        """mean(self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorUC_mean(self)

    def sum(self):
        """sum(self) -> unsigned char"""
        return _vnl_vectorPython.vnl_vectorUC_sum(self)

    def flip(self):
        """flip(self)"""
        return _vnl_vectorPython.vnl_vectorUC_flip(self)

    def swap(self, *args):
        """swap(self, vnl_vectorUC that)"""
        return _vnl_vectorPython.vnl_vectorUC_swap(self, *args)

    def assert_size(self, *args):
        """assert_size(self, unsigned int sz)"""
        return _vnl_vectorPython.vnl_vectorUC_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_vectorPython.vnl_vectorUC_assert_finite(self)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorUC_is_finite(self)

    def is_zero(self):
        """is_zero(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorUC_is_zero(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorUC_empty(self)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_vectorUC v) -> bool"""
        return _vnl_vectorPython.vnl_vectorUC_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_vectorUC that) -> bool"""
        return _vnl_vectorPython.vnl_vectorUC___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_vectorUC that) -> bool"""
        return _vnl_vectorPython.vnl_vectorUC___ne__(self, *args)

    def set_size(self, *args):
        """set_size(self, unsigned int n) -> bool"""
        return _vnl_vectorPython.vnl_vectorUC_set_size(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_vectorPython.vnl_vectorUC_clear(self)

    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vectorUC_read_ascii(self, *args)

    def read(*args):
        """read(istream s) -> vnl_vectorUC"""
        return _vnl_vectorPython.vnl_vectorUC_read(*args)

    read = staticmethod(read)
vnl_vectorUC.size = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_size,None,vnl_vectorUC)
vnl_vectorUC.put = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_put,None,vnl_vectorUC)
vnl_vectorUC.get = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_get,None,vnl_vectorUC)
vnl_vectorUC.fill = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_fill,None,vnl_vectorUC)
vnl_vectorUC.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_copy_in,None,vnl_vectorUC)
vnl_vectorUC.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_copy_out,None,vnl_vectorUC)
vnl_vectorUC.set = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_set,None,vnl_vectorUC)
vnl_vectorUC.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___call__,None,vnl_vectorUC)
vnl_vectorUC.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___idiv__,None,vnl_vectorUC)
vnl_vectorUC.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___iadd__,None,vnl_vectorUC)
vnl_vectorUC.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___isub__,None,vnl_vectorUC)
vnl_vectorUC.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_pre_multiply,None,vnl_vectorUC)
vnl_vectorUC.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_post_multiply,None,vnl_vectorUC)
vnl_vectorUC.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___imul__,None,vnl_vectorUC)
vnl_vectorUC.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___pos__,None,vnl_vectorUC)
vnl_vectorUC.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___neg__,None,vnl_vectorUC)
vnl_vectorUC.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___div__,None,vnl_vectorUC)
vnl_vectorUC.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___add__,None,vnl_vectorUC)
vnl_vectorUC.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___sub__,None,vnl_vectorUC)
vnl_vectorUC.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___mul__,None,vnl_vectorUC)
vnl_vectorUC.data_block = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_data_block,None,vnl_vectorUC)
vnl_vectorUC.begin = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_begin,None,vnl_vectorUC)
vnl_vectorUC.end = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_end,None,vnl_vectorUC)
vnl_vectorUC.extract = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_extract,None,vnl_vectorUC)
vnl_vectorUC.update = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_update,None,vnl_vectorUC)
vnl_vectorUC.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_squared_magnitude,None,vnl_vectorUC)
vnl_vectorUC.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_magnitude,None,vnl_vectorUC)
vnl_vectorUC.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_one_norm,None,vnl_vectorUC)
vnl_vectorUC.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_two_norm,None,vnl_vectorUC)
vnl_vectorUC.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_inf_norm,None,vnl_vectorUC)
vnl_vectorUC.normalize = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_normalize,None,vnl_vectorUC)
vnl_vectorUC.rms = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_rms,None,vnl_vectorUC)
vnl_vectorUC.min_value = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_min_value,None,vnl_vectorUC)
vnl_vectorUC.max_value = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_max_value,None,vnl_vectorUC)
vnl_vectorUC.mean = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_mean,None,vnl_vectorUC)
vnl_vectorUC.sum = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_sum,None,vnl_vectorUC)
vnl_vectorUC.flip = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_flip,None,vnl_vectorUC)
vnl_vectorUC.swap = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_swap,None,vnl_vectorUC)
vnl_vectorUC.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_assert_size,None,vnl_vectorUC)
vnl_vectorUC.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_assert_finite,None,vnl_vectorUC)
vnl_vectorUC.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_is_finite,None,vnl_vectorUC)
vnl_vectorUC.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_is_zero,None,vnl_vectorUC)
vnl_vectorUC.empty = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_empty,None,vnl_vectorUC)
vnl_vectorUC.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_operator_eq,None,vnl_vectorUC)
vnl_vectorUC.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___eq__,None,vnl_vectorUC)
vnl_vectorUC.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUC___ne__,None,vnl_vectorUC)
vnl_vectorUC.set_size = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_set_size,None,vnl_vectorUC)
vnl_vectorUC.clear = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_clear,None,vnl_vectorUC)
vnl_vectorUC.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vectorUC_read_ascii,None,vnl_vectorUC)
vnl_vectorUC_swigregister = _vnl_vectorPython.vnl_vectorUC_swigregister
vnl_vectorUC_swigregister(vnl_vectorUC)

def vnl_vectorUC_read(*args):
  """vnl_vectorUC_read(istream s) -> vnl_vectorUC"""
  return _vnl_vectorPython.vnl_vectorUC_read(*args)

class vnl_vectorUI(object):
    """Proxy of C++ vnl_vectorUI class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_vectorUI
        __init__(self, unsigned int len) -> vnl_vectorUI
        __init__(self, unsigned int len, unsigned int v0) -> vnl_vectorUI
        __init__(self, unsigned int len, int n, unsigned int values) -> vnl_vectorUI
        __init__(self, unsigned int data_block, unsigned int n) -> vnl_vectorUI
        __init__(self, vnl_vectorUI arg0) -> vnl_vectorUI
        __init__(self, vnl_vectorUI arg0, vnl_vectorUI arg1, vnl_tag_add arg2) -> vnl_vectorUI
        __init__(self, vnl_vectorUI arg0, vnl_vectorUI arg1, vnl_tag_sub arg2) -> vnl_vectorUI
        __init__(self, vnl_vectorUI arg0, unsigned int arg1, vnl_tag_mul arg2) -> vnl_vectorUI
        __init__(self, vnl_vectorUI arg0, unsigned int arg1, vnl_tag_div arg2) -> vnl_vectorUI
        __init__(self, vnl_vectorUI arg0, unsigned int arg1, vnl_tag_add arg2) -> vnl_vectorUI
        __init__(self, vnl_vectorUI arg0, unsigned int arg1, vnl_tag_sub arg2) -> vnl_vectorUI
        __init__(self, vnl_matrixUI arg0, vnl_vectorUI arg1, vnl_tag_mul arg2) -> vnl_vectorUI
        __init__(self, vnl_vectorUI arg0, vnl_matrixUI arg1, vnl_tag_mul arg2) -> vnl_vectorUI
        __init__(self, vnl_vectorUI that, vnl_tag_grab arg1) -> vnl_vectorUI
        """
        _vnl_vectorPython.vnl_vectorUI_swiginit(self,_vnl_vectorPython.new_vnl_vectorUI(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vectorUI
    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUI_size(self)

    def put(self, *args):
        """put(self, unsigned int index, unsigned int value)"""
        return _vnl_vectorPython.vnl_vectorUI_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int index) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUI_get(self, *args)

    def fill(self, *args):
        """fill(self, unsigned int v)"""
        return _vnl_vectorPython.vnl_vectorUI_fill(self, *args)

    def copy_in(self, *args):
        """copy_in(self, unsigned int ptr)"""
        return _vnl_vectorPython.vnl_vectorUI_copy_in(self, *args)

    def copy_out(self, *args):
        """copy_out(self, unsigned int arg0)"""
        return _vnl_vectorPython.vnl_vectorUI_copy_out(self, *args)

    def set(self, *args):
        """set(self, unsigned int ptr)"""
        return _vnl_vectorPython.vnl_vectorUI_set(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int i) -> unsigned int
        __call__(self, unsigned int i) -> unsigned int
        """
        return _vnl_vectorPython.vnl_vectorUI___call__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, unsigned int arg0) -> vnl_vectorUI"""
        return _vnl_vectorPython.vnl_vectorUI___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, unsigned int arg0) -> vnl_vectorUI
        __iadd__(self, vnl_vectorUI rhs) -> vnl_vectorUI
        """
        return _vnl_vectorPython.vnl_vectorUI___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, unsigned int value) -> vnl_vectorUI
        __isub__(self, vnl_vectorUI rhs) -> vnl_vectorUI
        """
        return _vnl_vectorPython.vnl_vectorUI___isub__(self, *args)

    def pre_multiply(self, *args):
        """pre_multiply(self, vnl_matrixUI M) -> vnl_vectorUI"""
        return _vnl_vectorPython.vnl_vectorUI_pre_multiply(self, *args)

    def post_multiply(self, *args):
        """post_multiply(self, vnl_matrixUI M) -> vnl_vectorUI"""
        return _vnl_vectorPython.vnl_vectorUI_post_multiply(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, unsigned int arg0) -> vnl_vectorUI
        __imul__(self, vnl_matrixUI m) -> vnl_vectorUI
        """
        return _vnl_vectorPython.vnl_vectorUI___imul__(self, *args)

    def __pos__(self):
        """__pos__(self) -> vnl_vectorUI"""
        return _vnl_vectorPython.vnl_vectorUI___pos__(self)

    def __neg__(self):
        """__neg__(self) -> vnl_vectorUI"""
        return _vnl_vectorPython.vnl_vectorUI___neg__(self)

    def __div__(self, *args):
        """__div__(self, unsigned int v) -> vnl_vectorUI"""
        return _vnl_vectorPython.vnl_vectorUI___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, unsigned int v) -> vnl_vectorUI
        __add__(self, vnl_vectorUI v) -> vnl_vectorUI
        """
        return _vnl_vectorPython.vnl_vectorUI___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, unsigned int v) -> vnl_vectorUI
        __sub__(self, vnl_vectorUI v) -> vnl_vectorUI
        """
        return _vnl_vectorPython.vnl_vectorUI___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, unsigned int v) -> vnl_vectorUI
        __mul__(self, vnl_matrixUI M) -> vnl_vectorUI
        """
        return _vnl_vectorPython.vnl_vectorUI___mul__(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> unsigned int
        data_block(self) -> unsigned int
        """
        return _vnl_vectorPython.vnl_vectorUI_data_block(self, *args)

    def begin(self, *args):
        """
        begin(self) -> unsigned int
        begin(self) -> unsigned int
        """
        return _vnl_vectorPython.vnl_vectorUI_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> unsigned int
        end(self) -> unsigned int
        """
        return _vnl_vectorPython.vnl_vectorUI_end(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int len, unsigned int start = 0) -> vnl_vectorUI
        extract(self, unsigned int len) -> vnl_vectorUI
        """
        return _vnl_vectorPython.vnl_vectorUI_extract(self, *args)

    def update(self, *args):
        """
        update(self, vnl_vectorUI arg0, unsigned int start = 0) -> vnl_vectorUI
        update(self, vnl_vectorUI arg0) -> vnl_vectorUI
        """
        return _vnl_vectorPython.vnl_vectorUI_update(self, *args)

    def squared_magnitude(self):
        """squared_magnitude(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUI_squared_magnitude(self)

    def magnitude(self):
        """magnitude(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUI_magnitude(self)

    def one_norm(self):
        """one_norm(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUI_one_norm(self)

    def two_norm(self):
        """two_norm(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUI_two_norm(self)

    def inf_norm(self):
        """inf_norm(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUI_inf_norm(self)

    def normalize(self):
        """normalize(self) -> vnl_vectorUI"""
        return _vnl_vectorPython.vnl_vectorUI_normalize(self)

    def rms(self):
        """rms(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUI_rms(self)

    def min_value(self):
        """min_value(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUI_min_value(self)

    def max_value(self):
        """max_value(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUI_max_value(self)

    def mean(self):
        """mean(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUI_mean(self)

    def sum(self):
        """sum(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUI_sum(self)

    def flip(self):
        """flip(self)"""
        return _vnl_vectorPython.vnl_vectorUI_flip(self)

    def swap(self, *args):
        """swap(self, vnl_vectorUI that)"""
        return _vnl_vectorPython.vnl_vectorUI_swap(self, *args)

    def assert_size(self, *args):
        """assert_size(self, unsigned int sz)"""
        return _vnl_vectorPython.vnl_vectorUI_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_vectorPython.vnl_vectorUI_assert_finite(self)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorUI_is_finite(self)

    def is_zero(self):
        """is_zero(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorUI_is_zero(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorUI_empty(self)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_vectorUI v) -> bool"""
        return _vnl_vectorPython.vnl_vectorUI_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_vectorUI that) -> bool"""
        return _vnl_vectorPython.vnl_vectorUI___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_vectorUI that) -> bool"""
        return _vnl_vectorPython.vnl_vectorUI___ne__(self, *args)

    def set_size(self, *args):
        """set_size(self, unsigned int n) -> bool"""
        return _vnl_vectorPython.vnl_vectorUI_set_size(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_vectorPython.vnl_vectorUI_clear(self)

    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vectorUI_read_ascii(self, *args)

    def read(*args):
        """read(istream s) -> vnl_vectorUI"""
        return _vnl_vectorPython.vnl_vectorUI_read(*args)

    read = staticmethod(read)
vnl_vectorUI.size = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_size,None,vnl_vectorUI)
vnl_vectorUI.put = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_put,None,vnl_vectorUI)
vnl_vectorUI.get = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_get,None,vnl_vectorUI)
vnl_vectorUI.fill = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_fill,None,vnl_vectorUI)
vnl_vectorUI.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_copy_in,None,vnl_vectorUI)
vnl_vectorUI.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_copy_out,None,vnl_vectorUI)
vnl_vectorUI.set = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_set,None,vnl_vectorUI)
vnl_vectorUI.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___call__,None,vnl_vectorUI)
vnl_vectorUI.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___idiv__,None,vnl_vectorUI)
vnl_vectorUI.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___iadd__,None,vnl_vectorUI)
vnl_vectorUI.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___isub__,None,vnl_vectorUI)
vnl_vectorUI.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_pre_multiply,None,vnl_vectorUI)
vnl_vectorUI.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_post_multiply,None,vnl_vectorUI)
vnl_vectorUI.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___imul__,None,vnl_vectorUI)
vnl_vectorUI.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___pos__,None,vnl_vectorUI)
vnl_vectorUI.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___neg__,None,vnl_vectorUI)
vnl_vectorUI.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___div__,None,vnl_vectorUI)
vnl_vectorUI.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___add__,None,vnl_vectorUI)
vnl_vectorUI.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___sub__,None,vnl_vectorUI)
vnl_vectorUI.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___mul__,None,vnl_vectorUI)
vnl_vectorUI.data_block = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_data_block,None,vnl_vectorUI)
vnl_vectorUI.begin = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_begin,None,vnl_vectorUI)
vnl_vectorUI.end = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_end,None,vnl_vectorUI)
vnl_vectorUI.extract = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_extract,None,vnl_vectorUI)
vnl_vectorUI.update = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_update,None,vnl_vectorUI)
vnl_vectorUI.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_squared_magnitude,None,vnl_vectorUI)
vnl_vectorUI.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_magnitude,None,vnl_vectorUI)
vnl_vectorUI.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_one_norm,None,vnl_vectorUI)
vnl_vectorUI.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_two_norm,None,vnl_vectorUI)
vnl_vectorUI.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_inf_norm,None,vnl_vectorUI)
vnl_vectorUI.normalize = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_normalize,None,vnl_vectorUI)
vnl_vectorUI.rms = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_rms,None,vnl_vectorUI)
vnl_vectorUI.min_value = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_min_value,None,vnl_vectorUI)
vnl_vectorUI.max_value = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_max_value,None,vnl_vectorUI)
vnl_vectorUI.mean = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_mean,None,vnl_vectorUI)
vnl_vectorUI.sum = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_sum,None,vnl_vectorUI)
vnl_vectorUI.flip = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_flip,None,vnl_vectorUI)
vnl_vectorUI.swap = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_swap,None,vnl_vectorUI)
vnl_vectorUI.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_assert_size,None,vnl_vectorUI)
vnl_vectorUI.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_assert_finite,None,vnl_vectorUI)
vnl_vectorUI.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_is_finite,None,vnl_vectorUI)
vnl_vectorUI.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_is_zero,None,vnl_vectorUI)
vnl_vectorUI.empty = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_empty,None,vnl_vectorUI)
vnl_vectorUI.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_operator_eq,None,vnl_vectorUI)
vnl_vectorUI.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___eq__,None,vnl_vectorUI)
vnl_vectorUI.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUI___ne__,None,vnl_vectorUI)
vnl_vectorUI.set_size = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_set_size,None,vnl_vectorUI)
vnl_vectorUI.clear = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_clear,None,vnl_vectorUI)
vnl_vectorUI.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vectorUI_read_ascii,None,vnl_vectorUI)
vnl_vectorUI_swigregister = _vnl_vectorPython.vnl_vectorUI_swigregister
vnl_vectorUI_swigregister(vnl_vectorUI)

def vnl_vectorUI_read(*args):
  """vnl_vectorUI_read(istream s) -> vnl_vectorUI"""
  return _vnl_vectorPython.vnl_vectorUI_read(*args)

class vnl_vectorUL(object):
    """Proxy of C++ vnl_vectorUL class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_vectorUL
        __init__(self, unsigned int len) -> vnl_vectorUL
        __init__(self, unsigned int len, unsigned long v0) -> vnl_vectorUL
        __init__(self, unsigned int len, int n, unsigned long values) -> vnl_vectorUL
        __init__(self, unsigned long data_block, unsigned int n) -> vnl_vectorUL
        __init__(self, vnl_vectorUL arg0) -> vnl_vectorUL
        __init__(self, vnl_vectorUL arg0, vnl_vectorUL arg1, vnl_tag_add arg2) -> vnl_vectorUL
        __init__(self, vnl_vectorUL arg0, vnl_vectorUL arg1, vnl_tag_sub arg2) -> vnl_vectorUL
        __init__(self, vnl_vectorUL arg0, unsigned long arg1, vnl_tag_mul arg2) -> vnl_vectorUL
        __init__(self, vnl_vectorUL arg0, unsigned long arg1, vnl_tag_div arg2) -> vnl_vectorUL
        __init__(self, vnl_vectorUL arg0, unsigned long arg1, vnl_tag_add arg2) -> vnl_vectorUL
        __init__(self, vnl_vectorUL arg0, unsigned long arg1, vnl_tag_sub arg2) -> vnl_vectorUL
        __init__(self, vnl_matrixUL arg0, vnl_vectorUL arg1, vnl_tag_mul arg2) -> vnl_vectorUL
        __init__(self, vnl_vectorUL arg0, vnl_matrixUL arg1, vnl_tag_mul arg2) -> vnl_vectorUL
        __init__(self, vnl_vectorUL that, vnl_tag_grab arg1) -> vnl_vectorUL
        """
        _vnl_vectorPython.vnl_vectorUL_swiginit(self,_vnl_vectorPython.new_vnl_vectorUL(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vectorUL
    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUL_size(self)

    def put(self, *args):
        """put(self, unsigned int index, unsigned long value)"""
        return _vnl_vectorPython.vnl_vectorUL_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int index) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorUL_get(self, *args)

    def fill(self, *args):
        """fill(self, unsigned long v)"""
        return _vnl_vectorPython.vnl_vectorUL_fill(self, *args)

    def copy_in(self, *args):
        """copy_in(self, unsigned long ptr)"""
        return _vnl_vectorPython.vnl_vectorUL_copy_in(self, *args)

    def copy_out(self, *args):
        """copy_out(self, unsigned long arg0)"""
        return _vnl_vectorPython.vnl_vectorUL_copy_out(self, *args)

    def set(self, *args):
        """set(self, unsigned long ptr)"""
        return _vnl_vectorPython.vnl_vectorUL_set(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int i) -> unsigned long
        __call__(self, unsigned int i) -> unsigned long
        """
        return _vnl_vectorPython.vnl_vectorUL___call__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, unsigned long arg0) -> vnl_vectorUL"""
        return _vnl_vectorPython.vnl_vectorUL___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, unsigned long arg0) -> vnl_vectorUL
        __iadd__(self, vnl_vectorUL rhs) -> vnl_vectorUL
        """
        return _vnl_vectorPython.vnl_vectorUL___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, unsigned long value) -> vnl_vectorUL
        __isub__(self, vnl_vectorUL rhs) -> vnl_vectorUL
        """
        return _vnl_vectorPython.vnl_vectorUL___isub__(self, *args)

    def pre_multiply(self, *args):
        """pre_multiply(self, vnl_matrixUL M) -> vnl_vectorUL"""
        return _vnl_vectorPython.vnl_vectorUL_pre_multiply(self, *args)

    def post_multiply(self, *args):
        """post_multiply(self, vnl_matrixUL M) -> vnl_vectorUL"""
        return _vnl_vectorPython.vnl_vectorUL_post_multiply(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, unsigned long arg0) -> vnl_vectorUL
        __imul__(self, vnl_matrixUL m) -> vnl_vectorUL
        """
        return _vnl_vectorPython.vnl_vectorUL___imul__(self, *args)

    def __pos__(self):
        """__pos__(self) -> vnl_vectorUL"""
        return _vnl_vectorPython.vnl_vectorUL___pos__(self)

    def __neg__(self):
        """__neg__(self) -> vnl_vectorUL"""
        return _vnl_vectorPython.vnl_vectorUL___neg__(self)

    def __div__(self, *args):
        """__div__(self, unsigned long v) -> vnl_vectorUL"""
        return _vnl_vectorPython.vnl_vectorUL___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, unsigned long v) -> vnl_vectorUL
        __add__(self, vnl_vectorUL v) -> vnl_vectorUL
        """
        return _vnl_vectorPython.vnl_vectorUL___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, unsigned long v) -> vnl_vectorUL
        __sub__(self, vnl_vectorUL v) -> vnl_vectorUL
        """
        return _vnl_vectorPython.vnl_vectorUL___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, unsigned long v) -> vnl_vectorUL
        __mul__(self, vnl_matrixUL M) -> vnl_vectorUL
        """
        return _vnl_vectorPython.vnl_vectorUL___mul__(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> unsigned long
        data_block(self) -> unsigned long
        """
        return _vnl_vectorPython.vnl_vectorUL_data_block(self, *args)

    def begin(self, *args):
        """
        begin(self) -> unsigned long
        begin(self) -> unsigned long
        """
        return _vnl_vectorPython.vnl_vectorUL_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> unsigned long
        end(self) -> unsigned long
        """
        return _vnl_vectorPython.vnl_vectorUL_end(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int len, unsigned int start = 0) -> vnl_vectorUL
        extract(self, unsigned int len) -> vnl_vectorUL
        """
        return _vnl_vectorPython.vnl_vectorUL_extract(self, *args)

    def update(self, *args):
        """
        update(self, vnl_vectorUL arg0, unsigned int start = 0) -> vnl_vectorUL
        update(self, vnl_vectorUL arg0) -> vnl_vectorUL
        """
        return _vnl_vectorPython.vnl_vectorUL_update(self, *args)

    def squared_magnitude(self):
        """squared_magnitude(self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorUL_squared_magnitude(self)

    def magnitude(self):
        """magnitude(self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorUL_magnitude(self)

    def one_norm(self):
        """one_norm(self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorUL_one_norm(self)

    def two_norm(self):
        """two_norm(self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorUL_two_norm(self)

    def inf_norm(self):
        """inf_norm(self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorUL_inf_norm(self)

    def normalize(self):
        """normalize(self) -> vnl_vectorUL"""
        return _vnl_vectorPython.vnl_vectorUL_normalize(self)

    def rms(self):
        """rms(self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorUL_rms(self)

    def min_value(self):
        """min_value(self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorUL_min_value(self)

    def max_value(self):
        """max_value(self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorUL_max_value(self)

    def mean(self):
        """mean(self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorUL_mean(self)

    def sum(self):
        """sum(self) -> unsigned long"""
        return _vnl_vectorPython.vnl_vectorUL_sum(self)

    def flip(self):
        """flip(self)"""
        return _vnl_vectorPython.vnl_vectorUL_flip(self)

    def swap(self, *args):
        """swap(self, vnl_vectorUL that)"""
        return _vnl_vectorPython.vnl_vectorUL_swap(self, *args)

    def assert_size(self, *args):
        """assert_size(self, unsigned int sz)"""
        return _vnl_vectorPython.vnl_vectorUL_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_vectorPython.vnl_vectorUL_assert_finite(self)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorUL_is_finite(self)

    def is_zero(self):
        """is_zero(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorUL_is_zero(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorUL_empty(self)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_vectorUL v) -> bool"""
        return _vnl_vectorPython.vnl_vectorUL_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_vectorUL that) -> bool"""
        return _vnl_vectorPython.vnl_vectorUL___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_vectorUL that) -> bool"""
        return _vnl_vectorPython.vnl_vectorUL___ne__(self, *args)

    def set_size(self, *args):
        """set_size(self, unsigned int n) -> bool"""
        return _vnl_vectorPython.vnl_vectorUL_set_size(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_vectorPython.vnl_vectorUL_clear(self)

    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vectorUL_read_ascii(self, *args)

    def read(*args):
        """read(istream s) -> vnl_vectorUL"""
        return _vnl_vectorPython.vnl_vectorUL_read(*args)

    read = staticmethod(read)
vnl_vectorUL.size = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_size,None,vnl_vectorUL)
vnl_vectorUL.put = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_put,None,vnl_vectorUL)
vnl_vectorUL.get = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_get,None,vnl_vectorUL)
vnl_vectorUL.fill = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_fill,None,vnl_vectorUL)
vnl_vectorUL.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_copy_in,None,vnl_vectorUL)
vnl_vectorUL.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_copy_out,None,vnl_vectorUL)
vnl_vectorUL.set = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_set,None,vnl_vectorUL)
vnl_vectorUL.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___call__,None,vnl_vectorUL)
vnl_vectorUL.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___idiv__,None,vnl_vectorUL)
vnl_vectorUL.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___iadd__,None,vnl_vectorUL)
vnl_vectorUL.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___isub__,None,vnl_vectorUL)
vnl_vectorUL.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_pre_multiply,None,vnl_vectorUL)
vnl_vectorUL.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_post_multiply,None,vnl_vectorUL)
vnl_vectorUL.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___imul__,None,vnl_vectorUL)
vnl_vectorUL.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___pos__,None,vnl_vectorUL)
vnl_vectorUL.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___neg__,None,vnl_vectorUL)
vnl_vectorUL.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___div__,None,vnl_vectorUL)
vnl_vectorUL.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___add__,None,vnl_vectorUL)
vnl_vectorUL.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___sub__,None,vnl_vectorUL)
vnl_vectorUL.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___mul__,None,vnl_vectorUL)
vnl_vectorUL.data_block = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_data_block,None,vnl_vectorUL)
vnl_vectorUL.begin = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_begin,None,vnl_vectorUL)
vnl_vectorUL.end = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_end,None,vnl_vectorUL)
vnl_vectorUL.extract = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_extract,None,vnl_vectorUL)
vnl_vectorUL.update = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_update,None,vnl_vectorUL)
vnl_vectorUL.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_squared_magnitude,None,vnl_vectorUL)
vnl_vectorUL.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_magnitude,None,vnl_vectorUL)
vnl_vectorUL.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_one_norm,None,vnl_vectorUL)
vnl_vectorUL.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_two_norm,None,vnl_vectorUL)
vnl_vectorUL.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_inf_norm,None,vnl_vectorUL)
vnl_vectorUL.normalize = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_normalize,None,vnl_vectorUL)
vnl_vectorUL.rms = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_rms,None,vnl_vectorUL)
vnl_vectorUL.min_value = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_min_value,None,vnl_vectorUL)
vnl_vectorUL.max_value = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_max_value,None,vnl_vectorUL)
vnl_vectorUL.mean = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_mean,None,vnl_vectorUL)
vnl_vectorUL.sum = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_sum,None,vnl_vectorUL)
vnl_vectorUL.flip = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_flip,None,vnl_vectorUL)
vnl_vectorUL.swap = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_swap,None,vnl_vectorUL)
vnl_vectorUL.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_assert_size,None,vnl_vectorUL)
vnl_vectorUL.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_assert_finite,None,vnl_vectorUL)
vnl_vectorUL.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_is_finite,None,vnl_vectorUL)
vnl_vectorUL.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_is_zero,None,vnl_vectorUL)
vnl_vectorUL.empty = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_empty,None,vnl_vectorUL)
vnl_vectorUL.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_operator_eq,None,vnl_vectorUL)
vnl_vectorUL.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___eq__,None,vnl_vectorUL)
vnl_vectorUL.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUL___ne__,None,vnl_vectorUL)
vnl_vectorUL.set_size = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_set_size,None,vnl_vectorUL)
vnl_vectorUL.clear = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_clear,None,vnl_vectorUL)
vnl_vectorUL.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vectorUL_read_ascii,None,vnl_vectorUL)
vnl_vectorUL_swigregister = _vnl_vectorPython.vnl_vectorUL_swigregister
vnl_vectorUL_swigregister(vnl_vectorUL)

def vnl_vectorUL_read(*args):
  """vnl_vectorUL_read(istream s) -> vnl_vectorUL"""
  return _vnl_vectorPython.vnl_vectorUL_read(*args)

class vnl_vectorUS(object):
    """Proxy of C++ vnl_vectorUS class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_vectorUS
        __init__(self, unsigned int len) -> vnl_vectorUS
        __init__(self, unsigned int len, unsigned short v0) -> vnl_vectorUS
        __init__(self, unsigned int len, int n, unsigned short values) -> vnl_vectorUS
        __init__(self, unsigned short data_block, unsigned int n) -> vnl_vectorUS
        __init__(self, vnl_vectorUS arg0) -> vnl_vectorUS
        __init__(self, vnl_vectorUS arg0, vnl_vectorUS arg1, vnl_tag_add arg2) -> vnl_vectorUS
        __init__(self, vnl_vectorUS arg0, vnl_vectorUS arg1, vnl_tag_sub arg2) -> vnl_vectorUS
        __init__(self, vnl_vectorUS arg0, unsigned short arg1, vnl_tag_mul arg2) -> vnl_vectorUS
        __init__(self, vnl_vectorUS arg0, unsigned short arg1, vnl_tag_div arg2) -> vnl_vectorUS
        __init__(self, vnl_vectorUS arg0, unsigned short arg1, vnl_tag_add arg2) -> vnl_vectorUS
        __init__(self, vnl_vectorUS arg0, unsigned short arg1, vnl_tag_sub arg2) -> vnl_vectorUS
        __init__(self, vnl_matrix<(unsigned short)> arg0, vnl_vectorUS arg1, 
            vnl_tag_mul arg2) -> vnl_vectorUS
        __init__(self, vnl_vectorUS arg0, vnl_matrix<(unsigned short)> arg1, 
            vnl_tag_mul arg2) -> vnl_vectorUS
        __init__(self, vnl_vectorUS that, vnl_tag_grab arg1) -> vnl_vectorUS
        """
        _vnl_vectorPython.vnl_vectorUS_swiginit(self,_vnl_vectorPython.new_vnl_vectorUS(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vectorUS
    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vectorUS_size(self)

    def put(self, *args):
        """put(self, unsigned int index, unsigned short value)"""
        return _vnl_vectorPython.vnl_vectorUS_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int index) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorUS_get(self, *args)

    def fill(self, *args):
        """fill(self, unsigned short v)"""
        return _vnl_vectorPython.vnl_vectorUS_fill(self, *args)

    def copy_in(self, *args):
        """copy_in(self, unsigned short ptr)"""
        return _vnl_vectorPython.vnl_vectorUS_copy_in(self, *args)

    def copy_out(self, *args):
        """copy_out(self, unsigned short arg0)"""
        return _vnl_vectorPython.vnl_vectorUS_copy_out(self, *args)

    def set(self, *args):
        """set(self, unsigned short ptr)"""
        return _vnl_vectorPython.vnl_vectorUS_set(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int i) -> unsigned short
        __call__(self, unsigned int i) -> unsigned short
        """
        return _vnl_vectorPython.vnl_vectorUS___call__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, unsigned short arg0) -> vnl_vectorUS"""
        return _vnl_vectorPython.vnl_vectorUS___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, unsigned short arg0) -> vnl_vectorUS
        __iadd__(self, vnl_vectorUS rhs) -> vnl_vectorUS
        """
        return _vnl_vectorPython.vnl_vectorUS___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, unsigned short value) -> vnl_vectorUS
        __isub__(self, vnl_vectorUS rhs) -> vnl_vectorUS
        """
        return _vnl_vectorPython.vnl_vectorUS___isub__(self, *args)

    def pre_multiply(self, *args):
        """pre_multiply(self, vnl_matrix<(unsigned short)> M) -> vnl_vectorUS"""
        return _vnl_vectorPython.vnl_vectorUS_pre_multiply(self, *args)

    def post_multiply(self, *args):
        """post_multiply(self, vnl_matrix<(unsigned short)> M) -> vnl_vectorUS"""
        return _vnl_vectorPython.vnl_vectorUS_post_multiply(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, unsigned short arg0) -> vnl_vectorUS
        __imul__(self, vnl_matrix<(unsigned short)> m) -> vnl_vectorUS
        """
        return _vnl_vectorPython.vnl_vectorUS___imul__(self, *args)

    def __pos__(self):
        """__pos__(self) -> vnl_vectorUS"""
        return _vnl_vectorPython.vnl_vectorUS___pos__(self)

    def __neg__(self):
        """__neg__(self) -> vnl_vectorUS"""
        return _vnl_vectorPython.vnl_vectorUS___neg__(self)

    def __div__(self, *args):
        """__div__(self, unsigned short v) -> vnl_vectorUS"""
        return _vnl_vectorPython.vnl_vectorUS___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, unsigned short v) -> vnl_vectorUS
        __add__(self, vnl_vectorUS v) -> vnl_vectorUS
        """
        return _vnl_vectorPython.vnl_vectorUS___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, unsigned short v) -> vnl_vectorUS
        __sub__(self, vnl_vectorUS v) -> vnl_vectorUS
        """
        return _vnl_vectorPython.vnl_vectorUS___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, unsigned short v) -> vnl_vectorUS
        __mul__(self, vnl_matrix<(unsigned short)> M) -> vnl_vectorUS
        """
        return _vnl_vectorPython.vnl_vectorUS___mul__(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> unsigned short
        data_block(self) -> unsigned short
        """
        return _vnl_vectorPython.vnl_vectorUS_data_block(self, *args)

    def begin(self, *args):
        """
        begin(self) -> unsigned short
        begin(self) -> unsigned short
        """
        return _vnl_vectorPython.vnl_vectorUS_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> unsigned short
        end(self) -> unsigned short
        """
        return _vnl_vectorPython.vnl_vectorUS_end(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int len, unsigned int start = 0) -> vnl_vectorUS
        extract(self, unsigned int len) -> vnl_vectorUS
        """
        return _vnl_vectorPython.vnl_vectorUS_extract(self, *args)

    def update(self, *args):
        """
        update(self, vnl_vectorUS arg0, unsigned int start = 0) -> vnl_vectorUS
        update(self, vnl_vectorUS arg0) -> vnl_vectorUS
        """
        return _vnl_vectorPython.vnl_vectorUS_update(self, *args)

    def squared_magnitude(self):
        """squared_magnitude(self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorUS_squared_magnitude(self)

    def magnitude(self):
        """magnitude(self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorUS_magnitude(self)

    def one_norm(self):
        """one_norm(self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorUS_one_norm(self)

    def two_norm(self):
        """two_norm(self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorUS_two_norm(self)

    def inf_norm(self):
        """inf_norm(self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorUS_inf_norm(self)

    def normalize(self):
        """normalize(self) -> vnl_vectorUS"""
        return _vnl_vectorPython.vnl_vectorUS_normalize(self)

    def rms(self):
        """rms(self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorUS_rms(self)

    def min_value(self):
        """min_value(self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorUS_min_value(self)

    def max_value(self):
        """max_value(self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorUS_max_value(self)

    def mean(self):
        """mean(self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorUS_mean(self)

    def sum(self):
        """sum(self) -> unsigned short"""
        return _vnl_vectorPython.vnl_vectorUS_sum(self)

    def flip(self):
        """flip(self)"""
        return _vnl_vectorPython.vnl_vectorUS_flip(self)

    def swap(self, *args):
        """swap(self, vnl_vectorUS that)"""
        return _vnl_vectorPython.vnl_vectorUS_swap(self, *args)

    def assert_size(self, *args):
        """assert_size(self, unsigned int sz)"""
        return _vnl_vectorPython.vnl_vectorUS_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_vectorPython.vnl_vectorUS_assert_finite(self)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorUS_is_finite(self)

    def is_zero(self):
        """is_zero(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorUS_is_zero(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_vectorPython.vnl_vectorUS_empty(self)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_vectorUS v) -> bool"""
        return _vnl_vectorPython.vnl_vectorUS_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_vectorUS that) -> bool"""
        return _vnl_vectorPython.vnl_vectorUS___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_vectorUS that) -> bool"""
        return _vnl_vectorPython.vnl_vectorUS___ne__(self, *args)

    def set_size(self, *args):
        """set_size(self, unsigned int n) -> bool"""
        return _vnl_vectorPython.vnl_vectorUS_set_size(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_vectorPython.vnl_vectorUS_clear(self)

    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vectorUS_read_ascii(self, *args)

    def read(*args):
        """read(istream s) -> vnl_vectorUS"""
        return _vnl_vectorPython.vnl_vectorUS_read(*args)

    read = staticmethod(read)
vnl_vectorUS.size = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_size,None,vnl_vectorUS)
vnl_vectorUS.put = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_put,None,vnl_vectorUS)
vnl_vectorUS.get = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_get,None,vnl_vectorUS)
vnl_vectorUS.fill = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_fill,None,vnl_vectorUS)
vnl_vectorUS.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_copy_in,None,vnl_vectorUS)
vnl_vectorUS.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_copy_out,None,vnl_vectorUS)
vnl_vectorUS.set = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_set,None,vnl_vectorUS)
vnl_vectorUS.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___call__,None,vnl_vectorUS)
vnl_vectorUS.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___idiv__,None,vnl_vectorUS)
vnl_vectorUS.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___iadd__,None,vnl_vectorUS)
vnl_vectorUS.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___isub__,None,vnl_vectorUS)
vnl_vectorUS.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_pre_multiply,None,vnl_vectorUS)
vnl_vectorUS.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_post_multiply,None,vnl_vectorUS)
vnl_vectorUS.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___imul__,None,vnl_vectorUS)
vnl_vectorUS.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___pos__,None,vnl_vectorUS)
vnl_vectorUS.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___neg__,None,vnl_vectorUS)
vnl_vectorUS.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___div__,None,vnl_vectorUS)
vnl_vectorUS.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___add__,None,vnl_vectorUS)
vnl_vectorUS.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___sub__,None,vnl_vectorUS)
vnl_vectorUS.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___mul__,None,vnl_vectorUS)
vnl_vectorUS.data_block = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_data_block,None,vnl_vectorUS)
vnl_vectorUS.begin = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_begin,None,vnl_vectorUS)
vnl_vectorUS.end = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_end,None,vnl_vectorUS)
vnl_vectorUS.extract = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_extract,None,vnl_vectorUS)
vnl_vectorUS.update = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_update,None,vnl_vectorUS)
vnl_vectorUS.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_squared_magnitude,None,vnl_vectorUS)
vnl_vectorUS.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_magnitude,None,vnl_vectorUS)
vnl_vectorUS.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_one_norm,None,vnl_vectorUS)
vnl_vectorUS.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_two_norm,None,vnl_vectorUS)
vnl_vectorUS.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_inf_norm,None,vnl_vectorUS)
vnl_vectorUS.normalize = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_normalize,None,vnl_vectorUS)
vnl_vectorUS.rms = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_rms,None,vnl_vectorUS)
vnl_vectorUS.min_value = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_min_value,None,vnl_vectorUS)
vnl_vectorUS.max_value = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_max_value,None,vnl_vectorUS)
vnl_vectorUS.mean = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_mean,None,vnl_vectorUS)
vnl_vectorUS.sum = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_sum,None,vnl_vectorUS)
vnl_vectorUS.flip = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_flip,None,vnl_vectorUS)
vnl_vectorUS.swap = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_swap,None,vnl_vectorUS)
vnl_vectorUS.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_assert_size,None,vnl_vectorUS)
vnl_vectorUS.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_assert_finite,None,vnl_vectorUS)
vnl_vectorUS.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_is_finite,None,vnl_vectorUS)
vnl_vectorUS.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_is_zero,None,vnl_vectorUS)
vnl_vectorUS.empty = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_empty,None,vnl_vectorUS)
vnl_vectorUS.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_operator_eq,None,vnl_vectorUS)
vnl_vectorUS.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___eq__,None,vnl_vectorUS)
vnl_vectorUS.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vectorUS___ne__,None,vnl_vectorUS)
vnl_vectorUS.set_size = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_set_size,None,vnl_vectorUS)
vnl_vectorUS.clear = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_clear,None,vnl_vectorUS)
vnl_vectorUS.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vectorUS_read_ascii,None,vnl_vectorUS)
vnl_vectorUS_swigregister = _vnl_vectorPython.vnl_vectorUS_swigregister
vnl_vectorUS_swigregister(vnl_vectorUS)

def vnl_vectorUS_read(*args):
  """vnl_vectorUS_read(istream s) -> vnl_vectorUS"""
  return _vnl_vectorPython.vnl_vectorUS_read(*args)

class vnl_vector_vcl_complexD(object):
    """Proxy of C++ vnl_vector_vcl_complexD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_vector_vcl_complexD
        __init__(self, unsigned int len) -> vnl_vector_vcl_complexD
        __init__(self, unsigned int len, vcl_complexD v0) -> vnl_vector_vcl_complexD
        __init__(self, unsigned int len, int n, vcl_complexD values) -> vnl_vector_vcl_complexD
        __init__(self, vcl_complexD data_block, unsigned int n) -> vnl_vector_vcl_complexD
        __init__(self, vnl_vector_vcl_complexD arg0) -> vnl_vector_vcl_complexD
        __init__(self, vnl_vector_vcl_complexD arg0, vnl_vector_vcl_complexD arg1, 
            vnl_tag_add arg2) -> vnl_vector_vcl_complexD
        __init__(self, vnl_vector_vcl_complexD arg0, vnl_vector_vcl_complexD arg1, 
            vnl_tag_sub arg2) -> vnl_vector_vcl_complexD
        __init__(self, vnl_vector_vcl_complexD arg0, vcl_complexD arg1, vnl_tag_mul arg2) -> vnl_vector_vcl_complexD
        __init__(self, vnl_vector_vcl_complexD arg0, vcl_complexD arg1, vnl_tag_div arg2) -> vnl_vector_vcl_complexD
        __init__(self, vnl_vector_vcl_complexD arg0, vcl_complexD arg1, vnl_tag_add arg2) -> vnl_vector_vcl_complexD
        __init__(self, vnl_vector_vcl_complexD arg0, vcl_complexD arg1, vnl_tag_sub arg2) -> vnl_vector_vcl_complexD
        __init__(self, vnl_matrix_vcl_complexD arg0, vnl_vector_vcl_complexD arg1, 
            vnl_tag_mul arg2) -> vnl_vector_vcl_complexD
        __init__(self, vnl_vector_vcl_complexD arg0, vnl_matrix_vcl_complexD arg1, 
            vnl_tag_mul arg2) -> vnl_vector_vcl_complexD
        __init__(self, vnl_vector_vcl_complexD that, vnl_tag_grab arg1) -> vnl_vector_vcl_complexD
        """
        _vnl_vectorPython.vnl_vector_vcl_complexD_swiginit(self,_vnl_vectorPython.new_vnl_vector_vcl_complexD(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vector_vcl_complexD
    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_size(self)

    def put(self, *args):
        """put(self, unsigned int index, vcl_complexD value)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int index) -> vcl_complexD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_get(self, *args)

    def fill(self, *args):
        """fill(self, vcl_complexD v)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_fill(self, *args)

    def copy_in(self, *args):
        """copy_in(self, vcl_complexD ptr)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_copy_in(self, *args)

    def copy_out(self, *args):
        """copy_out(self, vcl_complexD arg0)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_copy_out(self, *args)

    def set(self, *args):
        """set(self, vcl_complexD ptr)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_set(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int i) -> vcl_complexD
        __call__(self, unsigned int i) -> vcl_complexD
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexD___call__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, vcl_complexD arg0) -> vnl_vector_vcl_complexD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, vcl_complexD arg0) -> vnl_vector_vcl_complexD
        __iadd__(self, vnl_vector_vcl_complexD rhs) -> vnl_vector_vcl_complexD
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexD___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, vcl_complexD value) -> vnl_vector_vcl_complexD
        __isub__(self, vnl_vector_vcl_complexD rhs) -> vnl_vector_vcl_complexD
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexD___isub__(self, *args)

    def pre_multiply(self, *args):
        """pre_multiply(self, vnl_matrix_vcl_complexD M) -> vnl_vector_vcl_complexD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_pre_multiply(self, *args)

    def post_multiply(self, *args):
        """post_multiply(self, vnl_matrix_vcl_complexD M) -> vnl_vector_vcl_complexD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_post_multiply(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, vcl_complexD arg0) -> vnl_vector_vcl_complexD
        __imul__(self, vnl_matrix_vcl_complexD m) -> vnl_vector_vcl_complexD
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexD___imul__(self, *args)

    def __pos__(self):
        """__pos__(self) -> vnl_vector_vcl_complexD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD___pos__(self)

    def __neg__(self):
        """__neg__(self) -> vnl_vector_vcl_complexD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD___neg__(self)

    def __div__(self, *args):
        """__div__(self, vcl_complexD v) -> vnl_vector_vcl_complexD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, vcl_complexD v) -> vnl_vector_vcl_complexD
        __add__(self, vnl_vector_vcl_complexD v) -> vnl_vector_vcl_complexD
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexD___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, vcl_complexD v) -> vnl_vector_vcl_complexD
        __sub__(self, vnl_vector_vcl_complexD v) -> vnl_vector_vcl_complexD
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexD___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, vcl_complexD v) -> vnl_vector_vcl_complexD
        __mul__(self, vnl_matrix_vcl_complexD M) -> vnl_vector_vcl_complexD
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexD___mul__(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> vcl_complexD
        data_block(self) -> vcl_complexD
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexD_data_block(self, *args)

    def begin(self, *args):
        """
        begin(self) -> vcl_complexD
        begin(self) -> vcl_complexD
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexD_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> vcl_complexD
        end(self) -> vcl_complexD
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexD_end(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int len, unsigned int start = 0) -> vnl_vector_vcl_complexD
        extract(self, unsigned int len) -> vnl_vector_vcl_complexD
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexD_extract(self, *args)

    def update(self, *args):
        """
        update(self, vnl_vector_vcl_complexD arg0, unsigned int start = 0) -> vnl_vector_vcl_complexD
        update(self, vnl_vector_vcl_complexD arg0) -> vnl_vector_vcl_complexD
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexD_update(self, *args)

    def squared_magnitude(self):
        """squared_magnitude(self) -> double"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_squared_magnitude(self)

    def magnitude(self):
        """magnitude(self) -> double"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_magnitude(self)

    def one_norm(self):
        """one_norm(self) -> double"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_one_norm(self)

    def two_norm(self):
        """two_norm(self) -> double"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_two_norm(self)

    def inf_norm(self):
        """inf_norm(self) -> double"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_inf_norm(self)

    def normalize(self):
        """normalize(self) -> vnl_vector_vcl_complexD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_normalize(self)

    def rms(self):
        """rms(self) -> double"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_rms(self)

    def min_value(self):
        """min_value(self) -> vcl_complexD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_min_value(self)

    def max_value(self):
        """max_value(self) -> vcl_complexD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_max_value(self)

    def mean(self):
        """mean(self) -> vcl_complexD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_mean(self)

    def sum(self):
        """sum(self) -> vcl_complexD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_sum(self)

    def flip(self):
        """flip(self)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_flip(self)

    def swap(self, *args):
        """swap(self, vnl_vector_vcl_complexD that)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_swap(self, *args)

    def assert_size(self, *args):
        """assert_size(self, unsigned int sz)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_assert_finite(self)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_is_finite(self)

    def is_zero(self):
        """is_zero(self) -> bool"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_is_zero(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_empty(self)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_vector_vcl_complexD v) -> bool"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_vector_vcl_complexD that) -> bool"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_vector_vcl_complexD that) -> bool"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD___ne__(self, *args)

    def set_size(self, *args):
        """set_size(self, unsigned int n) -> bool"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_set_size(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_clear(self)

    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_read_ascii(self, *args)

    def read(*args):
        """read(istream s) -> vnl_vector_vcl_complexD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexD_read(*args)

    read = staticmethod(read)
vnl_vector_vcl_complexD.size = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_size,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.put = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_put,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.get = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_get,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.fill = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_fill,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_copy_in,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_copy_out,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.set = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_set,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD___call__,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD___idiv__,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD___iadd__,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD___isub__,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_pre_multiply,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_post_multiply,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD___imul__,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD___pos__,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD___neg__,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD___div__,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD___add__,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD___sub__,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD___mul__,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.data_block = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_data_block,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.begin = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_begin,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.end = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_end,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.extract = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_extract,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.update = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_update,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_squared_magnitude,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_magnitude,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_one_norm,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_two_norm,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_inf_norm,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.normalize = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_normalize,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.rms = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_rms,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.min_value = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_min_value,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.max_value = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_max_value,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.mean = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_mean,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.sum = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_sum,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.flip = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_flip,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.swap = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_swap,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_assert_size,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_assert_finite,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_is_finite,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_is_zero,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.empty = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_empty,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_operator_eq,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD___eq__,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD___ne__,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.set_size = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_set_size,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.clear = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_clear,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexD_read_ascii,None,vnl_vector_vcl_complexD)
vnl_vector_vcl_complexD_swigregister = _vnl_vectorPython.vnl_vector_vcl_complexD_swigregister
vnl_vector_vcl_complexD_swigregister(vnl_vector_vcl_complexD)

def vnl_vector_vcl_complexD_read(*args):
  """vnl_vector_vcl_complexD_read(istream s) -> vnl_vector_vcl_complexD"""
  return _vnl_vectorPython.vnl_vector_vcl_complexD_read(*args)

class vnl_vector_vcl_complexF(object):
    """Proxy of C++ vnl_vector_vcl_complexF class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_vector_vcl_complexF
        __init__(self, unsigned int len) -> vnl_vector_vcl_complexF
        __init__(self, unsigned int len, vcl_complexF v0) -> vnl_vector_vcl_complexF
        __init__(self, unsigned int len, int n, vcl_complexF values) -> vnl_vector_vcl_complexF
        __init__(self, vcl_complexF data_block, unsigned int n) -> vnl_vector_vcl_complexF
        __init__(self, vnl_vector_vcl_complexF arg0) -> vnl_vector_vcl_complexF
        __init__(self, vnl_vector_vcl_complexF arg0, vnl_vector_vcl_complexF arg1, 
            vnl_tag_add arg2) -> vnl_vector_vcl_complexF
        __init__(self, vnl_vector_vcl_complexF arg0, vnl_vector_vcl_complexF arg1, 
            vnl_tag_sub arg2) -> vnl_vector_vcl_complexF
        __init__(self, vnl_vector_vcl_complexF arg0, vcl_complexF arg1, vnl_tag_mul arg2) -> vnl_vector_vcl_complexF
        __init__(self, vnl_vector_vcl_complexF arg0, vcl_complexF arg1, vnl_tag_div arg2) -> vnl_vector_vcl_complexF
        __init__(self, vnl_vector_vcl_complexF arg0, vcl_complexF arg1, vnl_tag_add arg2) -> vnl_vector_vcl_complexF
        __init__(self, vnl_vector_vcl_complexF arg0, vcl_complexF arg1, vnl_tag_sub arg2) -> vnl_vector_vcl_complexF
        __init__(self, vnl_matrix_vcl_complexF arg0, vnl_vector_vcl_complexF arg1, 
            vnl_tag_mul arg2) -> vnl_vector_vcl_complexF
        __init__(self, vnl_vector_vcl_complexF arg0, vnl_matrix_vcl_complexF arg1, 
            vnl_tag_mul arg2) -> vnl_vector_vcl_complexF
        __init__(self, vnl_vector_vcl_complexF that, vnl_tag_grab arg1) -> vnl_vector_vcl_complexF
        """
        _vnl_vectorPython.vnl_vector_vcl_complexF_swiginit(self,_vnl_vectorPython.new_vnl_vector_vcl_complexF(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vector_vcl_complexF
    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_size(self)

    def put(self, *args):
        """put(self, unsigned int index, vcl_complexF value)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int index) -> vcl_complexF"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_get(self, *args)

    def fill(self, *args):
        """fill(self, vcl_complexF v)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_fill(self, *args)

    def copy_in(self, *args):
        """copy_in(self, vcl_complexF ptr)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_copy_in(self, *args)

    def copy_out(self, *args):
        """copy_out(self, vcl_complexF arg0)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_copy_out(self, *args)

    def set(self, *args):
        """set(self, vcl_complexF ptr)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_set(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int i) -> vcl_complexF
        __call__(self, unsigned int i) -> vcl_complexF
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexF___call__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, vcl_complexF arg0) -> vnl_vector_vcl_complexF"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, vcl_complexF arg0) -> vnl_vector_vcl_complexF
        __iadd__(self, vnl_vector_vcl_complexF rhs) -> vnl_vector_vcl_complexF
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexF___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, vcl_complexF value) -> vnl_vector_vcl_complexF
        __isub__(self, vnl_vector_vcl_complexF rhs) -> vnl_vector_vcl_complexF
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexF___isub__(self, *args)

    def pre_multiply(self, *args):
        """pre_multiply(self, vnl_matrix_vcl_complexF M) -> vnl_vector_vcl_complexF"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_pre_multiply(self, *args)

    def post_multiply(self, *args):
        """post_multiply(self, vnl_matrix_vcl_complexF M) -> vnl_vector_vcl_complexF"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_post_multiply(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, vcl_complexF arg0) -> vnl_vector_vcl_complexF
        __imul__(self, vnl_matrix_vcl_complexF m) -> vnl_vector_vcl_complexF
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexF___imul__(self, *args)

    def __pos__(self):
        """__pos__(self) -> vnl_vector_vcl_complexF"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF___pos__(self)

    def __neg__(self):
        """__neg__(self) -> vnl_vector_vcl_complexF"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF___neg__(self)

    def __div__(self, *args):
        """__div__(self, vcl_complexF v) -> vnl_vector_vcl_complexF"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, vcl_complexF v) -> vnl_vector_vcl_complexF
        __add__(self, vnl_vector_vcl_complexF v) -> vnl_vector_vcl_complexF
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexF___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, vcl_complexF v) -> vnl_vector_vcl_complexF
        __sub__(self, vnl_vector_vcl_complexF v) -> vnl_vector_vcl_complexF
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexF___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, vcl_complexF v) -> vnl_vector_vcl_complexF
        __mul__(self, vnl_matrix_vcl_complexF M) -> vnl_vector_vcl_complexF
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexF___mul__(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> vcl_complexF
        data_block(self) -> vcl_complexF
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexF_data_block(self, *args)

    def begin(self, *args):
        """
        begin(self) -> vcl_complexF
        begin(self) -> vcl_complexF
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexF_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> vcl_complexF
        end(self) -> vcl_complexF
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexF_end(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int len, unsigned int start = 0) -> vnl_vector_vcl_complexF
        extract(self, unsigned int len) -> vnl_vector_vcl_complexF
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexF_extract(self, *args)

    def update(self, *args):
        """
        update(self, vnl_vector_vcl_complexF arg0, unsigned int start = 0) -> vnl_vector_vcl_complexF
        update(self, vnl_vector_vcl_complexF arg0) -> vnl_vector_vcl_complexF
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexF_update(self, *args)

    def squared_magnitude(self):
        """squared_magnitude(self) -> float"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_squared_magnitude(self)

    def magnitude(self):
        """magnitude(self) -> float"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_magnitude(self)

    def one_norm(self):
        """one_norm(self) -> float"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_one_norm(self)

    def two_norm(self):
        """two_norm(self) -> float"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_two_norm(self)

    def inf_norm(self):
        """inf_norm(self) -> float"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_inf_norm(self)

    def normalize(self):
        """normalize(self) -> vnl_vector_vcl_complexF"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_normalize(self)

    def rms(self):
        """rms(self) -> float"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_rms(self)

    def min_value(self):
        """min_value(self) -> vcl_complexF"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_min_value(self)

    def max_value(self):
        """max_value(self) -> vcl_complexF"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_max_value(self)

    def mean(self):
        """mean(self) -> vcl_complexF"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_mean(self)

    def sum(self):
        """sum(self) -> vcl_complexF"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_sum(self)

    def flip(self):
        """flip(self)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_flip(self)

    def swap(self, *args):
        """swap(self, vnl_vector_vcl_complexF that)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_swap(self, *args)

    def assert_size(self, *args):
        """assert_size(self, unsigned int sz)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_assert_finite(self)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_is_finite(self)

    def is_zero(self):
        """is_zero(self) -> bool"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_is_zero(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_empty(self)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_vector_vcl_complexF v) -> bool"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_vector_vcl_complexF that) -> bool"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_vector_vcl_complexF that) -> bool"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF___ne__(self, *args)

    def set_size(self, *args):
        """set_size(self, unsigned int n) -> bool"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_set_size(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_clear(self)

    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_read_ascii(self, *args)

    def read(*args):
        """read(istream s) -> vnl_vector_vcl_complexF"""
        return _vnl_vectorPython.vnl_vector_vcl_complexF_read(*args)

    read = staticmethod(read)
vnl_vector_vcl_complexF.size = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_size,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.put = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_put,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.get = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_get,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.fill = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_fill,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_copy_in,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_copy_out,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.set = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_set,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF___call__,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF___idiv__,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF___iadd__,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF___isub__,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_pre_multiply,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_post_multiply,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF___imul__,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF___pos__,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF___neg__,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF___div__,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF___add__,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF___sub__,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF___mul__,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.data_block = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_data_block,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.begin = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_begin,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.end = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_end,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.extract = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_extract,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.update = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_update,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_squared_magnitude,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_magnitude,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_one_norm,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_two_norm,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_inf_norm,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.normalize = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_normalize,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.rms = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_rms,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.min_value = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_min_value,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.max_value = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_max_value,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.mean = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_mean,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.sum = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_sum,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.flip = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_flip,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.swap = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_swap,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_assert_size,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_assert_finite,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_is_finite,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_is_zero,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.empty = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_empty,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_operator_eq,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF___eq__,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF___ne__,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.set_size = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_set_size,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.clear = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_clear,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexF_read_ascii,None,vnl_vector_vcl_complexF)
vnl_vector_vcl_complexF_swigregister = _vnl_vectorPython.vnl_vector_vcl_complexF_swigregister
vnl_vector_vcl_complexF_swigregister(vnl_vector_vcl_complexF)

def vnl_vector_vcl_complexF_read(*args):
  """vnl_vector_vcl_complexF_read(istream s) -> vnl_vector_vcl_complexF"""
  return _vnl_vectorPython.vnl_vector_vcl_complexF_read(*args)

class vnl_vector_vcl_complexLD(object):
    """Proxy of C++ vnl_vector_vcl_complexLD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> vnl_vector_vcl_complexLD
        __init__(self, unsigned int len) -> vnl_vector_vcl_complexLD
        __init__(self, unsigned int len, vcl_complexLD v0) -> vnl_vector_vcl_complexLD
        __init__(self, unsigned int len, int n, vcl_complexLD values) -> vnl_vector_vcl_complexLD
        __init__(self, vcl_complexLD data_block, unsigned int n) -> vnl_vector_vcl_complexLD
        __init__(self, vnl_vector_vcl_complexLD arg0) -> vnl_vector_vcl_complexLD
        __init__(self, vnl_vector_vcl_complexLD arg0, vnl_vector_vcl_complexLD arg1, 
            vnl_tag_add arg2) -> vnl_vector_vcl_complexLD
        __init__(self, vnl_vector_vcl_complexLD arg0, vnl_vector_vcl_complexLD arg1, 
            vnl_tag_sub arg2) -> vnl_vector_vcl_complexLD
        __init__(self, vnl_vector_vcl_complexLD arg0, vcl_complexLD arg1, 
            vnl_tag_mul arg2) -> vnl_vector_vcl_complexLD
        __init__(self, vnl_vector_vcl_complexLD arg0, vcl_complexLD arg1, 
            vnl_tag_div arg2) -> vnl_vector_vcl_complexLD
        __init__(self, vnl_vector_vcl_complexLD arg0, vcl_complexLD arg1, 
            vnl_tag_add arg2) -> vnl_vector_vcl_complexLD
        __init__(self, vnl_vector_vcl_complexLD arg0, vcl_complexLD arg1, 
            vnl_tag_sub arg2) -> vnl_vector_vcl_complexLD
        __init__(self, vnl_matrix_vcl_complexLD arg0, vnl_vector_vcl_complexLD arg1, 
            vnl_tag_mul arg2) -> vnl_vector_vcl_complexLD
        __init__(self, vnl_vector_vcl_complexLD arg0, vnl_matrix_vcl_complexLD arg1, 
            vnl_tag_mul arg2) -> vnl_vector_vcl_complexLD
        __init__(self, vnl_vector_vcl_complexLD that, vnl_tag_grab arg1) -> vnl_vector_vcl_complexLD
        """
        _vnl_vectorPython.vnl_vector_vcl_complexLD_swiginit(self,_vnl_vectorPython.new_vnl_vector_vcl_complexLD(*args))
    __swig_destroy__ = _vnl_vectorPython.delete_vnl_vector_vcl_complexLD
    def size(self):
        """size(self) -> unsigned int"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_size(self)

    def put(self, *args):
        """put(self, unsigned int index, vcl_complexLD value)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_put(self, *args)

    def get(self, *args):
        """get(self, unsigned int index) -> vcl_complexLD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_get(self, *args)

    def fill(self, *args):
        """fill(self, vcl_complexLD v)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_fill(self, *args)

    def copy_in(self, *args):
        """copy_in(self, vcl_complexLD ptr)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_copy_in(self, *args)

    def copy_out(self, *args):
        """copy_out(self, vcl_complexLD arg0)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_copy_out(self, *args)

    def set(self, *args):
        """set(self, vcl_complexLD ptr)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_set(self, *args)

    def __call__(self, *args):
        """
        __call__(self, unsigned int i) -> vcl_complexLD
        __call__(self, unsigned int i) -> vcl_complexLD
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexLD___call__(self, *args)

    def __idiv__(self, *args):
        """__idiv__(self, vcl_complexLD arg0) -> vnl_vector_vcl_complexLD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD___idiv__(self, *args)

    def __iadd__(self, *args):
        """
        __iadd__(self, vcl_complexLD arg0) -> vnl_vector_vcl_complexLD
        __iadd__(self, vnl_vector_vcl_complexLD rhs) -> vnl_vector_vcl_complexLD
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexLD___iadd__(self, *args)

    def __isub__(self, *args):
        """
        __isub__(self, vcl_complexLD value) -> vnl_vector_vcl_complexLD
        __isub__(self, vnl_vector_vcl_complexLD rhs) -> vnl_vector_vcl_complexLD
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexLD___isub__(self, *args)

    def pre_multiply(self, *args):
        """pre_multiply(self, vnl_matrix_vcl_complexLD M) -> vnl_vector_vcl_complexLD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_pre_multiply(self, *args)

    def post_multiply(self, *args):
        """post_multiply(self, vnl_matrix_vcl_complexLD M) -> vnl_vector_vcl_complexLD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_post_multiply(self, *args)

    def __imul__(self, *args):
        """
        __imul__(self, vcl_complexLD arg0) -> vnl_vector_vcl_complexLD
        __imul__(self, vnl_matrix_vcl_complexLD m) -> vnl_vector_vcl_complexLD
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexLD___imul__(self, *args)

    def __pos__(self):
        """__pos__(self) -> vnl_vector_vcl_complexLD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD___pos__(self)

    def __neg__(self):
        """__neg__(self) -> vnl_vector_vcl_complexLD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD___neg__(self)

    def __div__(self, *args):
        """__div__(self, vcl_complexLD v) -> vnl_vector_vcl_complexLD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD___div__(self, *args)

    def __add__(self, *args):
        """
        __add__(self, vcl_complexLD v) -> vnl_vector_vcl_complexLD
        __add__(self, vnl_vector_vcl_complexLD v) -> vnl_vector_vcl_complexLD
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexLD___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(self, vcl_complexLD v) -> vnl_vector_vcl_complexLD
        __sub__(self, vnl_vector_vcl_complexLD v) -> vnl_vector_vcl_complexLD
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexLD___sub__(self, *args)

    def __mul__(self, *args):
        """
        __mul__(self, vcl_complexLD v) -> vnl_vector_vcl_complexLD
        __mul__(self, vnl_matrix_vcl_complexLD M) -> vnl_vector_vcl_complexLD
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexLD___mul__(self, *args)

    def data_block(self, *args):
        """
        data_block(self) -> vcl_complexLD
        data_block(self) -> vcl_complexLD
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_data_block(self, *args)

    def begin(self, *args):
        """
        begin(self) -> vcl_complexLD
        begin(self) -> vcl_complexLD
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_begin(self, *args)

    def end(self, *args):
        """
        end(self) -> vcl_complexLD
        end(self) -> vcl_complexLD
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_end(self, *args)

    def extract(self, *args):
        """
        extract(self, unsigned int len, unsigned int start = 0) -> vnl_vector_vcl_complexLD
        extract(self, unsigned int len) -> vnl_vector_vcl_complexLD
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_extract(self, *args)

    def update(self, *args):
        """
        update(self, vnl_vector_vcl_complexLD arg0, unsigned int start = 0) -> vnl_vector_vcl_complexLD
        update(self, vnl_vector_vcl_complexLD arg0) -> vnl_vector_vcl_complexLD
        """
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_update(self, *args)

    def squared_magnitude(self):
        """squared_magnitude(self) -> long double"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_squared_magnitude(self)

    def magnitude(self):
        """magnitude(self) -> long double"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_magnitude(self)

    def one_norm(self):
        """one_norm(self) -> long double"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_one_norm(self)

    def two_norm(self):
        """two_norm(self) -> long double"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_two_norm(self)

    def inf_norm(self):
        """inf_norm(self) -> long double"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_inf_norm(self)

    def normalize(self):
        """normalize(self) -> vnl_vector_vcl_complexLD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_normalize(self)

    def rms(self):
        """rms(self) -> long double"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_rms(self)

    def min_value(self):
        """min_value(self) -> vcl_complexLD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_min_value(self)

    def max_value(self):
        """max_value(self) -> vcl_complexLD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_max_value(self)

    def mean(self):
        """mean(self) -> vcl_complexLD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_mean(self)

    def sum(self):
        """sum(self) -> vcl_complexLD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_sum(self)

    def flip(self):
        """flip(self)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_flip(self)

    def swap(self, *args):
        """swap(self, vnl_vector_vcl_complexLD that)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_swap(self, *args)

    def assert_size(self, *args):
        """assert_size(self, unsigned int sz)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_assert_size(self, *args)

    def assert_finite(self):
        """assert_finite(self)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_assert_finite(self)

    def is_finite(self):
        """is_finite(self) -> bool"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_is_finite(self)

    def is_zero(self):
        """is_zero(self) -> bool"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_is_zero(self)

    def empty(self):
        """empty(self) -> bool"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_empty(self)

    def operator_eq(self, *args):
        """operator_eq(self, vnl_vector_vcl_complexLD v) -> bool"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_operator_eq(self, *args)

    def __eq__(self, *args):
        """__eq__(self, vnl_vector_vcl_complexLD that) -> bool"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(self, vnl_vector_vcl_complexLD that) -> bool"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD___ne__(self, *args)

    def set_size(self, *args):
        """set_size(self, unsigned int n) -> bool"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_set_size(self, *args)

    def clear(self):
        """clear(self)"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_clear(self)

    def read_ascii(self, *args):
        """read_ascii(self, istream s) -> bool"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_read_ascii(self, *args)

    def read(*args):
        """read(istream s) -> vnl_vector_vcl_complexLD"""
        return _vnl_vectorPython.vnl_vector_vcl_complexLD_read(*args)

    read = staticmethod(read)
vnl_vector_vcl_complexLD.size = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_size,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.put = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_put,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.get = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_get,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.fill = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_fill,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.copy_in = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_copy_in,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.copy_out = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_copy_out,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.set = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_set,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.__call__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD___call__,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.__idiv__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD___idiv__,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.__iadd__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD___iadd__,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.__isub__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD___isub__,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.pre_multiply = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_pre_multiply,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.post_multiply = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_post_multiply,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.__imul__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD___imul__,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.__pos__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD___pos__,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.__neg__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD___neg__,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.__div__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD___div__,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.__add__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD___add__,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.__sub__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD___sub__,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.__mul__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD___mul__,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.data_block = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_data_block,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.begin = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_begin,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.end = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_end,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.extract = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_extract,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.update = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_update,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.squared_magnitude = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_squared_magnitude,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.magnitude = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_magnitude,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.one_norm = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_one_norm,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.two_norm = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_two_norm,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.inf_norm = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_inf_norm,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.normalize = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_normalize,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.rms = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_rms,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.min_value = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_min_value,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.max_value = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_max_value,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.mean = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_mean,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.sum = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_sum,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.flip = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_flip,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.swap = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_swap,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.assert_size = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_assert_size,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.assert_finite = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_assert_finite,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.is_finite = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_is_finite,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.is_zero = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_is_zero,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.empty = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_empty,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.operator_eq = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_operator_eq,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.__eq__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD___eq__,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.__ne__ = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD___ne__,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.set_size = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_set_size,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.clear = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_clear,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD.read_ascii = new_instancemethod(_vnl_vectorPython.vnl_vector_vcl_complexLD_read_ascii,None,vnl_vector_vcl_complexLD)
vnl_vector_vcl_complexLD_swigregister = _vnl_vectorPython.vnl_vector_vcl_complexLD_swigregister
vnl_vector_vcl_complexLD_swigregister(vnl_vector_vcl_complexLD)

def vnl_vector_vcl_complexLD_read(*args):
  """vnl_vector_vcl_complexLD_read(istream s) -> vnl_vector_vcl_complexLD"""
  return _vnl_vectorPython.vnl_vector_vcl_complexLD_read(*args)



