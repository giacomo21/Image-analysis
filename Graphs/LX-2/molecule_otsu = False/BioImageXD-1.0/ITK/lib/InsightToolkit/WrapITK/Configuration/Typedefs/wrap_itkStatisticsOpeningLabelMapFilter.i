// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkStatisticsOpeningLabelMapFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkStatisticsOpeningLabelMapFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkStatisticsOpeningLabelMapFilterGuile
#endif
#ifdef SWIGJAVA
%module itkStatisticsOpeningLabelMapFilterJava
#endif
#ifdef SWIGLUA
%module itkStatisticsOpeningLabelMapFilterLua
#endif
#ifdef SWIGMODULA3
%module itkStatisticsOpeningLabelMapFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkStatisticsOpeningLabelMapFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkStatisticsOpeningLabelMapFilterOcaml
#endif
#ifdef SWIGPERL
%module itkStatisticsOpeningLabelMapFilterPerl
#endif
#ifdef SWIGPERL5
%module itkStatisticsOpeningLabelMapFilterPerl5
#endif
#ifdef SWIGPHP
%module itkStatisticsOpeningLabelMapFilterPhp
#endif
#ifdef SWIGPHP4
%module itkStatisticsOpeningLabelMapFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkStatisticsOpeningLabelMapFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkStatisticsOpeningLabelMapFilterPike
#endif
#ifdef SWIGPYTHON
%module itkStatisticsOpeningLabelMapFilterPython
#endif
#ifdef SWIGR
%module itkStatisticsOpeningLabelMapFilterR
#endif
#ifdef SWIGRUBY
%module itkStatisticsOpeningLabelMapFilterRuby
#endif
#ifdef SWIGSEXP
%module itkStatisticsOpeningLabelMapFilterSexp
#endif
#ifdef SWIGTCL
%module itkStatisticsOpeningLabelMapFilterTcl
#endif
#ifdef SWIGXML
%module itkStatisticsOpeningLabelMapFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
#include "Numerics.includes"
#include "BinaryMorphology.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkShapeOpeningLabelMapFilter.i


%include itk.i
%include wrap_itkStatisticsOpeningLabelMapFilter_ext.i


 class itkStatisticsOpeningLabelMapFilterLM2 : public itkShapeOpeningLabelMapFilterLM2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkStatisticsOpeningLabelMapFilterLM2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkStatisticsOpeningLabelMapFilterLM2(itkStatisticsOpeningLabelMapFilterLM2 const & arg0);
     void operator=(itkStatisticsOpeningLabelMapFilterLM2 const & arg0);
   protected:
     itkStatisticsOpeningLabelMapFilterLM2();
     ~itkStatisticsOpeningLabelMapFilterLM2();
     virtual void GenerateData();
 };


 class itkStatisticsOpeningLabelMapFilterLM2_Pointer {
   public:
     itkStatisticsOpeningLabelMapFilterLM2_Pointer();
     itkStatisticsOpeningLabelMapFilterLM2_Pointer(itkStatisticsOpeningLabelMapFilterLM2_Pointer const & p);
     itkStatisticsOpeningLabelMapFilterLM2_Pointer(itkStatisticsOpeningLabelMapFilterLM2 * p);
     ~itkStatisticsOpeningLabelMapFilterLM2_Pointer();
     itkStatisticsOpeningLabelMapFilterLM2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkStatisticsOpeningLabelMapFilterLM2 * GetPointer() const;
     bool operator<(itkStatisticsOpeningLabelMapFilterLM2_Pointer const & r) const;
     bool operator>(itkStatisticsOpeningLabelMapFilterLM2_Pointer const & r) const;
     bool operator<=(itkStatisticsOpeningLabelMapFilterLM2_Pointer const & r) const;
     bool operator>=(itkStatisticsOpeningLabelMapFilterLM2_Pointer const & r) const;
     itkStatisticsOpeningLabelMapFilterLM2_Pointer & operator=(itkStatisticsOpeningLabelMapFilterLM2_Pointer const & r);
     itkStatisticsOpeningLabelMapFilterLM2_Pointer & operator=(itkStatisticsOpeningLabelMapFilterLM2 * r);
     itkStatisticsOpeningLabelMapFilterLM2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkStatisticsOpeningLabelMapFilterLM3 : public itkShapeOpeningLabelMapFilterLM3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkStatisticsOpeningLabelMapFilterLM3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkStatisticsOpeningLabelMapFilterLM3(itkStatisticsOpeningLabelMapFilterLM3 const & arg0);
     void operator=(itkStatisticsOpeningLabelMapFilterLM3 const & arg0);
   protected:
     itkStatisticsOpeningLabelMapFilterLM3();
     ~itkStatisticsOpeningLabelMapFilterLM3();
     virtual void GenerateData();
 };


 class itkStatisticsOpeningLabelMapFilterLM3_Pointer {
   public:
     itkStatisticsOpeningLabelMapFilterLM3_Pointer();
     itkStatisticsOpeningLabelMapFilterLM3_Pointer(itkStatisticsOpeningLabelMapFilterLM3_Pointer const & p);
     itkStatisticsOpeningLabelMapFilterLM3_Pointer(itkStatisticsOpeningLabelMapFilterLM3 * p);
     ~itkStatisticsOpeningLabelMapFilterLM3_Pointer();
     itkStatisticsOpeningLabelMapFilterLM3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkStatisticsOpeningLabelMapFilterLM3 * GetPointer() const;
     bool operator<(itkStatisticsOpeningLabelMapFilterLM3_Pointer const & r) const;
     bool operator>(itkStatisticsOpeningLabelMapFilterLM3_Pointer const & r) const;
     bool operator<=(itkStatisticsOpeningLabelMapFilterLM3_Pointer const & r) const;
     bool operator>=(itkStatisticsOpeningLabelMapFilterLM3_Pointer const & r) const;
     itkStatisticsOpeningLabelMapFilterLM3_Pointer & operator=(itkStatisticsOpeningLabelMapFilterLM3_Pointer const & r);
     itkStatisticsOpeningLabelMapFilterLM3_Pointer & operator=(itkStatisticsOpeningLabelMapFilterLM3 * r);
     itkStatisticsOpeningLabelMapFilterLM3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


