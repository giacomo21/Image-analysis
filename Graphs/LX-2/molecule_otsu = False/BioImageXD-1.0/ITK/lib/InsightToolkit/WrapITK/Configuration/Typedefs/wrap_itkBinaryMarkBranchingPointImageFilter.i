// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkBinaryMarkBranchingPointImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkBinaryMarkBranchingPointImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkBinaryMarkBranchingPointImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkBinaryMarkBranchingPointImageFilterJava
#endif
#ifdef SWIGLUA
%module itkBinaryMarkBranchingPointImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkBinaryMarkBranchingPointImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkBinaryMarkBranchingPointImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkBinaryMarkBranchingPointImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkBinaryMarkBranchingPointImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkBinaryMarkBranchingPointImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkBinaryMarkBranchingPointImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkBinaryMarkBranchingPointImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkBinaryMarkBranchingPointImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkBinaryMarkBranchingPointImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkBinaryMarkBranchingPointImageFilterPython
#endif
#ifdef SWIGR
%module itkBinaryMarkBranchingPointImageFilterR
#endif
#ifdef SWIGRUBY
%module itkBinaryMarkBranchingPointImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkBinaryMarkBranchingPointImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkBinaryMarkBranchingPointImageFilterTcl
#endif
#ifdef SWIGXML
%module itkBinaryMarkBranchingPointImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "itkBXD.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkImageToImageFilterA.i
%import wrap_itkIndex.i


%include itk.i
%include wrap_itkBinaryMarkBranchingPointImageFilter_ext.i


 class itkBinaryMarkBranchingPointImageFilterIUC2IUC2 : public itkImageToImageFilterIUC2IUC2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkBinaryMarkBranchingPointImageFilterIUC2IUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual unsigned char GetNumberOfLabels() const;
     virtual void SetBackground(unsigned char const _arg);
     virtual unsigned char GetBackground();
     std::vector< itkIndex2 > const & GetIndexes() const;
     itkIndex2 const GetIndex(unsigned int i) const;
   private:
     itkBinaryMarkBranchingPointImageFilterIUC2IUC2(itkBinaryMarkBranchingPointImageFilterIUC2IUC2 const & arg0);
     void operator=(itkBinaryMarkBranchingPointImageFilterIUC2IUC2 const & arg0);
   protected:
     itkBinaryMarkBranchingPointImageFilterIUC2IUC2();
     ~itkBinaryMarkBranchingPointImageFilterIUC2IUC2();
     void Unallocate();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
     virtual void GenerateData();
     void AllocateOutputImage();
     unsigned int CountConnectedComponents(std::vector< itkIndex2 > & arg0) const;
 };


 class itkBinaryMarkBranchingPointImageFilterIUC2IUC2_Pointer {
   public:
     itkBinaryMarkBranchingPointImageFilterIUC2IUC2_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUC2IUC2_Pointer(itkBinaryMarkBranchingPointImageFilterIUC2IUC2_Pointer const & p);
     itkBinaryMarkBranchingPointImageFilterIUC2IUC2_Pointer(itkBinaryMarkBranchingPointImageFilterIUC2IUC2 * p);
     ~itkBinaryMarkBranchingPointImageFilterIUC2IUC2_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUC2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMarkBranchingPointImageFilterIUC2IUC2 * GetPointer() const;
     bool operator<(itkBinaryMarkBranchingPointImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>(itkBinaryMarkBranchingPointImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator<=(itkBinaryMarkBranchingPointImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>=(itkBinaryMarkBranchingPointImageFilterIUC2IUC2_Pointer const & r) const;
     itkBinaryMarkBranchingPointImageFilterIUC2IUC2_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUC2IUC2_Pointer const & r);
     itkBinaryMarkBranchingPointImageFilterIUC2IUC2_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUC2IUC2 * r);
     itkBinaryMarkBranchingPointImageFilterIUC2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryMarkBranchingPointImageFilterIUC2IUL2 : public itkImageToImageFilterIUC2IUL2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkBinaryMarkBranchingPointImageFilterIUC2IUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual unsigned long GetNumberOfLabels() const;
     virtual void SetBackground(unsigned long const _arg);
     virtual unsigned long GetBackground();
     std::vector< itkIndex2 > const & GetIndexes() const;
     itkIndex2 const GetIndex(unsigned int i) const;
   private:
     itkBinaryMarkBranchingPointImageFilterIUC2IUL2(itkBinaryMarkBranchingPointImageFilterIUC2IUL2 const & arg0);
     void operator=(itkBinaryMarkBranchingPointImageFilterIUC2IUL2 const & arg0);
   protected:
     itkBinaryMarkBranchingPointImageFilterIUC2IUL2();
     ~itkBinaryMarkBranchingPointImageFilterIUC2IUL2();
     void Unallocate();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
     virtual void GenerateData();
     void AllocateOutputImage();
     unsigned int CountConnectedComponents(std::vector< itkIndex2 > & arg0) const;
 };


 class itkBinaryMarkBranchingPointImageFilterIUC2IUL2_Pointer {
   public:
     itkBinaryMarkBranchingPointImageFilterIUC2IUL2_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUC2IUL2_Pointer(itkBinaryMarkBranchingPointImageFilterIUC2IUL2_Pointer const & p);
     itkBinaryMarkBranchingPointImageFilterIUC2IUL2_Pointer(itkBinaryMarkBranchingPointImageFilterIUC2IUL2 * p);
     ~itkBinaryMarkBranchingPointImageFilterIUC2IUL2_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUC2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMarkBranchingPointImageFilterIUC2IUL2 * GetPointer() const;
     bool operator<(itkBinaryMarkBranchingPointImageFilterIUC2IUL2_Pointer const & r) const;
     bool operator>(itkBinaryMarkBranchingPointImageFilterIUC2IUL2_Pointer const & r) const;
     bool operator<=(itkBinaryMarkBranchingPointImageFilterIUC2IUL2_Pointer const & r) const;
     bool operator>=(itkBinaryMarkBranchingPointImageFilterIUC2IUL2_Pointer const & r) const;
     itkBinaryMarkBranchingPointImageFilterIUC2IUL2_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUC2IUL2_Pointer const & r);
     itkBinaryMarkBranchingPointImageFilterIUC2IUL2_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUC2IUL2 * r);
     itkBinaryMarkBranchingPointImageFilterIUC2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryMarkBranchingPointImageFilterIUC2IUS2 : public itkImageToImageFilterIUC2IUS2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkBinaryMarkBranchingPointImageFilterIUC2IUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual unsigned short GetNumberOfLabels() const;
     virtual void SetBackground(unsigned short const _arg);
     virtual unsigned short GetBackground();
     std::vector< itkIndex2 > const & GetIndexes() const;
     itkIndex2 const GetIndex(unsigned int i) const;
   private:
     itkBinaryMarkBranchingPointImageFilterIUC2IUS2(itkBinaryMarkBranchingPointImageFilterIUC2IUS2 const & arg0);
     void operator=(itkBinaryMarkBranchingPointImageFilterIUC2IUS2 const & arg0);
   protected:
     itkBinaryMarkBranchingPointImageFilterIUC2IUS2();
     ~itkBinaryMarkBranchingPointImageFilterIUC2IUS2();
     void Unallocate();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
     virtual void GenerateData();
     void AllocateOutputImage();
     unsigned int CountConnectedComponents(std::vector< itkIndex2 > & arg0) const;
 };


 class itkBinaryMarkBranchingPointImageFilterIUC2IUS2_Pointer {
   public:
     itkBinaryMarkBranchingPointImageFilterIUC2IUS2_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUC2IUS2_Pointer(itkBinaryMarkBranchingPointImageFilterIUC2IUS2_Pointer const & p);
     itkBinaryMarkBranchingPointImageFilterIUC2IUS2_Pointer(itkBinaryMarkBranchingPointImageFilterIUC2IUS2 * p);
     ~itkBinaryMarkBranchingPointImageFilterIUC2IUS2_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUC2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMarkBranchingPointImageFilterIUC2IUS2 * GetPointer() const;
     bool operator<(itkBinaryMarkBranchingPointImageFilterIUC2IUS2_Pointer const & r) const;
     bool operator>(itkBinaryMarkBranchingPointImageFilterIUC2IUS2_Pointer const & r) const;
     bool operator<=(itkBinaryMarkBranchingPointImageFilterIUC2IUS2_Pointer const & r) const;
     bool operator>=(itkBinaryMarkBranchingPointImageFilterIUC2IUS2_Pointer const & r) const;
     itkBinaryMarkBranchingPointImageFilterIUC2IUS2_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUC2IUS2_Pointer const & r);
     itkBinaryMarkBranchingPointImageFilterIUC2IUS2_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUC2IUS2 * r);
     itkBinaryMarkBranchingPointImageFilterIUC2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryMarkBranchingPointImageFilterIUC3IUC3 : public itkImageToImageFilterIUC3IUC3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkBinaryMarkBranchingPointImageFilterIUC3IUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual unsigned char GetNumberOfLabels() const;
     virtual void SetBackground(unsigned char const _arg);
     virtual unsigned char GetBackground();
     std::vector< itkIndex3 > const & GetIndexes() const;
     itkIndex3 const GetIndex(unsigned int i) const;
   private:
     itkBinaryMarkBranchingPointImageFilterIUC3IUC3(itkBinaryMarkBranchingPointImageFilterIUC3IUC3 const & arg0);
     void operator=(itkBinaryMarkBranchingPointImageFilterIUC3IUC3 const & arg0);
   protected:
     itkBinaryMarkBranchingPointImageFilterIUC3IUC3();
     ~itkBinaryMarkBranchingPointImageFilterIUC3IUC3();
     void Unallocate();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
     virtual void GenerateData();
     void AllocateOutputImage();
     unsigned int CountConnectedComponents(std::vector< itkIndex3 > & arg0) const;
 };


 class itkBinaryMarkBranchingPointImageFilterIUC3IUC3_Pointer {
   public:
     itkBinaryMarkBranchingPointImageFilterIUC3IUC3_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUC3IUC3_Pointer(itkBinaryMarkBranchingPointImageFilterIUC3IUC3_Pointer const & p);
     itkBinaryMarkBranchingPointImageFilterIUC3IUC3_Pointer(itkBinaryMarkBranchingPointImageFilterIUC3IUC3 * p);
     ~itkBinaryMarkBranchingPointImageFilterIUC3IUC3_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUC3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMarkBranchingPointImageFilterIUC3IUC3 * GetPointer() const;
     bool operator<(itkBinaryMarkBranchingPointImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>(itkBinaryMarkBranchingPointImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator<=(itkBinaryMarkBranchingPointImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>=(itkBinaryMarkBranchingPointImageFilterIUC3IUC3_Pointer const & r) const;
     itkBinaryMarkBranchingPointImageFilterIUC3IUC3_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUC3IUC3_Pointer const & r);
     itkBinaryMarkBranchingPointImageFilterIUC3IUC3_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUC3IUC3 * r);
     itkBinaryMarkBranchingPointImageFilterIUC3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryMarkBranchingPointImageFilterIUC3IUL3 : public itkImageToImageFilterIUC3IUL3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkBinaryMarkBranchingPointImageFilterIUC3IUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual unsigned long GetNumberOfLabels() const;
     virtual void SetBackground(unsigned long const _arg);
     virtual unsigned long GetBackground();
     std::vector< itkIndex3 > const & GetIndexes() const;
     itkIndex3 const GetIndex(unsigned int i) const;
   private:
     itkBinaryMarkBranchingPointImageFilterIUC3IUL3(itkBinaryMarkBranchingPointImageFilterIUC3IUL3 const & arg0);
     void operator=(itkBinaryMarkBranchingPointImageFilterIUC3IUL3 const & arg0);
   protected:
     itkBinaryMarkBranchingPointImageFilterIUC3IUL3();
     ~itkBinaryMarkBranchingPointImageFilterIUC3IUL3();
     void Unallocate();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
     virtual void GenerateData();
     void AllocateOutputImage();
     unsigned int CountConnectedComponents(std::vector< itkIndex3 > & arg0) const;
 };


 class itkBinaryMarkBranchingPointImageFilterIUC3IUL3_Pointer {
   public:
     itkBinaryMarkBranchingPointImageFilterIUC3IUL3_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUC3IUL3_Pointer(itkBinaryMarkBranchingPointImageFilterIUC3IUL3_Pointer const & p);
     itkBinaryMarkBranchingPointImageFilterIUC3IUL3_Pointer(itkBinaryMarkBranchingPointImageFilterIUC3IUL3 * p);
     ~itkBinaryMarkBranchingPointImageFilterIUC3IUL3_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUC3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMarkBranchingPointImageFilterIUC3IUL3 * GetPointer() const;
     bool operator<(itkBinaryMarkBranchingPointImageFilterIUC3IUL3_Pointer const & r) const;
     bool operator>(itkBinaryMarkBranchingPointImageFilterIUC3IUL3_Pointer const & r) const;
     bool operator<=(itkBinaryMarkBranchingPointImageFilterIUC3IUL3_Pointer const & r) const;
     bool operator>=(itkBinaryMarkBranchingPointImageFilterIUC3IUL3_Pointer const & r) const;
     itkBinaryMarkBranchingPointImageFilterIUC3IUL3_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUC3IUL3_Pointer const & r);
     itkBinaryMarkBranchingPointImageFilterIUC3IUL3_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUC3IUL3 * r);
     itkBinaryMarkBranchingPointImageFilterIUC3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryMarkBranchingPointImageFilterIUC3IUS3 : public itkImageToImageFilterIUC3IUS3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkBinaryMarkBranchingPointImageFilterIUC3IUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual unsigned short GetNumberOfLabels() const;
     virtual void SetBackground(unsigned short const _arg);
     virtual unsigned short GetBackground();
     std::vector< itkIndex3 > const & GetIndexes() const;
     itkIndex3 const GetIndex(unsigned int i) const;
   private:
     itkBinaryMarkBranchingPointImageFilterIUC3IUS3(itkBinaryMarkBranchingPointImageFilterIUC3IUS3 const & arg0);
     void operator=(itkBinaryMarkBranchingPointImageFilterIUC3IUS3 const & arg0);
   protected:
     itkBinaryMarkBranchingPointImageFilterIUC3IUS3();
     ~itkBinaryMarkBranchingPointImageFilterIUC3IUS3();
     void Unallocate();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
     virtual void GenerateData();
     void AllocateOutputImage();
     unsigned int CountConnectedComponents(std::vector< itkIndex3 > & arg0) const;
 };


 class itkBinaryMarkBranchingPointImageFilterIUC3IUS3_Pointer {
   public:
     itkBinaryMarkBranchingPointImageFilterIUC3IUS3_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUC3IUS3_Pointer(itkBinaryMarkBranchingPointImageFilterIUC3IUS3_Pointer const & p);
     itkBinaryMarkBranchingPointImageFilterIUC3IUS3_Pointer(itkBinaryMarkBranchingPointImageFilterIUC3IUS3 * p);
     ~itkBinaryMarkBranchingPointImageFilterIUC3IUS3_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUC3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMarkBranchingPointImageFilterIUC3IUS3 * GetPointer() const;
     bool operator<(itkBinaryMarkBranchingPointImageFilterIUC3IUS3_Pointer const & r) const;
     bool operator>(itkBinaryMarkBranchingPointImageFilterIUC3IUS3_Pointer const & r) const;
     bool operator<=(itkBinaryMarkBranchingPointImageFilterIUC3IUS3_Pointer const & r) const;
     bool operator>=(itkBinaryMarkBranchingPointImageFilterIUC3IUS3_Pointer const & r) const;
     itkBinaryMarkBranchingPointImageFilterIUC3IUS3_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUC3IUS3_Pointer const & r);
     itkBinaryMarkBranchingPointImageFilterIUC3IUS3_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUC3IUS3 * r);
     itkBinaryMarkBranchingPointImageFilterIUC3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryMarkBranchingPointImageFilterIUL2IUC2 : public itkImageToImageFilterIUL2IUC2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkBinaryMarkBranchingPointImageFilterIUL2IUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual unsigned char GetNumberOfLabels() const;
     virtual void SetBackground(unsigned char const _arg);
     virtual unsigned char GetBackground();
     std::vector< itkIndex2 > const & GetIndexes() const;
     itkIndex2 const GetIndex(unsigned int i) const;
   private:
     itkBinaryMarkBranchingPointImageFilterIUL2IUC2(itkBinaryMarkBranchingPointImageFilterIUL2IUC2 const & arg0);
     void operator=(itkBinaryMarkBranchingPointImageFilterIUL2IUC2 const & arg0);
   protected:
     itkBinaryMarkBranchingPointImageFilterIUL2IUC2();
     ~itkBinaryMarkBranchingPointImageFilterIUL2IUC2();
     void Unallocate();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
     virtual void GenerateData();
     void AllocateOutputImage();
     unsigned int CountConnectedComponents(std::vector< itkIndex2 > & arg0) const;
 };


 class itkBinaryMarkBranchingPointImageFilterIUL2IUC2_Pointer {
   public:
     itkBinaryMarkBranchingPointImageFilterIUL2IUC2_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUL2IUC2_Pointer(itkBinaryMarkBranchingPointImageFilterIUL2IUC2_Pointer const & p);
     itkBinaryMarkBranchingPointImageFilterIUL2IUC2_Pointer(itkBinaryMarkBranchingPointImageFilterIUL2IUC2 * p);
     ~itkBinaryMarkBranchingPointImageFilterIUL2IUC2_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUL2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMarkBranchingPointImageFilterIUL2IUC2 * GetPointer() const;
     bool operator<(itkBinaryMarkBranchingPointImageFilterIUL2IUC2_Pointer const & r) const;
     bool operator>(itkBinaryMarkBranchingPointImageFilterIUL2IUC2_Pointer const & r) const;
     bool operator<=(itkBinaryMarkBranchingPointImageFilterIUL2IUC2_Pointer const & r) const;
     bool operator>=(itkBinaryMarkBranchingPointImageFilterIUL2IUC2_Pointer const & r) const;
     itkBinaryMarkBranchingPointImageFilterIUL2IUC2_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUL2IUC2_Pointer const & r);
     itkBinaryMarkBranchingPointImageFilterIUL2IUC2_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUL2IUC2 * r);
     itkBinaryMarkBranchingPointImageFilterIUL2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryMarkBranchingPointImageFilterIUL2IUL2 : public itkImageToImageFilterIUL2IUL2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkBinaryMarkBranchingPointImageFilterIUL2IUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual unsigned long GetNumberOfLabels() const;
     virtual void SetBackground(unsigned long const _arg);
     virtual unsigned long GetBackground();
     std::vector< itkIndex2 > const & GetIndexes() const;
     itkIndex2 const GetIndex(unsigned int i) const;
   private:
     itkBinaryMarkBranchingPointImageFilterIUL2IUL2(itkBinaryMarkBranchingPointImageFilterIUL2IUL2 const & arg0);
     void operator=(itkBinaryMarkBranchingPointImageFilterIUL2IUL2 const & arg0);
   protected:
     itkBinaryMarkBranchingPointImageFilterIUL2IUL2();
     ~itkBinaryMarkBranchingPointImageFilterIUL2IUL2();
     void Unallocate();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
     virtual void GenerateData();
     void AllocateOutputImage();
     unsigned int CountConnectedComponents(std::vector< itkIndex2 > & arg0) const;
 };


 class itkBinaryMarkBranchingPointImageFilterIUL2IUL2_Pointer {
   public:
     itkBinaryMarkBranchingPointImageFilterIUL2IUL2_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUL2IUL2_Pointer(itkBinaryMarkBranchingPointImageFilterIUL2IUL2_Pointer const & p);
     itkBinaryMarkBranchingPointImageFilterIUL2IUL2_Pointer(itkBinaryMarkBranchingPointImageFilterIUL2IUL2 * p);
     ~itkBinaryMarkBranchingPointImageFilterIUL2IUL2_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUL2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMarkBranchingPointImageFilterIUL2IUL2 * GetPointer() const;
     bool operator<(itkBinaryMarkBranchingPointImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>(itkBinaryMarkBranchingPointImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator<=(itkBinaryMarkBranchingPointImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>=(itkBinaryMarkBranchingPointImageFilterIUL2IUL2_Pointer const & r) const;
     itkBinaryMarkBranchingPointImageFilterIUL2IUL2_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUL2IUL2_Pointer const & r);
     itkBinaryMarkBranchingPointImageFilterIUL2IUL2_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUL2IUL2 * r);
     itkBinaryMarkBranchingPointImageFilterIUL2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryMarkBranchingPointImageFilterIUL2IUS2 : public itkImageToImageFilterIUL2IUS2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkBinaryMarkBranchingPointImageFilterIUL2IUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual unsigned short GetNumberOfLabels() const;
     virtual void SetBackground(unsigned short const _arg);
     virtual unsigned short GetBackground();
     std::vector< itkIndex2 > const & GetIndexes() const;
     itkIndex2 const GetIndex(unsigned int i) const;
   private:
     itkBinaryMarkBranchingPointImageFilterIUL2IUS2(itkBinaryMarkBranchingPointImageFilterIUL2IUS2 const & arg0);
     void operator=(itkBinaryMarkBranchingPointImageFilterIUL2IUS2 const & arg0);
   protected:
     itkBinaryMarkBranchingPointImageFilterIUL2IUS2();
     ~itkBinaryMarkBranchingPointImageFilterIUL2IUS2();
     void Unallocate();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
     virtual void GenerateData();
     void AllocateOutputImage();
     unsigned int CountConnectedComponents(std::vector< itkIndex2 > & arg0) const;
 };


 class itkBinaryMarkBranchingPointImageFilterIUL2IUS2_Pointer {
   public:
     itkBinaryMarkBranchingPointImageFilterIUL2IUS2_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUL2IUS2_Pointer(itkBinaryMarkBranchingPointImageFilterIUL2IUS2_Pointer const & p);
     itkBinaryMarkBranchingPointImageFilterIUL2IUS2_Pointer(itkBinaryMarkBranchingPointImageFilterIUL2IUS2 * p);
     ~itkBinaryMarkBranchingPointImageFilterIUL2IUS2_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUL2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMarkBranchingPointImageFilterIUL2IUS2 * GetPointer() const;
     bool operator<(itkBinaryMarkBranchingPointImageFilterIUL2IUS2_Pointer const & r) const;
     bool operator>(itkBinaryMarkBranchingPointImageFilterIUL2IUS2_Pointer const & r) const;
     bool operator<=(itkBinaryMarkBranchingPointImageFilterIUL2IUS2_Pointer const & r) const;
     bool operator>=(itkBinaryMarkBranchingPointImageFilterIUL2IUS2_Pointer const & r) const;
     itkBinaryMarkBranchingPointImageFilterIUL2IUS2_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUL2IUS2_Pointer const & r);
     itkBinaryMarkBranchingPointImageFilterIUL2IUS2_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUL2IUS2 * r);
     itkBinaryMarkBranchingPointImageFilterIUL2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryMarkBranchingPointImageFilterIUL3IUC3 : public itkImageToImageFilterIUL3IUC3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkBinaryMarkBranchingPointImageFilterIUL3IUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual unsigned char GetNumberOfLabels() const;
     virtual void SetBackground(unsigned char const _arg);
     virtual unsigned char GetBackground();
     std::vector< itkIndex3 > const & GetIndexes() const;
     itkIndex3 const GetIndex(unsigned int i) const;
   private:
     itkBinaryMarkBranchingPointImageFilterIUL3IUC3(itkBinaryMarkBranchingPointImageFilterIUL3IUC3 const & arg0);
     void operator=(itkBinaryMarkBranchingPointImageFilterIUL3IUC3 const & arg0);
   protected:
     itkBinaryMarkBranchingPointImageFilterIUL3IUC3();
     ~itkBinaryMarkBranchingPointImageFilterIUL3IUC3();
     void Unallocate();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
     virtual void GenerateData();
     void AllocateOutputImage();
     unsigned int CountConnectedComponents(std::vector< itkIndex3 > & arg0) const;
 };


 class itkBinaryMarkBranchingPointImageFilterIUL3IUC3_Pointer {
   public:
     itkBinaryMarkBranchingPointImageFilterIUL3IUC3_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUL3IUC3_Pointer(itkBinaryMarkBranchingPointImageFilterIUL3IUC3_Pointer const & p);
     itkBinaryMarkBranchingPointImageFilterIUL3IUC3_Pointer(itkBinaryMarkBranchingPointImageFilterIUL3IUC3 * p);
     ~itkBinaryMarkBranchingPointImageFilterIUL3IUC3_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUL3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMarkBranchingPointImageFilterIUL3IUC3 * GetPointer() const;
     bool operator<(itkBinaryMarkBranchingPointImageFilterIUL3IUC3_Pointer const & r) const;
     bool operator>(itkBinaryMarkBranchingPointImageFilterIUL3IUC3_Pointer const & r) const;
     bool operator<=(itkBinaryMarkBranchingPointImageFilterIUL3IUC3_Pointer const & r) const;
     bool operator>=(itkBinaryMarkBranchingPointImageFilterIUL3IUC3_Pointer const & r) const;
     itkBinaryMarkBranchingPointImageFilterIUL3IUC3_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUL3IUC3_Pointer const & r);
     itkBinaryMarkBranchingPointImageFilterIUL3IUC3_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUL3IUC3 * r);
     itkBinaryMarkBranchingPointImageFilterIUL3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryMarkBranchingPointImageFilterIUL3IUL3 : public itkImageToImageFilterIUL3IUL3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkBinaryMarkBranchingPointImageFilterIUL3IUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual unsigned long GetNumberOfLabels() const;
     virtual void SetBackground(unsigned long const _arg);
     virtual unsigned long GetBackground();
     std::vector< itkIndex3 > const & GetIndexes() const;
     itkIndex3 const GetIndex(unsigned int i) const;
   private:
     itkBinaryMarkBranchingPointImageFilterIUL3IUL3(itkBinaryMarkBranchingPointImageFilterIUL3IUL3 const & arg0);
     void operator=(itkBinaryMarkBranchingPointImageFilterIUL3IUL3 const & arg0);
   protected:
     itkBinaryMarkBranchingPointImageFilterIUL3IUL3();
     ~itkBinaryMarkBranchingPointImageFilterIUL3IUL3();
     void Unallocate();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
     virtual void GenerateData();
     void AllocateOutputImage();
     unsigned int CountConnectedComponents(std::vector< itkIndex3 > & arg0) const;
 };


 class itkBinaryMarkBranchingPointImageFilterIUL3IUL3_Pointer {
   public:
     itkBinaryMarkBranchingPointImageFilterIUL3IUL3_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUL3IUL3_Pointer(itkBinaryMarkBranchingPointImageFilterIUL3IUL3_Pointer const & p);
     itkBinaryMarkBranchingPointImageFilterIUL3IUL3_Pointer(itkBinaryMarkBranchingPointImageFilterIUL3IUL3 * p);
     ~itkBinaryMarkBranchingPointImageFilterIUL3IUL3_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUL3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMarkBranchingPointImageFilterIUL3IUL3 * GetPointer() const;
     bool operator<(itkBinaryMarkBranchingPointImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>(itkBinaryMarkBranchingPointImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator<=(itkBinaryMarkBranchingPointImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>=(itkBinaryMarkBranchingPointImageFilterIUL3IUL3_Pointer const & r) const;
     itkBinaryMarkBranchingPointImageFilterIUL3IUL3_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUL3IUL3_Pointer const & r);
     itkBinaryMarkBranchingPointImageFilterIUL3IUL3_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUL3IUL3 * r);
     itkBinaryMarkBranchingPointImageFilterIUL3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryMarkBranchingPointImageFilterIUL3IUS3 : public itkImageToImageFilterIUL3IUS3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkBinaryMarkBranchingPointImageFilterIUL3IUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual unsigned short GetNumberOfLabels() const;
     virtual void SetBackground(unsigned short const _arg);
     virtual unsigned short GetBackground();
     std::vector< itkIndex3 > const & GetIndexes() const;
     itkIndex3 const GetIndex(unsigned int i) const;
   private:
     itkBinaryMarkBranchingPointImageFilterIUL3IUS3(itkBinaryMarkBranchingPointImageFilterIUL3IUS3 const & arg0);
     void operator=(itkBinaryMarkBranchingPointImageFilterIUL3IUS3 const & arg0);
   protected:
     itkBinaryMarkBranchingPointImageFilterIUL3IUS3();
     ~itkBinaryMarkBranchingPointImageFilterIUL3IUS3();
     void Unallocate();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
     virtual void GenerateData();
     void AllocateOutputImage();
     unsigned int CountConnectedComponents(std::vector< itkIndex3 > & arg0) const;
 };


 class itkBinaryMarkBranchingPointImageFilterIUL3IUS3_Pointer {
   public:
     itkBinaryMarkBranchingPointImageFilterIUL3IUS3_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUL3IUS3_Pointer(itkBinaryMarkBranchingPointImageFilterIUL3IUS3_Pointer const & p);
     itkBinaryMarkBranchingPointImageFilterIUL3IUS3_Pointer(itkBinaryMarkBranchingPointImageFilterIUL3IUS3 * p);
     ~itkBinaryMarkBranchingPointImageFilterIUL3IUS3_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUL3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMarkBranchingPointImageFilterIUL3IUS3 * GetPointer() const;
     bool operator<(itkBinaryMarkBranchingPointImageFilterIUL3IUS3_Pointer const & r) const;
     bool operator>(itkBinaryMarkBranchingPointImageFilterIUL3IUS3_Pointer const & r) const;
     bool operator<=(itkBinaryMarkBranchingPointImageFilterIUL3IUS3_Pointer const & r) const;
     bool operator>=(itkBinaryMarkBranchingPointImageFilterIUL3IUS3_Pointer const & r) const;
     itkBinaryMarkBranchingPointImageFilterIUL3IUS3_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUL3IUS3_Pointer const & r);
     itkBinaryMarkBranchingPointImageFilterIUL3IUS3_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUL3IUS3 * r);
     itkBinaryMarkBranchingPointImageFilterIUL3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryMarkBranchingPointImageFilterIUS2IUC2 : public itkImageToImageFilterIUS2IUC2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkBinaryMarkBranchingPointImageFilterIUS2IUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual unsigned char GetNumberOfLabels() const;
     virtual void SetBackground(unsigned char const _arg);
     virtual unsigned char GetBackground();
     std::vector< itkIndex2 > const & GetIndexes() const;
     itkIndex2 const GetIndex(unsigned int i) const;
   private:
     itkBinaryMarkBranchingPointImageFilterIUS2IUC2(itkBinaryMarkBranchingPointImageFilterIUS2IUC2 const & arg0);
     void operator=(itkBinaryMarkBranchingPointImageFilterIUS2IUC2 const & arg0);
   protected:
     itkBinaryMarkBranchingPointImageFilterIUS2IUC2();
     ~itkBinaryMarkBranchingPointImageFilterIUS2IUC2();
     void Unallocate();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
     virtual void GenerateData();
     void AllocateOutputImage();
     unsigned int CountConnectedComponents(std::vector< itkIndex2 > & arg0) const;
 };


 class itkBinaryMarkBranchingPointImageFilterIUS2IUC2_Pointer {
   public:
     itkBinaryMarkBranchingPointImageFilterIUS2IUC2_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUS2IUC2_Pointer(itkBinaryMarkBranchingPointImageFilterIUS2IUC2_Pointer const & p);
     itkBinaryMarkBranchingPointImageFilterIUS2IUC2_Pointer(itkBinaryMarkBranchingPointImageFilterIUS2IUC2 * p);
     ~itkBinaryMarkBranchingPointImageFilterIUS2IUC2_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUS2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMarkBranchingPointImageFilterIUS2IUC2 * GetPointer() const;
     bool operator<(itkBinaryMarkBranchingPointImageFilterIUS2IUC2_Pointer const & r) const;
     bool operator>(itkBinaryMarkBranchingPointImageFilterIUS2IUC2_Pointer const & r) const;
     bool operator<=(itkBinaryMarkBranchingPointImageFilterIUS2IUC2_Pointer const & r) const;
     bool operator>=(itkBinaryMarkBranchingPointImageFilterIUS2IUC2_Pointer const & r) const;
     itkBinaryMarkBranchingPointImageFilterIUS2IUC2_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUS2IUC2_Pointer const & r);
     itkBinaryMarkBranchingPointImageFilterIUS2IUC2_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUS2IUC2 * r);
     itkBinaryMarkBranchingPointImageFilterIUS2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryMarkBranchingPointImageFilterIUS2IUL2 : public itkImageToImageFilterIUS2IUL2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkBinaryMarkBranchingPointImageFilterIUS2IUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual unsigned long GetNumberOfLabels() const;
     virtual void SetBackground(unsigned long const _arg);
     virtual unsigned long GetBackground();
     std::vector< itkIndex2 > const & GetIndexes() const;
     itkIndex2 const GetIndex(unsigned int i) const;
   private:
     itkBinaryMarkBranchingPointImageFilterIUS2IUL2(itkBinaryMarkBranchingPointImageFilterIUS2IUL2 const & arg0);
     void operator=(itkBinaryMarkBranchingPointImageFilterIUS2IUL2 const & arg0);
   protected:
     itkBinaryMarkBranchingPointImageFilterIUS2IUL2();
     ~itkBinaryMarkBranchingPointImageFilterIUS2IUL2();
     void Unallocate();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
     virtual void GenerateData();
     void AllocateOutputImage();
     unsigned int CountConnectedComponents(std::vector< itkIndex2 > & arg0) const;
 };


 class itkBinaryMarkBranchingPointImageFilterIUS2IUL2_Pointer {
   public:
     itkBinaryMarkBranchingPointImageFilterIUS2IUL2_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUS2IUL2_Pointer(itkBinaryMarkBranchingPointImageFilterIUS2IUL2_Pointer const & p);
     itkBinaryMarkBranchingPointImageFilterIUS2IUL2_Pointer(itkBinaryMarkBranchingPointImageFilterIUS2IUL2 * p);
     ~itkBinaryMarkBranchingPointImageFilterIUS2IUL2_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUS2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMarkBranchingPointImageFilterIUS2IUL2 * GetPointer() const;
     bool operator<(itkBinaryMarkBranchingPointImageFilterIUS2IUL2_Pointer const & r) const;
     bool operator>(itkBinaryMarkBranchingPointImageFilterIUS2IUL2_Pointer const & r) const;
     bool operator<=(itkBinaryMarkBranchingPointImageFilterIUS2IUL2_Pointer const & r) const;
     bool operator>=(itkBinaryMarkBranchingPointImageFilterIUS2IUL2_Pointer const & r) const;
     itkBinaryMarkBranchingPointImageFilterIUS2IUL2_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUS2IUL2_Pointer const & r);
     itkBinaryMarkBranchingPointImageFilterIUS2IUL2_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUS2IUL2 * r);
     itkBinaryMarkBranchingPointImageFilterIUS2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryMarkBranchingPointImageFilterIUS2IUS2 : public itkImageToImageFilterIUS2IUS2 {
   public:
     enum  {  ImageDimension = 2 };
     static itkBinaryMarkBranchingPointImageFilterIUS2IUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual unsigned short GetNumberOfLabels() const;
     virtual void SetBackground(unsigned short const _arg);
     virtual unsigned short GetBackground();
     std::vector< itkIndex2 > const & GetIndexes() const;
     itkIndex2 const GetIndex(unsigned int i) const;
   private:
     itkBinaryMarkBranchingPointImageFilterIUS2IUS2(itkBinaryMarkBranchingPointImageFilterIUS2IUS2 const & arg0);
     void operator=(itkBinaryMarkBranchingPointImageFilterIUS2IUS2 const & arg0);
   protected:
     itkBinaryMarkBranchingPointImageFilterIUS2IUS2();
     ~itkBinaryMarkBranchingPointImageFilterIUS2IUS2();
     void Unallocate();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
     virtual void GenerateData();
     void AllocateOutputImage();
     unsigned int CountConnectedComponents(std::vector< itkIndex2 > & arg0) const;
 };


 class itkBinaryMarkBranchingPointImageFilterIUS2IUS2_Pointer {
   public:
     itkBinaryMarkBranchingPointImageFilterIUS2IUS2_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUS2IUS2_Pointer(itkBinaryMarkBranchingPointImageFilterIUS2IUS2_Pointer const & p);
     itkBinaryMarkBranchingPointImageFilterIUS2IUS2_Pointer(itkBinaryMarkBranchingPointImageFilterIUS2IUS2 * p);
     ~itkBinaryMarkBranchingPointImageFilterIUS2IUS2_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUS2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMarkBranchingPointImageFilterIUS2IUS2 * GetPointer() const;
     bool operator<(itkBinaryMarkBranchingPointImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>(itkBinaryMarkBranchingPointImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator<=(itkBinaryMarkBranchingPointImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>=(itkBinaryMarkBranchingPointImageFilterIUS2IUS2_Pointer const & r) const;
     itkBinaryMarkBranchingPointImageFilterIUS2IUS2_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUS2IUS2_Pointer const & r);
     itkBinaryMarkBranchingPointImageFilterIUS2IUS2_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUS2IUS2 * r);
     itkBinaryMarkBranchingPointImageFilterIUS2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryMarkBranchingPointImageFilterIUS3IUC3 : public itkImageToImageFilterIUS3IUC3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkBinaryMarkBranchingPointImageFilterIUS3IUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual unsigned char GetNumberOfLabels() const;
     virtual void SetBackground(unsigned char const _arg);
     virtual unsigned char GetBackground();
     std::vector< itkIndex3 > const & GetIndexes() const;
     itkIndex3 const GetIndex(unsigned int i) const;
   private:
     itkBinaryMarkBranchingPointImageFilterIUS3IUC3(itkBinaryMarkBranchingPointImageFilterIUS3IUC3 const & arg0);
     void operator=(itkBinaryMarkBranchingPointImageFilterIUS3IUC3 const & arg0);
   protected:
     itkBinaryMarkBranchingPointImageFilterIUS3IUC3();
     ~itkBinaryMarkBranchingPointImageFilterIUS3IUC3();
     void Unallocate();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
     virtual void GenerateData();
     void AllocateOutputImage();
     unsigned int CountConnectedComponents(std::vector< itkIndex3 > & arg0) const;
 };


 class itkBinaryMarkBranchingPointImageFilterIUS3IUC3_Pointer {
   public:
     itkBinaryMarkBranchingPointImageFilterIUS3IUC3_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUS3IUC3_Pointer(itkBinaryMarkBranchingPointImageFilterIUS3IUC3_Pointer const & p);
     itkBinaryMarkBranchingPointImageFilterIUS3IUC3_Pointer(itkBinaryMarkBranchingPointImageFilterIUS3IUC3 * p);
     ~itkBinaryMarkBranchingPointImageFilterIUS3IUC3_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUS3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMarkBranchingPointImageFilterIUS3IUC3 * GetPointer() const;
     bool operator<(itkBinaryMarkBranchingPointImageFilterIUS3IUC3_Pointer const & r) const;
     bool operator>(itkBinaryMarkBranchingPointImageFilterIUS3IUC3_Pointer const & r) const;
     bool operator<=(itkBinaryMarkBranchingPointImageFilterIUS3IUC3_Pointer const & r) const;
     bool operator>=(itkBinaryMarkBranchingPointImageFilterIUS3IUC3_Pointer const & r) const;
     itkBinaryMarkBranchingPointImageFilterIUS3IUC3_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUS3IUC3_Pointer const & r);
     itkBinaryMarkBranchingPointImageFilterIUS3IUC3_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUS3IUC3 * r);
     itkBinaryMarkBranchingPointImageFilterIUS3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryMarkBranchingPointImageFilterIUS3IUL3 : public itkImageToImageFilterIUS3IUL3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkBinaryMarkBranchingPointImageFilterIUS3IUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual unsigned long GetNumberOfLabels() const;
     virtual void SetBackground(unsigned long const _arg);
     virtual unsigned long GetBackground();
     std::vector< itkIndex3 > const & GetIndexes() const;
     itkIndex3 const GetIndex(unsigned int i) const;
   private:
     itkBinaryMarkBranchingPointImageFilterIUS3IUL3(itkBinaryMarkBranchingPointImageFilterIUS3IUL3 const & arg0);
     void operator=(itkBinaryMarkBranchingPointImageFilterIUS3IUL3 const & arg0);
   protected:
     itkBinaryMarkBranchingPointImageFilterIUS3IUL3();
     ~itkBinaryMarkBranchingPointImageFilterIUS3IUL3();
     void Unallocate();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
     virtual void GenerateData();
     void AllocateOutputImage();
     unsigned int CountConnectedComponents(std::vector< itkIndex3 > & arg0) const;
 };


 class itkBinaryMarkBranchingPointImageFilterIUS3IUL3_Pointer {
   public:
     itkBinaryMarkBranchingPointImageFilterIUS3IUL3_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUS3IUL3_Pointer(itkBinaryMarkBranchingPointImageFilterIUS3IUL3_Pointer const & p);
     itkBinaryMarkBranchingPointImageFilterIUS3IUL3_Pointer(itkBinaryMarkBranchingPointImageFilterIUS3IUL3 * p);
     ~itkBinaryMarkBranchingPointImageFilterIUS3IUL3_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUS3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMarkBranchingPointImageFilterIUS3IUL3 * GetPointer() const;
     bool operator<(itkBinaryMarkBranchingPointImageFilterIUS3IUL3_Pointer const & r) const;
     bool operator>(itkBinaryMarkBranchingPointImageFilterIUS3IUL3_Pointer const & r) const;
     bool operator<=(itkBinaryMarkBranchingPointImageFilterIUS3IUL3_Pointer const & r) const;
     bool operator>=(itkBinaryMarkBranchingPointImageFilterIUS3IUL3_Pointer const & r) const;
     itkBinaryMarkBranchingPointImageFilterIUS3IUL3_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUS3IUL3_Pointer const & r);
     itkBinaryMarkBranchingPointImageFilterIUS3IUL3_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUS3IUL3 * r);
     itkBinaryMarkBranchingPointImageFilterIUS3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBinaryMarkBranchingPointImageFilterIUS3IUS3 : public itkImageToImageFilterIUS3IUS3 {
   public:
     enum  {  ImageDimension = 3 };
     static itkBinaryMarkBranchingPointImageFilterIUS3IUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual unsigned short GetNumberOfLabels() const;
     virtual void SetBackground(unsigned short const _arg);
     virtual unsigned short GetBackground();
     std::vector< itkIndex3 > const & GetIndexes() const;
     itkIndex3 const GetIndex(unsigned int i) const;
   private:
     itkBinaryMarkBranchingPointImageFilterIUS3IUS3(itkBinaryMarkBranchingPointImageFilterIUS3IUS3 const & arg0);
     void operator=(itkBinaryMarkBranchingPointImageFilterIUS3IUS3 const & arg0);
   protected:
     itkBinaryMarkBranchingPointImageFilterIUS3IUS3();
     ~itkBinaryMarkBranchingPointImageFilterIUS3IUS3();
     void Unallocate();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & arg0, itkIndent arg1) const;
     virtual void GenerateData();
     void AllocateOutputImage();
     unsigned int CountConnectedComponents(std::vector< itkIndex3 > & arg0) const;
 };


 class itkBinaryMarkBranchingPointImageFilterIUS3IUS3_Pointer {
   public:
     itkBinaryMarkBranchingPointImageFilterIUS3IUS3_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUS3IUS3_Pointer(itkBinaryMarkBranchingPointImageFilterIUS3IUS3_Pointer const & p);
     itkBinaryMarkBranchingPointImageFilterIUS3IUS3_Pointer(itkBinaryMarkBranchingPointImageFilterIUS3IUS3 * p);
     ~itkBinaryMarkBranchingPointImageFilterIUS3IUS3_Pointer();
     itkBinaryMarkBranchingPointImageFilterIUS3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBinaryMarkBranchingPointImageFilterIUS3IUS3 * GetPointer() const;
     bool operator<(itkBinaryMarkBranchingPointImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>(itkBinaryMarkBranchingPointImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator<=(itkBinaryMarkBranchingPointImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>=(itkBinaryMarkBranchingPointImageFilterIUS3IUS3_Pointer const & r) const;
     itkBinaryMarkBranchingPointImageFilterIUS3IUS3_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUS3IUS3_Pointer const & r);
     itkBinaryMarkBranchingPointImageFilterIUS3IUS3_Pointer & operator=(itkBinaryMarkBranchingPointImageFilterIUS3IUS3 * r);
     itkBinaryMarkBranchingPointImageFilterIUS3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


