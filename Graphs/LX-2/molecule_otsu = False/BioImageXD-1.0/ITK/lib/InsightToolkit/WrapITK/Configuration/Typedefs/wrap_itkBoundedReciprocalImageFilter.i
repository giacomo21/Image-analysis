// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkBoundedReciprocalImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkBoundedReciprocalImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkBoundedReciprocalImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkBoundedReciprocalImageFilterJava
#endif
#ifdef SWIGLUA
%module itkBoundedReciprocalImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkBoundedReciprocalImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkBoundedReciprocalImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkBoundedReciprocalImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkBoundedReciprocalImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkBoundedReciprocalImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkBoundedReciprocalImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkBoundedReciprocalImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkBoundedReciprocalImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkBoundedReciprocalImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkBoundedReciprocalImageFilterPython
#endif
#ifdef SWIGR
%module itkBoundedReciprocalImageFilterR
#endif
#ifdef SWIGRUBY
%module itkBoundedReciprocalImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkBoundedReciprocalImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkBoundedReciprocalImageFilterTcl
#endif
#ifdef SWIGXML
%module itkBoundedReciprocalImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "UnaryPixelMath.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkInPlaceImageFilterA.i
%import wrap_ITKRegions.i


%include itk.i
%include wrap_itkBoundedReciprocalImageFilter_ext.i


 class itkBoundedReciprocalImageFilterID2ID2_Pointer {
   public:
     itkBoundedReciprocalImageFilterID2ID2_Pointer();
     itkBoundedReciprocalImageFilterID2ID2_Pointer(itkBoundedReciprocalImageFilterID2ID2_Pointer const & p);
     itkBoundedReciprocalImageFilterID2ID2_Pointer(itkBoundedReciprocalImageFilterID2ID2 * p);
     ~itkBoundedReciprocalImageFilterID2ID2_Pointer();
     itkBoundedReciprocalImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBoundedReciprocalImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkBoundedReciprocalImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkBoundedReciprocalImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkBoundedReciprocalImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkBoundedReciprocalImageFilterID2ID2_Pointer const & r) const;
     itkBoundedReciprocalImageFilterID2ID2_Pointer & operator=(itkBoundedReciprocalImageFilterID2ID2_Pointer const & r);
     itkBoundedReciprocalImageFilterID2ID2_Pointer & operator=(itkBoundedReciprocalImageFilterID2ID2 * r);
     itkBoundedReciprocalImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBoundedReciprocalImageFilterID2ID2_Superclass : public itkInPlaceImageFilterID2ID2 {
   public:
     static itkBoundedReciprocalImageFilterID2ID2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Functor::BoundedReciprocal< double, double > & GetFunctor();
     itk::Functor::BoundedReciprocal< double, double > const & GetFunctor() const;
     void SetFunctor(itk::Functor::BoundedReciprocal< double, double > const & functor);
   private:
     itkBoundedReciprocalImageFilterID2ID2_Superclass(itkBoundedReciprocalImageFilterID2ID2_Superclass const & arg0);
     void operator=(itkBoundedReciprocalImageFilterID2ID2_Superclass const & arg0);
   protected:
     itkBoundedReciprocalImageFilterID2ID2_Superclass();
     ~itkBoundedReciprocalImageFilterID2ID2_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkBoundedReciprocalImageFilterID2ID2_Superclass_Pointer {
   public:
     itkBoundedReciprocalImageFilterID2ID2_Superclass_Pointer();
     itkBoundedReciprocalImageFilterID2ID2_Superclass_Pointer(itkBoundedReciprocalImageFilterID2ID2_Superclass_Pointer const & p);
     itkBoundedReciprocalImageFilterID2ID2_Superclass_Pointer(itkBoundedReciprocalImageFilterID2ID2_Superclass * p);
     ~itkBoundedReciprocalImageFilterID2ID2_Superclass_Pointer();
     itkBoundedReciprocalImageFilterID2ID2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBoundedReciprocalImageFilterID2ID2_Superclass * GetPointer() const;
     bool operator<(itkBoundedReciprocalImageFilterID2ID2_Superclass_Pointer const & r) const;
     bool operator>(itkBoundedReciprocalImageFilterID2ID2_Superclass_Pointer const & r) const;
     bool operator<=(itkBoundedReciprocalImageFilterID2ID2_Superclass_Pointer const & r) const;
     bool operator>=(itkBoundedReciprocalImageFilterID2ID2_Superclass_Pointer const & r) const;
     itkBoundedReciprocalImageFilterID2ID2_Superclass_Pointer & operator=(itkBoundedReciprocalImageFilterID2ID2_Superclass_Pointer const & r);
     itkBoundedReciprocalImageFilterID2ID2_Superclass_Pointer & operator=(itkBoundedReciprocalImageFilterID2ID2_Superclass * r);
     itkBoundedReciprocalImageFilterID2ID2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBoundedReciprocalImageFilterID3ID3_Pointer {
   public:
     itkBoundedReciprocalImageFilterID3ID3_Pointer();
     itkBoundedReciprocalImageFilterID3ID3_Pointer(itkBoundedReciprocalImageFilterID3ID3_Pointer const & p);
     itkBoundedReciprocalImageFilterID3ID3_Pointer(itkBoundedReciprocalImageFilterID3ID3 * p);
     ~itkBoundedReciprocalImageFilterID3ID3_Pointer();
     itkBoundedReciprocalImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBoundedReciprocalImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkBoundedReciprocalImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkBoundedReciprocalImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkBoundedReciprocalImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkBoundedReciprocalImageFilterID3ID3_Pointer const & r) const;
     itkBoundedReciprocalImageFilterID3ID3_Pointer & operator=(itkBoundedReciprocalImageFilterID3ID3_Pointer const & r);
     itkBoundedReciprocalImageFilterID3ID3_Pointer & operator=(itkBoundedReciprocalImageFilterID3ID3 * r);
     itkBoundedReciprocalImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBoundedReciprocalImageFilterID3ID3_Superclass : public itkInPlaceImageFilterID3ID3 {
   public:
     static itkBoundedReciprocalImageFilterID3ID3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Functor::BoundedReciprocal< double, double > & GetFunctor();
     itk::Functor::BoundedReciprocal< double, double > const & GetFunctor() const;
     void SetFunctor(itk::Functor::BoundedReciprocal< double, double > const & functor);
   private:
     itkBoundedReciprocalImageFilterID3ID3_Superclass(itkBoundedReciprocalImageFilterID3ID3_Superclass const & arg0);
     void operator=(itkBoundedReciprocalImageFilterID3ID3_Superclass const & arg0);
   protected:
     itkBoundedReciprocalImageFilterID3ID3_Superclass();
     ~itkBoundedReciprocalImageFilterID3ID3_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkBoundedReciprocalImageFilterID3ID3_Superclass_Pointer {
   public:
     itkBoundedReciprocalImageFilterID3ID3_Superclass_Pointer();
     itkBoundedReciprocalImageFilterID3ID3_Superclass_Pointer(itkBoundedReciprocalImageFilterID3ID3_Superclass_Pointer const & p);
     itkBoundedReciprocalImageFilterID3ID3_Superclass_Pointer(itkBoundedReciprocalImageFilterID3ID3_Superclass * p);
     ~itkBoundedReciprocalImageFilterID3ID3_Superclass_Pointer();
     itkBoundedReciprocalImageFilterID3ID3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBoundedReciprocalImageFilterID3ID3_Superclass * GetPointer() const;
     bool operator<(itkBoundedReciprocalImageFilterID3ID3_Superclass_Pointer const & r) const;
     bool operator>(itkBoundedReciprocalImageFilterID3ID3_Superclass_Pointer const & r) const;
     bool operator<=(itkBoundedReciprocalImageFilterID3ID3_Superclass_Pointer const & r) const;
     bool operator>=(itkBoundedReciprocalImageFilterID3ID3_Superclass_Pointer const & r) const;
     itkBoundedReciprocalImageFilterID3ID3_Superclass_Pointer & operator=(itkBoundedReciprocalImageFilterID3ID3_Superclass_Pointer const & r);
     itkBoundedReciprocalImageFilterID3ID3_Superclass_Pointer & operator=(itkBoundedReciprocalImageFilterID3ID3_Superclass * r);
     itkBoundedReciprocalImageFilterID3ID3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBoundedReciprocalImageFilterIF2IF2_Pointer {
   public:
     itkBoundedReciprocalImageFilterIF2IF2_Pointer();
     itkBoundedReciprocalImageFilterIF2IF2_Pointer(itkBoundedReciprocalImageFilterIF2IF2_Pointer const & p);
     itkBoundedReciprocalImageFilterIF2IF2_Pointer(itkBoundedReciprocalImageFilterIF2IF2 * p);
     ~itkBoundedReciprocalImageFilterIF2IF2_Pointer();
     itkBoundedReciprocalImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBoundedReciprocalImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkBoundedReciprocalImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkBoundedReciprocalImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkBoundedReciprocalImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkBoundedReciprocalImageFilterIF2IF2_Pointer const & r) const;
     itkBoundedReciprocalImageFilterIF2IF2_Pointer & operator=(itkBoundedReciprocalImageFilterIF2IF2_Pointer const & r);
     itkBoundedReciprocalImageFilterIF2IF2_Pointer & operator=(itkBoundedReciprocalImageFilterIF2IF2 * r);
     itkBoundedReciprocalImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBoundedReciprocalImageFilterIF2IF2_Superclass : public itkInPlaceImageFilterIF2IF2 {
   public:
     static itkBoundedReciprocalImageFilterIF2IF2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Functor::BoundedReciprocal< float, float > & GetFunctor();
     itk::Functor::BoundedReciprocal< float, float > const & GetFunctor() const;
     void SetFunctor(itk::Functor::BoundedReciprocal< float, float > const & functor);
   private:
     itkBoundedReciprocalImageFilterIF2IF2_Superclass(itkBoundedReciprocalImageFilterIF2IF2_Superclass const & arg0);
     void operator=(itkBoundedReciprocalImageFilterIF2IF2_Superclass const & arg0);
   protected:
     itkBoundedReciprocalImageFilterIF2IF2_Superclass();
     ~itkBoundedReciprocalImageFilterIF2IF2_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkBoundedReciprocalImageFilterIF2IF2_Superclass_Pointer {
   public:
     itkBoundedReciprocalImageFilterIF2IF2_Superclass_Pointer();
     itkBoundedReciprocalImageFilterIF2IF2_Superclass_Pointer(itkBoundedReciprocalImageFilterIF2IF2_Superclass_Pointer const & p);
     itkBoundedReciprocalImageFilterIF2IF2_Superclass_Pointer(itkBoundedReciprocalImageFilterIF2IF2_Superclass * p);
     ~itkBoundedReciprocalImageFilterIF2IF2_Superclass_Pointer();
     itkBoundedReciprocalImageFilterIF2IF2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBoundedReciprocalImageFilterIF2IF2_Superclass * GetPointer() const;
     bool operator<(itkBoundedReciprocalImageFilterIF2IF2_Superclass_Pointer const & r) const;
     bool operator>(itkBoundedReciprocalImageFilterIF2IF2_Superclass_Pointer const & r) const;
     bool operator<=(itkBoundedReciprocalImageFilterIF2IF2_Superclass_Pointer const & r) const;
     bool operator>=(itkBoundedReciprocalImageFilterIF2IF2_Superclass_Pointer const & r) const;
     itkBoundedReciprocalImageFilterIF2IF2_Superclass_Pointer & operator=(itkBoundedReciprocalImageFilterIF2IF2_Superclass_Pointer const & r);
     itkBoundedReciprocalImageFilterIF2IF2_Superclass_Pointer & operator=(itkBoundedReciprocalImageFilterIF2IF2_Superclass * r);
     itkBoundedReciprocalImageFilterIF2IF2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBoundedReciprocalImageFilterIF3IF3_Pointer {
   public:
     itkBoundedReciprocalImageFilterIF3IF3_Pointer();
     itkBoundedReciprocalImageFilterIF3IF3_Pointer(itkBoundedReciprocalImageFilterIF3IF3_Pointer const & p);
     itkBoundedReciprocalImageFilterIF3IF3_Pointer(itkBoundedReciprocalImageFilterIF3IF3 * p);
     ~itkBoundedReciprocalImageFilterIF3IF3_Pointer();
     itkBoundedReciprocalImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBoundedReciprocalImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkBoundedReciprocalImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkBoundedReciprocalImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkBoundedReciprocalImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkBoundedReciprocalImageFilterIF3IF3_Pointer const & r) const;
     itkBoundedReciprocalImageFilterIF3IF3_Pointer & operator=(itkBoundedReciprocalImageFilterIF3IF3_Pointer const & r);
     itkBoundedReciprocalImageFilterIF3IF3_Pointer & operator=(itkBoundedReciprocalImageFilterIF3IF3 * r);
     itkBoundedReciprocalImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBoundedReciprocalImageFilterIF3IF3_Superclass : public itkInPlaceImageFilterIF3IF3 {
   public:
     static itkBoundedReciprocalImageFilterIF3IF3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Functor::BoundedReciprocal< float, float > & GetFunctor();
     itk::Functor::BoundedReciprocal< float, float > const & GetFunctor() const;
     void SetFunctor(itk::Functor::BoundedReciprocal< float, float > const & functor);
   private:
     itkBoundedReciprocalImageFilterIF3IF3_Superclass(itkBoundedReciprocalImageFilterIF3IF3_Superclass const & arg0);
     void operator=(itkBoundedReciprocalImageFilterIF3IF3_Superclass const & arg0);
   protected:
     itkBoundedReciprocalImageFilterIF3IF3_Superclass();
     ~itkBoundedReciprocalImageFilterIF3IF3_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkBoundedReciprocalImageFilterIF3IF3_Superclass_Pointer {
   public:
     itkBoundedReciprocalImageFilterIF3IF3_Superclass_Pointer();
     itkBoundedReciprocalImageFilterIF3IF3_Superclass_Pointer(itkBoundedReciprocalImageFilterIF3IF3_Superclass_Pointer const & p);
     itkBoundedReciprocalImageFilterIF3IF3_Superclass_Pointer(itkBoundedReciprocalImageFilterIF3IF3_Superclass * p);
     ~itkBoundedReciprocalImageFilterIF3IF3_Superclass_Pointer();
     itkBoundedReciprocalImageFilterIF3IF3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBoundedReciprocalImageFilterIF3IF3_Superclass * GetPointer() const;
     bool operator<(itkBoundedReciprocalImageFilterIF3IF3_Superclass_Pointer const & r) const;
     bool operator>(itkBoundedReciprocalImageFilterIF3IF3_Superclass_Pointer const & r) const;
     bool operator<=(itkBoundedReciprocalImageFilterIF3IF3_Superclass_Pointer const & r) const;
     bool operator>=(itkBoundedReciprocalImageFilterIF3IF3_Superclass_Pointer const & r) const;
     itkBoundedReciprocalImageFilterIF3IF3_Superclass_Pointer & operator=(itkBoundedReciprocalImageFilterIF3IF3_Superclass_Pointer const & r);
     itkBoundedReciprocalImageFilterIF3IF3_Superclass_Pointer & operator=(itkBoundedReciprocalImageFilterIF3IF3_Superclass * r);
     itkBoundedReciprocalImageFilterIF3IF3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBoundedReciprocalImageFilterIUC2IUC2_Pointer {
   public:
     itkBoundedReciprocalImageFilterIUC2IUC2_Pointer();
     itkBoundedReciprocalImageFilterIUC2IUC2_Pointer(itkBoundedReciprocalImageFilterIUC2IUC2_Pointer const & p);
     itkBoundedReciprocalImageFilterIUC2IUC2_Pointer(itkBoundedReciprocalImageFilterIUC2IUC2 * p);
     ~itkBoundedReciprocalImageFilterIUC2IUC2_Pointer();
     itkBoundedReciprocalImageFilterIUC2IUC2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBoundedReciprocalImageFilterIUC2IUC2 * GetPointer() const;
     bool operator<(itkBoundedReciprocalImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>(itkBoundedReciprocalImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator<=(itkBoundedReciprocalImageFilterIUC2IUC2_Pointer const & r) const;
     bool operator>=(itkBoundedReciprocalImageFilterIUC2IUC2_Pointer const & r) const;
     itkBoundedReciprocalImageFilterIUC2IUC2_Pointer & operator=(itkBoundedReciprocalImageFilterIUC2IUC2_Pointer const & r);
     itkBoundedReciprocalImageFilterIUC2IUC2_Pointer & operator=(itkBoundedReciprocalImageFilterIUC2IUC2 * r);
     itkBoundedReciprocalImageFilterIUC2IUC2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBoundedReciprocalImageFilterIUC2IUC2_Superclass : public itkInPlaceImageFilterIUC2IUC2 {
   public:
     static itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Functor::BoundedReciprocal< unsigned char, unsigned char > & GetFunctor();
     itk::Functor::BoundedReciprocal< unsigned char, unsigned char > const & GetFunctor() const;
     void SetFunctor(itk::Functor::BoundedReciprocal< unsigned char, unsigned char > const & functor);
   private:
     itkBoundedReciprocalImageFilterIUC2IUC2_Superclass(itkBoundedReciprocalImageFilterIUC2IUC2_Superclass const & arg0);
     void operator=(itkBoundedReciprocalImageFilterIUC2IUC2_Superclass const & arg0);
   protected:
     itkBoundedReciprocalImageFilterIUC2IUC2_Superclass();
     ~itkBoundedReciprocalImageFilterIUC2IUC2_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_Pointer {
   public:
     itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_Pointer();
     itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_Pointer(itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_Pointer const & p);
     itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_Pointer(itkBoundedReciprocalImageFilterIUC2IUC2_Superclass * p);
     ~itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_Pointer();
     itkBoundedReciprocalImageFilterIUC2IUC2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBoundedReciprocalImageFilterIUC2IUC2_Superclass * GetPointer() const;
     bool operator<(itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_Pointer const & r) const;
     bool operator>(itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_Pointer const & r) const;
     bool operator<=(itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_Pointer const & r) const;
     bool operator>=(itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_Pointer const & r) const;
     itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_Pointer & operator=(itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_Pointer const & r);
     itkBoundedReciprocalImageFilterIUC2IUC2_Superclass_Pointer & operator=(itkBoundedReciprocalImageFilterIUC2IUC2_Superclass * r);
     itkBoundedReciprocalImageFilterIUC2IUC2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBoundedReciprocalImageFilterIUC3IUC3_Pointer {
   public:
     itkBoundedReciprocalImageFilterIUC3IUC3_Pointer();
     itkBoundedReciprocalImageFilterIUC3IUC3_Pointer(itkBoundedReciprocalImageFilterIUC3IUC3_Pointer const & p);
     itkBoundedReciprocalImageFilterIUC3IUC3_Pointer(itkBoundedReciprocalImageFilterIUC3IUC3 * p);
     ~itkBoundedReciprocalImageFilterIUC3IUC3_Pointer();
     itkBoundedReciprocalImageFilterIUC3IUC3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBoundedReciprocalImageFilterIUC3IUC3 * GetPointer() const;
     bool operator<(itkBoundedReciprocalImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>(itkBoundedReciprocalImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator<=(itkBoundedReciprocalImageFilterIUC3IUC3_Pointer const & r) const;
     bool operator>=(itkBoundedReciprocalImageFilterIUC3IUC3_Pointer const & r) const;
     itkBoundedReciprocalImageFilterIUC3IUC3_Pointer & operator=(itkBoundedReciprocalImageFilterIUC3IUC3_Pointer const & r);
     itkBoundedReciprocalImageFilterIUC3IUC3_Pointer & operator=(itkBoundedReciprocalImageFilterIUC3IUC3 * r);
     itkBoundedReciprocalImageFilterIUC3IUC3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBoundedReciprocalImageFilterIUC3IUC3_Superclass : public itkInPlaceImageFilterIUC3IUC3 {
   public:
     static itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Functor::BoundedReciprocal< unsigned char, unsigned char > & GetFunctor();
     itk::Functor::BoundedReciprocal< unsigned char, unsigned char > const & GetFunctor() const;
     void SetFunctor(itk::Functor::BoundedReciprocal< unsigned char, unsigned char > const & functor);
   private:
     itkBoundedReciprocalImageFilterIUC3IUC3_Superclass(itkBoundedReciprocalImageFilterIUC3IUC3_Superclass const & arg0);
     void operator=(itkBoundedReciprocalImageFilterIUC3IUC3_Superclass const & arg0);
   protected:
     itkBoundedReciprocalImageFilterIUC3IUC3_Superclass();
     ~itkBoundedReciprocalImageFilterIUC3IUC3_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_Pointer {
   public:
     itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_Pointer();
     itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_Pointer(itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_Pointer const & p);
     itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_Pointer(itkBoundedReciprocalImageFilterIUC3IUC3_Superclass * p);
     ~itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_Pointer();
     itkBoundedReciprocalImageFilterIUC3IUC3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBoundedReciprocalImageFilterIUC3IUC3_Superclass * GetPointer() const;
     bool operator<(itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_Pointer const & r) const;
     bool operator>(itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_Pointer const & r) const;
     bool operator<=(itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_Pointer const & r) const;
     bool operator>=(itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_Pointer const & r) const;
     itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_Pointer & operator=(itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_Pointer const & r);
     itkBoundedReciprocalImageFilterIUC3IUC3_Superclass_Pointer & operator=(itkBoundedReciprocalImageFilterIUC3IUC3_Superclass * r);
     itkBoundedReciprocalImageFilterIUC3IUC3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBoundedReciprocalImageFilterIUL2IUL2_Pointer {
   public:
     itkBoundedReciprocalImageFilterIUL2IUL2_Pointer();
     itkBoundedReciprocalImageFilterIUL2IUL2_Pointer(itkBoundedReciprocalImageFilterIUL2IUL2_Pointer const & p);
     itkBoundedReciprocalImageFilterIUL2IUL2_Pointer(itkBoundedReciprocalImageFilterIUL2IUL2 * p);
     ~itkBoundedReciprocalImageFilterIUL2IUL2_Pointer();
     itkBoundedReciprocalImageFilterIUL2IUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBoundedReciprocalImageFilterIUL2IUL2 * GetPointer() const;
     bool operator<(itkBoundedReciprocalImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>(itkBoundedReciprocalImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator<=(itkBoundedReciprocalImageFilterIUL2IUL2_Pointer const & r) const;
     bool operator>=(itkBoundedReciprocalImageFilterIUL2IUL2_Pointer const & r) const;
     itkBoundedReciprocalImageFilterIUL2IUL2_Pointer & operator=(itkBoundedReciprocalImageFilterIUL2IUL2_Pointer const & r);
     itkBoundedReciprocalImageFilterIUL2IUL2_Pointer & operator=(itkBoundedReciprocalImageFilterIUL2IUL2 * r);
     itkBoundedReciprocalImageFilterIUL2IUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBoundedReciprocalImageFilterIUL2IUL2_Superclass : public itkInPlaceImageFilterIUL2IUL2 {
   public:
     static itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Functor::BoundedReciprocal< unsigned long, unsigned long > & GetFunctor();
     itk::Functor::BoundedReciprocal< unsigned long, unsigned long > const & GetFunctor() const;
     void SetFunctor(itk::Functor::BoundedReciprocal< unsigned long, unsigned long > const & functor);
   private:
     itkBoundedReciprocalImageFilterIUL2IUL2_Superclass(itkBoundedReciprocalImageFilterIUL2IUL2_Superclass const & arg0);
     void operator=(itkBoundedReciprocalImageFilterIUL2IUL2_Superclass const & arg0);
   protected:
     itkBoundedReciprocalImageFilterIUL2IUL2_Superclass();
     ~itkBoundedReciprocalImageFilterIUL2IUL2_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_Pointer {
   public:
     itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_Pointer();
     itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_Pointer(itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_Pointer const & p);
     itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_Pointer(itkBoundedReciprocalImageFilterIUL2IUL2_Superclass * p);
     ~itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_Pointer();
     itkBoundedReciprocalImageFilterIUL2IUL2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBoundedReciprocalImageFilterIUL2IUL2_Superclass * GetPointer() const;
     bool operator<(itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_Pointer const & r) const;
     bool operator>(itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_Pointer const & r) const;
     bool operator<=(itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_Pointer const & r) const;
     bool operator>=(itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_Pointer const & r) const;
     itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_Pointer & operator=(itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_Pointer const & r);
     itkBoundedReciprocalImageFilterIUL2IUL2_Superclass_Pointer & operator=(itkBoundedReciprocalImageFilterIUL2IUL2_Superclass * r);
     itkBoundedReciprocalImageFilterIUL2IUL2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBoundedReciprocalImageFilterIUL3IUL3_Pointer {
   public:
     itkBoundedReciprocalImageFilterIUL3IUL3_Pointer();
     itkBoundedReciprocalImageFilterIUL3IUL3_Pointer(itkBoundedReciprocalImageFilterIUL3IUL3_Pointer const & p);
     itkBoundedReciprocalImageFilterIUL3IUL3_Pointer(itkBoundedReciprocalImageFilterIUL3IUL3 * p);
     ~itkBoundedReciprocalImageFilterIUL3IUL3_Pointer();
     itkBoundedReciprocalImageFilterIUL3IUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBoundedReciprocalImageFilterIUL3IUL3 * GetPointer() const;
     bool operator<(itkBoundedReciprocalImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>(itkBoundedReciprocalImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator<=(itkBoundedReciprocalImageFilterIUL3IUL3_Pointer const & r) const;
     bool operator>=(itkBoundedReciprocalImageFilterIUL3IUL3_Pointer const & r) const;
     itkBoundedReciprocalImageFilterIUL3IUL3_Pointer & operator=(itkBoundedReciprocalImageFilterIUL3IUL3_Pointer const & r);
     itkBoundedReciprocalImageFilterIUL3IUL3_Pointer & operator=(itkBoundedReciprocalImageFilterIUL3IUL3 * r);
     itkBoundedReciprocalImageFilterIUL3IUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBoundedReciprocalImageFilterIUL3IUL3_Superclass : public itkInPlaceImageFilterIUL3IUL3 {
   public:
     static itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Functor::BoundedReciprocal< unsigned long, unsigned long > & GetFunctor();
     itk::Functor::BoundedReciprocal< unsigned long, unsigned long > const & GetFunctor() const;
     void SetFunctor(itk::Functor::BoundedReciprocal< unsigned long, unsigned long > const & functor);
   private:
     itkBoundedReciprocalImageFilterIUL3IUL3_Superclass(itkBoundedReciprocalImageFilterIUL3IUL3_Superclass const & arg0);
     void operator=(itkBoundedReciprocalImageFilterIUL3IUL3_Superclass const & arg0);
   protected:
     itkBoundedReciprocalImageFilterIUL3IUL3_Superclass();
     ~itkBoundedReciprocalImageFilterIUL3IUL3_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_Pointer {
   public:
     itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_Pointer();
     itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_Pointer(itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_Pointer const & p);
     itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_Pointer(itkBoundedReciprocalImageFilterIUL3IUL3_Superclass * p);
     ~itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_Pointer();
     itkBoundedReciprocalImageFilterIUL3IUL3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBoundedReciprocalImageFilterIUL3IUL3_Superclass * GetPointer() const;
     bool operator<(itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_Pointer const & r) const;
     bool operator>(itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_Pointer const & r) const;
     bool operator<=(itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_Pointer const & r) const;
     bool operator>=(itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_Pointer const & r) const;
     itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_Pointer & operator=(itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_Pointer const & r);
     itkBoundedReciprocalImageFilterIUL3IUL3_Superclass_Pointer & operator=(itkBoundedReciprocalImageFilterIUL3IUL3_Superclass * r);
     itkBoundedReciprocalImageFilterIUL3IUL3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBoundedReciprocalImageFilterIUS2IUS2_Pointer {
   public:
     itkBoundedReciprocalImageFilterIUS2IUS2_Pointer();
     itkBoundedReciprocalImageFilterIUS2IUS2_Pointer(itkBoundedReciprocalImageFilterIUS2IUS2_Pointer const & p);
     itkBoundedReciprocalImageFilterIUS2IUS2_Pointer(itkBoundedReciprocalImageFilterIUS2IUS2 * p);
     ~itkBoundedReciprocalImageFilterIUS2IUS2_Pointer();
     itkBoundedReciprocalImageFilterIUS2IUS2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBoundedReciprocalImageFilterIUS2IUS2 * GetPointer() const;
     bool operator<(itkBoundedReciprocalImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>(itkBoundedReciprocalImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator<=(itkBoundedReciprocalImageFilterIUS2IUS2_Pointer const & r) const;
     bool operator>=(itkBoundedReciprocalImageFilterIUS2IUS2_Pointer const & r) const;
     itkBoundedReciprocalImageFilterIUS2IUS2_Pointer & operator=(itkBoundedReciprocalImageFilterIUS2IUS2_Pointer const & r);
     itkBoundedReciprocalImageFilterIUS2IUS2_Pointer & operator=(itkBoundedReciprocalImageFilterIUS2IUS2 * r);
     itkBoundedReciprocalImageFilterIUS2IUS2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBoundedReciprocalImageFilterIUS2IUS2_Superclass : public itkInPlaceImageFilterIUS2IUS2 {
   public:
     static itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Functor::BoundedReciprocal< unsigned short, unsigned short > & GetFunctor();
     itk::Functor::BoundedReciprocal< unsigned short, unsigned short > const & GetFunctor() const;
     void SetFunctor(itk::Functor::BoundedReciprocal< unsigned short, unsigned short > const & functor);
   private:
     itkBoundedReciprocalImageFilterIUS2IUS2_Superclass(itkBoundedReciprocalImageFilterIUS2IUS2_Superclass const & arg0);
     void operator=(itkBoundedReciprocalImageFilterIUS2IUS2_Superclass const & arg0);
   protected:
     itkBoundedReciprocalImageFilterIUS2IUS2_Superclass();
     ~itkBoundedReciprocalImageFilterIUS2IUS2_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion2 const & outputRegionForThread, int threadId);
 };


 class itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_Pointer {
   public:
     itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_Pointer();
     itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_Pointer(itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_Pointer const & p);
     itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_Pointer(itkBoundedReciprocalImageFilterIUS2IUS2_Superclass * p);
     ~itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_Pointer();
     itkBoundedReciprocalImageFilterIUS2IUS2_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBoundedReciprocalImageFilterIUS2IUS2_Superclass * GetPointer() const;
     bool operator<(itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_Pointer const & r) const;
     bool operator>(itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_Pointer const & r) const;
     bool operator<=(itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_Pointer const & r) const;
     bool operator>=(itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_Pointer const & r) const;
     itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_Pointer & operator=(itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_Pointer const & r);
     itkBoundedReciprocalImageFilterIUS2IUS2_Superclass_Pointer & operator=(itkBoundedReciprocalImageFilterIUS2IUS2_Superclass * r);
     itkBoundedReciprocalImageFilterIUS2IUS2_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBoundedReciprocalImageFilterIUS3IUS3_Pointer {
   public:
     itkBoundedReciprocalImageFilterIUS3IUS3_Pointer();
     itkBoundedReciprocalImageFilterIUS3IUS3_Pointer(itkBoundedReciprocalImageFilterIUS3IUS3_Pointer const & p);
     itkBoundedReciprocalImageFilterIUS3IUS3_Pointer(itkBoundedReciprocalImageFilterIUS3IUS3 * p);
     ~itkBoundedReciprocalImageFilterIUS3IUS3_Pointer();
     itkBoundedReciprocalImageFilterIUS3IUS3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBoundedReciprocalImageFilterIUS3IUS3 * GetPointer() const;
     bool operator<(itkBoundedReciprocalImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>(itkBoundedReciprocalImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator<=(itkBoundedReciprocalImageFilterIUS3IUS3_Pointer const & r) const;
     bool operator>=(itkBoundedReciprocalImageFilterIUS3IUS3_Pointer const & r) const;
     itkBoundedReciprocalImageFilterIUS3IUS3_Pointer & operator=(itkBoundedReciprocalImageFilterIUS3IUS3_Pointer const & r);
     itkBoundedReciprocalImageFilterIUS3IUS3_Pointer & operator=(itkBoundedReciprocalImageFilterIUS3IUS3 * r);
     itkBoundedReciprocalImageFilterIUS3IUS3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBoundedReciprocalImageFilterIUS3IUS3_Superclass : public itkInPlaceImageFilterIUS3IUS3 {
   public:
     static itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     itk::Functor::BoundedReciprocal< unsigned short, unsigned short > & GetFunctor();
     itk::Functor::BoundedReciprocal< unsigned short, unsigned short > const & GetFunctor() const;
     void SetFunctor(itk::Functor::BoundedReciprocal< unsigned short, unsigned short > const & functor);
   private:
     itkBoundedReciprocalImageFilterIUS3IUS3_Superclass(itkBoundedReciprocalImageFilterIUS3IUS3_Superclass const & arg0);
     void operator=(itkBoundedReciprocalImageFilterIUS3IUS3_Superclass const & arg0);
   protected:
     itkBoundedReciprocalImageFilterIUS3IUS3_Superclass();
     ~itkBoundedReciprocalImageFilterIUS3IUS3_Superclass();
     virtual void GenerateOutputInformation();
     virtual void ThreadedGenerateData(itkImageRegion3 const & outputRegionForThread, int threadId);
 };


 class itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_Pointer {
   public:
     itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_Pointer();
     itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_Pointer(itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_Pointer const & p);
     itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_Pointer(itkBoundedReciprocalImageFilterIUS3IUS3_Superclass * p);
     ~itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_Pointer();
     itkBoundedReciprocalImageFilterIUS3IUS3_Superclass * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkBoundedReciprocalImageFilterIUS3IUS3_Superclass * GetPointer() const;
     bool operator<(itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_Pointer const & r) const;
     bool operator>(itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_Pointer const & r) const;
     bool operator<=(itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_Pointer const & r) const;
     bool operator>=(itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_Pointer const & r) const;
     itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_Pointer & operator=(itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_Pointer const & r);
     itkBoundedReciprocalImageFilterIUS3IUS3_Superclass_Pointer & operator=(itkBoundedReciprocalImageFilterIUS3IUS3_Superclass * r);
     itkBoundedReciprocalImageFilterIUS3IUS3_Superclass * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkBoundedReciprocalImageFilterID2ID2 : public itkBoundedReciprocalImageFilterID2ID2_Superclass {
   public:
     enum  {  InputConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     static itkBoundedReciprocalImageFilterID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkBoundedReciprocalImageFilterID2ID2(itkBoundedReciprocalImageFilterID2ID2 const & arg0);
     void operator=(itkBoundedReciprocalImageFilterID2ID2 const & arg0);
   protected:
     itkBoundedReciprocalImageFilterID2ID2();
     ~itkBoundedReciprocalImageFilterID2ID2();
 };


 class itkBoundedReciprocalImageFilterID3ID3 : public itkBoundedReciprocalImageFilterID3ID3_Superclass {
   public:
     enum  {  InputConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     static itkBoundedReciprocalImageFilterID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkBoundedReciprocalImageFilterID3ID3(itkBoundedReciprocalImageFilterID3ID3 const & arg0);
     void operator=(itkBoundedReciprocalImageFilterID3ID3 const & arg0);
   protected:
     itkBoundedReciprocalImageFilterID3ID3();
     ~itkBoundedReciprocalImageFilterID3ID3();
 };


 class itkBoundedReciprocalImageFilterIF2IF2 : public itkBoundedReciprocalImageFilterIF2IF2_Superclass {
   public:
     enum  {  InputConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     static itkBoundedReciprocalImageFilterIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkBoundedReciprocalImageFilterIF2IF2(itkBoundedReciprocalImageFilterIF2IF2 const & arg0);
     void operator=(itkBoundedReciprocalImageFilterIF2IF2 const & arg0);
   protected:
     itkBoundedReciprocalImageFilterIF2IF2();
     ~itkBoundedReciprocalImageFilterIF2IF2();
 };


 class itkBoundedReciprocalImageFilterIF3IF3 : public itkBoundedReciprocalImageFilterIF3IF3_Superclass {
   public:
     enum  {  InputConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     static itkBoundedReciprocalImageFilterIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkBoundedReciprocalImageFilterIF3IF3(itkBoundedReciprocalImageFilterIF3IF3 const & arg0);
     void operator=(itkBoundedReciprocalImageFilterIF3IF3 const & arg0);
   protected:
     itkBoundedReciprocalImageFilterIF3IF3();
     ~itkBoundedReciprocalImageFilterIF3IF3();
 };


 class itkBoundedReciprocalImageFilterIUC2IUC2 : public itkBoundedReciprocalImageFilterIUC2IUC2_Superclass {
   public:
     enum  {  InputConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     static itkBoundedReciprocalImageFilterIUC2IUC2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkBoundedReciprocalImageFilterIUC2IUC2(itkBoundedReciprocalImageFilterIUC2IUC2 const & arg0);
     void operator=(itkBoundedReciprocalImageFilterIUC2IUC2 const & arg0);
   protected:
     itkBoundedReciprocalImageFilterIUC2IUC2();
     ~itkBoundedReciprocalImageFilterIUC2IUC2();
 };


 class itkBoundedReciprocalImageFilterIUC3IUC3 : public itkBoundedReciprocalImageFilterIUC3IUC3_Superclass {
   public:
     enum  {  InputConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     static itkBoundedReciprocalImageFilterIUC3IUC3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkBoundedReciprocalImageFilterIUC3IUC3(itkBoundedReciprocalImageFilterIUC3IUC3 const & arg0);
     void operator=(itkBoundedReciprocalImageFilterIUC3IUC3 const & arg0);
   protected:
     itkBoundedReciprocalImageFilterIUC3IUC3();
     ~itkBoundedReciprocalImageFilterIUC3IUC3();
 };


 class itkBoundedReciprocalImageFilterIUL2IUL2 : public itkBoundedReciprocalImageFilterIUL2IUL2_Superclass {
   public:
     enum  {  InputConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     static itkBoundedReciprocalImageFilterIUL2IUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkBoundedReciprocalImageFilterIUL2IUL2(itkBoundedReciprocalImageFilterIUL2IUL2 const & arg0);
     void operator=(itkBoundedReciprocalImageFilterIUL2IUL2 const & arg0);
   protected:
     itkBoundedReciprocalImageFilterIUL2IUL2();
     ~itkBoundedReciprocalImageFilterIUL2IUL2();
 };


 class itkBoundedReciprocalImageFilterIUL3IUL3 : public itkBoundedReciprocalImageFilterIUL3IUL3_Superclass {
   public:
     enum  {  InputConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     static itkBoundedReciprocalImageFilterIUL3IUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkBoundedReciprocalImageFilterIUL3IUL3(itkBoundedReciprocalImageFilterIUL3IUL3 const & arg0);
     void operator=(itkBoundedReciprocalImageFilterIUL3IUL3 const & arg0);
   protected:
     itkBoundedReciprocalImageFilterIUL3IUL3();
     ~itkBoundedReciprocalImageFilterIUL3IUL3();
 };


 class itkBoundedReciprocalImageFilterIUS2IUS2 : public itkBoundedReciprocalImageFilterIUS2IUS2_Superclass {
   public:
     enum  {  InputConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     static itkBoundedReciprocalImageFilterIUS2IUS2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkBoundedReciprocalImageFilterIUS2IUS2(itkBoundedReciprocalImageFilterIUS2IUS2 const & arg0);
     void operator=(itkBoundedReciprocalImageFilterIUS2IUS2 const & arg0);
   protected:
     itkBoundedReciprocalImageFilterIUS2IUS2();
     ~itkBoundedReciprocalImageFilterIUS2IUS2();
 };


 class itkBoundedReciprocalImageFilterIUS3IUS3 : public itkBoundedReciprocalImageFilterIUS3IUS3_Superclass {
   public:
     enum  {  InputConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToOutputCheck = 1 };
     static itkBoundedReciprocalImageFilterIUS3IUS3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
   private:
     itkBoundedReciprocalImageFilterIUS3IUS3(itkBoundedReciprocalImageFilterIUS3IUS3 const & arg0);
     void operator=(itkBoundedReciprocalImageFilterIUS3IUS3 const & arg0);
   protected:
     itkBoundedReciprocalImageFilterIUS3IUS3();
     ~itkBoundedReciprocalImageFilterIUS3IUS3();
 };


