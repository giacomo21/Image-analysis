# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _ITKRigidPerspectiveTransformPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ITKRigidPerspectiveTransformPython', [dirname(__file__)])
        except ImportError:
            import _ITKRigidPerspectiveTransformPython
            return _ITKRigidPerspectiveTransformPython
        if fp is not None:
            try:
                _mod = imp.load_module('_ITKRigidPerspectiveTransformPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ITKRigidPerspectiveTransformPython = swig_import_helper()
    del swig_import_helper
else:
    import _ITKRigidPerspectiveTransformPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkPointPython
import vnl_vectorPython
import vcl_complexPython
import pyBasePython
import vnl_matrixPython
import itkFixedArrayPython
import itkVectorPython
import vnl_vector_refPython
import itkVersorPython
import itkCovariantVectorPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkTransformPython
import itkArray2DPython
import itkArrayPython
import ITKCommonBasePython
import itkEventObjectsPython
def itkRigid3DPerspectiveTransformD_New():
  return itkRigid3DPerspectiveTransformD.New()

class itkRigid3DPerspectiveTransformD(itkTransformPython.itkTransformD32):
    """Proxy of C++ itkRigid3DPerspectiveTransformD class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    InputSpaceDimension = _ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_InputSpaceDimension
    OutputSpaceDimension = _ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_OutputSpaceDimension
    SpaceDimension = _ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_SpaceDimension
    ParametersDimension = _ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_ParametersDimension
    def __New_orig__():
        """__New_orig__()"""
        return _ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD___New_orig__()

    __New_orig__ = staticmethod(__New_orig__)
    def GetOffset(self):
        """GetOffset(self) -> itkVectorD3"""
        return _ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_GetOffset(self)

    def GetRotation(self):
        """GetRotation(self) -> itkVersorD"""
        return _ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_GetRotation(self)

    def SetOffset(self, *args):
        """SetOffset(self, itkVectorD3 offset)"""
        return _ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_SetOffset(self, *args)

    def SetRotation(self, *args):
        """
        SetRotation(self, itkVersorD rotation)
        SetRotation(self, itkVectorD3 axis, double angle)
        """
        return _ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_SetRotation(self, *args)

    def SetFocalDistance(self, *args):
        """SetFocalDistance(self, double focalDistance)"""
        return _ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_SetFocalDistance(self, *args)

    def GetFocalDistance(self):
        """GetFocalDistance(self) -> double"""
        return _ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_GetFocalDistance(self)

    def GetRotationMatrix(self):
        """GetRotationMatrix(self) -> itkMatrixD33"""
        return _ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_GetRotationMatrix(self)

    def ComputeMatrix(self):
        """ComputeMatrix(self)"""
        return _ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_ComputeMatrix(self)

    def GetFixedOffset(self):
        """GetFixedOffset(self) -> itkVectorD3"""
        return _ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_GetFixedOffset(self)

    def SetFixedOffset(self, *args):
        """SetFixedOffset(self, itkVectorD3 _arg)"""
        return _ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_SetFixedOffset(self, *args)

    def SetCenterOfRotation(self, *args):
        """SetCenterOfRotation(self, itkPointD3 _arg)"""
        return _ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_SetCenterOfRotation(self, *args)

    def GetCenterOfRotation(self):
        """GetCenterOfRotation(self) -> itkPointD3"""
        return _ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_GetCenterOfRotation(self)

    __swig_destroy__ = _ITKRigidPerspectiveTransformPython.delete_itkRigid3DPerspectiveTransformD
    def cast(*args):
        """cast(itkLightObject obj) -> itkRigid3DPerspectiveTransformD"""
        return _ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkRigid3DPerspectiveTransformD"""
        return _ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkRigid3DPerspectiveTransformD
        
        Create a new object of the class itkRigid3DPerspectiveTransformD and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkRigid3DPerspectiveTransformD.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkRigid3DPerspectiveTransformD.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkRigid3DPerspectiveTransformD.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkRigid3DPerspectiveTransformD.GetOffset = new_instancemethod(_ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_GetOffset,None,itkRigid3DPerspectiveTransformD)
itkRigid3DPerspectiveTransformD.GetRotation = new_instancemethod(_ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_GetRotation,None,itkRigid3DPerspectiveTransformD)
itkRigid3DPerspectiveTransformD.SetOffset = new_instancemethod(_ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_SetOffset,None,itkRigid3DPerspectiveTransformD)
itkRigid3DPerspectiveTransformD.SetRotation = new_instancemethod(_ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_SetRotation,None,itkRigid3DPerspectiveTransformD)
itkRigid3DPerspectiveTransformD.SetFocalDistance = new_instancemethod(_ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_SetFocalDistance,None,itkRigid3DPerspectiveTransformD)
itkRigid3DPerspectiveTransformD.GetFocalDistance = new_instancemethod(_ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_GetFocalDistance,None,itkRigid3DPerspectiveTransformD)
itkRigid3DPerspectiveTransformD.GetRotationMatrix = new_instancemethod(_ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_GetRotationMatrix,None,itkRigid3DPerspectiveTransformD)
itkRigid3DPerspectiveTransformD.ComputeMatrix = new_instancemethod(_ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_ComputeMatrix,None,itkRigid3DPerspectiveTransformD)
itkRigid3DPerspectiveTransformD.GetFixedOffset = new_instancemethod(_ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_GetFixedOffset,None,itkRigid3DPerspectiveTransformD)
itkRigid3DPerspectiveTransformD.SetFixedOffset = new_instancemethod(_ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_SetFixedOffset,None,itkRigid3DPerspectiveTransformD)
itkRigid3DPerspectiveTransformD.SetCenterOfRotation = new_instancemethod(_ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_SetCenterOfRotation,None,itkRigid3DPerspectiveTransformD)
itkRigid3DPerspectiveTransformD.GetCenterOfRotation = new_instancemethod(_ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_GetCenterOfRotation,None,itkRigid3DPerspectiveTransformD)
itkRigid3DPerspectiveTransformD.GetPointer = new_instancemethod(_ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_GetPointer,None,itkRigid3DPerspectiveTransformD)
itkRigid3DPerspectiveTransformD_swigregister = _ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_swigregister
itkRigid3DPerspectiveTransformD_swigregister(itkRigid3DPerspectiveTransformD)

def itkRigid3DPerspectiveTransformD___New_orig__():
  """itkRigid3DPerspectiveTransformD___New_orig__()"""
  return _ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD___New_orig__()

def itkRigid3DPerspectiveTransformD_cast(*args):
  """itkRigid3DPerspectiveTransformD_cast(itkLightObject obj) -> itkRigid3DPerspectiveTransformD"""
  return _ITKRigidPerspectiveTransformPython.itkRigid3DPerspectiveTransformD_cast(*args)



