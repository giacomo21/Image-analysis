// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkFlatStructuringElementChicken
#endif
#ifdef SWIGCSHARP
%module itkFlatStructuringElementCsharp
#endif
#ifdef SWIGGUILE
%module itkFlatStructuringElementGuile
#endif
#ifdef SWIGJAVA
%module itkFlatStructuringElementJava
#endif
#ifdef SWIGLUA
%module itkFlatStructuringElementLua
#endif
#ifdef SWIGMODULA3
%module itkFlatStructuringElementModula3
#endif
#ifdef SWIGMZSCHEME
%module itkFlatStructuringElementMzscheme
#endif
#ifdef SWIGOCAML
%module itkFlatStructuringElementOcaml
#endif
#ifdef SWIGPERL
%module itkFlatStructuringElementPerl
#endif
#ifdef SWIGPERL5
%module itkFlatStructuringElementPerl5
#endif
#ifdef SWIGPHP
%module itkFlatStructuringElementPhp
#endif
#ifdef SWIGPHP4
%module itkFlatStructuringElementPhp4
#endif
#ifdef SWIGPHP5
%module itkFlatStructuringElementPhp5
#endif
#ifdef SWIGPIKE
%module itkFlatStructuringElementPike
#endif
#ifdef SWIGPYTHON
%module itkFlatStructuringElementPython
#endif
#ifdef SWIGR
%module itkFlatStructuringElementR
#endif
#ifdef SWIGRUBY
%module itkFlatStructuringElementRuby
#endif
#ifdef SWIGSEXP
%module itkFlatStructuringElementSexp
#endif
#ifdef SWIGTCL
%module itkFlatStructuringElementTcl
#endif
#ifdef SWIGXML
%module itkFlatStructuringElementXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
%}


%{
%}




%import wrap_ITKCommonBase.i
%import wrap_itkSize.i
%import wrap_itkNeighborhood.i
%import wrap_itkVector.i


%include itk.i
%include wrap_itkFlatStructuringElement_ext.i


 class itkFlatStructuringElement2 : public itkNeighborhoodB2 {
   public:
     enum  {  NeighborhoodDimension = 2 };
     itkFlatStructuringElement2 & operator=(itkFlatStructuringElement2 const & arg0);
     itkFlatStructuringElement2(itkFlatStructuringElement2 const & arg0);
     ~itkFlatStructuringElement2();
     itkFlatStructuringElement2();
     static itkFlatStructuringElement2 Box(itkSize2 radius);
     static itkFlatStructuringElement2 Ball(itkSize2 radius);
     static itkFlatStructuringElement2 Cross(itkSize2 radius);
     static itkFlatStructuringElement2 Annulus(itkSize2 radius, unsigned int thickness = 1, bool includeCenter = false);
     static itkFlatStructuringElement2 Poly(itkSize2 radius, unsigned int lines);
     bool GetDecomposable() const;
     std::vector< itkVectorF2 > const & GetLines() const;
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
   private:
     virtual itkFlatStructuringElement2 PolySub(itkFlatStructuringElement2::Dispatch<2u> const & arg0, itkSize2 radius, unsigned int lines) const;
     virtual itkFlatStructuringElement2 PolySub(itkFlatStructuringElement2::Dispatch<3u> const & arg0, itkSize2 radius, unsigned int lines) const;
     virtual itkFlatStructuringElement2 PolySub(itkFlatStructuringElement2::DispatchBase const & arg0, itkSize2 radius, unsigned int lines) const;
     bool checkParallel(itkVectorF2 NewVec, std::vector< itkVectorF2 > Lines);
   protected:
     void ComputeBufferFromLines();
 };


 class itkFlatStructuringElement3 : public itkNeighborhoodB3 {
   public:
     enum  {  NeighborhoodDimension = 3 };
     itkFlatStructuringElement3 & operator=(itkFlatStructuringElement3 const & arg0);
     itkFlatStructuringElement3(itkFlatStructuringElement3 const & arg0);
     ~itkFlatStructuringElement3();
     itkFlatStructuringElement3();
     static itkFlatStructuringElement3 Box(itkSize3 radius);
     static itkFlatStructuringElement3 Ball(itkSize3 radius);
     static itkFlatStructuringElement3 Cross(itkSize3 radius);
     static itkFlatStructuringElement3 Annulus(itkSize3 radius, unsigned int thickness = 1, bool includeCenter = false);
     static itkFlatStructuringElement3 Poly(itkSize3 radius, unsigned int lines);
     bool GetDecomposable() const;
     std::vector< itkVectorF3 > const & GetLines() const;
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
   private:
     virtual itkFlatStructuringElement3 PolySub(itkFlatStructuringElement3::Dispatch<2u> const & arg0, itkSize3 radius, unsigned int lines) const;
     virtual itkFlatStructuringElement3 PolySub(itkFlatStructuringElement3::Dispatch<3u> const & arg0, itkSize3 radius, unsigned int lines) const;
     virtual itkFlatStructuringElement3 PolySub(itkFlatStructuringElement3::DispatchBase const & arg0, itkSize3 radius, unsigned int lines) const;
     bool checkParallel(itkVectorF3 NewVec, std::vector< itkVectorF3 > Lines);
   protected:
     void ComputeBufferFromLines();
 };


