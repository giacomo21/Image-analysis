// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkLevelSetChicken
#endif
#ifdef SWIGCSHARP
%module itkLevelSetCsharp
#endif
#ifdef SWIGGUILE
%module itkLevelSetGuile
#endif
#ifdef SWIGJAVA
%module itkLevelSetJava
#endif
#ifdef SWIGLUA
%module itkLevelSetLua
#endif
#ifdef SWIGMODULA3
%module itkLevelSetModula3
#endif
#ifdef SWIGMZSCHEME
%module itkLevelSetMzscheme
#endif
#ifdef SWIGOCAML
%module itkLevelSetOcaml
#endif
#ifdef SWIGPERL
%module itkLevelSetPerl
#endif
#ifdef SWIGPERL5
%module itkLevelSetPerl5
#endif
#ifdef SWIGPHP
%module itkLevelSetPhp
#endif
#ifdef SWIGPHP4
%module itkLevelSetPhp4
#endif
#ifdef SWIGPHP5
%module itkLevelSetPhp5
#endif
#ifdef SWIGPIKE
%module itkLevelSetPike
#endif
#ifdef SWIGPYTHON
%module itkLevelSetPython
#endif
#ifdef SWIGR
%module itkLevelSetR
#endif
#ifdef SWIGRUBY
%module itkLevelSetRuby
#endif
#ifdef SWIGSEXP
%module itkLevelSetSexp
#endif
#ifdef SWIGTCL
%module itkLevelSetTcl
#endif
#ifdef SWIGXML
%module itkLevelSetXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
%}


%{
%}




%import wrap_itkIndex.i


%include itk.i
%include wrap_itkLevelSet_ext.i


 class itkLevelSetNodeD2 {
   public:
     enum  {  SetDimension = 2 };
     ~itkLevelSetNodeD2();
     bool operator>(itkLevelSetNodeD2 const & node) const;
     bool operator<(itkLevelSetNodeD2 const & node) const;
     bool operator<=(itkLevelSetNodeD2 const & node) const;
     bool operator>=(itkLevelSetNodeD2 const & node) const;
     itkLevelSetNodeD2 & operator=(itkLevelSetNodeD2 const & rhs);
     double & GetValue();
     double const & GetValue() const;
     void SetValue(double const & input);
     itkIndex2 & GetIndex();
     itkIndex2 const & GetIndex() const;
     void SetIndex(itkIndex2 const & input);
     itkLevelSetNodeD2();
     itkLevelSetNodeD2(itkLevelSetNodeD2 const & node);
   private:
   protected:
 };


 class itkLevelSetNodeD3 {
   public:
     enum  {  SetDimension = 3 };
     ~itkLevelSetNodeD3();
     bool operator>(itkLevelSetNodeD3 const & node) const;
     bool operator<(itkLevelSetNodeD3 const & node) const;
     bool operator<=(itkLevelSetNodeD3 const & node) const;
     bool operator>=(itkLevelSetNodeD3 const & node) const;
     itkLevelSetNodeD3 & operator=(itkLevelSetNodeD3 const & rhs);
     double & GetValue();
     double const & GetValue() const;
     void SetValue(double const & input);
     itkIndex3 & GetIndex();
     itkIndex3 const & GetIndex() const;
     void SetIndex(itkIndex3 const & input);
     itkLevelSetNodeD3();
     itkLevelSetNodeD3(itkLevelSetNodeD3 const & node);
   private:
   protected:
 };


 class itkLevelSetNodeF2 {
   public:
     enum  {  SetDimension = 2 };
     ~itkLevelSetNodeF2();
     bool operator>(itkLevelSetNodeF2 const & node) const;
     bool operator<(itkLevelSetNodeF2 const & node) const;
     bool operator<=(itkLevelSetNodeF2 const & node) const;
     bool operator>=(itkLevelSetNodeF2 const & node) const;
     itkLevelSetNodeF2 & operator=(itkLevelSetNodeF2 const & rhs);
     float & GetValue();
     float const & GetValue() const;
     void SetValue(float const & input);
     itkIndex2 & GetIndex();
     itkIndex2 const & GetIndex() const;
     void SetIndex(itkIndex2 const & input);
     itkLevelSetNodeF2();
     itkLevelSetNodeF2(itkLevelSetNodeF2 const & node);
   private:
   protected:
 };


 class itkLevelSetNodeF3 {
   public:
     enum  {  SetDimension = 3 };
     ~itkLevelSetNodeF3();
     bool operator>(itkLevelSetNodeF3 const & node) const;
     bool operator<(itkLevelSetNodeF3 const & node) const;
     bool operator<=(itkLevelSetNodeF3 const & node) const;
     bool operator>=(itkLevelSetNodeF3 const & node) const;
     itkLevelSetNodeF3 & operator=(itkLevelSetNodeF3 const & rhs);
     float & GetValue();
     float const & GetValue() const;
     void SetValue(float const & input);
     itkIndex3 & GetIndex();
     itkIndex3 const & GetIndex() const;
     void SetIndex(itkIndex3 const & input);
     itkLevelSetNodeF3();
     itkLevelSetNodeF3(itkLevelSetNodeF3 const & node);
   private:
   protected:
 };


 class itkLevelSetNodeUC2 {
   public:
     enum  {  SetDimension = 2 };
     ~itkLevelSetNodeUC2();
     bool operator>(itkLevelSetNodeUC2 const & node) const;
     bool operator<(itkLevelSetNodeUC2 const & node) const;
     bool operator<=(itkLevelSetNodeUC2 const & node) const;
     bool operator>=(itkLevelSetNodeUC2 const & node) const;
     itkLevelSetNodeUC2 & operator=(itkLevelSetNodeUC2 const & rhs);
     unsigned char & GetValue();
     unsigned char const & GetValue() const;
     void SetValue(unsigned char const & input);
     itkIndex2 & GetIndex();
     itkIndex2 const & GetIndex() const;
     void SetIndex(itkIndex2 const & input);
     itkLevelSetNodeUC2();
     itkLevelSetNodeUC2(itkLevelSetNodeUC2 const & node);
   private:
   protected:
 };


 class itkLevelSetNodeUC3 {
   public:
     enum  {  SetDimension = 3 };
     ~itkLevelSetNodeUC3();
     bool operator>(itkLevelSetNodeUC3 const & node) const;
     bool operator<(itkLevelSetNodeUC3 const & node) const;
     bool operator<=(itkLevelSetNodeUC3 const & node) const;
     bool operator>=(itkLevelSetNodeUC3 const & node) const;
     itkLevelSetNodeUC3 & operator=(itkLevelSetNodeUC3 const & rhs);
     unsigned char & GetValue();
     unsigned char const & GetValue() const;
     void SetValue(unsigned char const & input);
     itkIndex3 & GetIndex();
     itkIndex3 const & GetIndex() const;
     void SetIndex(itkIndex3 const & input);
     itkLevelSetNodeUC3();
     itkLevelSetNodeUC3(itkLevelSetNodeUC3 const & node);
   private:
   protected:
 };


 class itkLevelSetNodeUL2 {
   public:
     enum  {  SetDimension = 2 };
     ~itkLevelSetNodeUL2();
     bool operator>(itkLevelSetNodeUL2 const & node) const;
     bool operator<(itkLevelSetNodeUL2 const & node) const;
     bool operator<=(itkLevelSetNodeUL2 const & node) const;
     bool operator>=(itkLevelSetNodeUL2 const & node) const;
     itkLevelSetNodeUL2 & operator=(itkLevelSetNodeUL2 const & rhs);
     unsigned long & GetValue();
     unsigned long const & GetValue() const;
     void SetValue(unsigned long const & input);
     itkIndex2 & GetIndex();
     itkIndex2 const & GetIndex() const;
     void SetIndex(itkIndex2 const & input);
     itkLevelSetNodeUL2();
     itkLevelSetNodeUL2(itkLevelSetNodeUL2 const & node);
   private:
   protected:
 };


 class itkLevelSetNodeUL3 {
   public:
     enum  {  SetDimension = 3 };
     ~itkLevelSetNodeUL3();
     bool operator>(itkLevelSetNodeUL3 const & node) const;
     bool operator<(itkLevelSetNodeUL3 const & node) const;
     bool operator<=(itkLevelSetNodeUL3 const & node) const;
     bool operator>=(itkLevelSetNodeUL3 const & node) const;
     itkLevelSetNodeUL3 & operator=(itkLevelSetNodeUL3 const & rhs);
     unsigned long & GetValue();
     unsigned long const & GetValue() const;
     void SetValue(unsigned long const & input);
     itkIndex3 & GetIndex();
     itkIndex3 const & GetIndex() const;
     void SetIndex(itkIndex3 const & input);
     itkLevelSetNodeUL3();
     itkLevelSetNodeUL3(itkLevelSetNodeUL3 const & node);
   private:
   protected:
 };


 class itkLevelSetNodeUS2 {
   public:
     enum  {  SetDimension = 2 };
     ~itkLevelSetNodeUS2();
     bool operator>(itkLevelSetNodeUS2 const & node) const;
     bool operator<(itkLevelSetNodeUS2 const & node) const;
     bool operator<=(itkLevelSetNodeUS2 const & node) const;
     bool operator>=(itkLevelSetNodeUS2 const & node) const;
     itkLevelSetNodeUS2 & operator=(itkLevelSetNodeUS2 const & rhs);
     unsigned short & GetValue();
     unsigned short const & GetValue() const;
     void SetValue(unsigned short const & input);
     itkIndex2 & GetIndex();
     itkIndex2 const & GetIndex() const;
     void SetIndex(itkIndex2 const & input);
     itkLevelSetNodeUS2();
     itkLevelSetNodeUS2(itkLevelSetNodeUS2 const & node);
   private:
   protected:
 };


 class itkLevelSetNodeUS3 {
   public:
     enum  {  SetDimension = 3 };
     ~itkLevelSetNodeUS3();
     bool operator>(itkLevelSetNodeUS3 const & node) const;
     bool operator<(itkLevelSetNodeUS3 const & node) const;
     bool operator<=(itkLevelSetNodeUS3 const & node) const;
     bool operator>=(itkLevelSetNodeUS3 const & node) const;
     itkLevelSetNodeUS3 & operator=(itkLevelSetNodeUS3 const & rhs);
     unsigned short & GetValue();
     unsigned short const & GetValue() const;
     void SetValue(unsigned short const & input);
     itkIndex3 & GetIndex();
     itkIndex3 const & GetIndex() const;
     void SetIndex(itkIndex3 const & input);
     itkLevelSetNodeUS3();
     itkLevelSetNodeUS3(itkLevelSetNodeUS3 const & node);
   private:
   protected:
 };


