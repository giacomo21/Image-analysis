// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module vnl_matrixChicken
#endif
#ifdef SWIGCSHARP
%module vnl_matrixCsharp
#endif
#ifdef SWIGGUILE
%module vnl_matrixGuile
#endif
#ifdef SWIGJAVA
%module vnl_matrixJava
#endif
#ifdef SWIGLUA
%module vnl_matrixLua
#endif
#ifdef SWIGMODULA3
%module vnl_matrixModula3
#endif
#ifdef SWIGMZSCHEME
%module vnl_matrixMzscheme
#endif
#ifdef SWIGOCAML
%module vnl_matrixOcaml
#endif
#ifdef SWIGPERL
%module vnl_matrixPerl
#endif
#ifdef SWIGPERL5
%module vnl_matrixPerl5
#endif
#ifdef SWIGPHP
%module vnl_matrixPhp
#endif
#ifdef SWIGPHP4
%module vnl_matrixPhp4
#endif
#ifdef SWIGPHP5
%module vnl_matrixPhp5
#endif
#ifdef SWIGPIKE
%module vnl_matrixPike
#endif
#ifdef SWIGPYTHON
%module vnl_matrixPython
#endif
#ifdef SWIGR
%module vnl_matrixR
#endif
#ifdef SWIGRUBY
%module vnl_matrixRuby
#endif
#ifdef SWIGSEXP
%module vnl_matrixSexp
#endif
#ifdef SWIGTCL
%module vnl_matrixTcl
#endif
#ifdef SWIGXML
%module vnl_matrixXml
#endif

%{
#include "VXLNumerics.includes"
%}


%{
%}




%import wrap_vcl_complex.i
%import wrap_vnl_vector.i


%include itk.i
%include wrap_vnl_matrix_ext.i


 class vnl_matrixD {
   public:
     vnl_matrixD();
     vnl_matrixD(unsigned int r, unsigned int c);
     vnl_matrixD(unsigned int r, unsigned int c, double const & v0);
     vnl_matrixD(unsigned int r, unsigned int c, vnl_matrix_type t);
     vnl_matrixD(unsigned int r, unsigned int c, unsigned int n, double const * values);
     vnl_matrixD(double const * data_block, unsigned int r, unsigned int c);
     vnl_matrixD(vnl_matrixD const & arg0);
     vnl_matrixD(vnl_matrixD const & arg0, vnl_matrixD const & arg1, vnl_tag_add arg2);
     vnl_matrixD(vnl_matrixD const & arg0, vnl_matrixD const & arg1, vnl_tag_sub arg2);
     vnl_matrixD(vnl_matrixD const & arg0, double arg1, vnl_tag_mul arg2);
     vnl_matrixD(vnl_matrixD const & arg0, double arg1, vnl_tag_div arg2);
     vnl_matrixD(vnl_matrixD const & arg0, double arg1, vnl_tag_add arg2);
     vnl_matrixD(vnl_matrixD const & arg0, double arg1, vnl_tag_sub arg2);
     vnl_matrixD(vnl_matrixD const & arg0, vnl_matrixD const & arg1, vnl_tag_mul arg2);
     vnl_matrixD(vnl_matrixD & that, vnl_tag_grab arg1);
     ~vnl_matrixD();
     unsigned int rows() const;
     unsigned int columns() const;
     unsigned int cols() const;
     unsigned int size() const;
     void put(unsigned int row, unsigned int column, double const & value);
     double get(unsigned int row, unsigned int column) const;
     double * operator[](unsigned int r);
     double const * operator[](unsigned int r) const;
     double & operator()(unsigned int r, unsigned int c);
     double const & operator()(unsigned int r, unsigned int c) const;
     void fill(double const & arg0);
     void fill_diagonal(double const & arg0);
     void copy_in(double const * arg0);
     void set(double const * d);
     void copy_out(double * arg0) const;
     vnl_matrixD & operator=(double const & v);
     vnl_matrixD & operator=(vnl_matrixD const & arg0);
     vnl_matrixD & operator+=(double value);
     vnl_matrixD & operator-=(double value);
     vnl_matrixD & operator*=(double value);
     vnl_matrixD & operator/=(double value);
     vnl_matrixD & operator+=(vnl_matrixD const & arg0);
     vnl_matrixD & operator-=(vnl_matrixD const & arg0);
     vnl_matrixD & operator*=(vnl_matrixD const & rhs);
     vnl_matrixD operator-() const;
     vnl_matrixD operator+(double const & v) const;
     vnl_matrixD operator-(double const & v) const;
     vnl_matrixD operator*(double const & v) const;
     vnl_matrixD operator/(double const & v) const;
     vnl_matrixD operator+(vnl_matrixD const & rhs) const;
     vnl_matrixD operator-(vnl_matrixD const & rhs) const;
     vnl_matrixD operator*(vnl_matrixD const & rhs) const;
     vnl_matrixD transpose() const;
     vnl_matrixD conjugate_transpose() const;
     vnl_matrixD & update(vnl_matrixD const & arg0, unsigned int top = 0, unsigned int left = 0);
     void set_column(unsigned int i, double const * v);
     void set_column(unsigned int i, double value);
     void set_column(unsigned int j, vnl_vectorD const & v);
     void set_columns(unsigned int starting_column, vnl_matrixD const & M);
     void set_row(unsigned int i, double const * v);
     void set_row(unsigned int i, double value);
     void set_row(unsigned int i, vnl_vectorD const & arg1);
     vnl_matrixD extract(unsigned int r, unsigned int c, unsigned int top = 0, unsigned int left = 0) const;
     vnl_vectorD get_row(unsigned int r) const;
     vnl_vectorD get_column(unsigned int c) const;
     vnl_matrixD get_n_rows(unsigned int rowstart, unsigned int n) const;
     vnl_matrixD get_n_columns(unsigned int colstart, unsigned int n) const;
     void set_identity();
     void inplace_transpose();
     void flipud();
     void fliplr();
     void normalize_rows();
     void normalize_columns();
     void scale_row(unsigned int row, double value);
     void scale_column(unsigned int col, double value);
     void swap(vnl_matrixD & that);
     double array_one_norm() const;
     double array_two_norm() const;
     double array_inf_norm() const;
     double absolute_value_sum() const;
     double absolute_value_max() const;
     double operator_one_norm() const;
     double operator_inf_norm() const;
     double frobenius_norm() const;
     double fro_norm() const;
     double rms() const;
     double min_value() const;
     double max_value() const;
     double mean() const;
     bool empty() const;
     bool is_identity() const;
     bool is_identity(double tol) const;
     bool is_zero() const;
     bool is_zero(double tol) const;
     bool is_finite() const;
     bool has_nans() const;
     void assert_size(unsigned int r, unsigned int c) const;
     void assert_finite() const;
     static vnl_matrixD read(std::basic_istream< char, std::char_traits< char > > & s);
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     double const * data_block() const;
     double * data_block();
     double const * const * data_array() const;
     double * * data_array();
     double * begin();
     double * end();
     double const * begin() const;
     double const * end() const;
     bool operator_eq(vnl_matrixD const & rhs) const;
     bool operator==(vnl_matrixD const & that) const;
     bool operator!=(vnl_matrixD const & that) const;
     void print(std::basic_ostream< char, std::char_traits< char > > & os) const;
     void clear();
     bool set_size(unsigned int r, unsigned int c);
   private:
   protected:
     void assert_size_internal(unsigned int r, unsigned int c) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


 class vnl_matrixF {
   public:
     vnl_matrixF();
     vnl_matrixF(unsigned int r, unsigned int c);
     vnl_matrixF(unsigned int r, unsigned int c, float const & v0);
     vnl_matrixF(unsigned int r, unsigned int c, vnl_matrix_type t);
     vnl_matrixF(unsigned int r, unsigned int c, unsigned int n, float const * values);
     vnl_matrixF(float const * data_block, unsigned int r, unsigned int c);
     vnl_matrixF(vnl_matrixF const & arg0);
     vnl_matrixF(vnl_matrixF const & arg0, vnl_matrixF const & arg1, vnl_tag_add arg2);
     vnl_matrixF(vnl_matrixF const & arg0, vnl_matrixF const & arg1, vnl_tag_sub arg2);
     vnl_matrixF(vnl_matrixF const & arg0, float arg1, vnl_tag_mul arg2);
     vnl_matrixF(vnl_matrixF const & arg0, float arg1, vnl_tag_div arg2);
     vnl_matrixF(vnl_matrixF const & arg0, float arg1, vnl_tag_add arg2);
     vnl_matrixF(vnl_matrixF const & arg0, float arg1, vnl_tag_sub arg2);
     vnl_matrixF(vnl_matrixF const & arg0, vnl_matrixF const & arg1, vnl_tag_mul arg2);
     vnl_matrixF(vnl_matrixF & that, vnl_tag_grab arg1);
     ~vnl_matrixF();
     unsigned int rows() const;
     unsigned int columns() const;
     unsigned int cols() const;
     unsigned int size() const;
     void put(unsigned int row, unsigned int column, float const & value);
     float get(unsigned int row, unsigned int column) const;
     float * operator[](unsigned int r);
     float const * operator[](unsigned int r) const;
     float & operator()(unsigned int r, unsigned int c);
     float const & operator()(unsigned int r, unsigned int c) const;
     void fill(float const & arg0);
     void fill_diagonal(float const & arg0);
     void copy_in(float const * arg0);
     void set(float const * d);
     void copy_out(float * arg0) const;
     vnl_matrixF & operator=(float const & v);
     vnl_matrixF & operator=(vnl_matrixF const & arg0);
     vnl_matrixF & operator+=(float value);
     vnl_matrixF & operator-=(float value);
     vnl_matrixF & operator*=(float value);
     vnl_matrixF & operator/=(float value);
     vnl_matrixF & operator+=(vnl_matrixF const & arg0);
     vnl_matrixF & operator-=(vnl_matrixF const & arg0);
     vnl_matrixF & operator*=(vnl_matrixF const & rhs);
     vnl_matrixF operator-() const;
     vnl_matrixF operator+(float const & v) const;
     vnl_matrixF operator-(float const & v) const;
     vnl_matrixF operator*(float const & v) const;
     vnl_matrixF operator/(float const & v) const;
     vnl_matrixF operator+(vnl_matrixF const & rhs) const;
     vnl_matrixF operator-(vnl_matrixF const & rhs) const;
     vnl_matrixF operator*(vnl_matrixF const & rhs) const;
     vnl_matrixF transpose() const;
     vnl_matrixF conjugate_transpose() const;
     vnl_matrixF & update(vnl_matrixF const & arg0, unsigned int top = 0, unsigned int left = 0);
     void set_column(unsigned int i, float const * v);
     void set_column(unsigned int i, float value);
     void set_column(unsigned int j, vnl_vectorF const & v);
     void set_columns(unsigned int starting_column, vnl_matrixF const & M);
     void set_row(unsigned int i, float const * v);
     void set_row(unsigned int i, float value);
     void set_row(unsigned int i, vnl_vectorF const & arg1);
     vnl_matrixF extract(unsigned int r, unsigned int c, unsigned int top = 0, unsigned int left = 0) const;
     vnl_vectorF get_row(unsigned int r) const;
     vnl_vectorF get_column(unsigned int c) const;
     vnl_matrixF get_n_rows(unsigned int rowstart, unsigned int n) const;
     vnl_matrixF get_n_columns(unsigned int colstart, unsigned int n) const;
     void set_identity();
     void inplace_transpose();
     void flipud();
     void fliplr();
     void normalize_rows();
     void normalize_columns();
     void scale_row(unsigned int row, float value);
     void scale_column(unsigned int col, float value);
     void swap(vnl_matrixF & that);
     float array_one_norm() const;
     float array_two_norm() const;
     float array_inf_norm() const;
     float absolute_value_sum() const;
     float absolute_value_max() const;
     float operator_one_norm() const;
     float operator_inf_norm() const;
     float frobenius_norm() const;
     float fro_norm() const;
     float rms() const;
     float min_value() const;
     float max_value() const;
     float mean() const;
     bool empty() const;
     bool is_identity() const;
     bool is_identity(double tol) const;
     bool is_zero() const;
     bool is_zero(double tol) const;
     bool is_finite() const;
     bool has_nans() const;
     void assert_size(unsigned int r, unsigned int c) const;
     void assert_finite() const;
     static vnl_matrixF read(std::basic_istream< char, std::char_traits< char > > & s);
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     float const * data_block() const;
     float * data_block();
     float const * const * data_array() const;
     float * * data_array();
     float * begin();
     float * end();
     float const * begin() const;
     float const * end() const;
     bool operator_eq(vnl_matrixF const & rhs) const;
     bool operator==(vnl_matrixF const & that) const;
     bool operator!=(vnl_matrixF const & that) const;
     void print(std::basic_ostream< char, std::char_traits< char > > & os) const;
     void clear();
     bool set_size(unsigned int r, unsigned int c);
   private:
   protected:
     void assert_size_internal(unsigned int r, unsigned int c) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


 class vnl_matrixLD {
   public:
     vnl_matrixLD();
     vnl_matrixLD(unsigned int r, unsigned int c);
     vnl_matrixLD(unsigned int r, unsigned int c, long double const & v0);
     vnl_matrixLD(unsigned int r, unsigned int c, vnl_matrix_type t);
     vnl_matrixLD(unsigned int r, unsigned int c, unsigned int n, long double const * values);
     vnl_matrixLD(long double const * data_block, unsigned int r, unsigned int c);
     vnl_matrixLD(vnl_matrixLD const & arg0);
     vnl_matrixLD(vnl_matrixLD const & arg0, vnl_matrixLD const & arg1, vnl_tag_add arg2);
     vnl_matrixLD(vnl_matrixLD const & arg0, vnl_matrixLD const & arg1, vnl_tag_sub arg2);
     vnl_matrixLD(vnl_matrixLD const & arg0, long double arg1, vnl_tag_mul arg2);
     vnl_matrixLD(vnl_matrixLD const & arg0, long double arg1, vnl_tag_div arg2);
     vnl_matrixLD(vnl_matrixLD const & arg0, long double arg1, vnl_tag_add arg2);
     vnl_matrixLD(vnl_matrixLD const & arg0, long double arg1, vnl_tag_sub arg2);
     vnl_matrixLD(vnl_matrixLD const & arg0, vnl_matrixLD const & arg1, vnl_tag_mul arg2);
     vnl_matrixLD(vnl_matrixLD & that, vnl_tag_grab arg1);
     ~vnl_matrixLD();
     unsigned int rows() const;
     unsigned int columns() const;
     unsigned int cols() const;
     unsigned int size() const;
     void put(unsigned int row, unsigned int column, long double const & value);
     long double get(unsigned int row, unsigned int column) const;
     long double * operator[](unsigned int r);
     long double const * operator[](unsigned int r) const;
     long double & operator()(unsigned int r, unsigned int c);
     long double const & operator()(unsigned int r, unsigned int c) const;
     void fill(long double const & arg0);
     void fill_diagonal(long double const & arg0);
     void copy_in(long double const * arg0);
     void set(long double const * d);
     void copy_out(long double * arg0) const;
     vnl_matrixLD & operator=(long double const & v);
     vnl_matrixLD & operator=(vnl_matrixLD const & arg0);
     vnl_matrixLD & operator+=(long double value);
     vnl_matrixLD & operator-=(long double value);
     vnl_matrixLD & operator*=(long double value);
     vnl_matrixLD & operator/=(long double value);
     vnl_matrixLD & operator+=(vnl_matrixLD const & arg0);
     vnl_matrixLD & operator-=(vnl_matrixLD const & arg0);
     vnl_matrixLD & operator*=(vnl_matrixLD const & rhs);
     vnl_matrixLD operator-() const;
     vnl_matrixLD operator+(long double const & v) const;
     vnl_matrixLD operator-(long double const & v) const;
     vnl_matrixLD operator*(long double const & v) const;
     vnl_matrixLD operator/(long double const & v) const;
     vnl_matrixLD operator+(vnl_matrixLD const & rhs) const;
     vnl_matrixLD operator-(vnl_matrixLD const & rhs) const;
     vnl_matrixLD operator*(vnl_matrixLD const & rhs) const;
     vnl_matrixLD transpose() const;
     vnl_matrixLD conjugate_transpose() const;
     vnl_matrixLD & update(vnl_matrixLD const & arg0, unsigned int top = 0, unsigned int left = 0);
     void set_column(unsigned int i, long double const * v);
     void set_column(unsigned int i, long double value);
     void set_column(unsigned int j, vnl_vectorLD const & v);
     void set_columns(unsigned int starting_column, vnl_matrixLD const & M);
     void set_row(unsigned int i, long double const * v);
     void set_row(unsigned int i, long double value);
     void set_row(unsigned int i, vnl_vectorLD const & arg1);
     vnl_matrixLD extract(unsigned int r, unsigned int c, unsigned int top = 0, unsigned int left = 0) const;
     vnl_vectorLD get_row(unsigned int r) const;
     vnl_vectorLD get_column(unsigned int c) const;
     vnl_matrixLD get_n_rows(unsigned int rowstart, unsigned int n) const;
     vnl_matrixLD get_n_columns(unsigned int colstart, unsigned int n) const;
     void set_identity();
     void inplace_transpose();
     void flipud();
     void fliplr();
     void normalize_rows();
     void normalize_columns();
     void scale_row(unsigned int row, long double value);
     void scale_column(unsigned int col, long double value);
     void swap(vnl_matrixLD & that);
     long double array_one_norm() const;
     long double array_two_norm() const;
     long double array_inf_norm() const;
     long double absolute_value_sum() const;
     long double absolute_value_max() const;
     long double operator_one_norm() const;
     long double operator_inf_norm() const;
     long double frobenius_norm() const;
     long double fro_norm() const;
     long double rms() const;
     long double min_value() const;
     long double max_value() const;
     long double mean() const;
     bool empty() const;
     bool is_identity() const;
     bool is_identity(double tol) const;
     bool is_zero() const;
     bool is_zero(double tol) const;
     bool is_finite() const;
     bool has_nans() const;
     void assert_size(unsigned int r, unsigned int c) const;
     void assert_finite() const;
     static vnl_matrixLD read(std::basic_istream< char, std::char_traits< char > > & s);
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     long double const * data_block() const;
     long double * data_block();
     long double const * const * data_array() const;
     long double * * data_array();
     long double * begin();
     long double * end();
     long double const * begin() const;
     long double const * end() const;
     bool operator_eq(vnl_matrixLD const & rhs) const;
     bool operator==(vnl_matrixLD const & that) const;
     bool operator!=(vnl_matrixLD const & that) const;
     void print(std::basic_ostream< char, std::char_traits< char > > & os) const;
     void clear();
     bool set_size(unsigned int r, unsigned int c);
   private:
   protected:
     void assert_size_internal(unsigned int r, unsigned int c) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


 class vnl_matrixSC {
   public:
     vnl_matrixSC();
     vnl_matrixSC(unsigned int r, unsigned int c);
     vnl_matrixSC(unsigned int r, unsigned int c, signed char const & v0);
     vnl_matrixSC(unsigned int r, unsigned int c, vnl_matrix_type t);
     vnl_matrixSC(unsigned int r, unsigned int c, unsigned int n, signed char const * values);
     vnl_matrixSC(signed char const * data_block, unsigned int r, unsigned int c);
     vnl_matrixSC(vnl_matrixSC const & arg0);
     vnl_matrixSC(vnl_matrixSC const & arg0, vnl_matrixSC const & arg1, vnl_tag_add arg2);
     vnl_matrixSC(vnl_matrixSC const & arg0, vnl_matrixSC const & arg1, vnl_tag_sub arg2);
     vnl_matrixSC(vnl_matrixSC const & arg0, signed char arg1, vnl_tag_mul arg2);
     vnl_matrixSC(vnl_matrixSC const & arg0, signed char arg1, vnl_tag_div arg2);
     vnl_matrixSC(vnl_matrixSC const & arg0, signed char arg1, vnl_tag_add arg2);
     vnl_matrixSC(vnl_matrixSC const & arg0, signed char arg1, vnl_tag_sub arg2);
     vnl_matrixSC(vnl_matrixSC const & arg0, vnl_matrixSC const & arg1, vnl_tag_mul arg2);
     vnl_matrixSC(vnl_matrixSC & that, vnl_tag_grab arg1);
     ~vnl_matrixSC();
     unsigned int rows() const;
     unsigned int columns() const;
     unsigned int cols() const;
     unsigned int size() const;
     void put(unsigned int row, unsigned int column, signed char const & value);
     signed char get(unsigned int row, unsigned int column) const;
     signed char * operator[](unsigned int r);
     signed char const * operator[](unsigned int r) const;
     signed char & operator()(unsigned int r, unsigned int c);
     signed char const & operator()(unsigned int r, unsigned int c) const;
     void fill(signed char const & arg0);
     void fill_diagonal(signed char const & arg0);
     void copy_in(signed char const * arg0);
     void set(signed char const * d);
     void copy_out(signed char * arg0) const;
     vnl_matrixSC & operator=(signed char const & v);
     vnl_matrixSC & operator=(vnl_matrixSC const & arg0);
     vnl_matrixSC & operator+=(signed char value);
     vnl_matrixSC & operator-=(signed char value);
     vnl_matrixSC & operator*=(signed char value);
     vnl_matrixSC & operator/=(signed char value);
     vnl_matrixSC & operator+=(vnl_matrixSC const & arg0);
     vnl_matrixSC & operator-=(vnl_matrixSC const & arg0);
     vnl_matrixSC & operator*=(vnl_matrixSC const & rhs);
     vnl_matrixSC operator-() const;
     vnl_matrixSC operator+(signed char const & v) const;
     vnl_matrixSC operator-(signed char const & v) const;
     vnl_matrixSC operator*(signed char const & v) const;
     vnl_matrixSC operator/(signed char const & v) const;
     vnl_matrixSC operator+(vnl_matrixSC const & rhs) const;
     vnl_matrixSC operator-(vnl_matrixSC const & rhs) const;
     vnl_matrixSC operator*(vnl_matrixSC const & rhs) const;
     vnl_matrixSC transpose() const;
     vnl_matrixSC conjugate_transpose() const;
     vnl_matrixSC & update(vnl_matrixSC const & arg0, unsigned int top = 0, unsigned int left = 0);
     void set_column(unsigned int i, signed char const * v);
     void set_column(unsigned int i, signed char value);
     void set_column(unsigned int j, vnl_vectorSC const & v);
     void set_columns(unsigned int starting_column, vnl_matrixSC const & M);
     void set_row(unsigned int i, signed char const * v);
     void set_row(unsigned int i, signed char value);
     void set_row(unsigned int i, vnl_vectorSC const & arg1);
     vnl_matrixSC extract(unsigned int r, unsigned int c, unsigned int top = 0, unsigned int left = 0) const;
     vnl_vectorSC get_row(unsigned int r) const;
     vnl_vectorSC get_column(unsigned int c) const;
     vnl_matrixSC get_n_rows(unsigned int rowstart, unsigned int n) const;
     vnl_matrixSC get_n_columns(unsigned int colstart, unsigned int n) const;
     void set_identity();
     void inplace_transpose();
     void flipud();
     void fliplr();
     void normalize_rows();
     void normalize_columns();
     void scale_row(unsigned int row, signed char value);
     void scale_column(unsigned int col, signed char value);
     void swap(vnl_matrixSC & that);
     unsigned char array_one_norm() const;
     unsigned char array_two_norm() const;
     unsigned char array_inf_norm() const;
     unsigned char absolute_value_sum() const;
     unsigned char absolute_value_max() const;
     unsigned char operator_one_norm() const;
     unsigned char operator_inf_norm() const;
     unsigned char frobenius_norm() const;
     unsigned char fro_norm() const;
     unsigned char rms() const;
     signed char min_value() const;
     signed char max_value() const;
     signed char mean() const;
     bool empty() const;
     bool is_identity() const;
     bool is_identity(double tol) const;
     bool is_zero() const;
     bool is_zero(double tol) const;
     bool is_finite() const;
     bool has_nans() const;
     void assert_size(unsigned int r, unsigned int c) const;
     void assert_finite() const;
     static vnl_matrixSC read(std::basic_istream< char, std::char_traits< char > > & s);
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     signed char const * data_block() const;
     signed char * data_block();
     signed char const * const * data_array() const;
     signed char * * data_array();
     signed char * begin();
     signed char * end();
     signed char const * begin() const;
     signed char const * end() const;
     bool operator_eq(vnl_matrixSC const & rhs) const;
     bool operator==(vnl_matrixSC const & that) const;
     bool operator!=(vnl_matrixSC const & that) const;
     void print(std::basic_ostream< char, std::char_traits< char > > & os) const;
     void clear();
     bool set_size(unsigned int r, unsigned int c);
   private:
   protected:
     void assert_size_internal(unsigned int r, unsigned int c) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


 class vnl_matrixSI {
   public:
     vnl_matrixSI();
     vnl_matrixSI(unsigned int r, unsigned int c);
     vnl_matrixSI(unsigned int r, unsigned int c, int const & v0);
     vnl_matrixSI(unsigned int r, unsigned int c, vnl_matrix_type t);
     vnl_matrixSI(unsigned int r, unsigned int c, unsigned int n, int const * values);
     vnl_matrixSI(int const * data_block, unsigned int r, unsigned int c);
     vnl_matrixSI(vnl_matrixSI const & arg0);
     vnl_matrixSI(vnl_matrixSI const & arg0, vnl_matrixSI const & arg1, vnl_tag_add arg2);
     vnl_matrixSI(vnl_matrixSI const & arg0, vnl_matrixSI const & arg1, vnl_tag_sub arg2);
     vnl_matrixSI(vnl_matrixSI const & arg0, int arg1, vnl_tag_mul arg2);
     vnl_matrixSI(vnl_matrixSI const & arg0, int arg1, vnl_tag_div arg2);
     vnl_matrixSI(vnl_matrixSI const & arg0, int arg1, vnl_tag_add arg2);
     vnl_matrixSI(vnl_matrixSI const & arg0, int arg1, vnl_tag_sub arg2);
     vnl_matrixSI(vnl_matrixSI const & arg0, vnl_matrixSI const & arg1, vnl_tag_mul arg2);
     vnl_matrixSI(vnl_matrixSI & that, vnl_tag_grab arg1);
     ~vnl_matrixSI();
     unsigned int rows() const;
     unsigned int columns() const;
     unsigned int cols() const;
     unsigned int size() const;
     void put(unsigned int row, unsigned int column, int const & value);
     int get(unsigned int row, unsigned int column) const;
     int * operator[](unsigned int r);
     int const * operator[](unsigned int r) const;
     int & operator()(unsigned int r, unsigned int c);
     int const & operator()(unsigned int r, unsigned int c) const;
     void fill(int const & arg0);
     void fill_diagonal(int const & arg0);
     void copy_in(int const * arg0);
     void set(int const * d);
     void copy_out(int * arg0) const;
     vnl_matrixSI & operator=(int const & v);
     vnl_matrixSI & operator=(vnl_matrixSI const & arg0);
     vnl_matrixSI & operator+=(int value);
     vnl_matrixSI & operator-=(int value);
     vnl_matrixSI & operator*=(int value);
     vnl_matrixSI & operator/=(int value);
     vnl_matrixSI & operator+=(vnl_matrixSI const & arg0);
     vnl_matrixSI & operator-=(vnl_matrixSI const & arg0);
     vnl_matrixSI & operator*=(vnl_matrixSI const & rhs);
     vnl_matrixSI operator-() const;
     vnl_matrixSI operator+(int const & v) const;
     vnl_matrixSI operator-(int const & v) const;
     vnl_matrixSI operator*(int const & v) const;
     vnl_matrixSI operator/(int const & v) const;
     vnl_matrixSI operator+(vnl_matrixSI const & rhs) const;
     vnl_matrixSI operator-(vnl_matrixSI const & rhs) const;
     vnl_matrixSI operator*(vnl_matrixSI const & rhs) const;
     vnl_matrixSI transpose() const;
     vnl_matrixSI conjugate_transpose() const;
     vnl_matrixSI & update(vnl_matrixSI const & arg0, unsigned int top = 0, unsigned int left = 0);
     void set_column(unsigned int i, int const * v);
     void set_column(unsigned int i, int value);
     void set_column(unsigned int j, vnl_vectorSI const & v);
     void set_columns(unsigned int starting_column, vnl_matrixSI const & M);
     void set_row(unsigned int i, int const * v);
     void set_row(unsigned int i, int value);
     void set_row(unsigned int i, vnl_vectorSI const & arg1);
     vnl_matrixSI extract(unsigned int r, unsigned int c, unsigned int top = 0, unsigned int left = 0) const;
     vnl_vectorSI get_row(unsigned int r) const;
     vnl_vectorSI get_column(unsigned int c) const;
     vnl_matrixSI get_n_rows(unsigned int rowstart, unsigned int n) const;
     vnl_matrixSI get_n_columns(unsigned int colstart, unsigned int n) const;
     void set_identity();
     void inplace_transpose();
     void flipud();
     void fliplr();
     void normalize_rows();
     void normalize_columns();
     void scale_row(unsigned int row, int value);
     void scale_column(unsigned int col, int value);
     void swap(vnl_matrixSI & that);
     unsigned int array_one_norm() const;
     unsigned int array_two_norm() const;
     unsigned int array_inf_norm() const;
     unsigned int absolute_value_sum() const;
     unsigned int absolute_value_max() const;
     unsigned int operator_one_norm() const;
     unsigned int operator_inf_norm() const;
     unsigned int frobenius_norm() const;
     unsigned int fro_norm() const;
     unsigned int rms() const;
     int min_value() const;
     int max_value() const;
     int mean() const;
     bool empty() const;
     bool is_identity() const;
     bool is_identity(double tol) const;
     bool is_zero() const;
     bool is_zero(double tol) const;
     bool is_finite() const;
     bool has_nans() const;
     void assert_size(unsigned int r, unsigned int c) const;
     void assert_finite() const;
     static vnl_matrixSI read(std::basic_istream< char, std::char_traits< char > > & s);
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     int const * data_block() const;
     int * data_block();
     int const * const * data_array() const;
     int * * data_array();
     int * begin();
     int * end();
     int const * begin() const;
     int const * end() const;
     bool operator_eq(vnl_matrixSI const & rhs) const;
     bool operator==(vnl_matrixSI const & that) const;
     bool operator!=(vnl_matrixSI const & that) const;
     void print(std::basic_ostream< char, std::char_traits< char > > & os) const;
     void clear();
     bool set_size(unsigned int r, unsigned int c);
   private:
   protected:
     void assert_size_internal(unsigned int r, unsigned int c) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


 class vnl_matrixSL {
   public:
     vnl_matrixSL();
     vnl_matrixSL(unsigned int r, unsigned int c);
     vnl_matrixSL(unsigned int r, unsigned int c, long const & v0);
     vnl_matrixSL(unsigned int r, unsigned int c, vnl_matrix_type t);
     vnl_matrixSL(unsigned int r, unsigned int c, unsigned int n, long const * values);
     vnl_matrixSL(long const * data_block, unsigned int r, unsigned int c);
     vnl_matrixSL(vnl_matrixSL const & arg0);
     vnl_matrixSL(vnl_matrixSL const & arg0, vnl_matrixSL const & arg1, vnl_tag_add arg2);
     vnl_matrixSL(vnl_matrixSL const & arg0, vnl_matrixSL const & arg1, vnl_tag_sub arg2);
     vnl_matrixSL(vnl_matrixSL const & arg0, long arg1, vnl_tag_mul arg2);
     vnl_matrixSL(vnl_matrixSL const & arg0, long arg1, vnl_tag_div arg2);
     vnl_matrixSL(vnl_matrixSL const & arg0, long arg1, vnl_tag_add arg2);
     vnl_matrixSL(vnl_matrixSL const & arg0, long arg1, vnl_tag_sub arg2);
     vnl_matrixSL(vnl_matrixSL const & arg0, vnl_matrixSL const & arg1, vnl_tag_mul arg2);
     vnl_matrixSL(vnl_matrixSL & that, vnl_tag_grab arg1);
     ~vnl_matrixSL();
     unsigned int rows() const;
     unsigned int columns() const;
     unsigned int cols() const;
     unsigned int size() const;
     void put(unsigned int row, unsigned int column, long const & value);
     long get(unsigned int row, unsigned int column) const;
     long * operator[](unsigned int r);
     long const * operator[](unsigned int r) const;
     long & operator()(unsigned int r, unsigned int c);
     long const & operator()(unsigned int r, unsigned int c) const;
     void fill(long const & arg0);
     void fill_diagonal(long const & arg0);
     void copy_in(long const * arg0);
     void set(long const * d);
     void copy_out(long * arg0) const;
     vnl_matrixSL & operator=(long const & v);
     vnl_matrixSL & operator=(vnl_matrixSL const & arg0);
     vnl_matrixSL & operator+=(long value);
     vnl_matrixSL & operator-=(long value);
     vnl_matrixSL & operator*=(long value);
     vnl_matrixSL & operator/=(long value);
     vnl_matrixSL & operator+=(vnl_matrixSL const & arg0);
     vnl_matrixSL & operator-=(vnl_matrixSL const & arg0);
     vnl_matrixSL & operator*=(vnl_matrixSL const & rhs);
     vnl_matrixSL operator-() const;
     vnl_matrixSL operator+(long const & v) const;
     vnl_matrixSL operator-(long const & v) const;
     vnl_matrixSL operator*(long const & v) const;
     vnl_matrixSL operator/(long const & v) const;
     vnl_matrixSL operator+(vnl_matrixSL const & rhs) const;
     vnl_matrixSL operator-(vnl_matrixSL const & rhs) const;
     vnl_matrixSL operator*(vnl_matrixSL const & rhs) const;
     vnl_matrixSL transpose() const;
     vnl_matrixSL conjugate_transpose() const;
     vnl_matrixSL & update(vnl_matrixSL const & arg0, unsigned int top = 0, unsigned int left = 0);
     void set_column(unsigned int i, long const * v);
     void set_column(unsigned int i, long value);
     void set_column(unsigned int j, vnl_vectorSL const & v);
     void set_columns(unsigned int starting_column, vnl_matrixSL const & M);
     void set_row(unsigned int i, long const * v);
     void set_row(unsigned int i, long value);
     void set_row(unsigned int i, vnl_vectorSL const & arg1);
     vnl_matrixSL extract(unsigned int r, unsigned int c, unsigned int top = 0, unsigned int left = 0) const;
     vnl_vectorSL get_row(unsigned int r) const;
     vnl_vectorSL get_column(unsigned int c) const;
     vnl_matrixSL get_n_rows(unsigned int rowstart, unsigned int n) const;
     vnl_matrixSL get_n_columns(unsigned int colstart, unsigned int n) const;
     void set_identity();
     void inplace_transpose();
     void flipud();
     void fliplr();
     void normalize_rows();
     void normalize_columns();
     void scale_row(unsigned int row, long value);
     void scale_column(unsigned int col, long value);
     void swap(vnl_matrixSL & that);
     unsigned long array_one_norm() const;
     unsigned long array_two_norm() const;
     unsigned long array_inf_norm() const;
     unsigned long absolute_value_sum() const;
     unsigned long absolute_value_max() const;
     unsigned long operator_one_norm() const;
     unsigned long operator_inf_norm() const;
     unsigned long frobenius_norm() const;
     unsigned long fro_norm() const;
     unsigned long rms() const;
     long min_value() const;
     long max_value() const;
     long mean() const;
     bool empty() const;
     bool is_identity() const;
     bool is_identity(double tol) const;
     bool is_zero() const;
     bool is_zero(double tol) const;
     bool is_finite() const;
     bool has_nans() const;
     void assert_size(unsigned int r, unsigned int c) const;
     void assert_finite() const;
     static vnl_matrixSL read(std::basic_istream< char, std::char_traits< char > > & s);
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     long const * data_block() const;
     long * data_block();
     long const * const * data_array() const;
     long * * data_array();
     long * begin();
     long * end();
     long const * begin() const;
     long const * end() const;
     bool operator_eq(vnl_matrixSL const & rhs) const;
     bool operator==(vnl_matrixSL const & that) const;
     bool operator!=(vnl_matrixSL const & that) const;
     void print(std::basic_ostream< char, std::char_traits< char > > & os) const;
     void clear();
     bool set_size(unsigned int r, unsigned int c);
   private:
   protected:
     void assert_size_internal(unsigned int r, unsigned int c) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


 class vnl_matrixUC {
   public:
     vnl_matrixUC();
     vnl_matrixUC(unsigned int r, unsigned int c);
     vnl_matrixUC(unsigned int r, unsigned int c, unsigned char const & v0);
     vnl_matrixUC(unsigned int r, unsigned int c, vnl_matrix_type t);
     vnl_matrixUC(unsigned int r, unsigned int c, unsigned int n, unsigned char const * values);
     vnl_matrixUC(unsigned char const * data_block, unsigned int r, unsigned int c);
     vnl_matrixUC(vnl_matrixUC const & arg0);
     vnl_matrixUC(vnl_matrixUC const & arg0, vnl_matrixUC const & arg1, vnl_tag_add arg2);
     vnl_matrixUC(vnl_matrixUC const & arg0, vnl_matrixUC const & arg1, vnl_tag_sub arg2);
     vnl_matrixUC(vnl_matrixUC const & arg0, unsigned char arg1, vnl_tag_mul arg2);
     vnl_matrixUC(vnl_matrixUC const & arg0, unsigned char arg1, vnl_tag_div arg2);
     vnl_matrixUC(vnl_matrixUC const & arg0, unsigned char arg1, vnl_tag_add arg2);
     vnl_matrixUC(vnl_matrixUC const & arg0, unsigned char arg1, vnl_tag_sub arg2);
     vnl_matrixUC(vnl_matrixUC const & arg0, vnl_matrixUC const & arg1, vnl_tag_mul arg2);
     vnl_matrixUC(vnl_matrixUC & that, vnl_tag_grab arg1);
     ~vnl_matrixUC();
     unsigned int rows() const;
     unsigned int columns() const;
     unsigned int cols() const;
     unsigned int size() const;
     void put(unsigned int row, unsigned int column, unsigned char const & value);
     unsigned char get(unsigned int row, unsigned int column) const;
     unsigned char * operator[](unsigned int r);
     unsigned char const * operator[](unsigned int r) const;
     unsigned char & operator()(unsigned int r, unsigned int c);
     unsigned char const & operator()(unsigned int r, unsigned int c) const;
     void fill(unsigned char const & arg0);
     void fill_diagonal(unsigned char const & arg0);
     void copy_in(unsigned char const * arg0);
     void set(unsigned char const * d);
     void copy_out(unsigned char * arg0) const;
     vnl_matrixUC & operator=(unsigned char const & v);
     vnl_matrixUC & operator=(vnl_matrixUC const & arg0);
     vnl_matrixUC & operator+=(unsigned char value);
     vnl_matrixUC & operator-=(unsigned char value);
     vnl_matrixUC & operator*=(unsigned char value);
     vnl_matrixUC & operator/=(unsigned char value);
     vnl_matrixUC & operator+=(vnl_matrixUC const & arg0);
     vnl_matrixUC & operator-=(vnl_matrixUC const & arg0);
     vnl_matrixUC & operator*=(vnl_matrixUC const & rhs);
     vnl_matrixUC operator-() const;
     vnl_matrixUC operator+(unsigned char const & v) const;
     vnl_matrixUC operator-(unsigned char const & v) const;
     vnl_matrixUC operator*(unsigned char const & v) const;
     vnl_matrixUC operator/(unsigned char const & v) const;
     vnl_matrixUC operator+(vnl_matrixUC const & rhs) const;
     vnl_matrixUC operator-(vnl_matrixUC const & rhs) const;
     vnl_matrixUC operator*(vnl_matrixUC const & rhs) const;
     vnl_matrixUC transpose() const;
     vnl_matrixUC conjugate_transpose() const;
     vnl_matrixUC & update(vnl_matrixUC const & arg0, unsigned int top = 0, unsigned int left = 0);
     void set_column(unsigned int i, unsigned char const * v);
     void set_column(unsigned int i, unsigned char value);
     void set_column(unsigned int j, vnl_vectorUC const & v);
     void set_columns(unsigned int starting_column, vnl_matrixUC const & M);
     void set_row(unsigned int i, unsigned char const * v);
     void set_row(unsigned int i, unsigned char value);
     void set_row(unsigned int i, vnl_vectorUC const & arg1);
     vnl_matrixUC extract(unsigned int r, unsigned int c, unsigned int top = 0, unsigned int left = 0) const;
     vnl_vectorUC get_row(unsigned int r) const;
     vnl_vectorUC get_column(unsigned int c) const;
     vnl_matrixUC get_n_rows(unsigned int rowstart, unsigned int n) const;
     vnl_matrixUC get_n_columns(unsigned int colstart, unsigned int n) const;
     void set_identity();
     void inplace_transpose();
     void flipud();
     void fliplr();
     void normalize_rows();
     void normalize_columns();
     void scale_row(unsigned int row, unsigned char value);
     void scale_column(unsigned int col, unsigned char value);
     void swap(vnl_matrixUC & that);
     unsigned char array_one_norm() const;
     unsigned char array_two_norm() const;
     unsigned char array_inf_norm() const;
     unsigned char absolute_value_sum() const;
     unsigned char absolute_value_max() const;
     unsigned char operator_one_norm() const;
     unsigned char operator_inf_norm() const;
     unsigned char frobenius_norm() const;
     unsigned char fro_norm() const;
     unsigned char rms() const;
     unsigned char min_value() const;
     unsigned char max_value() const;
     unsigned char mean() const;
     bool empty() const;
     bool is_identity() const;
     bool is_identity(double tol) const;
     bool is_zero() const;
     bool is_zero(double tol) const;
     bool is_finite() const;
     bool has_nans() const;
     void assert_size(unsigned int r, unsigned int c) const;
     void assert_finite() const;
     static vnl_matrixUC read(std::basic_istream< char, std::char_traits< char > > & s);
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     unsigned char const * data_block() const;
     unsigned char * data_block();
     unsigned char const * const * data_array() const;
     unsigned char * * data_array();
     unsigned char * begin();
     unsigned char * end();
     unsigned char const * begin() const;
     unsigned char const * end() const;
     bool operator_eq(vnl_matrixUC const & rhs) const;
     bool operator==(vnl_matrixUC const & that) const;
     bool operator!=(vnl_matrixUC const & that) const;
     void print(std::basic_ostream< char, std::char_traits< char > > & os) const;
     void clear();
     bool set_size(unsigned int r, unsigned int c);
   private:
   protected:
     void assert_size_internal(unsigned int r, unsigned int c) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


 class vnl_matrixUI {
   public:
     vnl_matrixUI();
     vnl_matrixUI(unsigned int r, unsigned int c);
     vnl_matrixUI(unsigned int r, unsigned int c, unsigned int const & v0);
     vnl_matrixUI(unsigned int r, unsigned int c, vnl_matrix_type t);
     vnl_matrixUI(unsigned int r, unsigned int c, unsigned int n, unsigned int const * values);
     vnl_matrixUI(unsigned int const * data_block, unsigned int r, unsigned int c);
     vnl_matrixUI(vnl_matrixUI const & arg0);
     vnl_matrixUI(vnl_matrixUI const & arg0, vnl_matrixUI const & arg1, vnl_tag_add arg2);
     vnl_matrixUI(vnl_matrixUI const & arg0, vnl_matrixUI const & arg1, vnl_tag_sub arg2);
     vnl_matrixUI(vnl_matrixUI const & arg0, unsigned int arg1, vnl_tag_mul arg2);
     vnl_matrixUI(vnl_matrixUI const & arg0, unsigned int arg1, vnl_tag_div arg2);
     vnl_matrixUI(vnl_matrixUI const & arg0, unsigned int arg1, vnl_tag_add arg2);
     vnl_matrixUI(vnl_matrixUI const & arg0, unsigned int arg1, vnl_tag_sub arg2);
     vnl_matrixUI(vnl_matrixUI const & arg0, vnl_matrixUI const & arg1, vnl_tag_mul arg2);
     vnl_matrixUI(vnl_matrixUI & that, vnl_tag_grab arg1);
     ~vnl_matrixUI();
     unsigned int rows() const;
     unsigned int columns() const;
     unsigned int cols() const;
     unsigned int size() const;
     void put(unsigned int row, unsigned int column, unsigned int const & value);
     unsigned int get(unsigned int row, unsigned int column) const;
     unsigned int * operator[](unsigned int r);
     unsigned int const * operator[](unsigned int r) const;
     unsigned int & operator()(unsigned int r, unsigned int c);
     unsigned int const & operator()(unsigned int r, unsigned int c) const;
     void fill(unsigned int const & arg0);
     void fill_diagonal(unsigned int const & arg0);
     void copy_in(unsigned int const * arg0);
     void set(unsigned int const * d);
     void copy_out(unsigned int * arg0) const;
     vnl_matrixUI & operator=(unsigned int const & v);
     vnl_matrixUI & operator=(vnl_matrixUI const & arg0);
     vnl_matrixUI & operator+=(unsigned int value);
     vnl_matrixUI & operator-=(unsigned int value);
     vnl_matrixUI & operator*=(unsigned int value);
     vnl_matrixUI & operator/=(unsigned int value);
     vnl_matrixUI & operator+=(vnl_matrixUI const & arg0);
     vnl_matrixUI & operator-=(vnl_matrixUI const & arg0);
     vnl_matrixUI & operator*=(vnl_matrixUI const & rhs);
     vnl_matrixUI operator-() const;
     vnl_matrixUI operator+(unsigned int const & v) const;
     vnl_matrixUI operator-(unsigned int const & v) const;
     vnl_matrixUI operator*(unsigned int const & v) const;
     vnl_matrixUI operator/(unsigned int const & v) const;
     vnl_matrixUI operator+(vnl_matrixUI const & rhs) const;
     vnl_matrixUI operator-(vnl_matrixUI const & rhs) const;
     vnl_matrixUI operator*(vnl_matrixUI const & rhs) const;
     vnl_matrixUI transpose() const;
     vnl_matrixUI conjugate_transpose() const;
     vnl_matrixUI & update(vnl_matrixUI const & arg0, unsigned int top = 0, unsigned int left = 0);
     void set_column(unsigned int i, unsigned int const * v);
     void set_column(unsigned int i, unsigned int value);
     void set_column(unsigned int j, vnl_vectorUI const & v);
     void set_columns(unsigned int starting_column, vnl_matrixUI const & M);
     void set_row(unsigned int i, unsigned int const * v);
     void set_row(unsigned int i, unsigned int value);
     void set_row(unsigned int i, vnl_vectorUI const & arg1);
     vnl_matrixUI extract(unsigned int r, unsigned int c, unsigned int top = 0, unsigned int left = 0) const;
     vnl_vectorUI get_row(unsigned int r) const;
     vnl_vectorUI get_column(unsigned int c) const;
     vnl_matrixUI get_n_rows(unsigned int rowstart, unsigned int n) const;
     vnl_matrixUI get_n_columns(unsigned int colstart, unsigned int n) const;
     void set_identity();
     void inplace_transpose();
     void flipud();
     void fliplr();
     void normalize_rows();
     void normalize_columns();
     void scale_row(unsigned int row, unsigned int value);
     void scale_column(unsigned int col, unsigned int value);
     void swap(vnl_matrixUI & that);
     unsigned int array_one_norm() const;
     unsigned int array_two_norm() const;
     unsigned int array_inf_norm() const;
     unsigned int absolute_value_sum() const;
     unsigned int absolute_value_max() const;
     unsigned int operator_one_norm() const;
     unsigned int operator_inf_norm() const;
     unsigned int frobenius_norm() const;
     unsigned int fro_norm() const;
     unsigned int rms() const;
     unsigned int min_value() const;
     unsigned int max_value() const;
     unsigned int mean() const;
     bool empty() const;
     bool is_identity() const;
     bool is_identity(double tol) const;
     bool is_zero() const;
     bool is_zero(double tol) const;
     bool is_finite() const;
     bool has_nans() const;
     void assert_size(unsigned int r, unsigned int c) const;
     void assert_finite() const;
     static vnl_matrixUI read(std::basic_istream< char, std::char_traits< char > > & s);
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     unsigned int const * data_block() const;
     unsigned int * data_block();
     unsigned int const * const * data_array() const;
     unsigned int * * data_array();
     unsigned int * begin();
     unsigned int * end();
     unsigned int const * begin() const;
     unsigned int const * end() const;
     bool operator_eq(vnl_matrixUI const & rhs) const;
     bool operator==(vnl_matrixUI const & that) const;
     bool operator!=(vnl_matrixUI const & that) const;
     void print(std::basic_ostream< char, std::char_traits< char > > & os) const;
     void clear();
     bool set_size(unsigned int r, unsigned int c);
   private:
   protected:
     void assert_size_internal(unsigned int r, unsigned int c) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


 class vnl_matrixUL {
   public:
     vnl_matrixUL();
     vnl_matrixUL(unsigned int r, unsigned int c);
     vnl_matrixUL(unsigned int r, unsigned int c, unsigned long const & v0);
     vnl_matrixUL(unsigned int r, unsigned int c, vnl_matrix_type t);
     vnl_matrixUL(unsigned int r, unsigned int c, unsigned int n, unsigned long const * values);
     vnl_matrixUL(unsigned long const * data_block, unsigned int r, unsigned int c);
     vnl_matrixUL(vnl_matrixUL const & arg0);
     vnl_matrixUL(vnl_matrixUL const & arg0, vnl_matrixUL const & arg1, vnl_tag_add arg2);
     vnl_matrixUL(vnl_matrixUL const & arg0, vnl_matrixUL const & arg1, vnl_tag_sub arg2);
     vnl_matrixUL(vnl_matrixUL const & arg0, unsigned long arg1, vnl_tag_mul arg2);
     vnl_matrixUL(vnl_matrixUL const & arg0, unsigned long arg1, vnl_tag_div arg2);
     vnl_matrixUL(vnl_matrixUL const & arg0, unsigned long arg1, vnl_tag_add arg2);
     vnl_matrixUL(vnl_matrixUL const & arg0, unsigned long arg1, vnl_tag_sub arg2);
     vnl_matrixUL(vnl_matrixUL const & arg0, vnl_matrixUL const & arg1, vnl_tag_mul arg2);
     vnl_matrixUL(vnl_matrixUL & that, vnl_tag_grab arg1);
     ~vnl_matrixUL();
     unsigned int rows() const;
     unsigned int columns() const;
     unsigned int cols() const;
     unsigned int size() const;
     void put(unsigned int row, unsigned int column, unsigned long const & value);
     unsigned long get(unsigned int row, unsigned int column) const;
     unsigned long * operator[](unsigned int r);
     unsigned long const * operator[](unsigned int r) const;
     unsigned long & operator()(unsigned int r, unsigned int c);
     unsigned long const & operator()(unsigned int r, unsigned int c) const;
     void fill(unsigned long const & arg0);
     void fill_diagonal(unsigned long const & arg0);
     void copy_in(unsigned long const * arg0);
     void set(unsigned long const * d);
     void copy_out(unsigned long * arg0) const;
     vnl_matrixUL & operator=(unsigned long const & v);
     vnl_matrixUL & operator=(vnl_matrixUL const & arg0);
     vnl_matrixUL & operator+=(unsigned long value);
     vnl_matrixUL & operator-=(unsigned long value);
     vnl_matrixUL & operator*=(unsigned long value);
     vnl_matrixUL & operator/=(unsigned long value);
     vnl_matrixUL & operator+=(vnl_matrixUL const & arg0);
     vnl_matrixUL & operator-=(vnl_matrixUL const & arg0);
     vnl_matrixUL & operator*=(vnl_matrixUL const & rhs);
     vnl_matrixUL operator-() const;
     vnl_matrixUL operator+(unsigned long const & v) const;
     vnl_matrixUL operator-(unsigned long const & v) const;
     vnl_matrixUL operator*(unsigned long const & v) const;
     vnl_matrixUL operator/(unsigned long const & v) const;
     vnl_matrixUL operator+(vnl_matrixUL const & rhs) const;
     vnl_matrixUL operator-(vnl_matrixUL const & rhs) const;
     vnl_matrixUL operator*(vnl_matrixUL const & rhs) const;
     vnl_matrixUL transpose() const;
     vnl_matrixUL conjugate_transpose() const;
     vnl_matrixUL & update(vnl_matrixUL const & arg0, unsigned int top = 0, unsigned int left = 0);
     void set_column(unsigned int i, unsigned long const * v);
     void set_column(unsigned int i, unsigned long value);
     void set_column(unsigned int j, vnl_vectorUL const & v);
     void set_columns(unsigned int starting_column, vnl_matrixUL const & M);
     void set_row(unsigned int i, unsigned long const * v);
     void set_row(unsigned int i, unsigned long value);
     void set_row(unsigned int i, vnl_vectorUL const & arg1);
     vnl_matrixUL extract(unsigned int r, unsigned int c, unsigned int top = 0, unsigned int left = 0) const;
     vnl_vectorUL get_row(unsigned int r) const;
     vnl_vectorUL get_column(unsigned int c) const;
     vnl_matrixUL get_n_rows(unsigned int rowstart, unsigned int n) const;
     vnl_matrixUL get_n_columns(unsigned int colstart, unsigned int n) const;
     void set_identity();
     void inplace_transpose();
     void flipud();
     void fliplr();
     void normalize_rows();
     void normalize_columns();
     void scale_row(unsigned int row, unsigned long value);
     void scale_column(unsigned int col, unsigned long value);
     void swap(vnl_matrixUL & that);
     unsigned long array_one_norm() const;
     unsigned long array_two_norm() const;
     unsigned long array_inf_norm() const;
     unsigned long absolute_value_sum() const;
     unsigned long absolute_value_max() const;
     unsigned long operator_one_norm() const;
     unsigned long operator_inf_norm() const;
     unsigned long frobenius_norm() const;
     unsigned long fro_norm() const;
     unsigned long rms() const;
     unsigned long min_value() const;
     unsigned long max_value() const;
     unsigned long mean() const;
     bool empty() const;
     bool is_identity() const;
     bool is_identity(double tol) const;
     bool is_zero() const;
     bool is_zero(double tol) const;
     bool is_finite() const;
     bool has_nans() const;
     void assert_size(unsigned int r, unsigned int c) const;
     void assert_finite() const;
     static vnl_matrixUL read(std::basic_istream< char, std::char_traits< char > > & s);
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     unsigned long const * data_block() const;
     unsigned long * data_block();
     unsigned long const * const * data_array() const;
     unsigned long * * data_array();
     unsigned long * begin();
     unsigned long * end();
     unsigned long const * begin() const;
     unsigned long const * end() const;
     bool operator_eq(vnl_matrixUL const & rhs) const;
     bool operator==(vnl_matrixUL const & that) const;
     bool operator!=(vnl_matrixUL const & that) const;
     void print(std::basic_ostream< char, std::char_traits< char > > & os) const;
     void clear();
     bool set_size(unsigned int r, unsigned int c);
   private:
   protected:
     void assert_size_internal(unsigned int r, unsigned int c) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


 class vnl_matrix_vcl_complexD {
   public:
     vnl_matrix_vcl_complexD();
     vnl_matrix_vcl_complexD(unsigned int r, unsigned int c);
     vnl_matrix_vcl_complexD(unsigned int r, unsigned int c, vcl_complexD const & v0);
     vnl_matrix_vcl_complexD(unsigned int r, unsigned int c, vnl_matrix_type t);
     vnl_matrix_vcl_complexD(unsigned int r, unsigned int c, unsigned int n, vcl_complexD const * values);
     vnl_matrix_vcl_complexD(vcl_complexD const * data_block, unsigned int r, unsigned int c);
     vnl_matrix_vcl_complexD(vnl_matrix_vcl_complexD const & arg0);
     vnl_matrix_vcl_complexD(vnl_matrix_vcl_complexD const & arg0, vnl_matrix_vcl_complexD const & arg1, vnl_tag_add arg2);
     vnl_matrix_vcl_complexD(vnl_matrix_vcl_complexD const & arg0, vnl_matrix_vcl_complexD const & arg1, vnl_tag_sub arg2);
     vnl_matrix_vcl_complexD(vnl_matrix_vcl_complexD const & arg0, vcl_complexD arg1, vnl_tag_mul arg2);
     vnl_matrix_vcl_complexD(vnl_matrix_vcl_complexD const & arg0, vcl_complexD arg1, vnl_tag_div arg2);
     vnl_matrix_vcl_complexD(vnl_matrix_vcl_complexD const & arg0, vcl_complexD arg1, vnl_tag_add arg2);
     vnl_matrix_vcl_complexD(vnl_matrix_vcl_complexD const & arg0, vcl_complexD arg1, vnl_tag_sub arg2);
     vnl_matrix_vcl_complexD(vnl_matrix_vcl_complexD const & arg0, vnl_matrix_vcl_complexD const & arg1, vnl_tag_mul arg2);
     vnl_matrix_vcl_complexD(vnl_matrix_vcl_complexD & that, vnl_tag_grab arg1);
     ~vnl_matrix_vcl_complexD();
     unsigned int rows() const;
     unsigned int columns() const;
     unsigned int cols() const;
     unsigned int size() const;
     void put(unsigned int row, unsigned int column, vcl_complexD const & value);
     vcl_complexD get(unsigned int row, unsigned int column) const;
     vcl_complexD * operator[](unsigned int r);
     vcl_complexD const * operator[](unsigned int r) const;
     vcl_complexD & operator()(unsigned int r, unsigned int c);
     vcl_complexD const & operator()(unsigned int r, unsigned int c) const;
     void fill(vcl_complexD const & arg0);
     void fill_diagonal(vcl_complexD const & arg0);
     void copy_in(vcl_complexD const * arg0);
     void set(vcl_complexD const * d);
     void copy_out(vcl_complexD * arg0) const;
     vnl_matrix_vcl_complexD & operator=(vcl_complexD const & v);
     vnl_matrix_vcl_complexD & operator=(vnl_matrix_vcl_complexD const & arg0);
     vnl_matrix_vcl_complexD & operator+=(vcl_complexD value);
     vnl_matrix_vcl_complexD & operator-=(vcl_complexD value);
     vnl_matrix_vcl_complexD & operator*=(vcl_complexD value);
     vnl_matrix_vcl_complexD & operator/=(vcl_complexD value);
     vnl_matrix_vcl_complexD & operator+=(vnl_matrix_vcl_complexD const & arg0);
     vnl_matrix_vcl_complexD & operator-=(vnl_matrix_vcl_complexD const & arg0);
     vnl_matrix_vcl_complexD & operator*=(vnl_matrix_vcl_complexD const & rhs);
     vnl_matrix_vcl_complexD operator-() const;
     vnl_matrix_vcl_complexD operator+(vcl_complexD const & v) const;
     vnl_matrix_vcl_complexD operator-(vcl_complexD const & v) const;
     vnl_matrix_vcl_complexD operator*(vcl_complexD const & v) const;
     vnl_matrix_vcl_complexD operator/(vcl_complexD const & v) const;
     vnl_matrix_vcl_complexD operator+(vnl_matrix_vcl_complexD const & rhs) const;
     vnl_matrix_vcl_complexD operator-(vnl_matrix_vcl_complexD const & rhs) const;
     vnl_matrix_vcl_complexD operator*(vnl_matrix_vcl_complexD const & rhs) const;
     vnl_matrix_vcl_complexD transpose() const;
     vnl_matrix_vcl_complexD conjugate_transpose() const;
     vnl_matrix_vcl_complexD & update(vnl_matrix_vcl_complexD const & arg0, unsigned int top = 0, unsigned int left = 0);
     void set_column(unsigned int i, vcl_complexD const * v);
     void set_column(unsigned int i, vcl_complexD value);
     void set_column(unsigned int j, vnl_vector_vcl_complexD const & v);
     void set_columns(unsigned int starting_column, vnl_matrix_vcl_complexD const & M);
     void set_row(unsigned int i, vcl_complexD const * v);
     void set_row(unsigned int i, vcl_complexD value);
     void set_row(unsigned int i, vnl_vector_vcl_complexD const & arg1);
     vnl_matrix_vcl_complexD extract(unsigned int r, unsigned int c, unsigned int top = 0, unsigned int left = 0) const;
     vnl_vector_vcl_complexD get_row(unsigned int r) const;
     vnl_vector_vcl_complexD get_column(unsigned int c) const;
     vnl_matrix_vcl_complexD get_n_rows(unsigned int rowstart, unsigned int n) const;
     vnl_matrix_vcl_complexD get_n_columns(unsigned int colstart, unsigned int n) const;
     void set_identity();
     void inplace_transpose();
     void flipud();
     void fliplr();
     void normalize_rows();
     void normalize_columns();
     void scale_row(unsigned int row, vcl_complexD value);
     void scale_column(unsigned int col, vcl_complexD value);
     void swap(vnl_matrix_vcl_complexD & that);
     double array_one_norm() const;
     double array_two_norm() const;
     double array_inf_norm() const;
     double absolute_value_sum() const;
     double absolute_value_max() const;
     double operator_one_norm() const;
     double operator_inf_norm() const;
     double frobenius_norm() const;
     double fro_norm() const;
     double rms() const;
     vcl_complexD min_value() const;
     vcl_complexD max_value() const;
     vcl_complexD mean() const;
     bool empty() const;
     bool is_identity() const;
     bool is_identity(double tol) const;
     bool is_zero() const;
     bool is_zero(double tol) const;
     bool is_finite() const;
     bool has_nans() const;
     void assert_size(unsigned int r, unsigned int c) const;
     void assert_finite() const;
     static vnl_matrix_vcl_complexD read(std::basic_istream< char, std::char_traits< char > > & s);
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     vcl_complexD const * data_block() const;
     vcl_complexD * data_block();
     vcl_complexD const * const * data_array() const;
     vcl_complexD * * data_array();
     vcl_complexD * begin();
     vcl_complexD * end();
     vcl_complexD const * begin() const;
     vcl_complexD const * end() const;
     bool operator_eq(vnl_matrix_vcl_complexD const & rhs) const;
     bool operator==(vnl_matrix_vcl_complexD const & that) const;
     bool operator!=(vnl_matrix_vcl_complexD const & that) const;
     void print(std::basic_ostream< char, std::char_traits< char > > & os) const;
     void clear();
     bool set_size(unsigned int r, unsigned int c);
   private:
   protected:
     void assert_size_internal(unsigned int r, unsigned int c) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


 class vnl_matrix_vcl_complexF {
   public:
     vnl_matrix_vcl_complexF();
     vnl_matrix_vcl_complexF(unsigned int r, unsigned int c);
     vnl_matrix_vcl_complexF(unsigned int r, unsigned int c, vcl_complexF const & v0);
     vnl_matrix_vcl_complexF(unsigned int r, unsigned int c, vnl_matrix_type t);
     vnl_matrix_vcl_complexF(unsigned int r, unsigned int c, unsigned int n, vcl_complexF const * values);
     vnl_matrix_vcl_complexF(vcl_complexF const * data_block, unsigned int r, unsigned int c);
     vnl_matrix_vcl_complexF(vnl_matrix_vcl_complexF const & arg0);
     vnl_matrix_vcl_complexF(vnl_matrix_vcl_complexF const & arg0, vnl_matrix_vcl_complexF const & arg1, vnl_tag_add arg2);
     vnl_matrix_vcl_complexF(vnl_matrix_vcl_complexF const & arg0, vnl_matrix_vcl_complexF const & arg1, vnl_tag_sub arg2);
     vnl_matrix_vcl_complexF(vnl_matrix_vcl_complexF const & arg0, vcl_complexF arg1, vnl_tag_mul arg2);
     vnl_matrix_vcl_complexF(vnl_matrix_vcl_complexF const & arg0, vcl_complexF arg1, vnl_tag_div arg2);
     vnl_matrix_vcl_complexF(vnl_matrix_vcl_complexF const & arg0, vcl_complexF arg1, vnl_tag_add arg2);
     vnl_matrix_vcl_complexF(vnl_matrix_vcl_complexF const & arg0, vcl_complexF arg1, vnl_tag_sub arg2);
     vnl_matrix_vcl_complexF(vnl_matrix_vcl_complexF const & arg0, vnl_matrix_vcl_complexF const & arg1, vnl_tag_mul arg2);
     vnl_matrix_vcl_complexF(vnl_matrix_vcl_complexF & that, vnl_tag_grab arg1);
     ~vnl_matrix_vcl_complexF();
     unsigned int rows() const;
     unsigned int columns() const;
     unsigned int cols() const;
     unsigned int size() const;
     void put(unsigned int row, unsigned int column, vcl_complexF const & value);
     vcl_complexF get(unsigned int row, unsigned int column) const;
     vcl_complexF * operator[](unsigned int r);
     vcl_complexF const * operator[](unsigned int r) const;
     vcl_complexF & operator()(unsigned int r, unsigned int c);
     vcl_complexF const & operator()(unsigned int r, unsigned int c) const;
     void fill(vcl_complexF const & arg0);
     void fill_diagonal(vcl_complexF const & arg0);
     void copy_in(vcl_complexF const * arg0);
     void set(vcl_complexF const * d);
     void copy_out(vcl_complexF * arg0) const;
     vnl_matrix_vcl_complexF & operator=(vcl_complexF const & v);
     vnl_matrix_vcl_complexF & operator=(vnl_matrix_vcl_complexF const & arg0);
     vnl_matrix_vcl_complexF & operator+=(vcl_complexF value);
     vnl_matrix_vcl_complexF & operator-=(vcl_complexF value);
     vnl_matrix_vcl_complexF & operator*=(vcl_complexF value);
     vnl_matrix_vcl_complexF & operator/=(vcl_complexF value);
     vnl_matrix_vcl_complexF & operator+=(vnl_matrix_vcl_complexF const & arg0);
     vnl_matrix_vcl_complexF & operator-=(vnl_matrix_vcl_complexF const & arg0);
     vnl_matrix_vcl_complexF & operator*=(vnl_matrix_vcl_complexF const & rhs);
     vnl_matrix_vcl_complexF operator-() const;
     vnl_matrix_vcl_complexF operator+(vcl_complexF const & v) const;
     vnl_matrix_vcl_complexF operator-(vcl_complexF const & v) const;
     vnl_matrix_vcl_complexF operator*(vcl_complexF const & v) const;
     vnl_matrix_vcl_complexF operator/(vcl_complexF const & v) const;
     vnl_matrix_vcl_complexF operator+(vnl_matrix_vcl_complexF const & rhs) const;
     vnl_matrix_vcl_complexF operator-(vnl_matrix_vcl_complexF const & rhs) const;
     vnl_matrix_vcl_complexF operator*(vnl_matrix_vcl_complexF const & rhs) const;
     vnl_matrix_vcl_complexF transpose() const;
     vnl_matrix_vcl_complexF conjugate_transpose() const;
     vnl_matrix_vcl_complexF & update(vnl_matrix_vcl_complexF const & arg0, unsigned int top = 0, unsigned int left = 0);
     void set_column(unsigned int i, vcl_complexF const * v);
     void set_column(unsigned int i, vcl_complexF value);
     void set_column(unsigned int j, vnl_vector_vcl_complexF const & v);
     void set_columns(unsigned int starting_column, vnl_matrix_vcl_complexF const & M);
     void set_row(unsigned int i, vcl_complexF const * v);
     void set_row(unsigned int i, vcl_complexF value);
     void set_row(unsigned int i, vnl_vector_vcl_complexF const & arg1);
     vnl_matrix_vcl_complexF extract(unsigned int r, unsigned int c, unsigned int top = 0, unsigned int left = 0) const;
     vnl_vector_vcl_complexF get_row(unsigned int r) const;
     vnl_vector_vcl_complexF get_column(unsigned int c) const;
     vnl_matrix_vcl_complexF get_n_rows(unsigned int rowstart, unsigned int n) const;
     vnl_matrix_vcl_complexF get_n_columns(unsigned int colstart, unsigned int n) const;
     void set_identity();
     void inplace_transpose();
     void flipud();
     void fliplr();
     void normalize_rows();
     void normalize_columns();
     void scale_row(unsigned int row, vcl_complexF value);
     void scale_column(unsigned int col, vcl_complexF value);
     void swap(vnl_matrix_vcl_complexF & that);
     float array_one_norm() const;
     float array_two_norm() const;
     float array_inf_norm() const;
     float absolute_value_sum() const;
     float absolute_value_max() const;
     float operator_one_norm() const;
     float operator_inf_norm() const;
     float frobenius_norm() const;
     float fro_norm() const;
     float rms() const;
     vcl_complexF min_value() const;
     vcl_complexF max_value() const;
     vcl_complexF mean() const;
     bool empty() const;
     bool is_identity() const;
     bool is_identity(double tol) const;
     bool is_zero() const;
     bool is_zero(double tol) const;
     bool is_finite() const;
     bool has_nans() const;
     void assert_size(unsigned int r, unsigned int c) const;
     void assert_finite() const;
     static vnl_matrix_vcl_complexF read(std::basic_istream< char, std::char_traits< char > > & s);
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     vcl_complexF const * data_block() const;
     vcl_complexF * data_block();
     vcl_complexF const * const * data_array() const;
     vcl_complexF * * data_array();
     vcl_complexF * begin();
     vcl_complexF * end();
     vcl_complexF const * begin() const;
     vcl_complexF const * end() const;
     bool operator_eq(vnl_matrix_vcl_complexF const & rhs) const;
     bool operator==(vnl_matrix_vcl_complexF const & that) const;
     bool operator!=(vnl_matrix_vcl_complexF const & that) const;
     void print(std::basic_ostream< char, std::char_traits< char > > & os) const;
     void clear();
     bool set_size(unsigned int r, unsigned int c);
   private:
   protected:
     void assert_size_internal(unsigned int r, unsigned int c) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


 class vnl_matrix_vcl_complexLD {
   public:
     vnl_matrix_vcl_complexLD();
     vnl_matrix_vcl_complexLD(unsigned int r, unsigned int c);
     vnl_matrix_vcl_complexLD(unsigned int r, unsigned int c, vcl_complexLD const & v0);
     vnl_matrix_vcl_complexLD(unsigned int r, unsigned int c, vnl_matrix_type t);
     vnl_matrix_vcl_complexLD(unsigned int r, unsigned int c, unsigned int n, vcl_complexLD const * values);
     vnl_matrix_vcl_complexLD(vcl_complexLD const * data_block, unsigned int r, unsigned int c);
     vnl_matrix_vcl_complexLD(vnl_matrix_vcl_complexLD const & arg0);
     vnl_matrix_vcl_complexLD(vnl_matrix_vcl_complexLD const & arg0, vnl_matrix_vcl_complexLD const & arg1, vnl_tag_add arg2);
     vnl_matrix_vcl_complexLD(vnl_matrix_vcl_complexLD const & arg0, vnl_matrix_vcl_complexLD const & arg1, vnl_tag_sub arg2);
     vnl_matrix_vcl_complexLD(vnl_matrix_vcl_complexLD const & arg0, vcl_complexLD arg1, vnl_tag_mul arg2);
     vnl_matrix_vcl_complexLD(vnl_matrix_vcl_complexLD const & arg0, vcl_complexLD arg1, vnl_tag_div arg2);
     vnl_matrix_vcl_complexLD(vnl_matrix_vcl_complexLD const & arg0, vcl_complexLD arg1, vnl_tag_add arg2);
     vnl_matrix_vcl_complexLD(vnl_matrix_vcl_complexLD const & arg0, vcl_complexLD arg1, vnl_tag_sub arg2);
     vnl_matrix_vcl_complexLD(vnl_matrix_vcl_complexLD const & arg0, vnl_matrix_vcl_complexLD const & arg1, vnl_tag_mul arg2);
     vnl_matrix_vcl_complexLD(vnl_matrix_vcl_complexLD & that, vnl_tag_grab arg1);
     ~vnl_matrix_vcl_complexLD();
     unsigned int rows() const;
     unsigned int columns() const;
     unsigned int cols() const;
     unsigned int size() const;
     void put(unsigned int row, unsigned int column, vcl_complexLD const & value);
     vcl_complexLD get(unsigned int row, unsigned int column) const;
     vcl_complexLD * operator[](unsigned int r);
     vcl_complexLD const * operator[](unsigned int r) const;
     vcl_complexLD & operator()(unsigned int r, unsigned int c);
     vcl_complexLD const & operator()(unsigned int r, unsigned int c) const;
     void fill(vcl_complexLD const & arg0);
     void fill_diagonal(vcl_complexLD const & arg0);
     void copy_in(vcl_complexLD const * arg0);
     void set(vcl_complexLD const * d);
     void copy_out(vcl_complexLD * arg0) const;
     vnl_matrix_vcl_complexLD & operator=(vcl_complexLD const & v);
     vnl_matrix_vcl_complexLD & operator=(vnl_matrix_vcl_complexLD const & arg0);
     vnl_matrix_vcl_complexLD & operator+=(vcl_complexLD value);
     vnl_matrix_vcl_complexLD & operator-=(vcl_complexLD value);
     vnl_matrix_vcl_complexLD & operator*=(vcl_complexLD value);
     vnl_matrix_vcl_complexLD & operator/=(vcl_complexLD value);
     vnl_matrix_vcl_complexLD & operator+=(vnl_matrix_vcl_complexLD const & arg0);
     vnl_matrix_vcl_complexLD & operator-=(vnl_matrix_vcl_complexLD const & arg0);
     vnl_matrix_vcl_complexLD & operator*=(vnl_matrix_vcl_complexLD const & rhs);
     vnl_matrix_vcl_complexLD operator-() const;
     vnl_matrix_vcl_complexLD operator+(vcl_complexLD const & v) const;
     vnl_matrix_vcl_complexLD operator-(vcl_complexLD const & v) const;
     vnl_matrix_vcl_complexLD operator*(vcl_complexLD const & v) const;
     vnl_matrix_vcl_complexLD operator/(vcl_complexLD const & v) const;
     vnl_matrix_vcl_complexLD operator+(vnl_matrix_vcl_complexLD const & rhs) const;
     vnl_matrix_vcl_complexLD operator-(vnl_matrix_vcl_complexLD const & rhs) const;
     vnl_matrix_vcl_complexLD operator*(vnl_matrix_vcl_complexLD const & rhs) const;
     vnl_matrix_vcl_complexLD transpose() const;
     vnl_matrix_vcl_complexLD conjugate_transpose() const;
     vnl_matrix_vcl_complexLD & update(vnl_matrix_vcl_complexLD const & arg0, unsigned int top = 0, unsigned int left = 0);
     void set_column(unsigned int i, vcl_complexLD const * v);
     void set_column(unsigned int i, vcl_complexLD value);
     void set_column(unsigned int j, vnl_vector_vcl_complexLD const & v);
     void set_columns(unsigned int starting_column, vnl_matrix_vcl_complexLD const & M);
     void set_row(unsigned int i, vcl_complexLD const * v);
     void set_row(unsigned int i, vcl_complexLD value);
     void set_row(unsigned int i, vnl_vector_vcl_complexLD const & arg1);
     vnl_matrix_vcl_complexLD extract(unsigned int r, unsigned int c, unsigned int top = 0, unsigned int left = 0) const;
     vnl_vector_vcl_complexLD get_row(unsigned int r) const;
     vnl_vector_vcl_complexLD get_column(unsigned int c) const;
     vnl_matrix_vcl_complexLD get_n_rows(unsigned int rowstart, unsigned int n) const;
     vnl_matrix_vcl_complexLD get_n_columns(unsigned int colstart, unsigned int n) const;
     void set_identity();
     void inplace_transpose();
     void flipud();
     void fliplr();
     void normalize_rows();
     void normalize_columns();
     void scale_row(unsigned int row, vcl_complexLD value);
     void scale_column(unsigned int col, vcl_complexLD value);
     void swap(vnl_matrix_vcl_complexLD & that);
     long double array_one_norm() const;
     long double array_two_norm() const;
     long double array_inf_norm() const;
     long double absolute_value_sum() const;
     long double absolute_value_max() const;
     long double operator_one_norm() const;
     long double operator_inf_norm() const;
     long double frobenius_norm() const;
     long double fro_norm() const;
     long double rms() const;
     vcl_complexLD min_value() const;
     vcl_complexLD max_value() const;
     vcl_complexLD mean() const;
     bool empty() const;
     bool is_identity() const;
     bool is_identity(double tol) const;
     bool is_zero() const;
     bool is_zero(double tol) const;
     bool is_finite() const;
     bool has_nans() const;
     void assert_size(unsigned int r, unsigned int c) const;
     void assert_finite() const;
     static vnl_matrix_vcl_complexLD read(std::basic_istream< char, std::char_traits< char > > & s);
     bool read_ascii(std::basic_istream< char, std::char_traits< char > > & s);
     vcl_complexLD const * data_block() const;
     vcl_complexLD * data_block();
     vcl_complexLD const * const * data_array() const;
     vcl_complexLD * * data_array();
     vcl_complexLD * begin();
     vcl_complexLD * end();
     vcl_complexLD const * begin() const;
     vcl_complexLD const * end() const;
     bool operator_eq(vnl_matrix_vcl_complexLD const & rhs) const;
     bool operator==(vnl_matrix_vcl_complexLD const & that) const;
     bool operator!=(vnl_matrix_vcl_complexLD const & that) const;
     void print(std::basic_ostream< char, std::char_traits< char > > & os) const;
     void clear();
     bool set_size(unsigned int r, unsigned int c);
   private:
   protected:
     void assert_size_internal(unsigned int r, unsigned int c) const;
     void assert_finite_internal() const;
     void destroy();
     static void inline_function_tickler();
 };


