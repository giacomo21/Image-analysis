# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _itkInterpolateImageFunctionPython.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_itkInterpolateImageFunctionPython', [dirname(__file__)])
        except ImportError:
            import _itkInterpolateImageFunctionPython
            return _itkInterpolateImageFunctionPython
        if fp is not None:
            try:
                _mod = imp.load_module('_itkInterpolateImageFunctionPython', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _itkInterpolateImageFunctionPython = swig_import_helper()
    del swig_import_helper
else:
    import _itkInterpolateImageFunctionPython
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import itkPointPython
import vnl_vectorPython
import vcl_complexPython
import pyBasePython
import vnl_matrixPython
import itkFixedArrayPython
import itkVectorPython
import vnl_vector_refPython
import itkContinuousIndexPython
import itkIndexPython
import itkSizePython
import itkOffsetPython
import itkImageFunctionPython
import itkImagePython
import itkCovariantVectorPython
import ITKRegionsPython
import ITKCommonBasePython
import itkEventObjectsPython
import itkMatrixPython
import vnl_matrix_fixedPython
import itkRGBAPixelPython
import itkSymmetricSecondRankTensorPython
import itkRGBPixelPython
import itkFunctionBasePython
import itkArrayPython
def itkInterpolateImageFunctionID3F_New():
  return itkInterpolateImageFunctionID3F.New()

def itkInterpolateImageFunctionID3D_New():
  return itkInterpolateImageFunctionID3D.New()

def itkInterpolateImageFunctionIF3F_New():
  return itkInterpolateImageFunctionIF3F.New()

def itkInterpolateImageFunctionIF3D_New():
  return itkInterpolateImageFunctionIF3D.New()

def itkInterpolateImageFunctionIUS3F_New():
  return itkInterpolateImageFunctionIUS3F.New()

def itkInterpolateImageFunctionIUS3D_New():
  return itkInterpolateImageFunctionIUS3D.New()

def itkInterpolateImageFunctionIUL3F_New():
  return itkInterpolateImageFunctionIUL3F.New()

def itkInterpolateImageFunctionIUL3D_New():
  return itkInterpolateImageFunctionIUL3D.New()

def itkInterpolateImageFunctionIUC3F_New():
  return itkInterpolateImageFunctionIUC3F.New()

def itkInterpolateImageFunctionIUC3D_New():
  return itkInterpolateImageFunctionIUC3D.New()

def itkInterpolateImageFunctionID2F_New():
  return itkInterpolateImageFunctionID2F.New()

def itkInterpolateImageFunctionID2D_New():
  return itkInterpolateImageFunctionID2D.New()

def itkInterpolateImageFunctionIF2F_New():
  return itkInterpolateImageFunctionIF2F.New()

def itkInterpolateImageFunctionIF2D_New():
  return itkInterpolateImageFunctionIF2D.New()

def itkInterpolateImageFunctionIUS2F_New():
  return itkInterpolateImageFunctionIUS2F.New()

def itkInterpolateImageFunctionIUS2D_New():
  return itkInterpolateImageFunctionIUS2D.New()

def itkInterpolateImageFunctionIUL2F_New():
  return itkInterpolateImageFunctionIUL2F.New()

def itkInterpolateImageFunctionIUL2D_New():
  return itkInterpolateImageFunctionIUL2D.New()

def itkInterpolateImageFunctionIUC2F_New():
  return itkInterpolateImageFunctionIUC2F.New()

def itkInterpolateImageFunctionIUC2D_New():
  return itkInterpolateImageFunctionIUC2D.New()

class itkInterpolateImageFunctionID2D(itkImageFunctionPython.itkImageFunctionID2DD):
    """Proxy of C++ itkInterpolateImageFunctionID2D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D_ImageDimension
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionID2D
    def cast(*args):
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionID2D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkInterpolateImageFunctionID2D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionID2D
        
        Create a new object of the class itkInterpolateImageFunctionID2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkInterpolateImageFunctionID2D.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkInterpolateImageFunctionID2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionID2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionID2D.GetPointer = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D_GetPointer,None,itkInterpolateImageFunctionID2D)
itkInterpolateImageFunctionID2D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D_swigregister
itkInterpolateImageFunctionID2D_swigregister(itkInterpolateImageFunctionID2D)

def itkInterpolateImageFunctionID2D_cast(*args):
  """itkInterpolateImageFunctionID2D_cast(itkLightObject obj) -> itkInterpolateImageFunctionID2D"""
  return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2D_cast(*args)

class itkInterpolateImageFunctionID2F(itkImageFunctionPython.itkImageFunctionID2DF):
    """Proxy of C++ itkInterpolateImageFunctionID2F class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2F_ImageDimension
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionID2F
    def cast(*args):
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionID2F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2F_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkInterpolateImageFunctionID2F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2F_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionID2F
        
        Create a new object of the class itkInterpolateImageFunctionID2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkInterpolateImageFunctionID2F.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkInterpolateImageFunctionID2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionID2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionID2F.GetPointer = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2F_GetPointer,None,itkInterpolateImageFunctionID2F)
itkInterpolateImageFunctionID2F_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2F_swigregister
itkInterpolateImageFunctionID2F_swigregister(itkInterpolateImageFunctionID2F)

def itkInterpolateImageFunctionID2F_cast(*args):
  """itkInterpolateImageFunctionID2F_cast(itkLightObject obj) -> itkInterpolateImageFunctionID2F"""
  return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID2F_cast(*args)

class itkInterpolateImageFunctionID3D(itkImageFunctionPython.itkImageFunctionID3DD):
    """Proxy of C++ itkInterpolateImageFunctionID3D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D_ImageDimension
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionID3D
    def cast(*args):
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionID3D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkInterpolateImageFunctionID3D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionID3D
        
        Create a new object of the class itkInterpolateImageFunctionID3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkInterpolateImageFunctionID3D.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkInterpolateImageFunctionID3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionID3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionID3D.GetPointer = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D_GetPointer,None,itkInterpolateImageFunctionID3D)
itkInterpolateImageFunctionID3D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D_swigregister
itkInterpolateImageFunctionID3D_swigregister(itkInterpolateImageFunctionID3D)

def itkInterpolateImageFunctionID3D_cast(*args):
  """itkInterpolateImageFunctionID3D_cast(itkLightObject obj) -> itkInterpolateImageFunctionID3D"""
  return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3D_cast(*args)

class itkInterpolateImageFunctionID3F(itkImageFunctionPython.itkImageFunctionID3DF):
    """Proxy of C++ itkInterpolateImageFunctionID3F class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3F_ImageDimension
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionID3F
    def cast(*args):
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionID3F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3F_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkInterpolateImageFunctionID3F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3F_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionID3F
        
        Create a new object of the class itkInterpolateImageFunctionID3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkInterpolateImageFunctionID3F.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkInterpolateImageFunctionID3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionID3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionID3F.GetPointer = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3F_GetPointer,None,itkInterpolateImageFunctionID3F)
itkInterpolateImageFunctionID3F_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3F_swigregister
itkInterpolateImageFunctionID3F_swigregister(itkInterpolateImageFunctionID3F)

def itkInterpolateImageFunctionID3F_cast(*args):
  """itkInterpolateImageFunctionID3F_cast(itkLightObject obj) -> itkInterpolateImageFunctionID3F"""
  return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionID3F_cast(*args)

class itkInterpolateImageFunctionIF2D(itkImageFunctionPython.itkImageFunctionIF2DD):
    """Proxy of C++ itkInterpolateImageFunctionIF2D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D_ImageDimension
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIF2D
    def cast(*args):
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIF2D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkInterpolateImageFunctionIF2D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIF2D
        
        Create a new object of the class itkInterpolateImageFunctionIF2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkInterpolateImageFunctionIF2D.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkInterpolateImageFunctionIF2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIF2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIF2D.GetPointer = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D_GetPointer,None,itkInterpolateImageFunctionIF2D)
itkInterpolateImageFunctionIF2D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D_swigregister
itkInterpolateImageFunctionIF2D_swigregister(itkInterpolateImageFunctionIF2D)

def itkInterpolateImageFunctionIF2D_cast(*args):
  """itkInterpolateImageFunctionIF2D_cast(itkLightObject obj) -> itkInterpolateImageFunctionIF2D"""
  return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2D_cast(*args)

class itkInterpolateImageFunctionIF2F(itkImageFunctionPython.itkImageFunctionIF2DF):
    """Proxy of C++ itkInterpolateImageFunctionIF2F class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2F_ImageDimension
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIF2F
    def cast(*args):
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIF2F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2F_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkInterpolateImageFunctionIF2F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2F_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIF2F
        
        Create a new object of the class itkInterpolateImageFunctionIF2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkInterpolateImageFunctionIF2F.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkInterpolateImageFunctionIF2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIF2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIF2F.GetPointer = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2F_GetPointer,None,itkInterpolateImageFunctionIF2F)
itkInterpolateImageFunctionIF2F_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2F_swigregister
itkInterpolateImageFunctionIF2F_swigregister(itkInterpolateImageFunctionIF2F)

def itkInterpolateImageFunctionIF2F_cast(*args):
  """itkInterpolateImageFunctionIF2F_cast(itkLightObject obj) -> itkInterpolateImageFunctionIF2F"""
  return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF2F_cast(*args)

class itkInterpolateImageFunctionIF3D(itkImageFunctionPython.itkImageFunctionIF3DD):
    """Proxy of C++ itkInterpolateImageFunctionIF3D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D_ImageDimension
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIF3D
    def cast(*args):
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIF3D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkInterpolateImageFunctionIF3D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIF3D
        
        Create a new object of the class itkInterpolateImageFunctionIF3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkInterpolateImageFunctionIF3D.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkInterpolateImageFunctionIF3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIF3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIF3D.GetPointer = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D_GetPointer,None,itkInterpolateImageFunctionIF3D)
itkInterpolateImageFunctionIF3D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D_swigregister
itkInterpolateImageFunctionIF3D_swigregister(itkInterpolateImageFunctionIF3D)

def itkInterpolateImageFunctionIF3D_cast(*args):
  """itkInterpolateImageFunctionIF3D_cast(itkLightObject obj) -> itkInterpolateImageFunctionIF3D"""
  return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3D_cast(*args)

class itkInterpolateImageFunctionIF3F(itkImageFunctionPython.itkImageFunctionIF3DF):
    """Proxy of C++ itkInterpolateImageFunctionIF3F class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3F_ImageDimension
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIF3F
    def cast(*args):
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIF3F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3F_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkInterpolateImageFunctionIF3F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3F_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIF3F
        
        Create a new object of the class itkInterpolateImageFunctionIF3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkInterpolateImageFunctionIF3F.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkInterpolateImageFunctionIF3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIF3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIF3F.GetPointer = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3F_GetPointer,None,itkInterpolateImageFunctionIF3F)
itkInterpolateImageFunctionIF3F_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3F_swigregister
itkInterpolateImageFunctionIF3F_swigregister(itkInterpolateImageFunctionIF3F)

def itkInterpolateImageFunctionIF3F_cast(*args):
  """itkInterpolateImageFunctionIF3F_cast(itkLightObject obj) -> itkInterpolateImageFunctionIF3F"""
  return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIF3F_cast(*args)

class itkInterpolateImageFunctionIUC2D(itkImageFunctionPython.itkImageFunctionIUC2DD):
    """Proxy of C++ itkInterpolateImageFunctionIUC2D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D_ImageDimension
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUC2D
    def cast(*args):
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIUC2D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkInterpolateImageFunctionIUC2D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUC2D
        
        Create a new object of the class itkInterpolateImageFunctionIUC2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkInterpolateImageFunctionIUC2D.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkInterpolateImageFunctionIUC2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUC2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIUC2D.GetPointer = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D_GetPointer,None,itkInterpolateImageFunctionIUC2D)
itkInterpolateImageFunctionIUC2D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D_swigregister
itkInterpolateImageFunctionIUC2D_swigregister(itkInterpolateImageFunctionIUC2D)

def itkInterpolateImageFunctionIUC2D_cast(*args):
  """itkInterpolateImageFunctionIUC2D_cast(itkLightObject obj) -> itkInterpolateImageFunctionIUC2D"""
  return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2D_cast(*args)

class itkInterpolateImageFunctionIUC2F(itkImageFunctionPython.itkImageFunctionIUC2DF):
    """Proxy of C++ itkInterpolateImageFunctionIUC2F class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2F_ImageDimension
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUC2F
    def cast(*args):
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIUC2F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2F_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkInterpolateImageFunctionIUC2F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2F_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUC2F
        
        Create a new object of the class itkInterpolateImageFunctionIUC2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkInterpolateImageFunctionIUC2F.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkInterpolateImageFunctionIUC2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUC2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIUC2F.GetPointer = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2F_GetPointer,None,itkInterpolateImageFunctionIUC2F)
itkInterpolateImageFunctionIUC2F_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2F_swigregister
itkInterpolateImageFunctionIUC2F_swigregister(itkInterpolateImageFunctionIUC2F)

def itkInterpolateImageFunctionIUC2F_cast(*args):
  """itkInterpolateImageFunctionIUC2F_cast(itkLightObject obj) -> itkInterpolateImageFunctionIUC2F"""
  return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC2F_cast(*args)

class itkInterpolateImageFunctionIUC3D(itkImageFunctionPython.itkImageFunctionIUC3DD):
    """Proxy of C++ itkInterpolateImageFunctionIUC3D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D_ImageDimension
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUC3D
    def cast(*args):
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIUC3D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkInterpolateImageFunctionIUC3D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUC3D
        
        Create a new object of the class itkInterpolateImageFunctionIUC3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkInterpolateImageFunctionIUC3D.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkInterpolateImageFunctionIUC3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUC3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIUC3D.GetPointer = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D_GetPointer,None,itkInterpolateImageFunctionIUC3D)
itkInterpolateImageFunctionIUC3D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D_swigregister
itkInterpolateImageFunctionIUC3D_swigregister(itkInterpolateImageFunctionIUC3D)

def itkInterpolateImageFunctionIUC3D_cast(*args):
  """itkInterpolateImageFunctionIUC3D_cast(itkLightObject obj) -> itkInterpolateImageFunctionIUC3D"""
  return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3D_cast(*args)

class itkInterpolateImageFunctionIUC3F(itkImageFunctionPython.itkImageFunctionIUC3DF):
    """Proxy of C++ itkInterpolateImageFunctionIUC3F class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3F_ImageDimension
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUC3F
    def cast(*args):
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIUC3F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3F_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkInterpolateImageFunctionIUC3F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3F_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUC3F
        
        Create a new object of the class itkInterpolateImageFunctionIUC3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkInterpolateImageFunctionIUC3F.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkInterpolateImageFunctionIUC3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUC3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIUC3F.GetPointer = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3F_GetPointer,None,itkInterpolateImageFunctionIUC3F)
itkInterpolateImageFunctionIUC3F_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3F_swigregister
itkInterpolateImageFunctionIUC3F_swigregister(itkInterpolateImageFunctionIUC3F)

def itkInterpolateImageFunctionIUC3F_cast(*args):
  """itkInterpolateImageFunctionIUC3F_cast(itkLightObject obj) -> itkInterpolateImageFunctionIUC3F"""
  return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUC3F_cast(*args)

class itkInterpolateImageFunctionIUL2D(itkImageFunctionPython.itkImageFunctionIUL2DD):
    """Proxy of C++ itkInterpolateImageFunctionIUL2D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL2D_ImageDimension
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUL2D
    def cast(*args):
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIUL2D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL2D_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkInterpolateImageFunctionIUL2D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL2D_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUL2D
        
        Create a new object of the class itkInterpolateImageFunctionIUL2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkInterpolateImageFunctionIUL2D.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkInterpolateImageFunctionIUL2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUL2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIUL2D.GetPointer = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL2D_GetPointer,None,itkInterpolateImageFunctionIUL2D)
itkInterpolateImageFunctionIUL2D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL2D_swigregister
itkInterpolateImageFunctionIUL2D_swigregister(itkInterpolateImageFunctionIUL2D)

def itkInterpolateImageFunctionIUL2D_cast(*args):
  """itkInterpolateImageFunctionIUL2D_cast(itkLightObject obj) -> itkInterpolateImageFunctionIUL2D"""
  return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL2D_cast(*args)

class itkInterpolateImageFunctionIUL2F(itkImageFunctionPython.itkImageFunctionIUL2DF):
    """Proxy of C++ itkInterpolateImageFunctionIUL2F class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL2F_ImageDimension
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUL2F
    def cast(*args):
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIUL2F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL2F_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkInterpolateImageFunctionIUL2F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL2F_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUL2F
        
        Create a new object of the class itkInterpolateImageFunctionIUL2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkInterpolateImageFunctionIUL2F.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkInterpolateImageFunctionIUL2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUL2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIUL2F.GetPointer = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL2F_GetPointer,None,itkInterpolateImageFunctionIUL2F)
itkInterpolateImageFunctionIUL2F_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL2F_swigregister
itkInterpolateImageFunctionIUL2F_swigregister(itkInterpolateImageFunctionIUL2F)

def itkInterpolateImageFunctionIUL2F_cast(*args):
  """itkInterpolateImageFunctionIUL2F_cast(itkLightObject obj) -> itkInterpolateImageFunctionIUL2F"""
  return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL2F_cast(*args)

class itkInterpolateImageFunctionIUL3D(itkImageFunctionPython.itkImageFunctionIUL3DD):
    """Proxy of C++ itkInterpolateImageFunctionIUL3D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL3D_ImageDimension
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUL3D
    def cast(*args):
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIUL3D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL3D_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkInterpolateImageFunctionIUL3D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL3D_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUL3D
        
        Create a new object of the class itkInterpolateImageFunctionIUL3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkInterpolateImageFunctionIUL3D.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkInterpolateImageFunctionIUL3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUL3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIUL3D.GetPointer = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL3D_GetPointer,None,itkInterpolateImageFunctionIUL3D)
itkInterpolateImageFunctionIUL3D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL3D_swigregister
itkInterpolateImageFunctionIUL3D_swigregister(itkInterpolateImageFunctionIUL3D)

def itkInterpolateImageFunctionIUL3D_cast(*args):
  """itkInterpolateImageFunctionIUL3D_cast(itkLightObject obj) -> itkInterpolateImageFunctionIUL3D"""
  return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL3D_cast(*args)

class itkInterpolateImageFunctionIUL3F(itkImageFunctionPython.itkImageFunctionIUL3DF):
    """Proxy of C++ itkInterpolateImageFunctionIUL3F class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL3F_ImageDimension
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUL3F
    def cast(*args):
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIUL3F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL3F_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkInterpolateImageFunctionIUL3F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL3F_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUL3F
        
        Create a new object of the class itkInterpolateImageFunctionIUL3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkInterpolateImageFunctionIUL3F.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkInterpolateImageFunctionIUL3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUL3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIUL3F.GetPointer = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL3F_GetPointer,None,itkInterpolateImageFunctionIUL3F)
itkInterpolateImageFunctionIUL3F_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL3F_swigregister
itkInterpolateImageFunctionIUL3F_swigregister(itkInterpolateImageFunctionIUL3F)

def itkInterpolateImageFunctionIUL3F_cast(*args):
  """itkInterpolateImageFunctionIUL3F_cast(itkLightObject obj) -> itkInterpolateImageFunctionIUL3F"""
  return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUL3F_cast(*args)

class itkInterpolateImageFunctionIUS2D(itkImageFunctionPython.itkImageFunctionIUS2DD):
    """Proxy of C++ itkInterpolateImageFunctionIUS2D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D_ImageDimension
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUS2D
    def cast(*args):
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIUS2D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkInterpolateImageFunctionIUS2D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUS2D
        
        Create a new object of the class itkInterpolateImageFunctionIUS2D and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkInterpolateImageFunctionIUS2D.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkInterpolateImageFunctionIUS2D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUS2D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIUS2D.GetPointer = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D_GetPointer,None,itkInterpolateImageFunctionIUS2D)
itkInterpolateImageFunctionIUS2D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D_swigregister
itkInterpolateImageFunctionIUS2D_swigregister(itkInterpolateImageFunctionIUS2D)

def itkInterpolateImageFunctionIUS2D_cast(*args):
  """itkInterpolateImageFunctionIUS2D_cast(itkLightObject obj) -> itkInterpolateImageFunctionIUS2D"""
  return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2D_cast(*args)

class itkInterpolateImageFunctionIUS2F(itkImageFunctionPython.itkImageFunctionIUS2DF):
    """Proxy of C++ itkInterpolateImageFunctionIUS2F class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2F_ImageDimension
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUS2F
    def cast(*args):
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIUS2F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2F_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkInterpolateImageFunctionIUS2F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2F_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUS2F
        
        Create a new object of the class itkInterpolateImageFunctionIUS2F and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkInterpolateImageFunctionIUS2F.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkInterpolateImageFunctionIUS2F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUS2F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIUS2F.GetPointer = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2F_GetPointer,None,itkInterpolateImageFunctionIUS2F)
itkInterpolateImageFunctionIUS2F_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2F_swigregister
itkInterpolateImageFunctionIUS2F_swigregister(itkInterpolateImageFunctionIUS2F)

def itkInterpolateImageFunctionIUS2F_cast(*args):
  """itkInterpolateImageFunctionIUS2F_cast(itkLightObject obj) -> itkInterpolateImageFunctionIUS2F"""
  return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS2F_cast(*args)

class itkInterpolateImageFunctionIUS3D(itkImageFunctionPython.itkImageFunctionIUS3DD):
    """Proxy of C++ itkInterpolateImageFunctionIUS3D class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D_ImageDimension
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUS3D
    def cast(*args):
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIUS3D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkInterpolateImageFunctionIUS3D"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUS3D
        
        Create a new object of the class itkInterpolateImageFunctionIUS3D and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkInterpolateImageFunctionIUS3D.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkInterpolateImageFunctionIUS3D.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUS3D.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIUS3D.GetPointer = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D_GetPointer,None,itkInterpolateImageFunctionIUS3D)
itkInterpolateImageFunctionIUS3D_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D_swigregister
itkInterpolateImageFunctionIUS3D_swigregister(itkInterpolateImageFunctionIUS3D)

def itkInterpolateImageFunctionIUS3D_cast(*args):
  """itkInterpolateImageFunctionIUS3D_cast(itkLightObject obj) -> itkInterpolateImageFunctionIUS3D"""
  return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3D_cast(*args)

class itkInterpolateImageFunctionIUS3F(itkImageFunctionPython.itkImageFunctionIUS3DF):
    """Proxy of C++ itkInterpolateImageFunctionIUS3F class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    ImageDimension = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3F_ImageDimension
    __swig_destroy__ = _itkInterpolateImageFunctionPython.delete_itkInterpolateImageFunctionIUS3F
    def cast(*args):
        """cast(itkLightObject obj) -> itkInterpolateImageFunctionIUS3F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3F_cast(*args)

    cast = staticmethod(cast)
    def GetPointer(self):
        """GetPointer(self) -> itkInterpolateImageFunctionIUS3F"""
        return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3F_GetPointer(self)

    def New(*args, **kargs):
        """New() -> itkInterpolateImageFunctionIUS3F
        
        Create a new object of the class itkInterpolateImageFunctionIUS3F and set the input and the parameters if some
        named or non-named arguments are passed to that method.
        
        New() tries to assign all the non named parameters to the input of the new objects - the
        first non named parameter in the first input, etc.
        
        The named parameters are used by calling the method with the same name prefixed by 'Set'.
        
        Ex:
        
          itkInterpolateImageFunctionIUS3F.New( reader, Threshold=10 ) 
        
        is (most of the time) equivalent to:
        
          obj = itkInterpolateImageFunctionIUS3F.New()
          obj.SetInput( 0, reader.GetOutput() )
          obj.SetThreshold( 10 )
        """
        obj = itkInterpolateImageFunctionIUS3F.__New_orig__()
        import itkTemplate
        itkTemplate.New(obj, *args, **kargs)
        return obj
    New = staticmethod(New)

itkInterpolateImageFunctionIUS3F.GetPointer = new_instancemethod(_itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3F_GetPointer,None,itkInterpolateImageFunctionIUS3F)
itkInterpolateImageFunctionIUS3F_swigregister = _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3F_swigregister
itkInterpolateImageFunctionIUS3F_swigregister(itkInterpolateImageFunctionIUS3F)

def itkInterpolateImageFunctionIUS3F_cast(*args):
  """itkInterpolateImageFunctionIUS3F_cast(itkLightObject obj) -> itkInterpolateImageFunctionIUS3F"""
  return _itkInterpolateImageFunctionPython.itkInterpolateImageFunctionIUS3F_cast(*args)



