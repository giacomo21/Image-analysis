// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkFastMarchingImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkFastMarchingImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkFastMarchingImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkFastMarchingImageFilterJava
#endif
#ifdef SWIGLUA
%module itkFastMarchingImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkFastMarchingImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkFastMarchingImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkFastMarchingImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkFastMarchingImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkFastMarchingImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkFastMarchingImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkFastMarchingImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkFastMarchingImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkFastMarchingImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkFastMarchingImageFilterPython
#endif
#ifdef SWIGR
%module itkFastMarchingImageFilterR
#endif
#ifdef SWIGRUBY
%module itkFastMarchingImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkFastMarchingImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkFastMarchingImageFilterTcl
#endif
#ifdef SWIGXML
%module itkFastMarchingImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Numerics.includes"
#include "LevelSet.includes"
%}


%{
%}




%import wrap_itkPoint.i
%import wrap_ITKRegions.i
%import wrap_itkImageToImageFilterA.i
%import wrap_itkIndex.i
%import wrap_itkImage.i
%import wrap_itkVectorContainer.i
%import wrap_itkMatrix.i
%import wrap_ITKCommonBase.i
%import wrap_itkSize.i
%import wrap_itkVector.i


%include itk.i
%include wrap_itkFastMarchingImageFilter_ext.i


 class itkFastMarchingImageFilterID2ID2 : public itkImageToImageFilterID2ID2 {
   public:
     enum  {  SetDimension = 2 };
     enum  {  SpeedImageDimension = 2 };
     enum LabelType {  FarPoint = 0,  AlivePoint = 1,  TrialPoint = 2,  InitialTrialPoint = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  SpeedConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToLevelSetCheck = 1 };
     enum  {  LevelSetOStreamWritableCheck = 1 };
     static itkFastMarchingImageFilterID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetAlivePoints(itkVectorContainerUILSND2 * points);
     itkVectorContainerUILSND2_Pointer GetAlivePoints();
     void SetTrialPoints(itkVectorContainerUILSND2 * points);
     itkVectorContainerUILSND2_Pointer GetTrialPoints();
     itkImageUC2_Pointer GetLabelImage() const;
     void SetSpeedConstant(double value);
     virtual double const & GetSpeedConstant() const;
     virtual void SetNormalizationFactor(double const _arg);
     virtual double GetNormalizationFactor() const;
     virtual void SetStoppingValue(double const _arg);
     virtual double const & GetStoppingValue() const;
     virtual void SetCollectPoints(bool const _arg);
     virtual bool const & GetCollectPoints() const;
     virtual void CollectPointsOn();
     virtual void CollectPointsOff();
     itkVectorContainerUILSND2_Pointer GetProcessedPoints() const;
     virtual void SetOutputSize(itkSize2 const & size);
     virtual itkSize2 GetOutputSize() const;
     virtual void SetOutputRegion(itkImageRegion2 const _arg);
     virtual itkImageRegion2 const & GetOutputRegion() const;
     virtual void SetOutputSpacing(itkVectorD2 const _arg);
     virtual itkVectorD2 const & GetOutputSpacing() const;
     virtual void SetOutputDirection(itkMatrixD22 const _arg);
     virtual itkMatrixD22 const & GetOutputDirection() const;
     virtual void SetOutputOrigin(itkPointD2 const _arg);
     virtual itkPointD2 const & GetOutputOrigin() const;
     virtual void SetOverrideOutputInformation(bool const _arg);
     virtual bool const & GetOverrideOutputInformation() const;
     virtual void OverrideOutputInformationOn();
     virtual void OverrideOutputInformationOff();
   private:
     itkFastMarchingImageFilterID2ID2(itkFastMarchingImageFilterID2ID2 const & arg0);
     void operator=(itkFastMarchingImageFilterID2ID2 const & arg0);
   protected:
     itkFastMarchingImageFilterID2ID2();
     ~itkFastMarchingImageFilterID2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void Initialize(itkImageD2 * arg0);
     virtual void UpdateNeighbors(itkIndex2 const & index, itkImageD2 const * arg1, itkImageD2 * arg2);
     virtual double UpdateValue(itkIndex2 const & index, itkImageD2 const * arg1, itkImageD2 * arg2);
     itkFastMarchingImageFilterID2ID2::AxisNodeType const & GetNodeUsedInCalculation(unsigned int idx) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
     virtual double const & GetLargeValue() const;
     virtual itkIndex2 const & GetStartIndex() const;
     virtual itkIndex2 const & GetLastIndex() const;
 };


 class itkFastMarchingImageFilterID2ID2_Pointer {
   public:
     itkFastMarchingImageFilterID2ID2_Pointer();
     itkFastMarchingImageFilterID2ID2_Pointer(itkFastMarchingImageFilterID2ID2_Pointer const & p);
     itkFastMarchingImageFilterID2ID2_Pointer(itkFastMarchingImageFilterID2ID2 * p);
     ~itkFastMarchingImageFilterID2ID2_Pointer();
     itkFastMarchingImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkFastMarchingImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkFastMarchingImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkFastMarchingImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkFastMarchingImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkFastMarchingImageFilterID2ID2_Pointer const & r) const;
     itkFastMarchingImageFilterID2ID2_Pointer & operator=(itkFastMarchingImageFilterID2ID2_Pointer const & r);
     itkFastMarchingImageFilterID2ID2_Pointer & operator=(itkFastMarchingImageFilterID2ID2 * r);
     itkFastMarchingImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkFastMarchingImageFilterID3ID3 : public itkImageToImageFilterID3ID3 {
   public:
     enum  {  SetDimension = 3 };
     enum  {  SpeedImageDimension = 3 };
     enum LabelType {  FarPoint = 0,  AlivePoint = 1,  TrialPoint = 2,  InitialTrialPoint = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  SpeedConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToLevelSetCheck = 1 };
     enum  {  LevelSetOStreamWritableCheck = 1 };
     static itkFastMarchingImageFilterID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetAlivePoints(itkVectorContainerUILSND3 * points);
     itkVectorContainerUILSND3_Pointer GetAlivePoints();
     void SetTrialPoints(itkVectorContainerUILSND3 * points);
     itkVectorContainerUILSND3_Pointer GetTrialPoints();
     itkImageUC3_Pointer GetLabelImage() const;
     void SetSpeedConstant(double value);
     virtual double const & GetSpeedConstant() const;
     virtual void SetNormalizationFactor(double const _arg);
     virtual double GetNormalizationFactor() const;
     virtual void SetStoppingValue(double const _arg);
     virtual double const & GetStoppingValue() const;
     virtual void SetCollectPoints(bool const _arg);
     virtual bool const & GetCollectPoints() const;
     virtual void CollectPointsOn();
     virtual void CollectPointsOff();
     itkVectorContainerUILSND3_Pointer GetProcessedPoints() const;
     virtual void SetOutputSize(itkSize3 const & size);
     virtual itkSize3 GetOutputSize() const;
     virtual void SetOutputRegion(itkImageRegion3 const _arg);
     virtual itkImageRegion3 const & GetOutputRegion() const;
     virtual void SetOutputSpacing(itkVectorD3 const _arg);
     virtual itkVectorD3 const & GetOutputSpacing() const;
     virtual void SetOutputDirection(itkMatrixD33 const _arg);
     virtual itkMatrixD33 const & GetOutputDirection() const;
     virtual void SetOutputOrigin(itkPointD3 const _arg);
     virtual itkPointD3 const & GetOutputOrigin() const;
     virtual void SetOverrideOutputInformation(bool const _arg);
     virtual bool const & GetOverrideOutputInformation() const;
     virtual void OverrideOutputInformationOn();
     virtual void OverrideOutputInformationOff();
   private:
     itkFastMarchingImageFilterID3ID3(itkFastMarchingImageFilterID3ID3 const & arg0);
     void operator=(itkFastMarchingImageFilterID3ID3 const & arg0);
   protected:
     itkFastMarchingImageFilterID3ID3();
     ~itkFastMarchingImageFilterID3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void Initialize(itkImageD3 * arg0);
     virtual void UpdateNeighbors(itkIndex3 const & index, itkImageD3 const * arg1, itkImageD3 * arg2);
     virtual double UpdateValue(itkIndex3 const & index, itkImageD3 const * arg1, itkImageD3 * arg2);
     itkFastMarchingImageFilterID3ID3::AxisNodeType const & GetNodeUsedInCalculation(unsigned int idx) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
     virtual double const & GetLargeValue() const;
     virtual itkIndex3 const & GetStartIndex() const;
     virtual itkIndex3 const & GetLastIndex() const;
 };


 class itkFastMarchingImageFilterID3ID3_Pointer {
   public:
     itkFastMarchingImageFilterID3ID3_Pointer();
     itkFastMarchingImageFilterID3ID3_Pointer(itkFastMarchingImageFilterID3ID3_Pointer const & p);
     itkFastMarchingImageFilterID3ID3_Pointer(itkFastMarchingImageFilterID3ID3 * p);
     ~itkFastMarchingImageFilterID3ID3_Pointer();
     itkFastMarchingImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkFastMarchingImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkFastMarchingImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkFastMarchingImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkFastMarchingImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkFastMarchingImageFilterID3ID3_Pointer const & r) const;
     itkFastMarchingImageFilterID3ID3_Pointer & operator=(itkFastMarchingImageFilterID3ID3_Pointer const & r);
     itkFastMarchingImageFilterID3ID3_Pointer & operator=(itkFastMarchingImageFilterID3ID3 * r);
     itkFastMarchingImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkFastMarchingImageFilterIF2IF2 : public itkImageToImageFilterIF2IF2 {
   public:
     enum  {  SetDimension = 2 };
     enum  {  SpeedImageDimension = 2 };
     enum LabelType {  FarPoint = 0,  AlivePoint = 1,  TrialPoint = 2,  InitialTrialPoint = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  SpeedConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToLevelSetCheck = 1 };
     enum  {  LevelSetOStreamWritableCheck = 1 };
     static itkFastMarchingImageFilterIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetAlivePoints(itkVectorContainerUILSNF2 * points);
     itkVectorContainerUILSNF2_Pointer GetAlivePoints();
     void SetTrialPoints(itkVectorContainerUILSNF2 * points);
     itkVectorContainerUILSNF2_Pointer GetTrialPoints();
     itkImageUC2_Pointer GetLabelImage() const;
     void SetSpeedConstant(double value);
     virtual double const & GetSpeedConstant() const;
     virtual void SetNormalizationFactor(double const _arg);
     virtual double GetNormalizationFactor() const;
     virtual void SetStoppingValue(double const _arg);
     virtual double const & GetStoppingValue() const;
     virtual void SetCollectPoints(bool const _arg);
     virtual bool const & GetCollectPoints() const;
     virtual void CollectPointsOn();
     virtual void CollectPointsOff();
     itkVectorContainerUILSNF2_Pointer GetProcessedPoints() const;
     virtual void SetOutputSize(itkSize2 const & size);
     virtual itkSize2 GetOutputSize() const;
     virtual void SetOutputRegion(itkImageRegion2 const _arg);
     virtual itkImageRegion2 const & GetOutputRegion() const;
     virtual void SetOutputSpacing(itkVectorD2 const _arg);
     virtual itkVectorD2 const & GetOutputSpacing() const;
     virtual void SetOutputDirection(itkMatrixD22 const _arg);
     virtual itkMatrixD22 const & GetOutputDirection() const;
     virtual void SetOutputOrigin(itkPointD2 const _arg);
     virtual itkPointD2 const & GetOutputOrigin() const;
     virtual void SetOverrideOutputInformation(bool const _arg);
     virtual bool const & GetOverrideOutputInformation() const;
     virtual void OverrideOutputInformationOn();
     virtual void OverrideOutputInformationOff();
   private:
     itkFastMarchingImageFilterIF2IF2(itkFastMarchingImageFilterIF2IF2 const & arg0);
     void operator=(itkFastMarchingImageFilterIF2IF2 const & arg0);
   protected:
     itkFastMarchingImageFilterIF2IF2();
     ~itkFastMarchingImageFilterIF2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void Initialize(itkImageF2 * arg0);
     virtual void UpdateNeighbors(itkIndex2 const & index, itkImageF2 const * arg1, itkImageF2 * arg2);
     virtual double UpdateValue(itkIndex2 const & index, itkImageF2 const * arg1, itkImageF2 * arg2);
     itkFastMarchingImageFilterIF2IF2::AxisNodeType const & GetNodeUsedInCalculation(unsigned int idx) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
     virtual float const & GetLargeValue() const;
     virtual itkIndex2 const & GetStartIndex() const;
     virtual itkIndex2 const & GetLastIndex() const;
 };


 class itkFastMarchingImageFilterIF2IF2_Pointer {
   public:
     itkFastMarchingImageFilterIF2IF2_Pointer();
     itkFastMarchingImageFilterIF2IF2_Pointer(itkFastMarchingImageFilterIF2IF2_Pointer const & p);
     itkFastMarchingImageFilterIF2IF2_Pointer(itkFastMarchingImageFilterIF2IF2 * p);
     ~itkFastMarchingImageFilterIF2IF2_Pointer();
     itkFastMarchingImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkFastMarchingImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkFastMarchingImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkFastMarchingImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkFastMarchingImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkFastMarchingImageFilterIF2IF2_Pointer const & r) const;
     itkFastMarchingImageFilterIF2IF2_Pointer & operator=(itkFastMarchingImageFilterIF2IF2_Pointer const & r);
     itkFastMarchingImageFilterIF2IF2_Pointer & operator=(itkFastMarchingImageFilterIF2IF2 * r);
     itkFastMarchingImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkFastMarchingImageFilterIF3IF3 : public itkImageToImageFilterIF3IF3 {
   public:
     enum  {  SetDimension = 3 };
     enum  {  SpeedImageDimension = 3 };
     enum LabelType {  FarPoint = 0,  AlivePoint = 1,  TrialPoint = 2,  InitialTrialPoint = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  SpeedConvertibleToDoubleCheck = 1 };
     enum  {  DoubleConvertibleToLevelSetCheck = 1 };
     enum  {  LevelSetOStreamWritableCheck = 1 };
     static itkFastMarchingImageFilterIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     void SetAlivePoints(itkVectorContainerUILSNF3 * points);
     itkVectorContainerUILSNF3_Pointer GetAlivePoints();
     void SetTrialPoints(itkVectorContainerUILSNF3 * points);
     itkVectorContainerUILSNF3_Pointer GetTrialPoints();
     itkImageUC3_Pointer GetLabelImage() const;
     void SetSpeedConstant(double value);
     virtual double const & GetSpeedConstant() const;
     virtual void SetNormalizationFactor(double const _arg);
     virtual double GetNormalizationFactor() const;
     virtual void SetStoppingValue(double const _arg);
     virtual double const & GetStoppingValue() const;
     virtual void SetCollectPoints(bool const _arg);
     virtual bool const & GetCollectPoints() const;
     virtual void CollectPointsOn();
     virtual void CollectPointsOff();
     itkVectorContainerUILSNF3_Pointer GetProcessedPoints() const;
     virtual void SetOutputSize(itkSize3 const & size);
     virtual itkSize3 GetOutputSize() const;
     virtual void SetOutputRegion(itkImageRegion3 const _arg);
     virtual itkImageRegion3 const & GetOutputRegion() const;
     virtual void SetOutputSpacing(itkVectorD3 const _arg);
     virtual itkVectorD3 const & GetOutputSpacing() const;
     virtual void SetOutputDirection(itkMatrixD33 const _arg);
     virtual itkMatrixD33 const & GetOutputDirection() const;
     virtual void SetOutputOrigin(itkPointD3 const _arg);
     virtual itkPointD3 const & GetOutputOrigin() const;
     virtual void SetOverrideOutputInformation(bool const _arg);
     virtual bool const & GetOverrideOutputInformation() const;
     virtual void OverrideOutputInformationOn();
     virtual void OverrideOutputInformationOff();
   private:
     itkFastMarchingImageFilterIF3IF3(itkFastMarchingImageFilterIF3IF3 const & arg0);
     void operator=(itkFastMarchingImageFilterIF3IF3 const & arg0);
   protected:
     itkFastMarchingImageFilterIF3IF3();
     ~itkFastMarchingImageFilterIF3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     virtual void Initialize(itkImageF3 * arg0);
     virtual void UpdateNeighbors(itkIndex3 const & index, itkImageF3 const * arg1, itkImageF3 * arg2);
     virtual double UpdateValue(itkIndex3 const & index, itkImageF3 const * arg1, itkImageF3 * arg2);
     itkFastMarchingImageFilterIF3IF3::AxisNodeType const & GetNodeUsedInCalculation(unsigned int idx) const;
     virtual void GenerateData();
     virtual void GenerateOutputInformation();
     virtual void EnlargeOutputRequestedRegion(itkDataObject * output);
     virtual float const & GetLargeValue() const;
     virtual itkIndex3 const & GetStartIndex() const;
     virtual itkIndex3 const & GetLastIndex() const;
 };


 class itkFastMarchingImageFilterIF3IF3_Pointer {
   public:
     itkFastMarchingImageFilterIF3IF3_Pointer();
     itkFastMarchingImageFilterIF3IF3_Pointer(itkFastMarchingImageFilterIF3IF3_Pointer const & p);
     itkFastMarchingImageFilterIF3IF3_Pointer(itkFastMarchingImageFilterIF3IF3 * p);
     ~itkFastMarchingImageFilterIF3IF3_Pointer();
     itkFastMarchingImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkFastMarchingImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkFastMarchingImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkFastMarchingImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkFastMarchingImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkFastMarchingImageFilterIF3IF3_Pointer const & r) const;
     itkFastMarchingImageFilterIF3IF3_Pointer & operator=(itkFastMarchingImageFilterIF3IF3_Pointer const & r);
     itkFastMarchingImageFilterIF3IF3_Pointer & operator=(itkFastMarchingImageFilterIF3IF3 * r);
     itkFastMarchingImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


