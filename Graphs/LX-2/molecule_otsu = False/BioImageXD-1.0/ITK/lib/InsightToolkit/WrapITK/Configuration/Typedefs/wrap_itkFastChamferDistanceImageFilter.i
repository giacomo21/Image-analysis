// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkFastChamferDistanceImageFilterChicken
#endif
#ifdef SWIGCSHARP
%module itkFastChamferDistanceImageFilterCsharp
#endif
#ifdef SWIGGUILE
%module itkFastChamferDistanceImageFilterGuile
#endif
#ifdef SWIGJAVA
%module itkFastChamferDistanceImageFilterJava
#endif
#ifdef SWIGLUA
%module itkFastChamferDistanceImageFilterLua
#endif
#ifdef SWIGMODULA3
%module itkFastChamferDistanceImageFilterModula3
#endif
#ifdef SWIGMZSCHEME
%module itkFastChamferDistanceImageFilterMzscheme
#endif
#ifdef SWIGOCAML
%module itkFastChamferDistanceImageFilterOcaml
#endif
#ifdef SWIGPERL
%module itkFastChamferDistanceImageFilterPerl
#endif
#ifdef SWIGPERL5
%module itkFastChamferDistanceImageFilterPerl5
#endif
#ifdef SWIGPHP
%module itkFastChamferDistanceImageFilterPhp
#endif
#ifdef SWIGPHP4
%module itkFastChamferDistanceImageFilterPhp4
#endif
#ifdef SWIGPHP5
%module itkFastChamferDistanceImageFilterPhp5
#endif
#ifdef SWIGPIKE
%module itkFastChamferDistanceImageFilterPike
#endif
#ifdef SWIGPYTHON
%module itkFastChamferDistanceImageFilterPython
#endif
#ifdef SWIGR
%module itkFastChamferDistanceImageFilterR
#endif
#ifdef SWIGRUBY
%module itkFastChamferDistanceImageFilterRuby
#endif
#ifdef SWIGSEXP
%module itkFastChamferDistanceImageFilterSexp
#endif
#ifdef SWIGTCL
%module itkFastChamferDistanceImageFilterTcl
#endif
#ifdef SWIGXML
%module itkFastChamferDistanceImageFilterXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "DistanceMap.includes"
%}


%{
%}




%import wrap_itkNarrowBand.i
%import wrap_ITKCommonBase.i
%import wrap_ITKRegions.i
%import wrap_itkImageToImageFilterA.i


%include itk.i
%include wrap_itkFastChamferDistanceImageFilter_ext.i


 class itkFastChamferDistanceImageFilterID2ID2 : public itkImageToImageFilterID2ID2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  SameTypeCheck = 1 };
     enum  {  FloatConvertibleToPixelTypeCheck = 1 };
     enum  {  PixelTypeConvertibleToFloatCheck = 1 };
     enum  {  PixelTypeGreaterThanFloatCheck = 1 };
     enum  {  PixelTypeLessThanFloatCheck = 1 };
     enum  {  PixelTypeFloatAdditiveOperatorsCheck = 1 };
     enum  {  FloatGreaterThanPixelTypeCheck = 1 };
     enum  {  FloatLessThanPixelTypeCheck = 1 };
     static itkFastChamferDistanceImageFilterID2ID2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetWeights(float * data);
     virtual float const * GetWeights() const;
     virtual void SetMaximumDistance(float const _arg);
     virtual float GetMaximumDistance() const;
     void SetRegionToProcess(itkImageRegion2 const & r);
     itkImageRegion2 GetRegionToProcess() const;
     void SetNarrowBand(itkNarrowBandBNI2D * ptr);
     itkNarrowBandBNI2D_Pointer GetNarrowBand() const;
   private:
     itkFastChamferDistanceImageFilterID2ID2(itkFastChamferDistanceImageFilterID2ID2 const & arg0);
     void operator=(itkFastChamferDistanceImageFilterID2ID2 const & arg0);
   protected:
     itkFastChamferDistanceImageFilterID2ID2();
     ~itkFastChamferDistanceImageFilterID2ID2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     void GenerateDataND();
     virtual void GenerateData();
 };


 class itkFastChamferDistanceImageFilterID2ID2_Pointer {
   public:
     itkFastChamferDistanceImageFilterID2ID2_Pointer();
     itkFastChamferDistanceImageFilterID2ID2_Pointer(itkFastChamferDistanceImageFilterID2ID2_Pointer const & p);
     itkFastChamferDistanceImageFilterID2ID2_Pointer(itkFastChamferDistanceImageFilterID2ID2 * p);
     ~itkFastChamferDistanceImageFilterID2ID2_Pointer();
     itkFastChamferDistanceImageFilterID2ID2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkFastChamferDistanceImageFilterID2ID2 * GetPointer() const;
     bool operator<(itkFastChamferDistanceImageFilterID2ID2_Pointer const & r) const;
     bool operator>(itkFastChamferDistanceImageFilterID2ID2_Pointer const & r) const;
     bool operator<=(itkFastChamferDistanceImageFilterID2ID2_Pointer const & r) const;
     bool operator>=(itkFastChamferDistanceImageFilterID2ID2_Pointer const & r) const;
     itkFastChamferDistanceImageFilterID2ID2_Pointer & operator=(itkFastChamferDistanceImageFilterID2ID2_Pointer const & r);
     itkFastChamferDistanceImageFilterID2ID2_Pointer & operator=(itkFastChamferDistanceImageFilterID2ID2 * r);
     itkFastChamferDistanceImageFilterID2ID2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkFastChamferDistanceImageFilterID3ID3 : public itkImageToImageFilterID3ID3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  SameTypeCheck = 1 };
     enum  {  FloatConvertibleToPixelTypeCheck = 1 };
     enum  {  PixelTypeConvertibleToFloatCheck = 1 };
     enum  {  PixelTypeGreaterThanFloatCheck = 1 };
     enum  {  PixelTypeLessThanFloatCheck = 1 };
     enum  {  PixelTypeFloatAdditiveOperatorsCheck = 1 };
     enum  {  FloatGreaterThanPixelTypeCheck = 1 };
     enum  {  FloatLessThanPixelTypeCheck = 1 };
     static itkFastChamferDistanceImageFilterID3ID3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetWeights(float * data);
     virtual float const * GetWeights() const;
     virtual void SetMaximumDistance(float const _arg);
     virtual float GetMaximumDistance() const;
     void SetRegionToProcess(itkImageRegion3 const & r);
     itkImageRegion3 GetRegionToProcess() const;
     void SetNarrowBand(itkNarrowBandBNI3D * ptr);
     itkNarrowBandBNI3D_Pointer GetNarrowBand() const;
   private:
     itkFastChamferDistanceImageFilterID3ID3(itkFastChamferDistanceImageFilterID3ID3 const & arg0);
     void operator=(itkFastChamferDistanceImageFilterID3ID3 const & arg0);
   protected:
     itkFastChamferDistanceImageFilterID3ID3();
     ~itkFastChamferDistanceImageFilterID3ID3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     void GenerateDataND();
     virtual void GenerateData();
 };


 class itkFastChamferDistanceImageFilterID3ID3_Pointer {
   public:
     itkFastChamferDistanceImageFilterID3ID3_Pointer();
     itkFastChamferDistanceImageFilterID3ID3_Pointer(itkFastChamferDistanceImageFilterID3ID3_Pointer const & p);
     itkFastChamferDistanceImageFilterID3ID3_Pointer(itkFastChamferDistanceImageFilterID3ID3 * p);
     ~itkFastChamferDistanceImageFilterID3ID3_Pointer();
     itkFastChamferDistanceImageFilterID3ID3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkFastChamferDistanceImageFilterID3ID3 * GetPointer() const;
     bool operator<(itkFastChamferDistanceImageFilterID3ID3_Pointer const & r) const;
     bool operator>(itkFastChamferDistanceImageFilterID3ID3_Pointer const & r) const;
     bool operator<=(itkFastChamferDistanceImageFilterID3ID3_Pointer const & r) const;
     bool operator>=(itkFastChamferDistanceImageFilterID3ID3_Pointer const & r) const;
     itkFastChamferDistanceImageFilterID3ID3_Pointer & operator=(itkFastChamferDistanceImageFilterID3ID3_Pointer const & r);
     itkFastChamferDistanceImageFilterID3ID3_Pointer & operator=(itkFastChamferDistanceImageFilterID3ID3 * r);
     itkFastChamferDistanceImageFilterID3ID3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkFastChamferDistanceImageFilterIF2IF2 : public itkImageToImageFilterIF2IF2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  OutputImageDimension = 2 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  SameTypeCheck = 1 };
     enum  {  FloatConvertibleToPixelTypeCheck = 1 };
     enum  {  PixelTypeConvertibleToFloatCheck = 1 };
     enum  {  PixelTypeGreaterThanFloatCheck = 1 };
     enum  {  PixelTypeLessThanFloatCheck = 1 };
     enum  {  PixelTypeFloatAdditiveOperatorsCheck = 1 };
     enum  {  FloatGreaterThanPixelTypeCheck = 1 };
     enum  {  FloatLessThanPixelTypeCheck = 1 };
     static itkFastChamferDistanceImageFilterIF2IF2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetWeights(float * data);
     virtual float const * GetWeights() const;
     virtual void SetMaximumDistance(float const _arg);
     virtual float GetMaximumDistance() const;
     void SetRegionToProcess(itkImageRegion2 const & r);
     itkImageRegion2 GetRegionToProcess() const;
     void SetNarrowBand(itkNarrowBandBNI2F * ptr);
     itkNarrowBandBNI2F_Pointer GetNarrowBand() const;
   private:
     itkFastChamferDistanceImageFilterIF2IF2(itkFastChamferDistanceImageFilterIF2IF2 const & arg0);
     void operator=(itkFastChamferDistanceImageFilterIF2IF2 const & arg0);
   protected:
     itkFastChamferDistanceImageFilterIF2IF2();
     ~itkFastChamferDistanceImageFilterIF2IF2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     void GenerateDataND();
     virtual void GenerateData();
 };


 class itkFastChamferDistanceImageFilterIF2IF2_Pointer {
   public:
     itkFastChamferDistanceImageFilterIF2IF2_Pointer();
     itkFastChamferDistanceImageFilterIF2IF2_Pointer(itkFastChamferDistanceImageFilterIF2IF2_Pointer const & p);
     itkFastChamferDistanceImageFilterIF2IF2_Pointer(itkFastChamferDistanceImageFilterIF2IF2 * p);
     ~itkFastChamferDistanceImageFilterIF2IF2_Pointer();
     itkFastChamferDistanceImageFilterIF2IF2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkFastChamferDistanceImageFilterIF2IF2 * GetPointer() const;
     bool operator<(itkFastChamferDistanceImageFilterIF2IF2_Pointer const & r) const;
     bool operator>(itkFastChamferDistanceImageFilterIF2IF2_Pointer const & r) const;
     bool operator<=(itkFastChamferDistanceImageFilterIF2IF2_Pointer const & r) const;
     bool operator>=(itkFastChamferDistanceImageFilterIF2IF2_Pointer const & r) const;
     itkFastChamferDistanceImageFilterIF2IF2_Pointer & operator=(itkFastChamferDistanceImageFilterIF2IF2_Pointer const & r);
     itkFastChamferDistanceImageFilterIF2IF2_Pointer & operator=(itkFastChamferDistanceImageFilterIF2IF2 * r);
     itkFastChamferDistanceImageFilterIF2IF2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkFastChamferDistanceImageFilterIF3IF3 : public itkImageToImageFilterIF3IF3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  OutputImageDimension = 3 };
     enum  {  SameDimensionCheck = 1 };
     enum  {  SameTypeCheck = 1 };
     enum  {  FloatConvertibleToPixelTypeCheck = 1 };
     enum  {  PixelTypeConvertibleToFloatCheck = 1 };
     enum  {  PixelTypeGreaterThanFloatCheck = 1 };
     enum  {  PixelTypeLessThanFloatCheck = 1 };
     enum  {  PixelTypeFloatAdditiveOperatorsCheck = 1 };
     enum  {  FloatGreaterThanPixelTypeCheck = 1 };
     enum  {  FloatLessThanPixelTypeCheck = 1 };
     static itkFastChamferDistanceImageFilterIF3IF3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetWeights(float * data);
     virtual float const * GetWeights() const;
     virtual void SetMaximumDistance(float const _arg);
     virtual float GetMaximumDistance() const;
     void SetRegionToProcess(itkImageRegion3 const & r);
     itkImageRegion3 GetRegionToProcess() const;
     void SetNarrowBand(itkNarrowBandBNI3F * ptr);
     itkNarrowBandBNI3F_Pointer GetNarrowBand() const;
   private:
     itkFastChamferDistanceImageFilterIF3IF3(itkFastChamferDistanceImageFilterIF3IF3 const & arg0);
     void operator=(itkFastChamferDistanceImageFilterIF3IF3 const & arg0);
   protected:
     itkFastChamferDistanceImageFilterIF3IF3();
     ~itkFastChamferDistanceImageFilterIF3IF3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
     void GenerateDataND();
     virtual void GenerateData();
 };


 class itkFastChamferDistanceImageFilterIF3IF3_Pointer {
   public:
     itkFastChamferDistanceImageFilterIF3IF3_Pointer();
     itkFastChamferDistanceImageFilterIF3IF3_Pointer(itkFastChamferDistanceImageFilterIF3IF3_Pointer const & p);
     itkFastChamferDistanceImageFilterIF3IF3_Pointer(itkFastChamferDistanceImageFilterIF3IF3 * p);
     ~itkFastChamferDistanceImageFilterIF3IF3_Pointer();
     itkFastChamferDistanceImageFilterIF3IF3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkFastChamferDistanceImageFilterIF3IF3 * GetPointer() const;
     bool operator<(itkFastChamferDistanceImageFilterIF3IF3_Pointer const & r) const;
     bool operator>(itkFastChamferDistanceImageFilterIF3IF3_Pointer const & r) const;
     bool operator<=(itkFastChamferDistanceImageFilterIF3IF3_Pointer const & r) const;
     bool operator>=(itkFastChamferDistanceImageFilterIF3IF3_Pointer const & r) const;
     itkFastChamferDistanceImageFilterIF3IF3_Pointer & operator=(itkFastChamferDistanceImageFilterIF3IF3_Pointer const & r);
     itkFastChamferDistanceImageFilterIF3IF3_Pointer & operator=(itkFastChamferDistanceImageFilterIF3IF3 * r);
     itkFastChamferDistanceImageFilterIF3IF3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


