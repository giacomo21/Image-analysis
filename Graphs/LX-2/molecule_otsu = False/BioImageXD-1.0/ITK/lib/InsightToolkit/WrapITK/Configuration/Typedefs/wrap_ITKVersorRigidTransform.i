// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module ITKVersorRigidTransformChicken
#endif
#ifdef SWIGCSHARP
%module ITKVersorRigidTransformCsharp
#endif
#ifdef SWIGGUILE
%module ITKVersorRigidTransformGuile
#endif
#ifdef SWIGJAVA
%module ITKVersorRigidTransformJava
#endif
#ifdef SWIGLUA
%module ITKVersorRigidTransformLua
#endif
#ifdef SWIGMODULA3
%module ITKVersorRigidTransformModula3
#endif
#ifdef SWIGMZSCHEME
%module ITKVersorRigidTransformMzscheme
#endif
#ifdef SWIGOCAML
%module ITKVersorRigidTransformOcaml
#endif
#ifdef SWIGPERL
%module ITKVersorRigidTransformPerl
#endif
#ifdef SWIGPERL5
%module ITKVersorRigidTransformPerl5
#endif
#ifdef SWIGPHP
%module ITKVersorRigidTransformPhp
#endif
#ifdef SWIGPHP4
%module ITKVersorRigidTransformPhp4
#endif
#ifdef SWIGPHP5
%module ITKVersorRigidTransformPhp5
#endif
#ifdef SWIGPIKE
%module ITKVersorRigidTransformPike
#endif
#ifdef SWIGPYTHON
%module ITKVersorRigidTransformPython
#endif
#ifdef SWIGR
%module ITKVersorRigidTransformR
#endif
#ifdef SWIGRUBY
%module ITKVersorRigidTransformRuby
#endif
#ifdef SWIGSEXP
%module ITKVersorRigidTransformSexp
#endif
#ifdef SWIGTCL
%module ITKVersorRigidTransformTcl
#endif
#ifdef SWIGXML
%module ITKVersorRigidTransformXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
%}


%{
%}




%import wrap_itkPoint.i
%import wrap_itkArray2D.i
%import wrap_itkVersorTransform.i
%import wrap_itkVector.i
%import wrap_itkArray.i
%import wrap_itkMatrix.i
%import wrap_ITKCommonBase.i


%include itk.i
%include wrap_ITKVersorRigidTransform_ext.i


 class itkVersorRigid3DTransformD : public itkVersorTransformD {
   public:
     enum  {  SpaceDimension = 3 };
     enum  {  InputSpaceDimension = 3 };
     enum  {  OutputSpaceDimension = 3 };
     enum  {  ParametersDimension = 6 };
     static itkVersorRigid3DTransformD_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     virtual void SetParameters(itkArrayD const & parameters);
     virtual itkArrayD const & GetParameters() const;
     virtual itkArray2DD const & GetJacobian(itkPointD3 const & point) const;
   private:
     itkVersorRigid3DTransformD(itkVersorRigid3DTransformD const & arg0);
     void operator=(itkVersorRigid3DTransformD const & arg0);
   protected:
     itkVersorRigid3DTransformD(unsigned int outputSpaceDim, unsigned int paramDim);
     itkVersorRigid3DTransformD(itkMatrixD33 const & matrix, itkVectorD3 const & offset);
     itkVersorRigid3DTransformD();
     ~itkVersorRigid3DTransformD();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkVersorRigid3DTransformD_Pointer {
   public:
     itkVersorRigid3DTransformD_Pointer();
     itkVersorRigid3DTransformD_Pointer(itkVersorRigid3DTransformD_Pointer const & p);
     itkVersorRigid3DTransformD_Pointer(itkVersorRigid3DTransformD * p);
     ~itkVersorRigid3DTransformD_Pointer();
     itkVersorRigid3DTransformD * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkVersorRigid3DTransformD * GetPointer() const;
     bool operator<(itkVersorRigid3DTransformD_Pointer const & r) const;
     bool operator>(itkVersorRigid3DTransformD_Pointer const & r) const;
     bool operator<=(itkVersorRigid3DTransformD_Pointer const & r) const;
     bool operator>=(itkVersorRigid3DTransformD_Pointer const & r) const;
     itkVersorRigid3DTransformD_Pointer & operator=(itkVersorRigid3DTransformD_Pointer const & r);
     itkVersorRigid3DTransformD_Pointer & operator=(itkVersorRigid3DTransformD * r);
     itkVersorRigid3DTransformD * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


