// This file is automatically generated.
// Do not modify this file manually.


#ifdef SWIGCHICKEN
%module itkStatisticsLabelObjectChicken
#endif
#ifdef SWIGCSHARP
%module itkStatisticsLabelObjectCsharp
#endif
#ifdef SWIGGUILE
%module itkStatisticsLabelObjectGuile
#endif
#ifdef SWIGJAVA
%module itkStatisticsLabelObjectJava
#endif
#ifdef SWIGLUA
%module itkStatisticsLabelObjectLua
#endif
#ifdef SWIGMODULA3
%module itkStatisticsLabelObjectModula3
#endif
#ifdef SWIGMZSCHEME
%module itkStatisticsLabelObjectMzscheme
#endif
#ifdef SWIGOCAML
%module itkStatisticsLabelObjectOcaml
#endif
#ifdef SWIGPERL
%module itkStatisticsLabelObjectPerl
#endif
#ifdef SWIGPERL5
%module itkStatisticsLabelObjectPerl5
#endif
#ifdef SWIGPHP
%module itkStatisticsLabelObjectPhp
#endif
#ifdef SWIGPHP4
%module itkStatisticsLabelObjectPhp4
#endif
#ifdef SWIGPHP5
%module itkStatisticsLabelObjectPhp5
#endif
#ifdef SWIGPIKE
%module itkStatisticsLabelObjectPike
#endif
#ifdef SWIGPYTHON
%module itkStatisticsLabelObjectPython
#endif
#ifdef SWIGR
%module itkStatisticsLabelObjectR
#endif
#ifdef SWIGRUBY
%module itkStatisticsLabelObjectRuby
#endif
#ifdef SWIGSEXP
%module itkStatisticsLabelObjectSexp
#endif
#ifdef SWIGTCL
%module itkStatisticsLabelObjectTcl
#endif
#ifdef SWIGXML
%module itkStatisticsLabelObjectXml
#endif

%{
#include "VXLNumerics.includes"
#include "Base.includes"
#include "Transforms.includes"
#include "Numerics.includes"
#include "BinaryMorphology.includes"
%}


%{
%}




%import wrap_itkPoint.i
%import wrap_itkAffineTransform.i
%import wrap_itkLabelObject.i
%import wrap_itkIndex.i
%import wrap_itkShapeLabelObject.i
%import wrap_itkVector.i
%import wrap_itkMatrix.i
%import wrap_ITKCommonBase.i
%import wrap_itkHistogram.i


%include itk.i
%include wrap_itkStatisticsLabelObject_ext.i


 class itkStatisticsLabelObjectUL2 : public itkShapeLabelObjectUL2 {
   public:
     enum  {  ImageDimension = 2 };
     enum  {  MINIMUM = 200 };
     enum  {  MAXIMUM = 201 };
     enum  {  MEAN = 202 };
     enum  {  SUM = 203 };
     enum  {  SIGMA = 204 };
     enum  {  VARIANCE = 205 };
     enum  {  MEDIAN = 206 };
     enum  {  MAXIMUM_INDEX = 207 };
     enum  {  MINIMUM_INDEX = 208 };
     enum  {  CENTER_OF_GRAVITY = 209 };
     enum  {  PRINCIPAL_MOMENTS = 211 };
     enum  {  PRINCIPAL_AXES = 212 };
     enum  {  KURTOSIS = 213 };
     enum  {  SKEWNESS = 214 };
     enum  {  ELONGATION = 215 };
     enum  {  HISTOGRAM = 216 };
     enum  {  FLATNESS = 217 };
     static itkStatisticsLabelObjectUL2_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     static unsigned int GetAttributeFromName(std::string const & s);
     static std::string GetNameFromAttribute(unsigned int const & a);
     virtual void CopyAttributesFrom(itkLabelObjectUL2 const * lo);
     double const & GetMinimum() const;
     void SetMinimum(double const & v);
     double const & GetMaximum() const;
     void SetMaximum(double const & v);
     double const & GetMean() const;
     void SetMean(double const & v);
     double const & GetSum() const;
     void SetSum(double const & v);
     double const & GetSigma() const;
     void SetSigma(double const & v);
     double const & GetVariance() const;
     void SetVariance(double const & v);
     double const & GetMedian() const;
     void SetMedian(double const & v);
     itkIndex2 const & GetMaximumIndex() const;
     void SetMaximumIndex(itkIndex2 const & v);
     itkIndex2 const & GetMinimumIndex() const;
     void SetMinimumIndex(itkIndex2 const & v);
     itkPointD2 const & GetCenterOfGravity() const;
     void SetCenterOfGravity(itkPointD2 const & v);
     itkVectorD2 const & GetPrincipalMoments() const;
     void SetPrincipalMoments(itkVectorD2 const & v);
     itkMatrixD22 const & GetPrincipalAxes() const;
     void SetPrincipalAxes(itkMatrixD22 const & v);
     double const & GetSkewness() const;
     void SetSkewness(double const & v);
     double const & GetKurtosis() const;
     void SetKurtosis(double const & v);
     double const & GetElongation() const;
     void SetElongation(double const & v);
     itkHistogramD const * GetHistogram() const;
     void SetHistogram(itkHistogramD const * v);
     double const & GetFlatness() const;
     void SetFlatness(double const & v);
     itkAffineTransformD2_Pointer GetPrincipalAxesToPhysicalAxesTransform() const;
     itkAffineTransformD2_Pointer GetPhysicalAxesToPrincipalAxesTransform() const;
     ~itkStatisticsLabelObjectUL2();
   private:
     itkStatisticsLabelObjectUL2(itkStatisticsLabelObjectUL2 const & arg0);
     void operator=(itkStatisticsLabelObjectUL2 const & arg0);
   protected:
     itkStatisticsLabelObjectUL2();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkStatisticsLabelObjectUL2_Pointer {
   public:
     itkStatisticsLabelObjectUL2_Pointer();
     itkStatisticsLabelObjectUL2_Pointer(itkStatisticsLabelObjectUL2_Pointer const & p);
     itkStatisticsLabelObjectUL2_Pointer(itkStatisticsLabelObjectUL2 * p);
     ~itkStatisticsLabelObjectUL2_Pointer();
     itkStatisticsLabelObjectUL2 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkStatisticsLabelObjectUL2 * GetPointer() const;
     bool operator<(itkStatisticsLabelObjectUL2_Pointer const & r) const;
     bool operator>(itkStatisticsLabelObjectUL2_Pointer const & r) const;
     bool operator<=(itkStatisticsLabelObjectUL2_Pointer const & r) const;
     bool operator>=(itkStatisticsLabelObjectUL2_Pointer const & r) const;
     itkStatisticsLabelObjectUL2_Pointer & operator=(itkStatisticsLabelObjectUL2_Pointer const & r);
     itkStatisticsLabelObjectUL2_Pointer & operator=(itkStatisticsLabelObjectUL2 * r);
     itkStatisticsLabelObjectUL2 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


 class itkStatisticsLabelObjectUL3 : public itkShapeLabelObjectUL3 {
   public:
     enum  {  ImageDimension = 3 };
     enum  {  MINIMUM = 200 };
     enum  {  MAXIMUM = 201 };
     enum  {  MEAN = 202 };
     enum  {  SUM = 203 };
     enum  {  SIGMA = 204 };
     enum  {  VARIANCE = 205 };
     enum  {  MEDIAN = 206 };
     enum  {  MAXIMUM_INDEX = 207 };
     enum  {  MINIMUM_INDEX = 208 };
     enum  {  CENTER_OF_GRAVITY = 209 };
     enum  {  PRINCIPAL_MOMENTS = 211 };
     enum  {  PRINCIPAL_AXES = 212 };
     enum  {  KURTOSIS = 213 };
     enum  {  SKEWNESS = 214 };
     enum  {  ELONGATION = 215 };
     enum  {  HISTOGRAM = 216 };
     enum  {  FLATNESS = 217 };
     static itkStatisticsLabelObjectUL3_Pointer New();
     virtual itkLightObject_Pointer CreateAnother() const;
     virtual char const * GetNameOfClass() const;
     static unsigned int GetAttributeFromName(std::string const & s);
     static std::string GetNameFromAttribute(unsigned int const & a);
     virtual void CopyAttributesFrom(itkLabelObjectUL3 const * lo);
     double const & GetMinimum() const;
     void SetMinimum(double const & v);
     double const & GetMaximum() const;
     void SetMaximum(double const & v);
     double const & GetMean() const;
     void SetMean(double const & v);
     double const & GetSum() const;
     void SetSum(double const & v);
     double const & GetSigma() const;
     void SetSigma(double const & v);
     double const & GetVariance() const;
     void SetVariance(double const & v);
     double const & GetMedian() const;
     void SetMedian(double const & v);
     itkIndex3 const & GetMaximumIndex() const;
     void SetMaximumIndex(itkIndex3 const & v);
     itkIndex3 const & GetMinimumIndex() const;
     void SetMinimumIndex(itkIndex3 const & v);
     itkPointD3 const & GetCenterOfGravity() const;
     void SetCenterOfGravity(itkPointD3 const & v);
     itkVectorD3 const & GetPrincipalMoments() const;
     void SetPrincipalMoments(itkVectorD3 const & v);
     itkMatrixD33 const & GetPrincipalAxes() const;
     void SetPrincipalAxes(itkMatrixD33 const & v);
     double const & GetSkewness() const;
     void SetSkewness(double const & v);
     double const & GetKurtosis() const;
     void SetKurtosis(double const & v);
     double const & GetElongation() const;
     void SetElongation(double const & v);
     itkHistogramD const * GetHistogram() const;
     void SetHistogram(itkHistogramD const * v);
     double const & GetFlatness() const;
     void SetFlatness(double const & v);
     itkAffineTransformD3_Pointer GetPrincipalAxesToPhysicalAxesTransform() const;
     itkAffineTransformD3_Pointer GetPhysicalAxesToPrincipalAxesTransform() const;
     ~itkStatisticsLabelObjectUL3();
   private:
     itkStatisticsLabelObjectUL3(itkStatisticsLabelObjectUL3 const & arg0);
     void operator=(itkStatisticsLabelObjectUL3 const & arg0);
   protected:
     itkStatisticsLabelObjectUL3();
     virtual void PrintSelf(std::basic_ostream< char, std::char_traits< char > > & os, itkIndent indent) const;
 };


 class itkStatisticsLabelObjectUL3_Pointer {
   public:
     itkStatisticsLabelObjectUL3_Pointer();
     itkStatisticsLabelObjectUL3_Pointer(itkStatisticsLabelObjectUL3_Pointer const & p);
     itkStatisticsLabelObjectUL3_Pointer(itkStatisticsLabelObjectUL3 * p);
     ~itkStatisticsLabelObjectUL3_Pointer();
     itkStatisticsLabelObjectUL3 * operator->() const;
     bool IsNotNull() const;
     bool IsNull() const;
     itkStatisticsLabelObjectUL3 * GetPointer() const;
     bool operator<(itkStatisticsLabelObjectUL3_Pointer const & r) const;
     bool operator>(itkStatisticsLabelObjectUL3_Pointer const & r) const;
     bool operator<=(itkStatisticsLabelObjectUL3_Pointer const & r) const;
     bool operator>=(itkStatisticsLabelObjectUL3_Pointer const & r) const;
     itkStatisticsLabelObjectUL3_Pointer & operator=(itkStatisticsLabelObjectUL3_Pointer const & r);
     itkStatisticsLabelObjectUL3_Pointer & operator=(itkStatisticsLabelObjectUL3 * r);
     itkStatisticsLabelObjectUL3 * Print(std::basic_ostream< char, std::char_traits< char > > & os) const;
   private:
     void Register();
     void UnRegister();
   protected:
 };


